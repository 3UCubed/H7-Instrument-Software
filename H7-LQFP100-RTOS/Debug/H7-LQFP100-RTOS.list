
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019b40  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08019de0  08019de0  00029de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a278  0801a278  0002a278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a280  0801a280  0002a280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a284  0801a284  0002a284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000134  24000000  0801a288  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000683c  24000140  0801a3bc  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400697c  0801a3bc  0003697c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040c49  00000000  00000000  00030162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007ca7  00000000  00000000  00070dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b98  00000000  00000000  00078a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002850  00000000  00000000  0007b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000467e3  00000000  00000000  0007de40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043205  00000000  00000000  000c4623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001969b0  00000000  00000000  00107828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029e1d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bc5c  00000000  00000000  0029e228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019dc8 	.word	0x08019dc8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	08019dc8 	.word	0x08019dc8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f004 fde1 	bl	8005230 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f002 fac2 	bl	8002bfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 fefc 	bl	8006480 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f002 fab5 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 f83f 	bl	8005738 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f002 fa9c 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 f831 	bl	8005738 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f002 fa8e 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 f823 	bl	8005738 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f002 fa80 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 f815 	bl	8005738 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f002 fa72 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 f806 	bl	8005738 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f002 fa63 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 fff7 	bl	8005738 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f002 fa54 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 ffe8 	bl	8005738 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f002 fa45 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 ffd9 	bl	8005738 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f002 fa36 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 ffca 	bl	8005738 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f002 fa27 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 ffbb 	bl	8005738 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f002 fa18 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 ffac 	bl	8005738 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f002 fa09 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f004 fcc9 	bl	8005230 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f002 f9aa 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 ff34 	bl	8005738 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f002 f991 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 ff26 	bl	8005738 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f002 f983 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 ff18 	bl	8005738 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f002 f975 	bl	8002bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 ff0a 	bl	8005738 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 f967 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f009 fcac 	bl	800a358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f009 fca0 	bl	800a358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f009 fc94 	bl	800a358 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f006 fb3f 	bl	80070f8 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 f8bc 	bl	8002bfc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 f982 	bl	8004de8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 f97c 	bl	8004de8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f006 fadf 	bl	80070f8 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 f85c 	bl	8002bfc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f018 fc15 	bl	80193bc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f005 fea7 	bl	80068ec <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 f82a 	bl	8002bfc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 f8c2 	bl	8006d4c <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 f815 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f009 fb7f 	bl	800a358 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f006 fa2a 	bl	80070f8 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 ffa7 	bl	8002bfc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f005 fd74 	bl	80067ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f005 fd8b 	bl	80067e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f005 fd4b 	bl	80067ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f005 fd62 	bl	80067e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f005 fd43 	bl	80067ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f005 fd5a 	bl	80067e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f005 fd3b 	bl	80067ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f005 fd52 	bl	80067e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f005 fd33 	bl	80067ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f005 fd4a 	bl	80067e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f005 fd2b 	bl	80067ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f005 fd42 	bl	80067e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f005 fd23 	bl	80067ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f005 fd3a 	bl	80067e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f005 fd1b 	bl	80067ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f005 fd32 	bl	80067e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f005 fd13 	bl	80067ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f005 fd2a 	bl	80067e0 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000da8:	f245 5355 	movw	r3, #21845	; 0x5555
 8000dac:	81bb      	strh	r3, [r7, #12]
 8000dae:	2301      	movs	r3, #1
 8000db0:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <EE_ReadVariable+0x88>)
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <EE_ReadVariable+0x88>)
 8000db8:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f856 	bl	8000e6c <EE_FindValidPage>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000dc4:	89fb      	ldrh	r3, [r7, #14]
 8000dc6:	2bab      	cmp	r3, #171	; 0xab
 8000dc8:	d101      	bne.n	8000dce <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000dca:	23ab      	movs	r3, #171	; 0xab
 8000dcc:	e024      	b.n	8000e18 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8000dd4:	045b      	lsls	r3, r3, #17
 8000dd6:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	045a      	lsls	r2, r3, #17
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <EE_ReadVariable+0x8c>)
 8000de0:	4413      	add	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8000de4:	e012      	b.n	8000e0c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000dec:	89ba      	ldrh	r2, [r7, #12]
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d108      	bne.n	8000e06 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	3b20      	subs	r3, #32
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	82fb      	strh	r3, [r7, #22]

      break;
 8000e04:	e007      	b.n	8000e16 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	3b40      	subs	r3, #64	; 0x40
 8000e0a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	3320      	adds	r3, #32
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d8e7      	bhi.n	8000de6 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000e16:	8afb      	ldrh	r3, [r7, #22]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	081c0000 	.word	0x081c0000
 8000e24:	081bffe0 	.word	0x081bffe0

08000e28 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	80fb      	strh	r3, [r7, #6]
 8000e34:	4613      	mov	r3, r2
 8000e36:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000e3c:	88ba      	ldrh	r2, [r7, #4]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f858 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	2b80      	cmp	r3, #128	; 0x80
 8000e50:	d107      	bne.n	8000e62 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000e52:	88ba      	ldrh	r2, [r7, #4]
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f8ff 	bl	800105c <EE_PageTransfer>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000e62:	89fb      	ldrh	r3, [r7, #14]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000e76:	2306      	movs	r3, #6
 8000e78:	81fb      	strh	r3, [r7, #14]
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <EE_FindValidPage+0x84>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <EE_FindValidPage+0x88>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d01b      	beq.n	8000ec8 <EE_FindValidPage+0x5c>
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d125      	bne.n	8000ee0 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d108      	bne.n	8000eac <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d101      	bne.n	8000ea8 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e01c      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e01a      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d108      	bne.n	8000ec4 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000eb2:	89bb      	ldrh	r3, [r7, #12]
 8000eb4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d101      	bne.n	8000ec0 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e010      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e00e      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000ec4:	23ab      	movs	r3, #171	; 0xab
 8000ec6:	e00c      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e007      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000ed2:	89bb      	ldrh	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e002      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000edc:	23ab      	movs	r3, #171	; 0xab
 8000ede:	e000      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000ee0:	2300      	movs	r3, #0
  }
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	081c0000 	.word	0x081c0000
 8000ef4:	081e0000 	.word	0x081e0000

08000ef8 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b096      	sub	sp, #88	; 0x58
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	80fb      	strh	r3, [r7, #6]
 8000f04:	4613      	mov	r3, r2
 8000f06:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000f14:	4b4d      	ldr	r3, [pc, #308]	; (800104c <EE_VerifyPageFullWriteVariable+0x154>)
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54
 8000f18:	4b4d      	ldr	r3, [pc, #308]	; (8001050 <EE_VerifyPageFullWriteVariable+0x158>)
 8000f1a:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8000f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f20:	2220      	movs	r2, #32
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f018 fa49 	bl	80193bc <memset>
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2220      	movs	r2, #32
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f018 fa40 	bl	80193bc <memset>
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff ff93 	bl	8000e6c <EE_FindValidPage>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000f4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f50:	2bab      	cmp	r3, #171	; 0xab
 8000f52:	d101      	bne.n	8000f58 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8000f54:	23ab      	movs	r3, #171	; 0xab
 8000f56:	e075      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000f58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f5c:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8000f60:	045b      	lsls	r3, r3, #17
 8000f62:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000f64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f68:	3301      	adds	r3, #1
 8000f6a:	045a      	lsls	r2, r3, #17
 8000f6c:	4b39      	ldr	r3, [pc, #228]	; (8001054 <EE_VerifyPageFullWriteVariable+0x15c>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f72:	f3bf 8f4f 	dsb	sy
}
 8000f76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f78:	f3bf 8f6f 	isb	sy
}
 8000f7c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a35      	ldr	r2, [pc, #212]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f8a:	4b33      	ldr	r3, [pc, #204]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f92:	f3bf 8f4f 	dsb	sy
}
 8000f96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f98:	f3bf 8f6f 	isb	sy
}
 8000f9c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f9e:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8000fa0:	e028      	b.n	8000ff4 <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000faa:	d120      	bne.n	8000fee <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8000fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f008 fef5 	bl	8009da4 <HAL_FLASH_Program>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000fc0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8000fc8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	e039      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8000fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd2:	3320      	adds	r3, #32
 8000fd4:	f107 020c 	add.w	r2, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f008 fee2 	bl	8009da4 <HAL_FLASH_Program>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8000fe6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	e02a      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8000fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ff0:	3340      	adds	r3, #64	; 0x40
 8000ff2:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8000ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3d2      	bcc.n	8000fa2 <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d11b      	bne.n	8001040 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001008:	f3bf 8f4f 	dsb	sy
}
 800100c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800100e:	f3bf 8f6f 	isb	sy
}
 8001012:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800101c:	f3bf 8f4f 	dsb	sy
}
 8001020:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001022:	f3bf 8f6f 	isb	sy
}
 8001026:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 800102e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001032:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001034:	f3bf 8f4f 	dsb	sy
}
 8001038:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103a:	f3bf 8f6f 	isb	sy
}
 800103e:	e000      	b.n	8001042 <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001040:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001042:	2380      	movs	r3, #128	; 0x80
}
 8001044:	4618      	mov	r0, r3
 8001046:	3758      	adds	r7, #88	; 0x58
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	081c0000 	.word	0x081c0000
 8001050:	081e0000 	.word	0x081e0000
 8001054:	081bffff 	.word	0x081bffff
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09c      	sub	sp, #112	; 0x70
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	80fb      	strh	r3, [r7, #6]
 8001068:	4613      	mov	r3, r2
 800106a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001072:	4bc3      	ldr	r3, [pc, #780]	; (8001380 <EE_PageTransfer+0x324>)
 8001074:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001076:	2300      	movs	r3, #0
 8001078:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001082:	2300      	movs	r3, #0
 8001084:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800108e:	2300      	movs	r3, #0
 8001090:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f018 f98b 	bl	80193bc <memset>
  uint32_t receive[8] = {0xEEEE};
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2220      	movs	r2, #32
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f018 f984 	bl	80193bc <memset>
 80010b4:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 80010b8:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fed6 	bl	8000e6c <EE_FindValidPage>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 80010c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d105      	bne.n	80010da <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80010ce:	4bac      	ldr	r3, [pc, #688]	; (8001380 <EE_PageTransfer+0x324>)
 80010d0:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80010d2:	2307      	movs	r3, #7
 80010d4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80010d8:	e00b      	b.n	80010f2 <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80010da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d105      	bne.n	80010ee <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80010e2:	4ba8      	ldr	r3, [pc, #672]	; (8001384 <EE_PageTransfer+0x328>)
 80010e4:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80010e6:	2306      	movs	r3, #6
 80010e8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80010ec:	e001      	b.n	80010f2 <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80010ee:	23ab      	movs	r3, #171	; 0xab
 80010f0:	e142      	b.n	8001378 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 80010f2:	f3bf 8f4f 	dsb	sy
}
 80010f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010f8:	f3bf 8f6f 	isb	sy
}
 80010fc:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010fe:	4ba2      	ldr	r3, [pc, #648]	; (8001388 <EE_PageTransfer+0x32c>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4aa1      	ldr	r2, [pc, #644]	; (8001388 <EE_PageTransfer+0x32c>)
 8001104:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001108:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800110a:	4b9f      	ldr	r3, [pc, #636]	; (8001388 <EE_PageTransfer+0x32c>)
 800110c:	2200      	movs	r2, #0
 800110e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001112:	f3bf 8f4f 	dsb	sy
}
 8001116:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001118:	f3bf 8f6f 	isb	sy
}
 800111c:	bf00      	nop
}
 800111e:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	461a      	mov	r2, r3
 8001126:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001128:	2001      	movs	r0, #1
 800112a:	f008 fe3b 	bl	8009da4 <HAL_FLASH_Program>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001134:	4b94      	ldr	r3, [pc, #592]	; (8001388 <EE_PageTransfer+0x32c>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d11b      	bne.n	8001178 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001140:	f3bf 8f4f 	dsb	sy
}
 8001144:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001146:	f3bf 8f6f 	isb	sy
}
 800114a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800114c:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <EE_PageTransfer+0x32c>)
 800114e:	2200      	movs	r2, #0
 8001150:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001154:	f3bf 8f4f 	dsb	sy
}
 8001158:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800115a:	f3bf 8f6f 	isb	sy
}
 800115e:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001160:	4b89      	ldr	r3, [pc, #548]	; (8001388 <EE_PageTransfer+0x32c>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	4a88      	ldr	r2, [pc, #544]	; (8001388 <EE_PageTransfer+0x32c>)
 8001166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800116c:	f3bf 8f4f 	dsb	sy
}
 8001170:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001172:	f3bf 8f6f 	isb	sy
}
 8001176:	e000      	b.n	800117a <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001178:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800117a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001182:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001186:	b29b      	uxth	r3, r3
 8001188:	e0f6      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800118a:	88ba      	ldrh	r2, [r7, #4]
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff feb1 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 8001196:	4603      	mov	r3, r0
 8001198:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800119c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 80011a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80011a8:	e0e6      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80011b0:	e031      	b.n	8001216 <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80011b2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011b6:	4a75      	ldr	r2, [pc, #468]	; (800138c <EE_PageTransfer+0x330>)
 80011b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d024      	beq.n	800120c <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80011c2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011c6:	4a71      	ldr	r2, [pc, #452]	; (800138c <EE_PageTransfer+0x330>)
 80011c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011cc:	4970      	ldr	r1, [pc, #448]	; (8001390 <EE_PageTransfer+0x334>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fde2 	bl	8000d98 <EE_ReadVariable>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80011da:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d014      	beq.n	800120c <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80011e2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011e6:	4a69      	ldr	r2, [pc, #420]	; (800138c <EE_PageTransfer+0x330>)
 80011e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ec:	4a68      	ldr	r2, [pc, #416]	; (8001390 <EE_PageTransfer+0x334>)
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fe80 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80011fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001206:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800120a:	e0b5      	b.n	8001378 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800120c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001210:	3301      	adds	r3, #1
 8001212:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001216:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800121a:	2b1a      	cmp	r3, #26
 800121c:	d9c9      	bls.n	80011b2 <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 800121e:	f008 fe53 	bl	8009ec8 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001222:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <EE_PageTransfer+0x338>)
 8001224:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001228:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800122a:	2300      	movs	r3, #0
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 800122e:	2302      	movs	r3, #2
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001232:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001236:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800123c:	2320      	movs	r3, #32
 800123e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001240:	f3bf 8f4f 	dsb	sy
}
 8001244:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001246:	f3bf 8f6f 	isb	sy
}
 800124a:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800124c:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <EE_PageTransfer+0x32c>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <EE_PageTransfer+0x32c>)
 8001252:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001256:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <EE_PageTransfer+0x32c>)
 800125a:	2200      	movs	r2, #0
 800125c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001260:	f3bf 8f4f 	dsb	sy
}
 8001264:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001266:	f3bf 8f6f 	isb	sy
}
 800126a:	bf00      	nop
}
 800126c:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800126e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f008 fefb 	bl	800a074 <HAL_FLASHEx_Erase>
 800127e:	4603      	mov	r3, r0
 8001280:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <EE_PageTransfer+0x32c>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d11b      	bne.n	80012c8 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001290:	f3bf 8f4f 	dsb	sy
}
 8001294:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001296:	f3bf 8f6f 	isb	sy
}
 800129a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800129c:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <EE_PageTransfer+0x32c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <EE_PageTransfer+0x32c>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	4a34      	ldr	r2, [pc, #208]	; (8001388 <EE_PageTransfer+0x32c>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012bc:	f3bf 8f4f 	dsb	sy
}
 80012c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012c2:	f3bf 8f6f 	isb	sy
}
 80012c6:	e000      	b.n	80012ca <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012c8:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80012ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 80012d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	e04e      	b.n	8001378 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 80012da:	f3bf 8f4f 	dsb	sy
}
 80012de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012e0:	f3bf 8f6f 	isb	sy
}
 80012e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012e6:	4b28      	ldr	r3, [pc, #160]	; (8001388 <EE_PageTransfer+0x32c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a27      	ldr	r2, [pc, #156]	; (8001388 <EE_PageTransfer+0x32c>)
 80012ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80012f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <EE_PageTransfer+0x32c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012fa:	f3bf 8f4f 	dsb	sy
}
 80012fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001300:	f3bf 8f6f 	isb	sy
}
 8001304:	bf00      	nop
}
 8001306:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130c:	461a      	mov	r2, r3
 800130e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001310:	2001      	movs	r0, #1
 8001312:	f008 fd47 	bl	8009da4 <HAL_FLASH_Program>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <EE_PageTransfer+0x32c>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d11b      	bne.n	8001360 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001328:	f3bf 8f4f 	dsb	sy
}
 800132c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800132e:	f3bf 8f6f 	isb	sy
}
 8001332:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <EE_PageTransfer+0x32c>)
 8001336:	2200      	movs	r2, #0
 8001338:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800133c:	f3bf 8f4f 	dsb	sy
}
 8001340:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001342:	f3bf 8f6f 	isb	sy
}
 8001346:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <EE_PageTransfer+0x32c>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <EE_PageTransfer+0x32c>)
 800134e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001352:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001354:	f3bf 8f4f 	dsb	sy
}
 8001358:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800135a:	f3bf 8f6f 	isb	sy
}
 800135e:	e000      	b.n	8001362 <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001360:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001362:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 800136a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800136e:	b29b      	uxth	r3, r3
 8001370:	e002      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001376:	b29b      	uxth	r3, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	3770      	adds	r7, #112	; 0x70
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	081c0000 	.word	0x081c0000
 8001384:	081e0000 	.word	0x081e0000
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	24000000 	.word	0x24000000
 8001390:	240003a0 	.word	0x240003a0
 8001394:	52002000 	.word	0x52002000

08001398 <handle_error>:
uint16_t VirtAddVarTab[NB_OF_VAR] = {0x5550, 0x5551, 0x5552, 0x5553, 0x5554, 0x5555, 0x5556, 0x5557, 0x5558, 0x5559, 0x555A, 0x555B, 0x555C, 0x555D, 0x555E, 0x555F, 0x6660, 0x6661, 0x6662, 0x6663, 0x6664, 0x6665, 0x6666, 0x6667, 0x6668, 0x6669, 0x666A};
uint16_t VarDataTab[NB_OF_VAR] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

uint16_t local_cpy[NB_OF_VAR];

void handle_error(ERROR_STRUCT error) {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	80b8      	strh	r0, [r7, #4]
//		break;
//	default:
//		//send_error_packet(error);
//		break;
//	}
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <reset_error_counters>:
		}
	}
}


void reset_error_counters() {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	// Resets all error counters to 0
	for (int i = 0; i < NB_OF_VAR; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e00f      	b.n	80013d8 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <reset_error_counters+0x3c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fd30 	bl	8000e28 <EE_WriteVariable>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <reset_error_counters+0x26>
			Error_Handler();
 80013ce:	f001 fc15 	bl	8002bfc <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3301      	adds	r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b1a      	cmp	r3, #26
 80013dc:	ddec      	ble.n	80013b8 <reset_error_counters+0xc>
		}
	}
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	24000000 	.word	0x24000000

080013ec <send_previous_error_packet>:

void send_previous_error_packet() {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0
	uint8_t buffer[PREVIOUS_ERROR_PACKET_SIZE];

	buffer[0] = ERROR_PACKET_SYNC;
 80013f2:	23cc      	movs	r3, #204	; 0xcc
 80013f4:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_PACKET_SYNC;
 80013f6:	23cc      	movs	r3, #204	; 0xcc
 80013f8:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 80013fa:	4b98      	ldr	r3, [pc, #608]	; (800165c <send_previous_error_packet+0x270>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b29b      	uxth	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 8001406:	4b95      	ldr	r3, [pc, #596]	; (800165c <send_previous_error_packet+0x270>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 800140e:	4b93      	ldr	r3, [pc, #588]	; (800165c <send_previous_error_packet+0x270>)
 8001410:	885b      	ldrh	r3, [r3, #2]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b29b      	uxth	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 800141a:	4b90      	ldr	r3, [pc, #576]	; (800165c <send_previous_error_packet+0x270>)
 800141c:	885b      	ldrh	r3, [r3, #2]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 8001422:	4b8e      	ldr	r3, [pc, #568]	; (800165c <send_previous_error_packet+0x270>)
 8001424:	889b      	ldrh	r3, [r3, #4]
 8001426:	0a1b      	lsrs	r3, r3, #8
 8001428:	b29b      	uxth	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 800142e:	4b8b      	ldr	r3, [pc, #556]	; (800165c <send_previous_error_packet+0x270>)
 8001430:	889b      	ldrh	r3, [r3, #4]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 8001436:	4b89      	ldr	r3, [pc, #548]	; (800165c <send_previous_error_packet+0x270>)
 8001438:	88db      	ldrh	r3, [r3, #6]
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	b29b      	uxth	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 8001442:	4b86      	ldr	r3, [pc, #536]	; (800165c <send_previous_error_packet+0x270>)
 8001444:	88db      	ldrh	r3, [r3, #6]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 800144a:	4b84      	ldr	r3, [pc, #528]	; (800165c <send_previous_error_packet+0x270>)
 800144c:	891b      	ldrh	r3, [r3, #8]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b29b      	uxth	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 8001456:	4b81      	ldr	r3, [pc, #516]	; (800165c <send_previous_error_packet+0x270>)
 8001458:	891b      	ldrh	r3, [r3, #8]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 800145e:	4b7f      	ldr	r3, [pc, #508]	; (800165c <send_previous_error_packet+0x270>)
 8001460:	895b      	ldrh	r3, [r3, #10]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	b29b      	uxth	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 800146a:	4b7c      	ldr	r3, [pc, #496]	; (800165c <send_previous_error_packet+0x270>)
 800146c:	895b      	ldrh	r3, [r3, #10]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 8001472:	4b7a      	ldr	r3, [pc, #488]	; (800165c <send_previous_error_packet+0x270>)
 8001474:	899b      	ldrh	r3, [r3, #12]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	b29b      	uxth	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 800147e:	4b77      	ldr	r3, [pc, #476]	; (800165c <send_previous_error_packet+0x270>)
 8001480:	899b      	ldrh	r3, [r3, #12]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 8001486:	4b75      	ldr	r3, [pc, #468]	; (800165c <send_previous_error_packet+0x270>)
 8001488:	89db      	ldrh	r3, [r3, #14]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	b29b      	uxth	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 8001492:	4b72      	ldr	r3, [pc, #456]	; (800165c <send_previous_error_packet+0x270>)
 8001494:	89db      	ldrh	r3, [r3, #14]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 800149a:	4b70      	ldr	r3, [pc, #448]	; (800165c <send_previous_error_packet+0x270>)
 800149c:	8a1b      	ldrh	r3, [r3, #16]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 80014a6:	4b6d      	ldr	r3, [pc, #436]	; (800165c <send_previous_error_packet+0x270>)
 80014a8:	8a1b      	ldrh	r3, [r3, #16]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 80014ae:	4b6b      	ldr	r3, [pc, #428]	; (800165c <send_previous_error_packet+0x270>)
 80014b0:	8a5b      	ldrh	r3, [r3, #18]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 80014ba:	4b68      	ldr	r3, [pc, #416]	; (800165c <send_previous_error_packet+0x270>)
 80014bc:	8a5b      	ldrh	r3, [r3, #18]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 80014c2:	4b66      	ldr	r3, [pc, #408]	; (800165c <send_previous_error_packet+0x270>)
 80014c4:	8a9b      	ldrh	r3, [r3, #20]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 80014ce:	4b63      	ldr	r3, [pc, #396]	; (800165c <send_previous_error_packet+0x270>)
 80014d0:	8a9b      	ldrh	r3, [r3, #20]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 80014d6:	4b61      	ldr	r3, [pc, #388]	; (800165c <send_previous_error_packet+0x270>)
 80014d8:	8adb      	ldrh	r3, [r3, #22]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 80014e2:	4b5e      	ldr	r3, [pc, #376]	; (800165c <send_previous_error_packet+0x270>)
 80014e4:	8adb      	ldrh	r3, [r3, #22]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 80014ea:	4b5c      	ldr	r3, [pc, #368]	; (800165c <send_previous_error_packet+0x270>)
 80014ec:	8b1b      	ldrh	r3, [r3, #24]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 80014f6:	4b59      	ldr	r3, [pc, #356]	; (800165c <send_previous_error_packet+0x270>)
 80014f8:	8b1b      	ldrh	r3, [r3, #24]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 80014fe:	4b57      	ldr	r3, [pc, #348]	; (800165c <send_previous_error_packet+0x270>)
 8001500:	8b5b      	ldrh	r3, [r3, #26]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	b29b      	uxth	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 800150a:	4b54      	ldr	r3, [pc, #336]	; (800165c <send_previous_error_packet+0x270>)
 800150c:	8b5b      	ldrh	r3, [r3, #26]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 8001512:	4b52      	ldr	r3, [pc, #328]	; (800165c <send_previous_error_packet+0x270>)
 8001514:	8b9b      	ldrh	r3, [r3, #28]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b29b      	uxth	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 800151e:	4b4f      	ldr	r3, [pc, #316]	; (800165c <send_previous_error_packet+0x270>)
 8001520:	8b9b      	ldrh	r3, [r3, #28]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 8001526:	4b4d      	ldr	r3, [pc, #308]	; (800165c <send_previous_error_packet+0x270>)
 8001528:	8bdb      	ldrh	r3, [r3, #30]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 8001534:	4b49      	ldr	r3, [pc, #292]	; (800165c <send_previous_error_packet+0x270>)
 8001536:	8bdb      	ldrh	r3, [r3, #30]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <send_previous_error_packet+0x270>)
 8001540:	8c1b      	ldrh	r3, [r3, #32]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	b29b      	uxth	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 800154c:	4b43      	ldr	r3, [pc, #268]	; (800165c <send_previous_error_packet+0x270>)
 800154e:	8c1b      	ldrh	r3, [r3, #32]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <send_previous_error_packet+0x270>)
 8001558:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	b29b      	uxth	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 8001564:	4b3d      	ldr	r3, [pc, #244]	; (800165c <send_previous_error_packet+0x270>)
 8001566:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <send_previous_error_packet+0x270>)
 8001570:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	b29b      	uxth	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 800157c:	4b37      	ldr	r3, [pc, #220]	; (800165c <send_previous_error_packet+0x270>)
 800157e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 8001586:	4b35      	ldr	r3, [pc, #212]	; (800165c <send_previous_error_packet+0x270>)
 8001588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	b29b      	uxth	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <send_previous_error_packet+0x270>)
 8001596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 800159e:	4b2f      	ldr	r3, [pc, #188]	; (800165c <send_previous_error_packet+0x270>)
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <send_previous_error_packet+0x270>)
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 80015b6:	4b29      	ldr	r3, [pc, #164]	; (800165c <send_previous_error_packet+0x270>)
 80015b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <send_previous_error_packet+0x270>)
 80015c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <send_previous_error_packet+0x270>)
 80015d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <send_previous_error_packet+0x270>)
 80015de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <send_previous_error_packet+0x270>)
 80015e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <send_previous_error_packet+0x270>)
 80015f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <send_previous_error_packet+0x270>)
 8001600:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	b29b      	uxth	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <send_previous_error_packet+0x270>)
 800160e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <send_previous_error_packet+0x270>)
 8001618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	b29b      	uxth	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <send_previous_error_packet+0x270>)
 8001626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <send_previous_error_packet+0x270>)
 8001630:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	b29b      	uxth	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <send_previous_error_packet+0x270>)
 800163e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	HAL_UART_Transmit(&huart1, buffer, PREVIOUS_ERROR_PACKET_SIZE, 100);
 8001646:	4639      	mov	r1, r7
 8001648:	2364      	movs	r3, #100	; 0x64
 800164a:	2238      	movs	r2, #56	; 0x38
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <send_previous_error_packet+0x274>)
 800164e:	f011 fe8f 	bl	8013370 <HAL_UART_Transmit>
}
 8001652:	bf00      	nop
 8001654:	3738      	adds	r7, #56	; 0x38
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	240003a4 	.word	0x240003a4
 8001660:	24001e3c 	.word	0x24001e3c

08001664 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <vApplicationTickHook+0x18>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a03      	ldr	r2, [pc, #12]	; (800167c <vApplicationTickHook+0x18>)
 8001670:	6013      	str	r3, [r2, #0]
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	24001ae0 	.word	0x24001ae0

08001680 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 800169c:	4a24      	ldr	r2, [pc, #144]	; (8001730 <MX_FREERTOS_Init+0x98>)
 800169e:	2100      	movs	r1, #0
 80016a0:	4824      	ldr	r0, [pc, #144]	; (8001734 <MX_FREERTOS_Init+0x9c>)
 80016a2:	f014 fcbd 	bl	8016020 <osThreadNew>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a23      	ldr	r2, [pc, #140]	; (8001738 <MX_FREERTOS_Init+0xa0>)
 80016aa:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80016ac:	4a23      	ldr	r2, [pc, #140]	; (800173c <MX_FREERTOS_Init+0xa4>)
 80016ae:	2100      	movs	r1, #0
 80016b0:	4823      	ldr	r0, [pc, #140]	; (8001740 <MX_FREERTOS_Init+0xa8>)
 80016b2:	f014 fcb5 	bl	8016020 <osThreadNew>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <MX_FREERTOS_Init+0xac>)
 80016ba:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80016bc:	4a22      	ldr	r2, [pc, #136]	; (8001748 <MX_FREERTOS_Init+0xb0>)
 80016be:	2100      	movs	r1, #0
 80016c0:	4822      	ldr	r0, [pc, #136]	; (800174c <MX_FREERTOS_Init+0xb4>)
 80016c2:	f014 fcad 	bl	8016020 <osThreadNew>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a21      	ldr	r2, [pc, #132]	; (8001750 <MX_FREERTOS_Init+0xb8>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <MX_FREERTOS_Init+0xbc>)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4821      	ldr	r0, [pc, #132]	; (8001758 <MX_FREERTOS_Init+0xc0>)
 80016d2:	f014 fca5 	bl	8016020 <osThreadNew>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <MX_FREERTOS_Init+0xc4>)
 80016da:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 80016dc:	4a20      	ldr	r2, [pc, #128]	; (8001760 <MX_FREERTOS_Init+0xc8>)
 80016de:	2100      	movs	r1, #0
 80016e0:	4820      	ldr	r0, [pc, #128]	; (8001764 <MX_FREERTOS_Init+0xcc>)
 80016e2:	f014 fc9d 	bl	8016020 <osThreadNew>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <MX_FREERTOS_Init+0xd0>)
 80016ea:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 80016ec:	4a1f      	ldr	r2, [pc, #124]	; (800176c <MX_FREERTOS_Init+0xd4>)
 80016ee:	2100      	movs	r1, #0
 80016f0:	481f      	ldr	r0, [pc, #124]	; (8001770 <MX_FREERTOS_Init+0xd8>)
 80016f2:	f014 fc95 	bl	8016020 <osThreadNew>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <MX_FREERTOS_Init+0xdc>)
 80016fa:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 80016fc:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <MX_FREERTOS_Init+0xe0>)
 80016fe:	2100      	movs	r1, #0
 8001700:	481e      	ldr	r0, [pc, #120]	; (800177c <MX_FREERTOS_Init+0xe4>)
 8001702:	f014 fc8d 	bl	8016020 <osThreadNew>
 8001706:	4603      	mov	r3, r0
 8001708:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <MX_FREERTOS_Init+0xe8>)
 800170a:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <MX_FREERTOS_Init+0xec>)
 800170e:	2100      	movs	r1, #0
 8001710:	481d      	ldr	r0, [pc, #116]	; (8001788 <MX_FREERTOS_Init+0xf0>)
 8001712:	f014 fc85 	bl	8016020 <osThreadNew>
 8001716:	4603      	mov	r3, r0
 8001718:	4a1c      	ldr	r2, [pc, #112]	; (800178c <MX_FREERTOS_Init+0xf4>)
 800171a:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 800171c:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <MX_FREERTOS_Init+0xf8>)
 800171e:	2100      	movs	r1, #0
 8001720:	481c      	ldr	r0, [pc, #112]	; (8001794 <MX_FREERTOS_Init+0xfc>)
 8001722:	f014 fc7d 	bl	8016020 <osThreadNew>
 8001726:	4603      	mov	r3, r0
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <MX_FREERTOS_Init+0x100>)
 800172a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	0801a048 	.word	0x0801a048
 8001734:	0800179d 	.word	0x0800179d
 8001738:	240003dc 	.word	0x240003dc
 800173c:	0801a06c 	.word	0x0801a06c
 8001740:	080017c5 	.word	0x080017c5
 8001744:	2400063c 	.word	0x2400063c
 8001748:	0801a090 	.word	0x0801a090
 800174c:	080017ed 	.word	0x080017ed
 8001750:	2400089c 	.word	0x2400089c
 8001754:	0801a0b4 	.word	0x0801a0b4
 8001758:	08001815 	.word	0x08001815
 800175c:	24000afc 	.word	0x24000afc
 8001760:	0801a0d8 	.word	0x0801a0d8
 8001764:	0800188d 	.word	0x0800188d
 8001768:	24000d5c 	.word	0x24000d5c
 800176c:	0801a0fc 	.word	0x0801a0fc
 8001770:	08001905 	.word	0x08001905
 8001774:	24000fbc 	.word	0x24000fbc
 8001778:	0801a120 	.word	0x0801a120
 800177c:	08001935 	.word	0x08001935
 8001780:	2400121c 	.word	0x2400121c
 8001784:	0801a144 	.word	0x0801a144
 8001788:	08001965 	.word	0x08001965
 800178c:	2400147c 	.word	0x2400147c
 8001790:	0801a168 	.word	0x0801a168
 8001794:	08001a45 	.word	0x08001a45
 8001798:	240016dc 	.word	0x240016dc

0800179c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <PMT_init+0x24>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ac:	2200      	movs	r2, #0
 80017ae:	2101      	movs	r1, #1
 80017b0:	f014 fdb8 	bl	8016324 <osEventFlagsWait>

		create_pmt_packet();
 80017b4:	f001 fa30 	bl	8002c18 <create_pmt_packet>

		osThreadYield();
 80017b8:	f014 fcc4 	bl	8016144 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017bc:	e7f2      	b.n	80017a4 <PMT_init+0x8>
 80017be:	bf00      	nop
 80017c0:	24001a90 	.word	0x24001a90

080017c4 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <ERPA_init+0x24>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d4:	2200      	movs	r2, #0
 80017d6:	2102      	movs	r1, #2
 80017d8:	f014 fda4 	bl	8016324 <osEventFlagsWait>

		create_erpa_packet();
 80017dc:	f001 fa62 	bl	8002ca4 <create_erpa_packet>

		osThreadYield();
 80017e0:	f014 fcb0 	bl	8016144 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017e4:	e7f2      	b.n	80017cc <ERPA_init+0x8>
 80017e6:	bf00      	nop
 80017e8:	24001a90 	.word	0x24001a90

080017ec <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HK_init+0x24>)
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fc:	2200      	movs	r2, #0
 80017fe:	2104      	movs	r1, #4
 8001800:	f014 fd90 	bl	8016324 <osEventFlagsWait>

		create_hk_packet();
 8001804:	f001 faac 	bl	8002d60 <create_hk_packet>

		osThreadYield();
 8001808:	f014 fc9c 	bl	8016144 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800180c:	e7f2      	b.n	80017f4 <HK_init+0x8>
 800180e:	bf00      	nop
 8001810:	24001a90 	.word	0x24001a90

08001814 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <AUTOINIT_init+0x70>)
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001824:	2200      	movs	r2, #0
 8001826:	2104      	movs	r1, #4
 8001828:	f014 fd7c 	bl	8016324 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e012      	b.n	8001858 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8001832:	4a15      	ldr	r2, [pc, #84]	; (8001888 <AUTOINIT_init+0x74>)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <AUTOINIT_init+0x74>)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	889b      	ldrh	r3, [r3, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	4619      	mov	r1, r3
 8001848:	f008 ff4e 	bl	800a6e8 <HAL_GPIO_WritePin>
			osDelay(100);
 800184c:	2064      	movs	r0, #100	; 0x64
 800184e:	f014 fc99 	bl	8016184 <osDelay>
		for (int i = 0; i < 7; i++) {
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b06      	cmp	r3, #6
 800185c:	dde9      	ble.n	8001832 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 800185e:	2308      	movs	r3, #8
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	e008      	b.n	8001876 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2101      	movs	r1, #1
 800186a:	4618      	mov	r0, r3
 800186c:	f003 f8b6 	bl	80049dc <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	3301      	adds	r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2b0d      	cmp	r3, #13
 800187a:	ddf3      	ble.n	8001864 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 800187c:	f014 fc62 	bl	8016144 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8001880:	e7cc      	b.n	800181c <AUTOINIT_init+0x8>
 8001882:	bf00      	nop
 8001884:	24001a94 	.word	0x24001a94
 8001888:	0801a18c 	.word	0x0801a18c

0800188c <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <AUTODEINIT_init+0x70>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189c:	2200      	movs	r2, #0
 800189e:	2108      	movs	r1, #8
 80018a0:	f014 fd40 	bl	8016324 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80018a4:	230d      	movs	r3, #13
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e008      	b.n	80018bc <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 f893 	bl	80049dc <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b07      	cmp	r3, #7
 80018c0:	dcf3      	bgt.n	80018aa <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 80018c2:	2306      	movs	r3, #6
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	e012      	b.n	80018ee <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <AUTODEINIT_init+0x74>)
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80018d0:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <AUTODEINIT_init+0x74>)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4413      	add	r3, r2
 80018d8:	889b      	ldrh	r3, [r3, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	f008 ff03 	bl	800a6e8 <HAL_GPIO_WritePin>
			osDelay(100);
 80018e2:	2064      	movs	r0, #100	; 0x64
 80018e4:	f014 fc4e 	bl	8016184 <osDelay>
		for (int i = 6; i >= 0; i--) {
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	dae9      	bge.n	80018c8 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 80018f4:	f014 fc26 	bl	8016144 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80018f8:	e7cc      	b.n	8001894 <AUTODEINIT_init+0x8>
 80018fa:	bf00      	nop
 80018fc:	24001a94 	.word	0x24001a94
 8001900:	0801a18c 	.word	0x0801a18c

08001904 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <Voltage_Monitor_init+0x28>)
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001914:	2200      	movs	r2, #0
 8001916:	2101      	movs	r1, #1
 8001918:	f014 fd04 	bl	8016324 <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <Voltage_Monitor_init+0x2c>)
 800191e:	f00b fa61 	bl	800cde4 <HAL_IWDG_Refresh>
	  set_rail_monitor();
 8001922:	f003 f87b 	bl	8004a1c <set_rail_monitor>
	  monitor_rails();
 8001926:	f003 f8fd 	bl	8004b24 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800192a:	e7ef      	b.n	800190c <Voltage_Monitor_init+0x8>
 800192c:	24001a94 	.word	0x24001a94
 8001930:	24001a80 	.word	0x24001a80

08001934 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <STOP_init+0x2c>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001944:	2200      	movs	r2, #0
 8001946:	2102      	movs	r1, #2
 8001948:	f014 fcec 	bl	8016324 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <STOP_init+0x2c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2102      	movs	r1, #2
 8001952:	4618      	mov	r0, r3
 8001954:	f014 fcb4 	bl	80162c0 <osEventFlagsClear>

	  enter_stop();
 8001958:	f001 f8f0 	bl	8002b3c <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800195c:	e7ee      	b.n	800193c <STOP_init+0x8>
 800195e:	bf00      	nop
 8001960:	24001a94 	.word	0x24001a94

08001964 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af02      	add	r7, sp, #8
 800196a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800196c:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <Science_init+0xbc>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001974:	2200      	movs	r2, #0
 8001976:	2101      	movs	r1, #1
 8001978:	f014 fcd4 	bl	8016324 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e012      	b.n	80019a8 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8001982:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <Science_init+0xc0>)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800198a:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <Science_init+0xc0>)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	889b      	ldrh	r3, [r3, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	4619      	mov	r1, r3
 8001998:	f008 fea6 	bl	800a6e8 <HAL_GPIO_WritePin>
			osDelay(200);
 800199c:	20c8      	movs	r0, #200	; 0xc8
 800199e:	f014 fbf1 	bl	8016184 <osDelay>
		for (int i = 0; i < 9; i++) {
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3301      	adds	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	dde9      	ble.n	8001982 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80019ae:	2308      	movs	r3, #8
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	e008      	b.n	80019c6 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2101      	movs	r1, #1
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 f80e 	bl	80049dc <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	3301      	adds	r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	ddf3      	ble.n	80019b4 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2320      	movs	r3, #32
 80019d6:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <Science_init+0xc4>)
 80019d8:	2100      	movs	r1, #0
 80019da:	4814      	ldr	r0, [pc, #80]	; (8001a2c <Science_init+0xc8>)
 80019dc:	f005 f800 	bl	80069e0 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <Science_init+0xcc>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <Science_init+0xd0>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <Science_init+0xd4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 80019f2:	f001 fb03 	bl	8002ffc <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <Science_init+0xd8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2104      	movs	r1, #4
 80019fc:	4618      	mov	r0, r3
 80019fe:	f014 fc1b 	bl	8016238 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8001a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a06:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	480c      	ldr	r0, [pc, #48]	; (8001a40 <Science_init+0xdc>)
 8001a10:	f010 f924 	bl	8011c5c <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a14:	b662      	cpsie	i
}
 8001a16:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8001a18:	f014 fb94 	bl	8016144 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001a1c:	e7a6      	b.n	800196c <Science_init+0x8>
 8001a1e:	bf00      	nop
 8001a20:	24001a98 	.word	0x24001a98
 8001a24:	0801a18c 	.word	0x0801a18c
 8001a28:	24000038 	.word	0x24000038
 8001a2c:	24000314 	.word	0x24000314
 8001a30:	24001adc 	.word	0x24001adc
 8001a34:	24001add 	.word	0x24001add
 8001a38:	24001ae0 	.word	0x24001ae0
 8001a3c:	24001a90 	.word	0x24001a90
 8001a40:	24001da4 	.word	0x24001da4

08001a44 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <Idle_init+0x94>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a54:	2200      	movs	r2, #0
 8001a56:	2102      	movs	r1, #2
 8001a58:	f014 fc64 	bl	8016324 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <Idle_init+0x98>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8001a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a66:	2200      	movs	r2, #0
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	481c      	ldr	r0, [pc, #112]	; (8001ae0 <Idle_init+0x9c>)
 8001a6e:	f010 fa4f 	bl	8011f10 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <Idle_init+0xa0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8001a78:	2100      	movs	r1, #0
 8001a7a:	481b      	ldr	r0, [pc, #108]	; (8001ae8 <Idle_init+0xa4>)
 8001a7c:	f005 f870 	bl	8006b60 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001a80:	2310      	movs	r3, #16
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e008      	b.n	8001a98 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 ffa5 	bl	80049dc <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b07      	cmp	r3, #7
 8001a9c:	dcf3      	bgt.n	8001a86 <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	e012      	b.n	8001aca <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <Idle_init+0xa8>)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001aac:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <Idle_init+0xa8>)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	889b      	ldrh	r3, [r3, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f008 fe15 	bl	800a6e8 <HAL_GPIO_WritePin>
			osDelay(200);
 8001abe:	20c8      	movs	r0, #200	; 0xc8
 8001ac0:	f014 fb60 	bl	8016184 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dae9      	bge.n	8001aa4 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 8001ad0:	f014 fb38 	bl	8016144 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001ad4:	e7ba      	b.n	8001a4c <Idle_init+0x8>
 8001ad6:	bf00      	nop
 8001ad8:	24001a98 	.word	0x24001a98
 8001adc:	24001add 	.word	0x24001add
 8001ae0:	24001da4 	.word	0x24001da4
 8001ae4:	24001adc 	.word	0x24001adc
 8001ae8:	24000314 	.word	0x24000314
 8001aec:	0801a18c 	.word	0x0801a18c

08001af0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0c:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	4a2b      	ldr	r2, [pc, #172]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b48:	4a23      	ldr	r2, [pc, #140]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001b84:	4815      	ldr	r0, [pc, #84]	; (8001bdc <MX_GPIO_Init+0xec>)
 8001b86:	f008 fdaf 	bl	800a6e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2164      	movs	r1, #100	; 0x64
 8001b8e:	4814      	ldr	r0, [pc, #80]	; (8001be0 <MX_GPIO_Init+0xf0>)
 8001b90:	f008 fdaa 	bl	800a6e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001b94:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001b98:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <MX_GPIO_Init+0xec>)
 8001bae:	f008 fbd3 	bl	800a358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_GPIO_Init+0xf0>)
 8001bca:	f008 fbc5 	bl	800a358 <HAL_GPIO_Init>

}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	58020800 	.word	0x58020800
 8001be0:	58020400 	.word	0x58020400

08001be4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001bea:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <MX_I2C1_Init+0x7c>)
 8001bec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <MX_I2C1_Init+0x80>)
 8001bf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c1e:	480f      	ldr	r0, [pc, #60]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c20:	f008 fd7c 	bl	800a71c <HAL_I2C_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c2a:	f000 ffe7 	bl	8002bfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c2e:	2100      	movs	r1, #0
 8001c30:	480a      	ldr	r0, [pc, #40]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c32:	f00b f81b 	bl	800cc6c <HAL_I2CEx_ConfigAnalogFilter>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c3c:	f000 ffde 	bl	8002bfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c40:	2100      	movs	r1, #0
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c44:	f00b f85d 	bl	800cd02 <HAL_I2CEx_ConfigDigitalFilter>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c4e:	f000 ffd5 	bl	8002bfc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001c52:	2001      	movs	r0, #1
 8001c54:	f00b f8a2 	bl	800cd9c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2400193c 	.word	0x2400193c
 8001c60:	40005400 	.word	0x40005400
 8001c64:	00100517 	.word	0x00100517

08001c68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0ba      	sub	sp, #232	; 0xe8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	22c0      	movs	r2, #192	; 0xc0
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f017 fb97 	bl	80193bc <memset>
  if(i2cHandle->Instance==I2C1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a5d      	ldr	r2, [pc, #372]	; (8001e08 <HAL_I2C_MspInit+0x1a0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	f040 80b3 	bne.w	8001e00 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c9a:	f04f 0208 	mov.w	r2, #8
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00c f945 	bl	800df40 <HAL_RCCEx_PeriphCLKConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001cbc:	f000 ff9e 	bl	8002bfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b52      	ldr	r3, [pc, #328]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	4a51      	ldr	r2, [pc, #324]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd0:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce6:	2312      	movs	r3, #18
 8001ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4842      	ldr	r0, [pc, #264]	; (8001e10 <HAL_I2C_MspInit+0x1a8>)
 8001d06:	f008 fb27 	bl	800a358 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d0a:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d10:	4a3e      	ldr	r2, [pc, #248]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d1a:	4b3c      	ldr	r3, [pc, #240]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001d28:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d2a:	4a3b      	ldr	r2, [pc, #236]	; (8001e18 <HAL_I2C_MspInit+0x1b0>)
 8001d2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001d2e:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d30:	2222      	movs	r2, #34	; 0x22
 8001d32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d34:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d36:	2240      	movs	r2, #64	; 0x40
 8001d38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d60:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d68:	482a      	ldr	r0, [pc, #168]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d6a:	f005 f9c5 	bl	80070f8 <HAL_DMA_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8001d74:	f000 ff42 	bl	8002bfc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d7e:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001d86:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <HAL_I2C_MspInit+0x1b8>)
 8001d88:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001d8a:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001d8c:	2221      	movs	r2, #33	; 0x21
 8001d8e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d90:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001db8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001dbc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001dc4:	4815      	ldr	r0, [pc, #84]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001dc6:	f005 f997 	bl	80070f8 <HAL_DMA_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8001dd0:	f000 ff14 	bl	8002bfc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001dd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dda:	4a10      	ldr	r2, [pc, #64]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2105      	movs	r1, #5
 8001de4:	201f      	movs	r0, #31
 8001de6:	f004 fce1 	bl	80067ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001dea:	201f      	movs	r0, #31
 8001dec:	f004 fcf8 	bl	80067e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2105      	movs	r1, #5
 8001df4:	2020      	movs	r0, #32
 8001df6:	f004 fcd9 	bl	80067ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001dfa:	2020      	movs	r0, #32
 8001dfc:	f004 fcf0 	bl	80067e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e00:	bf00      	nop
 8001e02:	37e8      	adds	r7, #232	; 0xe8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	58020400 	.word	0x58020400
 8001e14:	24001990 	.word	0x24001990
 8001e18:	400200a0 	.word	0x400200a0
 8001e1c:	24001a08 	.word	0x24001a08
 8001e20:	400200b8 	.word	0x400200b8

08001e24 <__NVIC_SystemReset>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <__NVIC_SystemReset+0x24>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e36:	4904      	ldr	r1, [pc, #16]	; (8001e48 <__NVIC_SystemReset+0x24>)
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <__NVIC_SystemReset+0x28>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3e:	f3bf 8f4f 	dsb	sy
}
 8001e42:	bf00      	nop
    __NOP();
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <__NVIC_SystemReset+0x20>
 8001e48:	e000ed00 	.word	0xe000ed00
 8001e4c:	05fa0004 	.word	0x05fa0004

08001e50 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a20      	ldr	r2, [pc, #128]	; (8001edc <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d106      	bne.n	8001e6e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001e60:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	4618      	mov	r0, r3
 8001e68:	f014 f9e6 	bl	8016238 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8001e6c:	e032      	b.n	8001ed4 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d12b      	bne.n	8001ece <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2102      	movs	r1, #2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f014 f9d6 	bl	8016238 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d113      	bne.n	8001ebe <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f014 f9cb 	bl	8016238 <osEventFlagsSet>
			if (HK_ENABLED){
 8001ea2:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f014 f9c0 	bl	8016238 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001eca:	701a      	strb	r2, [r3, #0]
}
 8001ecc:	e002      	b.n	8001ed4 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8001ece:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001ed0:	f017 faea 	bl	80194a8 <puts>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	24001da4 	.word	0x24001da4
 8001ee0:	24001a90 	.word	0x24001a90
 8001ee4:	24001df0 	.word	0x24001df0
 8001ee8:	24001add 	.word	0x24001add
 8001eec:	24001ae4 	.word	0x24001ae4
 8001ef0:	24001a94 	.word	0x24001a94
 8001ef4:	24001adc 	.word	0x24001adc
 8001ef8:	08019e58 	.word	0x08019e58

08001efc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001f04:	2201      	movs	r2, #1
 8001f06:	49f2      	ldr	r1, [pc, #968]	; (80022d0 <HAL_UART_RxCpltCallback+0x3d4>)
 8001f08:	48f2      	ldr	r0, [pc, #968]	; (80022d4 <HAL_UART_RxCpltCallback+0x3d8>)
 8001f0a:	f011 fb87 	bl	801361c <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8001f0e:	4bf0      	ldr	r3, [pc, #960]	; (80022d0 <HAL_UART_RxCpltCallback+0x3d4>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	2be0      	cmp	r3, #224	; 0xe0
 8001f18:	f200 8424 	bhi.w	8002764 <HAL_UART_RxCpltCallback+0x868>
 8001f1c:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <HAL_UART_RxCpltCallback+0x28>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	080022bd 	.word	0x080022bd
 8001f28:	08002301 	.word	0x08002301
 8001f2c:	08002371 	.word	0x08002371
 8001f30:	080023ab 	.word	0x080023ab
 8001f34:	080023e3 	.word	0x080023e3
 8001f38:	0800241d 	.word	0x0800241d
 8001f3c:	08002459 	.word	0x08002459
 8001f40:	08002495 	.word	0x08002495
 8001f44:	080024cf 	.word	0x080024cf
 8001f48:	08002503 	.word	0x08002503
 8001f4c:	08002537 	.word	0x08002537
 8001f50:	08002569 	.word	0x08002569
 8001f54:	08002593 	.word	0x08002593
 8001f58:	08002671 	.word	0x08002671
 8001f5c:	080026d9 	.word	0x080026d9
 8001f60:	08002701 	.word	0x08002701
 8001f64:	080022a9 	.word	0x080022a9
 8001f68:	080022e5 	.word	0x080022e5
 8001f6c:	08002353 	.word	0x08002353
 8001f70:	0800238f 	.word	0x0800238f
 8001f74:	080023c7 	.word	0x080023c7
 8001f78:	080023ff 	.word	0x080023ff
 8001f7c:	0800243b 	.word	0x0800243b
 8001f80:	08002477 	.word	0x08002477
 8001f84:	080024b3 	.word	0x080024b3
 8001f88:	080024eb 	.word	0x080024eb
 8001f8c:	08002513 	.word	0x08002513
 8001f90:	0800254d 	.word	0x0800254d
 8001f94:	08002579 	.word	0x08002579
 8001f98:	080025a1 	.word	0x080025a1
 8001f9c:	080026b1 	.word	0x080026b1
 8001fa0:	08002765 	.word	0x08002765
 8001fa4:	08002765 	.word	0x08002765
 8001fa8:	08002765 	.word	0x08002765
 8001fac:	08002765 	.word	0x08002765
 8001fb0:	08002765 	.word	0x08002765
 8001fb4:	08002765 	.word	0x08002765
 8001fb8:	08002765 	.word	0x08002765
 8001fbc:	08002765 	.word	0x08002765
 8001fc0:	08002765 	.word	0x08002765
 8001fc4:	08002765 	.word	0x08002765
 8001fc8:	08002765 	.word	0x08002765
 8001fcc:	08002765 	.word	0x08002765
 8001fd0:	08002765 	.word	0x08002765
 8001fd4:	08002765 	.word	0x08002765
 8001fd8:	08002765 	.word	0x08002765
 8001fdc:	08002765 	.word	0x08002765
 8001fe0:	08002765 	.word	0x08002765
 8001fe4:	08002765 	.word	0x08002765
 8001fe8:	08002765 	.word	0x08002765
 8001fec:	08002765 	.word	0x08002765
 8001ff0:	08002765 	.word	0x08002765
 8001ff4:	08002765 	.word	0x08002765
 8001ff8:	08002765 	.word	0x08002765
 8001ffc:	08002765 	.word	0x08002765
 8002000:	08002765 	.word	0x08002765
 8002004:	08002765 	.word	0x08002765
 8002008:	08002765 	.word	0x08002765
 800200c:	08002765 	.word	0x08002765
 8002010:	08002765 	.word	0x08002765
 8002014:	08002765 	.word	0x08002765
 8002018:	08002765 	.word	0x08002765
 800201c:	08002765 	.word	0x08002765
 8002020:	08002765 	.word	0x08002765
 8002024:	08002765 	.word	0x08002765
 8002028:	08002765 	.word	0x08002765
 800202c:	08002765 	.word	0x08002765
 8002030:	08002765 	.word	0x08002765
 8002034:	08002765 	.word	0x08002765
 8002038:	08002765 	.word	0x08002765
 800203c:	08002765 	.word	0x08002765
 8002040:	08002765 	.word	0x08002765
 8002044:	08002765 	.word	0x08002765
 8002048:	08002765 	.word	0x08002765
 800204c:	08002765 	.word	0x08002765
 8002050:	08002765 	.word	0x08002765
 8002054:	08002765 	.word	0x08002765
 8002058:	08002765 	.word	0x08002765
 800205c:	08002765 	.word	0x08002765
 8002060:	08002765 	.word	0x08002765
 8002064:	08002765 	.word	0x08002765
 8002068:	08002765 	.word	0x08002765
 800206c:	08002765 	.word	0x08002765
 8002070:	08002765 	.word	0x08002765
 8002074:	08002765 	.word	0x08002765
 8002078:	08002765 	.word	0x08002765
 800207c:	08002765 	.word	0x08002765
 8002080:	08002765 	.word	0x08002765
 8002084:	08002765 	.word	0x08002765
 8002088:	08002765 	.word	0x08002765
 800208c:	08002765 	.word	0x08002765
 8002090:	08002765 	.word	0x08002765
 8002094:	08002765 	.word	0x08002765
 8002098:	08002765 	.word	0x08002765
 800209c:	08002765 	.word	0x08002765
 80020a0:	08002765 	.word	0x08002765
 80020a4:	08002765 	.word	0x08002765
 80020a8:	08002765 	.word	0x08002765
 80020ac:	08002765 	.word	0x08002765
 80020b0:	08002765 	.word	0x08002765
 80020b4:	08002765 	.word	0x08002765
 80020b8:	08002765 	.word	0x08002765
 80020bc:	08002765 	.word	0x08002765
 80020c0:	08002765 	.word	0x08002765
 80020c4:	08002765 	.word	0x08002765
 80020c8:	08002765 	.word	0x08002765
 80020cc:	08002765 	.word	0x08002765
 80020d0:	08002765 	.word	0x08002765
 80020d4:	08002765 	.word	0x08002765
 80020d8:	08002765 	.word	0x08002765
 80020dc:	08002765 	.word	0x08002765
 80020e0:	08002765 	.word	0x08002765
 80020e4:	08002765 	.word	0x08002765
 80020e8:	08002765 	.word	0x08002765
 80020ec:	08002765 	.word	0x08002765
 80020f0:	08002765 	.word	0x08002765
 80020f4:	08002765 	.word	0x08002765
 80020f8:	08002765 	.word	0x08002765
 80020fc:	08002765 	.word	0x08002765
 8002100:	08002765 	.word	0x08002765
 8002104:	08002765 	.word	0x08002765
 8002108:	08002765 	.word	0x08002765
 800210c:	08002765 	.word	0x08002765
 8002110:	08002765 	.word	0x08002765
 8002114:	08002765 	.word	0x08002765
 8002118:	08002765 	.word	0x08002765
 800211c:	08002765 	.word	0x08002765
 8002120:	08002765 	.word	0x08002765
 8002124:	08002765 	.word	0x08002765
 8002128:	08002765 	.word	0x08002765
 800212c:	08002765 	.word	0x08002765
 8002130:	08002765 	.word	0x08002765
 8002134:	08002765 	.word	0x08002765
 8002138:	08002765 	.word	0x08002765
 800213c:	08002765 	.word	0x08002765
 8002140:	08002765 	.word	0x08002765
 8002144:	08002765 	.word	0x08002765
 8002148:	08002765 	.word	0x08002765
 800214c:	08002765 	.word	0x08002765
 8002150:	08002765 	.word	0x08002765
 8002154:	08002765 	.word	0x08002765
 8002158:	08002765 	.word	0x08002765
 800215c:	08002765 	.word	0x08002765
 8002160:	08002765 	.word	0x08002765
 8002164:	08002765 	.word	0x08002765
 8002168:	08002765 	.word	0x08002765
 800216c:	08002765 	.word	0x08002765
 8002170:	08002765 	.word	0x08002765
 8002174:	08002765 	.word	0x08002765
 8002178:	08002765 	.word	0x08002765
 800217c:	08002765 	.word	0x08002765
 8002180:	08002765 	.word	0x08002765
 8002184:	08002765 	.word	0x08002765
 8002188:	08002765 	.word	0x08002765
 800218c:	08002765 	.word	0x08002765
 8002190:	08002765 	.word	0x08002765
 8002194:	08002765 	.word	0x08002765
 8002198:	08002765 	.word	0x08002765
 800219c:	08002765 	.word	0x08002765
 80021a0:	08002765 	.word	0x08002765
 80021a4:	08002765 	.word	0x08002765
 80021a8:	08002765 	.word	0x08002765
 80021ac:	08002765 	.word	0x08002765
 80021b0:	08002765 	.word	0x08002765
 80021b4:	08002765 	.word	0x08002765
 80021b8:	08002765 	.word	0x08002765
 80021bc:	08002765 	.word	0x08002765
 80021c0:	08002765 	.word	0x08002765
 80021c4:	08002765 	.word	0x08002765
 80021c8:	08002765 	.word	0x08002765
 80021cc:	08002765 	.word	0x08002765
 80021d0:	08002765 	.word	0x08002765
 80021d4:	08002765 	.word	0x08002765
 80021d8:	08002765 	.word	0x08002765
 80021dc:	08002765 	.word	0x08002765
 80021e0:	0800273d 	.word	0x0800273d
 80021e4:	08002765 	.word	0x08002765
 80021e8:	08002765 	.word	0x08002765
 80021ec:	08002765 	.word	0x08002765
 80021f0:	08002765 	.word	0x08002765
 80021f4:	08002765 	.word	0x08002765
 80021f8:	08002765 	.word	0x08002765
 80021fc:	08002765 	.word	0x08002765
 8002200:	08002765 	.word	0x08002765
 8002204:	08002765 	.word	0x08002765
 8002208:	08002765 	.word	0x08002765
 800220c:	08002765 	.word	0x08002765
 8002210:	08002765 	.word	0x08002765
 8002214:	08002765 	.word	0x08002765
 8002218:	08002765 	.word	0x08002765
 800221c:	08002765 	.word	0x08002765
 8002220:	08002743 	.word	0x08002743
 8002224:	08002765 	.word	0x08002765
 8002228:	08002765 	.word	0x08002765
 800222c:	08002765 	.word	0x08002765
 8002230:	08002765 	.word	0x08002765
 8002234:	08002765 	.word	0x08002765
 8002238:	08002765 	.word	0x08002765
 800223c:	08002765 	.word	0x08002765
 8002240:	08002765 	.word	0x08002765
 8002244:	08002765 	.word	0x08002765
 8002248:	08002765 	.word	0x08002765
 800224c:	08002765 	.word	0x08002765
 8002250:	08002765 	.word	0x08002765
 8002254:	08002765 	.word	0x08002765
 8002258:	08002765 	.word	0x08002765
 800225c:	08002765 	.word	0x08002765
 8002260:	08002751 	.word	0x08002751
 8002264:	08002729 	.word	0x08002729
 8002268:	08002765 	.word	0x08002765
 800226c:	08002765 	.word	0x08002765
 8002270:	08002765 	.word	0x08002765
 8002274:	08002765 	.word	0x08002765
 8002278:	08002765 	.word	0x08002765
 800227c:	08002765 	.word	0x08002765
 8002280:	08002765 	.word	0x08002765
 8002284:	08002765 	.word	0x08002765
 8002288:	08002765 	.word	0x08002765
 800228c:	08002765 	.word	0x08002765
 8002290:	08002765 	.word	0x08002765
 8002294:	08002765 	.word	0x08002765
 8002298:	08002765 	.word	0x08002765
 800229c:	08002765 	.word	0x08002765
 80022a0:	0800275f 	.word	0x0800275f
 80022a4:	08002715 	.word	0x08002715
	case 0x10: {
		printf("SDN1 ON\n");
 80022a8:	480b      	ldr	r0, [pc, #44]	; (80022d8 <HAL_UART_RxCpltCallback+0x3dc>)
 80022aa:	f017 f8fd 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_UART_RxCpltCallback+0x3e0>)
 80022b0:	2104      	movs	r1, #4
 80022b2:	2201      	movs	r2, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f008 fa17 	bl	800a6e8 <HAL_GPIO_WritePin>
		break;
 80022ba:	e25e      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 80022bc:	4808      	ldr	r0, [pc, #32]	; (80022e0 <HAL_UART_RxCpltCallback+0x3e4>)
 80022be:	f017 f8f3 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_UART_RxCpltCallback+0x3e0>)
 80022c4:	2104      	movs	r1, #4
 80022c6:	2200      	movs	r2, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f008 fa0d 	bl	800a6e8 <HAL_GPIO_WritePin>
		break;
 80022ce:	e254      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
 80022d0:	24001a9c 	.word	0x24001a9c
 80022d4:	24001e3c 	.word	0x24001e3c
 80022d8:	08019e70 	.word	0x08019e70
 80022dc:	58020400 	.word	0x58020400
 80022e0:	08019e78 	.word	0x08019e78
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 80022e4:	48bf      	ldr	r0, [pc, #764]	; (80025e4 <HAL_UART_RxCpltCallback+0x6e8>)
 80022e6:	f017 f8df 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 80022ea:	4bbf      	ldr	r3, [pc, #764]	; (80025e8 <HAL_UART_RxCpltCallback+0x6ec>)
 80022ec:	2120      	movs	r1, #32
 80022ee:	2201      	movs	r2, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f008 f9f9 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 80022f6:	2101      	movs	r1, #1
 80022f8:	2008      	movs	r0, #8
 80022fa:	f002 fb6f 	bl	80049dc <set_rail_monitor_enable>
		break;
 80022fe:	e23c      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8002300:	48ba      	ldr	r0, [pc, #744]	; (80025ec <HAL_UART_RxCpltCallback+0x6f0>)
 8002302:	f017 f8d1 	bl	80194a8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8002306:	2308      	movs	r3, #8
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e00f      	b.n	800232c <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800230c:	4ab8      	ldr	r2, [pc, #736]	; (80025f0 <HAL_UART_RxCpltCallback+0x6f4>)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002314:	4ab6      	ldr	r2, [pc, #728]	; (80025f0 <HAL_UART_RxCpltCallback+0x6f4>)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	889b      	ldrh	r3, [r3, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	4619      	mov	r1, r3
 8002322:	f008 f9e1 	bl	800a6e8 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3b01      	subs	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	dcec      	bgt.n	800230c <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002332:	2310      	movs	r3, #16
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	e008      	b.n	800234a <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fb4c 	bl	80049dc <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	3b01      	subs	r3, #1
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b07      	cmp	r3, #7
 800234e:	dcf3      	bgt.n	8002338 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8002350:	e213      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8002352:	48a8      	ldr	r0, [pc, #672]	; (80025f4 <HAL_UART_RxCpltCallback+0x6f8>)
 8002354:	f017 f8a8 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8002358:	4ba7      	ldr	r3, [pc, #668]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 800235a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800235e:	2201      	movs	r2, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f008 f9c1 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8002366:	2101      	movs	r1, #1
 8002368:	2009      	movs	r0, #9
 800236a:	f002 fb37 	bl	80049dc <set_rail_monitor_enable>

		break;
 800236e:	e204      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8002370:	48a2      	ldr	r0, [pc, #648]	; (80025fc <HAL_UART_RxCpltCallback+0x700>)
 8002372:	f017 f899 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8002376:	4ba0      	ldr	r3, [pc, #640]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 8002378:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800237c:	2200      	movs	r2, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f008 f9b2 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8002384:	2100      	movs	r1, #0
 8002386:	2009      	movs	r0, #9
 8002388:	f002 fb28 	bl	80049dc <set_rail_monitor_enable>
		break;
 800238c:	e1f5      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 800238e:	489c      	ldr	r0, [pc, #624]	; (8002600 <HAL_UART_RxCpltCallback+0x704>)
 8002390:	f017 f88a 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8002394:	4b98      	ldr	r3, [pc, #608]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 8002396:	2180      	movs	r1, #128	; 0x80
 8002398:	2201      	movs	r2, #1
 800239a:	4618      	mov	r0, r3
 800239c:	f008 f9a4 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 80023a0:	2101      	movs	r1, #1
 80023a2:	200a      	movs	r0, #10
 80023a4:	f002 fb1a 	bl	80049dc <set_rail_monitor_enable>

		break;
 80023a8:	e1e7      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 80023aa:	4896      	ldr	r0, [pc, #600]	; (8002604 <HAL_UART_RxCpltCallback+0x708>)
 80023ac:	f017 f87c 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 80023b0:	4b91      	ldr	r3, [pc, #580]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 80023b2:	2180      	movs	r1, #128	; 0x80
 80023b4:	2200      	movs	r2, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f008 f996 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 80023bc:	2100      	movs	r1, #0
 80023be:	200a      	movs	r0, #10
 80023c0:	f002 fb0c 	bl	80049dc <set_rail_monitor_enable>
		break;
 80023c4:	e1d9      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 80023c6:	4890      	ldr	r0, [pc, #576]	; (8002608 <HAL_UART_RxCpltCallback+0x70c>)
 80023c8:	f017 f86e 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 80023cc:	4b8a      	ldr	r3, [pc, #552]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 80023ce:	2140      	movs	r1, #64	; 0x40
 80023d0:	2201      	movs	r2, #1
 80023d2:	4618      	mov	r0, r3
 80023d4:	f008 f988 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 80023d8:	2101      	movs	r1, #1
 80023da:	200b      	movs	r0, #11
 80023dc:	f002 fafe 	bl	80049dc <set_rail_monitor_enable>

		break;
 80023e0:	e1cb      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 80023e2:	488a      	ldr	r0, [pc, #552]	; (800260c <HAL_UART_RxCpltCallback+0x710>)
 80023e4:	f017 f860 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80023e8:	4b83      	ldr	r3, [pc, #524]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 80023ea:	2140      	movs	r1, #64	; 0x40
 80023ec:	2200      	movs	r2, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f008 f97a 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 80023f4:	2100      	movs	r1, #0
 80023f6:	200b      	movs	r0, #11
 80023f8:	f002 faf0 	bl	80049dc <set_rail_monitor_enable>
		break;
 80023fc:	e1bd      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 80023fe:	4884      	ldr	r0, [pc, #528]	; (8002610 <HAL_UART_RxCpltCallback+0x714>)
 8002400:	f017 f852 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8002404:	4b7c      	ldr	r3, [pc, #496]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 8002406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800240a:	2201      	movs	r2, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f008 f96b 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8002412:	2101      	movs	r1, #1
 8002414:	200c      	movs	r0, #12
 8002416:	f002 fae1 	bl	80049dc <set_rail_monitor_enable>

		break;
 800241a:	e1ae      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 800241c:	487d      	ldr	r0, [pc, #500]	; (8002614 <HAL_UART_RxCpltCallback+0x718>)
 800241e:	f017 f843 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8002422:	4b75      	ldr	r3, [pc, #468]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 8002424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002428:	2200      	movs	r2, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f008 f95c 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8002430:	2100      	movs	r1, #0
 8002432:	200c      	movs	r0, #12
 8002434:	f002 fad2 	bl	80049dc <set_rail_monitor_enable>
		break;
 8002438:	e19f      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 800243a:	4877      	ldr	r0, [pc, #476]	; (8002618 <HAL_UART_RxCpltCallback+0x71c>)
 800243c:	f017 f834 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8002440:	4b6d      	ldr	r3, [pc, #436]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 8002442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002446:	2201      	movs	r2, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f008 f94d 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 800244e:	2101      	movs	r1, #1
 8002450:	200d      	movs	r0, #13
 8002452:	f002 fac3 	bl	80049dc <set_rail_monitor_enable>

		break;
 8002456:	e190      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8002458:	4870      	ldr	r0, [pc, #448]	; (800261c <HAL_UART_RxCpltCallback+0x720>)
 800245a:	f017 f825 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 800245e:	4b66      	ldr	r3, [pc, #408]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 8002460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002464:	2200      	movs	r2, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f008 f93e 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 800246c:	2100      	movs	r1, #0
 800246e:	200d      	movs	r0, #13
 8002470:	f002 fab4 	bl	80049dc <set_rail_monitor_enable>
		break;
 8002474:	e181      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8002476:	486a      	ldr	r0, [pc, #424]	; (8002620 <HAL_UART_RxCpltCallback+0x724>)
 8002478:	f017 f816 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 800247c:	4b5e      	ldr	r3, [pc, #376]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 800247e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002482:	2201      	movs	r2, #1
 8002484:	4618      	mov	r0, r3
 8002486:	f008 f92f 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 800248a:	2101      	movs	r1, #1
 800248c:	200f      	movs	r0, #15
 800248e:	f002 faa5 	bl	80049dc <set_rail_monitor_enable>

		break;
 8002492:	e172      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8002494:	4863      	ldr	r0, [pc, #396]	; (8002624 <HAL_UART_RxCpltCallback+0x728>)
 8002496:	f017 f807 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800249a:	4b57      	ldr	r3, [pc, #348]	; (80025f8 <HAL_UART_RxCpltCallback+0x6fc>)
 800249c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024a0:	2200      	movs	r2, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f008 f920 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 80024a8:	2100      	movs	r1, #0
 80024aa:	200f      	movs	r0, #15
 80024ac:	f002 fa96 	bl	80049dc <set_rail_monitor_enable>
		break;
 80024b0:	e163      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 80024b2:	485d      	ldr	r0, [pc, #372]	; (8002628 <HAL_UART_RxCpltCallback+0x72c>)
 80024b4:	f016 fff8 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80024b8:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <HAL_UART_RxCpltCallback+0x6ec>)
 80024ba:	2140      	movs	r1, #64	; 0x40
 80024bc:	2201      	movs	r2, #1
 80024be:	4618      	mov	r0, r3
 80024c0:	f008 f912 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 80024c4:	2101      	movs	r1, #1
 80024c6:	2010      	movs	r0, #16
 80024c8:	f002 fa88 	bl	80049dc <set_rail_monitor_enable>

		break;
 80024cc:	e155      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 80024ce:	4857      	ldr	r0, [pc, #348]	; (800262c <HAL_UART_RxCpltCallback+0x730>)
 80024d0:	f016 ffea 	bl	80194a8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80024d4:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <HAL_UART_RxCpltCallback+0x6ec>)
 80024d6:	2140      	movs	r1, #64	; 0x40
 80024d8:	2200      	movs	r2, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f008 f904 	bl	800a6e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 80024e0:	2100      	movs	r1, #0
 80024e2:	2010      	movs	r0, #16
 80024e4:	f002 fa7a 	bl	80049dc <set_rail_monitor_enable>
		break;
 80024e8:	e147      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 80024ea:	4851      	ldr	r0, [pc, #324]	; (8002630 <HAL_UART_RxCpltCallback+0x734>)
 80024ec:	f016 ffdc 	bl	80194a8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 80024f0:	2300      	movs	r3, #0
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2320      	movs	r3, #32
 80024f6:	4a4f      	ldr	r2, [pc, #316]	; (8002634 <HAL_UART_RxCpltCallback+0x738>)
 80024f8:	2100      	movs	r1, #0
 80024fa:	484f      	ldr	r0, [pc, #316]	; (8002638 <HAL_UART_RxCpltCallback+0x73c>)
 80024fc:	f004 fa70 	bl	80069e0 <HAL_DAC_Start_DMA>
		break;
 8002500:	e13b      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8002502:	484e      	ldr	r0, [pc, #312]	; (800263c <HAL_UART_RxCpltCallback+0x740>)
 8002504:	f016 ffd0 	bl	80194a8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8002508:	2100      	movs	r1, #0
 800250a:	484b      	ldr	r0, [pc, #300]	; (8002638 <HAL_UART_RxCpltCallback+0x73c>)
 800250c:	f004 fb28 	bl	8006b60 <HAL_DAC_Stop_DMA>
		break;
 8002510:	e133      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8002512:	484b      	ldr	r0, [pc, #300]	; (8002640 <HAL_UART_RxCpltCallback+0x744>)
 8002514:	f016 ffc8 	bl	80194a8 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002518:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <HAL_UART_RxCpltCallback+0x748>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2102      	movs	r1, #2
 800251e:	4618      	mov	r0, r3
 8002520:	f013 fe8a 	bl	8016238 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002528:	f44f 729c 	mov.w	r2, #312	; 0x138
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 800252e:	4b46      	ldr	r3, [pc, #280]	; (8002648 <HAL_UART_RxCpltCallback+0x74c>)
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]

		break;
 8002534:	e121      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8002536:	4845      	ldr	r0, [pc, #276]	; (800264c <HAL_UART_RxCpltCallback+0x750>)
 8002538:	f016 ffb6 	bl	80194a8 <puts>
		ERPA_ENABLED = 0;
 800253c:	4b42      	ldr	r3, [pc, #264]	; (8002648 <HAL_UART_RxCpltCallback+0x74c>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002546:	2200      	movs	r2, #0
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800254a:	e116      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1B: {
		printf("PMT ON\n");
 800254c:	4840      	ldr	r0, [pc, #256]	; (8002650 <HAL_UART_RxCpltCallback+0x754>)
 800254e:	f016 ffab 	bl	80194a8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002552:	2100      	movs	r1, #0
 8002554:	483f      	ldr	r0, [pc, #252]	; (8002654 <HAL_UART_RxCpltCallback+0x758>)
 8002556:	f00f fb81 	bl	8011c5c <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800255a:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <HAL_UART_RxCpltCallback+0x748>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2101      	movs	r1, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f013 fe69 	bl	8016238 <osEventFlagsSet>
		break;
 8002566:	e108      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8002568:	483b      	ldr	r0, [pc, #236]	; (8002658 <HAL_UART_RxCpltCallback+0x75c>)
 800256a:	f016 ff9d 	bl	80194a8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800256e:	2100      	movs	r1, #0
 8002570:	4838      	ldr	r0, [pc, #224]	; (8002654 <HAL_UART_RxCpltCallback+0x758>)
 8002572:	f00f fccd 	bl	8011f10 <HAL_TIM_OC_Stop_IT>
		break;
 8002576:	e100      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1C: {
		printf("HK ON \n");
 8002578:	4838      	ldr	r0, [pc, #224]	; (800265c <HAL_UART_RxCpltCallback+0x760>)
 800257a:	f016 ff95 	bl	80194a8 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800257e:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_UART_RxCpltCallback+0x748>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2104      	movs	r1, #4
 8002584:	4618      	mov	r0, r3
 8002586:	f013 fe57 	bl	8016238 <osEventFlagsSet>
		HK_ENABLED = 1;
 800258a:	4b35      	ldr	r3, [pc, #212]	; (8002660 <HAL_UART_RxCpltCallback+0x764>)
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
		break;
 8002590:	e0f3      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8002592:	4834      	ldr	r0, [pc, #208]	; (8002664 <HAL_UART_RxCpltCallback+0x768>)
 8002594:	f016 ff88 	bl	80194a8 <puts>
		HK_ENABLED = 0;
 8002598:	4b31      	ldr	r3, [pc, #196]	; (8002660 <HAL_UART_RxCpltCallback+0x764>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
		break;
 800259e:	e0ec      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1D: {
		printf("Step Up\n");
 80025a0:	4831      	ldr	r0, [pc, #196]	; (8002668 <HAL_UART_RxCpltCallback+0x76c>)
 80025a2:	f016 ff81 	bl	80194a8 <puts>
		if (step < 14) {
 80025a6:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_UART_RxCpltCallback+0x770>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b0d      	cmp	r3, #13
 80025ae:	f200 80dd 	bhi.w	800276c <HAL_UART_RxCpltCallback+0x870>
			step += 2;
 80025b2:	4b2e      	ldr	r3, [pc, #184]	; (800266c <HAL_UART_RxCpltCallback+0x770>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	3302      	adds	r3, #2
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_UART_RxCpltCallback+0x770>)
 80025be:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_UART_RxCpltCallback+0x770>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <HAL_UART_RxCpltCallback+0x738>)
 80025ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	4819      	ldr	r0, [pc, #100]	; (8002638 <HAL_UART_RxCpltCallback+0x73c>)
 80025d4:	f004 fb67 	bl	8006ca6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80025d8:	2100      	movs	r1, #0
 80025da:	4817      	ldr	r0, [pc, #92]	; (8002638 <HAL_UART_RxCpltCallback+0x73c>)
 80025dc:	f004 f9a8 	bl	8006930 <HAL_DAC_Start>
		}
		break;
 80025e0:	e0c4      	b.n	800276c <HAL_UART_RxCpltCallback+0x870>
 80025e2:	bf00      	nop
 80025e4:	08019e84 	.word	0x08019e84
 80025e8:	58020400 	.word	0x58020400
 80025ec:	08019e90 	.word	0x08019e90
 80025f0:	0801a18c 	.word	0x0801a18c
 80025f4:	08019e9c 	.word	0x08019e9c
 80025f8:	58020800 	.word	0x58020800
 80025fc:	08019ea8 	.word	0x08019ea8
 8002600:	08019eb8 	.word	0x08019eb8
 8002604:	08019ec4 	.word	0x08019ec4
 8002608:	08019ed0 	.word	0x08019ed0
 800260c:	08019edc 	.word	0x08019edc
 8002610:	08019eec 	.word	0x08019eec
 8002614:	08019ef8 	.word	0x08019ef8
 8002618:	08019f04 	.word	0x08019f04
 800261c:	08019f10 	.word	0x08019f10
 8002620:	08019f1c 	.word	0x08019f1c
 8002624:	08019f2c 	.word	0x08019f2c
 8002628:	08019f3c 	.word	0x08019f3c
 800262c:	08019f48 	.word	0x08019f48
 8002630:	08019f58 	.word	0x08019f58
 8002634:	24000038 	.word	0x24000038
 8002638:	24000314 	.word	0x24000314
 800263c:	08019f68 	.word	0x08019f68
 8002640:	08019f78 	.word	0x08019f78
 8002644:	24001a90 	.word	0x24001a90
 8002648:	24001add 	.word	0x24001add
 800264c:	08019f80 	.word	0x08019f80
 8002650:	08019f8c 	.word	0x08019f8c
 8002654:	24001da4 	.word	0x24001da4
 8002658:	08019f94 	.word	0x08019f94
 800265c:	08019f9c 	.word	0x08019f9c
 8002660:	24001adc 	.word	0x24001adc
 8002664:	08019fa4 	.word	0x08019fa4
 8002668:	08019fac 	.word	0x08019fac
 800266c:	24001ade 	.word	0x24001ade
	}
	case 0x0D: {
		printf("Step Down\n");
 8002670:	4844      	ldr	r0, [pc, #272]	; (8002784 <HAL_UART_RxCpltCallback+0x888>)
 8002672:	f016 ff19 	bl	80194a8 <puts>
		if (step > 1) {
 8002676:	4b44      	ldr	r3, [pc, #272]	; (8002788 <HAL_UART_RxCpltCallback+0x88c>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d977      	bls.n	8002770 <HAL_UART_RxCpltCallback+0x874>
			step -= 2;
 8002680:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_UART_RxCpltCallback+0x88c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	3b02      	subs	r3, #2
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_UART_RxCpltCallback+0x88c>)
 800268c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800268e:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_UART_RxCpltCallback+0x88c>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4b3d      	ldr	r3, [pc, #244]	; (800278c <HAL_UART_RxCpltCallback+0x890>)
 8002698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	483b      	ldr	r0, [pc, #236]	; (8002790 <HAL_UART_RxCpltCallback+0x894>)
 80026a2:	f004 fb00 	bl	8006ca6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80026a6:	2100      	movs	r1, #0
 80026a8:	4839      	ldr	r0, [pc, #228]	; (8002790 <HAL_UART_RxCpltCallback+0x894>)
 80026aa:	f004 f941 	bl	8006930 <HAL_DAC_Start>
		}
		break;
 80026ae:	e05f      	b.n	8002770 <HAL_UART_RxCpltCallback+0x874>
	}
	case 0x1E: {
		printf("Factor Up\n");
 80026b0:	4838      	ldr	r0, [pc, #224]	; (8002794 <HAL_UART_RxCpltCallback+0x898>)
 80026b2:	f016 fef9 	bl	80194a8 <puts>
		if (cadence <= 50000) {
 80026b6:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_UART_RxCpltCallback+0x89c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80026be:	4293      	cmp	r3, r2
 80026c0:	d858      	bhi.n	8002774 <HAL_UART_RxCpltCallback+0x878>
			cadence *= 2;
 80026c2:	4b35      	ldr	r3, [pc, #212]	; (8002798 <HAL_UART_RxCpltCallback+0x89c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4a33      	ldr	r2, [pc, #204]	; (8002798 <HAL_UART_RxCpltCallback+0x89c>)
 80026ca:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80026cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026d0:	4b31      	ldr	r3, [pc, #196]	; (8002798 <HAL_UART_RxCpltCallback+0x89c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80026d6:	e04d      	b.n	8002774 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0E: {
		printf("Factor Down\n");
 80026d8:	4830      	ldr	r0, [pc, #192]	; (800279c <HAL_UART_RxCpltCallback+0x8a0>)
 80026da:	f016 fee5 	bl	80194a8 <puts>
		if (cadence >= 6250) {
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <HAL_UART_RxCpltCallback+0x89c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f641 0269 	movw	r2, #6249	; 0x1869
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d946      	bls.n	8002778 <HAL_UART_RxCpltCallback+0x87c>
			cadence /= 2;
 80026ea:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_UART_RxCpltCallback+0x89c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	4a29      	ldr	r2, [pc, #164]	; (8002798 <HAL_UART_RxCpltCallback+0x89c>)
 80026f2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80026f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_UART_RxCpltCallback+0x89c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80026fe:	e03b      	b.n	8002778 <HAL_UART_RxCpltCallback+0x87c>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8002700:	4827      	ldr	r0, [pc, #156]	; (80027a0 <HAL_UART_RxCpltCallback+0x8a4>)
 8002702:	f016 fed1 	bl	80194a8 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8002706:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <HAL_UART_RxCpltCallback+0x8a8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2102      	movs	r1, #2
 800270c:	4618      	mov	r0, r3
 800270e:	f013 fd93 	bl	8016238 <osEventFlagsSet>
		break;
 8002712:	e032      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8002714:	4824      	ldr	r0, [pc, #144]	; (80027a8 <HAL_UART_RxCpltCallback+0x8ac>)
 8002716:	f016 fec7 	bl	80194a8 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_UART_RxCpltCallback+0x8a8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2104      	movs	r1, #4
 8002720:	4618      	mov	r0, r3
 8002722:	f013 fd89 	bl	8016238 <osEventFlagsSet>
		break;
 8002726:	e028      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8002728:	4820      	ldr	r0, [pc, #128]	; (80027ac <HAL_UART_RxCpltCallback+0x8b0>)
 800272a:	f016 febd 	bl	80194a8 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <HAL_UART_RxCpltCallback+0x8a8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2108      	movs	r1, #8
 8002734:	4618      	mov	r0, r3
 8002736:	f013 fd7f 	bl	8016238 <osEventFlagsSet>
		break;
 800273a:	e01e      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xAF: {
		sync();
 800273c:	f000 f964 	bl	8002a08 <sync>
		break;
 8002740:	e01b      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_UART_RxCpltCallback+0x8b4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2101      	movs	r1, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f013 fd75 	bl	8016238 <osEventFlagsSet>
		break;
 800274e:	e014      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_UART_RxCpltCallback+0x8b4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2102      	movs	r1, #2
 8002756:	4618      	mov	r0, r3
 8002758:	f013 fd6e 	bl	8016238 <osEventFlagsSet>
		break;
 800275c:	e00d      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xDF: {
		reset_error_counters();
 800275e:	f7fe fe25 	bl	80013ac <reset_error_counters>
		break;
 8002762:	e00a      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
	}
	default: {
		printf("Unknown Command\n");
 8002764:	4813      	ldr	r0, [pc, #76]	; (80027b4 <HAL_UART_RxCpltCallback+0x8b8>)
 8002766:	f016 fe9f 	bl	80194a8 <puts>
		break;
 800276a:	e006      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
		break;
 800276c:	bf00      	nop
 800276e:	e004      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
		break;
 8002770:	bf00      	nop
 8002772:	e002      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
		break;
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <HAL_UART_RxCpltCallback+0x87e>
		break;
 8002778:	bf00      	nop
	}
	}
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	08019fb4 	.word	0x08019fb4
 8002788:	24001ade 	.word	0x24001ade
 800278c:	24000038 	.word	0x24000038
 8002790:	24000314 	.word	0x24000314
 8002794:	08019fc0 	.word	0x08019fc0
 8002798:	240000b8 	.word	0x240000b8
 800279c:	08019fcc 	.word	0x08019fcc
 80027a0:	08019fd8 	.word	0x08019fd8
 80027a4:	24001a94 	.word	0x24001a94
 80027a8:	08019fe8 	.word	0x08019fe8
 80027ac:	08019ff4 	.word	0x08019ff4
 80027b0:	24001a98 	.word	0x24001a98
 80027b4:	0801a000 	.word	0x0801a000

080027b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80027bc:	f000 f9ca 	bl	8002b54 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027c0:	f002 faaa 	bl	8004d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027c4:	f000 f824 	bl	8002810 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80027c8:	f000 f8a4 	bl	8002914 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027cc:	f7ff f990 	bl	8001af0 <MX_GPIO_Init>
  MX_DMA_Init();
 80027d0:	f7fe fa8a 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80027d4:	f001 fe3a 	bl	800444c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80027d8:	f7ff fa04 	bl	8001be4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80027dc:	f000 feae 	bl	800353c <MX_SPI2_Init>
  MX_TIM2_Init();
 80027e0:	f001 fb9a 	bl	8003f18 <MX_TIM2_Init>
  MX_TIM1_Init();
 80027e4:	f001 faea 	bl	8003dbc <MX_TIM1_Init>
  MX_ADC3_Init();
 80027e8:	f7fe f81e 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80027ec:	f7fd fefa 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80027f0:	f7fe f9c6 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80027f4:	f000 fe4a 	bl	800348c <MX_SPI1_Init>
  MX_RTC_Init();
 80027f8:	f000 fc16 	bl	8003028 <MX_RTC_Init>
 // MX_IWDG1_Init();
  /* USER CODE BEGIN 2 */
  //get_reset_cause();
  system_setup();
 80027fc:	f000 f8ba 	bl	8002974 <system_setup>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002800:	f013 fbc4 	bl	8015f8c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002804:	f7fe ff48 	bl	8001698 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002808:	f013 fbe4 	bl	8015fd4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800280c:	e7fe      	b.n	800280c <main+0x54>
	...

08002810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b09c      	sub	sp, #112	; 0x70
 8002814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281a:	224c      	movs	r2, #76	; 0x4c
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f016 fdcc 	bl	80193bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2220      	movs	r2, #32
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f016 fdc6 	bl	80193bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002830:	2002      	movs	r0, #2
 8002832:	f00a fb23 	bl	800ce7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4b34      	ldr	r3, [pc, #208]	; (800290c <SystemClock_Config+0xfc>)
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	4a33      	ldr	r2, [pc, #204]	; (800290c <SystemClock_Config+0xfc>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002846:	4b31      	ldr	r3, [pc, #196]	; (800290c <SystemClock_Config+0xfc>)
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <SystemClock_Config+0x100>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002858:	4a2d      	ldr	r2, [pc, #180]	; (8002910 <SystemClock_Config+0x100>)
 800285a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <SystemClock_Config+0x100>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800286c:	bf00      	nop
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <SystemClock_Config+0x100>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287a:	d1f8      	bne.n	800286e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800287c:	230b      	movs	r3, #11
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8002886:	2309      	movs	r3, #9
 8002888:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800288a:	2340      	movs	r3, #64	; 0x40
 800288c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800288e:	2301      	movs	r3, #1
 8002890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002892:	2302      	movs	r3, #2
 8002894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002896:	2302      	movs	r3, #2
 8002898:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800289a:	2304      	movs	r3, #4
 800289c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800289e:	2318      	movs	r3, #24
 80028a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80028a2:	2302      	movs	r3, #2
 80028a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028a6:	2302      	movs	r3, #2
 80028a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028aa:	2302      	movs	r3, #2
 80028ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80028ae:	2308      	movs	r3, #8
 80028b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80028b2:	2302      	movs	r3, #2
 80028b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028be:	4618      	mov	r0, r3
 80028c0:	f00a fb16 	bl	800cef0 <HAL_RCC_OscConfig>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80028ca:	f000 f997 	bl	8002bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ce:	233f      	movs	r3, #63	; 0x3f
 80028d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d2:	2303      	movs	r3, #3
 80028d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80028e2:	2340      	movs	r3, #64	; 0x40
 80028e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	2101      	movs	r1, #1
 80028f2:	4618      	mov	r0, r3
 80028f4:	f00a ff56 	bl	800d7a4 <HAL_RCC_ClockConfig>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80028fe:	f000 f97d 	bl	8002bfc <Error_Handler>
  }
}
 8002902:	bf00      	nop
 8002904:	3770      	adds	r7, #112	; 0x70
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	58000400 	.word	0x58000400
 8002910:	58024800 	.word	0x58024800

08002914 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b0b0      	sub	sp, #192	; 0xc0
 8002918:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800291a:	463b      	mov	r3, r7
 800291c:	22c0      	movs	r2, #192	; 0xc0
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f016 fd4b 	bl	80193bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002926:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002932:	2304      	movs	r3, #4
 8002934:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8002936:	2318      	movs	r3, #24
 8002938:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800293a:	2308      	movs	r3, #8
 800293c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800293e:	2302      	movs	r3, #2
 8002940:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002942:	2302      	movs	r3, #2
 8002944:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800294a:	2320      	movs	r3, #32
 800294c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002958:	463b      	mov	r3, r7
 800295a:	4618      	mov	r0, r3
 800295c:	f00b faf0 	bl	800df40 <HAL_RCCEx_PeriphCLKConfig>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002966:	f000 f949 	bl	8002bfc <Error_Handler>
  }
}
 800296a:	bf00      	nop
 800296c:	37c0      	adds	r7, #192	; 0xc0
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts
  	//error_counter_init();


	packet_event_flags = osEventFlagsNew(NULL);
 8002978:	2000      	movs	r0, #0
 800297a:	f013 fc1e 	bl	80161ba <osEventFlagsNew>
 800297e:	4603      	mov	r3, r0
 8002980:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <system_setup+0x7c>)
 8002982:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <system_setup+0x7c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d100      	bne.n	800298e <system_setup+0x1a>
        while (1);
 800298c:	e7fe      	b.n	800298c <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800298e:	2000      	movs	r0, #0
 8002990:	f013 fc13 	bl	80161ba <osEventFlagsNew>
 8002994:	4603      	mov	r3, r0
 8002996:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <system_setup+0x80>)
 8002998:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <system_setup+0x80>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d100      	bne.n	80029a4 <system_setup+0x30>
        while (1);
 80029a2:	e7fe      	b.n	80029a2 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f013 fc08 	bl	80161ba <osEventFlagsNew>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <system_setup+0x84>)
 80029ae:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <system_setup+0x84>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d100      	bne.n	80029ba <system_setup+0x46>
        while (1);
 80029b8:	e7fe      	b.n	80029b8 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 80029ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80029c2:	210c      	movs	r1, #12
 80029c4:	480d      	ldr	r0, [pc, #52]	; (80029fc <system_setup+0x88>)
 80029c6:	f00f f949 	bl	8011c5c <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 80029ca:	f001 fe49 	bl	8004660 <voltage_monitor_init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d100      	bne.n	80029d6 <system_setup+0x62>
		while (1);
 80029d4:	e7fe      	b.n	80029d4 <system_setup+0x60>
	}

	if (!init_adc_dma()) {
 80029d6:	f000 fbb9 	bl	800314c <init_adc_dma>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d100      	bne.n	80029e2 <system_setup+0x6e>
		while (1);
 80029e0:	e7fe      	b.n	80029e0 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80029e2:	2201      	movs	r2, #1
 80029e4:	4906      	ldr	r1, [pc, #24]	; (8002a00 <system_setup+0x8c>)
 80029e6:	4807      	ldr	r0, [pc, #28]	; (8002a04 <system_setup+0x90>)
 80029e8:	f010 fe18 	bl	801361c <HAL_UART_Receive_IT>

}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	24001a90 	.word	0x24001a90
 80029f4:	24001a94 	.word	0x24001a94
 80029f8:	24001a98 	.word	0x24001a98
 80029fc:	24001df0 	.word	0x24001df0
 8002a00:	24001a9c 	.word	0x24001a9c
 8002a04:	24001e3c 	.word	0x24001e3c

08002a08 <sync>:

void sync() {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
	send_ACK();
 8002a0e:	f000 f821 	bl	8002a54 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002a12:	480e      	ldr	r0, [pc, #56]	; (8002a4c <sync+0x44>)
 8002a14:	f010 fe4e 	bl	80136b4 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002a18:	2364      	movs	r3, #100	; 0x64
 8002a1a:	2209      	movs	r2, #9
 8002a1c:	490c      	ldr	r1, [pc, #48]	; (8002a50 <sync+0x48>)
 8002a1e:	480b      	ldr	r0, [pc, #44]	; (8002a4c <sync+0x44>)
 8002a20:	f010 fd34 	bl	801348c <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <sync+0x48>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	2bff      	cmp	r3, #255	; 0xff
 8002a2e:	d1f3      	bne.n	8002a18 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8002a30:	4807      	ldr	r0, [pc, #28]	; (8002a50 <sync+0x48>)
 8002a32:	f001 fc49 	bl	80042c8 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a36:	2201      	movs	r2, #1
 8002a38:	4905      	ldr	r1, [pc, #20]	; (8002a50 <sync+0x48>)
 8002a3a:	4804      	ldr	r0, [pc, #16]	; (8002a4c <sync+0x44>)
 8002a3c:	f010 fdee 	bl	801361c <HAL_UART_Receive_IT>
	send_previous_error_packet();
 8002a40:	f7fe fcd4 	bl	80013ec <send_previous_error_packet>
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	24001e3c 	.word	0x24001e3c
 8002a50:	24001a9c 	.word	0x24001a9c

08002a54 <send_ACK>:

void send_ACK() {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <send_ACK+0x1c>)
 8002a5a:	22ff      	movs	r2, #255	; 0xff
 8002a5c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8002a5e:	2364      	movs	r3, #100	; 0x64
 8002a60:	2201      	movs	r2, #1
 8002a62:	4903      	ldr	r1, [pc, #12]	; (8002a70 <send_ACK+0x1c>)
 8002a64:	4803      	ldr	r0, [pc, #12]	; (8002a74 <send_ACK+0x20>)
 8002a66:	f010 fc83 	bl	8013370 <HAL_UART_Transmit>
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	24001ae8 	.word	0x24001ae8
 8002a74:	24001e3c 	.word	0x24001e3c

08002a78 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8002a7e:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <get_current_step+0xc0>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d04a      	beq.n	8002b24 <get_current_step+0xac>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a94:	da48      	bge.n	8002b28 <get_current_step+0xb0>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d03f      	beq.n	8002b20 <get_current_step+0xa8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	dc3e      	bgt.n	8002b28 <get_current_step+0xb0>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d033      	beq.n	8002b1c <get_current_step+0xa4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002aba:	da35      	bge.n	8002b28 <get_current_step+0xb0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d028      	beq.n	8002b18 <get_current_step+0xa0>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002acc:	4293      	cmp	r3, r2
 8002ace:	dc2b      	bgt.n	8002b28 <get_current_step+0xb0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f240 7245 	movw	r2, #1861	; 0x745
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01c      	beq.n	8002b14 <get_current_step+0x9c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f240 7245 	movw	r2, #1861	; 0x745
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	dc21      	bgt.n	8002b28 <get_current_step+0xb0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d010      	beq.n	8002b10 <get_current_step+0x98>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002af4:	4293      	cmp	r3, r2
 8002af6:	dc17      	bgt.n	8002b28 <get_current_step+0xb0>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <get_current_step+0x90>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002b04:	d002      	beq.n	8002b0c <get_current_step+0x94>
 8002b06:	e00f      	b.n	8002b28 <get_current_step+0xb0>
	case 0:
		return 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e00e      	b.n	8002b2a <get_current_step+0xb2>
	case 620:
		return 1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e00c      	b.n	8002b2a <get_current_step+0xb2>
	case 1241:
		return 2;
 8002b10:	2302      	movs	r3, #2
 8002b12:	e00a      	b.n	8002b2a <get_current_step+0xb2>
	case 1861:
		return 3;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e008      	b.n	8002b2a <get_current_step+0xb2>
	case 2482:
		return 4;
 8002b18:	2304      	movs	r3, #4
 8002b1a:	e006      	b.n	8002b2a <get_current_step+0xb2>
	case 3103:
		return 5;
 8002b1c:	2305      	movs	r3, #5
 8002b1e:	e004      	b.n	8002b2a <get_current_step+0xb2>
	case 3723:
		return 6;
 8002b20:	2306      	movs	r3, #6
 8002b22:	e002      	b.n	8002b2a <get_current_step+0xb2>
	case 4095:
		return 7;
 8002b24:	2307      	movs	r3, #7
 8002b26:	e000      	b.n	8002b2a <get_current_step+0xb2>
	default:
		return -1;
 8002b28:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40007400 	.word	0x40007400

08002b3c <enter_stop>:

void enter_stop() {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	  send_ACK();
 8002b40:	f7ff ff88 	bl	8002a54 <send_ACK>

	  vTaskSuspendAll();
 8002b44:	f014 fed0 	bl	80178e8 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002b48:	2101      	movs	r1, #1
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f00a f95a 	bl	800ce04 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8002b50:	f7ff f968 	bl	8001e24 <__NVIC_SystemReset>

08002b54 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002b5a:	463b      	mov	r3, r7
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002b66:	f003 fe49 	bl	80067fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002b76:	231f      	movs	r3, #31
 8002b78:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002b7a:	2387      	movs	r3, #135	; 0x87
 8002b7c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002b82:	2300      	movs	r3, #0
 8002b84:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002b86:	2301      	movs	r3, #1
 8002b88:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002b96:	463b      	mov	r3, r7
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 fe67 	bl	800686c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x081C0000;
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <MPU_Config+0x80>)
 8002ba4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002ba6:	2311      	movs	r3, #17
 8002ba8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8002baa:	2300      	movs	r3, #0
 8002bac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fe53 	bl	800686c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002bc6:	2004      	movs	r0, #4
 8002bc8:	f003 fe30 	bl	800682c <HAL_MPU_Enable>

}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	081c0000 	.word	0x081c0000

08002bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bea:	f002 f8d1 	bl	8004d90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40001000 	.word	0x40001000

08002bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8002c02:	2302      	movs	r3, #2
 8002c04:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 8002c06:	231a      	movs	r3, #26
 8002c08:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe fbc4 	bl	8001398 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002c1e:	bf00      	nop
 8002c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c24:	481c      	ldr	r0, [pc, #112]	; (8002c98 <create_pmt_packet+0x80>)
 8002c26:	f007 fd47 	bl	800a6b8 <HAL_GPIO_ReadPin>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f7      	bne.n	8002c20 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 faa8 	bl	8004188 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fad9 	bl	80031f4 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8002c42:	23ff      	movs	r3, #255	; 0xff
 8002c44:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8002c46:	23ff      	movs	r3, #255	; 0xff
 8002c48:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <create_pmt_packet+0x84>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <create_pmt_packet+0x84>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8002c5e:	7a3b      	ldrb	r3, [r7, #8]
 8002c60:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8002c62:	7a7b      	ldrb	r3, [r7, #9]
 8002c64:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8002c66:	793b      	ldrb	r3, [r7, #4]
 8002c68:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8002c6a:	797b      	ldrb	r3, [r7, #5]
 8002c6c:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8002c6e:	79bb      	ldrb	r3, [r7, #6]
 8002c70:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8002c76:	f107 010c 	add.w	r1, r7, #12
 8002c7a:	2364      	movs	r3, #100	; 0x64
 8002c7c:	220a      	movs	r2, #10
 8002c7e:	4808      	ldr	r0, [pc, #32]	; (8002ca0 <create_pmt_packet+0x88>)
 8002c80:	f010 fb76 	bl	8013370 <HAL_UART_Transmit>

	pmt_seq++;
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <create_pmt_packet+0x84>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <create_pmt_packet+0x84>)
 8002c8e:	801a      	strh	r2, [r3, #0]
}
 8002c90:	bf00      	nop
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	58020000 	.word	0x58020000
 8002c9c:	24001aea 	.word	0x24001aea
 8002ca0:	24001e3c 	.word	0x24001e3c

08002ca4 <create_erpa_packet>:


void create_erpa_packet() {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002caa:	bf00      	nop
 8002cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cb0:	4828      	ldr	r0, [pc, #160]	; (8002d54 <create_erpa_packet+0xb0>)
 8002cb2:	f007 fd01 	bl	800a6b8 <HAL_GPIO_ReadPin>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f7      	bne.n	8002cac <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8002cbc:	23ff      	movs	r3, #255	; 0xff
 8002cbe:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 fa60 	bl	8004188 <get_uptime>
	sweep_step = get_current_step();
 8002cc8:	f7ff fed6 	bl	8002a78 <get_current_step>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8002cd0:	f107 030c 	add.w	r3, r7, #12
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 faad 	bl	8003234 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002cda:	f107 0308 	add.w	r3, r7, #8
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fac8 	bl	8003274 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002ce4:	23ee      	movs	r3, #238	; 0xee
 8002ce6:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8002ce8:	23ee      	movs	r3, #238	; 0xee
 8002cea:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <create_erpa_packet+0xb4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <create_erpa_packet+0xb4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8002d00:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <create_erpa_packet+0xb4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8002d08:	7ffb      	ldrb	r3, [r7, #31]
 8002d0a:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002d0c:	893b      	ldrh	r3, [r7, #8]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002d16:	893b      	ldrh	r3, [r7, #8]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002d1c:	7b3b      	ldrb	r3, [r7, #12]
 8002d1e:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002d20:	7b7b      	ldrb	r3, [r7, #13]
 8002d22:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8002d24:	793b      	ldrb	r3, [r7, #4]
 8002d26:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8002d28:	797b      	ldrb	r3, [r7, #5]
 8002d2a:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8002d2c:	79bb      	ldrb	r3, [r7, #6]
 8002d2e:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8002d34:	f107 0110 	add.w	r1, r7, #16
 8002d38:	2364      	movs	r3, #100	; 0x64
 8002d3a:	220e      	movs	r2, #14
 8002d3c:	4807      	ldr	r0, [pc, #28]	; (8002d5c <create_erpa_packet+0xb8>)
 8002d3e:	f010 fb17 	bl	8013370 <HAL_UART_Transmit>

	erpa_seq++;
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <create_erpa_packet+0xb4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	4a03      	ldr	r2, [pc, #12]	; (8002d58 <create_erpa_packet+0xb4>)
 8002d4a:	6013      	str	r3, [r2, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	58020400 	.word	0x58020400
 8002d58:	24001aec 	.word	0x24001aec
 8002d5c:	24001e3c 	.word	0x24001e3c

08002d60 <create_hk_packet>:


void create_hk_packet() {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b094      	sub	sp, #80	; 0x50
 8002d64:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 fa0d 	bl	8004188 <get_uptime>
	get_timestamp(timestamp);
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 fa58 	bl	8004228 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8002d78:	f001 feb2 	bl	8004ae0 <get_rail_monitor>
 8002d7c:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002d7e:	23dd      	movs	r3, #221	; 0xdd
 8002d80:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002d82:	23dd      	movs	r3, #221	; 0xdd
 8002d84:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002d86:	4b9b      	ldr	r3, [pc, #620]	; (8002ff4 <create_hk_packet+0x294>)
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002d92:	4b98      	ldr	r3, [pc, #608]	; (8002ff4 <create_hk_packet+0x294>)
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9c:	889b      	ldrh	r3, [r3, #4]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8002da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da8:	889b      	ldrh	r3, [r3, #4]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db0:	330a      	adds	r3, #10
 8002db2:	889b      	ldrh	r3, [r3, #4]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbe:	330a      	adds	r3, #10
 8002dc0:	889b      	ldrh	r3, [r3, #4]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc8:	3314      	adds	r3, #20
 8002dca:	889b      	ldrh	r3, [r3, #4]
 8002dcc:	0a1b      	lsrs	r3, r3, #8
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	3314      	adds	r3, #20
 8002dd8:	889b      	ldrh	r3, [r3, #4]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de0:	331e      	adds	r3, #30
 8002de2:	889b      	ldrh	r3, [r3, #4]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8002dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dee:	331e      	adds	r3, #30
 8002df0:	889b      	ldrh	r3, [r3, #4]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df8:	3328      	adds	r3, #40	; 0x28
 8002dfa:	889b      	ldrh	r3, [r3, #4]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8002e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e08:	3328      	adds	r3, #40	; 0x28
 8002e0a:	889b      	ldrh	r3, [r3, #4]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e14:	3332      	adds	r3, #50	; 0x32
 8002e16:	889b      	ldrh	r3, [r3, #4]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8002e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e24:	3332      	adds	r3, #50	; 0x32
 8002e26:	889b      	ldrh	r3, [r3, #4]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e30:	333c      	adds	r3, #60	; 0x3c
 8002e32:	889b      	ldrh	r3, [r3, #4]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8002e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e40:	333c      	adds	r3, #60	; 0x3c
 8002e42:	889b      	ldrh	r3, [r3, #4]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8002e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4c:	3346      	adds	r3, #70	; 0x46
 8002e4e:	889b      	ldrh	r3, [r3, #4]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8002e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5c:	3346      	adds	r3, #70	; 0x46
 8002e5e:	889b      	ldrh	r3, [r3, #4]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e68:	3350      	adds	r3, #80	; 0x50
 8002e6a:	889b      	ldrh	r3, [r3, #4]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8002e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e78:	3350      	adds	r3, #80	; 0x50
 8002e7a:	889b      	ldrh	r3, [r3, #4]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e84:	335a      	adds	r3, #90	; 0x5a
 8002e86:	889b      	ldrh	r3, [r3, #4]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8002e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e94:	335a      	adds	r3, #90	; 0x5a
 8002e96:	889b      	ldrh	r3, [r3, #4]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea0:	3364      	adds	r3, #100	; 0x64
 8002ea2:	889b      	ldrh	r3, [r3, #4]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8002eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb0:	3364      	adds	r3, #100	; 0x64
 8002eb2:	889b      	ldrh	r3, [r3, #4]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ebc:	336e      	adds	r3, #110	; 0x6e
 8002ebe:	889b      	ldrh	r3, [r3, #4]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8002eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ecc:	336e      	adds	r3, #110	; 0x6e
 8002ece:	889b      	ldrh	r3, [r3, #4]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8002ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed8:	3378      	adds	r3, #120	; 0x78
 8002eda:	889b      	ldrh	r3, [r3, #4]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8002ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee8:	3378      	adds	r3, #120	; 0x78
 8002eea:	889b      	ldrh	r3, [r3, #4]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8002ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef4:	3382      	adds	r3, #130	; 0x82
 8002ef6:	889b      	ldrh	r3, [r3, #4]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8002f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f04:	3382      	adds	r3, #130	; 0x82
 8002f06:	889b      	ldrh	r3, [r3, #4]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f10:	338c      	adds	r3, #140	; 0x8c
 8002f12:	889b      	ldrh	r3, [r3, #4]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8002f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f20:	338c      	adds	r3, #140	; 0x8c
 8002f22:	889b      	ldrh	r3, [r3, #4]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8002f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2c:	3396      	adds	r3, #150	; 0x96
 8002f2e:	889b      	ldrh	r3, [r3, #4]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8002f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3c:	3396      	adds	r3, #150	; 0x96
 8002f3e:	889b      	ldrh	r3, [r3, #4]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8002f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f48:	33a0      	adds	r3, #160	; 0xa0
 8002f4a:	889b      	ldrh	r3, [r3, #4]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8002f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f58:	33a0      	adds	r3, #160	; 0xa0
 8002f5a:	889b      	ldrh	r3, [r3, #4]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f64:	33aa      	adds	r3, #170	; 0xaa
 8002f66:	889b      	ldrh	r3, [r3, #4]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8002f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f74:	33aa      	adds	r3, #170	; 0xaa
 8002f76:	889b      	ldrh	r3, [r3, #4]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8002f7e:	7a3b      	ldrb	r3, [r7, #8]
 8002f80:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8002f84:	7a7b      	ldrb	r3, [r7, #9]
 8002f86:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8002f8a:	7abb      	ldrb	r3, [r7, #10]
 8002f8c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8002f90:	7afb      	ldrb	r3, [r7, #11]
 8002f92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8002f96:	7b3b      	ldrb	r3, [r7, #12]
 8002f98:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8002f9c:	7b7b      	ldrb	r3, [r7, #13]
 8002f9e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8002fa2:	7bbb      	ldrb	r3, [r7, #14]
 8002fa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8002fae:	7c3b      	ldrb	r3, [r7, #16]
 8002fb0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8002fb4:	7c7b      	ldrb	r3, [r7, #17]
 8002fb6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8002fba:	793b      	ldrb	r3, [r7, #4]
 8002fbc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8002fc0:	797b      	ldrb	r3, [r7, #5]
 8002fc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8002fc6:	79bb      	ldrb	r3, [r7, #6]
 8002fc8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8002fd2:	f107 0114 	add.w	r1, r7, #20
 8002fd6:	2364      	movs	r3, #100	; 0x64
 8002fd8:	2236      	movs	r2, #54	; 0x36
 8002fda:	4807      	ldr	r0, [pc, #28]	; (8002ff8 <create_hk_packet+0x298>)
 8002fdc:	f010 f9c8 	bl	8013370 <HAL_UART_Transmit>

	hk_seq++;
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <create_hk_packet+0x294>)
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	4b02      	ldr	r3, [pc, #8]	; (8002ff4 <create_hk_packet+0x294>)
 8002fea:	801a      	strh	r2, [r3, #0]
}
 8002fec:	bf00      	nop
 8002fee:	3750      	adds	r7, #80	; 0x50
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	24001af0 	.word	0x24001af0
 8002ff8:	24001e3c 	.word	0x24001e3c

08002ffc <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <reset_packet_sequence_numbers+0x20>)
 8003002:	2200      	movs	r2, #0
 8003004:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <reset_packet_sequence_numbers+0x24>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <reset_packet_sequence_numbers+0x28>)
 800300e:	2200      	movs	r2, #0
 8003010:	801a      	strh	r2, [r3, #0]
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	24001aea 	.word	0x24001aea
 8003020:	24001aec 	.word	0x24001aec
 8003024:	24001af0 	.word	0x24001af0

08003028 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800303c:	2300      	movs	r3, #0
 800303e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003040:	4b26      	ldr	r3, [pc, #152]	; (80030dc <MX_RTC_Init+0xb4>)
 8003042:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <MX_RTC_Init+0xb8>)
 8003044:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003046:	4b25      	ldr	r3, [pc, #148]	; (80030dc <MX_RTC_Init+0xb4>)
 8003048:	2200      	movs	r2, #0
 800304a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <MX_RTC_Init+0xb4>)
 800304e:	2263      	movs	r2, #99	; 0x63
 8003050:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <MX_RTC_Init+0xb4>)
 8003054:	f242 720f 	movw	r2, #9999	; 0x270f
 8003058:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <MX_RTC_Init+0xb4>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <MX_RTC_Init+0xb4>)
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <MX_RTC_Init+0xb4>)
 8003068:	2200      	movs	r2, #0
 800306a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <MX_RTC_Init+0xb4>)
 800306e:	2200      	movs	r2, #0
 8003070:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003072:	481a      	ldr	r0, [pc, #104]	; (80030dc <MX_RTC_Init+0xb4>)
 8003074:	f00d fc62 	bl	801093c <HAL_RTC_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800307e:	f7ff fdbd 	bl	8002bfc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003082:	2300      	movs	r3, #0
 8003084:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003086:	2300      	movs	r3, #0
 8003088:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800308a:	2300      	movs	r3, #0
 800308c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003096:	1d3b      	adds	r3, r7, #4
 8003098:	2201      	movs	r2, #1
 800309a:	4619      	mov	r1, r3
 800309c:	480f      	ldr	r0, [pc, #60]	; (80030dc <MX_RTC_Init+0xb4>)
 800309e:	f00d fccf 	bl	8010a40 <HAL_RTC_SetTime>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80030a8:	f7ff fda8 	bl	8002bfc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80030ac:	2301      	movs	r3, #1
 80030ae:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80030b0:	2301      	movs	r3, #1
 80030b2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80030b4:	2301      	movs	r3, #1
 80030b6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80030bc:	463b      	mov	r3, r7
 80030be:	2201      	movs	r2, #1
 80030c0:	4619      	mov	r1, r3
 80030c2:	4806      	ldr	r0, [pc, #24]	; (80030dc <MX_RTC_Init+0xb4>)
 80030c4:	f00d fdb6 	bl	8010c34 <HAL_RTC_SetDate>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80030ce:	f7ff fd95 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	24001af4 	.word	0x24001af4
 80030e0:	58004000 	.word	0x58004000

080030e4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b0b2      	sub	sp, #200	; 0xc8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030ec:	f107 0308 	add.w	r3, r7, #8
 80030f0:	22c0      	movs	r2, #192	; 0xc0
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f016 f961 	bl	80193bc <memset>
  if(rtcHandle->Instance==RTC)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a10      	ldr	r2, [pc, #64]	; (8003140 <HAL_RTC_MspInit+0x5c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d118      	bne.n	8003136 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003104:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <HAL_RTC_MspInit+0x60>)
 8003112:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003116:	f107 0308 	add.w	r3, r7, #8
 800311a:	4618      	mov	r0, r3
 800311c:	f00a ff10 	bl	800df40 <HAL_RCCEx_PeriphCLKConfig>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003126:	f7ff fd69 	bl	8002bfc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800312a:	4b07      	ldr	r3, [pc, #28]	; (8003148 <HAL_RTC_MspInit+0x64>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a06      	ldr	r2, [pc, #24]	; (8003148 <HAL_RTC_MspInit+0x64>)
 8003130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003136:	bf00      	nop
 8003138:	37c8      	adds	r7, #200	; 0xc8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	58004000 	.word	0x58004000
 8003144:	00019300 	.word	0x00019300
 8003148:	58024400 	.word	0x58024400

0800314c <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003156:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800315a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800315e:	481f      	ldr	r0, [pc, #124]	; (80031dc <init_adc_dma+0x90>)
 8003160:	f003 f92a 	bl	80063b8 <HAL_ADCEx_Calibration_Start>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800316a:	f7ff fd47 	bl	8002bfc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800316e:	220b      	movs	r2, #11
 8003170:	491b      	ldr	r1, [pc, #108]	; (80031e0 <init_adc_dma+0x94>)
 8003172:	481a      	ldr	r0, [pc, #104]	; (80031dc <init_adc_dma+0x90>)
 8003174:	f002 f9fe 	bl	8005574 <HAL_ADC_Start_DMA>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800317e:	f7ff fd3d 	bl	8002bfc <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003182:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800318a:	4816      	ldr	r0, [pc, #88]	; (80031e4 <init_adc_dma+0x98>)
 800318c:	f003 f914 	bl	80063b8 <HAL_ADCEx_Calibration_Start>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003196:	f7ff fd31 	bl	8002bfc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800319a:	2204      	movs	r2, #4
 800319c:	4912      	ldr	r1, [pc, #72]	; (80031e8 <init_adc_dma+0x9c>)
 800319e:	4811      	ldr	r0, [pc, #68]	; (80031e4 <init_adc_dma+0x98>)
 80031a0:	f002 f9e8 	bl	8005574 <HAL_ADC_Start_DMA>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80031aa:	f7ff fd27 	bl	8002bfc <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <init_adc_dma+0xa0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <init_adc_dma+0xa0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031bc:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <init_adc_dma+0xa4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <init_adc_dma+0xa4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031cc:	601a      	str	r2, [r3, #0]


	status = 1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	71fb      	strb	r3, [r7, #7]

	return status;
 80031d2:	79fb      	ldrb	r3, [r7, #7]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	2400015c 	.word	0x2400015c
 80031e0:	24001b20 	.word	0x24001b20
 80031e4:	240001c0 	.word	0x240001c0
 80031e8:	24001b40 	.word	0x24001b40
 80031ec:	24001bdc 	.word	0x24001bdc
 80031f0:	24001b54 	.word	0x24001b54

080031f4 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 80031fc:	2201      	movs	r2, #1
 80031fe:	490b      	ldr	r1, [pc, #44]	; (800322c <sample_pmt_spi+0x38>)
 8003200:	480b      	ldr	r0, [pc, #44]	; (8003230 <sample_pmt_spi+0x3c>)
 8003202:	f00d ffe1 	bl	80111c8 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <sample_pmt_spi+0x38>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	b29b      	uxth	r3, r3
 800320e:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <sample_pmt_spi+0x38>)
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3301      	adds	r3, #1
 8003220:	7bba      	ldrb	r2, [r7, #14]
 8003222:	701a      	strb	r2, [r3, #0]
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	24001b4c 	.word	0x24001b4c
 8003230:	24001b54 	.word	0x24001b54

08003234 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 800323c:	2201      	movs	r2, #1
 800323e:	490b      	ldr	r1, [pc, #44]	; (800326c <sample_erpa_spi+0x38>)
 8003240:	480b      	ldr	r0, [pc, #44]	; (8003270 <sample_erpa_spi+0x3c>)
 8003242:	f00d ffc1 	bl	80111c8 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <sample_erpa_spi+0x38>)
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	b29b      	uxth	r3, r3
 800324e:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <sample_erpa_spi+0x38>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3301      	adds	r3, #1
 8003260:	7bba      	ldrb	r2, [r7, #14]
 8003262:	701a      	strb	r2, [r3, #0]
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	24001b48 	.word	0x24001b48
 8003270:	24001bdc 	.word	0x24001bdc

08003274 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <sample_erpa_adc+0x20>)
 800327e:	885b      	ldrh	r3, [r3, #2]
 8003280:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	89fa      	ldrh	r2, [r7, #14]
 8003286:	801a      	strh	r2, [r3, #0]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	24001b20 	.word	0x24001b20

08003298 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80032a0:	2390      	movs	r3, #144	; 0x90
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f8a2 	bl	80033ec <poll_i2c_sensor>
 80032a8:	4603      	mov	r3, r0
 80032aa:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80032ac:	2394      	movs	r3, #148	; 0x94
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f89c 	bl	80033ec <poll_i2c_sensor>
 80032b4:	4603      	mov	r3, r0
 80032b6:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80032b8:	2392      	movs	r3, #146	; 0x92
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f896 	bl	80033ec <poll_i2c_sensor>
 80032c0:	4603      	mov	r3, r0
 80032c2:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80032c4:	2396      	movs	r3, #150	; 0x96
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f890 	bl	80033ec <poll_i2c_sensor>
 80032cc:	4603      	mov	r3, r0
 80032ce:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	89fa      	ldrh	r2, [r7, #14]
 80032d4:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3302      	adds	r3, #2
 80032da:	89ba      	ldrh	r2, [r7, #12]
 80032dc:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	897a      	ldrh	r2, [r7, #10]
 80032e4:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3306      	adds	r3, #6
 80032ea:	893a      	ldrh	r2, [r7, #8]
 80032ec:	801a      	strh	r2, [r3, #0]
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <sample_hk_adc1+0xa0>)
 8003302:	8a9b      	ldrh	r3, [r3, #20]
 8003304:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <sample_hk_adc1+0xa0>)
 8003308:	8a1b      	ldrh	r3, [r3, #16]
 800330a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 800330c:	4b22      	ldr	r3, [pc, #136]	; (8003398 <sample_hk_adc1+0xa0>)
 800330e:	899b      	ldrh	r3, [r3, #12]
 8003310:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <sample_hk_adc1+0xa0>)
 8003314:	8a5b      	ldrh	r3, [r3, #18]
 8003316:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8003318:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <sample_hk_adc1+0xa0>)
 800331a:	889b      	ldrh	r3, [r3, #4]
 800331c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800331e:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <sample_hk_adc1+0xa0>)
 8003320:	88db      	ldrh	r3, [r3, #6]
 8003322:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8003324:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <sample_hk_adc1+0xa0>)
 8003326:	89db      	ldrh	r3, [r3, #14]
 8003328:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800332a:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <sample_hk_adc1+0xa0>)
 800332c:	891b      	ldrh	r3, [r3, #8]
 800332e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <sample_hk_adc1+0xa0>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <sample_hk_adc1+0xa0>)
 8003338:	895b      	ldrh	r3, [r3, #10]
 800333a:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8bfa      	ldrh	r2, [r7, #30]
 8003340:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3302      	adds	r3, #2
 8003346:	8bba      	ldrh	r2, [r7, #28]
 8003348:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3304      	adds	r3, #4
 800334e:	8b7a      	ldrh	r2, [r7, #26]
 8003350:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3306      	adds	r3, #6
 8003356:	8b3a      	ldrh	r2, [r7, #24]
 8003358:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3308      	adds	r3, #8
 800335e:	8afa      	ldrh	r2, [r7, #22]
 8003360:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	330a      	adds	r3, #10
 8003366:	8aba      	ldrh	r2, [r7, #20]
 8003368:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	330c      	adds	r3, #12
 800336e:	8a7a      	ldrh	r2, [r7, #18]
 8003370:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	330e      	adds	r3, #14
 8003376:	8a3a      	ldrh	r2, [r7, #16]
 8003378:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3310      	adds	r3, #16
 800337e:	89fa      	ldrh	r2, [r7, #14]
 8003380:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3312      	adds	r3, #18
 8003386:	89ba      	ldrh	r2, [r7, #12]
 8003388:	801a      	strh	r2, [r3, #0]
}
 800338a:	bf00      	nop
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	24001b20 	.word	0x24001b20

0800339c <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80033a4:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <sample_hk_adc3+0x4c>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80033aa:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <sample_hk_adc3+0x4c>)
 80033ac:	885b      	ldrh	r3, [r3, #2]
 80033ae:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80033b0:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <sample_hk_adc3+0x4c>)
 80033b2:	889b      	ldrh	r3, [r3, #4]
 80033b4:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <sample_hk_adc3+0x4c>)
 80033b8:	88db      	ldrh	r3, [r3, #6]
 80033ba:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	89fa      	ldrh	r2, [r7, #14]
 80033c0:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3302      	adds	r3, #2
 80033c6:	89ba      	ldrh	r2, [r7, #12]
 80033c8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	897a      	ldrh	r2, [r7, #10]
 80033d0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3306      	adds	r3, #6
 80033d6:	893a      	ldrh	r2, [r7, #8]
 80033d8:	801a      	strh	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	24001b40 	.word	0x24001b40

080033ec <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 80033f6:	2200      	movs	r2, #0
 80033f8:	4b20      	ldr	r3, [pc, #128]	; (800347c <poll_i2c_sensor+0x90>)
 80033fa:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	b299      	uxth	r1, r3
 8003400:	2301      	movs	r3, #1
 8003402:	4a1e      	ldr	r2, [pc, #120]	; (800347c <poll_i2c_sensor+0x90>)
 8003404:	481e      	ldr	r0, [pc, #120]	; (8003480 <poll_i2c_sensor+0x94>)
 8003406:	f007 fa25 	bl	800a854 <HAL_I2C_Master_Transmit_DMA>
 800340a:	4603      	mov	r3, r0
 800340c:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 800340e:	7b7b      	ldrb	r3, [r7, #13]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8003414:	481b      	ldr	r0, [pc, #108]	; (8003484 <poll_i2c_sensor+0x98>)
 8003416:	f016 f847 	bl	80194a8 <puts>
 800341a:	e028      	b.n	800346e <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 800341c:	bf00      	nop
 800341e:	4818      	ldr	r0, [pc, #96]	; (8003480 <poll_i2c_sensor+0x94>)
 8003420:	f007 fcff 	bl	800ae22 <HAL_I2C_GetState>
 8003424:	4603      	mov	r3, r0
 8003426:	2b20      	cmp	r3, #32
 8003428:	d1f9      	bne.n	800341e <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	b299      	uxth	r1, r3
 800342e:	2302      	movs	r3, #2
 8003430:	4a12      	ldr	r2, [pc, #72]	; (800347c <poll_i2c_sensor+0x90>)
 8003432:	4813      	ldr	r0, [pc, #76]	; (8003480 <poll_i2c_sensor+0x94>)
 8003434:	f007 fb22 	bl	800aa7c <HAL_I2C_Master_Receive_DMA>
 8003438:	4603      	mov	r3, r0
 800343a:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 800343c:	7b7b      	ldrb	r3, [r7, #13]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8003442:	4811      	ldr	r0, [pc, #68]	; (8003488 <poll_i2c_sensor+0x9c>)
 8003444:	f016 f830 	bl	80194a8 <puts>
 8003448:	e011      	b.n	800346e <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 800344a:	bf00      	nop
 800344c:	480c      	ldr	r0, [pc, #48]	; (8003480 <poll_i2c_sensor+0x94>)
 800344e:	f007 fce8 	bl	800ae22 <HAL_I2C_GetState>
 8003452:	4603      	mov	r3, r0
 8003454:	2b20      	cmp	r3, #32
 8003456:	d1f9      	bne.n	800344c <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <poll_i2c_sensor+0x90>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8003460:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003464:	4a05      	ldr	r2, [pc, #20]	; (800347c <poll_i2c_sensor+0x90>)
 8003466:	7852      	ldrb	r2, [r2, #1]
 8003468:	4313      	orrs	r3, r2
 800346a:	10db      	asrs	r3, r3, #3
 800346c:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 800346e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	24001b50 	.word	0x24001b50
 8003480:	2400193c 	.word	0x2400193c
 8003484:	0801a010 	.word	0x0801a010
 8003488:	0801a020 	.word	0x0801a020

0800348c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003490:	4b28      	ldr	r3, [pc, #160]	; (8003534 <MX_SPI1_Init+0xa8>)
 8003492:	4a29      	ldr	r2, [pc, #164]	; (8003538 <MX_SPI1_Init+0xac>)
 8003494:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <MX_SPI1_Init+0xa8>)
 8003498:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800349c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800349e:	4b25      	ldr	r3, [pc, #148]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80034a4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80034a6:	4b23      	ldr	r3, [pc, #140]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034a8:	220f      	movs	r2, #15
 80034aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034ac:	4b21      	ldr	r3, [pc, #132]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034b8:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80034c0:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034c2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80034c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034ce:	4b19      	ldr	r3, [pc, #100]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80034da:	4b16      	ldr	r3, [pc, #88]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034dc:	2200      	movs	r2, #0
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034e6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80034e8:	4b12      	ldr	r3, [pc, #72]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80034f4:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <MX_SPI1_Init+0xa8>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <MX_SPI1_Init+0xa8>)
 8003502:	2200      	movs	r2, #0
 8003504:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <MX_SPI1_Init+0xa8>)
 8003508:	2200      	movs	r2, #0
 800350a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <MX_SPI1_Init+0xa8>)
 800350e:	2200      	movs	r2, #0
 8003510:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <MX_SPI1_Init+0xa8>)
 8003514:	2200      	movs	r2, #0
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <MX_SPI1_Init+0xa8>)
 800351a:	2200      	movs	r2, #0
 800351c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800351e:	4805      	ldr	r0, [pc, #20]	; (8003534 <MX_SPI1_Init+0xa8>)
 8003520:	f00d fd2e 	bl	8010f80 <HAL_SPI_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800352a:	f7ff fb67 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	24001b54 	.word	0x24001b54
 8003538:	40013000 	.word	0x40013000

0800353c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003540:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <MX_SPI2_Init+0xa8>)
 8003542:	4a29      	ldr	r2, [pc, #164]	; (80035e8 <MX_SPI2_Init+0xac>)
 8003544:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003546:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <MX_SPI2_Init+0xa8>)
 8003548:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800354c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800354e:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <MX_SPI2_Init+0xa8>)
 8003550:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003554:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003556:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <MX_SPI2_Init+0xa8>)
 8003558:	220f      	movs	r2, #15
 800355a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800355c:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <MX_SPI2_Init+0xa8>)
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <MX_SPI2_Init+0xa8>)
 8003564:	2200      	movs	r2, #0
 8003566:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003568:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <MX_SPI2_Init+0xa8>)
 800356a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800356e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003570:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <MX_SPI2_Init+0xa8>)
 8003572:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003576:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003578:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <MX_SPI2_Init+0xa8>)
 800357a:	2200      	movs	r2, #0
 800357c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800357e:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <MX_SPI2_Init+0xa8>)
 8003580:	2200      	movs	r2, #0
 8003582:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003584:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <MX_SPI2_Init+0xa8>)
 8003586:	2200      	movs	r2, #0
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800358a:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <MX_SPI2_Init+0xa8>)
 800358c:	2200      	movs	r2, #0
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <MX_SPI2_Init+0xa8>)
 8003592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003596:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <MX_SPI2_Init+0xa8>)
 800359a:	2200      	movs	r2, #0
 800359c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <MX_SPI2_Init+0xa8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <MX_SPI2_Init+0xa8>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80035aa:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <MX_SPI2_Init+0xa8>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <MX_SPI2_Init+0xa8>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <MX_SPI2_Init+0xa8>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80035bc:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <MX_SPI2_Init+0xa8>)
 80035be:	2200      	movs	r2, #0
 80035c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <MX_SPI2_Init+0xa8>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <MX_SPI2_Init+0xa8>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80035ce:	4805      	ldr	r0, [pc, #20]	; (80035e4 <MX_SPI2_Init+0xa8>)
 80035d0:	f00d fcd6 	bl	8010f80 <HAL_SPI_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80035da:	f7ff fb0f 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	24001bdc 	.word	0x24001bdc
 80035e8:	40003800 	.word	0x40003800

080035ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b0bc      	sub	sp, #240	; 0xf0
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003604:	f107 0318 	add.w	r3, r7, #24
 8003608:	22c0      	movs	r2, #192	; 0xc0
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f015 fed5 	bl	80193bc <memset>
  if(spiHandle->Instance==SPI1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a83      	ldr	r2, [pc, #524]	; (8003824 <HAL_SPI_MspInit+0x238>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d17c      	bne.n	8003716 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800361c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003628:	2300      	movs	r3, #0
 800362a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800362c:	f107 0318 	add.w	r3, r7, #24
 8003630:	4618      	mov	r0, r3
 8003632:	f00a fc85 	bl	800df40 <HAL_RCCEx_PeriphCLKConfig>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800363c:	f7ff fade 	bl	8002bfc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003640:	4b79      	ldr	r3, [pc, #484]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 8003642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003646:	4a78      	ldr	r2, [pc, #480]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 8003648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800364c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003650:	4b75      	ldr	r3, [pc, #468]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 8003652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365e:	4b72      	ldr	r3, [pc, #456]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 8003660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003664:	4a70      	ldr	r2, [pc, #448]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800366e:	4b6e      	ldr	r3, [pc, #440]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 8003670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800367c:	2318      	movs	r3, #24
 800367e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368e:	2300      	movs	r3, #0
 8003690:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003694:	2305      	movs	r3, #5
 8003696:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800369e:	4619      	mov	r1, r3
 80036a0:	4862      	ldr	r0, [pc, #392]	; (800382c <HAL_SPI_MspInit+0x240>)
 80036a2:	f006 fe59 	bl	800a358 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80036a6:	4b62      	ldr	r3, [pc, #392]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036a8:	4a62      	ldr	r2, [pc, #392]	; (8003834 <HAL_SPI_MspInit+0x248>)
 80036aa:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80036ac:	4b60      	ldr	r3, [pc, #384]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036ae:	2225      	movs	r2, #37	; 0x25
 80036b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036b2:	4b5f      	ldr	r3, [pc, #380]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036b8:	4b5d      	ldr	r3, [pc, #372]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036be:	4b5c      	ldr	r3, [pc, #368]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036c4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036c6:	4b5a      	ldr	r3, [pc, #360]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036cc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036ce:	4b58      	ldr	r3, [pc, #352]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036d4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036d8:	2200      	movs	r2, #0
 80036da:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036dc:	4b54      	ldr	r3, [pc, #336]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036de:	2200      	movs	r2, #0
 80036e0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036e2:	4b53      	ldr	r3, [pc, #332]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80036e8:	4851      	ldr	r0, [pc, #324]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036ea:	f003 fd05 	bl	80070f8 <HAL_DMA_Init>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80036f4:	f7ff fa82 	bl	8002bfc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a4d      	ldr	r2, [pc, #308]	; (8003830 <HAL_SPI_MspInit+0x244>)
 80036fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80036fe:	4a4c      	ldr	r2, [pc, #304]	; (8003830 <HAL_SPI_MspInit+0x244>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003704:	2200      	movs	r2, #0
 8003706:	2105      	movs	r1, #5
 8003708:	2023      	movs	r0, #35	; 0x23
 800370a:	f003 f84f 	bl	80067ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800370e:	2023      	movs	r0, #35	; 0x23
 8003710:	f003 f866 	bl	80067e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003714:	e081      	b.n	800381a <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a47      	ldr	r2, [pc, #284]	; (8003838 <HAL_SPI_MspInit+0x24c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d17c      	bne.n	800381a <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800372c:	2300      	movs	r3, #0
 800372e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003730:	f107 0318 	add.w	r3, r7, #24
 8003734:	4618      	mov	r0, r3
 8003736:	f00a fc03 	bl	800df40 <HAL_RCCEx_PeriphCLKConfig>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8003740:	f7ff fa5c 	bl	8002bfc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003744:	4b38      	ldr	r3, [pc, #224]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 8003746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800374a:	4a37      	ldr	r2, [pc, #220]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 800374c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003750:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003754:	4b34      	ldr	r3, [pc, #208]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 8003756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800375a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003762:	4b31      	ldr	r3, [pc, #196]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 8003764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003768:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 800376a:	f043 0302 	orr.w	r3, r3, #2
 800376e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003772:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_SPI_MspInit+0x23c>)
 8003774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003780:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003784:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003788:	2302      	movs	r3, #2
 800378a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	2300      	movs	r3, #0
 8003790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003794:	2300      	movs	r3, #0
 8003796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800379a:	2305      	movs	r3, #5
 800379c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037a4:	4619      	mov	r1, r3
 80037a6:	4821      	ldr	r0, [pc, #132]	; (800382c <HAL_SPI_MspInit+0x240>)
 80037a8:	f006 fdd6 	bl	800a358 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80037ac:	4b23      	ldr	r3, [pc, #140]	; (800383c <HAL_SPI_MspInit+0x250>)
 80037ae:	4a24      	ldr	r2, [pc, #144]	; (8003840 <HAL_SPI_MspInit+0x254>)
 80037b0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_SPI_MspInit+0x250>)
 80037b4:	2227      	movs	r2, #39	; 0x27
 80037b6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037b8:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_SPI_MspInit+0x250>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037be:	4b1f      	ldr	r3, [pc, #124]	; (800383c <HAL_SPI_MspInit+0x250>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_SPI_MspInit+0x250>)
 80037c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ca:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_SPI_MspInit+0x250>)
 80037ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_SPI_MspInit+0x250>)
 80037d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037da:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80037dc:	4b17      	ldr	r3, [pc, #92]	; (800383c <HAL_SPI_MspInit+0x250>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037e2:	4b16      	ldr	r3, [pc, #88]	; (800383c <HAL_SPI_MspInit+0x250>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <HAL_SPI_MspInit+0x250>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80037ee:	4813      	ldr	r0, [pc, #76]	; (800383c <HAL_SPI_MspInit+0x250>)
 80037f0:	f003 fc82 	bl	80070f8 <HAL_DMA_Init>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_SPI_MspInit+0x212>
      Error_Handler();
 80037fa:	f7ff f9ff 	bl	8002bfc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a0e      	ldr	r2, [pc, #56]	; (800383c <HAL_SPI_MspInit+0x250>)
 8003802:	67da      	str	r2, [r3, #124]	; 0x7c
 8003804:	4a0d      	ldr	r2, [pc, #52]	; (800383c <HAL_SPI_MspInit+0x250>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800380a:	2200      	movs	r2, #0
 800380c:	2105      	movs	r1, #5
 800380e:	2024      	movs	r0, #36	; 0x24
 8003810:	f002 ffcc 	bl	80067ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003814:	2024      	movs	r0, #36	; 0x24
 8003816:	f002 ffe3 	bl	80067e0 <HAL_NVIC_EnableIRQ>
}
 800381a:	bf00      	nop
 800381c:	37f0      	adds	r7, #240	; 0xf0
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40013000 	.word	0x40013000
 8003828:	58024400 	.word	0x58024400
 800382c:	58020400 	.word	0x58020400
 8003830:	24001c64 	.word	0x24001c64
 8003834:	40020070 	.word	0x40020070
 8003838:	40003800 	.word	0x40003800
 800383c:	24001cdc 	.word	0x24001cdc
 8003840:	40020058 	.word	0x40020058

08003844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <HAL_MspInit+0x38>)
 800384c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003850:	4a0a      	ldr	r2, [pc, #40]	; (800387c <HAL_MspInit+0x38>)
 8003852:	f043 0302 	orr.w	r3, r3, #2
 8003856:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_MspInit+0x38>)
 800385c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003868:	2200      	movs	r2, #0
 800386a:	210f      	movs	r1, #15
 800386c:	f06f 0001 	mvn.w	r0, #1
 8003870:	f002 ff9c 	bl	80067ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	58024400 	.word	0x58024400

08003880 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b090      	sub	sp, #64	; 0x40
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b0f      	cmp	r3, #15
 800388c:	d827      	bhi.n	80038de <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800388e:	2200      	movs	r2, #0
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	2036      	movs	r0, #54	; 0x36
 8003894:	f002 ff8a 	bl	80067ac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003898:	2036      	movs	r0, #54	; 0x36
 800389a:	f002 ffa1 	bl	80067e0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800389e:	4a29      	ldr	r2, [pc, #164]	; (8003944 <HAL_InitTick+0xc4>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038a4:	4b28      	ldr	r3, [pc, #160]	; (8003948 <HAL_InitTick+0xc8>)
 80038a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038aa:	4a27      	ldr	r2, [pc, #156]	; (8003948 <HAL_InitTick+0xc8>)
 80038ac:	f043 0310 	orr.w	r3, r3, #16
 80038b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_InitTick+0xc8>)
 80038b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038c2:	f107 0210 	add.w	r2, r7, #16
 80038c6:	f107 0314 	add.w	r3, r7, #20
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f00a faf5 	bl	800debc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_InitTick+0x6a>
 80038dc:	e001      	b.n	80038e2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e02b      	b.n	800393a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038e2:	f00a fabf 	bl	800de64 <HAL_RCC_GetPCLK1Freq>
 80038e6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80038e8:	e004      	b.n	80038f4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80038ea:	f00a fabb 	bl	800de64 <HAL_RCC_GetPCLK1Freq>
 80038ee:	4603      	mov	r3, r0
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <HAL_InitTick+0xcc>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	0c9b      	lsrs	r3, r3, #18
 80038fe:	3b01      	subs	r3, #1
 8003900:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003902:	4b13      	ldr	r3, [pc, #76]	; (8003950 <HAL_InitTick+0xd0>)
 8003904:	4a13      	ldr	r2, [pc, #76]	; (8003954 <HAL_InitTick+0xd4>)
 8003906:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <HAL_InitTick+0xd0>)
 800390a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800390e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003910:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <HAL_InitTick+0xd0>)
 8003912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003914:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003916:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <HAL_InitTick+0xd0>)
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <HAL_InitTick+0xd0>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003922:	480b      	ldr	r0, [pc, #44]	; (8003950 <HAL_InitTick+0xd0>)
 8003924:	f00e f8cb 	bl	8011abe <HAL_TIM_Base_Init>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800392e:	4808      	ldr	r0, [pc, #32]	; (8003950 <HAL_InitTick+0xd0>)
 8003930:	f00e f91c 	bl	8011b6c <HAL_TIM_Base_Start_IT>
 8003934:	4603      	mov	r3, r0
 8003936:	e000      	b.n	800393a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
}
 800393a:	4618      	mov	r0, r3
 800393c:	3740      	adds	r7, #64	; 0x40
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	240000c4 	.word	0x240000c4
 8003948:	58024400 	.word	0x58024400
 800394c:	431bde83 	.word	0x431bde83
 8003950:	24001d54 	.word	0x24001d54
 8003954:	40001000 	.word	0x40001000

08003958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800395c:	e7fe      	b.n	800395c <NMI_Handler+0x4>

0800395e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003962:	e7fe      	b.n	8003962 <HardFault_Handler+0x4>

08003964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003968:	e7fe      	b.n	8003968 <MemManage_Handler+0x4>

0800396a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800396e:	e7fe      	b.n	800396e <BusFault_Handler+0x4>

08003970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003974:	e7fe      	b.n	8003974 <UsageFault_Handler+0x4>

08003976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003988:	4802      	ldr	r0, [pc, #8]	; (8003994 <DMA1_Stream0_IRQHandler+0x10>)
 800398a:	f004 fedf 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	24000224 	.word	0x24000224

08003998 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <DMA1_Stream1_IRQHandler+0x10>)
 800399e:	f004 fed5 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	2400029c 	.word	0x2400029c

080039ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <DMA1_Stream2_IRQHandler+0x10>)
 80039b2:	f004 fecb 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	24001ed0 	.word	0x24001ed0

080039c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <DMA1_Stream3_IRQHandler+0x10>)
 80039c6:	f004 fec1 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	24001cdc 	.word	0x24001cdc

080039d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80039d8:	4802      	ldr	r0, [pc, #8]	; (80039e4 <DMA1_Stream4_IRQHandler+0x10>)
 80039da:	f004 feb7 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	24001c64 	.word	0x24001c64

080039e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80039ec:	4802      	ldr	r0, [pc, #8]	; (80039f8 <DMA1_Stream5_IRQHandler+0x10>)
 80039ee:	f004 fead 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	24000328 	.word	0x24000328

080039fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003a00:	4802      	ldr	r0, [pc, #8]	; (8003a0c <DMA1_Stream6_IRQHandler+0x10>)
 8003a02:	f004 fea3 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	24001990 	.word	0x24001990

08003a10 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a14:	4802      	ldr	r0, [pc, #8]	; (8003a20 <TIM1_BRK_IRQHandler+0x10>)
 8003a16:	f00e fbc0 	bl	801219a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	24001da4 	.word	0x24001da4

08003a24 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <TIM1_UP_IRQHandler+0x10>)
 8003a2a:	f00e fbb6 	bl	801219a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	24001da4 	.word	0x24001da4

08003a38 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003a3e:	f00e fbac 	bl	801219a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	24001da4 	.word	0x24001da4

08003a4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <TIM1_CC_IRQHandler+0x10>)
 8003a52:	f00e fba2 	bl	801219a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	24001da4 	.word	0x24001da4

08003a60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a64:	4802      	ldr	r0, [pc, #8]	; (8003a70 <TIM2_IRQHandler+0x10>)
 8003a66:	f00e fb98 	bl	801219a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	24001df0 	.word	0x24001df0

08003a74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <I2C1_EV_IRQHandler+0x10>)
 8003a7a:	f007 f8ef 	bl	800ac5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	2400193c 	.word	0x2400193c

08003a88 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <I2C1_ER_IRQHandler+0x10>)
 8003a8e:	f007 f8ff 	bl	800ac90 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	2400193c 	.word	0x2400193c

08003a9c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <SPI1_IRQHandler+0x10>)
 8003aa2:	f00d fcd9 	bl	8011458 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	24001b54 	.word	0x24001b54

08003ab0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <SPI2_IRQHandler+0x10>)
 8003ab6:	f00d fccf 	bl	8011458 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	24001bdc 	.word	0x24001bdc

08003ac4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <USART1_IRQHandler+0x10>)
 8003aca:	f00f fea9 	bl	8013820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	24001e3c 	.word	0x24001e3c

08003ad8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <DMA1_Stream7_IRQHandler+0x10>)
 8003ade:	f004 fe35 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	24001a08 	.word	0x24001a08

08003aec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <TIM6_DAC_IRQHandler+0x20>)
 8003af2:	791b      	ldrb	r3, [r3, #4]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003afa:	4804      	ldr	r0, [pc, #16]	; (8003b0c <TIM6_DAC_IRQHandler+0x20>)
 8003afc:	f003 f87d 	bl	8006bfa <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003b00:	4803      	ldr	r0, [pc, #12]	; (8003b10 <TIM6_DAC_IRQHandler+0x24>)
 8003b02:	f00e fb4a 	bl	801219a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	24000314 	.word	0x24000314
 8003b10:	24001d54 	.word	0x24001d54

08003b14 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <ITM_SendChar+0x48>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <ITM_SendChar+0x48>)
 8003b24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b28:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <ITM_SendChar+0x4c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <ITM_SendChar+0x4c>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003b36:	bf00      	nop
 8003b38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f8      	beq.n	8003b38 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003b46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	6013      	str	r3, [r2, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	e000edfc 	.word	0xe000edfc
 8003b60:	e0000e00 	.word	0xe0000e00

08003b64 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e00a      	b.n	8003b8c <_read+0x28>
		*ptr++ = __io_getchar();
 8003b76:	f3af 8000 	nop.w
 8003b7a:	4601      	mov	r1, r0
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	60ba      	str	r2, [r7, #8]
 8003b82:	b2ca      	uxtb	r2, r1
 8003b84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	dbf0      	blt.n	8003b76 <_read+0x12>
	}

	return len;
 8003b94:	687b      	ldr	r3, [r7, #4]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e009      	b.n	8003bc4 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	60ba      	str	r2, [r7, #8]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff ffab 	bl	8003b14 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	dbf1      	blt.n	8003bb0 <_write+0x12>
	}
	return len;
 8003bcc:	687b      	ldr	r3, [r7, #4]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <_close>:

int _close(int file) {
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <_fstat>:

int _fstat(int file, struct stat *st) {
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bfe:	605a      	str	r2, [r3, #4]
	return 0;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <_isatty>:

int _isatty(int file) {
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003c16:	2301      	movs	r3, #1
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003c48:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003c4a:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <_sbrk+0x64>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <_sbrk+0x64>)
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <_sbrk+0x68>)
 8003c60:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <_sbrk+0x64>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d207      	bcs.n	8003c80 <_sbrk+0x40>
		errno = ENOMEM;
 8003c70:	f015 fb6c 	bl	801934c <__errno>
 8003c74:	4603      	mov	r3, r0
 8003c76:	220c      	movs	r2, #12
 8003c78:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c7e:	e009      	b.n	8003c94 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003c80:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <_sbrk+0x64>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003c86:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <_sbrk+0x64>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	4a05      	ldr	r2, [pc, #20]	; (8003ca4 <_sbrk+0x64>)
 8003c90:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003c92:	68fb      	ldr	r3, [r7, #12]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	24080000 	.word	0x24080000
 8003ca0:	00000400 	.word	0x00000400
 8003ca4:	24001da0 	.word	0x24001da0
 8003ca8:	24006980 	.word	0x24006980

08003cac <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003cb0:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <SystemInit+0xe4>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	4a36      	ldr	r2, [pc, #216]	; (8003d90 <SystemInit+0xe4>)
 8003cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003cc0:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <SystemInit+0xe8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	2b06      	cmp	r3, #6
 8003cca:	d807      	bhi.n	8003cdc <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <SystemInit+0xe8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 030f 	bic.w	r3, r3, #15
 8003cd4:	4a2f      	ldr	r2, [pc, #188]	; (8003d94 <SystemInit+0xe8>)
 8003cd6:	f043 0307 	orr.w	r3, r3, #7
 8003cda:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003cdc:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <SystemInit+0xec>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2d      	ldr	r2, [pc, #180]	; (8003d98 <SystemInit+0xec>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <SystemInit+0xec>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003cee:	4b2a      	ldr	r3, [pc, #168]	; (8003d98 <SystemInit+0xec>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4929      	ldr	r1, [pc, #164]	; (8003d98 <SystemInit+0xec>)
 8003cf4:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <SystemInit+0xf0>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003cfa:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <SystemInit+0xe8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003d06:	4b23      	ldr	r3, [pc, #140]	; (8003d94 <SystemInit+0xe8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 030f 	bic.w	r3, r3, #15
 8003d0e:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <SystemInit+0xe8>)
 8003d10:	f043 0307 	orr.w	r3, r3, #7
 8003d14:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003d16:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <SystemInit+0xec>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003d1c:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <SystemInit+0xec>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003d22:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <SystemInit+0xec>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <SystemInit+0xec>)
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <SystemInit+0xf4>)
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <SystemInit+0xec>)
 8003d30:	4a1c      	ldr	r2, [pc, #112]	; (8003da4 <SystemInit+0xf8>)
 8003d32:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003d34:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <SystemInit+0xec>)
 8003d36:	4a1c      	ldr	r2, [pc, #112]	; (8003da8 <SystemInit+0xfc>)
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003d3a:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <SystemInit+0xec>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003d40:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <SystemInit+0xec>)
 8003d42:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <SystemInit+0xfc>)
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <SystemInit+0xec>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003d4c:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <SystemInit+0xec>)
 8003d4e:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <SystemInit+0xfc>)
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003d52:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <SystemInit+0xec>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <SystemInit+0xec>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <SystemInit+0xec>)
 8003d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d62:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <SystemInit+0xec>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <SystemInit+0x100>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <SystemInit+0x104>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d76:	d202      	bcs.n	8003d7e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <SystemInit+0x108>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <SystemInit+0x10c>)
 8003d80:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d84:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d86:	bf00      	nop
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000ed00 	.word	0xe000ed00
 8003d94:	52002000 	.word	0x52002000
 8003d98:	58024400 	.word	0x58024400
 8003d9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003da0:	02020200 	.word	0x02020200
 8003da4:	01ff0000 	.word	0x01ff0000
 8003da8:	01010280 	.word	0x01010280
 8003dac:	5c001000 	.word	0x5c001000
 8003db0:	ffff0000 	.word	0xffff0000
 8003db4:	51008108 	.word	0x51008108
 8003db8:	52004000 	.word	0x52004000

08003dbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b09a      	sub	sp, #104	; 0x68
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ddc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]
 8003dec:	615a      	str	r2, [r3, #20]
 8003dee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	222c      	movs	r2, #44	; 0x2c
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f015 fae0 	bl	80193bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dfc:	4b44      	ldr	r3, [pc, #272]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003dfe:	4a45      	ldr	r2, [pc, #276]	; (8003f14 <MX_TIM1_Init+0x158>)
 8003e00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8003e02:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003e04:	224a      	movs	r2, #74	; 0x4a
 8003e06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e08:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8003e0e:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003e10:	f24f 4223 	movw	r2, #62499	; 0xf423
 8003e14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e16:	4b3e      	ldr	r3, [pc, #248]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e1c:	4b3c      	ldr	r3, [pc, #240]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e22:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e28:	4839      	ldr	r0, [pc, #228]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003e2a:	f00d fe48 	bl	8011abe <HAL_TIM_Base_Init>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003e34:	f7fe fee2 	bl	8002bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e3c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e42:	4619      	mov	r1, r3
 8003e44:	4832      	ldr	r0, [pc, #200]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003e46:	f00e fbc3 	bl	80125d0 <HAL_TIM_ConfigClockSource>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003e50:	f7fe fed4 	bl	8002bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e54:	482e      	ldr	r0, [pc, #184]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003e56:	f00e f93f 	bl	80120d8 <HAL_TIM_PWM_Init>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003e60:	f7fe fecc 	bl	8002bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e64:	2300      	movs	r3, #0
 8003e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e74:	4619      	mov	r1, r3
 8003e76:	4826      	ldr	r0, [pc, #152]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003e78:	f00f f900 	bl	801307c <HAL_TIMEx_MasterConfigSynchronization>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003e82:	f7fe febb 	bl	8002bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e86:	2360      	movs	r3, #96	; 0x60
 8003e88:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8003e8a:	f240 13df 	movw	r3, #479	; 0x1df
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e90:	2300      	movs	r3, #0
 8003e92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e94:	2300      	movs	r3, #0
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ea4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4818      	ldr	r0, [pc, #96]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003eae:	f00e fa7b 	bl	80123a8 <HAL_TIM_PWM_ConfigChannel>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003eb8:	f7fe fea0 	bl	8002bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ed4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003eec:	1d3b      	adds	r3, r7, #4
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4807      	ldr	r0, [pc, #28]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003ef2:	f00f f951 	bl	8013198 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8003efc:	f7fe fe7e 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f00:	4803      	ldr	r0, [pc, #12]	; (8003f10 <MX_TIM1_Init+0x154>)
 8003f02:	f000 f8dd 	bl	80040c0 <HAL_TIM_MspPostInit>

}
 8003f06:	bf00      	nop
 8003f08:	3768      	adds	r7, #104	; 0x68
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	24001da4 	.word	0x24001da4
 8003f14:	40010000 	.word	0x40010000

08003f18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08e      	sub	sp, #56	; 0x38
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	609a      	str	r2, [r3, #8]
 8003f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f2c:	f107 031c 	add.w	r3, r7, #28
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f38:	463b      	mov	r3, r7
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	605a      	str	r2, [r3, #4]
 8003f40:	609a      	str	r2, [r3, #8]
 8003f42:	60da      	str	r2, [r3, #12]
 8003f44:	611a      	str	r2, [r3, #16]
 8003f46:	615a      	str	r2, [r3, #20]
 8003f48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f4a:	4b2d      	ldr	r3, [pc, #180]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003f4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8003f52:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003f54:	224a      	movs	r2, #74	; 0x4a
 8003f56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f58:	4b29      	ldr	r3, [pc, #164]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8003f5e:	4b28      	ldr	r3, [pc, #160]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003f60:	f640 4234 	movw	r2, #3124	; 0xc34
 8003f64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f6c:	4b24      	ldr	r3, [pc, #144]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003f6e:	2280      	movs	r2, #128	; 0x80
 8003f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f72:	4823      	ldr	r0, [pc, #140]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003f74:	f00d fda3 	bl	8011abe <HAL_TIM_Base_Init>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003f7e:	f7fe fe3d 	bl	8002bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	481c      	ldr	r0, [pc, #112]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003f90:	f00e fb1e 	bl	80125d0 <HAL_TIM_ConfigClockSource>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003f9a:	f7fe fe2f 	bl	8002bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003f9e:	4818      	ldr	r0, [pc, #96]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003fa0:	f00e f89a 	bl	80120d8 <HAL_TIM_PWM_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003faa:	f7fe fe27 	bl	8002bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003fae:	2320      	movs	r3, #32
 8003fb0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fb6:	f107 031c 	add.w	r3, r7, #28
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4810      	ldr	r0, [pc, #64]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003fbe:	f00f f85d 	bl	801307c <HAL_TIMEx_MasterConfigSynchronization>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003fc8:	f7fe fe18 	bl	8002bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fcc:	2360      	movs	r3, #96	; 0x60
 8003fce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003fdc:	463b      	mov	r3, r7
 8003fde:	220c      	movs	r2, #12
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4807      	ldr	r0, [pc, #28]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003fe4:	f00e f9e0 	bl	80123a8 <HAL_TIM_PWM_ConfigChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003fee:	f7fe fe05 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003ff2:	4803      	ldr	r0, [pc, #12]	; (8004000 <MX_TIM2_Init+0xe8>)
 8003ff4:	f000 f864 	bl	80040c0 <HAL_TIM_MspPostInit>

}
 8003ff8:	bf00      	nop
 8003ffa:	3738      	adds	r7, #56	; 0x38
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	24001df0 	.word	0x24001df0

08004004 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <HAL_TIM_Base_MspInit+0xb4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d12f      	bne.n	8004076 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004016:	4b29      	ldr	r3, [pc, #164]	; (80040bc <HAL_TIM_Base_MspInit+0xb8>)
 8004018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800401c:	4a27      	ldr	r2, [pc, #156]	; (80040bc <HAL_TIM_Base_MspInit+0xb8>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004026:	4b25      	ldr	r3, [pc, #148]	; (80040bc <HAL_TIM_Base_MspInit+0xb8>)
 8004028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004034:	2200      	movs	r2, #0
 8004036:	2105      	movs	r1, #5
 8004038:	2018      	movs	r0, #24
 800403a:	f002 fbb7 	bl	80067ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800403e:	2018      	movs	r0, #24
 8004040:	f002 fbce 	bl	80067e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004044:	2200      	movs	r2, #0
 8004046:	2105      	movs	r1, #5
 8004048:	2019      	movs	r0, #25
 800404a:	f002 fbaf 	bl	80067ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800404e:	2019      	movs	r0, #25
 8004050:	f002 fbc6 	bl	80067e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004054:	2200      	movs	r2, #0
 8004056:	2105      	movs	r1, #5
 8004058:	201a      	movs	r0, #26
 800405a:	f002 fba7 	bl	80067ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800405e:	201a      	movs	r0, #26
 8004060:	f002 fbbe 	bl	80067e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004064:	2200      	movs	r2, #0
 8004066:	2105      	movs	r1, #5
 8004068:	201b      	movs	r0, #27
 800406a:	f002 fb9f 	bl	80067ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800406e:	201b      	movs	r0, #27
 8004070:	f002 fbb6 	bl	80067e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004074:	e01b      	b.n	80040ae <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407e:	d116      	bne.n	80040ae <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <HAL_TIM_Base_MspInit+0xb8>)
 8004082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004086:	4a0d      	ldr	r2, [pc, #52]	; (80040bc <HAL_TIM_Base_MspInit+0xb8>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <HAL_TIM_Base_MspInit+0xb8>)
 8004092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800409e:	2200      	movs	r2, #0
 80040a0:	2105      	movs	r1, #5
 80040a2:	201c      	movs	r0, #28
 80040a4:	f002 fb82 	bl	80067ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040a8:	201c      	movs	r0, #28
 80040aa:	f002 fb99 	bl	80067e0 <HAL_NVIC_EnableIRQ>
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40010000 	.word	0x40010000
 80040bc:	58024400 	.word	0x58024400

080040c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	; 0x28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a26      	ldr	r2, [pc, #152]	; (8004178 <HAL_TIM_MspPostInit+0xb8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d120      	bne.n	8004124 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e2:	4b26      	ldr	r3, [pc, #152]	; (800417c <HAL_TIM_MspPostInit+0xbc>)
 80040e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040e8:	4a24      	ldr	r2, [pc, #144]	; (800417c <HAL_TIM_MspPostInit+0xbc>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040f2:	4b22      	ldr	r3, [pc, #136]	; (800417c <HAL_TIM_MspPostInit+0xbc>)
 80040f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004106:	2302      	movs	r3, #2
 8004108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410e:	2300      	movs	r3, #0
 8004110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004112:	2301      	movs	r3, #1
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	4619      	mov	r1, r3
 800411c:	4818      	ldr	r0, [pc, #96]	; (8004180 <HAL_TIM_MspPostInit+0xc0>)
 800411e:	f006 f91b 	bl	800a358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004122:	e024      	b.n	800416e <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412c:	d11f      	bne.n	800416e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_TIM_MspPostInit+0xbc>)
 8004130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004134:	4a11      	ldr	r2, [pc, #68]	; (800417c <HAL_TIM_MspPostInit+0xbc>)
 8004136:	f043 0302 	orr.w	r3, r3, #2
 800413a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800413e:	4b0f      	ldr	r3, [pc, #60]	; (800417c <HAL_TIM_MspPostInit+0xbc>)
 8004140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800414c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004152:	2302      	movs	r3, #2
 8004154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415a:	2300      	movs	r3, #0
 800415c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800415e:	2301      	movs	r3, #1
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004162:	f107 0314 	add.w	r3, r7, #20
 8004166:	4619      	mov	r1, r3
 8004168:	4806      	ldr	r0, [pc, #24]	; (8004184 <HAL_TIM_MspPostInit+0xc4>)
 800416a:	f006 f8f5 	bl	800a358 <HAL_GPIO_Init>
}
 800416e:	bf00      	nop
 8004170:	3728      	adds	r7, #40	; 0x28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000
 800417c:	58024400 	.word	0x58024400
 8004180:	58020000 	.word	0x58020000
 8004184:	58020400 	.word	0x58020400

08004188 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004194:	4b21      	ldr	r3, [pc, #132]	; (800421c <get_uptime+0x94>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 800419a:	4b21      	ldr	r3, [pc, #132]	; (8004220 <get_uptime+0x98>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 80041a0:	4b1e      	ldr	r3, [pc, #120]	; (800421c <get_uptime+0x94>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d005      	beq.n	80041b6 <get_uptime+0x2e>
		ms = uptime_millis;
 80041aa:	4b1c      	ldr	r3, [pc, #112]	; (800421c <get_uptime+0x94>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 80041b0:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <get_uptime+0x98>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041bc:	fb03 f202 	mul.w	r2, r3, r2
 80041c0:	4b17      	ldr	r3, [pc, #92]	; (8004220 <get_uptime+0x98>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	3301      	adds	r3, #1
 80041c6:	4917      	ldr	r1, [pc, #92]	; (8004224 <get_uptime+0x9c>)
 80041c8:	fba1 1303 	umull	r1, r3, r1, r3
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	68f9      	ldr	r1, [r7, #12]
 80041d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <get_uptime+0x5a>
		uptime = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	0e1b      	lsrs	r3, r3, #24
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	0c1a      	lsrs	r2, r3, #16
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3301      	adds	r3, #1
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	0a1a      	lsrs	r2, r3, #8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3302      	adds	r3, #2
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3303      	adds	r3, #3
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	24001ae0 	.word	0x24001ae0
 8004220:	e000e010 	.word	0xe000e010
 8004224:	10624dd3 	.word	0x10624dd3

08004228 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004230:	f107 0310 	add.w	r3, r7, #16
 8004234:	2200      	movs	r2, #0
 8004236:	4619      	mov	r1, r3
 8004238:	4821      	ldr	r0, [pc, #132]	; (80042c0 <get_timestamp+0x98>)
 800423a:	f00c fc9f 	bl	8010b7c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800423e:	f107 030c 	add.w	r3, r7, #12
 8004242:	2200      	movs	r2, #0
 8004244:	4619      	mov	r1, r3
 8004246:	481e      	ldr	r0, [pc, #120]	; (80042c0 <get_timestamp+0x98>)
 8004248:	f00c fd7c 	bl	8010d44 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2264      	movs	r2, #100	; 0x64
 8004250:	fb03 f202 	mul.w	r2, r3, r2
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <get_timestamp+0x9c>)
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3301      	adds	r3, #1
 8004264:	7b7a      	ldrb	r2, [r7, #13]
 8004266:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3302      	adds	r3, #2
 800426c:	7bba      	ldrb	r2, [r7, #14]
 800426e:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3303      	adds	r3, #3
 8004274:	7c3a      	ldrb	r2, [r7, #16]
 8004276:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	7c7a      	ldrb	r2, [r7, #17]
 800427e:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3305      	adds	r3, #5
 8004284:	7cba      	ldrb	r2, [r7, #18]
 8004286:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	0e1a      	lsrs	r2, r3, #24
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3306      	adds	r3, #6
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	0c1a      	lsrs	r2, r3, #16
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3307      	adds	r3, #7
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	0a1a      	lsrs	r2, r3, #8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3308      	adds	r3, #8
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3309      	adds	r3, #9
 80042b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]
}
 80042b6:	bf00      	nop
 80042b8:	3728      	adds	r7, #40	; 0x28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	24001af4 	.word	0x24001af4
 80042c4:	000f4240 	.word	0x000f4240

080042c8 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	785b      	ldrb	r3, [r3, #1]
 80042d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	789b      	ldrb	r3, [r3, #2]
 80042dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	78db      	ldrb	r3, [r3, #3]
 80042e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	791b      	ldrb	r3, [r3, #4]
 80042ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	795b      	ldrb	r3, [r3, #5]
 80042f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	799b      	ldrb	r3, [r3, #6]
 80042fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3307      	adds	r3, #7
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	b21a      	sxth	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3308      	adds	r3, #8
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b21b      	sxth	r3, r3
 8004312:	4313      	orrs	r3, r2
 8004314:	b21b      	sxth	r3, r3
 8004316:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8004318:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800431c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8004320:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004324:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8004328:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800432c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8004330:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004334:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8004336:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800433a:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 800433c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004340:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8004342:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004344:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8004346:	f107 0320 	add.w	r3, r7, #32
 800434a:	2200      	movs	r2, #0
 800434c:	4619      	mov	r1, r3
 800434e:	480b      	ldr	r0, [pc, #44]	; (800437c <calibrateRTC+0xb4>)
 8004350:	f00c fc70 	bl	8010c34 <HAL_RTC_SetDate>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 800435a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <calibrateRTC+0x9e>
		Error_Handler();
 8004362:	f7fe fc4b 	bl	8002bfc <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8004366:	f107 030c 	add.w	r3, r7, #12
 800436a:	2200      	movs	r2, #0
 800436c:	4619      	mov	r1, r3
 800436e:	4803      	ldr	r0, [pc, #12]	; (800437c <calibrateRTC+0xb4>)
 8004370:	f000 f806 	bl	8004380 <RTC_SetTime>
}
 8004374:	bf00      	nop
 8004376:	3730      	adds	r7, #48	; 0x30
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	24001af4 	.word	0x24001af4

08004380 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <RTC_SetTime+0x1a>
 8004396:	2302      	movs	r3, #2
 8004398:	e051      	b.n	800443e <RTC_SetTime+0xbe>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2202      	movs	r2, #2
 80043a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	22ca      	movs	r2, #202	; 0xca
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2253      	movs	r2, #83	; 0x53
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f00c fd34 	bl	8010e28 <RTC_EnterInitMode>
 80043c0:	4603      	mov	r3, r0
 80043c2:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d129      	bne.n	800441e <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2200      	movs	r2, #0
 80043ce:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f00c fd99 	bl	8010f0c <RTC_ByteToBcd2>
 80043da:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 80043dc:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f00c fd92 	bl	8010f0c <RTC_ByteToBcd2>
 80043e8:	4603      	mov	r3, r0
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	789b      	ldrb	r3, [r3, #2]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f00c fd8a 	bl	8010f0c <RTC_ByteToBcd2>
 80043f8:	4603      	mov	r3, r0
 80043fa:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	78db      	ldrb	r3, [r3, #3]
 8004402:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	6939      	ldr	r1, [r7, #16]
 800440e:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <RTC_SetTime+0xc8>)
 8004410:	400b      	ands	r3, r1
 8004412:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f00c fd3b 	bl	8010e90 <RTC_ExitInitMode>
 800441a:	4603      	mov	r3, r0
 800441c:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	22ff      	movs	r2, #255	; 0xff
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d103      	bne.n	8004434 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 800443c:	7dfb      	ldrb	r3, [r7, #23]

}
 800443e:	4618      	mov	r0, r3
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd90      	pop	{r4, r7, pc}
 8004446:	bf00      	nop
 8004448:	007f7f7f 	.word	0x007f7f7f

0800444c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004450:	4b30      	ldr	r3, [pc, #192]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 8004452:	4a31      	ldr	r2, [pc, #196]	; (8004518 <MX_USART1_UART_Init+0xcc>)
 8004454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8004456:	4b2f      	ldr	r3, [pc, #188]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 8004458:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800445c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800445e:	4b2d      	ldr	r3, [pc, #180]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004464:	4b2b      	ldr	r3, [pc, #172]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800446a:	4b2a      	ldr	r3, [pc, #168]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004470:	4b28      	ldr	r3, [pc, #160]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 8004472:	220c      	movs	r2, #12
 8004474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004476:	4b27      	ldr	r3, [pc, #156]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800447c:	4b25      	ldr	r3, [pc, #148]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 800447e:	2200      	movs	r2, #0
 8004480:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004482:	4b24      	ldr	r3, [pc, #144]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 8004484:	2200      	movs	r2, #0
 8004486:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004488:	4b22      	ldr	r3, [pc, #136]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 800448a:	2200      	movs	r2, #0
 800448c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800448e:	4b21      	ldr	r3, [pc, #132]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 8004490:	2200      	movs	r2, #0
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004494:	481f      	ldr	r0, [pc, #124]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 8004496:	f00e ff1b 	bl	80132d0 <HAL_UART_Init>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80044a0:	f7fe fbac 	bl	8002bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044a4:	2100      	movs	r1, #0
 80044a6:	481b      	ldr	r0, [pc, #108]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 80044a8:	f011 fc61 	bl	8015d6e <HAL_UARTEx_SetTxFifoThreshold>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80044b2:	f7fe fba3 	bl	8002bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044b6:	2100      	movs	r1, #0
 80044b8:	4816      	ldr	r0, [pc, #88]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 80044ba:	f011 fc96 	bl	8015dea <HAL_UARTEx_SetRxFifoThreshold>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80044c4:	f7fe fb9a 	bl	8002bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80044c8:	4812      	ldr	r0, [pc, #72]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 80044ca:	f011 fc17 	bl	8015cfc <HAL_UARTEx_DisableFifoMode>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80044d4:	f7fe fb92 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 80044d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044dc:	480d      	ldr	r0, [pc, #52]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 80044de:	f011 fc84 	bl	8015dea <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 80044e2:	480c      	ldr	r0, [pc, #48]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 80044e4:	f011 fbcf 	bl	8015c86 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 80044e8:	480a      	ldr	r0, [pc, #40]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 80044ea:	f011 fb99 	bl	8015c20 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	4b07      	ldr	r3, [pc, #28]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044fc:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <MX_USART1_UART_Init+0xc8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800450c:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	24001e3c 	.word	0x24001e3c
 8004518:	40011000 	.word	0x40011000

0800451c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b0ba      	sub	sp, #232	; 0xe8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004524:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004534:	f107 0310 	add.w	r3, r7, #16
 8004538:	22c0      	movs	r2, #192	; 0xc0
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f014 ff3d 	bl	80193bc <memset>
  if(uartHandle->Instance==USART1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a41      	ldr	r2, [pc, #260]	; (800464c <HAL_UART_MspInit+0x130>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d17b      	bne.n	8004644 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800454c:	f04f 0201 	mov.w	r2, #1
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8004558:	2318      	movs	r3, #24
 800455a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800455e:	f107 0310 	add.w	r3, r7, #16
 8004562:	4618      	mov	r0, r3
 8004564:	f009 fcec 	bl	800df40 <HAL_RCCEx_PeriphCLKConfig>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800456e:	f7fe fb45 	bl	8002bfc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004572:	4b37      	ldr	r3, [pc, #220]	; (8004650 <HAL_UART_MspInit+0x134>)
 8004574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004578:	4a35      	ldr	r2, [pc, #212]	; (8004650 <HAL_UART_MspInit+0x134>)
 800457a:	f043 0310 	orr.w	r3, r3, #16
 800457e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004582:	4b33      	ldr	r3, [pc, #204]	; (8004650 <HAL_UART_MspInit+0x134>)
 8004584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004590:	4b2f      	ldr	r3, [pc, #188]	; (8004650 <HAL_UART_MspInit+0x134>)
 8004592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004596:	4a2e      	ldr	r2, [pc, #184]	; (8004650 <HAL_UART_MspInit+0x134>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045a0:	4b2b      	ldr	r3, [pc, #172]	; (8004650 <HAL_UART_MspInit+0x134>)
 80045a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80045ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80045b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b6:	2302      	movs	r3, #2
 80045b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c2:	2300      	movs	r3, #0
 80045c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045c8:	2307      	movs	r3, #7
 80045ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80045d2:	4619      	mov	r1, r3
 80045d4:	481f      	ldr	r0, [pc, #124]	; (8004654 <HAL_UART_MspInit+0x138>)
 80045d6:	f005 febf 	bl	800a358 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80045da:	4b1f      	ldr	r3, [pc, #124]	; (8004658 <HAL_UART_MspInit+0x13c>)
 80045dc:	4a1f      	ldr	r2, [pc, #124]	; (800465c <HAL_UART_MspInit+0x140>)
 80045de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80045e0:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <HAL_UART_MspInit+0x13c>)
 80045e2:	222a      	movs	r2, #42	; 0x2a
 80045e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045e6:	4b1c      	ldr	r3, [pc, #112]	; (8004658 <HAL_UART_MspInit+0x13c>)
 80045e8:	2240      	movs	r2, #64	; 0x40
 80045ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045ec:	4b1a      	ldr	r3, [pc, #104]	; (8004658 <HAL_UART_MspInit+0x13c>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045f2:	4b19      	ldr	r3, [pc, #100]	; (8004658 <HAL_UART_MspInit+0x13c>)
 80045f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045fa:	4b17      	ldr	r3, [pc, #92]	; (8004658 <HAL_UART_MspInit+0x13c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004600:	4b15      	ldr	r3, [pc, #84]	; (8004658 <HAL_UART_MspInit+0x13c>)
 8004602:	2200      	movs	r2, #0
 8004604:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <HAL_UART_MspInit+0x13c>)
 8004608:	2200      	movs	r2, #0
 800460a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_UART_MspInit+0x13c>)
 800460e:	2200      	movs	r2, #0
 8004610:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004612:	4b11      	ldr	r3, [pc, #68]	; (8004658 <HAL_UART_MspInit+0x13c>)
 8004614:	2200      	movs	r2, #0
 8004616:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004618:	480f      	ldr	r0, [pc, #60]	; (8004658 <HAL_UART_MspInit+0x13c>)
 800461a:	f002 fd6d 	bl	80070f8 <HAL_DMA_Init>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004624:	f7fe faea 	bl	8002bfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <HAL_UART_MspInit+0x13c>)
 800462c:	67da      	str	r2, [r3, #124]	; 0x7c
 800462e:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <HAL_UART_MspInit+0x13c>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004634:	2200      	movs	r2, #0
 8004636:	2105      	movs	r1, #5
 8004638:	2025      	movs	r0, #37	; 0x25
 800463a:	f002 f8b7 	bl	80067ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800463e:	2025      	movs	r0, #37	; 0x25
 8004640:	f002 f8ce 	bl	80067e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004644:	bf00      	nop
 8004646:	37e8      	adds	r7, #232	; 0xe8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40011000 	.word	0x40011000
 8004650:	58024400 	.word	0x58024400
 8004654:	58020000 	.word	0x58020000
 8004658:	24001ed0 	.word	0x24001ed0
 800465c:	40020040 	.word	0x40020040

08004660 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 800466a:	4bc2      	ldr	r3, [pc, #776]	; (8004974 <voltage_monitor_init+0x314>)
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8004670:	4bc0      	ldr	r3, [pc, #768]	; (8004974 <voltage_monitor_init+0x314>)
 8004672:	2200      	movs	r2, #0
 8004674:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8004676:	4bbf      	ldr	r3, [pc, #764]	; (8004974 <voltage_monitor_init+0x314>)
 8004678:	2201      	movs	r2, #1
 800467a:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 800467c:	4bbd      	ldr	r3, [pc, #756]	; (8004974 <voltage_monitor_init+0x314>)
 800467e:	2200      	movs	r2, #0
 8004680:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004682:	4bbc      	ldr	r3, [pc, #752]	; (8004974 <voltage_monitor_init+0x314>)
 8004684:	f242 7210 	movw	r2, #10000	; 0x2710
 8004688:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 800468a:	4bba      	ldr	r3, [pc, #744]	; (8004974 <voltage_monitor_init+0x314>)
 800468c:	2200      	movs	r2, #0
 800468e:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8004690:	4bb8      	ldr	r3, [pc, #736]	; (8004974 <voltage_monitor_init+0x314>)
 8004692:	2201      	movs	r2, #1
 8004694:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8004696:	4bb7      	ldr	r3, [pc, #732]	; (8004974 <voltage_monitor_init+0x314>)
 8004698:	2200      	movs	r2, #0
 800469a:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 800469c:	4bb5      	ldr	r3, [pc, #724]	; (8004974 <voltage_monitor_init+0x314>)
 800469e:	2201      	movs	r2, #1
 80046a0:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 80046a2:	4bb4      	ldr	r3, [pc, #720]	; (8004974 <voltage_monitor_init+0x314>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 80046a8:	4bb2      	ldr	r3, [pc, #712]	; (8004974 <voltage_monitor_init+0x314>)
 80046aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80046ae:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 80046b0:	4bb0      	ldr	r3, [pc, #704]	; (8004974 <voltage_monitor_init+0x314>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80046b6:	4baf      	ldr	r3, [pc, #700]	; (8004974 <voltage_monitor_init+0x314>)
 80046b8:	2202      	movs	r2, #2
 80046ba:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 80046bc:	4bad      	ldr	r3, [pc, #692]	; (8004974 <voltage_monitor_init+0x314>)
 80046be:	2200      	movs	r2, #0
 80046c0:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80046c2:	4bac      	ldr	r3, [pc, #688]	; (8004974 <voltage_monitor_init+0x314>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80046c8:	4baa      	ldr	r3, [pc, #680]	; (8004974 <voltage_monitor_init+0x314>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80046ce:	4ba9      	ldr	r3, [pc, #676]	; (8004974 <voltage_monitor_init+0x314>)
 80046d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80046d4:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 80046d6:	4ba7      	ldr	r3, [pc, #668]	; (8004974 <voltage_monitor_init+0x314>)
 80046d8:	2200      	movs	r2, #0
 80046da:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 80046dc:	4ba5      	ldr	r3, [pc, #660]	; (8004974 <voltage_monitor_init+0x314>)
 80046de:	2203      	movs	r2, #3
 80046e0:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 80046e2:	4ba4      	ldr	r3, [pc, #656]	; (8004974 <voltage_monitor_init+0x314>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 80046e8:	4ba2      	ldr	r3, [pc, #648]	; (8004974 <voltage_monitor_init+0x314>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 80046f0:	4ba0      	ldr	r3, [pc, #640]	; (8004974 <voltage_monitor_init+0x314>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 80046f6:	4b9f      	ldr	r3, [pc, #636]	; (8004974 <voltage_monitor_init+0x314>)
 80046f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80046fc:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 80046fe:	4b9d      	ldr	r3, [pc, #628]	; (8004974 <voltage_monitor_init+0x314>)
 8004700:	2200      	movs	r2, #0
 8004702:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8004704:	4b9b      	ldr	r3, [pc, #620]	; (8004974 <voltage_monitor_init+0x314>)
 8004706:	2204      	movs	r2, #4
 8004708:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 800470c:	4b99      	ldr	r3, [pc, #612]	; (8004974 <voltage_monitor_init+0x314>)
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8004714:	4b97      	ldr	r3, [pc, #604]	; (8004974 <voltage_monitor_init+0x314>)
 8004716:	2201      	movs	r2, #1
 8004718:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 800471c:	4b95      	ldr	r3, [pc, #596]	; (8004974 <voltage_monitor_init+0x314>)
 800471e:	2200      	movs	r2, #0
 8004720:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004722:	4b94      	ldr	r3, [pc, #592]	; (8004974 <voltage_monitor_init+0x314>)
 8004724:	f242 7210 	movw	r2, #10000	; 0x2710
 8004728:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 800472a:	4b92      	ldr	r3, [pc, #584]	; (8004974 <voltage_monitor_init+0x314>)
 800472c:	2200      	movs	r2, #0
 800472e:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8004730:	4b90      	ldr	r3, [pc, #576]	; (8004974 <voltage_monitor_init+0x314>)
 8004732:	2205      	movs	r2, #5
 8004734:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8004738:	4b8e      	ldr	r3, [pc, #568]	; (8004974 <voltage_monitor_init+0x314>)
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8004740:	4b8c      	ldr	r3, [pc, #560]	; (8004974 <voltage_monitor_init+0x314>)
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8004748:	4b8a      	ldr	r3, [pc, #552]	; (8004974 <voltage_monitor_init+0x314>)
 800474a:	2200      	movs	r2, #0
 800474c:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 800474e:	4b89      	ldr	r3, [pc, #548]	; (8004974 <voltage_monitor_init+0x314>)
 8004750:	f242 7210 	movw	r2, #10000	; 0x2710
 8004754:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8004756:	4b87      	ldr	r3, [pc, #540]	; (8004974 <voltage_monitor_init+0x314>)
 8004758:	2200      	movs	r2, #0
 800475a:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 800475c:	4b85      	ldr	r3, [pc, #532]	; (8004974 <voltage_monitor_init+0x314>)
 800475e:	2206      	movs	r2, #6
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8004764:	4b83      	ldr	r3, [pc, #524]	; (8004974 <voltage_monitor_init+0x314>)
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 800476c:	4b81      	ldr	r3, [pc, #516]	; (8004974 <voltage_monitor_init+0x314>)
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8004774:	4b7f      	ldr	r3, [pc, #508]	; (8004974 <voltage_monitor_init+0x314>)
 8004776:	2200      	movs	r2, #0
 8004778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 800477c:	4b7d      	ldr	r3, [pc, #500]	; (8004974 <voltage_monitor_init+0x314>)
 800477e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004782:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8004786:	4b7b      	ldr	r3, [pc, #492]	; (8004974 <voltage_monitor_init+0x314>)
 8004788:	2200      	movs	r2, #0
 800478a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 800478e:	4b79      	ldr	r3, [pc, #484]	; (8004974 <voltage_monitor_init+0x314>)
 8004790:	2207      	movs	r2, #7
 8004792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8004796:	4b77      	ldr	r3, [pc, #476]	; (8004974 <voltage_monitor_init+0x314>)
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 800479e:	4b75      	ldr	r3, [pc, #468]	; (8004974 <voltage_monitor_init+0x314>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 80047a6:	4b73      	ldr	r3, [pc, #460]	; (8004974 <voltage_monitor_init+0x314>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80047ae:	4b71      	ldr	r3, [pc, #452]	; (8004974 <voltage_monitor_init+0x314>)
 80047b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80047b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80047b8:	4b6e      	ldr	r3, [pc, #440]	; (8004974 <voltage_monitor_init+0x314>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80047c0:	4b6c      	ldr	r3, [pc, #432]	; (8004974 <voltage_monitor_init+0x314>)
 80047c2:	2208      	movs	r2, #8
 80047c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80047c8:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <voltage_monitor_init+0x314>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80047d0:	4b68      	ldr	r3, [pc, #416]	; (8004974 <voltage_monitor_init+0x314>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 80047d8:	4b66      	ldr	r3, [pc, #408]	; (8004974 <voltage_monitor_init+0x314>)
 80047da:	2200      	movs	r2, #0
 80047dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 80047e0:	4b64      	ldr	r3, [pc, #400]	; (8004974 <voltage_monitor_init+0x314>)
 80047e2:	f640 42b9 	movw	r2, #3257	; 0xcb9
 80047e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 80047ea:	4b62      	ldr	r3, [pc, #392]	; (8004974 <voltage_monitor_init+0x314>)
 80047ec:	f640 3283 	movw	r2, #2947	; 0xb83
 80047f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80047f4:	4b5f      	ldr	r3, [pc, #380]	; (8004974 <voltage_monitor_init+0x314>)
 80047f6:	2209      	movs	r2, #9
 80047f8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 80047fc:	4b5d      	ldr	r3, [pc, #372]	; (8004974 <voltage_monitor_init+0x314>)
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8004804:	4b5b      	ldr	r3, [pc, #364]	; (8004974 <voltage_monitor_init+0x314>)
 8004806:	2200      	movs	r2, #0
 8004808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 800480c:	4b59      	ldr	r3, [pc, #356]	; (8004974 <voltage_monitor_init+0x314>)
 800480e:	2200      	movs	r2, #0
 8004810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8004814:	4b57      	ldr	r3, [pc, #348]	; (8004974 <voltage_monitor_init+0x314>)
 8004816:	f640 7245 	movw	r2, #3909	; 0xf45
 800481a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 800481e:	4b55      	ldr	r3, [pc, #340]	; (8004974 <voltage_monitor_init+0x314>)
 8004820:	2200      	movs	r2, #0
 8004822:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8004826:	4b53      	ldr	r3, [pc, #332]	; (8004974 <voltage_monitor_init+0x314>)
 8004828:	220a      	movs	r2, #10
 800482a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 800482e:	4b51      	ldr	r3, [pc, #324]	; (8004974 <voltage_monitor_init+0x314>)
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8004836:	4b4f      	ldr	r3, [pc, #316]	; (8004974 <voltage_monitor_init+0x314>)
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 800483e:	4b4d      	ldr	r3, [pc, #308]	; (8004974 <voltage_monitor_init+0x314>)
 8004840:	2200      	movs	r2, #0
 8004842:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8004846:	4b4b      	ldr	r3, [pc, #300]	; (8004974 <voltage_monitor_init+0x314>)
 8004848:	f640 7245 	movw	r2, #3909	; 0xf45
 800484c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8004850:	4b48      	ldr	r3, [pc, #288]	; (8004974 <voltage_monitor_init+0x314>)
 8004852:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8004856:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 800485a:	4b46      	ldr	r3, [pc, #280]	; (8004974 <voltage_monitor_init+0x314>)
 800485c:	220b      	movs	r2, #11
 800485e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8004862:	4b44      	ldr	r3, [pc, #272]	; (8004974 <voltage_monitor_init+0x314>)
 8004864:	2200      	movs	r2, #0
 8004866:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 800486a:	4b42      	ldr	r3, [pc, #264]	; (8004974 <voltage_monitor_init+0x314>)
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8004872:	4b40      	ldr	r3, [pc, #256]	; (8004974 <voltage_monitor_init+0x314>)
 8004874:	2200      	movs	r2, #0
 8004876:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 800487a:	4b3e      	ldr	r3, [pc, #248]	; (8004974 <voltage_monitor_init+0x314>)
 800487c:	f640 72fb 	movw	r2, #4091	; 0xffb
 8004880:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8004884:	4b3b      	ldr	r3, [pc, #236]	; (8004974 <voltage_monitor_init+0x314>)
 8004886:	f640 6276 	movw	r2, #3702	; 0xe76
 800488a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 800488e:	4b39      	ldr	r3, [pc, #228]	; (8004974 <voltage_monitor_init+0x314>)
 8004890:	220c      	movs	r2, #12
 8004892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8004896:	4b37      	ldr	r3, [pc, #220]	; (8004974 <voltage_monitor_init+0x314>)
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 800489e:	4b35      	ldr	r3, [pc, #212]	; (8004974 <voltage_monitor_init+0x314>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 80048a6:	4b33      	ldr	r3, [pc, #204]	; (8004974 <voltage_monitor_init+0x314>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 80048ae:	4b31      	ldr	r3, [pc, #196]	; (8004974 <voltage_monitor_init+0x314>)
 80048b0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80048b4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80048b8:	4b2e      	ldr	r3, [pc, #184]	; (8004974 <voltage_monitor_init+0x314>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 80048c0:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <voltage_monitor_init+0x314>)
 80048c2:	220d      	movs	r2, #13
 80048c4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80048c8:	4b2a      	ldr	r3, [pc, #168]	; (8004974 <voltage_monitor_init+0x314>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80048d0:	4b28      	ldr	r3, [pc, #160]	; (8004974 <voltage_monitor_init+0x314>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 80048d8:	4b26      	ldr	r3, [pc, #152]	; (8004974 <voltage_monitor_init+0x314>)
 80048da:	2200      	movs	r2, #0
 80048dc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 80048e0:	4b24      	ldr	r3, [pc, #144]	; (8004974 <voltage_monitor_init+0x314>)
 80048e2:	f640 7238 	movw	r2, #3896	; 0xf38
 80048e6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 80048ea:	4b22      	ldr	r3, [pc, #136]	; (8004974 <voltage_monitor_init+0x314>)
 80048ec:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80048f0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80048f4:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <voltage_monitor_init+0x314>)
 80048f6:	220e      	movs	r2, #14
 80048f8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <voltage_monitor_init+0x314>)
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8004904:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <voltage_monitor_init+0x314>)
 8004906:	2200      	movs	r2, #0
 8004908:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <voltage_monitor_init+0x314>)
 800490e:	2200      	movs	r2, #0
 8004910:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8004914:	4b17      	ldr	r3, [pc, #92]	; (8004974 <voltage_monitor_init+0x314>)
 8004916:	f640 7245 	movw	r2, #3909	; 0xf45
 800491a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <voltage_monitor_init+0x314>)
 8004920:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8004924:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8004928:	4b12      	ldr	r3, [pc, #72]	; (8004974 <voltage_monitor_init+0x314>)
 800492a:	220f      	movs	r2, #15
 800492c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8004930:	4b10      	ldr	r3, [pc, #64]	; (8004974 <voltage_monitor_init+0x314>)
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8004938:	4b0e      	ldr	r3, [pc, #56]	; (8004974 <voltage_monitor_init+0x314>)
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <voltage_monitor_init+0x314>)
 8004942:	2200      	movs	r2, #0
 8004944:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <voltage_monitor_init+0x314>)
 800494a:	f241 0264 	movw	r2, #4196	; 0x1064
 800494e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <voltage_monitor_init+0x314>)
 8004954:	2200      	movs	r2, #0
 8004956:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <voltage_monitor_init+0x314>)
 800495c:	2210      	movs	r2, #16
 800495e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8004962:	4b04      	ldr	r3, [pc, #16]	; (8004974 <voltage_monitor_init+0x314>)
 8004964:	2200      	movs	r2, #0
 8004966:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 800496a:	4b02      	ldr	r3, [pc, #8]	; (8004974 <voltage_monitor_init+0x314>)
 800496c:	2200      	movs	r2, #0
 800496e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8004972:	e001      	b.n	8004978 <voltage_monitor_init+0x318>
 8004974:	24001f48 	.word	0x24001f48
	rail_monitor[RAIL_n800v].data = 0;
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <voltage_monitor_init+0x378>)
 800497a:	2200      	movs	r2, #0
 800497c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8004980:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <voltage_monitor_init+0x378>)
 8004982:	f640 5208 	movw	r2, #3336	; 0xd08
 8004986:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <voltage_monitor_init+0x378>)
 800498c:	f640 32ca 	movw	r2, #3018	; 0xbca
 8004990:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8004994:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <voltage_monitor_init+0x378>)
 8004996:	2211      	movs	r2, #17
 8004998:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <voltage_monitor_init+0x378>)
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <voltage_monitor_init+0x378>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <voltage_monitor_init+0x378>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80049b4:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <voltage_monitor_init+0x378>)
 80049b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80049ba:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <voltage_monitor_init+0x378>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 80049c6:	2301      	movs	r3, #1
 80049c8:	71fb      	strb	r3, [r7, #7]

	return status;
 80049ca:	79fb      	ldrb	r3, [r7, #7]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	24001f48 	.word	0x24001f48

080049dc <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	460a      	mov	r2, r1
 80049e6:	71fb      	strb	r3, [r7, #7]
 80049e8:	4613      	mov	r3, r2
 80049ea:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 80049f0:	79fa      	ldrb	r2, [r7, #7]
 80049f2:	4909      	ldr	r1, [pc, #36]	; (8004a18 <set_rail_monitor_enable+0x3c>)
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	440b      	add	r3, r1
 80049fe:	3302      	adds	r3, #2
 8004a00:	79ba      	ldrb	r2, [r7, #6]
 8004a02:	701a      	strb	r2, [r3, #0]
	status = 1;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]

	return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	24001f48 	.word	0x24001f48

08004a1c <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8004a28:	463b      	mov	r3, r7
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fc34 	bl	8003298 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8004a30:	f107 0310 	add.w	r3, r7, #16
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe fc5f 	bl	80032f8 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8004a3a:	f107 0308 	add.w	r3, r7, #8
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe fcac 	bl	800339c <sample_hk_adc3>
 8004a44:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8004a46:	4b25      	ldr	r3, [pc, #148]	; (8004adc <set_rail_monitor+0xc0>)
 8004a48:	809a      	strh	r2, [r3, #4]
 8004a4a:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8004a4c:	4b23      	ldr	r3, [pc, #140]	; (8004adc <set_rail_monitor+0xc0>)
 8004a4e:	81da      	strh	r2, [r3, #14]
 8004a50:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8004a52:	4b22      	ldr	r3, [pc, #136]	; (8004adc <set_rail_monitor+0xc0>)
 8004a54:	831a      	strh	r2, [r3, #24]
 8004a56:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8004a58:	4b20      	ldr	r3, [pc, #128]	; (8004adc <set_rail_monitor+0xc0>)
 8004a5a:	845a      	strh	r2, [r3, #34]	; 0x22
 8004a5c:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8004a5e:	4b1f      	ldr	r3, [pc, #124]	; (8004adc <set_rail_monitor+0xc0>)
 8004a60:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004a62:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8004a64:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <set_rail_monitor+0xc0>)
 8004a66:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a68:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8004a6a:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <set_rail_monitor+0xc0>)
 8004a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8004a70:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8004a72:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <set_rail_monitor+0xc0>)
 8004a74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8004a78:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8004a7a:	4b18      	ldr	r3, [pc, #96]	; (8004adc <set_rail_monitor+0xc0>)
 8004a7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8004a80:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <set_rail_monitor+0xc0>)
 8004a84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8004a88:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <set_rail_monitor+0xc0>)
 8004a8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8004a90:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <set_rail_monitor+0xc0>)
 8004a94:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8004a98:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8004a9a:	4b10      	ldr	r3, [pc, #64]	; (8004adc <set_rail_monitor+0xc0>)
 8004a9c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8004aa0:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <set_rail_monitor+0xc0>)
 8004aa4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8004aa8:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <set_rail_monitor+0xc0>)
 8004aac:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8004ab0:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <set_rail_monitor+0xc0>)
 8004ab4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8004ab8:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8004aba:	4b08      	ldr	r3, [pc, #32]	; (8004adc <set_rail_monitor+0xc0>)
 8004abc:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8004ac0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <set_rail_monitor+0xc0>)
 8004ac4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8004ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3728      	adds	r7, #40	; 0x28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	24001f48 	.word	0x24001f48

08004ae0 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
	return rail_monitor;
 8004ae4:	4b02      	ldr	r3, [pc, #8]	; (8004af0 <get_rail_monitor+0x10>)
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	24001f48 	.word	0x24001f48

08004af4 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8004b02:	89fb      	ldrh	r3, [r7, #14]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	db05      	blt.n	8004b16 <in_range+0x22>
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	dc01      	bgt.n	8004b16 <in_range+0x22>
		return 1;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <in_range+0x24>
	}
	return 0;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <monitor_rails>:


void monitor_rails() {
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	607b      	str	r3, [r7, #4]
 8004b2e:	e062      	b.n	8004bf6 <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8004b30:	4935      	ldr	r1, [pc, #212]	; (8004c08 <monitor_rails+0xe4>)
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3302      	adds	r3, #2
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d054      	beq.n	8004bf0 <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8004b46:	4930      	ldr	r1, [pc, #192]	; (8004c08 <monitor_rails+0xe4>)
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	440b      	add	r3, r1
 8004b54:	3304      	adds	r3, #4
 8004b56:	8818      	ldrh	r0, [r3, #0]
 8004b58:	492b      	ldr	r1, [pc, #172]	; (8004c08 <monitor_rails+0xe4>)
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	440b      	add	r3, r1
 8004b66:	3308      	adds	r3, #8
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	461c      	mov	r4, r3
 8004b6c:	4926      	ldr	r1, [pc, #152]	; (8004c08 <monitor_rails+0xe4>)
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	440b      	add	r3, r1
 8004b7a:	3306      	adds	r3, #6
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	4621      	mov	r1, r4
 8004b82:	f7ff ffb7 	bl	8004af4 <in_range>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d131      	bne.n	8004bf0 <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8004b8c:	491e      	ldr	r1, [pc, #120]	; (8004c08 <monitor_rails+0xe4>)
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	440b      	add	r3, r1
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	b2d8      	uxtb	r0, r3
 8004ba2:	4919      	ldr	r1, [pc, #100]	; (8004c08 <monitor_rails+0xe4>)
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	440b      	add	r3, r1
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8004bb6:	4914      	ldr	r1, [pc, #80]	; (8004c08 <monitor_rails+0xe4>)
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	440b      	add	r3, r1
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d111      	bne.n	8004bf0 <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8004bcc:	490e      	ldr	r1, [pc, #56]	; (8004c08 <monitor_rails+0xe4>)
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	440b      	add	r3, r1
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f815 	bl	8004c0c <get_rail_name_error_detail>
 8004be2:	4603      	mov	r3, r0
 8004be4:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 8004be6:	2300      	movs	r3, #0
 8004be8:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 8004bea:	6838      	ldr	r0, [r7, #0]
 8004bec:	f7fc fbd4 	bl	8001398 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b11      	cmp	r3, #17
 8004bfa:	dd99      	ble.n	8004b30 <monitor_rails+0xc>
				}
			}
		}
	}
}
 8004bfc:	bf00      	nop
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd90      	pop	{r4, r7, pc}
 8004c06:	bf00      	nop
 8004c08:	24001f48 	.word	0x24001f48

08004c0c <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	2b11      	cmp	r3, #17
 8004c1a:	d84b      	bhi.n	8004cb4 <get_rail_name_error_detail+0xa8>
 8004c1c:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <get_rail_name_error_detail+0x18>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c6d 	.word	0x08004c6d
 8004c28:	08004c71 	.word	0x08004c71
 8004c2c:	08004c75 	.word	0x08004c75
 8004c30:	08004c79 	.word	0x08004c79
 8004c34:	08004c7d 	.word	0x08004c7d
 8004c38:	08004c81 	.word	0x08004c81
 8004c3c:	08004c85 	.word	0x08004c85
 8004c40:	08004c89 	.word	0x08004c89
 8004c44:	08004c8d 	.word	0x08004c8d
 8004c48:	08004c91 	.word	0x08004c91
 8004c4c:	08004c95 	.word	0x08004c95
 8004c50:	08004c99 	.word	0x08004c99
 8004c54:	08004c9d 	.word	0x08004c9d
 8004c58:	08004ca1 	.word	0x08004ca1
 8004c5c:	08004ca5 	.word	0x08004ca5
 8004c60:	08004ca9 	.word	0x08004ca9
 8004c64:	08004cad 	.word	0x08004cad
 8004c68:	08004cb1 	.word	0x08004cb1
	case RAIL_vsense:
		return ED_vsense;
 8004c6c:	2306      	movs	r3, #6
 8004c6e:	e022      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8004c70:	2307      	movs	r3, #7
 8004c72:	e020      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8004c74:	2308      	movs	r3, #8
 8004c76:	e01e      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8004c78:	2309      	movs	r3, #9
 8004c7a:	e01c      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8004c7c:	230a      	movs	r3, #10
 8004c7e:	e01a      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8004c80:	230b      	movs	r3, #11
 8004c82:	e018      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8004c84:	230c      	movs	r3, #12
 8004c86:	e016      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8004c88:	230d      	movs	r3, #13
 8004c8a:	e014      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8004c8c:	230e      	movs	r3, #14
 8004c8e:	e012      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8004c90:	230f      	movs	r3, #15
 8004c92:	e010      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8004c94:	2310      	movs	r3, #16
 8004c96:	e00e      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8004c98:	2311      	movs	r3, #17
 8004c9a:	e00c      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8004c9c:	2312      	movs	r3, #18
 8004c9e:	e00a      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8004ca0:	2313      	movs	r3, #19
 8004ca2:	e008      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8004ca4:	2314      	movs	r3, #20
 8004ca6:	e006      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8004ca8:	2315      	movs	r3, #21
 8004caa:	e004      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8004cac:	2316      	movs	r3, #22
 8004cae:	e002      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8004cb0:	2317      	movs	r3, #23
 8004cb2:	e000      	b.n	8004cb6 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8004cb4:	231a      	movs	r3, #26
	}
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop

08004cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004cc8:	f7fe fff0 	bl	8003cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ccc:	480c      	ldr	r0, [pc, #48]	; (8004d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cce:	490d      	ldr	r1, [pc, #52]	; (8004d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cd0:	4a0d      	ldr	r2, [pc, #52]	; (8004d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cd4:	e002      	b.n	8004cdc <LoopCopyDataInit>

08004cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cda:	3304      	adds	r3, #4

08004cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ce0:	d3f9      	bcc.n	8004cd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ce2:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ce4:	4c0a      	ldr	r4, [pc, #40]	; (8004d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ce8:	e001      	b.n	8004cee <LoopFillZerobss>

08004cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cec:	3204      	adds	r2, #4

08004cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cf0:	d3fb      	bcc.n	8004cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cf2:	f014 fb31 	bl	8019358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cf6:	f7fd fd5f 	bl	80027b8 <main>
  bx  lr
 8004cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cfc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004d00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004d04:	24000134 	.word	0x24000134
  ldr r2, =_sidata
 8004d08:	0801a288 	.word	0x0801a288
  ldr r2, =_sbss
 8004d0c:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8004d10:	2400697c 	.word	0x2400697c

08004d14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d14:	e7fe      	b.n	8004d14 <ADC3_IRQHandler>
	...

08004d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d1e:	2003      	movs	r0, #3
 8004d20:	f001 fd39 	bl	8006796 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d24:	f008 fef4 	bl	800db10 <HAL_RCC_GetSysClockFreq>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4b15      	ldr	r3, [pc, #84]	; (8004d80 <HAL_Init+0x68>)
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	4913      	ldr	r1, [pc, #76]	; (8004d84 <HAL_Init+0x6c>)
 8004d36:	5ccb      	ldrb	r3, [r1, r3]
 8004d38:	f003 031f 	and.w	r3, r3, #31
 8004d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d42:	4b0f      	ldr	r3, [pc, #60]	; (8004d80 <HAL_Init+0x68>)
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	4a0e      	ldr	r2, [pc, #56]	; (8004d84 <HAL_Init+0x6c>)
 8004d4c:	5cd3      	ldrb	r3, [r2, r3]
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
 8004d58:	4a0b      	ldr	r2, [pc, #44]	; (8004d88 <HAL_Init+0x70>)
 8004d5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d5c:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <HAL_Init+0x74>)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d62:	2005      	movs	r0, #5
 8004d64:	f7fe fd8c 	bl	8003880 <HAL_InitTick>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e002      	b.n	8004d78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d72:	f7fe fd67 	bl	8003844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	58024400 	.word	0x58024400
 8004d84:	0801a1d4 	.word	0x0801a1d4
 8004d88:	240000c0 	.word	0x240000c0
 8004d8c:	240000bc 	.word	0x240000bc

08004d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_IncTick+0x20>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <HAL_IncTick+0x24>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4413      	add	r3, r2
 8004da0:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <HAL_IncTick+0x24>)
 8004da2:	6013      	str	r3, [r2, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	240000c8 	.word	0x240000c8
 8004db4:	24001ffc 	.word	0x24001ffc

08004db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  return uwTick;
 8004dbc:	4b03      	ldr	r3, [pc, #12]	; (8004dcc <HAL_GetTick+0x14>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	24001ffc 	.word	0x24001ffc

08004dd0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004dd4:	4b03      	ldr	r3, [pc, #12]	; (8004de4 <HAL_GetREVID+0x14>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	0c1b      	lsrs	r3, r3, #16
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	5c001000 	.word	0x5c001000

08004de8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	4904      	ldr	r1, [pc, #16]	; (8004e10 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	604b      	str	r3, [r1, #4]
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	58000400 	.word	0x58000400

08004e14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	609a      	str	r2, [r3, #8]
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	609a      	str	r2, [r3, #8]
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3360      	adds	r3, #96	; 0x60
 8004e8e:	461a      	mov	r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	431a      	orrs	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	611a      	str	r2, [r3, #16]
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b087      	sub	sp, #28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3360      	adds	r3, #96	; 0x60
 8004efe:	461a      	mov	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	601a      	str	r2, [r3, #0]
  }
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b087      	sub	sp, #28
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3330      	adds	r3, #48	; 0x30
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	4413      	add	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	211f      	movs	r1, #31
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	0e9b      	lsrs	r3, r3, #26
 8004f82:	f003 011f 	and.w	r1, r3, #31
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	431a      	orrs	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f023 0203 	bic.w	r2, r3, #3
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60da      	str	r2, [r3, #12]
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3314      	adds	r3, #20
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	0e5b      	lsrs	r3, r3, #25
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	4413      	add	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	0d1b      	lsrs	r3, r3, #20
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2107      	movs	r1, #7
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	401a      	ands	r2, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	0d1b      	lsrs	r3, r3, #20
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	fa01 f303 	lsl.w	r3, r1, r3
 800500c:	431a      	orrs	r2, r3
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005012:	bf00      	nop
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005038:	43db      	mvns	r3, r3
 800503a:	401a      	ands	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0318 	and.w	r3, r3, #24
 8005042:	4908      	ldr	r1, [pc, #32]	; (8005064 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005044:	40d9      	lsrs	r1, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	400b      	ands	r3, r1
 800504a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800504e:	431a      	orrs	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	000fffff 	.word	0x000fffff

08005068 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 031f 	and.w	r3, r3, #31
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005092:	4013      	ands	r3, r2
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6093      	str	r3, [r2, #8]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	5fffffc0 	.word	0x5fffffc0

080050a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050bc:	d101      	bne.n	80050c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80050de:	4013      	ands	r3, r2
 80050e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	6fffffc0 	.word	0x6fffffc0

080050f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800510c:	d101      	bne.n	8005112 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <LL_ADC_Enable+0x24>)
 800512e:	4013      	ands	r3, r2
 8005130:	f043 0201 	orr.w	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	7fffffc0 	.word	0x7fffffc0

08005148 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	4b05      	ldr	r3, [pc, #20]	; (800516c <LL_ADC_Disable+0x24>)
 8005156:	4013      	ands	r3, r2
 8005158:	f043 0202 	orr.w	r2, r3, #2
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	7fffffc0 	.word	0x7fffffc0

08005170 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <LL_ADC_IsEnabled+0x18>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <LL_ADC_IsEnabled+0x1a>
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d101      	bne.n	80051ae <LL_ADC_IsDisableOngoing+0x18>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <LL_ADC_IsDisableOngoing+0x1a>
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <LL_ADC_REG_StartConversion+0x24>)
 80051ca:	4013      	ands	r3, r2
 80051cc:	f043 0204 	orr.w	r2, r3, #4
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	7fffffc0 	.word	0x7fffffc0

080051e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d101      	bne.n	80051fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b08      	cmp	r3, #8
 800521c:	d101      	bne.n	8005222 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b089      	sub	sp, #36	; 0x24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800523c:	2300      	movs	r3, #0
 800523e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e18f      	b.n	800556a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	2b00      	cmp	r3, #0
 8005256:	d109      	bne.n	800526c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7fb fb77 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff ff19 	bl	80050a8 <LL_ADC_IsDeepPowerDownEnabled>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff feff 	bl	8005084 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff ff34 	bl	80050f8 <LL_ADC_IsInternalRegulatorEnabled>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d114      	bne.n	80052c0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff ff18 	bl	80050d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052a0:	4b87      	ldr	r3, [pc, #540]	; (80054c0 <HAL_ADC_Init+0x290>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	099b      	lsrs	r3, r3, #6
 80052a6:	4a87      	ldr	r2, [pc, #540]	; (80054c4 <HAL_ADC_Init+0x294>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	099b      	lsrs	r3, r3, #6
 80052ae:	3301      	adds	r3, #1
 80052b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80052b2:	e002      	b.n	80052ba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1f9      	bne.n	80052b4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff ff17 	bl	80050f8 <LL_ADC_IsInternalRegulatorEnabled>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10d      	bne.n	80052ec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	f043 0210 	orr.w	r2, r3, #16
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	f043 0201 	orr.w	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ff77 	bl	80051e4 <LL_ADC_REG_IsConversionOngoing>
 80052f6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	f040 8129 	bne.w	8005558 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f040 8125 	bne.w	8005558 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005316:	f043 0202 	orr.w	r2, r3, #2
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff ff24 	bl	8005170 <LL_ADC_IsEnabled>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d136      	bne.n	800539c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a65      	ldr	r2, [pc, #404]	; (80054c8 <HAL_ADC_Init+0x298>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_ADC_Init+0x112>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a63      	ldr	r2, [pc, #396]	; (80054cc <HAL_ADC_Init+0x29c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d10e      	bne.n	8005360 <HAL_ADC_Init+0x130>
 8005342:	4861      	ldr	r0, [pc, #388]	; (80054c8 <HAL_ADC_Init+0x298>)
 8005344:	f7ff ff14 	bl	8005170 <LL_ADC_IsEnabled>
 8005348:	4604      	mov	r4, r0
 800534a:	4860      	ldr	r0, [pc, #384]	; (80054cc <HAL_ADC_Init+0x29c>)
 800534c:	f7ff ff10 	bl	8005170 <LL_ADC_IsEnabled>
 8005350:	4603      	mov	r3, r0
 8005352:	4323      	orrs	r3, r4
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	e008      	b.n	8005372 <HAL_ADC_Init+0x142>
 8005360:	485b      	ldr	r0, [pc, #364]	; (80054d0 <HAL_ADC_Init+0x2a0>)
 8005362:	f7ff ff05 	bl	8005170 <LL_ADC_IsEnabled>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d012      	beq.n	800539c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a53      	ldr	r2, [pc, #332]	; (80054c8 <HAL_ADC_Init+0x298>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_ADC_Init+0x15a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a51      	ldr	r2, [pc, #324]	; (80054cc <HAL_ADC_Init+0x29c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d101      	bne.n	800538e <HAL_ADC_Init+0x15e>
 800538a:	4a52      	ldr	r2, [pc, #328]	; (80054d4 <HAL_ADC_Init+0x2a4>)
 800538c:	e000      	b.n	8005390 <HAL_ADC_Init+0x160>
 800538e:	4a52      	ldr	r2, [pc, #328]	; (80054d8 <HAL_ADC_Init+0x2a8>)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f7ff fd3c 	bl	8004e14 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800539c:	f7ff fd18 	bl	8004dd0 <HAL_GetREVID>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d914      	bls.n	80053d4 <HAL_ADC_Init+0x1a4>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d110      	bne.n	80053d4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7d5b      	ldrb	r3, [r3, #21]
 80053b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80053c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	7f1b      	ldrb	r3, [r3, #28]
 80053c8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80053ca:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053cc:	f043 030c 	orr.w	r3, r3, #12
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	e00d      	b.n	80053f0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	7d5b      	ldrb	r3, [r3, #21]
 80053d8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053de:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80053e4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	7f1b      	ldrb	r3, [r3, #28]
 80053ea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053ec:	4313      	orrs	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7f1b      	ldrb	r3, [r3, #28]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d106      	bne.n	8005406 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	045b      	lsls	r3, r3, #17
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	4313      	orrs	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4313      	orrs	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	4b2c      	ldr	r3, [pc, #176]	; (80054dc <HAL_ADC_Init+0x2ac>)
 800542a:	4013      	ands	r3, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	69b9      	ldr	r1, [r7, #24]
 8005432:	430b      	orrs	r3, r1
 8005434:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff fed2 	bl	80051e4 <LL_ADC_REG_IsConversionOngoing>
 8005440:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fedf 	bl	800520a <LL_ADC_INJ_IsConversionOngoing>
 800544c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d15f      	bne.n	8005514 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d15c      	bne.n	8005514 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	7d1b      	ldrb	r3, [r3, #20]
 800545e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005464:	4313      	orrs	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <HAL_ADC_Init+0x2b0>)
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	69b9      	ldr	r1, [r7, #24]
 8005478:	430b      	orrs	r3, r1
 800547a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005482:	2b01      	cmp	r3, #1
 8005484:	d130      	bne.n	80054e8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <HAL_ADC_Init+0x2b4>)
 8005494:	4013      	ands	r3, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800549a:	3a01      	subs	r2, #1
 800549c:	0411      	lsls	r1, r2, #16
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054a2:	4311      	orrs	r1, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80054a8:	4311      	orrs	r1, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80054ae:	430a      	orrs	r2, r1
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	611a      	str	r2, [r3, #16]
 80054bc:	e01c      	b.n	80054f8 <HAL_ADC_Init+0x2c8>
 80054be:	bf00      	nop
 80054c0:	240000bc 	.word	0x240000bc
 80054c4:	053e2d63 	.word	0x053e2d63
 80054c8:	40022000 	.word	0x40022000
 80054cc:	40022100 	.word	0x40022100
 80054d0:	58026000 	.word	0x58026000
 80054d4:	40022300 	.word	0x40022300
 80054d8:	58026300 	.word	0x58026300
 80054dc:	fff0c003 	.word	0xfff0c003
 80054e0:	ffffbffc 	.word	0xffffbffc
 80054e4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fdec 	bl	80060ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10c      	bne.n	8005536 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	f023 010f 	bic.w	r1, r3, #15
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	1e5a      	subs	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
 8005534:	e007      	b.n	8005546 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 020f 	bic.w	r2, r2, #15
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	f043 0201 	orr.w	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
 8005556:	e007      	b.n	8005568 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555c:	f043 0210 	orr.w	r2, r3, #16
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005568:	7ffb      	ldrb	r3, [r7, #31]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3724      	adds	r7, #36	; 0x24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd90      	pop	{r4, r7, pc}
 8005572:	bf00      	nop

08005574 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a55      	ldr	r2, [pc, #340]	; (80056dc <HAL_ADC_Start_DMA+0x168>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_ADC_Start_DMA+0x20>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a54      	ldr	r2, [pc, #336]	; (80056e0 <HAL_ADC_Start_DMA+0x16c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d101      	bne.n	8005598 <HAL_ADC_Start_DMA+0x24>
 8005594:	4b53      	ldr	r3, [pc, #332]	; (80056e4 <HAL_ADC_Start_DMA+0x170>)
 8005596:	e000      	b.n	800559a <HAL_ADC_Start_DMA+0x26>
 8005598:	4b53      	ldr	r3, [pc, #332]	; (80056e8 <HAL_ADC_Start_DMA+0x174>)
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fd64 	bl	8005068 <LL_ADC_GetMultimode>
 80055a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fe1c 	bl	80051e4 <LL_ADC_REG_IsConversionOngoing>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f040 808c 	bne.w	80056cc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_ADC_Start_DMA+0x4e>
 80055be:	2302      	movs	r3, #2
 80055c0:	e087      	b.n	80056d2 <HAL_ADC_Start_DMA+0x15e>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	d002      	beq.n	80055dc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b09      	cmp	r3, #9
 80055da:	d170      	bne.n	80056be <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fc07 	bl	8005df0 <ADC_Enable>
 80055e2:	4603      	mov	r3, r0
 80055e4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d163      	bne.n	80056b4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055f0:	4b3e      	ldr	r3, [pc, #248]	; (80056ec <HAL_ADC_Start_DMA+0x178>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a37      	ldr	r2, [pc, #220]	; (80056e0 <HAL_ADC_Start_DMA+0x16c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d002      	beq.n	800560c <HAL_ADC_Start_DMA+0x98>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	e000      	b.n	800560e <HAL_ADC_Start_DMA+0x9a>
 800560c:	4b33      	ldr	r3, [pc, #204]	; (80056dc <HAL_ADC_Start_DMA+0x168>)
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	4293      	cmp	r3, r2
 8005614:	d002      	beq.n	800561c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d105      	bne.n	8005628 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005620:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d006      	beq.n	8005642 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005638:	f023 0206 	bic.w	r2, r3, #6
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	659a      	str	r2, [r3, #88]	; 0x58
 8005640:	e002      	b.n	8005648 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564c:	4a28      	ldr	r2, [pc, #160]	; (80056f0 <HAL_ADC_Start_DMA+0x17c>)
 800564e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005654:	4a27      	ldr	r2, [pc, #156]	; (80056f4 <HAL_ADC_Start_DMA+0x180>)
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565c:	4a26      	ldr	r2, [pc, #152]	; (80056f8 <HAL_ADC_Start_DMA+0x184>)
 800565e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	221c      	movs	r2, #28
 8005666:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0210 	orr.w	r2, r2, #16
 800567e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	4619      	mov	r1, r3
 800568a:	4610      	mov	r0, r2
 800568c:	f7ff fc89 	bl	8004fa2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3340      	adds	r3, #64	; 0x40
 800569a:	4619      	mov	r1, r3
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f002 f886 	bl	80077b0 <HAL_DMA_Start_IT>
 80056a4:	4603      	mov	r3, r0
 80056a6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff fd85 	bl	80051bc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80056b2:	e00d      	b.n	80056d0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80056bc:	e008      	b.n	80056d0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80056ca:	e001      	b.n	80056d0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
 80056ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40022000 	.word	0x40022000
 80056e0:	40022100 	.word	0x40022100
 80056e4:	40022300 	.word	0x40022300
 80056e8:	58026300 	.word	0x58026300
 80056ec:	fffff0fe 	.word	0xfffff0fe
 80056f0:	08005fc3 	.word	0x08005fc3
 80056f4:	0800609b 	.word	0x0800609b
 80056f8:	080060b7 	.word	0x080060b7

080056fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005738:	b590      	push	{r4, r7, lr}
 800573a:	b0a1      	sub	sp, #132	; 0x84
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	4a65      	ldr	r2, [pc, #404]	; (80058e8 <HAL_ADC_ConfigChannel+0x1b0>)
 8005752:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x2a>
 800575e:	2302      	movs	r3, #2
 8005760:	e32e      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0x688>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fd38 	bl	80051e4 <LL_ADC_REG_IsConversionOngoing>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	f040 8313 	bne.w	8005da2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	db2c      	blt.n	80057de <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800578c:	2b00      	cmp	r3, #0
 800578e:	d108      	bne.n	80057a2 <HAL_ADC_ConfigChannel+0x6a>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	0e9b      	lsrs	r3, r3, #26
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	2201      	movs	r2, #1
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	e016      	b.n	80057d0 <HAL_ADC_ConfigChannel+0x98>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057aa:	fa93 f3a3 	rbit	r3, r3
 80057ae:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80057b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057b2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80057b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80057ba:	2320      	movs	r3, #32
 80057bc:	e003      	b.n	80057c6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80057be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057c0:	fab3 f383 	clz	r3, r3
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	2201      	movs	r2, #1
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	69d1      	ldr	r1, [r2, #28]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	430b      	orrs	r3, r1
 80057dc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6859      	ldr	r1, [r3, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f7ff fbad 	bl	8004f4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fcf5 	bl	80051e4 <LL_ADC_REG_IsConversionOngoing>
 80057fa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fd02 	bl	800520a <LL_ADC_INJ_IsConversionOngoing>
 8005806:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 80b8 	bne.w	8005980 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 80b4 	bne.w	8005980 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6819      	ldr	r1, [r3, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	461a      	mov	r2, r3
 8005826:	f7ff fbcf 	bl	8004fc8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800582a:	4b30      	ldr	r3, [pc, #192]	; (80058ec <HAL_ADC_ConfigChannel+0x1b4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005836:	d10b      	bne.n	8005850 <HAL_ADC_ConfigChannel+0x118>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695a      	ldr	r2, [r3, #20]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	089b      	lsrs	r3, r3, #2
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	e01d      	b.n	800588c <HAL_ADC_ConfigChannel+0x154>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10b      	bne.n	8005876 <HAL_ADC_ConfigChannel+0x13e>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	089b      	lsrs	r3, r3, #2
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	e00a      	b.n	800588c <HAL_ADC_ConfigChannel+0x154>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	695a      	ldr	r2, [r3, #20]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	089b      	lsrs	r3, r3, #2
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b04      	cmp	r3, #4
 8005894:	d02c      	beq.n	80058f0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6919      	ldr	r1, [r3, #16]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a4:	f7ff faea 	bl	8004e7c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	6919      	ldr	r1, [r3, #16]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	7e5b      	ldrb	r3, [r3, #25]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d102      	bne.n	80058be <HAL_ADC_ConfigChannel+0x186>
 80058b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058bc:	e000      	b.n	80058c0 <HAL_ADC_ConfigChannel+0x188>
 80058be:	2300      	movs	r3, #0
 80058c0:	461a      	mov	r2, r3
 80058c2:	f7ff fb14 	bl	8004eee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6919      	ldr	r1, [r3, #16]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	7e1b      	ldrb	r3, [r3, #24]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d102      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x1a4>
 80058d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058da:	e000      	b.n	80058de <HAL_ADC_ConfigChannel+0x1a6>
 80058dc:	2300      	movs	r3, #0
 80058de:	461a      	mov	r2, r3
 80058e0:	f7ff faec 	bl	8004ebc <LL_ADC_SetDataRightShift>
 80058e4:	e04c      	b.n	8005980 <HAL_ADC_ConfigChannel+0x248>
 80058e6:	bf00      	nop
 80058e8:	47ff0000 	.word	0x47ff0000
 80058ec:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	069b      	lsls	r3, r3, #26
 8005900:	429a      	cmp	r2, r3
 8005902:	d107      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005912:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800591a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	069b      	lsls	r3, r3, #26
 8005924:	429a      	cmp	r2, r3
 8005926:	d107      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005936:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800593e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	069b      	lsls	r3, r3, #26
 8005948:	429a      	cmp	r2, r3
 800594a:	d107      	bne.n	800595c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800595a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	069b      	lsls	r3, r3, #26
 800596c:	429a      	cmp	r2, r3
 800596e:	d107      	bne.n	8005980 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800597e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fbf3 	bl	8005170 <LL_ADC_IsEnabled>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 8211 	bne.w	8005db4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6819      	ldr	r1, [r3, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	461a      	mov	r2, r3
 80059a0:	f7ff fb3e 	bl	8005020 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4aa1      	ldr	r2, [pc, #644]	; (8005c30 <HAL_ADC_ConfigChannel+0x4f8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	f040 812e 	bne.w	8005c0c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <HAL_ADC_ConfigChannel+0x2a0>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	0e9b      	lsrs	r3, r3, #26
 80059c6:	3301      	adds	r3, #1
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	2b09      	cmp	r3, #9
 80059ce:	bf94      	ite	ls
 80059d0:	2301      	movls	r3, #1
 80059d2:	2300      	movhi	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	e019      	b.n	8005a0c <HAL_ADC_ConfigChannel+0x2d4>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e0:	fa93 f3a3 	rbit	r3, r3
 80059e4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80059e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80059ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80059f0:	2320      	movs	r3, #32
 80059f2:	e003      	b.n	80059fc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80059f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	3301      	adds	r3, #1
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	2b09      	cmp	r3, #9
 8005a04:	bf94      	ite	ls
 8005a06:	2301      	movls	r3, #1
 8005a08:	2300      	movhi	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d079      	beq.n	8005b04 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d107      	bne.n	8005a2c <HAL_ADC_ConfigChannel+0x2f4>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	0e9b      	lsrs	r3, r3, #26
 8005a22:	3301      	adds	r3, #1
 8005a24:	069b      	lsls	r3, r3, #26
 8005a26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a2a:	e015      	b.n	8005a58 <HAL_ADC_ConfigChannel+0x320>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a34:	fa93 f3a3 	rbit	r3, r3
 8005a38:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8005a44:	2320      	movs	r3, #32
 8005a46:	e003      	b.n	8005a50 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8005a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a4a:	fab3 f383 	clz	r3, r3
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	3301      	adds	r3, #1
 8005a52:	069b      	lsls	r3, r3, #26
 8005a54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d109      	bne.n	8005a78 <HAL_ADC_ConfigChannel+0x340>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	0e9b      	lsrs	r3, r3, #26
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	2101      	movs	r1, #1
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	e017      	b.n	8005aa8 <HAL_ADC_ConfigChannel+0x370>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a80:	fa93 f3a3 	rbit	r3, r3
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a88:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8005a90:	2320      	movs	r3, #32
 8005a92:	e003      	b.n	8005a9c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8005a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a96:	fab3 f383 	clz	r3, r3
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa8:	ea42 0103 	orr.w	r1, r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x396>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	0e9b      	lsrs	r3, r3, #26
 8005abe:	3301      	adds	r3, #1
 8005ac0:	f003 021f 	and.w	r2, r3, #31
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	4413      	add	r3, r2
 8005aca:	051b      	lsls	r3, r3, #20
 8005acc:	e018      	b.n	8005b00 <HAL_ADC_ConfigChannel+0x3c8>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad6:	fa93 f3a3 	rbit	r3, r3
 8005ada:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8005ae6:	2320      	movs	r3, #32
 8005ae8:	e003      	b.n	8005af2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8005aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aec:	fab3 f383 	clz	r3, r3
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	3301      	adds	r3, #1
 8005af4:	f003 021f 	and.w	r2, r3, #31
 8005af8:	4613      	mov	r3, r2
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	4413      	add	r3, r2
 8005afe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b00:	430b      	orrs	r3, r1
 8005b02:	e07e      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d107      	bne.n	8005b20 <HAL_ADC_ConfigChannel+0x3e8>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	0e9b      	lsrs	r3, r3, #26
 8005b16:	3301      	adds	r3, #1
 8005b18:	069b      	lsls	r3, r3, #26
 8005b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b1e:	e015      	b.n	8005b4c <HAL_ADC_ConfigChannel+0x414>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	fa93 f3a3 	rbit	r3, r3
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8005b38:	2320      	movs	r3, #32
 8005b3a:	e003      	b.n	8005b44 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	fab3 f383 	clz	r3, r3
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	3301      	adds	r3, #1
 8005b46:	069b      	lsls	r3, r3, #26
 8005b48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_ADC_ConfigChannel+0x434>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	0e9b      	lsrs	r3, r3, #26
 8005b5e:	3301      	adds	r3, #1
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	2101      	movs	r1, #1
 8005b66:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6a:	e017      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x464>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	fa93 f3a3 	rbit	r3, r3
 8005b78:	61bb      	str	r3, [r7, #24]
  return result;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8005b84:	2320      	movs	r3, #32
 8005b86:	e003      	b.n	8005b90 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	fab3 f383 	clz	r3, r3
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	3301      	adds	r3, #1
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	2101      	movs	r1, #1
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	ea42 0103 	orr.w	r1, r2, r3
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10d      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x490>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	0e9b      	lsrs	r3, r3, #26
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	f003 021f 	and.w	r2, r3, #31
 8005bb8:	4613      	mov	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3b1e      	subs	r3, #30
 8005bc0:	051b      	lsls	r3, r3, #20
 8005bc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	e01b      	b.n	8005c00 <HAL_ADC_ConfigChannel+0x4c8>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	fa93 f3a3 	rbit	r3, r3
 8005bd4:	60fb      	str	r3, [r7, #12]
  return result;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8005be0:	2320      	movs	r3, #32
 8005be2:	e003      	b.n	8005bec <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	fab3 f383 	clz	r3, r3
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	3301      	adds	r3, #1
 8005bee:	f003 021f 	and.w	r2, r3, #31
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3b1e      	subs	r3, #30
 8005bfa:	051b      	lsls	r3, r3, #20
 8005bfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c00:	430b      	orrs	r3, r1
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	6892      	ldr	r2, [r2, #8]
 8005c06:	4619      	mov	r1, r3
 8005c08:	f7ff f9de 	bl	8004fc8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f280 80cf 	bge.w	8005db4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a06      	ldr	r2, [pc, #24]	; (8005c34 <HAL_ADC_ConfigChannel+0x4fc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d004      	beq.n	8005c2a <HAL_ADC_ConfigChannel+0x4f2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a04      	ldr	r2, [pc, #16]	; (8005c38 <HAL_ADC_ConfigChannel+0x500>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d10a      	bne.n	8005c40 <HAL_ADC_ConfigChannel+0x508>
 8005c2a:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <HAL_ADC_ConfigChannel+0x504>)
 8005c2c:	e009      	b.n	8005c42 <HAL_ADC_ConfigChannel+0x50a>
 8005c2e:	bf00      	nop
 8005c30:	47ff0000 	.word	0x47ff0000
 8005c34:	40022000 	.word	0x40022000
 8005c38:	40022100 	.word	0x40022100
 8005c3c:	40022300 	.word	0x40022300
 8005c40:	4b61      	ldr	r3, [pc, #388]	; (8005dc8 <HAL_ADC_ConfigChannel+0x690>)
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff f90c 	bl	8004e60 <LL_ADC_GetCommonPathInternalCh>
 8005c48:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a5f      	ldr	r2, [pc, #380]	; (8005dcc <HAL_ADC_ConfigChannel+0x694>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_ADC_ConfigChannel+0x526>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a5d      	ldr	r2, [pc, #372]	; (8005dd0 <HAL_ADC_ConfigChannel+0x698>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d10e      	bne.n	8005c7c <HAL_ADC_ConfigChannel+0x544>
 8005c5e:	485b      	ldr	r0, [pc, #364]	; (8005dcc <HAL_ADC_ConfigChannel+0x694>)
 8005c60:	f7ff fa86 	bl	8005170 <LL_ADC_IsEnabled>
 8005c64:	4604      	mov	r4, r0
 8005c66:	485a      	ldr	r0, [pc, #360]	; (8005dd0 <HAL_ADC_ConfigChannel+0x698>)
 8005c68:	f7ff fa82 	bl	8005170 <LL_ADC_IsEnabled>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	4323      	orrs	r3, r4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bf0c      	ite	eq
 8005c74:	2301      	moveq	r3, #1
 8005c76:	2300      	movne	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e008      	b.n	8005c8e <HAL_ADC_ConfigChannel+0x556>
 8005c7c:	4855      	ldr	r0, [pc, #340]	; (8005dd4 <HAL_ADC_ConfigChannel+0x69c>)
 8005c7e:	f7ff fa77 	bl	8005170 <LL_ADC_IsEnabled>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bf0c      	ite	eq
 8005c88:	2301      	moveq	r3, #1
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d07d      	beq.n	8005d8e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a50      	ldr	r2, [pc, #320]	; (8005dd8 <HAL_ADC_ConfigChannel+0x6a0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d130      	bne.n	8005cfe <HAL_ADC_ConfigChannel+0x5c6>
 8005c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d12b      	bne.n	8005cfe <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a4a      	ldr	r2, [pc, #296]	; (8005dd4 <HAL_ADC_ConfigChannel+0x69c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	f040 8081 	bne.w	8005db4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a45      	ldr	r2, [pc, #276]	; (8005dcc <HAL_ADC_ConfigChannel+0x694>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d004      	beq.n	8005cc6 <HAL_ADC_ConfigChannel+0x58e>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a43      	ldr	r2, [pc, #268]	; (8005dd0 <HAL_ADC_ConfigChannel+0x698>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d101      	bne.n	8005cca <HAL_ADC_ConfigChannel+0x592>
 8005cc6:	4a45      	ldr	r2, [pc, #276]	; (8005ddc <HAL_ADC_ConfigChannel+0x6a4>)
 8005cc8:	e000      	b.n	8005ccc <HAL_ADC_ConfigChannel+0x594>
 8005cca:	4a3f      	ldr	r2, [pc, #252]	; (8005dc8 <HAL_ADC_ConfigChannel+0x690>)
 8005ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	f7ff f8b0 	bl	8004e3a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cda:	4b41      	ldr	r3, [pc, #260]	; (8005de0 <HAL_ADC_ConfigChannel+0x6a8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	099b      	lsrs	r3, r3, #6
 8005ce0:	4a40      	ldr	r2, [pc, #256]	; (8005de4 <HAL_ADC_ConfigChannel+0x6ac>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	099b      	lsrs	r3, r3, #6
 8005ce8:	3301      	adds	r3, #1
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005cee:	e002      	b.n	8005cf6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1f9      	bne.n	8005cf0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cfc:	e05a      	b.n	8005db4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a39      	ldr	r2, [pc, #228]	; (8005de8 <HAL_ADC_ConfigChannel+0x6b0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d11e      	bne.n	8005d46 <HAL_ADC_ConfigChannel+0x60e>
 8005d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d119      	bne.n	8005d46 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a2f      	ldr	r2, [pc, #188]	; (8005dd4 <HAL_ADC_ConfigChannel+0x69c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d14b      	bne.n	8005db4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2a      	ldr	r2, [pc, #168]	; (8005dcc <HAL_ADC_ConfigChannel+0x694>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <HAL_ADC_ConfigChannel+0x5f8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a29      	ldr	r2, [pc, #164]	; (8005dd0 <HAL_ADC_ConfigChannel+0x698>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d101      	bne.n	8005d34 <HAL_ADC_ConfigChannel+0x5fc>
 8005d30:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <HAL_ADC_ConfigChannel+0x6a4>)
 8005d32:	e000      	b.n	8005d36 <HAL_ADC_ConfigChannel+0x5fe>
 8005d34:	4a24      	ldr	r2, [pc, #144]	; (8005dc8 <HAL_ADC_ConfigChannel+0x690>)
 8005d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f7ff f87b 	bl	8004e3a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d44:	e036      	b.n	8005db4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a28      	ldr	r2, [pc, #160]	; (8005dec <HAL_ADC_ConfigChannel+0x6b4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d131      	bne.n	8005db4 <HAL_ADC_ConfigChannel+0x67c>
 8005d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d12c      	bne.n	8005db4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1d      	ldr	r2, [pc, #116]	; (8005dd4 <HAL_ADC_ConfigChannel+0x69c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d127      	bne.n	8005db4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a18      	ldr	r2, [pc, #96]	; (8005dcc <HAL_ADC_ConfigChannel+0x694>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_ADC_ConfigChannel+0x640>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a17      	ldr	r2, [pc, #92]	; (8005dd0 <HAL_ADC_ConfigChannel+0x698>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d101      	bne.n	8005d7c <HAL_ADC_ConfigChannel+0x644>
 8005d78:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <HAL_ADC_ConfigChannel+0x6a4>)
 8005d7a:	e000      	b.n	8005d7e <HAL_ADC_ConfigChannel+0x646>
 8005d7c:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <HAL_ADC_ConfigChannel+0x690>)
 8005d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d84:	4619      	mov	r1, r3
 8005d86:	4610      	mov	r0, r2
 8005d88:	f7ff f857 	bl	8004e3a <LL_ADC_SetCommonPathInternalCh>
 8005d8c:	e012      	b.n	8005db4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d92:	f043 0220 	orr.w	r2, r3, #32
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005da0:	e008      	b.n	8005db4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da6:	f043 0220 	orr.w	r2, r3, #32
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005dbc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3784      	adds	r7, #132	; 0x84
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd90      	pop	{r4, r7, pc}
 8005dc8:	58026300 	.word	0x58026300
 8005dcc:	40022000 	.word	0x40022000
 8005dd0:	40022100 	.word	0x40022100
 8005dd4:	58026000 	.word	0x58026000
 8005dd8:	cb840000 	.word	0xcb840000
 8005ddc:	40022300 	.word	0x40022300
 8005de0:	240000bc 	.word	0x240000bc
 8005de4:	053e2d63 	.word	0x053e2d63
 8005de8:	c7520000 	.word	0xc7520000
 8005dec:	cfb80000 	.word	0xcfb80000

08005df0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff f9b7 	bl	8005170 <LL_ADC_IsEnabled>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d16e      	bne.n	8005ee6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	4b38      	ldr	r3, [pc, #224]	; (8005ef0 <ADC_Enable+0x100>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00d      	beq.n	8005e32 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1a:	f043 0210 	orr.w	r2, r3, #16
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e26:	f043 0201 	orr.w	r2, r3, #1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e05a      	b.n	8005ee8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff f972 	bl	8005120 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e3c:	f7fe ffbc 	bl	8004db8 <HAL_GetTick>
 8005e40:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a2b      	ldr	r2, [pc, #172]	; (8005ef4 <ADC_Enable+0x104>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <ADC_Enable+0x66>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a29      	ldr	r2, [pc, #164]	; (8005ef8 <ADC_Enable+0x108>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d101      	bne.n	8005e5a <ADC_Enable+0x6a>
 8005e56:	4b29      	ldr	r3, [pc, #164]	; (8005efc <ADC_Enable+0x10c>)
 8005e58:	e000      	b.n	8005e5c <ADC_Enable+0x6c>
 8005e5a:	4b29      	ldr	r3, [pc, #164]	; (8005f00 <ADC_Enable+0x110>)
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff f903 	bl	8005068 <LL_ADC_GetMultimode>
 8005e62:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a23      	ldr	r2, [pc, #140]	; (8005ef8 <ADC_Enable+0x108>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d002      	beq.n	8005e74 <ADC_Enable+0x84>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	e000      	b.n	8005e76 <ADC_Enable+0x86>
 8005e74:	4b1f      	ldr	r3, [pc, #124]	; (8005ef4 <ADC_Enable+0x104>)
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d02c      	beq.n	8005ed8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d130      	bne.n	8005ee6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e84:	e028      	b.n	8005ed8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff f970 	bl	8005170 <LL_ADC_IsEnabled>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff f940 	bl	8005120 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ea0:	f7fe ff8a 	bl	8004db8 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d914      	bls.n	8005ed8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d00d      	beq.n	8005ed8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	f043 0210 	orr.w	r2, r3, #16
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	f043 0201 	orr.w	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e007      	b.n	8005ee8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d1cf      	bne.n	8005e86 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	8000003f 	.word	0x8000003f
 8005ef4:	40022000 	.word	0x40022000
 8005ef8:	40022100 	.word	0x40022100
 8005efc:	40022300 	.word	0x40022300
 8005f00:	58026300 	.word	0x58026300

08005f04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff f940 	bl	8005196 <LL_ADC_IsDisableOngoing>
 8005f16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff f927 	bl	8005170 <LL_ADC_IsEnabled>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d047      	beq.n	8005fb8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d144      	bne.n	8005fb8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 030d 	and.w	r3, r3, #13
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d10c      	bne.n	8005f56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff f901 	bl	8005148 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f4e:	f7fe ff33 	bl	8004db8 <HAL_GetTick>
 8005f52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f54:	e029      	b.n	8005faa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	f043 0210 	orr.w	r2, r3, #16
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f66:	f043 0201 	orr.w	r2, r3, #1
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e023      	b.n	8005fba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f72:	f7fe ff21 	bl	8004db8 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d914      	bls.n	8005faa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00d      	beq.n	8005faa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f92:	f043 0210 	orr.w	r2, r3, #16
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e007      	b.n	8005fba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1dc      	bne.n	8005f72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d14b      	bne.n	8006074 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d021      	beq.n	800603a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe ff92 	bl	8004f24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d032      	beq.n	800606c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d12b      	bne.n	800606c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d11f      	bne.n	800606c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006030:	f043 0201 	orr.w	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	655a      	str	r2, [r3, #84]	; 0x54
 8006038:	e018      	b.n	800606c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d111      	bne.n	800606c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006064:	f043 0201 	orr.w	r2, r3, #1
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff fb45 	bl	80056fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006072:	e00e      	b.n	8006092 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff fb4f 	bl	8005724 <HAL_ADC_ErrorCallback>
}
 8006086:	e004      	b.n	8006092 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff fb31 	bl	8005710 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d4:	f043 0204 	orr.w	r2, r3, #4
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff fb21 	bl	8005724 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a7a      	ldr	r2, [pc, #488]	; (80062e4 <ADC_ConfigureBoostMode+0x1f8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <ADC_ConfigureBoostMode+0x1c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a79      	ldr	r2, [pc, #484]	; (80062e8 <ADC_ConfigureBoostMode+0x1fc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d109      	bne.n	800611c <ADC_ConfigureBoostMode+0x30>
 8006108:	4b78      	ldr	r3, [pc, #480]	; (80062ec <ADC_ConfigureBoostMode+0x200>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006110:	2b00      	cmp	r3, #0
 8006112:	bf14      	ite	ne
 8006114:	2301      	movne	r3, #1
 8006116:	2300      	moveq	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	e008      	b.n	800612e <ADC_ConfigureBoostMode+0x42>
 800611c:	4b74      	ldr	r3, [pc, #464]	; (80062f0 <ADC_ConfigureBoostMode+0x204>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006124:	2b00      	cmp	r3, #0
 8006126:	bf14      	ite	ne
 8006128:	2301      	movne	r3, #1
 800612a:	2300      	moveq	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d01c      	beq.n	800616c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006132:	f007 fe67 	bl	800de04 <HAL_RCC_GetHCLKFreq>
 8006136:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006140:	d010      	beq.n	8006164 <ADC_ConfigureBoostMode+0x78>
 8006142:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006146:	d873      	bhi.n	8006230 <ADC_ConfigureBoostMode+0x144>
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d002      	beq.n	8006154 <ADC_ConfigureBoostMode+0x68>
 800614e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006152:	d16d      	bne.n	8006230 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	0c1b      	lsrs	r3, r3, #16
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006160:	60fb      	str	r3, [r7, #12]
        break;
 8006162:	e068      	b.n	8006236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	089b      	lsrs	r3, r3, #2
 8006168:	60fb      	str	r3, [r7, #12]
        break;
 800616a:	e064      	b.n	8006236 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800616c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006170:	f04f 0100 	mov.w	r1, #0
 8006174:	f009 f8ee 	bl	800f354 <HAL_RCCEx_GetPeriphCLKFreq>
 8006178:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006182:	d051      	beq.n	8006228 <ADC_ConfigureBoostMode+0x13c>
 8006184:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006188:	d854      	bhi.n	8006234 <ADC_ConfigureBoostMode+0x148>
 800618a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800618e:	d047      	beq.n	8006220 <ADC_ConfigureBoostMode+0x134>
 8006190:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006194:	d84e      	bhi.n	8006234 <ADC_ConfigureBoostMode+0x148>
 8006196:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800619a:	d03d      	beq.n	8006218 <ADC_ConfigureBoostMode+0x12c>
 800619c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80061a0:	d848      	bhi.n	8006234 <ADC_ConfigureBoostMode+0x148>
 80061a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a6:	d033      	beq.n	8006210 <ADC_ConfigureBoostMode+0x124>
 80061a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ac:	d842      	bhi.n	8006234 <ADC_ConfigureBoostMode+0x148>
 80061ae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80061b2:	d029      	beq.n	8006208 <ADC_ConfigureBoostMode+0x11c>
 80061b4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80061b8:	d83c      	bhi.n	8006234 <ADC_ConfigureBoostMode+0x148>
 80061ba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80061be:	d01a      	beq.n	80061f6 <ADC_ConfigureBoostMode+0x10a>
 80061c0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80061c4:	d836      	bhi.n	8006234 <ADC_ConfigureBoostMode+0x148>
 80061c6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80061ca:	d014      	beq.n	80061f6 <ADC_ConfigureBoostMode+0x10a>
 80061cc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80061d0:	d830      	bhi.n	8006234 <ADC_ConfigureBoostMode+0x148>
 80061d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d6:	d00e      	beq.n	80061f6 <ADC_ConfigureBoostMode+0x10a>
 80061d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061dc:	d82a      	bhi.n	8006234 <ADC_ConfigureBoostMode+0x148>
 80061de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061e2:	d008      	beq.n	80061f6 <ADC_ConfigureBoostMode+0x10a>
 80061e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061e8:	d824      	bhi.n	8006234 <ADC_ConfigureBoostMode+0x148>
 80061ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061ee:	d002      	beq.n	80061f6 <ADC_ConfigureBoostMode+0x10a>
 80061f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061f4:	d11e      	bne.n	8006234 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	0c9b      	lsrs	r3, r3, #18
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	fbb2 f3f3 	udiv	r3, r2, r3
 8006204:	60fb      	str	r3, [r7, #12]
        break;
 8006206:	e016      	b.n	8006236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	60fb      	str	r3, [r7, #12]
        break;
 800620e:	e012      	b.n	8006236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	60fb      	str	r3, [r7, #12]
        break;
 8006216:	e00e      	b.n	8006236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	099b      	lsrs	r3, r3, #6
 800621c:	60fb      	str	r3, [r7, #12]
        break;
 800621e:	e00a      	b.n	8006236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	09db      	lsrs	r3, r3, #7
 8006224:	60fb      	str	r3, [r7, #12]
        break;
 8006226:	e006      	b.n	8006236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	60fb      	str	r3, [r7, #12]
        break;
 800622e:	e002      	b.n	8006236 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006230:	bf00      	nop
 8006232:	e000      	b.n	8006236 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006234:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006236:	f7fe fdcb 	bl	8004dd0 <HAL_GetREVID>
 800623a:	4603      	mov	r3, r0
 800623c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006240:	4293      	cmp	r3, r2
 8006242:	d815      	bhi.n	8006270 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4a2b      	ldr	r2, [pc, #172]	; (80062f4 <ADC_ConfigureBoostMode+0x208>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d908      	bls.n	800625e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800625a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800625c:	e03e      	b.n	80062dc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800626c:	609a      	str	r2, [r3, #8]
}
 800626e:	e035      	b.n	80062dc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	085b      	lsrs	r3, r3, #1
 8006274:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a1f      	ldr	r2, [pc, #124]	; (80062f8 <ADC_ConfigureBoostMode+0x20c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d808      	bhi.n	8006290 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800628c:	609a      	str	r2, [r3, #8]
}
 800628e:	e025      	b.n	80062dc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a1a      	ldr	r2, [pc, #104]	; (80062fc <ADC_ConfigureBoostMode+0x210>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d80a      	bhi.n	80062ae <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062aa:	609a      	str	r2, [r3, #8]
}
 80062ac:	e016      	b.n	80062dc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4a13      	ldr	r2, [pc, #76]	; (8006300 <ADC_ConfigureBoostMode+0x214>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d80a      	bhi.n	80062cc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c8:	609a      	str	r2, [r3, #8]
}
 80062ca:	e007      	b.n	80062dc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80062da:	609a      	str	r2, [r3, #8]
}
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40022000 	.word	0x40022000
 80062e8:	40022100 	.word	0x40022100
 80062ec:	40022300 	.word	0x40022300
 80062f0:	58026300 	.word	0x58026300
 80062f4:	01312d00 	.word	0x01312d00
 80062f8:	005f5e10 	.word	0x005f5e10
 80062fc:	00bebc20 	.word	0x00bebc20
 8006300:	017d7840 	.word	0x017d7840

08006304 <LL_ADC_IsEnabled>:
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <LL_ADC_IsEnabled+0x18>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <LL_ADC_IsEnabled+0x1a>
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <LL_ADC_StartCalibration>:
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <LL_ADC_StartCalibration+0x38>)
 800633e:	4013      	ands	r3, r2
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800634c:	430a      	orrs	r2, r1
 800634e:	4313      	orrs	r3, r2
 8006350:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	609a      	str	r2, [r3, #8]
}
 8006358:	bf00      	nop
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	3ffeffc0 	.word	0x3ffeffc0

08006368 <LL_ADC_IsCalibrationOnGoing>:
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800637c:	d101      	bne.n	8006382 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <LL_ADC_REG_IsConversionOngoing>:
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d101      	bne.n	80063a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
	...

080063b8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_ADCEx_Calibration_Start+0x1e>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e04c      	b.n	8006470 <HAL_ADCEx_Calibration_Start+0xb8>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff fd90 	bl	8005f04 <ADC_Disable>
 80063e4:	4603      	mov	r3, r0
 80063e6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d135      	bne.n	800645a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063f2:	4b21      	ldr	r3, [pc, #132]	; (8006478 <HAL_ADCEx_Calibration_Start+0xc0>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	f043 0202 	orr.w	r2, r3, #2
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff ff90 	bl	800632c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800640c:	e014      	b.n	8006438 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	3301      	adds	r3, #1
 8006412:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	4a19      	ldr	r2, [pc, #100]	; (800647c <HAL_ADCEx_Calibration_Start+0xc4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d30d      	bcc.n	8006438 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006420:	f023 0312 	bic.w	r3, r3, #18
 8006424:	f043 0210 	orr.w	r2, r3, #16
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e01b      	b.n	8006470 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff ff93 	bl	8006368 <LL_ADC_IsCalibrationOnGoing>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e2      	bne.n	800640e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644c:	f023 0303 	bic.w	r3, r3, #3
 8006450:	f043 0201 	orr.w	r2, r3, #1
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	655a      	str	r2, [r3, #84]	; 0x54
 8006458:	e005      	b.n	8006466 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	f043 0210 	orr.w	r2, r3, #16
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800646e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	ffffeefd 	.word	0xffffeefd
 800647c:	25c3f800 	.word	0x25c3f800

08006480 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b09f      	sub	sp, #124	; 0x7c
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800649a:	2302      	movs	r3, #2
 800649c:	e0be      	b.n	800661c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80064a6:	2300      	movs	r3, #0
 80064a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a5c      	ldr	r2, [pc, #368]	; (8006624 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d102      	bne.n	80064be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80064b8:	4b5b      	ldr	r3, [pc, #364]	; (8006628 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80064ba:	60bb      	str	r3, [r7, #8]
 80064bc:	e001      	b.n	80064c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80064be:	2300      	movs	r3, #0
 80064c0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10b      	bne.n	80064e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064cc:	f043 0220 	orr.w	r2, r3, #32
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e09d      	b.n	800661c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff ff54 	bl	8006390 <LL_ADC_REG_IsConversionOngoing>
 80064e8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff ff4e 	bl	8006390 <LL_ADC_REG_IsConversionOngoing>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d17f      	bne.n	80065fa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80064fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d17c      	bne.n	80065fa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a47      	ldr	r2, [pc, #284]	; (8006624 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a46      	ldr	r2, [pc, #280]	; (8006628 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d101      	bne.n	8006518 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006514:	4b45      	ldr	r3, [pc, #276]	; (800662c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006516:	e000      	b.n	800651a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006518:	4b45      	ldr	r3, [pc, #276]	; (8006630 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800651a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d039      	beq.n	8006598 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	431a      	orrs	r2, r3
 8006532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006534:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a3a      	ldr	r2, [pc, #232]	; (8006624 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a38      	ldr	r2, [pc, #224]	; (8006628 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d10e      	bne.n	8006568 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800654a:	4836      	ldr	r0, [pc, #216]	; (8006624 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800654c:	f7ff feda 	bl	8006304 <LL_ADC_IsEnabled>
 8006550:	4604      	mov	r4, r0
 8006552:	4835      	ldr	r0, [pc, #212]	; (8006628 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006554:	f7ff fed6 	bl	8006304 <LL_ADC_IsEnabled>
 8006558:	4603      	mov	r3, r0
 800655a:	4323      	orrs	r3, r4
 800655c:	2b00      	cmp	r3, #0
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	e008      	b.n	800657a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006568:	4832      	ldr	r0, [pc, #200]	; (8006634 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800656a:	f7ff fecb 	bl	8006304 <LL_ADC_IsEnabled>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d047      	beq.n	800660e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800657e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	4b2d      	ldr	r3, [pc, #180]	; (8006638 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006584:	4013      	ands	r3, r2
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	6811      	ldr	r1, [r2, #0]
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	6892      	ldr	r2, [r2, #8]
 800658e:	430a      	orrs	r2, r1
 8006590:	431a      	orrs	r2, r3
 8006592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006594:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006596:	e03a      	b.n	800660e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1e      	ldr	r2, [pc, #120]	; (8006624 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d004      	beq.n	80065b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1d      	ldr	r2, [pc, #116]	; (8006628 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10e      	bne.n	80065d6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80065b8:	481a      	ldr	r0, [pc, #104]	; (8006624 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80065ba:	f7ff fea3 	bl	8006304 <LL_ADC_IsEnabled>
 80065be:	4604      	mov	r4, r0
 80065c0:	4819      	ldr	r0, [pc, #100]	; (8006628 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80065c2:	f7ff fe9f 	bl	8006304 <LL_ADC_IsEnabled>
 80065c6:	4603      	mov	r3, r0
 80065c8:	4323      	orrs	r3, r4
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	e008      	b.n	80065e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80065d6:	4817      	ldr	r0, [pc, #92]	; (8006634 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80065d8:	f7ff fe94 	bl	8006304 <LL_ADC_IsEnabled>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d010      	beq.n	800660e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80065ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	4b11      	ldr	r3, [pc, #68]	; (8006638 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80065f2:	4013      	ands	r3, r2
 80065f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065f6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80065f8:	e009      	b.n	800660e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fe:	f043 0220 	orr.w	r2, r3, #32
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800660c:	e000      	b.n	8006610 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800660e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006618:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800661c:	4618      	mov	r0, r3
 800661e:	377c      	adds	r7, #124	; 0x7c
 8006620:	46bd      	mov	sp, r7
 8006622:	bd90      	pop	{r4, r7, pc}
 8006624:	40022000 	.word	0x40022000
 8006628:	40022100 	.word	0x40022100
 800662c:	40022300 	.word	0x40022300
 8006630:	58026300 	.word	0x58026300
 8006634:	58026000 	.word	0x58026000
 8006638:	fffff0e0 	.word	0xfffff0e0

0800663c <__NVIC_SetPriorityGrouping>:
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <__NVIC_SetPriorityGrouping+0x40>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006658:	4013      	ands	r3, r2
 800665a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <__NVIC_SetPriorityGrouping+0x44>)
 8006666:	4313      	orrs	r3, r2
 8006668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800666a:	4a04      	ldr	r2, [pc, #16]	; (800667c <__NVIC_SetPriorityGrouping+0x40>)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	60d3      	str	r3, [r2, #12]
}
 8006670:	bf00      	nop
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	e000ed00 	.word	0xe000ed00
 8006680:	05fa0000 	.word	0x05fa0000

08006684 <__NVIC_GetPriorityGrouping>:
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006688:	4b04      	ldr	r3, [pc, #16]	; (800669c <__NVIC_GetPriorityGrouping+0x18>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	0a1b      	lsrs	r3, r3, #8
 800668e:	f003 0307 	and.w	r3, r3, #7
}
 8006692:	4618      	mov	r0, r3
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	e000ed00 	.word	0xe000ed00

080066a0 <__NVIC_EnableIRQ>:
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80066aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	db0b      	blt.n	80066ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	f003 021f 	and.w	r2, r3, #31
 80066b8:	4907      	ldr	r1, [pc, #28]	; (80066d8 <__NVIC_EnableIRQ+0x38>)
 80066ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	2001      	movs	r0, #1
 80066c2:	fa00 f202 	lsl.w	r2, r0, r2
 80066c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	e000e100 	.word	0xe000e100

080066dc <__NVIC_SetPriority>:
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	6039      	str	r1, [r7, #0]
 80066e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80066e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	db0a      	blt.n	8006706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	490c      	ldr	r1, [pc, #48]	; (8006728 <__NVIC_SetPriority+0x4c>)
 80066f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066fa:	0112      	lsls	r2, r2, #4
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	440b      	add	r3, r1
 8006700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006704:	e00a      	b.n	800671c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	4908      	ldr	r1, [pc, #32]	; (800672c <__NVIC_SetPriority+0x50>)
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	3b04      	subs	r3, #4
 8006714:	0112      	lsls	r2, r2, #4
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	440b      	add	r3, r1
 800671a:	761a      	strb	r2, [r3, #24]
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	e000e100 	.word	0xe000e100
 800672c:	e000ed00 	.word	0xe000ed00

08006730 <NVIC_EncodePriority>:
{
 8006730:	b480      	push	{r7}
 8006732:	b089      	sub	sp, #36	; 0x24
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f003 0307 	and.w	r3, r3, #7
 8006742:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f1c3 0307 	rsb	r3, r3, #7
 800674a:	2b04      	cmp	r3, #4
 800674c:	bf28      	it	cs
 800674e:	2304      	movcs	r3, #4
 8006750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	3304      	adds	r3, #4
 8006756:	2b06      	cmp	r3, #6
 8006758:	d902      	bls.n	8006760 <NVIC_EncodePriority+0x30>
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3b03      	subs	r3, #3
 800675e:	e000      	b.n	8006762 <NVIC_EncodePriority+0x32>
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	fa02 f303 	lsl.w	r3, r2, r3
 800676e:	43da      	mvns	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	401a      	ands	r2, r3
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	fa01 f303 	lsl.w	r3, r1, r3
 8006782:	43d9      	mvns	r1, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006788:	4313      	orrs	r3, r2
}
 800678a:	4618      	mov	r0, r3
 800678c:	3724      	adds	r7, #36	; 0x24
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff ff4c 	bl	800663c <__NVIC_SetPriorityGrouping>
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067ba:	f7ff ff63 	bl	8006684 <__NVIC_GetPriorityGrouping>
 80067be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	6978      	ldr	r0, [r7, #20]
 80067c6:	f7ff ffb3 	bl	8006730 <NVIC_EncodePriority>
 80067ca:	4602      	mov	r2, r0
 80067cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067d0:	4611      	mov	r1, r2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff ff82 	bl	80066dc <__NVIC_SetPriority>
}
 80067d8:	bf00      	nop
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff ff56 	bl	80066a0 <__NVIC_EnableIRQ>
}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006800:	f3bf 8f5f 	dmb	sy
}
 8006804:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <HAL_MPU_Disable+0x28>)
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	4a06      	ldr	r2, [pc, #24]	; (8006824 <HAL_MPU_Disable+0x28>)
 800680c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006810:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006812:	4b05      	ldr	r3, [pc, #20]	; (8006828 <HAL_MPU_Disable+0x2c>)
 8006814:	2200      	movs	r2, #0
 8006816:	605a      	str	r2, [r3, #4]
}
 8006818:	bf00      	nop
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	e000ed00 	.word	0xe000ed00
 8006828:	e000ed90 	.word	0xe000ed90

0800682c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006834:	4a0b      	ldr	r2, [pc, #44]	; (8006864 <HAL_MPU_Enable+0x38>)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f043 0301 	orr.w	r3, r3, #1
 800683c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800683e:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <HAL_MPU_Enable+0x3c>)
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	4a09      	ldr	r2, [pc, #36]	; (8006868 <HAL_MPU_Enable+0x3c>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006848:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800684a:	f3bf 8f4f 	dsb	sy
}
 800684e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006850:	f3bf 8f6f 	isb	sy
}
 8006854:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	e000ed90 	.word	0xe000ed90
 8006868:	e000ed00 	.word	0xe000ed00

0800686c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	785a      	ldrb	r2, [r3, #1]
 8006878:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <HAL_MPU_ConfigRegion+0x7c>)
 800687a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800687c:	4b1a      	ldr	r3, [pc, #104]	; (80068e8 <HAL_MPU_ConfigRegion+0x7c>)
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	4a19      	ldr	r2, [pc, #100]	; (80068e8 <HAL_MPU_ConfigRegion+0x7c>)
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006888:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <HAL_MPU_ConfigRegion+0x7c>)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	7b1b      	ldrb	r3, [r3, #12]
 8006894:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	7adb      	ldrb	r3, [r3, #11]
 800689a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800689c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7a9b      	ldrb	r3, [r3, #10]
 80068a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80068a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	7b5b      	ldrb	r3, [r3, #13]
 80068aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80068ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7b9b      	ldrb	r3, [r3, #14]
 80068b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80068b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	7bdb      	ldrb	r3, [r3, #15]
 80068ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80068bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	7a5b      	ldrb	r3, [r3, #9]
 80068c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80068c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	7a1b      	ldrb	r3, [r3, #8]
 80068ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80068cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	7812      	ldrb	r2, [r2, #0]
 80068d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068d4:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80068d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068d8:	6113      	str	r3, [r2, #16]
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	e000ed90 	.word	0xe000ed90

080068ec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e014      	b.n	8006928 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	791b      	ldrb	r3, [r3, #4]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d105      	bne.n	8006914 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fa f968 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e046      	b.n	80069d2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	795b      	ldrb	r3, [r3, #5]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_DAC_Start+0x20>
 800694c:	2302      	movs	r3, #2
 800694e:	e040      	b.n	80069d2 <HAL_DAC_Start+0xa2>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2202      	movs	r2, #2
 800695a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6819      	ldr	r1, [r3, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2201      	movs	r2, #1
 800696a:	409a      	lsls	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10f      	bne.n	800699a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006984:	2b02      	cmp	r3, #2
 8006986:	d11d      	bne.n	80069c4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	605a      	str	r2, [r3, #4]
 8006998:	e014      	b.n	80069c4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	2102      	movs	r1, #2
 80069ac:	fa01 f303 	lsl.w	r3, r1, r3
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d107      	bne.n	80069c4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0202 	orr.w	r2, r2, #2
 80069c2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
	...

080069e0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0a2      	b.n	8006b3e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	795b      	ldrb	r3, [r3, #5]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_DAC_Start_DMA+0x24>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e09c      	b.n	8006b3e <HAL_DAC_Start_DMA+0x15e>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d129      	bne.n	8006a6a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	4a4b      	ldr	r2, [pc, #300]	; (8006b48 <HAL_DAC_Start_DMA+0x168>)
 8006a1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	4a4a      	ldr	r2, [pc, #296]	; (8006b4c <HAL_DAC_Start_DMA+0x16c>)
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	4a49      	ldr	r2, [pc, #292]	; (8006b50 <HAL_DAC_Start_DMA+0x170>)
 8006a2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a3c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_DAC_Start_DMA+0x6c>
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d005      	beq.n	8006a56 <HAL_DAC_Start_DMA+0x76>
 8006a4a:	e009      	b.n	8006a60 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3308      	adds	r3, #8
 8006a52:	613b      	str	r3, [r7, #16]
        break;
 8006a54:	e033      	b.n	8006abe <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	613b      	str	r3, [r7, #16]
        break;
 8006a5e:	e02e      	b.n	8006abe <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3310      	adds	r3, #16
 8006a66:	613b      	str	r3, [r7, #16]
        break;
 8006a68:	e029      	b.n	8006abe <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	4a39      	ldr	r2, [pc, #228]	; (8006b54 <HAL_DAC_Start_DMA+0x174>)
 8006a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	4a38      	ldr	r2, [pc, #224]	; (8006b58 <HAL_DAC_Start_DMA+0x178>)
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	4a37      	ldr	r2, [pc, #220]	; (8006b5c <HAL_DAC_Start_DMA+0x17c>)
 8006a80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a90:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_DAC_Start_DMA+0xc0>
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d005      	beq.n	8006aaa <HAL_DAC_Start_DMA+0xca>
 8006a9e:	e009      	b.n	8006ab4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3314      	adds	r3, #20
 8006aa6:	613b      	str	r3, [r7, #16]
        break;
 8006aa8:	e009      	b.n	8006abe <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3318      	adds	r3, #24
 8006ab0:	613b      	str	r3, [r7, #16]
        break;
 8006ab2:	e004      	b.n	8006abe <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	331c      	adds	r3, #28
 8006aba:	613b      	str	r3, [r7, #16]
        break;
 8006abc:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d111      	bne.n	8006ae8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ad2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6898      	ldr	r0, [r3, #8]
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	f000 fe67 	bl	80077b0 <HAL_DMA_Start_IT>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	75fb      	strb	r3, [r7, #23]
 8006ae6:	e010      	b.n	8006b0a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006af6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	68d8      	ldr	r0, [r3, #12]
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	f000 fe55 	bl	80077b0 <HAL_DMA_Start_IT>
 8006b06:	4603      	mov	r3, r0
 8006b08:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10c      	bne.n	8006b30 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6819      	ldr	r1, [r3, #0]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 0310 	and.w	r3, r3, #16
 8006b22:	2201      	movs	r2, #1
 8006b24:	409a      	lsls	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e005      	b.n	8006b3c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f043 0204 	orr.w	r2, r3, #4
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	08006fd1 	.word	0x08006fd1
 8006b4c:	08006ff3 	.word	0x08006ff3
 8006b50:	0800700f 	.word	0x0800700f
 8006b54:	0800708d 	.word	0x0800708d
 8006b58:	080070af 	.word	0x080070af
 8006b5c:	080070cb 	.word	0x080070cb

08006b60 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e03e      	b.n	8006bf2 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6819      	ldr	r1, [r3, #0]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	43da      	mvns	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	400a      	ands	r2, r1
 8006b90:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6819      	ldr	r1, [r3, #0]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f003 0310 	and.w	r3, r3, #16
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	43da      	mvns	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	400a      	ands	r2, r1
 8006bac:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10d      	bne.n	8006bd0 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 f863 	bl	8007c84 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e00c      	b.n	8006bea <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f855 	bl	8007c84 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006be8:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c10:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01d      	beq.n	8006c58 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d018      	beq.n	8006c58 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2204      	movs	r2, #4
 8006c2a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f043 0201 	orr.w	r2, r3, #1
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c50:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f86f 	bl	8006d36 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01d      	beq.n	8006c9e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d018      	beq.n	8006c9e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2204      	movs	r2, #4
 8006c70:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f043 0202 	orr.w	r2, r3, #2
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006c86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c96:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f9ed 	bl	8007078 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b087      	sub	sp, #28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e015      	b.n	8006cee <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d105      	bne.n	8006cda <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e004      	b.n	8006ce4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4413      	add	r3, r2
 8006ce0:	3314      	adds	r3, #20
 8006ce2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
	...

08006d4c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	; 0x28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <HAL_DAC_ConfigChannel+0x1e>
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e12a      	b.n	8006fc4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	795b      	ldrb	r3, [r3, #5]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_DAC_ConfigChannel+0x2e>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e124      	b.n	8006fc4 <HAL_DAC_ConfigChannel+0x278>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2202      	movs	r2, #2
 8006d84:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d17a      	bne.n	8006e84 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006d8e:	f7fe f813 	bl	8004db8 <HAL_GetTick>
 8006d92:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d13d      	bne.n	8006e16 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006d9a:	e018      	b.n	8006dce <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006d9c:	f7fe f80c 	bl	8004db8 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d911      	bls.n	8006dce <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db0:	4b86      	ldr	r3, [pc, #536]	; (8006fcc <HAL_DAC_ConfigChannel+0x280>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	f043 0208 	orr.w	r2, r3, #8
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e0fa      	b.n	8006fc4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd4:	4b7d      	ldr	r3, [pc, #500]	; (8006fcc <HAL_DAC_ConfigChannel+0x280>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1df      	bne.n	8006d9c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	6992      	ldr	r2, [r2, #24]
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40
 8006de6:	e020      	b.n	8006e2a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006de8:	f7fd ffe6 	bl	8004db8 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d90f      	bls.n	8006e16 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da0a      	bge.n	8006e16 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f043 0208 	orr.w	r2, r3, #8
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2203      	movs	r2, #3
 8006e10:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e0d6      	b.n	8006fc4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dbe3      	blt.n	8006de8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	6992      	ldr	r2, [r2, #24]
 8006e28:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f003 0310 	and.w	r3, r3, #16
 8006e36:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	ea02 0103 	and.w	r1, r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f003 0310 	and.w	r3, r3, #16
 8006e4e:	409a      	lsls	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	21ff      	movs	r1, #255	; 0xff
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	43db      	mvns	r3, r3
 8006e6c:	ea02 0103 	and.w	r1, r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	6a1a      	ldr	r2, [r3, #32]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f003 0310 	and.w	r3, r3, #16
 8006e7a:	409a      	lsls	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d11d      	bne.n	8006ec8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	221f      	movs	r2, #31
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	43db      	mvns	r3, r3
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ece:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f003 0310 	and.w	r3, r3, #16
 8006ed6:	2207      	movs	r2, #7
 8006ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8006edc:	43db      	mvns	r3, r3
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d102      	bne.n	8006ef2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef0:	e00f      	b.n	8006f12 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d102      	bne.n	8006f00 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006efa:	2301      	movs	r3, #1
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
 8006efe:	e008      	b.n	8006f12 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0c:	e001      	b.n	8006f12 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f003 0310 	and.w	r3, r3, #16
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6819      	ldr	r1, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	43da      	mvns	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	400a      	ands	r2, r1
 8006f58:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	43db      	mvns	r3, r3
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	4013      	ands	r3, r2
 8006f76:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6819      	ldr	r1, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	22c0      	movs	r2, #192	; 0xc0
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	43da      	mvns	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	400a      	ands	r2, r1
 8006fb2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3728      	adds	r7, #40	; 0x28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20008000 	.word	0x20008000

08006fd0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7ff fe8b 	bl	8006cfa <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	711a      	strb	r2, [r3, #4]
}
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f7ff fe84 	bl	8006d0e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007006:	bf00      	nop
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f043 0204 	orr.w	r2, r3, #4
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f7ff fe7a 	bl	8006d22 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	711a      	strb	r2, [r3, #4]
}
 8007034:	bf00      	nop
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff ffce 	bl	800703c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	711a      	strb	r2, [r3, #4]
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f7ff ffc7 	bl	8007050 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80070c2:	bf00      	nop
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f043 0204 	orr.w	r2, r3, #4
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff ffbd 	bl	8007064 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	711a      	strb	r2, [r3, #4]
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007100:	f7fd fe5a 	bl	8004db8 <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e316      	b.n	800773e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a66      	ldr	r2, [pc, #408]	; (80072b0 <HAL_DMA_Init+0x1b8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d04a      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a65      	ldr	r2, [pc, #404]	; (80072b4 <HAL_DMA_Init+0x1bc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d045      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a63      	ldr	r2, [pc, #396]	; (80072b8 <HAL_DMA_Init+0x1c0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d040      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a62      	ldr	r2, [pc, #392]	; (80072bc <HAL_DMA_Init+0x1c4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d03b      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a60      	ldr	r2, [pc, #384]	; (80072c0 <HAL_DMA_Init+0x1c8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d036      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a5f      	ldr	r2, [pc, #380]	; (80072c4 <HAL_DMA_Init+0x1cc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d031      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a5d      	ldr	r2, [pc, #372]	; (80072c8 <HAL_DMA_Init+0x1d0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d02c      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a5c      	ldr	r2, [pc, #368]	; (80072cc <HAL_DMA_Init+0x1d4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d027      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a5a      	ldr	r2, [pc, #360]	; (80072d0 <HAL_DMA_Init+0x1d8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d022      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a59      	ldr	r2, [pc, #356]	; (80072d4 <HAL_DMA_Init+0x1dc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d01d      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a57      	ldr	r2, [pc, #348]	; (80072d8 <HAL_DMA_Init+0x1e0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d018      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a56      	ldr	r2, [pc, #344]	; (80072dc <HAL_DMA_Init+0x1e4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d013      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a54      	ldr	r2, [pc, #336]	; (80072e0 <HAL_DMA_Init+0x1e8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00e      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a53      	ldr	r2, [pc, #332]	; (80072e4 <HAL_DMA_Init+0x1ec>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d009      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a51      	ldr	r2, [pc, #324]	; (80072e8 <HAL_DMA_Init+0x1f0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d004      	beq.n	80071b0 <HAL_DMA_Init+0xb8>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a50      	ldr	r2, [pc, #320]	; (80072ec <HAL_DMA_Init+0x1f4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d101      	bne.n	80071b4 <HAL_DMA_Init+0xbc>
 80071b0:	2301      	movs	r3, #1
 80071b2:	e000      	b.n	80071b6 <HAL_DMA_Init+0xbe>
 80071b4:	2300      	movs	r3, #0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 813b 	beq.w	8007432 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a37      	ldr	r2, [pc, #220]	; (80072b0 <HAL_DMA_Init+0x1b8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d04a      	beq.n	800726c <HAL_DMA_Init+0x174>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a36      	ldr	r2, [pc, #216]	; (80072b4 <HAL_DMA_Init+0x1bc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d045      	beq.n	800726c <HAL_DMA_Init+0x174>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a34      	ldr	r2, [pc, #208]	; (80072b8 <HAL_DMA_Init+0x1c0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d040      	beq.n	800726c <HAL_DMA_Init+0x174>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a33      	ldr	r2, [pc, #204]	; (80072bc <HAL_DMA_Init+0x1c4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d03b      	beq.n	800726c <HAL_DMA_Init+0x174>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a31      	ldr	r2, [pc, #196]	; (80072c0 <HAL_DMA_Init+0x1c8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d036      	beq.n	800726c <HAL_DMA_Init+0x174>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a30      	ldr	r2, [pc, #192]	; (80072c4 <HAL_DMA_Init+0x1cc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d031      	beq.n	800726c <HAL_DMA_Init+0x174>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a2e      	ldr	r2, [pc, #184]	; (80072c8 <HAL_DMA_Init+0x1d0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d02c      	beq.n	800726c <HAL_DMA_Init+0x174>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a2d      	ldr	r2, [pc, #180]	; (80072cc <HAL_DMA_Init+0x1d4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d027      	beq.n	800726c <HAL_DMA_Init+0x174>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a2b      	ldr	r2, [pc, #172]	; (80072d0 <HAL_DMA_Init+0x1d8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d022      	beq.n	800726c <HAL_DMA_Init+0x174>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a2a      	ldr	r2, [pc, #168]	; (80072d4 <HAL_DMA_Init+0x1dc>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d01d      	beq.n	800726c <HAL_DMA_Init+0x174>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a28      	ldr	r2, [pc, #160]	; (80072d8 <HAL_DMA_Init+0x1e0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d018      	beq.n	800726c <HAL_DMA_Init+0x174>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a27      	ldr	r2, [pc, #156]	; (80072dc <HAL_DMA_Init+0x1e4>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d013      	beq.n	800726c <HAL_DMA_Init+0x174>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a25      	ldr	r2, [pc, #148]	; (80072e0 <HAL_DMA_Init+0x1e8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00e      	beq.n	800726c <HAL_DMA_Init+0x174>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a24      	ldr	r2, [pc, #144]	; (80072e4 <HAL_DMA_Init+0x1ec>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d009      	beq.n	800726c <HAL_DMA_Init+0x174>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a22      	ldr	r2, [pc, #136]	; (80072e8 <HAL_DMA_Init+0x1f0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d004      	beq.n	800726c <HAL_DMA_Init+0x174>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a21      	ldr	r2, [pc, #132]	; (80072ec <HAL_DMA_Init+0x1f4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d108      	bne.n	800727e <HAL_DMA_Init+0x186>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0201 	bic.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e007      	b.n	800728e <HAL_DMA_Init+0x196>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0201 	bic.w	r2, r2, #1
 800728c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800728e:	e02f      	b.n	80072f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007290:	f7fd fd92 	bl	8004db8 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b05      	cmp	r3, #5
 800729c:	d928      	bls.n	80072f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2220      	movs	r2, #32
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2203      	movs	r2, #3
 80072a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e246      	b.n	800773e <HAL_DMA_Init+0x646>
 80072b0:	40020010 	.word	0x40020010
 80072b4:	40020028 	.word	0x40020028
 80072b8:	40020040 	.word	0x40020040
 80072bc:	40020058 	.word	0x40020058
 80072c0:	40020070 	.word	0x40020070
 80072c4:	40020088 	.word	0x40020088
 80072c8:	400200a0 	.word	0x400200a0
 80072cc:	400200b8 	.word	0x400200b8
 80072d0:	40020410 	.word	0x40020410
 80072d4:	40020428 	.word	0x40020428
 80072d8:	40020440 	.word	0x40020440
 80072dc:	40020458 	.word	0x40020458
 80072e0:	40020470 	.word	0x40020470
 80072e4:	40020488 	.word	0x40020488
 80072e8:	400204a0 	.word	0x400204a0
 80072ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1c8      	bne.n	8007290 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4b83      	ldr	r3, [pc, #524]	; (8007518 <HAL_DMA_Init+0x420>)
 800730a:	4013      	ands	r3, r2
 800730c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007316:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007322:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800732e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	2b04      	cmp	r3, #4
 8007342:	d107      	bne.n	8007354 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	4313      	orrs	r3, r2
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007354:	4b71      	ldr	r3, [pc, #452]	; (800751c <HAL_DMA_Init+0x424>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	4b71      	ldr	r3, [pc, #452]	; (8007520 <HAL_DMA_Init+0x428>)
 800735a:	4013      	ands	r3, r2
 800735c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007360:	d328      	bcc.n	80073b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2b28      	cmp	r3, #40	; 0x28
 8007368:	d903      	bls.n	8007372 <HAL_DMA_Init+0x27a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b2e      	cmp	r3, #46	; 0x2e
 8007370:	d917      	bls.n	80073a2 <HAL_DMA_Init+0x2aa>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b3e      	cmp	r3, #62	; 0x3e
 8007378:	d903      	bls.n	8007382 <HAL_DMA_Init+0x28a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b42      	cmp	r3, #66	; 0x42
 8007380:	d90f      	bls.n	80073a2 <HAL_DMA_Init+0x2aa>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b46      	cmp	r3, #70	; 0x46
 8007388:	d903      	bls.n	8007392 <HAL_DMA_Init+0x29a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2b48      	cmp	r3, #72	; 0x48
 8007390:	d907      	bls.n	80073a2 <HAL_DMA_Init+0x2aa>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2b4e      	cmp	r3, #78	; 0x4e
 8007398:	d905      	bls.n	80073a6 <HAL_DMA_Init+0x2ae>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2b52      	cmp	r3, #82	; 0x52
 80073a0:	d801      	bhi.n	80073a6 <HAL_DMA_Init+0x2ae>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e000      	b.n	80073a8 <HAL_DMA_Init+0x2b0>
 80073a6:	2300      	movs	r3, #0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d117      	bne.n	800740e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00e      	beq.n	800740e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f002 fb4d 	bl	8009a90 <DMA_CheckFifoParam>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d008      	beq.n	800740e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2240      	movs	r2, #64	; 0x40
 8007400:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e197      	b.n	800773e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f002 fa88 	bl	800992c <DMA_CalcBaseAndBitshift>
 800741c:	4603      	mov	r3, r0
 800741e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	223f      	movs	r2, #63	; 0x3f
 800742a:	409a      	lsls	r2, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	609a      	str	r2, [r3, #8]
 8007430:	e0cd      	b.n	80075ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a3b      	ldr	r2, [pc, #236]	; (8007524 <HAL_DMA_Init+0x42c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d022      	beq.n	8007482 <HAL_DMA_Init+0x38a>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a39      	ldr	r2, [pc, #228]	; (8007528 <HAL_DMA_Init+0x430>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d01d      	beq.n	8007482 <HAL_DMA_Init+0x38a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a38      	ldr	r2, [pc, #224]	; (800752c <HAL_DMA_Init+0x434>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d018      	beq.n	8007482 <HAL_DMA_Init+0x38a>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a36      	ldr	r2, [pc, #216]	; (8007530 <HAL_DMA_Init+0x438>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d013      	beq.n	8007482 <HAL_DMA_Init+0x38a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a35      	ldr	r2, [pc, #212]	; (8007534 <HAL_DMA_Init+0x43c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00e      	beq.n	8007482 <HAL_DMA_Init+0x38a>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a33      	ldr	r2, [pc, #204]	; (8007538 <HAL_DMA_Init+0x440>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d009      	beq.n	8007482 <HAL_DMA_Init+0x38a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a32      	ldr	r2, [pc, #200]	; (800753c <HAL_DMA_Init+0x444>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d004      	beq.n	8007482 <HAL_DMA_Init+0x38a>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a30      	ldr	r2, [pc, #192]	; (8007540 <HAL_DMA_Init+0x448>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d101      	bne.n	8007486 <HAL_DMA_Init+0x38e>
 8007482:	2301      	movs	r3, #1
 8007484:	e000      	b.n	8007488 <HAL_DMA_Init+0x390>
 8007486:	2300      	movs	r3, #0
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 8097 	beq.w	80075bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a24      	ldr	r2, [pc, #144]	; (8007524 <HAL_DMA_Init+0x42c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d021      	beq.n	80074dc <HAL_DMA_Init+0x3e4>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a22      	ldr	r2, [pc, #136]	; (8007528 <HAL_DMA_Init+0x430>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01c      	beq.n	80074dc <HAL_DMA_Init+0x3e4>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a21      	ldr	r2, [pc, #132]	; (800752c <HAL_DMA_Init+0x434>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d017      	beq.n	80074dc <HAL_DMA_Init+0x3e4>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a1f      	ldr	r2, [pc, #124]	; (8007530 <HAL_DMA_Init+0x438>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d012      	beq.n	80074dc <HAL_DMA_Init+0x3e4>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1e      	ldr	r2, [pc, #120]	; (8007534 <HAL_DMA_Init+0x43c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00d      	beq.n	80074dc <HAL_DMA_Init+0x3e4>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1c      	ldr	r2, [pc, #112]	; (8007538 <HAL_DMA_Init+0x440>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d008      	beq.n	80074dc <HAL_DMA_Init+0x3e4>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1b      	ldr	r2, [pc, #108]	; (800753c <HAL_DMA_Init+0x444>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <HAL_DMA_Init+0x3e4>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a19      	ldr	r2, [pc, #100]	; (8007540 <HAL_DMA_Init+0x448>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2202      	movs	r2, #2
 80074e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4b12      	ldr	r3, [pc, #72]	; (8007544 <HAL_DMA_Init+0x44c>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	d020      	beq.n	8007548 <HAL_DMA_Init+0x450>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	2b80      	cmp	r3, #128	; 0x80
 800750c:	d102      	bne.n	8007514 <HAL_DMA_Init+0x41c>
 800750e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007512:	e01a      	b.n	800754a <HAL_DMA_Init+0x452>
 8007514:	2300      	movs	r3, #0
 8007516:	e018      	b.n	800754a <HAL_DMA_Init+0x452>
 8007518:	fe10803f 	.word	0xfe10803f
 800751c:	5c001000 	.word	0x5c001000
 8007520:	ffff0000 	.word	0xffff0000
 8007524:	58025408 	.word	0x58025408
 8007528:	5802541c 	.word	0x5802541c
 800752c:	58025430 	.word	0x58025430
 8007530:	58025444 	.word	0x58025444
 8007534:	58025458 	.word	0x58025458
 8007538:	5802546c 	.word	0x5802546c
 800753c:	58025480 	.word	0x58025480
 8007540:	58025494 	.word	0x58025494
 8007544:	fffe000f 	.word	0xfffe000f
 8007548:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	68d2      	ldr	r2, [r2, #12]
 800754e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007558:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007560:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007568:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007570:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007578:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	4313      	orrs	r3, r2
 800757e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	461a      	mov	r2, r3
 800758e:	4b6e      	ldr	r3, [pc, #440]	; (8007748 <HAL_DMA_Init+0x650>)
 8007590:	4413      	add	r3, r2
 8007592:	4a6e      	ldr	r2, [pc, #440]	; (800774c <HAL_DMA_Init+0x654>)
 8007594:	fba2 2303 	umull	r2, r3, r2, r3
 8007598:	091b      	lsrs	r3, r3, #4
 800759a:	009a      	lsls	r2, r3, #2
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f002 f9c3 	bl	800992c <DMA_CalcBaseAndBitshift>
 80075a6:	4603      	mov	r3, r0
 80075a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	2201      	movs	r2, #1
 80075b4:	409a      	lsls	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	605a      	str	r2, [r3, #4]
 80075ba:	e008      	b.n	80075ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2240      	movs	r2, #64	; 0x40
 80075c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2203      	movs	r2, #3
 80075c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e0b7      	b.n	800773e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a5f      	ldr	r2, [pc, #380]	; (8007750 <HAL_DMA_Init+0x658>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d072      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a5d      	ldr	r2, [pc, #372]	; (8007754 <HAL_DMA_Init+0x65c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d06d      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a5c      	ldr	r2, [pc, #368]	; (8007758 <HAL_DMA_Init+0x660>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d068      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a5a      	ldr	r2, [pc, #360]	; (800775c <HAL_DMA_Init+0x664>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d063      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a59      	ldr	r2, [pc, #356]	; (8007760 <HAL_DMA_Init+0x668>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d05e      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a57      	ldr	r2, [pc, #348]	; (8007764 <HAL_DMA_Init+0x66c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d059      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a56      	ldr	r2, [pc, #344]	; (8007768 <HAL_DMA_Init+0x670>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d054      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a54      	ldr	r2, [pc, #336]	; (800776c <HAL_DMA_Init+0x674>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d04f      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a53      	ldr	r2, [pc, #332]	; (8007770 <HAL_DMA_Init+0x678>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d04a      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a51      	ldr	r2, [pc, #324]	; (8007774 <HAL_DMA_Init+0x67c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d045      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a50      	ldr	r2, [pc, #320]	; (8007778 <HAL_DMA_Init+0x680>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d040      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a4e      	ldr	r2, [pc, #312]	; (800777c <HAL_DMA_Init+0x684>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d03b      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a4d      	ldr	r2, [pc, #308]	; (8007780 <HAL_DMA_Init+0x688>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d036      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a4b      	ldr	r2, [pc, #300]	; (8007784 <HAL_DMA_Init+0x68c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d031      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a4a      	ldr	r2, [pc, #296]	; (8007788 <HAL_DMA_Init+0x690>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d02c      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a48      	ldr	r2, [pc, #288]	; (800778c <HAL_DMA_Init+0x694>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d027      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a47      	ldr	r2, [pc, #284]	; (8007790 <HAL_DMA_Init+0x698>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d022      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a45      	ldr	r2, [pc, #276]	; (8007794 <HAL_DMA_Init+0x69c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d01d      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a44      	ldr	r2, [pc, #272]	; (8007798 <HAL_DMA_Init+0x6a0>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d018      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a42      	ldr	r2, [pc, #264]	; (800779c <HAL_DMA_Init+0x6a4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d013      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a41      	ldr	r2, [pc, #260]	; (80077a0 <HAL_DMA_Init+0x6a8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00e      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a3f      	ldr	r2, [pc, #252]	; (80077a4 <HAL_DMA_Init+0x6ac>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d009      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a3e      	ldr	r2, [pc, #248]	; (80077a8 <HAL_DMA_Init+0x6b0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_DMA_Init+0x5c6>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a3c      	ldr	r2, [pc, #240]	; (80077ac <HAL_DMA_Init+0x6b4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d101      	bne.n	80076c2 <HAL_DMA_Init+0x5ca>
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <HAL_DMA_Init+0x5cc>
 80076c2:	2300      	movs	r3, #0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d032      	beq.n	800772e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f002 fa5d 	bl	8009b88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	d102      	bne.n	80076dc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e4:	b2d2      	uxtb	r2, r2
 80076e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d010      	beq.n	800771c <HAL_DMA_Init+0x624>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	2b08      	cmp	r3, #8
 8007700:	d80c      	bhi.n	800771c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f002 fada 	bl	8009cbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007718:	605a      	str	r2, [r3, #4]
 800771a:	e008      	b.n	800772e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	a7fdabf8 	.word	0xa7fdabf8
 800774c:	cccccccd 	.word	0xcccccccd
 8007750:	40020010 	.word	0x40020010
 8007754:	40020028 	.word	0x40020028
 8007758:	40020040 	.word	0x40020040
 800775c:	40020058 	.word	0x40020058
 8007760:	40020070 	.word	0x40020070
 8007764:	40020088 	.word	0x40020088
 8007768:	400200a0 	.word	0x400200a0
 800776c:	400200b8 	.word	0x400200b8
 8007770:	40020410 	.word	0x40020410
 8007774:	40020428 	.word	0x40020428
 8007778:	40020440 	.word	0x40020440
 800777c:	40020458 	.word	0x40020458
 8007780:	40020470 	.word	0x40020470
 8007784:	40020488 	.word	0x40020488
 8007788:	400204a0 	.word	0x400204a0
 800778c:	400204b8 	.word	0x400204b8
 8007790:	58025408 	.word	0x58025408
 8007794:	5802541c 	.word	0x5802541c
 8007798:	58025430 	.word	0x58025430
 800779c:	58025444 	.word	0x58025444
 80077a0:	58025458 	.word	0x58025458
 80077a4:	5802546c 	.word	0x5802546c
 80077a8:	58025480 	.word	0x58025480
 80077ac:	58025494 	.word	0x58025494

080077b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e226      	b.n	8007c1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HAL_DMA_Start_IT+0x2a>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e21f      	b.n	8007c1a <HAL_DMA_Start_IT+0x46a>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	f040 820a 	bne.w	8007c04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a68      	ldr	r2, [pc, #416]	; (80079a4 <HAL_DMA_Start_IT+0x1f4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d04a      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a66      	ldr	r2, [pc, #408]	; (80079a8 <HAL_DMA_Start_IT+0x1f8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d045      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a65      	ldr	r2, [pc, #404]	; (80079ac <HAL_DMA_Start_IT+0x1fc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d040      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a63      	ldr	r2, [pc, #396]	; (80079b0 <HAL_DMA_Start_IT+0x200>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d03b      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a62      	ldr	r2, [pc, #392]	; (80079b4 <HAL_DMA_Start_IT+0x204>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d036      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a60      	ldr	r2, [pc, #384]	; (80079b8 <HAL_DMA_Start_IT+0x208>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d031      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a5f      	ldr	r2, [pc, #380]	; (80079bc <HAL_DMA_Start_IT+0x20c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d02c      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a5d      	ldr	r2, [pc, #372]	; (80079c0 <HAL_DMA_Start_IT+0x210>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d027      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a5c      	ldr	r2, [pc, #368]	; (80079c4 <HAL_DMA_Start_IT+0x214>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d022      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a5a      	ldr	r2, [pc, #360]	; (80079c8 <HAL_DMA_Start_IT+0x218>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d01d      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a59      	ldr	r2, [pc, #356]	; (80079cc <HAL_DMA_Start_IT+0x21c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d018      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a57      	ldr	r2, [pc, #348]	; (80079d0 <HAL_DMA_Start_IT+0x220>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d013      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a56      	ldr	r2, [pc, #344]	; (80079d4 <HAL_DMA_Start_IT+0x224>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00e      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a54      	ldr	r2, [pc, #336]	; (80079d8 <HAL_DMA_Start_IT+0x228>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d009      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a53      	ldr	r2, [pc, #332]	; (80079dc <HAL_DMA_Start_IT+0x22c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d004      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a51      	ldr	r2, [pc, #324]	; (80079e0 <HAL_DMA_Start_IT+0x230>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d108      	bne.n	80078b0 <HAL_DMA_Start_IT+0x100>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0201 	bic.w	r2, r2, #1
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	e007      	b.n	80078c0 <HAL_DMA_Start_IT+0x110>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0201 	bic.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	68b9      	ldr	r1, [r7, #8]
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f001 fe84 	bl	80095d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a34      	ldr	r2, [pc, #208]	; (80079a4 <HAL_DMA_Start_IT+0x1f4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d04a      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a33      	ldr	r2, [pc, #204]	; (80079a8 <HAL_DMA_Start_IT+0x1f8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d045      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a31      	ldr	r2, [pc, #196]	; (80079ac <HAL_DMA_Start_IT+0x1fc>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d040      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a30      	ldr	r2, [pc, #192]	; (80079b0 <HAL_DMA_Start_IT+0x200>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d03b      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a2e      	ldr	r2, [pc, #184]	; (80079b4 <HAL_DMA_Start_IT+0x204>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d036      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a2d      	ldr	r2, [pc, #180]	; (80079b8 <HAL_DMA_Start_IT+0x208>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d031      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a2b      	ldr	r2, [pc, #172]	; (80079bc <HAL_DMA_Start_IT+0x20c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d02c      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a2a      	ldr	r2, [pc, #168]	; (80079c0 <HAL_DMA_Start_IT+0x210>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d027      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a28      	ldr	r2, [pc, #160]	; (80079c4 <HAL_DMA_Start_IT+0x214>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d022      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a27      	ldr	r2, [pc, #156]	; (80079c8 <HAL_DMA_Start_IT+0x218>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d01d      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a25      	ldr	r2, [pc, #148]	; (80079cc <HAL_DMA_Start_IT+0x21c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d018      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a24      	ldr	r2, [pc, #144]	; (80079d0 <HAL_DMA_Start_IT+0x220>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d013      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a22      	ldr	r2, [pc, #136]	; (80079d4 <HAL_DMA_Start_IT+0x224>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00e      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a21      	ldr	r2, [pc, #132]	; (80079d8 <HAL_DMA_Start_IT+0x228>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d009      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1f      	ldr	r2, [pc, #124]	; (80079dc <HAL_DMA_Start_IT+0x22c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <HAL_DMA_Start_IT+0x230>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d101      	bne.n	8007970 <HAL_DMA_Start_IT+0x1c0>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <HAL_DMA_Start_IT+0x1c2>
 8007970:	2300      	movs	r3, #0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d036      	beq.n	80079e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f023 021e 	bic.w	r2, r3, #30
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f042 0216 	orr.w	r2, r2, #22
 8007988:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d03e      	beq.n	8007a10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0208 	orr.w	r2, r2, #8
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	e035      	b.n	8007a10 <HAL_DMA_Start_IT+0x260>
 80079a4:	40020010 	.word	0x40020010
 80079a8:	40020028 	.word	0x40020028
 80079ac:	40020040 	.word	0x40020040
 80079b0:	40020058 	.word	0x40020058
 80079b4:	40020070 	.word	0x40020070
 80079b8:	40020088 	.word	0x40020088
 80079bc:	400200a0 	.word	0x400200a0
 80079c0:	400200b8 	.word	0x400200b8
 80079c4:	40020410 	.word	0x40020410
 80079c8:	40020428 	.word	0x40020428
 80079cc:	40020440 	.word	0x40020440
 80079d0:	40020458 	.word	0x40020458
 80079d4:	40020470 	.word	0x40020470
 80079d8:	40020488 	.word	0x40020488
 80079dc:	400204a0 	.word	0x400204a0
 80079e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f023 020e 	bic.w	r2, r3, #14
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 020a 	orr.w	r2, r2, #10
 80079f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d007      	beq.n	8007a10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0204 	orr.w	r2, r2, #4
 8007a0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a83      	ldr	r2, [pc, #524]	; (8007c24 <HAL_DMA_Start_IT+0x474>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d072      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a82      	ldr	r2, [pc, #520]	; (8007c28 <HAL_DMA_Start_IT+0x478>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d06d      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a80      	ldr	r2, [pc, #512]	; (8007c2c <HAL_DMA_Start_IT+0x47c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d068      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a7f      	ldr	r2, [pc, #508]	; (8007c30 <HAL_DMA_Start_IT+0x480>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d063      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a7d      	ldr	r2, [pc, #500]	; (8007c34 <HAL_DMA_Start_IT+0x484>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d05e      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a7c      	ldr	r2, [pc, #496]	; (8007c38 <HAL_DMA_Start_IT+0x488>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d059      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a7a      	ldr	r2, [pc, #488]	; (8007c3c <HAL_DMA_Start_IT+0x48c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d054      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a79      	ldr	r2, [pc, #484]	; (8007c40 <HAL_DMA_Start_IT+0x490>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d04f      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a77      	ldr	r2, [pc, #476]	; (8007c44 <HAL_DMA_Start_IT+0x494>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d04a      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a76      	ldr	r2, [pc, #472]	; (8007c48 <HAL_DMA_Start_IT+0x498>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d045      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a74      	ldr	r2, [pc, #464]	; (8007c4c <HAL_DMA_Start_IT+0x49c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d040      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a73      	ldr	r2, [pc, #460]	; (8007c50 <HAL_DMA_Start_IT+0x4a0>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d03b      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a71      	ldr	r2, [pc, #452]	; (8007c54 <HAL_DMA_Start_IT+0x4a4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d036      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a70      	ldr	r2, [pc, #448]	; (8007c58 <HAL_DMA_Start_IT+0x4a8>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d031      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a6e      	ldr	r2, [pc, #440]	; (8007c5c <HAL_DMA_Start_IT+0x4ac>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d02c      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a6d      	ldr	r2, [pc, #436]	; (8007c60 <HAL_DMA_Start_IT+0x4b0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d027      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a6b      	ldr	r2, [pc, #428]	; (8007c64 <HAL_DMA_Start_IT+0x4b4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d022      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a6a      	ldr	r2, [pc, #424]	; (8007c68 <HAL_DMA_Start_IT+0x4b8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d01d      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a68      	ldr	r2, [pc, #416]	; (8007c6c <HAL_DMA_Start_IT+0x4bc>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d018      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a67      	ldr	r2, [pc, #412]	; (8007c70 <HAL_DMA_Start_IT+0x4c0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d013      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a65      	ldr	r2, [pc, #404]	; (8007c74 <HAL_DMA_Start_IT+0x4c4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00e      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a64      	ldr	r2, [pc, #400]	; (8007c78 <HAL_DMA_Start_IT+0x4c8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d009      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a62      	ldr	r2, [pc, #392]	; (8007c7c <HAL_DMA_Start_IT+0x4cc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d004      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a61      	ldr	r2, [pc, #388]	; (8007c80 <HAL_DMA_Start_IT+0x4d0>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d101      	bne.n	8007b04 <HAL_DMA_Start_IT+0x354>
 8007b00:	2301      	movs	r3, #1
 8007b02:	e000      	b.n	8007b06 <HAL_DMA_Start_IT+0x356>
 8007b04:	2300      	movs	r3, #0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d01a      	beq.n	8007b40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d007      	beq.n	8007b28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d007      	beq.n	8007b40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a37      	ldr	r2, [pc, #220]	; (8007c24 <HAL_DMA_Start_IT+0x474>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d04a      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a36      	ldr	r2, [pc, #216]	; (8007c28 <HAL_DMA_Start_IT+0x478>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d045      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a34      	ldr	r2, [pc, #208]	; (8007c2c <HAL_DMA_Start_IT+0x47c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d040      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a33      	ldr	r2, [pc, #204]	; (8007c30 <HAL_DMA_Start_IT+0x480>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d03b      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a31      	ldr	r2, [pc, #196]	; (8007c34 <HAL_DMA_Start_IT+0x484>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d036      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a30      	ldr	r2, [pc, #192]	; (8007c38 <HAL_DMA_Start_IT+0x488>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d031      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a2e      	ldr	r2, [pc, #184]	; (8007c3c <HAL_DMA_Start_IT+0x48c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d02c      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a2d      	ldr	r2, [pc, #180]	; (8007c40 <HAL_DMA_Start_IT+0x490>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d027      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a2b      	ldr	r2, [pc, #172]	; (8007c44 <HAL_DMA_Start_IT+0x494>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d022      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a2a      	ldr	r2, [pc, #168]	; (8007c48 <HAL_DMA_Start_IT+0x498>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d01d      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a28      	ldr	r2, [pc, #160]	; (8007c4c <HAL_DMA_Start_IT+0x49c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d018      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a27      	ldr	r2, [pc, #156]	; (8007c50 <HAL_DMA_Start_IT+0x4a0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d013      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a25      	ldr	r2, [pc, #148]	; (8007c54 <HAL_DMA_Start_IT+0x4a4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00e      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a24      	ldr	r2, [pc, #144]	; (8007c58 <HAL_DMA_Start_IT+0x4a8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d009      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a22      	ldr	r2, [pc, #136]	; (8007c5c <HAL_DMA_Start_IT+0x4ac>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d004      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a21      	ldr	r2, [pc, #132]	; (8007c60 <HAL_DMA_Start_IT+0x4b0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d108      	bne.n	8007bf2 <HAL_DMA_Start_IT+0x442>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0201 	orr.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	e012      	b.n	8007c18 <HAL_DMA_Start_IT+0x468>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0201 	orr.w	r2, r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	e009      	b.n	8007c18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40020010 	.word	0x40020010
 8007c28:	40020028 	.word	0x40020028
 8007c2c:	40020040 	.word	0x40020040
 8007c30:	40020058 	.word	0x40020058
 8007c34:	40020070 	.word	0x40020070
 8007c38:	40020088 	.word	0x40020088
 8007c3c:	400200a0 	.word	0x400200a0
 8007c40:	400200b8 	.word	0x400200b8
 8007c44:	40020410 	.word	0x40020410
 8007c48:	40020428 	.word	0x40020428
 8007c4c:	40020440 	.word	0x40020440
 8007c50:	40020458 	.word	0x40020458
 8007c54:	40020470 	.word	0x40020470
 8007c58:	40020488 	.word	0x40020488
 8007c5c:	400204a0 	.word	0x400204a0
 8007c60:	400204b8 	.word	0x400204b8
 8007c64:	58025408 	.word	0x58025408
 8007c68:	5802541c 	.word	0x5802541c
 8007c6c:	58025430 	.word	0x58025430
 8007c70:	58025444 	.word	0x58025444
 8007c74:	58025458 	.word	0x58025458
 8007c78:	5802546c 	.word	0x5802546c
 8007c7c:	58025480 	.word	0x58025480
 8007c80:	58025494 	.word	0x58025494

08007c84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007c8c:	f7fd f894 	bl	8004db8 <HAL_GetTick>
 8007c90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e2dc      	b.n	8008256 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d008      	beq.n	8007cba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2280      	movs	r2, #128	; 0x80
 8007cac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e2cd      	b.n	8008256 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a76      	ldr	r2, [pc, #472]	; (8007e98 <HAL_DMA_Abort+0x214>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d04a      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a74      	ldr	r2, [pc, #464]	; (8007e9c <HAL_DMA_Abort+0x218>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d045      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a73      	ldr	r2, [pc, #460]	; (8007ea0 <HAL_DMA_Abort+0x21c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d040      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a71      	ldr	r2, [pc, #452]	; (8007ea4 <HAL_DMA_Abort+0x220>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d03b      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a70      	ldr	r2, [pc, #448]	; (8007ea8 <HAL_DMA_Abort+0x224>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d036      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a6e      	ldr	r2, [pc, #440]	; (8007eac <HAL_DMA_Abort+0x228>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d031      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a6d      	ldr	r2, [pc, #436]	; (8007eb0 <HAL_DMA_Abort+0x22c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d02c      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a6b      	ldr	r2, [pc, #428]	; (8007eb4 <HAL_DMA_Abort+0x230>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d027      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a6a      	ldr	r2, [pc, #424]	; (8007eb8 <HAL_DMA_Abort+0x234>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d022      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a68      	ldr	r2, [pc, #416]	; (8007ebc <HAL_DMA_Abort+0x238>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d01d      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a67      	ldr	r2, [pc, #412]	; (8007ec0 <HAL_DMA_Abort+0x23c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d018      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a65      	ldr	r2, [pc, #404]	; (8007ec4 <HAL_DMA_Abort+0x240>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d013      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a64      	ldr	r2, [pc, #400]	; (8007ec8 <HAL_DMA_Abort+0x244>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00e      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a62      	ldr	r2, [pc, #392]	; (8007ecc <HAL_DMA_Abort+0x248>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d009      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a61      	ldr	r2, [pc, #388]	; (8007ed0 <HAL_DMA_Abort+0x24c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d004      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a5f      	ldr	r2, [pc, #380]	; (8007ed4 <HAL_DMA_Abort+0x250>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d101      	bne.n	8007d5e <HAL_DMA_Abort+0xda>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <HAL_DMA_Abort+0xdc>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d013      	beq.n	8007d8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 021e 	bic.w	r2, r2, #30
 8007d72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	695a      	ldr	r2, [r3, #20]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	e00a      	b.n	8007da2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 020e 	bic.w	r2, r2, #14
 8007d9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a3c      	ldr	r2, [pc, #240]	; (8007e98 <HAL_DMA_Abort+0x214>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d072      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a3a      	ldr	r2, [pc, #232]	; (8007e9c <HAL_DMA_Abort+0x218>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d06d      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a39      	ldr	r2, [pc, #228]	; (8007ea0 <HAL_DMA_Abort+0x21c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d068      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a37      	ldr	r2, [pc, #220]	; (8007ea4 <HAL_DMA_Abort+0x220>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d063      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a36      	ldr	r2, [pc, #216]	; (8007ea8 <HAL_DMA_Abort+0x224>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d05e      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a34      	ldr	r2, [pc, #208]	; (8007eac <HAL_DMA_Abort+0x228>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d059      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a33      	ldr	r2, [pc, #204]	; (8007eb0 <HAL_DMA_Abort+0x22c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d054      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a31      	ldr	r2, [pc, #196]	; (8007eb4 <HAL_DMA_Abort+0x230>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d04f      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a30      	ldr	r2, [pc, #192]	; (8007eb8 <HAL_DMA_Abort+0x234>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d04a      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a2e      	ldr	r2, [pc, #184]	; (8007ebc <HAL_DMA_Abort+0x238>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d045      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a2d      	ldr	r2, [pc, #180]	; (8007ec0 <HAL_DMA_Abort+0x23c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d040      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a2b      	ldr	r2, [pc, #172]	; (8007ec4 <HAL_DMA_Abort+0x240>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d03b      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a2a      	ldr	r2, [pc, #168]	; (8007ec8 <HAL_DMA_Abort+0x244>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d036      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a28      	ldr	r2, [pc, #160]	; (8007ecc <HAL_DMA_Abort+0x248>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d031      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a27      	ldr	r2, [pc, #156]	; (8007ed0 <HAL_DMA_Abort+0x24c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d02c      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a25      	ldr	r2, [pc, #148]	; (8007ed4 <HAL_DMA_Abort+0x250>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d027      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a24      	ldr	r2, [pc, #144]	; (8007ed8 <HAL_DMA_Abort+0x254>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d022      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a22      	ldr	r2, [pc, #136]	; (8007edc <HAL_DMA_Abort+0x258>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d01d      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a21      	ldr	r2, [pc, #132]	; (8007ee0 <HAL_DMA_Abort+0x25c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d018      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a1f      	ldr	r2, [pc, #124]	; (8007ee4 <HAL_DMA_Abort+0x260>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d013      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ee8 <HAL_DMA_Abort+0x264>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00e      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1c      	ldr	r2, [pc, #112]	; (8007eec <HAL_DMA_Abort+0x268>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d009      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a1b      	ldr	r2, [pc, #108]	; (8007ef0 <HAL_DMA_Abort+0x26c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d004      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a19      	ldr	r2, [pc, #100]	; (8007ef4 <HAL_DMA_Abort+0x270>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d132      	bne.n	8007ef8 <HAL_DMA_Abort+0x274>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e031      	b.n	8007efa <HAL_DMA_Abort+0x276>
 8007e96:	bf00      	nop
 8007e98:	40020010 	.word	0x40020010
 8007e9c:	40020028 	.word	0x40020028
 8007ea0:	40020040 	.word	0x40020040
 8007ea4:	40020058 	.word	0x40020058
 8007ea8:	40020070 	.word	0x40020070
 8007eac:	40020088 	.word	0x40020088
 8007eb0:	400200a0 	.word	0x400200a0
 8007eb4:	400200b8 	.word	0x400200b8
 8007eb8:	40020410 	.word	0x40020410
 8007ebc:	40020428 	.word	0x40020428
 8007ec0:	40020440 	.word	0x40020440
 8007ec4:	40020458 	.word	0x40020458
 8007ec8:	40020470 	.word	0x40020470
 8007ecc:	40020488 	.word	0x40020488
 8007ed0:	400204a0 	.word	0x400204a0
 8007ed4:	400204b8 	.word	0x400204b8
 8007ed8:	58025408 	.word	0x58025408
 8007edc:	5802541c 	.word	0x5802541c
 8007ee0:	58025430 	.word	0x58025430
 8007ee4:	58025444 	.word	0x58025444
 8007ee8:	58025458 	.word	0x58025458
 8007eec:	5802546c 	.word	0x5802546c
 8007ef0:	58025480 	.word	0x58025480
 8007ef4:	58025494 	.word	0x58025494
 8007ef8:	2300      	movs	r3, #0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d007      	beq.n	8007f0e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a6d      	ldr	r2, [pc, #436]	; (80080c8 <HAL_DMA_Abort+0x444>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d04a      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a6b      	ldr	r2, [pc, #428]	; (80080cc <HAL_DMA_Abort+0x448>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d045      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a6a      	ldr	r2, [pc, #424]	; (80080d0 <HAL_DMA_Abort+0x44c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d040      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a68      	ldr	r2, [pc, #416]	; (80080d4 <HAL_DMA_Abort+0x450>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d03b      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a67      	ldr	r2, [pc, #412]	; (80080d8 <HAL_DMA_Abort+0x454>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d036      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a65      	ldr	r2, [pc, #404]	; (80080dc <HAL_DMA_Abort+0x458>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d031      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a64      	ldr	r2, [pc, #400]	; (80080e0 <HAL_DMA_Abort+0x45c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d02c      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a62      	ldr	r2, [pc, #392]	; (80080e4 <HAL_DMA_Abort+0x460>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d027      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a61      	ldr	r2, [pc, #388]	; (80080e8 <HAL_DMA_Abort+0x464>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d022      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a5f      	ldr	r2, [pc, #380]	; (80080ec <HAL_DMA_Abort+0x468>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d01d      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a5e      	ldr	r2, [pc, #376]	; (80080f0 <HAL_DMA_Abort+0x46c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d018      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a5c      	ldr	r2, [pc, #368]	; (80080f4 <HAL_DMA_Abort+0x470>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d013      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a5b      	ldr	r2, [pc, #364]	; (80080f8 <HAL_DMA_Abort+0x474>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00e      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a59      	ldr	r2, [pc, #356]	; (80080fc <HAL_DMA_Abort+0x478>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d009      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a58      	ldr	r2, [pc, #352]	; (8008100 <HAL_DMA_Abort+0x47c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d004      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a56      	ldr	r2, [pc, #344]	; (8008104 <HAL_DMA_Abort+0x480>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d108      	bne.n	8007fc0 <HAL_DMA_Abort+0x33c>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	e007      	b.n	8007fd0 <HAL_DMA_Abort+0x34c>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0201 	bic.w	r2, r2, #1
 8007fce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007fd0:	e013      	b.n	8007ffa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007fd2:	f7fc fef1 	bl	8004db8 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b05      	cmp	r3, #5
 8007fde:	d90c      	bls.n	8007ffa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2203      	movs	r2, #3
 8007fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e12d      	b.n	8008256 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e5      	bne.n	8007fd2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a2f      	ldr	r2, [pc, #188]	; (80080c8 <HAL_DMA_Abort+0x444>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d04a      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a2d      	ldr	r2, [pc, #180]	; (80080cc <HAL_DMA_Abort+0x448>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d045      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a2c      	ldr	r2, [pc, #176]	; (80080d0 <HAL_DMA_Abort+0x44c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d040      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a2a      	ldr	r2, [pc, #168]	; (80080d4 <HAL_DMA_Abort+0x450>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d03b      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a29      	ldr	r2, [pc, #164]	; (80080d8 <HAL_DMA_Abort+0x454>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d036      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a27      	ldr	r2, [pc, #156]	; (80080dc <HAL_DMA_Abort+0x458>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d031      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a26      	ldr	r2, [pc, #152]	; (80080e0 <HAL_DMA_Abort+0x45c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d02c      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a24      	ldr	r2, [pc, #144]	; (80080e4 <HAL_DMA_Abort+0x460>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d027      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a23      	ldr	r2, [pc, #140]	; (80080e8 <HAL_DMA_Abort+0x464>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d022      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a21      	ldr	r2, [pc, #132]	; (80080ec <HAL_DMA_Abort+0x468>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01d      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a20      	ldr	r2, [pc, #128]	; (80080f0 <HAL_DMA_Abort+0x46c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d018      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1e      	ldr	r2, [pc, #120]	; (80080f4 <HAL_DMA_Abort+0x470>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d013      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a1d      	ldr	r2, [pc, #116]	; (80080f8 <HAL_DMA_Abort+0x474>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00e      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a1b      	ldr	r2, [pc, #108]	; (80080fc <HAL_DMA_Abort+0x478>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d009      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a1a      	ldr	r2, [pc, #104]	; (8008100 <HAL_DMA_Abort+0x47c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a18      	ldr	r2, [pc, #96]	; (8008104 <HAL_DMA_Abort+0x480>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d101      	bne.n	80080aa <HAL_DMA_Abort+0x426>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <HAL_DMA_Abort+0x428>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d02b      	beq.n	8008108 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	223f      	movs	r2, #63	; 0x3f
 80080c0:	409a      	lsls	r2, r3
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	609a      	str	r2, [r3, #8]
 80080c6:	e02a      	b.n	800811e <HAL_DMA_Abort+0x49a>
 80080c8:	40020010 	.word	0x40020010
 80080cc:	40020028 	.word	0x40020028
 80080d0:	40020040 	.word	0x40020040
 80080d4:	40020058 	.word	0x40020058
 80080d8:	40020070 	.word	0x40020070
 80080dc:	40020088 	.word	0x40020088
 80080e0:	400200a0 	.word	0x400200a0
 80080e4:	400200b8 	.word	0x400200b8
 80080e8:	40020410 	.word	0x40020410
 80080ec:	40020428 	.word	0x40020428
 80080f0:	40020440 	.word	0x40020440
 80080f4:	40020458 	.word	0x40020458
 80080f8:	40020470 	.word	0x40020470
 80080fc:	40020488 	.word	0x40020488
 8008100:	400204a0 	.word	0x400204a0
 8008104:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008112:	f003 031f 	and.w	r3, r3, #31
 8008116:	2201      	movs	r2, #1
 8008118:	409a      	lsls	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a4f      	ldr	r2, [pc, #316]	; (8008260 <HAL_DMA_Abort+0x5dc>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d072      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a4d      	ldr	r2, [pc, #308]	; (8008264 <HAL_DMA_Abort+0x5e0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d06d      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a4c      	ldr	r2, [pc, #304]	; (8008268 <HAL_DMA_Abort+0x5e4>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d068      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a4a      	ldr	r2, [pc, #296]	; (800826c <HAL_DMA_Abort+0x5e8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d063      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a49      	ldr	r2, [pc, #292]	; (8008270 <HAL_DMA_Abort+0x5ec>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d05e      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a47      	ldr	r2, [pc, #284]	; (8008274 <HAL_DMA_Abort+0x5f0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d059      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a46      	ldr	r2, [pc, #280]	; (8008278 <HAL_DMA_Abort+0x5f4>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d054      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a44      	ldr	r2, [pc, #272]	; (800827c <HAL_DMA_Abort+0x5f8>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d04f      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a43      	ldr	r2, [pc, #268]	; (8008280 <HAL_DMA_Abort+0x5fc>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d04a      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a41      	ldr	r2, [pc, #260]	; (8008284 <HAL_DMA_Abort+0x600>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d045      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a40      	ldr	r2, [pc, #256]	; (8008288 <HAL_DMA_Abort+0x604>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d040      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a3e      	ldr	r2, [pc, #248]	; (800828c <HAL_DMA_Abort+0x608>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d03b      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a3d      	ldr	r2, [pc, #244]	; (8008290 <HAL_DMA_Abort+0x60c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d036      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a3b      	ldr	r2, [pc, #236]	; (8008294 <HAL_DMA_Abort+0x610>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d031      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a3a      	ldr	r2, [pc, #232]	; (8008298 <HAL_DMA_Abort+0x614>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d02c      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a38      	ldr	r2, [pc, #224]	; (800829c <HAL_DMA_Abort+0x618>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d027      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a37      	ldr	r2, [pc, #220]	; (80082a0 <HAL_DMA_Abort+0x61c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d022      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a35      	ldr	r2, [pc, #212]	; (80082a4 <HAL_DMA_Abort+0x620>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d01d      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a34      	ldr	r2, [pc, #208]	; (80082a8 <HAL_DMA_Abort+0x624>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d018      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a32      	ldr	r2, [pc, #200]	; (80082ac <HAL_DMA_Abort+0x628>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a31      	ldr	r2, [pc, #196]	; (80082b0 <HAL_DMA_Abort+0x62c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00e      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a2f      	ldr	r2, [pc, #188]	; (80082b4 <HAL_DMA_Abort+0x630>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d009      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a2e      	ldr	r2, [pc, #184]	; (80082b8 <HAL_DMA_Abort+0x634>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d004      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a2c      	ldr	r2, [pc, #176]	; (80082bc <HAL_DMA_Abort+0x638>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d101      	bne.n	8008212 <HAL_DMA_Abort+0x58e>
 800820e:	2301      	movs	r3, #1
 8008210:	e000      	b.n	8008214 <HAL_DMA_Abort+0x590>
 8008212:	2300      	movs	r3, #0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d015      	beq.n	8008244 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008220:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00c      	beq.n	8008244 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008238:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008242:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40020010 	.word	0x40020010
 8008264:	40020028 	.word	0x40020028
 8008268:	40020040 	.word	0x40020040
 800826c:	40020058 	.word	0x40020058
 8008270:	40020070 	.word	0x40020070
 8008274:	40020088 	.word	0x40020088
 8008278:	400200a0 	.word	0x400200a0
 800827c:	400200b8 	.word	0x400200b8
 8008280:	40020410 	.word	0x40020410
 8008284:	40020428 	.word	0x40020428
 8008288:	40020440 	.word	0x40020440
 800828c:	40020458 	.word	0x40020458
 8008290:	40020470 	.word	0x40020470
 8008294:	40020488 	.word	0x40020488
 8008298:	400204a0 	.word	0x400204a0
 800829c:	400204b8 	.word	0x400204b8
 80082a0:	58025408 	.word	0x58025408
 80082a4:	5802541c 	.word	0x5802541c
 80082a8:	58025430 	.word	0x58025430
 80082ac:	58025444 	.word	0x58025444
 80082b0:	58025458 	.word	0x58025458
 80082b4:	5802546c 	.word	0x5802546c
 80082b8:	58025480 	.word	0x58025480
 80082bc:	58025494 	.word	0x58025494

080082c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e237      	b.n	8008742 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d004      	beq.n	80082e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2280      	movs	r2, #128	; 0x80
 80082e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e22c      	b.n	8008742 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a5c      	ldr	r2, [pc, #368]	; (8008460 <HAL_DMA_Abort_IT+0x1a0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d04a      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a5b      	ldr	r2, [pc, #364]	; (8008464 <HAL_DMA_Abort_IT+0x1a4>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d045      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a59      	ldr	r2, [pc, #356]	; (8008468 <HAL_DMA_Abort_IT+0x1a8>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d040      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a58      	ldr	r2, [pc, #352]	; (800846c <HAL_DMA_Abort_IT+0x1ac>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d03b      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a56      	ldr	r2, [pc, #344]	; (8008470 <HAL_DMA_Abort_IT+0x1b0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d036      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a55      	ldr	r2, [pc, #340]	; (8008474 <HAL_DMA_Abort_IT+0x1b4>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d031      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a53      	ldr	r2, [pc, #332]	; (8008478 <HAL_DMA_Abort_IT+0x1b8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d02c      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a52      	ldr	r2, [pc, #328]	; (800847c <HAL_DMA_Abort_IT+0x1bc>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d027      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a50      	ldr	r2, [pc, #320]	; (8008480 <HAL_DMA_Abort_IT+0x1c0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d022      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a4f      	ldr	r2, [pc, #316]	; (8008484 <HAL_DMA_Abort_IT+0x1c4>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d01d      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a4d      	ldr	r2, [pc, #308]	; (8008488 <HAL_DMA_Abort_IT+0x1c8>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d018      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a4c      	ldr	r2, [pc, #304]	; (800848c <HAL_DMA_Abort_IT+0x1cc>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d013      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a4a      	ldr	r2, [pc, #296]	; (8008490 <HAL_DMA_Abort_IT+0x1d0>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00e      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a49      	ldr	r2, [pc, #292]	; (8008494 <HAL_DMA_Abort_IT+0x1d4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d009      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a47      	ldr	r2, [pc, #284]	; (8008498 <HAL_DMA_Abort_IT+0x1d8>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d004      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a46      	ldr	r2, [pc, #280]	; (800849c <HAL_DMA_Abort_IT+0x1dc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d101      	bne.n	800838c <HAL_DMA_Abort_IT+0xcc>
 8008388:	2301      	movs	r3, #1
 800838a:	e000      	b.n	800838e <HAL_DMA_Abort_IT+0xce>
 800838c:	2300      	movs	r3, #0
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 8086 	beq.w	80084a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2204      	movs	r2, #4
 8008398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a2f      	ldr	r2, [pc, #188]	; (8008460 <HAL_DMA_Abort_IT+0x1a0>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d04a      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a2e      	ldr	r2, [pc, #184]	; (8008464 <HAL_DMA_Abort_IT+0x1a4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d045      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a2c      	ldr	r2, [pc, #176]	; (8008468 <HAL_DMA_Abort_IT+0x1a8>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d040      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a2b      	ldr	r2, [pc, #172]	; (800846c <HAL_DMA_Abort_IT+0x1ac>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d03b      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a29      	ldr	r2, [pc, #164]	; (8008470 <HAL_DMA_Abort_IT+0x1b0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d036      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a28      	ldr	r2, [pc, #160]	; (8008474 <HAL_DMA_Abort_IT+0x1b4>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d031      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a26      	ldr	r2, [pc, #152]	; (8008478 <HAL_DMA_Abort_IT+0x1b8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d02c      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a25      	ldr	r2, [pc, #148]	; (800847c <HAL_DMA_Abort_IT+0x1bc>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d027      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a23      	ldr	r2, [pc, #140]	; (8008480 <HAL_DMA_Abort_IT+0x1c0>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d022      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a22      	ldr	r2, [pc, #136]	; (8008484 <HAL_DMA_Abort_IT+0x1c4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d01d      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a20      	ldr	r2, [pc, #128]	; (8008488 <HAL_DMA_Abort_IT+0x1c8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d018      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a1f      	ldr	r2, [pc, #124]	; (800848c <HAL_DMA_Abort_IT+0x1cc>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d013      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1d      	ldr	r2, [pc, #116]	; (8008490 <HAL_DMA_Abort_IT+0x1d0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00e      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a1c      	ldr	r2, [pc, #112]	; (8008494 <HAL_DMA_Abort_IT+0x1d4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d009      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a1a      	ldr	r2, [pc, #104]	; (8008498 <HAL_DMA_Abort_IT+0x1d8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d004      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a19      	ldr	r2, [pc, #100]	; (800849c <HAL_DMA_Abort_IT+0x1dc>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d108      	bne.n	800844e <HAL_DMA_Abort_IT+0x18e>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0201 	bic.w	r2, r2, #1
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	e178      	b.n	8008740 <HAL_DMA_Abort_IT+0x480>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0201 	bic.w	r2, r2, #1
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	e16f      	b.n	8008740 <HAL_DMA_Abort_IT+0x480>
 8008460:	40020010 	.word	0x40020010
 8008464:	40020028 	.word	0x40020028
 8008468:	40020040 	.word	0x40020040
 800846c:	40020058 	.word	0x40020058
 8008470:	40020070 	.word	0x40020070
 8008474:	40020088 	.word	0x40020088
 8008478:	400200a0 	.word	0x400200a0
 800847c:	400200b8 	.word	0x400200b8
 8008480:	40020410 	.word	0x40020410
 8008484:	40020428 	.word	0x40020428
 8008488:	40020440 	.word	0x40020440
 800848c:	40020458 	.word	0x40020458
 8008490:	40020470 	.word	0x40020470
 8008494:	40020488 	.word	0x40020488
 8008498:	400204a0 	.word	0x400204a0
 800849c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 020e 	bic.w	r2, r2, #14
 80084ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a6c      	ldr	r2, [pc, #432]	; (8008668 <HAL_DMA_Abort_IT+0x3a8>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d04a      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a6b      	ldr	r2, [pc, #428]	; (800866c <HAL_DMA_Abort_IT+0x3ac>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d045      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a69      	ldr	r2, [pc, #420]	; (8008670 <HAL_DMA_Abort_IT+0x3b0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d040      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a68      	ldr	r2, [pc, #416]	; (8008674 <HAL_DMA_Abort_IT+0x3b4>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d03b      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a66      	ldr	r2, [pc, #408]	; (8008678 <HAL_DMA_Abort_IT+0x3b8>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d036      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a65      	ldr	r2, [pc, #404]	; (800867c <HAL_DMA_Abort_IT+0x3bc>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d031      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a63      	ldr	r2, [pc, #396]	; (8008680 <HAL_DMA_Abort_IT+0x3c0>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d02c      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a62      	ldr	r2, [pc, #392]	; (8008684 <HAL_DMA_Abort_IT+0x3c4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d027      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a60      	ldr	r2, [pc, #384]	; (8008688 <HAL_DMA_Abort_IT+0x3c8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d022      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a5f      	ldr	r2, [pc, #380]	; (800868c <HAL_DMA_Abort_IT+0x3cc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d01d      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a5d      	ldr	r2, [pc, #372]	; (8008690 <HAL_DMA_Abort_IT+0x3d0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d018      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a5c      	ldr	r2, [pc, #368]	; (8008694 <HAL_DMA_Abort_IT+0x3d4>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d013      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a5a      	ldr	r2, [pc, #360]	; (8008698 <HAL_DMA_Abort_IT+0x3d8>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d00e      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a59      	ldr	r2, [pc, #356]	; (800869c <HAL_DMA_Abort_IT+0x3dc>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d009      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a57      	ldr	r2, [pc, #348]	; (80086a0 <HAL_DMA_Abort_IT+0x3e0>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d004      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a56      	ldr	r2, [pc, #344]	; (80086a4 <HAL_DMA_Abort_IT+0x3e4>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d108      	bne.n	8008562 <HAL_DMA_Abort_IT+0x2a2>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0201 	bic.w	r2, r2, #1
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	e007      	b.n	8008572 <HAL_DMA_Abort_IT+0x2b2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0201 	bic.w	r2, r2, #1
 8008570:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a3c      	ldr	r2, [pc, #240]	; (8008668 <HAL_DMA_Abort_IT+0x3a8>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d072      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a3a      	ldr	r2, [pc, #232]	; (800866c <HAL_DMA_Abort_IT+0x3ac>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d06d      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a39      	ldr	r2, [pc, #228]	; (8008670 <HAL_DMA_Abort_IT+0x3b0>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d068      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a37      	ldr	r2, [pc, #220]	; (8008674 <HAL_DMA_Abort_IT+0x3b4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d063      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a36      	ldr	r2, [pc, #216]	; (8008678 <HAL_DMA_Abort_IT+0x3b8>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d05e      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a34      	ldr	r2, [pc, #208]	; (800867c <HAL_DMA_Abort_IT+0x3bc>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d059      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a33      	ldr	r2, [pc, #204]	; (8008680 <HAL_DMA_Abort_IT+0x3c0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d054      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a31      	ldr	r2, [pc, #196]	; (8008684 <HAL_DMA_Abort_IT+0x3c4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d04f      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a30      	ldr	r2, [pc, #192]	; (8008688 <HAL_DMA_Abort_IT+0x3c8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d04a      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a2e      	ldr	r2, [pc, #184]	; (800868c <HAL_DMA_Abort_IT+0x3cc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d045      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a2d      	ldr	r2, [pc, #180]	; (8008690 <HAL_DMA_Abort_IT+0x3d0>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d040      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a2b      	ldr	r2, [pc, #172]	; (8008694 <HAL_DMA_Abort_IT+0x3d4>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d03b      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a2a      	ldr	r2, [pc, #168]	; (8008698 <HAL_DMA_Abort_IT+0x3d8>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d036      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a28      	ldr	r2, [pc, #160]	; (800869c <HAL_DMA_Abort_IT+0x3dc>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d031      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a27      	ldr	r2, [pc, #156]	; (80086a0 <HAL_DMA_Abort_IT+0x3e0>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d02c      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a25      	ldr	r2, [pc, #148]	; (80086a4 <HAL_DMA_Abort_IT+0x3e4>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d027      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a24      	ldr	r2, [pc, #144]	; (80086a8 <HAL_DMA_Abort_IT+0x3e8>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d022      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a22      	ldr	r2, [pc, #136]	; (80086ac <HAL_DMA_Abort_IT+0x3ec>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d01d      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a21      	ldr	r2, [pc, #132]	; (80086b0 <HAL_DMA_Abort_IT+0x3f0>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d018      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1f      	ldr	r2, [pc, #124]	; (80086b4 <HAL_DMA_Abort_IT+0x3f4>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1e      	ldr	r2, [pc, #120]	; (80086b8 <HAL_DMA_Abort_IT+0x3f8>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00e      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a1c      	ldr	r2, [pc, #112]	; (80086bc <HAL_DMA_Abort_IT+0x3fc>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a1b      	ldr	r2, [pc, #108]	; (80086c0 <HAL_DMA_Abort_IT+0x400>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d004      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a19      	ldr	r2, [pc, #100]	; (80086c4 <HAL_DMA_Abort_IT+0x404>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d132      	bne.n	80086c8 <HAL_DMA_Abort_IT+0x408>
 8008662:	2301      	movs	r3, #1
 8008664:	e031      	b.n	80086ca <HAL_DMA_Abort_IT+0x40a>
 8008666:	bf00      	nop
 8008668:	40020010 	.word	0x40020010
 800866c:	40020028 	.word	0x40020028
 8008670:	40020040 	.word	0x40020040
 8008674:	40020058 	.word	0x40020058
 8008678:	40020070 	.word	0x40020070
 800867c:	40020088 	.word	0x40020088
 8008680:	400200a0 	.word	0x400200a0
 8008684:	400200b8 	.word	0x400200b8
 8008688:	40020410 	.word	0x40020410
 800868c:	40020428 	.word	0x40020428
 8008690:	40020440 	.word	0x40020440
 8008694:	40020458 	.word	0x40020458
 8008698:	40020470 	.word	0x40020470
 800869c:	40020488 	.word	0x40020488
 80086a0:	400204a0 	.word	0x400204a0
 80086a4:	400204b8 	.word	0x400204b8
 80086a8:	58025408 	.word	0x58025408
 80086ac:	5802541c 	.word	0x5802541c
 80086b0:	58025430 	.word	0x58025430
 80086b4:	58025444 	.word	0x58025444
 80086b8:	58025458 	.word	0x58025458
 80086bc:	5802546c 	.word	0x5802546c
 80086c0:	58025480 	.word	0x58025480
 80086c4:	58025494 	.word	0x58025494
 80086c8:	2300      	movs	r3, #0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d028      	beq.n	8008720 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e8:	f003 031f 	and.w	r3, r3, #31
 80086ec:	2201      	movs	r2, #1
 80086ee:	409a      	lsls	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80086fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00c      	beq.n	8008720 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008714:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800871e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop

0800874c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08a      	sub	sp, #40	; 0x28
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008758:	4b67      	ldr	r3, [pc, #412]	; (80088f8 <HAL_DMA_IRQHandler+0x1ac>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a67      	ldr	r2, [pc, #412]	; (80088fc <HAL_DMA_IRQHandler+0x1b0>)
 800875e:	fba2 2303 	umull	r2, r3, r2, r3
 8008762:	0a9b      	lsrs	r3, r3, #10
 8008764:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800876a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008770:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a5f      	ldr	r2, [pc, #380]	; (8008900 <HAL_DMA_IRQHandler+0x1b4>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d04a      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a5d      	ldr	r2, [pc, #372]	; (8008904 <HAL_DMA_IRQHandler+0x1b8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d045      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a5c      	ldr	r2, [pc, #368]	; (8008908 <HAL_DMA_IRQHandler+0x1bc>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d040      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a5a      	ldr	r2, [pc, #360]	; (800890c <HAL_DMA_IRQHandler+0x1c0>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d03b      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a59      	ldr	r2, [pc, #356]	; (8008910 <HAL_DMA_IRQHandler+0x1c4>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d036      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a57      	ldr	r2, [pc, #348]	; (8008914 <HAL_DMA_IRQHandler+0x1c8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d031      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a56      	ldr	r2, [pc, #344]	; (8008918 <HAL_DMA_IRQHandler+0x1cc>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d02c      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a54      	ldr	r2, [pc, #336]	; (800891c <HAL_DMA_IRQHandler+0x1d0>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d027      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a53      	ldr	r2, [pc, #332]	; (8008920 <HAL_DMA_IRQHandler+0x1d4>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d022      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a51      	ldr	r2, [pc, #324]	; (8008924 <HAL_DMA_IRQHandler+0x1d8>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d01d      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a50      	ldr	r2, [pc, #320]	; (8008928 <HAL_DMA_IRQHandler+0x1dc>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d018      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a4e      	ldr	r2, [pc, #312]	; (800892c <HAL_DMA_IRQHandler+0x1e0>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d013      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a4d      	ldr	r2, [pc, #308]	; (8008930 <HAL_DMA_IRQHandler+0x1e4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00e      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a4b      	ldr	r2, [pc, #300]	; (8008934 <HAL_DMA_IRQHandler+0x1e8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d009      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a4a      	ldr	r2, [pc, #296]	; (8008938 <HAL_DMA_IRQHandler+0x1ec>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d004      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a48      	ldr	r2, [pc, #288]	; (800893c <HAL_DMA_IRQHandler+0x1f0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d101      	bne.n	8008822 <HAL_DMA_IRQHandler+0xd6>
 800881e:	2301      	movs	r3, #1
 8008820:	e000      	b.n	8008824 <HAL_DMA_IRQHandler+0xd8>
 8008822:	2300      	movs	r3, #0
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 842b 	beq.w	8009080 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800882e:	f003 031f 	and.w	r3, r3, #31
 8008832:	2208      	movs	r2, #8
 8008834:	409a      	lsls	r2, r3
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	4013      	ands	r3, r2
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80a2 	beq.w	8008984 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a2e      	ldr	r2, [pc, #184]	; (8008900 <HAL_DMA_IRQHandler+0x1b4>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d04a      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a2d      	ldr	r2, [pc, #180]	; (8008904 <HAL_DMA_IRQHandler+0x1b8>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d045      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a2b      	ldr	r2, [pc, #172]	; (8008908 <HAL_DMA_IRQHandler+0x1bc>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d040      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a2a      	ldr	r2, [pc, #168]	; (800890c <HAL_DMA_IRQHandler+0x1c0>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d03b      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a28      	ldr	r2, [pc, #160]	; (8008910 <HAL_DMA_IRQHandler+0x1c4>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d036      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a27      	ldr	r2, [pc, #156]	; (8008914 <HAL_DMA_IRQHandler+0x1c8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d031      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a25      	ldr	r2, [pc, #148]	; (8008918 <HAL_DMA_IRQHandler+0x1cc>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d02c      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a24      	ldr	r2, [pc, #144]	; (800891c <HAL_DMA_IRQHandler+0x1d0>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d027      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a22      	ldr	r2, [pc, #136]	; (8008920 <HAL_DMA_IRQHandler+0x1d4>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d022      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a21      	ldr	r2, [pc, #132]	; (8008924 <HAL_DMA_IRQHandler+0x1d8>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d01d      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a1f      	ldr	r2, [pc, #124]	; (8008928 <HAL_DMA_IRQHandler+0x1dc>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d018      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a1e      	ldr	r2, [pc, #120]	; (800892c <HAL_DMA_IRQHandler+0x1e0>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d013      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a1c      	ldr	r2, [pc, #112]	; (8008930 <HAL_DMA_IRQHandler+0x1e4>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d00e      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a1b      	ldr	r2, [pc, #108]	; (8008934 <HAL_DMA_IRQHandler+0x1e8>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d009      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a19      	ldr	r2, [pc, #100]	; (8008938 <HAL_DMA_IRQHandler+0x1ec>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d004      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a18      	ldr	r2, [pc, #96]	; (800893c <HAL_DMA_IRQHandler+0x1f0>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d12f      	bne.n	8008940 <HAL_DMA_IRQHandler+0x1f4>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0304 	and.w	r3, r3, #4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bf14      	ite	ne
 80088ee:	2301      	movne	r3, #1
 80088f0:	2300      	moveq	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	e02e      	b.n	8008954 <HAL_DMA_IRQHandler+0x208>
 80088f6:	bf00      	nop
 80088f8:	240000bc 	.word	0x240000bc
 80088fc:	1b4e81b5 	.word	0x1b4e81b5
 8008900:	40020010 	.word	0x40020010
 8008904:	40020028 	.word	0x40020028
 8008908:	40020040 	.word	0x40020040
 800890c:	40020058 	.word	0x40020058
 8008910:	40020070 	.word	0x40020070
 8008914:	40020088 	.word	0x40020088
 8008918:	400200a0 	.word	0x400200a0
 800891c:	400200b8 	.word	0x400200b8
 8008920:	40020410 	.word	0x40020410
 8008924:	40020428 	.word	0x40020428
 8008928:	40020440 	.word	0x40020440
 800892c:	40020458 	.word	0x40020458
 8008930:	40020470 	.word	0x40020470
 8008934:	40020488 	.word	0x40020488
 8008938:	400204a0 	.word	0x400204a0
 800893c:	400204b8 	.word	0x400204b8
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0308 	and.w	r3, r3, #8
 800894a:	2b00      	cmp	r3, #0
 800894c:	bf14      	ite	ne
 800894e:	2301      	movne	r3, #1
 8008950:	2300      	moveq	r3, #0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d015      	beq.n	8008984 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0204 	bic.w	r2, r2, #4
 8008966:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800896c:	f003 031f 	and.w	r3, r3, #31
 8008970:	2208      	movs	r2, #8
 8008972:	409a      	lsls	r2, r3
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897c:	f043 0201 	orr.w	r2, r3, #1
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008988:	f003 031f 	and.w	r3, r3, #31
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	fa22 f303 	lsr.w	r3, r2, r3
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d06e      	beq.n	8008a78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a69      	ldr	r2, [pc, #420]	; (8008b44 <HAL_DMA_IRQHandler+0x3f8>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d04a      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a67      	ldr	r2, [pc, #412]	; (8008b48 <HAL_DMA_IRQHandler+0x3fc>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d045      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a66      	ldr	r2, [pc, #408]	; (8008b4c <HAL_DMA_IRQHandler+0x400>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d040      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a64      	ldr	r2, [pc, #400]	; (8008b50 <HAL_DMA_IRQHandler+0x404>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d03b      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a63      	ldr	r2, [pc, #396]	; (8008b54 <HAL_DMA_IRQHandler+0x408>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d036      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a61      	ldr	r2, [pc, #388]	; (8008b58 <HAL_DMA_IRQHandler+0x40c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d031      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a60      	ldr	r2, [pc, #384]	; (8008b5c <HAL_DMA_IRQHandler+0x410>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d02c      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a5e      	ldr	r2, [pc, #376]	; (8008b60 <HAL_DMA_IRQHandler+0x414>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d027      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a5d      	ldr	r2, [pc, #372]	; (8008b64 <HAL_DMA_IRQHandler+0x418>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d022      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a5b      	ldr	r2, [pc, #364]	; (8008b68 <HAL_DMA_IRQHandler+0x41c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d01d      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a5a      	ldr	r2, [pc, #360]	; (8008b6c <HAL_DMA_IRQHandler+0x420>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d018      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a58      	ldr	r2, [pc, #352]	; (8008b70 <HAL_DMA_IRQHandler+0x424>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d013      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a57      	ldr	r2, [pc, #348]	; (8008b74 <HAL_DMA_IRQHandler+0x428>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00e      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a55      	ldr	r2, [pc, #340]	; (8008b78 <HAL_DMA_IRQHandler+0x42c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d009      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a54      	ldr	r2, [pc, #336]	; (8008b7c <HAL_DMA_IRQHandler+0x430>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d004      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a52      	ldr	r2, [pc, #328]	; (8008b80 <HAL_DMA_IRQHandler+0x434>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d10a      	bne.n	8008a50 <HAL_DMA_IRQHandler+0x304>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bf14      	ite	ne
 8008a48:	2301      	movne	r3, #1
 8008a4a:	2300      	moveq	r3, #0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	e003      	b.n	8008a58 <HAL_DMA_IRQHandler+0x30c>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2300      	movs	r3, #0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00d      	beq.n	8008a78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2201      	movs	r2, #1
 8008a66:	409a      	lsls	r2, r3
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a70:	f043 0202 	orr.w	r2, r3, #2
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7c:	f003 031f 	and.w	r3, r3, #31
 8008a80:	2204      	movs	r2, #4
 8008a82:	409a      	lsls	r2, r3
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	4013      	ands	r3, r2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 808f 	beq.w	8008bac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a2c      	ldr	r2, [pc, #176]	; (8008b44 <HAL_DMA_IRQHandler+0x3f8>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d04a      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a2a      	ldr	r2, [pc, #168]	; (8008b48 <HAL_DMA_IRQHandler+0x3fc>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d045      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a29      	ldr	r2, [pc, #164]	; (8008b4c <HAL_DMA_IRQHandler+0x400>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d040      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a27      	ldr	r2, [pc, #156]	; (8008b50 <HAL_DMA_IRQHandler+0x404>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d03b      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a26      	ldr	r2, [pc, #152]	; (8008b54 <HAL_DMA_IRQHandler+0x408>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d036      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a24      	ldr	r2, [pc, #144]	; (8008b58 <HAL_DMA_IRQHandler+0x40c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d031      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a23      	ldr	r2, [pc, #140]	; (8008b5c <HAL_DMA_IRQHandler+0x410>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d02c      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a21      	ldr	r2, [pc, #132]	; (8008b60 <HAL_DMA_IRQHandler+0x414>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d027      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a20      	ldr	r2, [pc, #128]	; (8008b64 <HAL_DMA_IRQHandler+0x418>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d022      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a1e      	ldr	r2, [pc, #120]	; (8008b68 <HAL_DMA_IRQHandler+0x41c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d01d      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1d      	ldr	r2, [pc, #116]	; (8008b6c <HAL_DMA_IRQHandler+0x420>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d018      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a1b      	ldr	r2, [pc, #108]	; (8008b70 <HAL_DMA_IRQHandler+0x424>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d013      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a1a      	ldr	r2, [pc, #104]	; (8008b74 <HAL_DMA_IRQHandler+0x428>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00e      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a18      	ldr	r2, [pc, #96]	; (8008b78 <HAL_DMA_IRQHandler+0x42c>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d009      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a17      	ldr	r2, [pc, #92]	; (8008b7c <HAL_DMA_IRQHandler+0x430>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d004      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a15      	ldr	r2, [pc, #84]	; (8008b80 <HAL_DMA_IRQHandler+0x434>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d12a      	bne.n	8008b84 <HAL_DMA_IRQHandler+0x438>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bf14      	ite	ne
 8008b3c:	2301      	movne	r3, #1
 8008b3e:	2300      	moveq	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	e023      	b.n	8008b8c <HAL_DMA_IRQHandler+0x440>
 8008b44:	40020010 	.word	0x40020010
 8008b48:	40020028 	.word	0x40020028
 8008b4c:	40020040 	.word	0x40020040
 8008b50:	40020058 	.word	0x40020058
 8008b54:	40020070 	.word	0x40020070
 8008b58:	40020088 	.word	0x40020088
 8008b5c:	400200a0 	.word	0x400200a0
 8008b60:	400200b8 	.word	0x400200b8
 8008b64:	40020410 	.word	0x40020410
 8008b68:	40020428 	.word	0x40020428
 8008b6c:	40020440 	.word	0x40020440
 8008b70:	40020458 	.word	0x40020458
 8008b74:	40020470 	.word	0x40020470
 8008b78:	40020488 	.word	0x40020488
 8008b7c:	400204a0 	.word	0x400204a0
 8008b80:	400204b8 	.word	0x400204b8
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00d      	beq.n	8008bac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b94:	f003 031f 	and.w	r3, r3, #31
 8008b98:	2204      	movs	r2, #4
 8008b9a:	409a      	lsls	r2, r3
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba4:	f043 0204 	orr.w	r2, r3, #4
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb0:	f003 031f 	and.w	r3, r3, #31
 8008bb4:	2210      	movs	r2, #16
 8008bb6:	409a      	lsls	r2, r3
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80a6 	beq.w	8008d0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a85      	ldr	r2, [pc, #532]	; (8008ddc <HAL_DMA_IRQHandler+0x690>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d04a      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a83      	ldr	r2, [pc, #524]	; (8008de0 <HAL_DMA_IRQHandler+0x694>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d045      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a82      	ldr	r2, [pc, #520]	; (8008de4 <HAL_DMA_IRQHandler+0x698>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d040      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a80      	ldr	r2, [pc, #512]	; (8008de8 <HAL_DMA_IRQHandler+0x69c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d03b      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a7f      	ldr	r2, [pc, #508]	; (8008dec <HAL_DMA_IRQHandler+0x6a0>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d036      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a7d      	ldr	r2, [pc, #500]	; (8008df0 <HAL_DMA_IRQHandler+0x6a4>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d031      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a7c      	ldr	r2, [pc, #496]	; (8008df4 <HAL_DMA_IRQHandler+0x6a8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d02c      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a7a      	ldr	r2, [pc, #488]	; (8008df8 <HAL_DMA_IRQHandler+0x6ac>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d027      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a79      	ldr	r2, [pc, #484]	; (8008dfc <HAL_DMA_IRQHandler+0x6b0>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d022      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a77      	ldr	r2, [pc, #476]	; (8008e00 <HAL_DMA_IRQHandler+0x6b4>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d01d      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a76      	ldr	r2, [pc, #472]	; (8008e04 <HAL_DMA_IRQHandler+0x6b8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d018      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a74      	ldr	r2, [pc, #464]	; (8008e08 <HAL_DMA_IRQHandler+0x6bc>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d013      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a73      	ldr	r2, [pc, #460]	; (8008e0c <HAL_DMA_IRQHandler+0x6c0>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00e      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a71      	ldr	r2, [pc, #452]	; (8008e10 <HAL_DMA_IRQHandler+0x6c4>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d009      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a70      	ldr	r2, [pc, #448]	; (8008e14 <HAL_DMA_IRQHandler+0x6c8>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d004      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a6e      	ldr	r2, [pc, #440]	; (8008e18 <HAL_DMA_IRQHandler+0x6cc>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d10a      	bne.n	8008c78 <HAL_DMA_IRQHandler+0x52c>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0308 	and.w	r3, r3, #8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bf14      	ite	ne
 8008c70:	2301      	movne	r3, #1
 8008c72:	2300      	moveq	r3, #0
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	e009      	b.n	8008c8c <HAL_DMA_IRQHandler+0x540>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bf14      	ite	ne
 8008c86:	2301      	movne	r3, #1
 8008c88:	2300      	moveq	r3, #0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d03e      	beq.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c94:	f003 031f 	and.w	r3, r3, #31
 8008c98:	2210      	movs	r2, #16
 8008c9a:	409a      	lsls	r2, r3
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d018      	beq.n	8008ce0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d108      	bne.n	8008cce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d024      	beq.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	4798      	blx	r3
 8008ccc:	e01f      	b.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01b      	beq.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
 8008cde:	e016      	b.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d107      	bne.n	8008cfe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f022 0208 	bic.w	r2, r2, #8
 8008cfc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d12:	f003 031f 	and.w	r3, r3, #31
 8008d16:	2220      	movs	r2, #32
 8008d18:	409a      	lsls	r2, r3
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 8110 	beq.w	8008f44 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a2c      	ldr	r2, [pc, #176]	; (8008ddc <HAL_DMA_IRQHandler+0x690>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d04a      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a2b      	ldr	r2, [pc, #172]	; (8008de0 <HAL_DMA_IRQHandler+0x694>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d045      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a29      	ldr	r2, [pc, #164]	; (8008de4 <HAL_DMA_IRQHandler+0x698>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d040      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a28      	ldr	r2, [pc, #160]	; (8008de8 <HAL_DMA_IRQHandler+0x69c>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d03b      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a26      	ldr	r2, [pc, #152]	; (8008dec <HAL_DMA_IRQHandler+0x6a0>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d036      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a25      	ldr	r2, [pc, #148]	; (8008df0 <HAL_DMA_IRQHandler+0x6a4>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d031      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a23      	ldr	r2, [pc, #140]	; (8008df4 <HAL_DMA_IRQHandler+0x6a8>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d02c      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a22      	ldr	r2, [pc, #136]	; (8008df8 <HAL_DMA_IRQHandler+0x6ac>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d027      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a20      	ldr	r2, [pc, #128]	; (8008dfc <HAL_DMA_IRQHandler+0x6b0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d022      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a1f      	ldr	r2, [pc, #124]	; (8008e00 <HAL_DMA_IRQHandler+0x6b4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d01d      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a1d      	ldr	r2, [pc, #116]	; (8008e04 <HAL_DMA_IRQHandler+0x6b8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d018      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a1c      	ldr	r2, [pc, #112]	; (8008e08 <HAL_DMA_IRQHandler+0x6bc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d013      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a1a      	ldr	r2, [pc, #104]	; (8008e0c <HAL_DMA_IRQHandler+0x6c0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00e      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a19      	ldr	r2, [pc, #100]	; (8008e10 <HAL_DMA_IRQHandler+0x6c4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d009      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a17      	ldr	r2, [pc, #92]	; (8008e14 <HAL_DMA_IRQHandler+0x6c8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d004      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a16      	ldr	r2, [pc, #88]	; (8008e18 <HAL_DMA_IRQHandler+0x6cc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d12b      	bne.n	8008e1c <HAL_DMA_IRQHandler+0x6d0>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0310 	and.w	r3, r3, #16
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bf14      	ite	ne
 8008dd2:	2301      	movne	r3, #1
 8008dd4:	2300      	moveq	r3, #0
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	e02a      	b.n	8008e30 <HAL_DMA_IRQHandler+0x6e4>
 8008dda:	bf00      	nop
 8008ddc:	40020010 	.word	0x40020010
 8008de0:	40020028 	.word	0x40020028
 8008de4:	40020040 	.word	0x40020040
 8008de8:	40020058 	.word	0x40020058
 8008dec:	40020070 	.word	0x40020070
 8008df0:	40020088 	.word	0x40020088
 8008df4:	400200a0 	.word	0x400200a0
 8008df8:	400200b8 	.word	0x400200b8
 8008dfc:	40020410 	.word	0x40020410
 8008e00:	40020428 	.word	0x40020428
 8008e04:	40020440 	.word	0x40020440
 8008e08:	40020458 	.word	0x40020458
 8008e0c:	40020470 	.word	0x40020470
 8008e10:	40020488 	.word	0x40020488
 8008e14:	400204a0 	.word	0x400204a0
 8008e18:	400204b8 	.word	0x400204b8
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	bf14      	ite	ne
 8008e2a:	2301      	movne	r3, #1
 8008e2c:	2300      	moveq	r3, #0
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8087 	beq.w	8008f44 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	2220      	movs	r2, #32
 8008e40:	409a      	lsls	r2, r3
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d139      	bne.n	8008ec6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0216 	bic.w	r2, r2, #22
 8008e60:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	695a      	ldr	r2, [r3, #20]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e70:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d103      	bne.n	8008e82 <HAL_DMA_IRQHandler+0x736>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d007      	beq.n	8008e92 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 0208 	bic.w	r2, r2, #8
 8008e90:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e96:	f003 031f 	and.w	r3, r3, #31
 8008e9a:	223f      	movs	r2, #63	; 0x3f
 8008e9c:	409a      	lsls	r2, r3
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 834a 	beq.w	8009550 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	4798      	blx	r3
          }
          return;
 8008ec4:	e344      	b.n	8009550 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d018      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d108      	bne.n	8008ef4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d02c      	beq.n	8008f44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	4798      	blx	r3
 8008ef2:	e027      	b.n	8008f44 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d023      	beq.n	8008f44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	4798      	blx	r3
 8008f04:	e01e      	b.n	8008f44 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10f      	bne.n	8008f34 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0210 	bic.w	r2, r2, #16
 8008f22:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 8306 	beq.w	800955a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 8088 	beq.w	800906c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2204      	movs	r2, #4
 8008f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a7a      	ldr	r2, [pc, #488]	; (8009154 <HAL_DMA_IRQHandler+0xa08>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d04a      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a79      	ldr	r2, [pc, #484]	; (8009158 <HAL_DMA_IRQHandler+0xa0c>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d045      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a77      	ldr	r2, [pc, #476]	; (800915c <HAL_DMA_IRQHandler+0xa10>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d040      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a76      	ldr	r2, [pc, #472]	; (8009160 <HAL_DMA_IRQHandler+0xa14>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d03b      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a74      	ldr	r2, [pc, #464]	; (8009164 <HAL_DMA_IRQHandler+0xa18>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d036      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a73      	ldr	r2, [pc, #460]	; (8009168 <HAL_DMA_IRQHandler+0xa1c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d031      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a71      	ldr	r2, [pc, #452]	; (800916c <HAL_DMA_IRQHandler+0xa20>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d02c      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a70      	ldr	r2, [pc, #448]	; (8009170 <HAL_DMA_IRQHandler+0xa24>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d027      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a6e      	ldr	r2, [pc, #440]	; (8009174 <HAL_DMA_IRQHandler+0xa28>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d022      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a6d      	ldr	r2, [pc, #436]	; (8009178 <HAL_DMA_IRQHandler+0xa2c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d01d      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a6b      	ldr	r2, [pc, #428]	; (800917c <HAL_DMA_IRQHandler+0xa30>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d018      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a6a      	ldr	r2, [pc, #424]	; (8009180 <HAL_DMA_IRQHandler+0xa34>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d013      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a68      	ldr	r2, [pc, #416]	; (8009184 <HAL_DMA_IRQHandler+0xa38>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d00e      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a67      	ldr	r2, [pc, #412]	; (8009188 <HAL_DMA_IRQHandler+0xa3c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d009      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a65      	ldr	r2, [pc, #404]	; (800918c <HAL_DMA_IRQHandler+0xa40>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d004      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a64      	ldr	r2, [pc, #400]	; (8009190 <HAL_DMA_IRQHandler+0xa44>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d108      	bne.n	8009016 <HAL_DMA_IRQHandler+0x8ca>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0201 	bic.w	r2, r2, #1
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	e007      	b.n	8009026 <HAL_DMA_IRQHandler+0x8da>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0201 	bic.w	r2, r2, #1
 8009024:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3301      	adds	r3, #1
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902e:	429a      	cmp	r2, r3
 8009030:	d307      	bcc.n	8009042 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1f2      	bne.n	8009026 <HAL_DMA_IRQHandler+0x8da>
 8009040:	e000      	b.n	8009044 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009042:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d004      	beq.n	800905c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2203      	movs	r2, #3
 8009056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800905a:	e003      	b.n	8009064 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8272 	beq.w	800955a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
 800907e:	e26c      	b.n	800955a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a43      	ldr	r2, [pc, #268]	; (8009194 <HAL_DMA_IRQHandler+0xa48>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d022      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a42      	ldr	r2, [pc, #264]	; (8009198 <HAL_DMA_IRQHandler+0xa4c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d01d      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a40      	ldr	r2, [pc, #256]	; (800919c <HAL_DMA_IRQHandler+0xa50>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d018      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a3f      	ldr	r2, [pc, #252]	; (80091a0 <HAL_DMA_IRQHandler+0xa54>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d013      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a3d      	ldr	r2, [pc, #244]	; (80091a4 <HAL_DMA_IRQHandler+0xa58>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00e      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a3c      	ldr	r2, [pc, #240]	; (80091a8 <HAL_DMA_IRQHandler+0xa5c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d009      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a3a      	ldr	r2, [pc, #232]	; (80091ac <HAL_DMA_IRQHandler+0xa60>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d004      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a39      	ldr	r2, [pc, #228]	; (80091b0 <HAL_DMA_IRQHandler+0xa64>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d101      	bne.n	80090d4 <HAL_DMA_IRQHandler+0x988>
 80090d0:	2301      	movs	r3, #1
 80090d2:	e000      	b.n	80090d6 <HAL_DMA_IRQHandler+0x98a>
 80090d4:	2300      	movs	r3, #0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 823f 	beq.w	800955a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090e8:	f003 031f 	and.w	r3, r3, #31
 80090ec:	2204      	movs	r2, #4
 80090ee:	409a      	lsls	r2, r3
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	4013      	ands	r3, r2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 80cd 	beq.w	8009294 <HAL_DMA_IRQHandler+0xb48>
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 80c7 	beq.w	8009294 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910a:	f003 031f 	and.w	r3, r3, #31
 800910e:	2204      	movs	r2, #4
 8009110:	409a      	lsls	r2, r3
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d049      	beq.n	80091b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d109      	bne.n	800913e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8210 	beq.w	8009554 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800913c:	e20a      	b.n	8009554 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 8206 	beq.w	8009554 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009150:	e200      	b.n	8009554 <HAL_DMA_IRQHandler+0xe08>
 8009152:	bf00      	nop
 8009154:	40020010 	.word	0x40020010
 8009158:	40020028 	.word	0x40020028
 800915c:	40020040 	.word	0x40020040
 8009160:	40020058 	.word	0x40020058
 8009164:	40020070 	.word	0x40020070
 8009168:	40020088 	.word	0x40020088
 800916c:	400200a0 	.word	0x400200a0
 8009170:	400200b8 	.word	0x400200b8
 8009174:	40020410 	.word	0x40020410
 8009178:	40020428 	.word	0x40020428
 800917c:	40020440 	.word	0x40020440
 8009180:	40020458 	.word	0x40020458
 8009184:	40020470 	.word	0x40020470
 8009188:	40020488 	.word	0x40020488
 800918c:	400204a0 	.word	0x400204a0
 8009190:	400204b8 	.word	0x400204b8
 8009194:	58025408 	.word	0x58025408
 8009198:	5802541c 	.word	0x5802541c
 800919c:	58025430 	.word	0x58025430
 80091a0:	58025444 	.word	0x58025444
 80091a4:	58025458 	.word	0x58025458
 80091a8:	5802546c 	.word	0x5802546c
 80091ac:	58025480 	.word	0x58025480
 80091b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d160      	bne.n	8009280 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a7f      	ldr	r2, [pc, #508]	; (80093c0 <HAL_DMA_IRQHandler+0xc74>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d04a      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a7d      	ldr	r2, [pc, #500]	; (80093c4 <HAL_DMA_IRQHandler+0xc78>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d045      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a7c      	ldr	r2, [pc, #496]	; (80093c8 <HAL_DMA_IRQHandler+0xc7c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d040      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a7a      	ldr	r2, [pc, #488]	; (80093cc <HAL_DMA_IRQHandler+0xc80>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d03b      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a79      	ldr	r2, [pc, #484]	; (80093d0 <HAL_DMA_IRQHandler+0xc84>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d036      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a77      	ldr	r2, [pc, #476]	; (80093d4 <HAL_DMA_IRQHandler+0xc88>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d031      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a76      	ldr	r2, [pc, #472]	; (80093d8 <HAL_DMA_IRQHandler+0xc8c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d02c      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a74      	ldr	r2, [pc, #464]	; (80093dc <HAL_DMA_IRQHandler+0xc90>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d027      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a73      	ldr	r2, [pc, #460]	; (80093e0 <HAL_DMA_IRQHandler+0xc94>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d022      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a71      	ldr	r2, [pc, #452]	; (80093e4 <HAL_DMA_IRQHandler+0xc98>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d01d      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a70      	ldr	r2, [pc, #448]	; (80093e8 <HAL_DMA_IRQHandler+0xc9c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d018      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a6e      	ldr	r2, [pc, #440]	; (80093ec <HAL_DMA_IRQHandler+0xca0>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d013      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a6d      	ldr	r2, [pc, #436]	; (80093f0 <HAL_DMA_IRQHandler+0xca4>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d00e      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a6b      	ldr	r2, [pc, #428]	; (80093f4 <HAL_DMA_IRQHandler+0xca8>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d009      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a6a      	ldr	r2, [pc, #424]	; (80093f8 <HAL_DMA_IRQHandler+0xcac>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d004      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a68      	ldr	r2, [pc, #416]	; (80093fc <HAL_DMA_IRQHandler+0xcb0>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d108      	bne.n	8009270 <HAL_DMA_IRQHandler+0xb24>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0208 	bic.w	r2, r2, #8
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	e007      	b.n	8009280 <HAL_DMA_IRQHandler+0xb34>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f022 0204 	bic.w	r2, r2, #4
 800927e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8165 	beq.w	8009554 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009292:	e15f      	b.n	8009554 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009298:	f003 031f 	and.w	r3, r3, #31
 800929c:	2202      	movs	r2, #2
 800929e:	409a      	lsls	r2, r3
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	4013      	ands	r3, r2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 80c5 	beq.w	8009434 <HAL_DMA_IRQHandler+0xce8>
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 80bf 	beq.w	8009434 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ba:	f003 031f 	and.w	r3, r3, #31
 80092be:	2202      	movs	r2, #2
 80092c0:	409a      	lsls	r2, r3
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d018      	beq.n	8009302 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d109      	bne.n	80092ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 813a 	beq.w	8009558 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092ec:	e134      	b.n	8009558 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 8130 	beq.w	8009558 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009300:	e12a      	b.n	8009558 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	f040 8089 	bne.w	8009420 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a2b      	ldr	r2, [pc, #172]	; (80093c0 <HAL_DMA_IRQHandler+0xc74>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d04a      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a29      	ldr	r2, [pc, #164]	; (80093c4 <HAL_DMA_IRQHandler+0xc78>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d045      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a28      	ldr	r2, [pc, #160]	; (80093c8 <HAL_DMA_IRQHandler+0xc7c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d040      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a26      	ldr	r2, [pc, #152]	; (80093cc <HAL_DMA_IRQHandler+0xc80>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d03b      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a25      	ldr	r2, [pc, #148]	; (80093d0 <HAL_DMA_IRQHandler+0xc84>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d036      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a23      	ldr	r2, [pc, #140]	; (80093d4 <HAL_DMA_IRQHandler+0xc88>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d031      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a22      	ldr	r2, [pc, #136]	; (80093d8 <HAL_DMA_IRQHandler+0xc8c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d02c      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a20      	ldr	r2, [pc, #128]	; (80093dc <HAL_DMA_IRQHandler+0xc90>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d027      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a1f      	ldr	r2, [pc, #124]	; (80093e0 <HAL_DMA_IRQHandler+0xc94>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d022      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a1d      	ldr	r2, [pc, #116]	; (80093e4 <HAL_DMA_IRQHandler+0xc98>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d01d      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a1c      	ldr	r2, [pc, #112]	; (80093e8 <HAL_DMA_IRQHandler+0xc9c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d018      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a1a      	ldr	r2, [pc, #104]	; (80093ec <HAL_DMA_IRQHandler+0xca0>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d013      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a19      	ldr	r2, [pc, #100]	; (80093f0 <HAL_DMA_IRQHandler+0xca4>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d00e      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a17      	ldr	r2, [pc, #92]	; (80093f4 <HAL_DMA_IRQHandler+0xca8>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d009      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a16      	ldr	r2, [pc, #88]	; (80093f8 <HAL_DMA_IRQHandler+0xcac>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d004      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a14      	ldr	r2, [pc, #80]	; (80093fc <HAL_DMA_IRQHandler+0xcb0>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d128      	bne.n	8009400 <HAL_DMA_IRQHandler+0xcb4>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0214 	bic.w	r2, r2, #20
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	e027      	b.n	8009410 <HAL_DMA_IRQHandler+0xcc4>
 80093c0:	40020010 	.word	0x40020010
 80093c4:	40020028 	.word	0x40020028
 80093c8:	40020040 	.word	0x40020040
 80093cc:	40020058 	.word	0x40020058
 80093d0:	40020070 	.word	0x40020070
 80093d4:	40020088 	.word	0x40020088
 80093d8:	400200a0 	.word	0x400200a0
 80093dc:	400200b8 	.word	0x400200b8
 80093e0:	40020410 	.word	0x40020410
 80093e4:	40020428 	.word	0x40020428
 80093e8:	40020440 	.word	0x40020440
 80093ec:	40020458 	.word	0x40020458
 80093f0:	40020470 	.word	0x40020470
 80093f4:	40020488 	.word	0x40020488
 80093f8:	400204a0 	.word	0x400204a0
 80093fc:	400204b8 	.word	0x400204b8
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f022 020a 	bic.w	r2, r2, #10
 800940e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 8097 	beq.w	8009558 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009432:	e091      	b.n	8009558 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009438:	f003 031f 	and.w	r3, r3, #31
 800943c:	2208      	movs	r2, #8
 800943e:	409a      	lsls	r2, r3
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	4013      	ands	r3, r2
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 8088 	beq.w	800955a <HAL_DMA_IRQHandler+0xe0e>
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8082 	beq.w	800955a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a41      	ldr	r2, [pc, #260]	; (8009560 <HAL_DMA_IRQHandler+0xe14>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d04a      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a3f      	ldr	r2, [pc, #252]	; (8009564 <HAL_DMA_IRQHandler+0xe18>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d045      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a3e      	ldr	r2, [pc, #248]	; (8009568 <HAL_DMA_IRQHandler+0xe1c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d040      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a3c      	ldr	r2, [pc, #240]	; (800956c <HAL_DMA_IRQHandler+0xe20>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d03b      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a3b      	ldr	r2, [pc, #236]	; (8009570 <HAL_DMA_IRQHandler+0xe24>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d036      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a39      	ldr	r2, [pc, #228]	; (8009574 <HAL_DMA_IRQHandler+0xe28>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d031      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a38      	ldr	r2, [pc, #224]	; (8009578 <HAL_DMA_IRQHandler+0xe2c>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d02c      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a36      	ldr	r2, [pc, #216]	; (800957c <HAL_DMA_IRQHandler+0xe30>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d027      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a35      	ldr	r2, [pc, #212]	; (8009580 <HAL_DMA_IRQHandler+0xe34>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d022      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a33      	ldr	r2, [pc, #204]	; (8009584 <HAL_DMA_IRQHandler+0xe38>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d01d      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a32      	ldr	r2, [pc, #200]	; (8009588 <HAL_DMA_IRQHandler+0xe3c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d018      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a30      	ldr	r2, [pc, #192]	; (800958c <HAL_DMA_IRQHandler+0xe40>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d013      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a2f      	ldr	r2, [pc, #188]	; (8009590 <HAL_DMA_IRQHandler+0xe44>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00e      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a2d      	ldr	r2, [pc, #180]	; (8009594 <HAL_DMA_IRQHandler+0xe48>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d009      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a2c      	ldr	r2, [pc, #176]	; (8009598 <HAL_DMA_IRQHandler+0xe4c>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d004      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a2a      	ldr	r2, [pc, #168]	; (800959c <HAL_DMA_IRQHandler+0xe50>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d108      	bne.n	8009508 <HAL_DMA_IRQHandler+0xdbc>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 021c 	bic.w	r2, r2, #28
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	e007      	b.n	8009518 <HAL_DMA_IRQHandler+0xdcc>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f022 020e 	bic.w	r2, r2, #14
 8009516:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800951c:	f003 031f 	and.w	r3, r3, #31
 8009520:	2201      	movs	r2, #1
 8009522:	409a      	lsls	r2, r3
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009542:	2b00      	cmp	r3, #0
 8009544:	d009      	beq.n	800955a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
 800954e:	e004      	b.n	800955a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009550:	bf00      	nop
 8009552:	e002      	b.n	800955a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009554:	bf00      	nop
 8009556:	e000      	b.n	800955a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009558:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800955a:	3728      	adds	r7, #40	; 0x28
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	40020010 	.word	0x40020010
 8009564:	40020028 	.word	0x40020028
 8009568:	40020040 	.word	0x40020040
 800956c:	40020058 	.word	0x40020058
 8009570:	40020070 	.word	0x40020070
 8009574:	40020088 	.word	0x40020088
 8009578:	400200a0 	.word	0x400200a0
 800957c:	400200b8 	.word	0x400200b8
 8009580:	40020410 	.word	0x40020410
 8009584:	40020428 	.word	0x40020428
 8009588:	40020440 	.word	0x40020440
 800958c:	40020458 	.word	0x40020458
 8009590:	40020470 	.word	0x40020470
 8009594:	40020488 	.word	0x40020488
 8009598:	400204a0 	.word	0x400204a0
 800959c:	400204b8 	.word	0x400204b8

080095a0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80095ae:	b2db      	uxtb	r3, r3
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a7f      	ldr	r2, [pc, #508]	; (80097f0 <DMA_SetConfig+0x21c>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d072      	beq.n	80096de <DMA_SetConfig+0x10a>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a7d      	ldr	r2, [pc, #500]	; (80097f4 <DMA_SetConfig+0x220>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d06d      	beq.n	80096de <DMA_SetConfig+0x10a>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a7c      	ldr	r2, [pc, #496]	; (80097f8 <DMA_SetConfig+0x224>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d068      	beq.n	80096de <DMA_SetConfig+0x10a>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a7a      	ldr	r2, [pc, #488]	; (80097fc <DMA_SetConfig+0x228>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d063      	beq.n	80096de <DMA_SetConfig+0x10a>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a79      	ldr	r2, [pc, #484]	; (8009800 <DMA_SetConfig+0x22c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d05e      	beq.n	80096de <DMA_SetConfig+0x10a>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a77      	ldr	r2, [pc, #476]	; (8009804 <DMA_SetConfig+0x230>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d059      	beq.n	80096de <DMA_SetConfig+0x10a>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a76      	ldr	r2, [pc, #472]	; (8009808 <DMA_SetConfig+0x234>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d054      	beq.n	80096de <DMA_SetConfig+0x10a>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a74      	ldr	r2, [pc, #464]	; (800980c <DMA_SetConfig+0x238>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d04f      	beq.n	80096de <DMA_SetConfig+0x10a>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a73      	ldr	r2, [pc, #460]	; (8009810 <DMA_SetConfig+0x23c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d04a      	beq.n	80096de <DMA_SetConfig+0x10a>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a71      	ldr	r2, [pc, #452]	; (8009814 <DMA_SetConfig+0x240>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d045      	beq.n	80096de <DMA_SetConfig+0x10a>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a70      	ldr	r2, [pc, #448]	; (8009818 <DMA_SetConfig+0x244>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d040      	beq.n	80096de <DMA_SetConfig+0x10a>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a6e      	ldr	r2, [pc, #440]	; (800981c <DMA_SetConfig+0x248>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d03b      	beq.n	80096de <DMA_SetConfig+0x10a>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a6d      	ldr	r2, [pc, #436]	; (8009820 <DMA_SetConfig+0x24c>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d036      	beq.n	80096de <DMA_SetConfig+0x10a>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a6b      	ldr	r2, [pc, #428]	; (8009824 <DMA_SetConfig+0x250>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d031      	beq.n	80096de <DMA_SetConfig+0x10a>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a6a      	ldr	r2, [pc, #424]	; (8009828 <DMA_SetConfig+0x254>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d02c      	beq.n	80096de <DMA_SetConfig+0x10a>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a68      	ldr	r2, [pc, #416]	; (800982c <DMA_SetConfig+0x258>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d027      	beq.n	80096de <DMA_SetConfig+0x10a>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a67      	ldr	r2, [pc, #412]	; (8009830 <DMA_SetConfig+0x25c>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d022      	beq.n	80096de <DMA_SetConfig+0x10a>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a65      	ldr	r2, [pc, #404]	; (8009834 <DMA_SetConfig+0x260>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d01d      	beq.n	80096de <DMA_SetConfig+0x10a>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a64      	ldr	r2, [pc, #400]	; (8009838 <DMA_SetConfig+0x264>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d018      	beq.n	80096de <DMA_SetConfig+0x10a>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a62      	ldr	r2, [pc, #392]	; (800983c <DMA_SetConfig+0x268>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d013      	beq.n	80096de <DMA_SetConfig+0x10a>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a61      	ldr	r2, [pc, #388]	; (8009840 <DMA_SetConfig+0x26c>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d00e      	beq.n	80096de <DMA_SetConfig+0x10a>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a5f      	ldr	r2, [pc, #380]	; (8009844 <DMA_SetConfig+0x270>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d009      	beq.n	80096de <DMA_SetConfig+0x10a>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a5e      	ldr	r2, [pc, #376]	; (8009848 <DMA_SetConfig+0x274>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d004      	beq.n	80096de <DMA_SetConfig+0x10a>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a5c      	ldr	r2, [pc, #368]	; (800984c <DMA_SetConfig+0x278>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d101      	bne.n	80096e2 <DMA_SetConfig+0x10e>
 80096de:	2301      	movs	r3, #1
 80096e0:	e000      	b.n	80096e4 <DMA_SetConfig+0x110>
 80096e2:	2300      	movs	r3, #0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00d      	beq.n	8009704 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80096f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d004      	beq.n	8009704 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009702:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a39      	ldr	r2, [pc, #228]	; (80097f0 <DMA_SetConfig+0x21c>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d04a      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a38      	ldr	r2, [pc, #224]	; (80097f4 <DMA_SetConfig+0x220>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d045      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a36      	ldr	r2, [pc, #216]	; (80097f8 <DMA_SetConfig+0x224>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d040      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a35      	ldr	r2, [pc, #212]	; (80097fc <DMA_SetConfig+0x228>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d03b      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a33      	ldr	r2, [pc, #204]	; (8009800 <DMA_SetConfig+0x22c>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d036      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a32      	ldr	r2, [pc, #200]	; (8009804 <DMA_SetConfig+0x230>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d031      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a30      	ldr	r2, [pc, #192]	; (8009808 <DMA_SetConfig+0x234>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d02c      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a2f      	ldr	r2, [pc, #188]	; (800980c <DMA_SetConfig+0x238>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d027      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a2d      	ldr	r2, [pc, #180]	; (8009810 <DMA_SetConfig+0x23c>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d022      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a2c      	ldr	r2, [pc, #176]	; (8009814 <DMA_SetConfig+0x240>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d01d      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a2a      	ldr	r2, [pc, #168]	; (8009818 <DMA_SetConfig+0x244>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d018      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a29      	ldr	r2, [pc, #164]	; (800981c <DMA_SetConfig+0x248>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d013      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a27      	ldr	r2, [pc, #156]	; (8009820 <DMA_SetConfig+0x24c>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d00e      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a26      	ldr	r2, [pc, #152]	; (8009824 <DMA_SetConfig+0x250>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d009      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a24      	ldr	r2, [pc, #144]	; (8009828 <DMA_SetConfig+0x254>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d004      	beq.n	80097a4 <DMA_SetConfig+0x1d0>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a23      	ldr	r2, [pc, #140]	; (800982c <DMA_SetConfig+0x258>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d101      	bne.n	80097a8 <DMA_SetConfig+0x1d4>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e000      	b.n	80097aa <DMA_SetConfig+0x1d6>
 80097a8:	2300      	movs	r3, #0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d059      	beq.n	8009862 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097b2:	f003 031f 	and.w	r3, r3, #31
 80097b6:	223f      	movs	r2, #63	; 0x3f
 80097b8:	409a      	lsls	r2, r3
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80097cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	2b40      	cmp	r3, #64	; 0x40
 80097dc:	d138      	bne.n	8009850 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80097ee:	e086      	b.n	80098fe <DMA_SetConfig+0x32a>
 80097f0:	40020010 	.word	0x40020010
 80097f4:	40020028 	.word	0x40020028
 80097f8:	40020040 	.word	0x40020040
 80097fc:	40020058 	.word	0x40020058
 8009800:	40020070 	.word	0x40020070
 8009804:	40020088 	.word	0x40020088
 8009808:	400200a0 	.word	0x400200a0
 800980c:	400200b8 	.word	0x400200b8
 8009810:	40020410 	.word	0x40020410
 8009814:	40020428 	.word	0x40020428
 8009818:	40020440 	.word	0x40020440
 800981c:	40020458 	.word	0x40020458
 8009820:	40020470 	.word	0x40020470
 8009824:	40020488 	.word	0x40020488
 8009828:	400204a0 	.word	0x400204a0
 800982c:	400204b8 	.word	0x400204b8
 8009830:	58025408 	.word	0x58025408
 8009834:	5802541c 	.word	0x5802541c
 8009838:	58025430 	.word	0x58025430
 800983c:	58025444 	.word	0x58025444
 8009840:	58025458 	.word	0x58025458
 8009844:	5802546c 	.word	0x5802546c
 8009848:	58025480 	.word	0x58025480
 800984c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	60da      	str	r2, [r3, #12]
}
 8009860:	e04d      	b.n	80098fe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a29      	ldr	r2, [pc, #164]	; (800990c <DMA_SetConfig+0x338>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d022      	beq.n	80098b2 <DMA_SetConfig+0x2de>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a27      	ldr	r2, [pc, #156]	; (8009910 <DMA_SetConfig+0x33c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d01d      	beq.n	80098b2 <DMA_SetConfig+0x2de>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a26      	ldr	r2, [pc, #152]	; (8009914 <DMA_SetConfig+0x340>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d018      	beq.n	80098b2 <DMA_SetConfig+0x2de>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a24      	ldr	r2, [pc, #144]	; (8009918 <DMA_SetConfig+0x344>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d013      	beq.n	80098b2 <DMA_SetConfig+0x2de>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a23      	ldr	r2, [pc, #140]	; (800991c <DMA_SetConfig+0x348>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d00e      	beq.n	80098b2 <DMA_SetConfig+0x2de>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a21      	ldr	r2, [pc, #132]	; (8009920 <DMA_SetConfig+0x34c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d009      	beq.n	80098b2 <DMA_SetConfig+0x2de>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a20      	ldr	r2, [pc, #128]	; (8009924 <DMA_SetConfig+0x350>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d004      	beq.n	80098b2 <DMA_SetConfig+0x2de>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a1e      	ldr	r2, [pc, #120]	; (8009928 <DMA_SetConfig+0x354>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d101      	bne.n	80098b6 <DMA_SetConfig+0x2e2>
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <DMA_SetConfig+0x2e4>
 80098b6:	2300      	movs	r3, #0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d020      	beq.n	80098fe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098c0:	f003 031f 	and.w	r3, r3, #31
 80098c4:	2201      	movs	r2, #1
 80098c6:	409a      	lsls	r2, r3
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	2b40      	cmp	r3, #64	; 0x40
 80098da:	d108      	bne.n	80098ee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	60da      	str	r2, [r3, #12]
}
 80098ec:	e007      	b.n	80098fe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	60da      	str	r2, [r3, #12]
}
 80098fe:	bf00      	nop
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	58025408 	.word	0x58025408
 8009910:	5802541c 	.word	0x5802541c
 8009914:	58025430 	.word	0x58025430
 8009918:	58025444 	.word	0x58025444
 800991c:	58025458 	.word	0x58025458
 8009920:	5802546c 	.word	0x5802546c
 8009924:	58025480 	.word	0x58025480
 8009928:	58025494 	.word	0x58025494

0800992c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a42      	ldr	r2, [pc, #264]	; (8009a44 <DMA_CalcBaseAndBitshift+0x118>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d04a      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a41      	ldr	r2, [pc, #260]	; (8009a48 <DMA_CalcBaseAndBitshift+0x11c>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d045      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a3f      	ldr	r2, [pc, #252]	; (8009a4c <DMA_CalcBaseAndBitshift+0x120>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d040      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a3e      	ldr	r2, [pc, #248]	; (8009a50 <DMA_CalcBaseAndBitshift+0x124>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d03b      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a3c      	ldr	r2, [pc, #240]	; (8009a54 <DMA_CalcBaseAndBitshift+0x128>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d036      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a3b      	ldr	r2, [pc, #236]	; (8009a58 <DMA_CalcBaseAndBitshift+0x12c>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d031      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a39      	ldr	r2, [pc, #228]	; (8009a5c <DMA_CalcBaseAndBitshift+0x130>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d02c      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a38      	ldr	r2, [pc, #224]	; (8009a60 <DMA_CalcBaseAndBitshift+0x134>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d027      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a36      	ldr	r2, [pc, #216]	; (8009a64 <DMA_CalcBaseAndBitshift+0x138>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d022      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a35      	ldr	r2, [pc, #212]	; (8009a68 <DMA_CalcBaseAndBitshift+0x13c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d01d      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a33      	ldr	r2, [pc, #204]	; (8009a6c <DMA_CalcBaseAndBitshift+0x140>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d018      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a32      	ldr	r2, [pc, #200]	; (8009a70 <DMA_CalcBaseAndBitshift+0x144>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d013      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a30      	ldr	r2, [pc, #192]	; (8009a74 <DMA_CalcBaseAndBitshift+0x148>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d00e      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a2f      	ldr	r2, [pc, #188]	; (8009a78 <DMA_CalcBaseAndBitshift+0x14c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d009      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a2d      	ldr	r2, [pc, #180]	; (8009a7c <DMA_CalcBaseAndBitshift+0x150>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d004      	beq.n	80099d4 <DMA_CalcBaseAndBitshift+0xa8>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a2c      	ldr	r2, [pc, #176]	; (8009a80 <DMA_CalcBaseAndBitshift+0x154>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d101      	bne.n	80099d8 <DMA_CalcBaseAndBitshift+0xac>
 80099d4:	2301      	movs	r3, #1
 80099d6:	e000      	b.n	80099da <DMA_CalcBaseAndBitshift+0xae>
 80099d8:	2300      	movs	r3, #0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d024      	beq.n	8009a28 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	3b10      	subs	r3, #16
 80099e6:	4a27      	ldr	r2, [pc, #156]	; (8009a84 <DMA_CalcBaseAndBitshift+0x158>)
 80099e8:	fba2 2303 	umull	r2, r3, r2, r3
 80099ec:	091b      	lsrs	r3, r3, #4
 80099ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	4a24      	ldr	r2, [pc, #144]	; (8009a88 <DMA_CalcBaseAndBitshift+0x15c>)
 80099f8:	5cd3      	ldrb	r3, [r2, r3]
 80099fa:	461a      	mov	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	d908      	bls.n	8009a18 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	4b1f      	ldr	r3, [pc, #124]	; (8009a8c <DMA_CalcBaseAndBitshift+0x160>)
 8009a0e:	4013      	ands	r3, r2
 8009a10:	1d1a      	adds	r2, r3, #4
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	659a      	str	r2, [r3, #88]	; 0x58
 8009a16:	e00d      	b.n	8009a34 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4b1b      	ldr	r3, [pc, #108]	; (8009a8c <DMA_CalcBaseAndBitshift+0x160>)
 8009a20:	4013      	ands	r3, r2
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	6593      	str	r3, [r2, #88]	; 0x58
 8009a26:	e005      	b.n	8009a34 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	40020010 	.word	0x40020010
 8009a48:	40020028 	.word	0x40020028
 8009a4c:	40020040 	.word	0x40020040
 8009a50:	40020058 	.word	0x40020058
 8009a54:	40020070 	.word	0x40020070
 8009a58:	40020088 	.word	0x40020088
 8009a5c:	400200a0 	.word	0x400200a0
 8009a60:	400200b8 	.word	0x400200b8
 8009a64:	40020410 	.word	0x40020410
 8009a68:	40020428 	.word	0x40020428
 8009a6c:	40020440 	.word	0x40020440
 8009a70:	40020458 	.word	0x40020458
 8009a74:	40020470 	.word	0x40020470
 8009a78:	40020488 	.word	0x40020488
 8009a7c:	400204a0 	.word	0x400204a0
 8009a80:	400204b8 	.word	0x400204b8
 8009a84:	aaaaaaab 	.word	0xaaaaaaab
 8009a88:	0801a1e4 	.word	0x0801a1e4
 8009a8c:	fffffc00 	.word	0xfffffc00

08009a90 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d120      	bne.n	8009ae6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d858      	bhi.n	8009b5e <DMA_CheckFifoParam+0xce>
 8009aac:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <DMA_CheckFifoParam+0x24>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009ac5 	.word	0x08009ac5
 8009ab8:	08009ad7 	.word	0x08009ad7
 8009abc:	08009ac5 	.word	0x08009ac5
 8009ac0:	08009b5f 	.word	0x08009b5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d048      	beq.n	8009b62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ad4:	e045      	b.n	8009b62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ada:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009ade:	d142      	bne.n	8009b66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ae4:	e03f      	b.n	8009b66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aee:	d123      	bne.n	8009b38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d838      	bhi.n	8009b6a <DMA_CheckFifoParam+0xda>
 8009af8:	a201      	add	r2, pc, #4	; (adr r2, 8009b00 <DMA_CheckFifoParam+0x70>)
 8009afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afe:	bf00      	nop
 8009b00:	08009b11 	.word	0x08009b11
 8009b04:	08009b17 	.word	0x08009b17
 8009b08:	08009b11 	.word	0x08009b11
 8009b0c:	08009b29 	.word	0x08009b29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	73fb      	strb	r3, [r7, #15]
        break;
 8009b14:	e030      	b.n	8009b78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d025      	beq.n	8009b6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b26:	e022      	b.n	8009b6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009b30:	d11f      	bne.n	8009b72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b36:	e01c      	b.n	8009b72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d902      	bls.n	8009b46 <DMA_CheckFifoParam+0xb6>
 8009b40:	2b03      	cmp	r3, #3
 8009b42:	d003      	beq.n	8009b4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009b44:	e018      	b.n	8009b78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	73fb      	strb	r3, [r7, #15]
        break;
 8009b4a:	e015      	b.n	8009b78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00e      	beq.n	8009b76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b5c:	e00b      	b.n	8009b76 <DMA_CheckFifoParam+0xe6>
        break;
 8009b5e:	bf00      	nop
 8009b60:	e00a      	b.n	8009b78 <DMA_CheckFifoParam+0xe8>
        break;
 8009b62:	bf00      	nop
 8009b64:	e008      	b.n	8009b78 <DMA_CheckFifoParam+0xe8>
        break;
 8009b66:	bf00      	nop
 8009b68:	e006      	b.n	8009b78 <DMA_CheckFifoParam+0xe8>
        break;
 8009b6a:	bf00      	nop
 8009b6c:	e004      	b.n	8009b78 <DMA_CheckFifoParam+0xe8>
        break;
 8009b6e:	bf00      	nop
 8009b70:	e002      	b.n	8009b78 <DMA_CheckFifoParam+0xe8>
        break;
 8009b72:	bf00      	nop
 8009b74:	e000      	b.n	8009b78 <DMA_CheckFifoParam+0xe8>
    break;
 8009b76:	bf00      	nop
    }
  }

  return status;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop

08009b88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a38      	ldr	r2, [pc, #224]	; (8009c7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d022      	beq.n	8009be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a36      	ldr	r2, [pc, #216]	; (8009c80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d01d      	beq.n	8009be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a35      	ldr	r2, [pc, #212]	; (8009c84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d018      	beq.n	8009be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a33      	ldr	r2, [pc, #204]	; (8009c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d013      	beq.n	8009be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a32      	ldr	r2, [pc, #200]	; (8009c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d00e      	beq.n	8009be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a30      	ldr	r2, [pc, #192]	; (8009c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d009      	beq.n	8009be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a2f      	ldr	r2, [pc, #188]	; (8009c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d004      	beq.n	8009be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a2d      	ldr	r2, [pc, #180]	; (8009c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d101      	bne.n	8009bea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e000      	b.n	8009bec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009bea:	2300      	movs	r3, #0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01a      	beq.n	8009c26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	3b08      	subs	r3, #8
 8009bf8:	4a28      	ldr	r2, [pc, #160]	; (8009c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfe:	091b      	lsrs	r3, r3, #4
 8009c00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4b26      	ldr	r3, [pc, #152]	; (8009ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a24      	ldr	r2, [pc, #144]	; (8009ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009c14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f003 031f 	and.w	r3, r3, #31
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	409a      	lsls	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009c24:	e024      	b.n	8009c70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	3b10      	subs	r3, #16
 8009c2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009c30:	fba2 2303 	umull	r2, r3, r2, r3
 8009c34:	091b      	lsrs	r3, r3, #4
 8009c36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	4a1c      	ldr	r2, [pc, #112]	; (8009cac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d806      	bhi.n	8009c4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	4a1b      	ldr	r2, [pc, #108]	; (8009cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d902      	bls.n	8009c4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4b18      	ldr	r3, [pc, #96]	; (8009cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009c52:	4413      	add	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	461a      	mov	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a16      	ldr	r2, [pc, #88]	; (8009cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009c60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f003 031f 	and.w	r3, r3, #31
 8009c68:	2201      	movs	r2, #1
 8009c6a:	409a      	lsls	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009c70:	bf00      	nop
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	58025408 	.word	0x58025408
 8009c80:	5802541c 	.word	0x5802541c
 8009c84:	58025430 	.word	0x58025430
 8009c88:	58025444 	.word	0x58025444
 8009c8c:	58025458 	.word	0x58025458
 8009c90:	5802546c 	.word	0x5802546c
 8009c94:	58025480 	.word	0x58025480
 8009c98:	58025494 	.word	0x58025494
 8009c9c:	cccccccd 	.word	0xcccccccd
 8009ca0:	16009600 	.word	0x16009600
 8009ca4:	58025880 	.word	0x58025880
 8009ca8:	aaaaaaab 	.word	0xaaaaaaab
 8009cac:	400204b8 	.word	0x400204b8
 8009cb0:	4002040f 	.word	0x4002040f
 8009cb4:	10008200 	.word	0x10008200
 8009cb8:	40020880 	.word	0x40020880

08009cbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d04a      	beq.n	8009d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2b08      	cmp	r3, #8
 8009cd6:	d847      	bhi.n	8009d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a25      	ldr	r2, [pc, #148]	; (8009d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d022      	beq.n	8009d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a24      	ldr	r2, [pc, #144]	; (8009d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d01d      	beq.n	8009d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a22      	ldr	r2, [pc, #136]	; (8009d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d018      	beq.n	8009d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a21      	ldr	r2, [pc, #132]	; (8009d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d013      	beq.n	8009d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a1f      	ldr	r2, [pc, #124]	; (8009d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d00e      	beq.n	8009d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a1e      	ldr	r2, [pc, #120]	; (8009d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d009      	beq.n	8009d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a1c      	ldr	r2, [pc, #112]	; (8009d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d004      	beq.n	8009d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a1b      	ldr	r2, [pc, #108]	; (8009d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d101      	bne.n	8009d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e000      	b.n	8009d2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00a      	beq.n	8009d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	4b17      	ldr	r3, [pc, #92]	; (8009d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a15      	ldr	r2, [pc, #84]	; (8009d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009d44:	671a      	str	r2, [r3, #112]	; 0x70
 8009d46:	e009      	b.n	8009d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	4b14      	ldr	r3, [pc, #80]	; (8009d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009d4c:	4413      	add	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	461a      	mov	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a11      	ldr	r2, [pc, #68]	; (8009da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009d5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	2201      	movs	r2, #1
 8009d62:	409a      	lsls	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009d68:	bf00      	nop
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	58025408 	.word	0x58025408
 8009d78:	5802541c 	.word	0x5802541c
 8009d7c:	58025430 	.word	0x58025430
 8009d80:	58025444 	.word	0x58025444
 8009d84:	58025458 	.word	0x58025458
 8009d88:	5802546c 	.word	0x5802546c
 8009d8c:	58025480 	.word	0x58025480
 8009d90:	58025494 	.word	0x58025494
 8009d94:	1600963f 	.word	0x1600963f
 8009d98:	58025940 	.word	0x58025940
 8009d9c:	1000823f 	.word	0x1000823f
 8009da0:	40020940 	.word	0x40020940

08009da4 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08a      	sub	sp, #40	; 0x28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8009db8:	2308      	movs	r3, #8
 8009dba:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009dbc:	4b40      	ldr	r3, [pc, #256]	; (8009ec0 <HAL_FLASH_Program+0x11c>)
 8009dbe:	7d1b      	ldrb	r3, [r3, #20]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d101      	bne.n	8009dc8 <HAL_FLASH_Program+0x24>
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	e076      	b.n	8009eb6 <HAL_FLASH_Program+0x112>
 8009dc8:	4b3d      	ldr	r3, [pc, #244]	; (8009ec0 <HAL_FLASH_Program+0x11c>)
 8009dca:	2201      	movs	r2, #1
 8009dcc:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dd4:	d306      	bcc.n	8009de4 <HAL_FLASH_Program+0x40>
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8009ddc:	d202      	bcs.n	8009de4 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8009dde:	2301      	movs	r3, #1
 8009de0:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8009de2:	e00c      	b.n	8009dfe <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8009dea:	d306      	bcc.n	8009dfa <HAL_FLASH_Program+0x56>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8009df2:	d202      	bcs.n	8009dfa <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8009df4:	2302      	movs	r3, #2
 8009df6:	61bb      	str	r3, [r7, #24]
 8009df8:	e001      	b.n	8009dfe <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e05b      	b.n	8009eb6 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009dfe:	4b30      	ldr	r3, [pc, #192]	; (8009ec0 <HAL_FLASH_Program+0x11c>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009e04:	69b9      	ldr	r1, [r7, #24]
 8009e06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e0a:	f000 f897 	bl	8009f3c <FLASH_WaitForLastOperation>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8009e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d147      	bne.n	8009eac <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d106      	bne.n	8009e30 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8009e22:	4b28      	ldr	r3, [pc, #160]	; (8009ec4 <HAL_FLASH_Program+0x120>)
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	4a27      	ldr	r2, [pc, #156]	; (8009ec4 <HAL_FLASH_Program+0x120>)
 8009e28:	f043 0302 	orr.w	r3, r3, #2
 8009e2c:	60d3      	str	r3, [r2, #12]
 8009e2e:	e007      	b.n	8009e40 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8009e30:	4b24      	ldr	r3, [pc, #144]	; (8009ec4 <HAL_FLASH_Program+0x120>)
 8009e32:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009e36:	4a23      	ldr	r2, [pc, #140]	; (8009ec4 <HAL_FLASH_Program+0x120>)
 8009e38:	f043 0302 	orr.w	r3, r3, #2
 8009e3c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8009e40:	f3bf 8f6f 	isb	sy
}
 8009e44:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009e46:	f3bf 8f4f 	dsb	sy
}
 8009e4a:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	3304      	adds	r3, #4
 8009e58:	623b      	str	r3, [r7, #32]
        src_addr++;
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	61fb      	str	r3, [r7, #28]
        row_index--;
 8009e60:	7dfb      	ldrb	r3, [r7, #23]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1ef      	bne.n	8009e4c <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8009e6c:	f3bf 8f6f 	isb	sy
}
 8009e70:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009e72:	f3bf 8f4f 	dsb	sy
}
 8009e76:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009e78:	69b9      	ldr	r1, [r7, #24]
 8009e7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e7e:	f000 f85d 	bl	8009f3c <FLASH_WaitForLastOperation>
 8009e82:	4603      	mov	r3, r0
 8009e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d106      	bne.n	8009e9c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <HAL_FLASH_Program+0x120>)
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	4a0c      	ldr	r2, [pc, #48]	; (8009ec4 <HAL_FLASH_Program+0x120>)
 8009e94:	f023 0302 	bic.w	r3, r3, #2
 8009e98:	60d3      	str	r3, [r2, #12]
 8009e9a:	e007      	b.n	8009eac <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8009e9c:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <HAL_FLASH_Program+0x120>)
 8009e9e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009ea2:	4a08      	ldr	r2, [pc, #32]	; (8009ec4 <HAL_FLASH_Program+0x120>)
 8009ea4:	f023 0302 	bic.w	r3, r3, #2
 8009ea8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009eac:	4b04      	ldr	r3, [pc, #16]	; (8009ec0 <HAL_FLASH_Program+0x11c>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	751a      	strb	r2, [r3, #20]

  return status;
 8009eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3728      	adds	r7, #40	; 0x28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	24002000 	.word	0x24002000
 8009ec4:	52002000 	.word	0x52002000

08009ec8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009ecc:	4b18      	ldr	r3, [pc, #96]	; (8009f30 <HAL_FLASH_Unlock+0x68>)
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00d      	beq.n	8009ef4 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8009ed8:	4b15      	ldr	r3, [pc, #84]	; (8009f30 <HAL_FLASH_Unlock+0x68>)
 8009eda:	4a16      	ldr	r2, [pc, #88]	; (8009f34 <HAL_FLASH_Unlock+0x6c>)
 8009edc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8009ede:	4b14      	ldr	r3, [pc, #80]	; (8009f30 <HAL_FLASH_Unlock+0x68>)
 8009ee0:	4a15      	ldr	r2, [pc, #84]	; (8009f38 <HAL_FLASH_Unlock+0x70>)
 8009ee2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009ee4:	4b12      	ldr	r3, [pc, #72]	; (8009f30 <HAL_FLASH_Unlock+0x68>)
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e018      	b.n	8009f26 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8009ef4:	4b0e      	ldr	r3, [pc, #56]	; (8009f30 <HAL_FLASH_Unlock+0x68>)
 8009ef6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d010      	beq.n	8009f24 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8009f02:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <HAL_FLASH_Unlock+0x68>)
 8009f04:	4a0b      	ldr	r2, [pc, #44]	; (8009f34 <HAL_FLASH_Unlock+0x6c>)
 8009f06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8009f0a:	4b09      	ldr	r3, [pc, #36]	; (8009f30 <HAL_FLASH_Unlock+0x68>)
 8009f0c:	4a0a      	ldr	r2, [pc, #40]	; (8009f38 <HAL_FLASH_Unlock+0x70>)
 8009f0e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8009f12:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <HAL_FLASH_Unlock+0x68>)
 8009f14:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e000      	b.n	8009f26 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	52002000 	.word	0x52002000
 8009f34:	45670123 	.word	0x45670123
 8009f38:	cdef89ab 	.word	0xcdef89ab

08009f3c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8009f46:	2304      	movs	r3, #4
 8009f48:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8009f4e:	f7fa ff33 	bl	8004db8 <HAL_GetTick>
 8009f52:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d113      	bne.n	8009f82 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8009f5a:	4b41      	ldr	r3, [pc, #260]	; (800a060 <FLASH_WaitForLastOperation+0x124>)
 8009f5c:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009f5e:	e010      	b.n	8009f82 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f66:	d00c      	beq.n	8009f82 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009f68:	f7fa ff26 	bl	8004db8 <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d302      	bcc.n	8009f7e <FLASH_WaitForLastOperation+0x42>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e06a      	b.n	800a058 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	4b37      	ldr	r3, [pc, #220]	; (800a064 <FLASH_WaitForLastOperation+0x128>)
 8009f86:	4013      	ands	r3, r2
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d10a      	bne.n	8009fa4 <FLASH_WaitForLastOperation+0x68>
 8009f8e:	4b36      	ldr	r3, [pc, #216]	; (800a068 <FLASH_WaitForLastOperation+0x12c>)
 8009f90:	691a      	ldr	r2, [r3, #16]
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	4013      	ands	r3, r2
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	bf0c      	ite	eq
 8009f9c:	2301      	moveq	r3, #1
 8009f9e:	2300      	movne	r3, #0
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	e00c      	b.n	8009fbe <FLASH_WaitForLastOperation+0x82>
 8009fa4:	4b30      	ldr	r3, [pc, #192]	; (800a068 <FLASH_WaitForLastOperation+0x12c>)
 8009fa6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009faa:	43da      	mvns	r2, r3
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	4013      	ands	r3, r2
 8009fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	bf0c      	ite	eq
 8009fb8:	2301      	moveq	r3, #1
 8009fba:	2300      	movne	r3, #0
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1ce      	bne.n	8009f60 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d105      	bne.n	8009fd4 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8009fc8:	4b27      	ldr	r3, [pc, #156]	; (800a068 <FLASH_WaitForLastOperation+0x12c>)
 8009fca:	691a      	ldr	r2, [r3, #16]
 8009fcc:	4b27      	ldr	r3, [pc, #156]	; (800a06c <FLASH_WaitForLastOperation+0x130>)
 8009fce:	4013      	ands	r3, r2
 8009fd0:	613b      	str	r3, [r7, #16]
 8009fd2:	e007      	b.n	8009fe4 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8009fd4:	4b24      	ldr	r3, [pc, #144]	; (800a068 <FLASH_WaitForLastOperation+0x12c>)
 8009fd6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8009fda:	4b24      	ldr	r3, [pc, #144]	; (800a06c <FLASH_WaitForLastOperation+0x130>)
 8009fdc:	4013      	ands	r3, r2
 8009fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fe2:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d017      	beq.n	800a01e <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8009fee:	4b20      	ldr	r3, [pc, #128]	; (800a070 <FLASH_WaitForLastOperation+0x134>)
 8009ff0:	699a      	ldr	r2, [r3, #24]
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	4a1e      	ldr	r2, [pc, #120]	; (800a070 <FLASH_WaitForLastOperation+0x134>)
 8009ff8:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4b19      	ldr	r3, [pc, #100]	; (800a064 <FLASH_WaitForLastOperation+0x128>)
 8009ffe:	4013      	ands	r3, r2
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	429a      	cmp	r2, r3
 800a004:	d103      	bne.n	800a00e <FLASH_WaitForLastOperation+0xd2>
 800a006:	4a18      	ldr	r2, [pc, #96]	; (800a068 <FLASH_WaitForLastOperation+0x12c>)
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	6153      	str	r3, [r2, #20]
 800a00c:	e005      	b.n	800a01a <FLASH_WaitForLastOperation+0xde>
 800a00e:	4a16      	ldr	r2, [pc, #88]	; (800a068 <FLASH_WaitForLastOperation+0x12c>)
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a016:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e01c      	b.n	800a058 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d10b      	bne.n	800a03c <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a024:	4b10      	ldr	r3, [pc, #64]	; (800a068 <FLASH_WaitForLastOperation+0x12c>)
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a02c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a030:	d111      	bne.n	800a056 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a032:	4b0d      	ldr	r3, [pc, #52]	; (800a068 <FLASH_WaitForLastOperation+0x12c>)
 800a034:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a038:	615a      	str	r2, [r3, #20]
 800a03a:	e00c      	b.n	800a056 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <FLASH_WaitForLastOperation+0x12c>)
 800a03e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a04a:	d104      	bne.n	800a056 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800a04c:	4b06      	ldr	r3, [pc, #24]	; (800a068 <FLASH_WaitForLastOperation+0x12c>)
 800a04e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a052:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	80000004 	.word	0x80000004
 800a064:	1fef000f 	.word	0x1fef000f
 800a068:	52002000 	.word	0x52002000
 800a06c:	17ee0000 	.word	0x17ee0000
 800a070:	24002000 	.word	0x24002000

0800a074 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a082:	4b5e      	ldr	r3, [pc, #376]	; (800a1fc <HAL_FLASHEx_Erase+0x188>)
 800a084:	7d1b      	ldrb	r3, [r3, #20]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d101      	bne.n	800a08e <HAL_FLASHEx_Erase+0x1a>
 800a08a:	2302      	movs	r3, #2
 800a08c:	e0b2      	b.n	800a1f4 <HAL_FLASHEx_Erase+0x180>
 800a08e:	4b5b      	ldr	r3, [pc, #364]	; (800a1fc <HAL_FLASHEx_Erase+0x188>)
 800a090:	2201      	movs	r2, #1
 800a092:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a094:	4b59      	ldr	r3, [pc, #356]	; (800a1fc <HAL_FLASHEx_Erase+0x188>)
 800a096:	2200      	movs	r2, #0
 800a098:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d009      	beq.n	800a0ba <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a0ac:	f7ff ff46 	bl	8009f3c <FLASH_WaitForLastOperation>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d009      	beq.n	800a0da <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800a0c6:	2102      	movs	r1, #2
 800a0c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a0cc:	f7ff ff36 	bl	8009f3c <FLASH_WaitForLastOperation>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f040 8085 	bne.w	800a1ec <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d136      	bne.n	800a158 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	691a      	ldr	r2, [r3, #16]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	f000 f887 	bl	800a208 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00f      	beq.n	800a126 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a106:	2101      	movs	r1, #1
 800a108:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a10c:	f7ff ff16 	bl	8009f3c <FLASH_WaitForLastOperation>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a11a:	4b39      	ldr	r3, [pc, #228]	; (800a200 <HAL_FLASHEx_Erase+0x18c>)
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	4a38      	ldr	r2, [pc, #224]	; (800a200 <HAL_FLASHEx_Erase+0x18c>)
 800a120:	f023 0308 	bic.w	r3, r3, #8
 800a124:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f003 0302 	and.w	r3, r3, #2
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d05c      	beq.n	800a1ec <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800a132:	2102      	movs	r1, #2
 800a134:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a138:	f7ff ff00 	bl	8009f3c <FLASH_WaitForLastOperation>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800a146:	4b2e      	ldr	r3, [pc, #184]	; (800a200 <HAL_FLASHEx_Erase+0x18c>)
 800a148:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a14c:	4a2c      	ldr	r2, [pc, #176]	; (800a200 <HAL_FLASHEx_Erase+0x18c>)
 800a14e:	f023 0308 	bic.w	r3, r3, #8
 800a152:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800a156:	e049      	b.n	800a1ec <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a15e:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	60bb      	str	r3, [r7, #8]
 800a166:	e039      	b.n	800a1dc <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6859      	ldr	r1, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	461a      	mov	r2, r3
 800a172:	68b8      	ldr	r0, [r7, #8]
 800a174:	f000 f8b2 	bl	800a2dc <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00c      	beq.n	800a19e <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a184:	2101      	movs	r1, #1
 800a186:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a18a:	f7ff fed7 	bl	8009f3c <FLASH_WaitForLastOperation>
 800a18e:	4603      	mov	r3, r0
 800a190:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a192:	4b1b      	ldr	r3, [pc, #108]	; (800a200 <HAL_FLASHEx_Erase+0x18c>)
 800a194:	68da      	ldr	r2, [r3, #12]
 800a196:	491a      	ldr	r1, [pc, #104]	; (800a200 <HAL_FLASHEx_Erase+0x18c>)
 800a198:	4b1a      	ldr	r3, [pc, #104]	; (800a204 <HAL_FLASHEx_Erase+0x190>)
 800a19a:	4013      	ands	r3, r2
 800a19c:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f003 0302 	and.w	r3, r3, #2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00e      	beq.n	800a1c8 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800a1aa:	2102      	movs	r1, #2
 800a1ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a1b0:	f7ff fec4 	bl	8009f3c <FLASH_WaitForLastOperation>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a1b8:	4b11      	ldr	r3, [pc, #68]	; (800a200 <HAL_FLASHEx_Erase+0x18c>)
 800a1ba:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a1be:	4910      	ldr	r1, [pc, #64]	; (800a200 <HAL_FLASHEx_Erase+0x18c>)
 800a1c0:	4b10      	ldr	r3, [pc, #64]	; (800a204 <HAL_FLASHEx_Erase+0x190>)
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	601a      	str	r2, [r3, #0]
          break;
 800a1d4:	e00a      	b.n	800a1ec <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	60bb      	str	r3, [r7, #8]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	68da      	ldr	r2, [r3, #12]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d3bd      	bcc.n	800a168 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a1ec:	4b03      	ldr	r3, [pc, #12]	; (800a1fc <HAL_FLASHEx_Erase+0x188>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	751a      	strb	r2, [r3, #20]

  return status;
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	24002000 	.word	0x24002000
 800a200:	52002000 	.word	0x52002000
 800a204:	fffff8fb 	.word	0xfffff8fb

0800a208 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	f003 0303 	and.w	r3, r3, #3
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d122      	bne.n	800a262 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a21c:	4b2e      	ldr	r3, [pc, #184]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	4a2d      	ldr	r2, [pc, #180]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a222:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a226:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800a228:	4b2b      	ldr	r3, [pc, #172]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a22a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a22e:	4a2a      	ldr	r2, [pc, #168]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a230:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a234:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800a238:	4b27      	ldr	r3, [pc, #156]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	4926      	ldr	r1, [pc, #152]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4313      	orrs	r3, r2
 800a242:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800a244:	4b24      	ldr	r3, [pc, #144]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a246:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a24a:	4923      	ldr	r1, [pc, #140]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4313      	orrs	r3, r2
 800a250:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800a254:	4b20      	ldr	r3, [pc, #128]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	4a1f      	ldr	r2, [pc, #124]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a25a:	f043 0310 	orr.w	r3, r3, #16
 800a25e:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a260:	e033      	b.n	800a2ca <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	f003 0301 	and.w	r3, r3, #1
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d011      	beq.n	800a290 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a26c:	4b1a      	ldr	r3, [pc, #104]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	4a19      	ldr	r2, [pc, #100]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a272:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a276:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a278:	4b17      	ldr	r3, [pc, #92]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	4916      	ldr	r1, [pc, #88]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4313      	orrs	r3, r2
 800a282:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a284:	4b14      	ldr	r3, [pc, #80]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	4a13      	ldr	r2, [pc, #76]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a28a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800a28e:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	f003 0302 	and.w	r3, r3, #2
 800a296:	2b00      	cmp	r3, #0
 800a298:	d017      	beq.n	800a2ca <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800a29a:	4b0f      	ldr	r3, [pc, #60]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a29c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a2a0:	4a0d      	ldr	r2, [pc, #52]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a2a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a2a6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800a2aa:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a2ac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a2b0:	4909      	ldr	r1, [pc, #36]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800a2ba:	4b07      	ldr	r3, [pc, #28]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a2bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a2c0:	4a05      	ldr	r2, [pc, #20]	; (800a2d8 <FLASH_MassErase+0xd0>)
 800a2c2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800a2c6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800a2ca:	bf00      	nop
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	52002000 	.word	0x52002000

0800a2dc <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	f003 0301 	and.w	r3, r3, #1
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d010      	beq.n	800a314 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a2f2:	4b18      	ldr	r3, [pc, #96]	; (800a354 <FLASH_Erase_Sector+0x78>)
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	4a17      	ldr	r2, [pc, #92]	; (800a354 <FLASH_Erase_Sector+0x78>)
 800a2f8:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800a2fc:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a2fe:	4b15      	ldr	r3, [pc, #84]	; (800a354 <FLASH_Erase_Sector+0x78>)
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	0219      	lsls	r1, r3, #8
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	430b      	orrs	r3, r1
 800a30a:	4313      	orrs	r3, r2
 800a30c:	4a11      	ldr	r2, [pc, #68]	; (800a354 <FLASH_Erase_Sector+0x78>)
 800a30e:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800a312:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d014      	beq.n	800a348 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a31e:	4b0d      	ldr	r3, [pc, #52]	; (800a354 <FLASH_Erase_Sector+0x78>)
 800a320:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a324:	4a0b      	ldr	r2, [pc, #44]	; (800a354 <FLASH_Erase_Sector+0x78>)
 800a326:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800a32a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a32e:	4b09      	ldr	r3, [pc, #36]	; (800a354 <FLASH_Erase_Sector+0x78>)
 800a330:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	0219      	lsls	r1, r3, #8
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	430b      	orrs	r3, r1
 800a33c:	4313      	orrs	r3, r2
 800a33e:	4a05      	ldr	r2, [pc, #20]	; (800a354 <FLASH_Erase_Sector+0x78>)
 800a340:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800a344:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a348:	bf00      	nop
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	52002000 	.word	0x52002000

0800a358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a358:	b480      	push	{r7}
 800a35a:	b089      	sub	sp, #36	; 0x24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a362:	2300      	movs	r3, #0
 800a364:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a366:	4b89      	ldr	r3, [pc, #548]	; (800a58c <HAL_GPIO_Init+0x234>)
 800a368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a36a:	e194      	b.n	800a696 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	2101      	movs	r1, #1
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	fa01 f303 	lsl.w	r3, r1, r3
 800a378:	4013      	ands	r3, r2
 800a37a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 8186 	beq.w	800a690 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	f003 0303 	and.w	r3, r3, #3
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d005      	beq.n	800a39c <HAL_GPIO_Init+0x44>
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	f003 0303 	and.w	r3, r3, #3
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d130      	bne.n	800a3fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	005b      	lsls	r3, r3, #1
 800a3a6:	2203      	movs	r2, #3
 800a3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ac:	43db      	mvns	r3, r3
 800a3ae:	69ba      	ldr	r2, [r7, #24]
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	68da      	ldr	r2, [r3, #12]
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c0:	69ba      	ldr	r2, [r7, #24]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	69ba      	ldr	r2, [r7, #24]
 800a3ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3da:	43db      	mvns	r3, r3
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	4013      	ands	r3, r2
 800a3e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	091b      	lsrs	r3, r3, #4
 800a3e8:	f003 0201 	and.w	r2, r3, #1
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f2:	69ba      	ldr	r2, [r7, #24]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	69ba      	ldr	r2, [r7, #24]
 800a3fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	2b03      	cmp	r3, #3
 800a408:	d017      	beq.n	800a43a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	2203      	movs	r2, #3
 800a416:	fa02 f303 	lsl.w	r3, r2, r3
 800a41a:	43db      	mvns	r3, r3
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	4013      	ands	r3, r2
 800a420:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	fa02 f303 	lsl.w	r3, r2, r3
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	4313      	orrs	r3, r2
 800a432:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f003 0303 	and.w	r3, r3, #3
 800a442:	2b02      	cmp	r3, #2
 800a444:	d123      	bne.n	800a48e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	08da      	lsrs	r2, r3, #3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3208      	adds	r2, #8
 800a44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	f003 0307 	and.w	r3, r3, #7
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	220f      	movs	r2, #15
 800a45e:	fa02 f303 	lsl.w	r3, r2, r3
 800a462:	43db      	mvns	r3, r3
 800a464:	69ba      	ldr	r2, [r7, #24]
 800a466:	4013      	ands	r3, r2
 800a468:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	691a      	ldr	r2, [r3, #16]
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	f003 0307 	and.w	r3, r3, #7
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	fa02 f303 	lsl.w	r3, r2, r3
 800a47a:	69ba      	ldr	r2, [r7, #24]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	08da      	lsrs	r2, r3, #3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3208      	adds	r2, #8
 800a488:	69b9      	ldr	r1, [r7, #24]
 800a48a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	005b      	lsls	r3, r3, #1
 800a498:	2203      	movs	r2, #3
 800a49a:	fa02 f303 	lsl.w	r3, r2, r3
 800a49e:	43db      	mvns	r3, r3
 800a4a0:	69ba      	ldr	r2, [r7, #24]
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	f003 0203 	and.w	r2, r3, #3
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b6:	69ba      	ldr	r2, [r7, #24]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	69ba      	ldr	r2, [r7, #24]
 800a4c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 80e0 	beq.w	800a690 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4d0:	4b2f      	ldr	r3, [pc, #188]	; (800a590 <HAL_GPIO_Init+0x238>)
 800a4d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a4d6:	4a2e      	ldr	r2, [pc, #184]	; (800a590 <HAL_GPIO_Init+0x238>)
 800a4d8:	f043 0302 	orr.w	r3, r3, #2
 800a4dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a4e0:	4b2b      	ldr	r3, [pc, #172]	; (800a590 <HAL_GPIO_Init+0x238>)
 800a4e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a4e6:	f003 0302 	and.w	r3, r3, #2
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a4ee:	4a29      	ldr	r2, [pc, #164]	; (800a594 <HAL_GPIO_Init+0x23c>)
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	089b      	lsrs	r3, r3, #2
 800a4f4:	3302      	adds	r3, #2
 800a4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	220f      	movs	r2, #15
 800a506:	fa02 f303 	lsl.w	r3, r2, r3
 800a50a:	43db      	mvns	r3, r3
 800a50c:	69ba      	ldr	r2, [r7, #24]
 800a50e:	4013      	ands	r3, r2
 800a510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a20      	ldr	r2, [pc, #128]	; (800a598 <HAL_GPIO_Init+0x240>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d052      	beq.n	800a5c0 <HAL_GPIO_Init+0x268>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a1f      	ldr	r2, [pc, #124]	; (800a59c <HAL_GPIO_Init+0x244>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d031      	beq.n	800a586 <HAL_GPIO_Init+0x22e>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a1e      	ldr	r2, [pc, #120]	; (800a5a0 <HAL_GPIO_Init+0x248>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d02b      	beq.n	800a582 <HAL_GPIO_Init+0x22a>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a1d      	ldr	r2, [pc, #116]	; (800a5a4 <HAL_GPIO_Init+0x24c>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d025      	beq.n	800a57e <HAL_GPIO_Init+0x226>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a1c      	ldr	r2, [pc, #112]	; (800a5a8 <HAL_GPIO_Init+0x250>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d01f      	beq.n	800a57a <HAL_GPIO_Init+0x222>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a1b      	ldr	r2, [pc, #108]	; (800a5ac <HAL_GPIO_Init+0x254>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d019      	beq.n	800a576 <HAL_GPIO_Init+0x21e>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a1a      	ldr	r2, [pc, #104]	; (800a5b0 <HAL_GPIO_Init+0x258>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d013      	beq.n	800a572 <HAL_GPIO_Init+0x21a>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a19      	ldr	r2, [pc, #100]	; (800a5b4 <HAL_GPIO_Init+0x25c>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d00d      	beq.n	800a56e <HAL_GPIO_Init+0x216>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a18      	ldr	r2, [pc, #96]	; (800a5b8 <HAL_GPIO_Init+0x260>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d007      	beq.n	800a56a <HAL_GPIO_Init+0x212>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a17      	ldr	r2, [pc, #92]	; (800a5bc <HAL_GPIO_Init+0x264>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d101      	bne.n	800a566 <HAL_GPIO_Init+0x20e>
 800a562:	2309      	movs	r3, #9
 800a564:	e02d      	b.n	800a5c2 <HAL_GPIO_Init+0x26a>
 800a566:	230a      	movs	r3, #10
 800a568:	e02b      	b.n	800a5c2 <HAL_GPIO_Init+0x26a>
 800a56a:	2308      	movs	r3, #8
 800a56c:	e029      	b.n	800a5c2 <HAL_GPIO_Init+0x26a>
 800a56e:	2307      	movs	r3, #7
 800a570:	e027      	b.n	800a5c2 <HAL_GPIO_Init+0x26a>
 800a572:	2306      	movs	r3, #6
 800a574:	e025      	b.n	800a5c2 <HAL_GPIO_Init+0x26a>
 800a576:	2305      	movs	r3, #5
 800a578:	e023      	b.n	800a5c2 <HAL_GPIO_Init+0x26a>
 800a57a:	2304      	movs	r3, #4
 800a57c:	e021      	b.n	800a5c2 <HAL_GPIO_Init+0x26a>
 800a57e:	2303      	movs	r3, #3
 800a580:	e01f      	b.n	800a5c2 <HAL_GPIO_Init+0x26a>
 800a582:	2302      	movs	r3, #2
 800a584:	e01d      	b.n	800a5c2 <HAL_GPIO_Init+0x26a>
 800a586:	2301      	movs	r3, #1
 800a588:	e01b      	b.n	800a5c2 <HAL_GPIO_Init+0x26a>
 800a58a:	bf00      	nop
 800a58c:	58000080 	.word	0x58000080
 800a590:	58024400 	.word	0x58024400
 800a594:	58000400 	.word	0x58000400
 800a598:	58020000 	.word	0x58020000
 800a59c:	58020400 	.word	0x58020400
 800a5a0:	58020800 	.word	0x58020800
 800a5a4:	58020c00 	.word	0x58020c00
 800a5a8:	58021000 	.word	0x58021000
 800a5ac:	58021400 	.word	0x58021400
 800a5b0:	58021800 	.word	0x58021800
 800a5b4:	58021c00 	.word	0x58021c00
 800a5b8:	58022000 	.word	0x58022000
 800a5bc:	58022400 	.word	0x58022400
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	f002 0203 	and.w	r2, r2, #3
 800a5c8:	0092      	lsls	r2, r2, #2
 800a5ca:	4093      	lsls	r3, r2
 800a5cc:	69ba      	ldr	r2, [r7, #24]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a5d2:	4938      	ldr	r1, [pc, #224]	; (800a6b4 <HAL_GPIO_Init+0x35c>)
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	089b      	lsrs	r3, r3, #2
 800a5d8:	3302      	adds	r3, #2
 800a5da:	69ba      	ldr	r2, [r7, #24]
 800a5dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a5e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	43db      	mvns	r3, r3
 800a5ec:	69ba      	ldr	r2, [r7, #24]
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	4313      	orrs	r3, r2
 800a604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a60e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	43db      	mvns	r3, r3
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	4013      	ands	r3, r2
 800a61e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d003      	beq.n	800a634 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a62c:	69ba      	ldr	r2, [r7, #24]
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	4313      	orrs	r3, r2
 800a632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	43db      	mvns	r3, r3
 800a646:	69ba      	ldr	r2, [r7, #24]
 800a648:	4013      	ands	r3, r2
 800a64a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a658:	69ba      	ldr	r2, [r7, #24]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	43db      	mvns	r3, r3
 800a670:	69ba      	ldr	r2, [r7, #24]
 800a672:	4013      	ands	r3, r2
 800a674:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d003      	beq.n	800a68a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	4313      	orrs	r3, r2
 800a688:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	69ba      	ldr	r2, [r7, #24]
 800a68e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	3301      	adds	r3, #1
 800a694:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f47f ae63 	bne.w	800a36c <HAL_GPIO_Init+0x14>
  }
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	3724      	adds	r7, #36	; 0x24
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	58000400 	.word	0x58000400

0800a6b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	887b      	ldrh	r3, [r7, #2]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d002      	beq.n	800a6d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	73fb      	strb	r3, [r7, #15]
 800a6d4:	e001      	b.n	800a6da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	807b      	strh	r3, [r7, #2]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a6f8:	787b      	ldrb	r3, [r7, #1]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d003      	beq.n	800a706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a6fe:	887a      	ldrh	r2, [r7, #2]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a704:	e003      	b.n	800a70e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a706:	887b      	ldrh	r3, [r7, #2]
 800a708:	041a      	lsls	r2, r3, #16
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	619a      	str	r2, [r3, #24]
}
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
	...

0800a71c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e08b      	b.n	800a846 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d106      	bne.n	800a748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7f7 fa90 	bl	8001c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2224      	movs	r2, #36	; 0x24
 800a74c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f022 0201 	bic.w	r2, r2, #1
 800a75e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a76c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a77c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d107      	bne.n	800a796 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	689a      	ldr	r2, [r3, #8]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a792:	609a      	str	r2, [r3, #8]
 800a794:	e006      	b.n	800a7a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	689a      	ldr	r2, [r3, #8]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a7a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	d108      	bne.n	800a7be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7ba:	605a      	str	r2, [r3, #4]
 800a7bc:	e007      	b.n	800a7ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6859      	ldr	r1, [r3, #4]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	4b1d      	ldr	r3, [pc, #116]	; (800a850 <HAL_I2C_Init+0x134>)
 800a7da:	430b      	orrs	r3, r1
 800a7dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68da      	ldr	r2, [r3, #12]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	691a      	ldr	r2, [r3, #16]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	430a      	orrs	r2, r1
 800a806:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	69d9      	ldr	r1, [r3, #28]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a1a      	ldr	r2, [r3, #32]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	430a      	orrs	r2, r1
 800a816:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f042 0201 	orr.w	r2, r2, #1
 800a826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2220      	movs	r2, #32
 800a832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	02008000 	.word	0x02008000

0800a854 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b08a      	sub	sp, #40	; 0x28
 800a858:	af02      	add	r7, sp, #8
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	607a      	str	r2, [r7, #4]
 800a85e:	461a      	mov	r2, r3
 800a860:	460b      	mov	r3, r1
 800a862:	817b      	strh	r3, [r7, #10]
 800a864:	4613      	mov	r3, r2
 800a866:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800a868:	2300      	movs	r3, #0
 800a86a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b20      	cmp	r3, #32
 800a876:	f040 80ef 	bne.w	800aa58 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a888:	d101      	bne.n	800a88e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800a88a:	2302      	movs	r3, #2
 800a88c:	e0e5      	b.n	800aa5a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a894:	2b01      	cmp	r3, #1
 800a896:	d101      	bne.n	800a89c <HAL_I2C_Master_Transmit_DMA+0x48>
 800a898:	2302      	movs	r3, #2
 800a89a:	e0de      	b.n	800aa5a <HAL_I2C_Master_Transmit_DMA+0x206>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2221      	movs	r2, #33	; 0x21
 800a8a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2210      	movs	r2, #16
 800a8b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	893a      	ldrh	r2, [r7, #8]
 800a8c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	4a66      	ldr	r2, [pc, #408]	; (800aa64 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800a8ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4a66      	ldr	r2, [pc, #408]	; (800aa68 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800a8d0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	2bff      	cmp	r3, #255	; 0xff
 800a8da:	d906      	bls.n	800a8ea <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	22ff      	movs	r2, #255	; 0xff
 800a8e0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a8e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	e007      	b.n	800a8fa <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a8f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a8f8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d01a      	beq.n	800a938 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a906:	781a      	ldrb	r2, [r3, #0]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a91c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a922:	b29b      	uxth	r3, r3
 800a924:	3b01      	subs	r3, #1
 800a926:	b29a      	uxth	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a930:	3b01      	subs	r3, #1
 800a932:	b29a      	uxth	r2, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d074      	beq.n	800aa2a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	2b00      	cmp	r3, #0
 800a946:	d022      	beq.n	800a98e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94c:	4a47      	ldr	r2, [pc, #284]	; (800aa6c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800a94e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a954:	4a46      	ldr	r2, [pc, #280]	; (800aa70 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800a956:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95c:	2200      	movs	r2, #0
 800a95e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a964:	2200      	movs	r2, #0
 800a966:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800a978:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800a97e:	f7fc ff17 	bl	80077b0 <HAL_DMA_Start_IT>
 800a982:	4603      	mov	r3, r0
 800a984:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a986:	7dfb      	ldrb	r3, [r7, #23]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d13a      	bne.n	800aa02 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800a98c:	e013      	b.n	800a9b6 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2220      	movs	r2, #32
 800a992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e051      	b.n	800aa5a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	3301      	adds	r3, #1
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	8979      	ldrh	r1, [r7, #10]
 800a9c2:	4b2c      	ldr	r3, [pc, #176]	; (800aa74 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f002 f83b 	bl	800ca44 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a9e8:	2110      	movs	r1, #16
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f002 f85c 	bl	800caa8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	e028      	b.n	800aa54 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2220      	movs	r2, #32
 800aa06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa16:	f043 0210 	orr.w	r2, r3, #16
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e017      	b.n	800aa5a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4a12      	ldr	r2, [pc, #72]	; (800aa78 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800aa2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	8979      	ldrh	r1, [r7, #10]
 800aa36:	4b0f      	ldr	r3, [pc, #60]	; (800aa74 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f002 f800 	bl	800ca44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f002 f82a 	bl	800caa8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800aa54:	2300      	movs	r3, #0
 800aa56:	e000      	b.n	800aa5a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800aa58:	2302      	movs	r3, #2
  }
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3720      	adds	r7, #32
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	ffff0000 	.word	0xffff0000
 800aa68:	0800b2af 	.word	0x0800b2af
 800aa6c:	0800c667 	.word	0x0800c667
 800aa70:	0800c795 	.word	0x0800c795
 800aa74:	80002000 	.word	0x80002000
 800aa78:	0800ae3f 	.word	0x0800ae3f

0800aa7c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	607a      	str	r2, [r7, #4]
 800aa86:	461a      	mov	r2, r3
 800aa88:	460b      	mov	r3, r1
 800aa8a:	817b      	strh	r3, [r7, #10]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b20      	cmp	r3, #32
 800aa9a:	f040 80cd 	bne.w	800ac38 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aaa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaac:	d101      	bne.n	800aab2 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800aaae:	2302      	movs	r3, #2
 800aab0:	e0c3      	b.n	800ac3a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d101      	bne.n	800aac0 <HAL_I2C_Master_Receive_DMA+0x44>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e0bc      	b.n	800ac3a <HAL_I2C_Master_Receive_DMA+0x1be>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2222      	movs	r2, #34	; 0x22
 800aacc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2210      	movs	r2, #16
 800aad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	893a      	ldrh	r2, [r7, #8]
 800aae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	4a55      	ldr	r2, [pc, #340]	; (800ac44 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800aaee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4a55      	ldr	r2, [pc, #340]	; (800ac48 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800aaf4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	2bff      	cmp	r3, #255	; 0xff
 800aafe:	d906      	bls.n	800ab0e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	22ff      	movs	r2, #255	; 0xff
 800ab04:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800ab06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab0a:	617b      	str	r3, [r7, #20]
 800ab0c:	e007      	b.n	800ab1e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800ab18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab1c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d070      	beq.n	800ac08 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d020      	beq.n	800ab70 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab32:	4a46      	ldr	r2, [pc, #280]	; (800ac4c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800ab34:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3a:	4a45      	ldr	r2, [pc, #276]	; (800ac50 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800ab3c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab42:	2200      	movs	r2, #0
 800ab44:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3324      	adds	r3, #36	; 0x24
 800ab58:	4619      	mov	r1, r3
 800ab5a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ab60:	f7fc fe26 	bl	80077b0 <HAL_DMA_Start_IT>
 800ab64:	4603      	mov	r3, r0
 800ab66:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ab68:	7cfb      	ldrb	r3, [r7, #19]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d138      	bne.n	800abe0 <HAL_I2C_Master_Receive_DMA+0x164>
 800ab6e:	e013      	b.n	800ab98 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2220      	movs	r2, #32
 800ab74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e050      	b.n	800ac3a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	8979      	ldrh	r1, [r7, #10]
 800aba0:	4b2c      	ldr	r3, [pc, #176]	; (800ac54 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f001 ff4c 	bl	800ca44 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	b29a      	uxth	r2, r3
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800abc6:	2110      	movs	r1, #16
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f001 ff6d 	bl	800caa8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	e029      	b.n	800ac34 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2220      	movs	r2, #32
 800abe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf4:	f043 0210 	orr.w	r2, r3, #16
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e018      	b.n	800ac3a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4a13      	ldr	r2, [pc, #76]	; (800ac58 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800ac0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac12:	b2da      	uxtb	r2, r3
 800ac14:	8979      	ldrh	r1, [r7, #10]
 800ac16:	4b0f      	ldr	r3, [pc, #60]	; (800ac54 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f001 ff10 	bl	800ca44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ac2c:	2102      	movs	r1, #2
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f001 ff3a 	bl	800caa8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	e000      	b.n	800ac3a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800ac38:	2302      	movs	r3, #2
  }
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	ffff0000 	.word	0xffff0000
 800ac48:	0800b2af 	.word	0x0800b2af
 800ac4c:	0800c6fd 	.word	0x0800c6fd
 800ac50:	0800c795 	.word	0x0800c795
 800ac54:	80002400 	.word	0x80002400
 800ac58:	0800ae3f 	.word	0x0800ae3f

0800ac5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d005      	beq.n	800ac88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	68f9      	ldr	r1, [r7, #12]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	4798      	blx	r3
  }
}
 800ac88:	bf00      	nop
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	0a1b      	lsrs	r3, r3, #8
 800acac:	f003 0301 	and.w	r3, r3, #1
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d010      	beq.n	800acd6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	09db      	lsrs	r3, r3, #7
 800acb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00a      	beq.n	800acd6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc4:	f043 0201 	orr.w	r2, r3, #1
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acd4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	0a9b      	lsrs	r3, r3, #10
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d010      	beq.n	800ad04 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	09db      	lsrs	r3, r3, #7
 800ace6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00a      	beq.n	800ad04 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf2:	f043 0208 	orr.w	r2, r3, #8
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad02:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	0a5b      	lsrs	r3, r3, #9
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d010      	beq.n	800ad32 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	09db      	lsrs	r3, r3, #7
 800ad14:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad20:	f043 0202 	orr.w	r2, r3, #2
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad30:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f003 030b 	and.w	r3, r3, #11
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800ad42:	68f9      	ldr	r1, [r7, #12]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f001 fb53 	bl	800c3f0 <I2C_ITError>
  }
}
 800ad4a:	bf00      	nop
 800ad4c:	3718      	adds	r7, #24
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b083      	sub	sp, #12
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ad5a:	bf00      	nop
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ad6e:	bf00      	nop
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ad82:	bf00      	nop
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ad96:	bf00      	nop
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	460b      	mov	r3, r1
 800adac:	70fb      	strb	r3, [r7, #3]
 800adae:	4613      	mov	r3, r2
 800adb0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800adb2:	bf00      	nop
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b083      	sub	sp, #12
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800add2:	b480      	push	{r7}
 800add4:	b083      	sub	sp, #12
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800adda:	bf00      	nop
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800adee:	bf00      	nop
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ae02:	bf00      	nop
 800ae04:	370c      	adds	r7, #12
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b083      	sub	sp, #12
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ae16:	bf00      	nop
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ae22:	b480      	push	{r7}
 800ae24:	b083      	sub	sp, #12
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae30:	b2db      	uxtb	r3, r3
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b088      	sub	sp, #32
 800ae42:	af02      	add	r7, sp, #8
 800ae44:	60f8      	str	r0, [r7, #12]
 800ae46:	60b9      	str	r1, [r7, #8]
 800ae48:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d101      	bne.n	800ae5c <I2C_Master_ISR_IT+0x1e>
 800ae58:	2302      	movs	r3, #2
 800ae5a:	e120      	b.n	800b09e <I2C_Master_ISR_IT+0x260>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	091b      	lsrs	r3, r3, #4
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d013      	beq.n	800ae98 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	091b      	lsrs	r3, r3, #4
 800ae74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00d      	beq.n	800ae98 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2210      	movs	r2, #16
 800ae82:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae88:	f043 0204 	orr.w	r2, r3, #4
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f001 fbc4 	bl	800c61e <I2C_Flush_TXDR>
 800ae96:	e0ed      	b.n	800b074 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	089b      	lsrs	r3, r3, #2
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d023      	beq.n	800aeec <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	089b      	lsrs	r3, r3, #2
 800aea8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d01d      	beq.n	800aeec <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f023 0304 	bic.w	r3, r3, #4
 800aeb6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	b2d2      	uxtb	r2, r2
 800aec4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeca:	1c5a      	adds	r2, r3, #1
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aed4:	3b01      	subs	r3, #1
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	3b01      	subs	r3, #1
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aeea:	e0c3      	b.n	800b074 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	099b      	lsrs	r3, r3, #6
 800aef0:	f003 0301 	and.w	r3, r3, #1
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d12a      	bne.n	800af4e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	085b      	lsrs	r3, r3, #1
 800aefc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800af00:	2b00      	cmp	r3, #0
 800af02:	d024      	beq.n	800af4e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	085b      	lsrs	r3, r3, #1
 800af08:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d01e      	beq.n	800af4e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af14:	b29b      	uxth	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 80ac 	beq.w	800b074 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af20:	781a      	ldrb	r2, [r3, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	1c5a      	adds	r2, r3, #1
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af36:	3b01      	subs	r3, #1
 800af38:	b29a      	uxth	r2, r3
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af42:	b29b      	uxth	r3, r3
 800af44:	3b01      	subs	r3, #1
 800af46:	b29a      	uxth	r2, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800af4c:	e092      	b.n	800b074 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	09db      	lsrs	r3, r3, #7
 800af52:	f003 0301 	and.w	r3, r3, #1
 800af56:	2b00      	cmp	r3, #0
 800af58:	d05d      	beq.n	800b016 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	099b      	lsrs	r3, r3, #6
 800af5e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800af62:	2b00      	cmp	r3, #0
 800af64:	d057      	beq.n	800b016 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d040      	beq.n	800aff2 <I2C_Master_ISR_IT+0x1b4>
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af74:	2b00      	cmp	r3, #0
 800af76:	d13c      	bne.n	800aff2 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	b29b      	uxth	r3, r3
 800af80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af84:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	2bff      	cmp	r3, #255	; 0xff
 800af8e:	d90e      	bls.n	800afae <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	22ff      	movs	r2, #255	; 0xff
 800af94:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	8a79      	ldrh	r1, [r7, #18]
 800af9e:	2300      	movs	r3, #0
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	f001 fd4c 	bl	800ca44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afac:	e032      	b.n	800b014 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800afc0:	d00b      	beq.n	800afda <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afc6:	b2da      	uxtb	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	8a79      	ldrh	r1, [r7, #18]
 800afce:	2000      	movs	r0, #0
 800afd0:	9000      	str	r0, [sp, #0]
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f001 fd36 	bl	800ca44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afd8:	e01c      	b.n	800b014 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	8a79      	ldrh	r1, [r7, #18]
 800afe2:	2300      	movs	r3, #0
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f001 fd2a 	bl	800ca44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aff0:	e010      	b.n	800b014 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800affc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b000:	d003      	beq.n	800b00a <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f000 fdde 	bl	800bbc4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b008:	e034      	b.n	800b074 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b00a:	2140      	movs	r1, #64	; 0x40
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f001 f9ef 	bl	800c3f0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b012:	e02f      	b.n	800b074 <I2C_Master_ISR_IT+0x236>
 800b014:	e02e      	b.n	800b074 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	099b      	lsrs	r3, r3, #6
 800b01a:	f003 0301 	and.w	r3, r3, #1
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d028      	beq.n	800b074 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	099b      	lsrs	r3, r3, #6
 800b026:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d022      	beq.n	800b074 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b032:	b29b      	uxth	r3, r3
 800b034:	2b00      	cmp	r3, #0
 800b036:	d119      	bne.n	800b06c <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b046:	d015      	beq.n	800b074 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b050:	d108      	bne.n	800b064 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b060:	605a      	str	r2, [r3, #4]
 800b062:	e007      	b.n	800b074 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 fdad 	bl	800bbc4 <I2C_ITMasterSeqCplt>
 800b06a:	e003      	b.n	800b074 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b06c:	2140      	movs	r1, #64	; 0x40
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f001 f9be 	bl	800c3f0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	095b      	lsrs	r3, r3, #5
 800b078:	f003 0301 	and.w	r3, r3, #1
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d009      	beq.n	800b094 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	095b      	lsrs	r3, r3, #5
 800b084:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d003      	beq.n	800b094 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800b08c:	6979      	ldr	r1, [r7, #20]
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f000 fe34 	bl	800bcfc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3718      	adds	r7, #24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b086      	sub	sp, #24
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	60f8      	str	r0, [r7, #12]
 800b0ae:	60b9      	str	r1, [r7, #8]
 800b0b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d101      	bne.n	800b0ca <I2C_Slave_ISR_IT+0x24>
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e0ed      	b.n	800b2a6 <I2C_Slave_ISR_IT+0x200>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	095b      	lsrs	r3, r3, #5
 800b0d6:	f003 0301 	and.w	r3, r3, #1
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00a      	beq.n	800b0f4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	095b      	lsrs	r3, r3, #5
 800b0e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d004      	beq.n	800b0f4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b0ea:	6939      	ldr	r1, [r7, #16]
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 fecf 	bl	800be90 <I2C_ITSlaveCplt>
 800b0f2:	e0d3      	b.n	800b29c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	091b      	lsrs	r3, r3, #4
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d04d      	beq.n	800b19c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	091b      	lsrs	r3, r3, #4
 800b104:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d047      	beq.n	800b19c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b110:	b29b      	uxth	r3, r3
 800b112:	2b00      	cmp	r3, #0
 800b114:	d128      	bne.n	800b168 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b28      	cmp	r3, #40	; 0x28
 800b120:	d108      	bne.n	800b134 <I2C_Slave_ISR_IT+0x8e>
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b128:	d104      	bne.n	800b134 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b12a:	6939      	ldr	r1, [r7, #16]
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f001 f909 	bl	800c344 <I2C_ITListenCplt>
 800b132:	e032      	b.n	800b19a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b29      	cmp	r3, #41	; 0x29
 800b13e:	d10e      	bne.n	800b15e <I2C_Slave_ISR_IT+0xb8>
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b146:	d00a      	beq.n	800b15e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2210      	movs	r2, #16
 800b14e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f001 fa64 	bl	800c61e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f000 fd71 	bl	800bc3e <I2C_ITSlaveSeqCplt>
 800b15c:	e01d      	b.n	800b19a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2210      	movs	r2, #16
 800b164:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b166:	e096      	b.n	800b296 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2210      	movs	r2, #16
 800b16e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b174:	f043 0204 	orr.w	r2, r3, #4
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d004      	beq.n	800b18c <I2C_Slave_ISR_IT+0xe6>
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b188:	f040 8085 	bne.w	800b296 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b190:	4619      	mov	r1, r3
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f001 f92c 	bl	800c3f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b198:	e07d      	b.n	800b296 <I2C_Slave_ISR_IT+0x1f0>
 800b19a:	e07c      	b.n	800b296 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	089b      	lsrs	r3, r3, #2
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d030      	beq.n	800b20a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	089b      	lsrs	r3, r3, #2
 800b1ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d02a      	beq.n	800b20a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d018      	beq.n	800b1f0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c8:	b2d2      	uxtb	r2, r2
 800b1ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d14f      	bne.n	800b29a <I2C_Slave_ISR_IT+0x1f4>
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b200:	d04b      	beq.n	800b29a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f000 fd1b 	bl	800bc3e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b208:	e047      	b.n	800b29a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	08db      	lsrs	r3, r3, #3
 800b20e:	f003 0301 	and.w	r3, r3, #1
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00a      	beq.n	800b22c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	08db      	lsrs	r3, r3, #3
 800b21a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b222:	6939      	ldr	r1, [r7, #16]
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f000 fc49 	bl	800babc <I2C_ITAddrCplt>
 800b22a:	e037      	b.n	800b29c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	085b      	lsrs	r3, r3, #1
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b00      	cmp	r3, #0
 800b236:	d031      	beq.n	800b29c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	085b      	lsrs	r3, r3, #1
 800b23c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b240:	2b00      	cmp	r3, #0
 800b242:	d02b      	beq.n	800b29c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b248:	b29b      	uxth	r3, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d018      	beq.n	800b280 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b252:	781a      	ldrb	r2, [r3, #0]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b268:	b29b      	uxth	r3, r3
 800b26a:	3b01      	subs	r3, #1
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b276:	3b01      	subs	r3, #1
 800b278:	b29a      	uxth	r2, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	851a      	strh	r2, [r3, #40]	; 0x28
 800b27e:	e00d      	b.n	800b29c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b286:	d002      	beq.n	800b28e <I2C_Slave_ISR_IT+0x1e8>
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f000 fcd5 	bl	800bc3e <I2C_ITSlaveSeqCplt>
 800b294:	e002      	b.n	800b29c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800b296:	bf00      	nop
 800b298:	e000      	b.n	800b29c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800b29a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b088      	sub	sp, #32
 800b2b2:	af02      	add	r7, sp, #8
 800b2b4:	60f8      	str	r0, [r7, #12]
 800b2b6:	60b9      	str	r1, [r7, #8]
 800b2b8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d101      	bne.n	800b2c8 <I2C_Master_ISR_DMA+0x1a>
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	e0e1      	b.n	800b48c <I2C_Master_ISR_DMA+0x1de>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	091b      	lsrs	r3, r3, #4
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d017      	beq.n	800b30c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	091b      	lsrs	r3, r3, #4
 800b2e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d011      	beq.n	800b30c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2210      	movs	r2, #16
 800b2ee:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2f4:	f043 0204 	orr.w	r2, r3, #4
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b2fc:	2120      	movs	r1, #32
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f001 fbd2 	bl	800caa8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f001 f98a 	bl	800c61e <I2C_Flush_TXDR>
 800b30a:	e0ba      	b.n	800b482 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	09db      	lsrs	r3, r3, #7
 800b310:	f003 0301 	and.w	r3, r3, #1
 800b314:	2b00      	cmp	r3, #0
 800b316:	d072      	beq.n	800b3fe <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	099b      	lsrs	r3, r3, #6
 800b31c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b320:	2b00      	cmp	r3, #0
 800b322:	d06c      	beq.n	800b3fe <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b332:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b338:	b29b      	uxth	r3, r3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d04e      	beq.n	800b3dc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	b29b      	uxth	r3, r3
 800b346:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b34a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b350:	b29b      	uxth	r3, r3
 800b352:	2bff      	cmp	r3, #255	; 0xff
 800b354:	d906      	bls.n	800b364 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	22ff      	movs	r2, #255	; 0xff
 800b35a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800b35c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b360:	617b      	str	r3, [r7, #20]
 800b362:	e010      	b.n	800b386 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b368:	b29a      	uxth	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b372:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b376:	d003      	beq.n	800b380 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	e002      	b.n	800b386 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800b380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b384:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b38a:	b2da      	uxtb	r2, r3
 800b38c:	8a79      	ldrh	r1, [r7, #18]
 800b38e:	2300      	movs	r3, #0
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f001 fb55 	bl	800ca44 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b22      	cmp	r3, #34	; 0x22
 800b3b6:	d108      	bne.n	800b3ca <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3c6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b3c8:	e05b      	b.n	800b482 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b3da:	e052      	b.n	800b482 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ea:	d003      	beq.n	800b3f4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 fbe9 	bl	800bbc4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b3f2:	e046      	b.n	800b482 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b3f4:	2140      	movs	r1, #64	; 0x40
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	f000 fffa 	bl	800c3f0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b3fc:	e041      	b.n	800b482 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	099b      	lsrs	r3, r3, #6
 800b402:	f003 0301 	and.w	r3, r3, #1
 800b406:	2b00      	cmp	r3, #0
 800b408:	d029      	beq.n	800b45e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	099b      	lsrs	r3, r3, #6
 800b40e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b412:	2b00      	cmp	r3, #0
 800b414:	d023      	beq.n	800b45e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d119      	bne.n	800b454 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b42a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b42e:	d027      	beq.n	800b480 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b438:	d108      	bne.n	800b44c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b448:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b44a:	e019      	b.n	800b480 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f000 fbb9 	bl	800bbc4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b452:	e015      	b.n	800b480 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b454:	2140      	movs	r1, #64	; 0x40
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f000 ffca 	bl	800c3f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b45c:	e010      	b.n	800b480 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	095b      	lsrs	r3, r3, #5
 800b462:	f003 0301 	and.w	r3, r3, #1
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00b      	beq.n	800b482 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	095b      	lsrs	r3, r3, #5
 800b46e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b472:	2b00      	cmp	r3, #0
 800b474:	d005      	beq.n	800b482 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b476:	68b9      	ldr	r1, [r7, #8]
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f000 fc3f 	bl	800bcfc <I2C_ITMasterCplt>
 800b47e:	e000      	b.n	800b482 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800b480:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b088      	sub	sp, #32
 800b498:	af02      	add	r7, sp, #8
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800b4a0:	4b92      	ldr	r3, [pc, #584]	; (800b6ec <I2C_Mem_ISR_DMA+0x258>)
 800b4a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d101      	bne.n	800b4b2 <I2C_Mem_ISR_DMA+0x1e>
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	e118      	b.n	800b6e4 <I2C_Mem_ISR_DMA+0x250>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	091b      	lsrs	r3, r3, #4
 800b4be:	f003 0301 	and.w	r3, r3, #1
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d017      	beq.n	800b4f6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	091b      	lsrs	r3, r3, #4
 800b4ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d011      	beq.n	800b4f6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2210      	movs	r2, #16
 800b4d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4de:	f043 0204 	orr.w	r2, r3, #4
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b4e6:	2120      	movs	r1, #32
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f001 fadd 	bl	800caa8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f001 f895 	bl	800c61e <I2C_Flush_TXDR>
 800b4f4:	e0f1      	b.n	800b6da <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	085b      	lsrs	r3, r3, #1
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00f      	beq.n	800b522 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	085b      	lsrs	r3, r3, #1
 800b506:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d009      	beq.n	800b522 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b516:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b51e:	651a      	str	r2, [r3, #80]	; 0x50
 800b520:	e0db      	b.n	800b6da <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	09db      	lsrs	r3, r3, #7
 800b526:	f003 0301 	and.w	r3, r3, #1
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d060      	beq.n	800b5f0 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	099b      	lsrs	r3, r3, #6
 800b532:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b536:	2b00      	cmp	r3, #0
 800b538:	d05a      	beq.n	800b5f0 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b53a:	2101      	movs	r1, #1
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f001 fb37 	bl	800cbb0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b542:	2110      	movs	r1, #16
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f001 faaf 	bl	800caa8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b54e:	b29b      	uxth	r3, r3
 800b550:	2b00      	cmp	r3, #0
 800b552:	d048      	beq.n	800b5e6 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b558:	b29b      	uxth	r3, r3
 800b55a:	2bff      	cmp	r3, #255	; 0xff
 800b55c:	d910      	bls.n	800b580 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	22ff      	movs	r2, #255	; 0xff
 800b562:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b568:	b299      	uxth	r1, r3
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b56e:	b2da      	uxtb	r2, r3
 800b570:	2300      	movs	r3, #0
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f001 fa63 	bl	800ca44 <I2C_TransferConfig>
 800b57e:	e011      	b.n	800b5a4 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b584:	b29a      	uxth	r2, r3
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b58e:	b299      	uxth	r1, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b594:	b2da      	uxtb	r2, r3
 800b596:	2300      	movs	r3, #0
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f001 fa50 	bl	800ca44 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b22      	cmp	r3, #34	; 0x22
 800b5c0:	d108      	bne.n	800b5d4 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b5d2:	e082      	b.n	800b6da <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5e2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b5e4:	e079      	b.n	800b6da <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b5e6:	2140      	movs	r1, #64	; 0x40
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f000 ff01 	bl	800c3f0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b5ee:	e074      	b.n	800b6da <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	099b      	lsrs	r3, r3, #6
 800b5f4:	f003 0301 	and.w	r3, r3, #1
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d05e      	beq.n	800b6ba <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	099b      	lsrs	r3, r3, #6
 800b600:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b604:	2b00      	cmp	r3, #0
 800b606:	d058      	beq.n	800b6ba <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b608:	2101      	movs	r1, #1
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f001 fad0 	bl	800cbb0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b610:	2110      	movs	r1, #16
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f001 fa48 	bl	800caa8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b22      	cmp	r3, #34	; 0x22
 800b622:	d101      	bne.n	800b628 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800b624:	4b32      	ldr	r3, [pc, #200]	; (800b6f0 <I2C_Mem_ISR_DMA+0x25c>)
 800b626:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	2bff      	cmp	r3, #255	; 0xff
 800b630:	d910      	bls.n	800b654 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	22ff      	movs	r2, #255	; 0xff
 800b636:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b63c:	b299      	uxth	r1, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b642:	b2da      	uxtb	r2, r3
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f001 f9f9 	bl	800ca44 <I2C_TransferConfig>
 800b652:	e011      	b.n	800b678 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b658:	b29a      	uxth	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b662:	b299      	uxth	r1, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f001 f9e6 	bl	800ca44 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	b29a      	uxth	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b22      	cmp	r3, #34	; 0x22
 800b694:	d108      	bne.n	800b6a8 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b6a4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b6a6:	e018      	b.n	800b6da <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6b6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b6b8:	e00f      	b.n	800b6da <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	095b      	lsrs	r3, r3, #5
 800b6be:	f003 0301 	and.w	r3, r3, #1
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d009      	beq.n	800b6da <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	095b      	lsrs	r3, r3, #5
 800b6ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d003      	beq.n	800b6da <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b6d2:	68b9      	ldr	r1, [r7, #8]
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 fb11 	bl	800bcfc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3718      	adds	r7, #24
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	80002000 	.word	0x80002000
 800b6f0:	80002400 	.word	0x80002400

0800b6f4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b704:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b706:	2300      	movs	r3, #0
 800b708:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b710:	2b01      	cmp	r3, #1
 800b712:	d101      	bne.n	800b718 <I2C_Slave_ISR_DMA+0x24>
 800b714:	2302      	movs	r3, #2
 800b716:	e1cc      	b.n	800bab2 <I2C_Slave_ISR_DMA+0x3be>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	095b      	lsrs	r3, r3, #5
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00a      	beq.n	800b742 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	095b      	lsrs	r3, r3, #5
 800b730:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b734:	2b00      	cmp	r3, #0
 800b736:	d004      	beq.n	800b742 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b738:	68b9      	ldr	r1, [r7, #8]
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f000 fba8 	bl	800be90 <I2C_ITSlaveCplt>
 800b740:	e1b2      	b.n	800baa8 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	091b      	lsrs	r3, r3, #4
 800b746:	f003 0301 	and.w	r3, r3, #1
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f000 819c 	beq.w	800ba88 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	091b      	lsrs	r3, r3, #4
 800b754:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 8195 	beq.w	800ba88 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	0b9b      	lsrs	r3, r3, #14
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b00      	cmp	r3, #0
 800b768:	d106      	bne.n	800b778 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	0bdb      	lsrs	r3, r3, #15
 800b76e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 8181 	beq.w	800ba7a <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d07c      	beq.n	800b87a <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	0bdb      	lsrs	r3, r3, #15
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d076      	beq.n	800b87a <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a75      	ldr	r2, [pc, #468]	; (800b968 <I2C_Slave_ISR_DMA+0x274>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d059      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a73      	ldr	r2, [pc, #460]	; (800b96c <I2C_Slave_ISR_DMA+0x278>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d053      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a71      	ldr	r2, [pc, #452]	; (800b970 <I2C_Slave_ISR_DMA+0x27c>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d04d      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a6f      	ldr	r2, [pc, #444]	; (800b974 <I2C_Slave_ISR_DMA+0x280>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d047      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a6d      	ldr	r2, [pc, #436]	; (800b978 <I2C_Slave_ISR_DMA+0x284>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d041      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a6b      	ldr	r2, [pc, #428]	; (800b97c <I2C_Slave_ISR_DMA+0x288>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d03b      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a69      	ldr	r2, [pc, #420]	; (800b980 <I2C_Slave_ISR_DMA+0x28c>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d035      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a67      	ldr	r2, [pc, #412]	; (800b984 <I2C_Slave_ISR_DMA+0x290>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d02f      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a65      	ldr	r2, [pc, #404]	; (800b988 <I2C_Slave_ISR_DMA+0x294>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d029      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a63      	ldr	r2, [pc, #396]	; (800b98c <I2C_Slave_ISR_DMA+0x298>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d023      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a61      	ldr	r2, [pc, #388]	; (800b990 <I2C_Slave_ISR_DMA+0x29c>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d01d      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a5f      	ldr	r2, [pc, #380]	; (800b994 <I2C_Slave_ISR_DMA+0x2a0>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d017      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a5d      	ldr	r2, [pc, #372]	; (800b998 <I2C_Slave_ISR_DMA+0x2a4>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d011      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a5b      	ldr	r2, [pc, #364]	; (800b99c <I2C_Slave_ISR_DMA+0x2a8>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d00b      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a59      	ldr	r2, [pc, #356]	; (800b9a0 <I2C_Slave_ISR_DMA+0x2ac>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d005      	beq.n	800b84c <I2C_Slave_ISR_DMA+0x158>
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a57      	ldr	r2, [pc, #348]	; (800b9a4 <I2C_Slave_ISR_DMA+0x2b0>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d109      	bne.n	800b860 <I2C_Slave_ISR_DMA+0x16c>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	bf0c      	ite	eq
 800b858:	2301      	moveq	r3, #1
 800b85a:	2300      	movne	r3, #0
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	e008      	b.n	800b872 <I2C_Slave_ISR_DMA+0x17e>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	bf0c      	ite	eq
 800b86c:	2301      	moveq	r3, #1
 800b86e:	2300      	movne	r3, #0
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800b876:	2301      	movs	r3, #1
 800b878:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 809f 	beq.w	800b9c2 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	0b9b      	lsrs	r3, r3, #14
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 8098 	beq.w	800b9c2 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a33      	ldr	r2, [pc, #204]	; (800b968 <I2C_Slave_ISR_DMA+0x274>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d059      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a31      	ldr	r2, [pc, #196]	; (800b96c <I2C_Slave_ISR_DMA+0x278>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d053      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a2f      	ldr	r2, [pc, #188]	; (800b970 <I2C_Slave_ISR_DMA+0x27c>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d04d      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a2d      	ldr	r2, [pc, #180]	; (800b974 <I2C_Slave_ISR_DMA+0x280>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d047      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a2b      	ldr	r2, [pc, #172]	; (800b978 <I2C_Slave_ISR_DMA+0x284>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d041      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a29      	ldr	r2, [pc, #164]	; (800b97c <I2C_Slave_ISR_DMA+0x288>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d03b      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a27      	ldr	r2, [pc, #156]	; (800b980 <I2C_Slave_ISR_DMA+0x28c>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d035      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a25      	ldr	r2, [pc, #148]	; (800b984 <I2C_Slave_ISR_DMA+0x290>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d02f      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a23      	ldr	r2, [pc, #140]	; (800b988 <I2C_Slave_ISR_DMA+0x294>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d029      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a21      	ldr	r2, [pc, #132]	; (800b98c <I2C_Slave_ISR_DMA+0x298>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d023      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a1f      	ldr	r2, [pc, #124]	; (800b990 <I2C_Slave_ISR_DMA+0x29c>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d01d      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a1d      	ldr	r2, [pc, #116]	; (800b994 <I2C_Slave_ISR_DMA+0x2a0>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d017      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a1b      	ldr	r2, [pc, #108]	; (800b998 <I2C_Slave_ISR_DMA+0x2a4>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d011      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a19      	ldr	r2, [pc, #100]	; (800b99c <I2C_Slave_ISR_DMA+0x2a8>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d00b      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a17      	ldr	r2, [pc, #92]	; (800b9a0 <I2C_Slave_ISR_DMA+0x2ac>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d005      	beq.n	800b952 <I2C_Slave_ISR_DMA+0x25e>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a15      	ldr	r2, [pc, #84]	; (800b9a4 <I2C_Slave_ISR_DMA+0x2b0>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d12a      	bne.n	800b9a8 <I2C_Slave_ISR_DMA+0x2b4>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	bf0c      	ite	eq
 800b95e:	2301      	moveq	r3, #1
 800b960:	2300      	movne	r3, #0
 800b962:	b2db      	uxtb	r3, r3
 800b964:	e029      	b.n	800b9ba <I2C_Slave_ISR_DMA+0x2c6>
 800b966:	bf00      	nop
 800b968:	40020010 	.word	0x40020010
 800b96c:	40020028 	.word	0x40020028
 800b970:	40020040 	.word	0x40020040
 800b974:	40020058 	.word	0x40020058
 800b978:	40020070 	.word	0x40020070
 800b97c:	40020088 	.word	0x40020088
 800b980:	400200a0 	.word	0x400200a0
 800b984:	400200b8 	.word	0x400200b8
 800b988:	40020410 	.word	0x40020410
 800b98c:	40020428 	.word	0x40020428
 800b990:	40020440 	.word	0x40020440
 800b994:	40020458 	.word	0x40020458
 800b998:	40020470 	.word	0x40020470
 800b99c:	40020488 	.word	0x40020488
 800b9a0:	400204a0 	.word	0x400204a0
 800b9a4:	400204b8 	.word	0x400204b8
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	bf0c      	ite	eq
 800b9b4:	2301      	moveq	r3, #1
 800b9b6:	2300      	movne	r3, #0
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d128      	bne.n	800ba1a <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b28      	cmp	r3, #40	; 0x28
 800b9d2:	d108      	bne.n	800b9e6 <I2C_Slave_ISR_DMA+0x2f2>
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9da:	d104      	bne.n	800b9e6 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b9dc:	68b9      	ldr	r1, [r7, #8]
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f000 fcb0 	bl	800c344 <I2C_ITListenCplt>
 800b9e4:	e048      	b.n	800ba78 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b29      	cmp	r3, #41	; 0x29
 800b9f0:	d10e      	bne.n	800ba10 <I2C_Slave_ISR_DMA+0x31c>
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b9f8:	d00a      	beq.n	800ba10 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2210      	movs	r2, #16
 800ba00:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f000 fe0b 	bl	800c61e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 f918 	bl	800bc3e <I2C_ITSlaveSeqCplt>
 800ba0e:	e033      	b.n	800ba78 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2210      	movs	r2, #16
 800ba16:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ba18:	e034      	b.n	800ba84 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2210      	movs	r2, #16
 800ba20:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba26:	f043 0204 	orr.w	r2, r3, #4
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba34:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <I2C_Slave_ISR_DMA+0x350>
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba42:	d11f      	bne.n	800ba84 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ba44:	7dfb      	ldrb	r3, [r7, #23]
 800ba46:	2b21      	cmp	r3, #33	; 0x21
 800ba48:	d002      	beq.n	800ba50 <I2C_Slave_ISR_DMA+0x35c>
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
 800ba4c:	2b29      	cmp	r3, #41	; 0x29
 800ba4e:	d103      	bne.n	800ba58 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2221      	movs	r2, #33	; 0x21
 800ba54:	631a      	str	r2, [r3, #48]	; 0x30
 800ba56:	e008      	b.n	800ba6a <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ba58:	7dfb      	ldrb	r3, [r7, #23]
 800ba5a:	2b22      	cmp	r3, #34	; 0x22
 800ba5c:	d002      	beq.n	800ba64 <I2C_Slave_ISR_DMA+0x370>
 800ba5e:	7dfb      	ldrb	r3, [r7, #23]
 800ba60:	2b2a      	cmp	r3, #42	; 0x2a
 800ba62:	d102      	bne.n	800ba6a <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2222      	movs	r2, #34	; 0x22
 800ba68:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba6e:	4619      	mov	r1, r3
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 fcbd 	bl	800c3f0 <I2C_ITError>
      if (treatdmanack == 1U)
 800ba76:	e005      	b.n	800ba84 <I2C_Slave_ISR_DMA+0x390>
 800ba78:	e004      	b.n	800ba84 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2210      	movs	r2, #16
 800ba80:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ba82:	e011      	b.n	800baa8 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800ba84:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ba86:	e00f      	b.n	800baa8 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	08db      	lsrs	r3, r3, #3
 800ba8c:	f003 0301 	and.w	r3, r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d009      	beq.n	800baa8 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	08db      	lsrs	r3, r3, #3
 800ba98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d003      	beq.n	800baa8 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800baa0:	68b9      	ldr	r1, [r7, #8]
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 f80a 	bl	800babc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3720      	adds	r7, #32
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop

0800babc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bad2:	2b28      	cmp	r3, #40	; 0x28
 800bad4:	d16a      	bne.n	800bbac <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	0c1b      	lsrs	r3, r3, #16
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	f003 0301 	and.w	r3, r3, #1
 800bae4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	0c1b      	lsrs	r3, r3, #16
 800baee:	b29b      	uxth	r3, r3
 800baf0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800baf4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb02:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bb10:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d138      	bne.n	800bb8c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800bb1a:	897b      	ldrh	r3, [r7, #10]
 800bb1c:	09db      	lsrs	r3, r3, #7
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	89bb      	ldrh	r3, [r7, #12]
 800bb22:	4053      	eors	r3, r2
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	f003 0306 	and.w	r3, r3, #6
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d11c      	bne.n	800bb68 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800bb2e:	897b      	ldrh	r3, [r7, #10]
 800bb30:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb36:	1c5a      	adds	r2, r3, #1
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d13b      	bne.n	800bbbc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2208      	movs	r2, #8
 800bb50:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bb5a:	89ba      	ldrh	r2, [r7, #12]
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7ff f91e 	bl	800ada2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bb66:	e029      	b.n	800bbbc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800bb68:	893b      	ldrh	r3, [r7, #8]
 800bb6a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bb6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f001 f81d 	bl	800cbb0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bb7e:	89ba      	ldrh	r2, [r7, #12]
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	4619      	mov	r1, r3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f7ff f90c 	bl	800ada2 <HAL_I2C_AddrCallback>
}
 800bb8a:	e017      	b.n	800bbbc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bb8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f001 f80d 	bl	800cbb0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bb9e:	89ba      	ldrh	r2, [r7, #12]
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7ff f8fc 	bl	800ada2 <HAL_I2C_AddrCallback>
}
 800bbaa:	e007      	b.n	800bbbc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2208      	movs	r2, #8
 800bbb2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800bbbc:	bf00      	nop
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	2b21      	cmp	r3, #33	; 0x21
 800bbde:	d115      	bne.n	800bc0c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2220      	movs	r2, #32
 800bbe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2211      	movs	r2, #17
 800bbec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bbf4:	2101      	movs	r1, #1
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 ffda 	bl	800cbb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7ff f8a4 	bl	800ad52 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bc0a:	e014      	b.n	800bc36 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2220      	movs	r2, #32
 800bc10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2212      	movs	r2, #18
 800bc18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bc20:	2102      	movs	r1, #2
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 ffc4 	bl	800cbb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f7ff f898 	bl	800ad66 <HAL_I2C_MasterRxCpltCallback>
}
 800bc36:	bf00      	nop
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	0b9b      	lsrs	r3, r3, #14
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d008      	beq.n	800bc74 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	e00d      	b.n	800bc90 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	0bdb      	lsrs	r3, r3, #15
 800bc78:	f003 0301 	and.w	r3, r3, #1
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d007      	beq.n	800bc90 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc8e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b29      	cmp	r3, #41	; 0x29
 800bc9a:	d112      	bne.n	800bcc2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2228      	movs	r2, #40	; 0x28
 800bca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2221      	movs	r2, #33	; 0x21
 800bca8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bcaa:	2101      	movs	r1, #1
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 ff7f 	bl	800cbb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f7ff f85d 	bl	800ad7a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bcc0:	e017      	b.n	800bcf2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	2b2a      	cmp	r3, #42	; 0x2a
 800bccc:	d111      	bne.n	800bcf2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2228      	movs	r2, #40	; 0x28
 800bcd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2222      	movs	r2, #34	; 0x22
 800bcda:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bcdc:	2102      	movs	r1, #2
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 ff66 	bl	800cbb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7ff f84e 	bl	800ad8e <HAL_I2C_SlaveRxCpltCallback>
}
 800bcf2:	bf00      	nop
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2220      	movs	r2, #32
 800bd10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b21      	cmp	r3, #33	; 0x21
 800bd1c:	d107      	bne.n	800bd2e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bd1e:	2101      	movs	r1, #1
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 ff45 	bl	800cbb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2211      	movs	r2, #17
 800bd2a:	631a      	str	r2, [r3, #48]	; 0x30
 800bd2c:	e00c      	b.n	800bd48 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b22      	cmp	r3, #34	; 0x22
 800bd38:	d106      	bne.n	800bd48 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bd3a:	2102      	movs	r1, #2
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 ff37 	bl	800cbb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2212      	movs	r2, #18
 800bd46:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6859      	ldr	r1, [r3, #4]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	4b4d      	ldr	r3, [pc, #308]	; (800be88 <I2C_ITMasterCplt+0x18c>)
 800bd54:	400b      	ands	r3, r1
 800bd56:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a4a      	ldr	r2, [pc, #296]	; (800be8c <I2C_ITMasterCplt+0x190>)
 800bd62:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	091b      	lsrs	r3, r3, #4
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d009      	beq.n	800bd84 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2210      	movs	r2, #16
 800bd76:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd7c:	f043 0204 	orr.w	r2, r3, #4
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	2b60      	cmp	r3, #96	; 0x60
 800bd8e:	d10b      	bne.n	800bda8 <I2C_ITMasterCplt+0xac>
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	089b      	lsrs	r3, r3, #2
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d005      	beq.n	800bda8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800bda6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fc38 	bl	800c61e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	2b60      	cmp	r3, #96	; 0x60
 800bdbe:	d002      	beq.n	800bdc6 <I2C_ITMasterCplt+0xca>
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d006      	beq.n	800bdd4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fb0f 	bl	800c3f0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bdd2:	e054      	b.n	800be7e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	2b21      	cmp	r3, #33	; 0x21
 800bdde:	d124      	bne.n	800be2a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2220      	movs	r2, #32
 800bde4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b40      	cmp	r3, #64	; 0x40
 800bdf8:	d10b      	bne.n	800be12 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7fe ffe1 	bl	800add2 <HAL_I2C_MemTxCpltCallback>
}
 800be10:	e035      	b.n	800be7e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7fe ff95 	bl	800ad52 <HAL_I2C_MasterTxCpltCallback>
}
 800be28:	e029      	b.n	800be7e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b22      	cmp	r3, #34	; 0x22
 800be34:	d123      	bne.n	800be7e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2220      	movs	r2, #32
 800be3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b40      	cmp	r3, #64	; 0x40
 800be4e:	d10b      	bne.n	800be68 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7fe ffc0 	bl	800ade6 <HAL_I2C_MemRxCpltCallback>
}
 800be66:	e00a      	b.n	800be7e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7fe ff74 	bl	800ad66 <HAL_I2C_MasterRxCpltCallback>
}
 800be7e:	bf00      	nop
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	fe00e800 	.word	0xfe00e800
 800be8c:	ffff0000 	.word	0xffff0000

0800be90 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beaa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beb2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2220      	movs	r2, #32
 800beba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bebc:	7afb      	ldrb	r3, [r7, #11]
 800bebe:	2b21      	cmp	r3, #33	; 0x21
 800bec0:	d002      	beq.n	800bec8 <I2C_ITSlaveCplt+0x38>
 800bec2:	7afb      	ldrb	r3, [r7, #11]
 800bec4:	2b29      	cmp	r3, #41	; 0x29
 800bec6:	d108      	bne.n	800beda <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800bec8:	f248 0101 	movw	r1, #32769	; 0x8001
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fe6f 	bl	800cbb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2221      	movs	r2, #33	; 0x21
 800bed6:	631a      	str	r2, [r3, #48]	; 0x30
 800bed8:	e019      	b.n	800bf0e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800beda:	7afb      	ldrb	r3, [r7, #11]
 800bedc:	2b22      	cmp	r3, #34	; 0x22
 800bede:	d002      	beq.n	800bee6 <I2C_ITSlaveCplt+0x56>
 800bee0:	7afb      	ldrb	r3, [r7, #11]
 800bee2:	2b2a      	cmp	r3, #42	; 0x2a
 800bee4:	d108      	bne.n	800bef8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bee6:	f248 0102 	movw	r1, #32770	; 0x8002
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fe60 	bl	800cbb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2222      	movs	r2, #34	; 0x22
 800bef4:	631a      	str	r2, [r3, #48]	; 0x30
 800bef6:	e00a      	b.n	800bf0e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800bef8:	7afb      	ldrb	r3, [r7, #11]
 800befa:	2b28      	cmp	r3, #40	; 0x28
 800befc:	d107      	bne.n	800bf0e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800befe:	f248 0103 	movw	r1, #32771	; 0x8003
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 fe54 	bl	800cbb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	685a      	ldr	r2, [r3, #4]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf1c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6859      	ldr	r1, [r3, #4]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	4b80      	ldr	r3, [pc, #512]	; (800c12c <I2C_ITSlaveCplt+0x29c>)
 800bf2a:	400b      	ands	r3, r1
 800bf2c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fb75 	bl	800c61e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	0b9b      	lsrs	r3, r3, #14
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d07a      	beq.n	800c036 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bf4e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 8112 	beq.w	800c17e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a73      	ldr	r2, [pc, #460]	; (800c130 <I2C_ITSlaveCplt+0x2a0>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d059      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a71      	ldr	r2, [pc, #452]	; (800c134 <I2C_ITSlaveCplt+0x2a4>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d053      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a6f      	ldr	r2, [pc, #444]	; (800c138 <I2C_ITSlaveCplt+0x2a8>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d04d      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a6d      	ldr	r2, [pc, #436]	; (800c13c <I2C_ITSlaveCplt+0x2ac>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d047      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a6b      	ldr	r2, [pc, #428]	; (800c140 <I2C_ITSlaveCplt+0x2b0>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d041      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a69      	ldr	r2, [pc, #420]	; (800c144 <I2C_ITSlaveCplt+0x2b4>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d03b      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a67      	ldr	r2, [pc, #412]	; (800c148 <I2C_ITSlaveCplt+0x2b8>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d035      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a65      	ldr	r2, [pc, #404]	; (800c14c <I2C_ITSlaveCplt+0x2bc>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d02f      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a63      	ldr	r2, [pc, #396]	; (800c150 <I2C_ITSlaveCplt+0x2c0>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d029      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a61      	ldr	r2, [pc, #388]	; (800c154 <I2C_ITSlaveCplt+0x2c4>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d023      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a5f      	ldr	r2, [pc, #380]	; (800c158 <I2C_ITSlaveCplt+0x2c8>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d01d      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a5d      	ldr	r2, [pc, #372]	; (800c15c <I2C_ITSlaveCplt+0x2cc>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d017      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a5b      	ldr	r2, [pc, #364]	; (800c160 <I2C_ITSlaveCplt+0x2d0>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d011      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a59      	ldr	r2, [pc, #356]	; (800c164 <I2C_ITSlaveCplt+0x2d4>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d00b      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a57      	ldr	r2, [pc, #348]	; (800c168 <I2C_ITSlaveCplt+0x2d8>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d005      	beq.n	800c01a <I2C_ITSlaveCplt+0x18a>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a55      	ldr	r2, [pc, #340]	; (800c16c <I2C_ITSlaveCplt+0x2dc>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d105      	bne.n	800c026 <I2C_ITSlaveCplt+0x196>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	b29b      	uxth	r3, r3
 800c024:	e004      	b.n	800c030 <I2C_ITSlaveCplt+0x1a0>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	b29b      	uxth	r3, r3
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	8553      	strh	r3, [r2, #42]	; 0x2a
 800c034:	e0a3      	b.n	800c17e <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	0bdb      	lsrs	r3, r3, #15
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 809d 	beq.w	800c17e <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c052:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 8090 	beq.w	800c17e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a32      	ldr	r2, [pc, #200]	; (800c130 <I2C_ITSlaveCplt+0x2a0>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d059      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a30      	ldr	r2, [pc, #192]	; (800c134 <I2C_ITSlaveCplt+0x2a4>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d053      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a2e      	ldr	r2, [pc, #184]	; (800c138 <I2C_ITSlaveCplt+0x2a8>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d04d      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a2c      	ldr	r2, [pc, #176]	; (800c13c <I2C_ITSlaveCplt+0x2ac>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d047      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a2a      	ldr	r2, [pc, #168]	; (800c140 <I2C_ITSlaveCplt+0x2b0>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d041      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a28      	ldr	r2, [pc, #160]	; (800c144 <I2C_ITSlaveCplt+0x2b4>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d03b      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a26      	ldr	r2, [pc, #152]	; (800c148 <I2C_ITSlaveCplt+0x2b8>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d035      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a24      	ldr	r2, [pc, #144]	; (800c14c <I2C_ITSlaveCplt+0x2bc>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d02f      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a22      	ldr	r2, [pc, #136]	; (800c150 <I2C_ITSlaveCplt+0x2c0>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d029      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a20      	ldr	r2, [pc, #128]	; (800c154 <I2C_ITSlaveCplt+0x2c4>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d023      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a1e      	ldr	r2, [pc, #120]	; (800c158 <I2C_ITSlaveCplt+0x2c8>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d01d      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a1c      	ldr	r2, [pc, #112]	; (800c15c <I2C_ITSlaveCplt+0x2cc>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d017      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a1a      	ldr	r2, [pc, #104]	; (800c160 <I2C_ITSlaveCplt+0x2d0>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d011      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a18      	ldr	r2, [pc, #96]	; (800c164 <I2C_ITSlaveCplt+0x2d4>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d00b      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a16      	ldr	r2, [pc, #88]	; (800c168 <I2C_ITSlaveCplt+0x2d8>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d005      	beq.n	800c11e <I2C_ITSlaveCplt+0x28e>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a14      	ldr	r2, [pc, #80]	; (800c16c <I2C_ITSlaveCplt+0x2dc>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d128      	bne.n	800c170 <I2C_ITSlaveCplt+0x2e0>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	b29b      	uxth	r3, r3
 800c128:	e027      	b.n	800c17a <I2C_ITSlaveCplt+0x2ea>
 800c12a:	bf00      	nop
 800c12c:	fe00e800 	.word	0xfe00e800
 800c130:	40020010 	.word	0x40020010
 800c134:	40020028 	.word	0x40020028
 800c138:	40020040 	.word	0x40020040
 800c13c:	40020058 	.word	0x40020058
 800c140:	40020070 	.word	0x40020070
 800c144:	40020088 	.word	0x40020088
 800c148:	400200a0 	.word	0x400200a0
 800c14c:	400200b8 	.word	0x400200b8
 800c150:	40020410 	.word	0x40020410
 800c154:	40020428 	.word	0x40020428
 800c158:	40020440 	.word	0x40020440
 800c15c:	40020458 	.word	0x40020458
 800c160:	40020470 	.word	0x40020470
 800c164:	40020488 	.word	0x40020488
 800c168:	400204a0 	.word	0x400204a0
 800c16c:	400204b8 	.word	0x400204b8
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	b29b      	uxth	r3, r3
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	089b      	lsrs	r3, r3, #2
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	2b00      	cmp	r3, #0
 800c188:	d020      	beq.n	800c1cc <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f023 0304 	bic.w	r3, r3, #4
 800c190:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19c:	b2d2      	uxtb	r2, r2
 800c19e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00c      	beq.n	800c1cc <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d005      	beq.n	800c1e2 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1da:	f043 0204 	orr.w	r2, r3, #4
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	091b      	lsrs	r3, r3, #4
 800c1e6:	f003 0301 	and.w	r3, r3, #1
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d04a      	beq.n	800c284 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	091b      	lsrs	r3, r3, #4
 800c1f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d044      	beq.n	800c284 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d128      	bne.n	800c256 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	2b28      	cmp	r3, #40	; 0x28
 800c20e:	d108      	bne.n	800c222 <I2C_ITSlaveCplt+0x392>
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c216:	d104      	bne.n	800c222 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c218:	6979      	ldr	r1, [r7, #20]
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f892 	bl	800c344 <I2C_ITListenCplt>
 800c220:	e030      	b.n	800c284 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b29      	cmp	r3, #41	; 0x29
 800c22c:	d10e      	bne.n	800c24c <I2C_ITSlaveCplt+0x3bc>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c234:	d00a      	beq.n	800c24c <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2210      	movs	r2, #16
 800c23c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 f9ed 	bl	800c61e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f7ff fcfa 	bl	800bc3e <I2C_ITSlaveSeqCplt>
 800c24a:	e01b      	b.n	800c284 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2210      	movs	r2, #16
 800c252:	61da      	str	r2, [r3, #28]
 800c254:	e016      	b.n	800c284 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2210      	movs	r2, #16
 800c25c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c262:	f043 0204 	orr.w	r2, r3, #4
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d003      	beq.n	800c278 <I2C_ITSlaveCplt+0x3e8>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c276:	d105      	bne.n	800c284 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f8b6 	bl	800c3f0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c296:	2b00      	cmp	r3, #0
 800c298:	d010      	beq.n	800c2bc <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f8a5 	bl	800c3f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b28      	cmp	r3, #40	; 0x28
 800c2b0:	d141      	bne.n	800c336 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c2b2:	6979      	ldr	r1, [r7, #20]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f845 	bl	800c344 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c2ba:	e03c      	b.n	800c336 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c2c4:	d014      	beq.n	800c2f0 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f7ff fcb9 	bl	800bc3e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a1c      	ldr	r2, [pc, #112]	; (800c340 <I2C_ITSlaveCplt+0x4b0>)
 800c2d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2220      	movs	r2, #32
 800c2d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f7fe fd68 	bl	800adbe <HAL_I2C_ListenCpltCallback>
}
 800c2ee:	e022      	b.n	800c336 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	2b22      	cmp	r3, #34	; 0x22
 800c2fa:	d10e      	bne.n	800c31a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2220      	movs	r2, #32
 800c300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7fe fd3b 	bl	800ad8e <HAL_I2C_SlaveRxCpltCallback>
}
 800c318:	e00d      	b.n	800c336 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2220      	movs	r2, #32
 800c31e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f7fe fd22 	bl	800ad7a <HAL_I2C_SlaveTxCpltCallback>
}
 800c336:	bf00      	nop
 800c338:	3718      	adds	r7, #24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	ffff0000 	.word	0xffff0000

0800c344 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a26      	ldr	r2, [pc, #152]	; (800c3ec <I2C_ITListenCplt+0xa8>)
 800c352:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2220      	movs	r2, #32
 800c35e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	089b      	lsrs	r3, r3, #2
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d022      	beq.n	800c3c2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c386:	b2d2      	uxtb	r2, r2
 800c388:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d012      	beq.n	800c3c2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ba:	f043 0204 	orr.w	r2, r3, #4
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c3c2:	f248 0103 	movw	r1, #32771	; 0x8003
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fbf2 	bl	800cbb0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2210      	movs	r2, #16
 800c3d2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f7fe fcee 	bl	800adbe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c3e2:	bf00      	nop
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	ffff0000 	.word	0xffff0000

0800c3f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c400:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4a6d      	ldr	r2, [pc, #436]	; (800c5c4 <I2C_ITError+0x1d4>)
 800c40e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	431a      	orrs	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	2b28      	cmp	r3, #40	; 0x28
 800c426:	d005      	beq.n	800c434 <I2C_ITError+0x44>
 800c428:	7bfb      	ldrb	r3, [r7, #15]
 800c42a:	2b29      	cmp	r3, #41	; 0x29
 800c42c:	d002      	beq.n	800c434 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
 800c430:	2b2a      	cmp	r3, #42	; 0x2a
 800c432:	d10b      	bne.n	800c44c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c434:	2103      	movs	r1, #3
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fbba 	bl	800cbb0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2228      	movs	r2, #40	; 0x28
 800c440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a60      	ldr	r2, [pc, #384]	; (800c5c8 <I2C_ITError+0x1d8>)
 800c448:	635a      	str	r2, [r3, #52]	; 0x34
 800c44a:	e030      	b.n	800c4ae <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c44c:	f248 0103 	movw	r1, #32771	; 0x8003
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fbad 	bl	800cbb0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f8e1 	bl	800c61e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b60      	cmp	r3, #96	; 0x60
 800c466:	d01f      	beq.n	800c4a8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2220      	movs	r2, #32
 800c46c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	f003 0320 	and.w	r3, r3, #32
 800c47a:	2b20      	cmp	r3, #32
 800c47c:	d114      	bne.n	800c4a8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	f003 0310 	and.w	r3, r3, #16
 800c488:	2b10      	cmp	r3, #16
 800c48a:	d109      	bne.n	800c4a0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2210      	movs	r2, #16
 800c492:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c498:	f043 0204 	orr.w	r2, r3, #4
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2220      	movs	r2, #32
 800c4a6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d039      	beq.n	800c530 <I2C_ITError+0x140>
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2b11      	cmp	r3, #17
 800c4c0:	d002      	beq.n	800c4c8 <I2C_ITError+0xd8>
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2b21      	cmp	r3, #33	; 0x21
 800c4c6:	d133      	bne.n	800c530 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4d6:	d107      	bne.n	800c4e8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c4e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7fd f857 	bl	80095a0 <HAL_DMA_GetState>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d017      	beq.n	800c528 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4fc:	4a33      	ldr	r2, [pc, #204]	; (800c5cc <I2C_ITError+0x1dc>)
 800c4fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fb fed7 	bl	80082c0 <HAL_DMA_Abort_IT>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d04d      	beq.n	800c5b4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c522:	4610      	mov	r0, r2
 800c524:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c526:	e045      	b.n	800c5b4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f851 	bl	800c5d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c52e:	e041      	b.n	800c5b4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c534:	2b00      	cmp	r3, #0
 800c536:	d039      	beq.n	800c5ac <I2C_ITError+0x1bc>
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	2b12      	cmp	r3, #18
 800c53c:	d002      	beq.n	800c544 <I2C_ITError+0x154>
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2b22      	cmp	r3, #34	; 0x22
 800c542:	d133      	bne.n	800c5ac <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c54e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c552:	d107      	bne.n	800c564 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c562:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fd f819 	bl	80095a0 <HAL_DMA_GetState>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b01      	cmp	r3, #1
 800c572:	d017      	beq.n	800c5a4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c578:	4a14      	ldr	r2, [pc, #80]	; (800c5cc <I2C_ITError+0x1dc>)
 800c57a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fb fe99 	bl	80082c0 <HAL_DMA_Abort_IT>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d011      	beq.n	800c5b8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c59e:	4610      	mov	r0, r2
 800c5a0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c5a2:	e009      	b.n	800c5b8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 f813 	bl	800c5d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c5aa:	e005      	b.n	800c5b8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 f80f 	bl	800c5d0 <I2C_TreatErrorCallback>
  }
}
 800c5b2:	e002      	b.n	800c5ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c5b4:	bf00      	nop
 800c5b6:	e000      	b.n	800c5ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c5b8:	bf00      	nop
}
 800c5ba:	bf00      	nop
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	ffff0000 	.word	0xffff0000
 800c5c8:	0800b0a7 	.word	0x0800b0a7
 800c5cc:	0800ca09 	.word	0x0800ca09

0800c5d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	2b60      	cmp	r3, #96	; 0x60
 800c5e2:	d10e      	bne.n	800c602 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7fe fc07 	bl	800ae0e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c600:	e009      	b.n	800c616 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7fe fbf2 	bl	800adfa <HAL_I2C_ErrorCallback>
}
 800c616:	bf00      	nop
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c61e:	b480      	push	{r7}
 800c620:	b083      	sub	sp, #12
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	699b      	ldr	r3, [r3, #24]
 800c62c:	f003 0302 	and.w	r3, r3, #2
 800c630:	2b02      	cmp	r3, #2
 800c632:	d103      	bne.n	800c63c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2200      	movs	r2, #0
 800c63a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	f003 0301 	and.w	r3, r3, #1
 800c646:	2b01      	cmp	r3, #1
 800c648:	d007      	beq.n	800c65a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	699a      	ldr	r2, [r3, #24]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f042 0201 	orr.w	r2, r2, #1
 800c658:	619a      	str	r2, [r3, #24]
  }
}
 800c65a:	bf00      	nop
 800c65c:	370c      	adds	r7, #12
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr

0800c666 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c672:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c682:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c688:	b29b      	uxth	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d104      	bne.n	800c698 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c68e:	2120      	movs	r1, #32
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f000 fa09 	bl	800caa8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c696:	e02d      	b.n	800c6f4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c6a0:	441a      	add	r2, r3
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	2bff      	cmp	r3, #255	; 0xff
 800c6ae:	d903      	bls.n	800c6b8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	22ff      	movs	r2, #255	; 0xff
 800c6b4:	851a      	strh	r2, [r3, #40]	; 0x28
 800c6b6:	e004      	b.n	800c6c2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3328      	adds	r3, #40	; 0x28
 800c6d2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c6d8:	f7fb f86a 	bl	80077b0 <HAL_DMA_Start_IT>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d004      	beq.n	800c6ec <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c6e2:	2110      	movs	r1, #16
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f7ff fe83 	bl	800c3f0 <I2C_ITError>
}
 800c6ea:	e003      	b.n	800c6f4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c6ec:	2140      	movs	r1, #64	; 0x40
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f000 f9da 	bl	800caa8 <I2C_Enable_IRQ>
}
 800c6f4:	bf00      	nop
 800c6f6:	3710      	adds	r7, #16
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c708:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c718:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c71e:	b29b      	uxth	r3, r3
 800c720:	2b00      	cmp	r3, #0
 800c722:	d104      	bne.n	800c72e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c724:	2120      	movs	r1, #32
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f000 f9be 	bl	800caa8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c72c:	e02d      	b.n	800c78a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c736:	441a      	add	r2, r3
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c740:	b29b      	uxth	r3, r3
 800c742:	2bff      	cmp	r3, #255	; 0xff
 800c744:	d903      	bls.n	800c74e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	22ff      	movs	r2, #255	; 0xff
 800c74a:	851a      	strh	r2, [r3, #40]	; 0x28
 800c74c:	e004      	b.n	800c758 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c752:	b29a      	uxth	r2, r3
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	3324      	adds	r3, #36	; 0x24
 800c762:	4619      	mov	r1, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c76e:	f7fb f81f 	bl	80077b0 <HAL_DMA_Start_IT>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d004      	beq.n	800c782 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c778:	2110      	movs	r1, #16
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	f7ff fe38 	bl	800c3f0 <I2C_ITError>
}
 800c780:	e003      	b.n	800c78a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c782:	2140      	movs	r1, #64	; 0x40
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f000 f98f 	bl	800caa8 <I2C_Enable_IRQ>
}
 800c78a:	bf00      	nop
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
	...

0800c794 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800c79c:	2300      	movs	r3, #0
 800c79e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a4:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d076      	beq.n	800c89c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a71      	ldr	r2, [pc, #452]	; (800c97c <I2C_DMAError+0x1e8>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d059      	beq.n	800c86e <I2C_DMAError+0xda>
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a6f      	ldr	r2, [pc, #444]	; (800c980 <I2C_DMAError+0x1ec>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d053      	beq.n	800c86e <I2C_DMAError+0xda>
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a6d      	ldr	r2, [pc, #436]	; (800c984 <I2C_DMAError+0x1f0>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d04d      	beq.n	800c86e <I2C_DMAError+0xda>
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a6b      	ldr	r2, [pc, #428]	; (800c988 <I2C_DMAError+0x1f4>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d047      	beq.n	800c86e <I2C_DMAError+0xda>
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a69      	ldr	r2, [pc, #420]	; (800c98c <I2C_DMAError+0x1f8>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d041      	beq.n	800c86e <I2C_DMAError+0xda>
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a67      	ldr	r2, [pc, #412]	; (800c990 <I2C_DMAError+0x1fc>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d03b      	beq.n	800c86e <I2C_DMAError+0xda>
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a65      	ldr	r2, [pc, #404]	; (800c994 <I2C_DMAError+0x200>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d035      	beq.n	800c86e <I2C_DMAError+0xda>
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a63      	ldr	r2, [pc, #396]	; (800c998 <I2C_DMAError+0x204>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d02f      	beq.n	800c86e <I2C_DMAError+0xda>
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a61      	ldr	r2, [pc, #388]	; (800c99c <I2C_DMAError+0x208>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d029      	beq.n	800c86e <I2C_DMAError+0xda>
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a5f      	ldr	r2, [pc, #380]	; (800c9a0 <I2C_DMAError+0x20c>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d023      	beq.n	800c86e <I2C_DMAError+0xda>
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a5d      	ldr	r2, [pc, #372]	; (800c9a4 <I2C_DMAError+0x210>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d01d      	beq.n	800c86e <I2C_DMAError+0xda>
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a5b      	ldr	r2, [pc, #364]	; (800c9a8 <I2C_DMAError+0x214>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d017      	beq.n	800c86e <I2C_DMAError+0xda>
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a59      	ldr	r2, [pc, #356]	; (800c9ac <I2C_DMAError+0x218>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d011      	beq.n	800c86e <I2C_DMAError+0xda>
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a57      	ldr	r2, [pc, #348]	; (800c9b0 <I2C_DMAError+0x21c>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d00b      	beq.n	800c86e <I2C_DMAError+0xda>
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a55      	ldr	r2, [pc, #340]	; (800c9b4 <I2C_DMAError+0x220>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d005      	beq.n	800c86e <I2C_DMAError+0xda>
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a53      	ldr	r2, [pc, #332]	; (800c9b8 <I2C_DMAError+0x224>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d109      	bne.n	800c882 <I2C_DMAError+0xee>
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	bf0c      	ite	eq
 800c87a:	2301      	moveq	r3, #1
 800c87c:	2300      	movne	r3, #0
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	e008      	b.n	800c894 <I2C_DMAError+0x100>
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	bf0c      	ite	eq
 800c88e:	2301      	moveq	r3, #1
 800c890:	2300      	movne	r3, #0
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b00      	cmp	r3, #0
 800c896:	d001      	beq.n	800c89c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800c898:	2301      	movs	r3, #1
 800c89a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f000 8098 	beq.w	800c9d6 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a33      	ldr	r2, [pc, #204]	; (800c97c <I2C_DMAError+0x1e8>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d059      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a31      	ldr	r2, [pc, #196]	; (800c980 <I2C_DMAError+0x1ec>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d053      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a2f      	ldr	r2, [pc, #188]	; (800c984 <I2C_DMAError+0x1f0>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d04d      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a2d      	ldr	r2, [pc, #180]	; (800c988 <I2C_DMAError+0x1f4>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d047      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a2b      	ldr	r2, [pc, #172]	; (800c98c <I2C_DMAError+0x1f8>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d041      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a29      	ldr	r2, [pc, #164]	; (800c990 <I2C_DMAError+0x1fc>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d03b      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a27      	ldr	r2, [pc, #156]	; (800c994 <I2C_DMAError+0x200>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d035      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a25      	ldr	r2, [pc, #148]	; (800c998 <I2C_DMAError+0x204>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d02f      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a23      	ldr	r2, [pc, #140]	; (800c99c <I2C_DMAError+0x208>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d029      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a21      	ldr	r2, [pc, #132]	; (800c9a0 <I2C_DMAError+0x20c>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d023      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4a1f      	ldr	r2, [pc, #124]	; (800c9a4 <I2C_DMAError+0x210>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d01d      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a1d      	ldr	r2, [pc, #116]	; (800c9a8 <I2C_DMAError+0x214>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d017      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a1b      	ldr	r2, [pc, #108]	; (800c9ac <I2C_DMAError+0x218>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d011      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a19      	ldr	r2, [pc, #100]	; (800c9b0 <I2C_DMAError+0x21c>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d00b      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a17      	ldr	r2, [pc, #92]	; (800c9b4 <I2C_DMAError+0x220>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d005      	beq.n	800c966 <I2C_DMAError+0x1d2>
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a15      	ldr	r2, [pc, #84]	; (800c9b8 <I2C_DMAError+0x224>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d12a      	bne.n	800c9bc <I2C_DMAError+0x228>
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	bf0c      	ite	eq
 800c972:	2301      	moveq	r3, #1
 800c974:	2300      	movne	r3, #0
 800c976:	b2db      	uxtb	r3, r3
 800c978:	e029      	b.n	800c9ce <I2C_DMAError+0x23a>
 800c97a:	bf00      	nop
 800c97c:	40020010 	.word	0x40020010
 800c980:	40020028 	.word	0x40020028
 800c984:	40020040 	.word	0x40020040
 800c988:	40020058 	.word	0x40020058
 800c98c:	40020070 	.word	0x40020070
 800c990:	40020088 	.word	0x40020088
 800c994:	400200a0 	.word	0x400200a0
 800c998:	400200b8 	.word	0x400200b8
 800c99c:	40020410 	.word	0x40020410
 800c9a0:	40020428 	.word	0x40020428
 800c9a4:	40020440 	.word	0x40020440
 800c9a8:	40020458 	.word	0x40020458
 800c9ac:	40020470 	.word	0x40020470
 800c9b0:	40020488 	.word	0x40020488
 800c9b4:	400204a0 	.word	0x400204a0
 800c9b8:	400204b8 	.word	0x400204b8
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	bf0c      	ite	eq
 800c9c8:	2301      	moveq	r3, #1
 800c9ca:	2300      	movne	r3, #0
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d001      	beq.n	800c9d6 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7fc fdf0 	bl	80095bc <HAL_DMA_GetError>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d00e      	beq.n	800ca00 <I2C_DMAError+0x26c>
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00b      	beq.n	800ca00 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c9f6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c9f8:	2110      	movs	r1, #16
 800c9fa:	68b8      	ldr	r0, [r7, #8]
 800c9fc:	f7ff fcf8 	bl	800c3f0 <I2C_ITError>
  }
}
 800ca00:	bf00      	nop
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca14:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d003      	beq.n	800ca26 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca22:	2200      	movs	r2, #0
 800ca24:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d003      	beq.n	800ca36 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca32:	2200      	movs	r2, #0
 800ca34:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f7ff fdca 	bl	800c5d0 <I2C_TreatErrorCallback>
}
 800ca3c:	bf00      	nop
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b087      	sub	sp, #28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	607b      	str	r3, [r7, #4]
 800ca4e:	460b      	mov	r3, r1
 800ca50:	817b      	strh	r3, [r7, #10]
 800ca52:	4613      	mov	r3, r2
 800ca54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ca56:	897b      	ldrh	r3, [r7, #10]
 800ca58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ca5c:	7a7b      	ldrb	r3, [r7, #9]
 800ca5e:	041b      	lsls	r3, r3, #16
 800ca60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ca64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ca6a:	6a3b      	ldr	r3, [r7, #32]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	685a      	ldr	r2, [r3, #4]
 800ca7a:	6a3b      	ldr	r3, [r7, #32]
 800ca7c:	0d5b      	lsrs	r3, r3, #21
 800ca7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ca82:	4b08      	ldr	r3, [pc, #32]	; (800caa4 <I2C_TransferConfig+0x60>)
 800ca84:	430b      	orrs	r3, r1
 800ca86:	43db      	mvns	r3, r3
 800ca88:	ea02 0103 	and.w	r1, r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	697a      	ldr	r2, [r7, #20]
 800ca92:	430a      	orrs	r2, r1
 800ca94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ca96:	bf00      	nop
 800ca98:	371c      	adds	r7, #28
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	03ff63ff 	.word	0x03ff63ff

0800caa8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800cab4:	2300      	movs	r3, #0
 800cab6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cabc:	4a39      	ldr	r2, [pc, #228]	; (800cba4 <I2C_Enable_IRQ+0xfc>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d032      	beq.n	800cb28 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800cac6:	4a38      	ldr	r2, [pc, #224]	; (800cba8 <I2C_Enable_IRQ+0x100>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d02d      	beq.n	800cb28 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800cad0:	4a36      	ldr	r2, [pc, #216]	; (800cbac <I2C_Enable_IRQ+0x104>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d028      	beq.n	800cb28 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cad6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	da03      	bge.n	800cae6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cae4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cae6:	887b      	ldrh	r3, [r7, #2]
 800cae8:	f003 0301 	and.w	r3, r3, #1
 800caec:	2b00      	cmp	r3, #0
 800caee:	d003      	beq.n	800caf8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800caf6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800caf8:	887b      	ldrh	r3, [r7, #2]
 800cafa:	f003 0302 	and.w	r3, r3, #2
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d003      	beq.n	800cb0a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800cb08:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cb0a:	887b      	ldrh	r3, [r7, #2]
 800cb0c:	2b10      	cmp	r3, #16
 800cb0e:	d103      	bne.n	800cb18 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cb16:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cb18:	887b      	ldrh	r3, [r7, #2]
 800cb1a:	2b20      	cmp	r3, #32
 800cb1c:	d133      	bne.n	800cb86 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f043 0320 	orr.w	r3, r3, #32
 800cb24:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cb26:	e02e      	b.n	800cb86 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cb28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	da03      	bge.n	800cb38 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cb36:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cb38:	887b      	ldrh	r3, [r7, #2]
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d003      	beq.n	800cb4a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800cb48:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cb4a:	887b      	ldrh	r3, [r7, #2]
 800cb4c:	f003 0302 	and.w	r3, r3, #2
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d003      	beq.n	800cb5c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800cb5a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cb5c:	887b      	ldrh	r3, [r7, #2]
 800cb5e:	2b10      	cmp	r3, #16
 800cb60:	d103      	bne.n	800cb6a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cb68:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cb6a:	887b      	ldrh	r3, [r7, #2]
 800cb6c:	2b20      	cmp	r3, #32
 800cb6e:	d103      	bne.n	800cb78 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cb76:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800cb78:	887b      	ldrh	r3, [r7, #2]
 800cb7a:	2b40      	cmp	r3, #64	; 0x40
 800cb7c:	d103      	bne.n	800cb86 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb84:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6819      	ldr	r1, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	430a      	orrs	r2, r1
 800cb94:	601a      	str	r2, [r3, #0]
}
 800cb96:	bf00      	nop
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	0800b2af 	.word	0x0800b2af
 800cba8:	0800b6f5 	.word	0x0800b6f5
 800cbac:	0800b495 	.word	0x0800b495

0800cbb0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	460b      	mov	r3, r1
 800cbba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cbc0:	887b      	ldrh	r3, [r7, #2]
 800cbc2:	f003 0301 	and.w	r3, r3, #1
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00f      	beq.n	800cbea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800cbd0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cbde:	2b28      	cmp	r3, #40	; 0x28
 800cbe0:	d003      	beq.n	800cbea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cbe8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cbea:	887b      	ldrh	r3, [r7, #2]
 800cbec:	f003 0302 	and.w	r3, r3, #2
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00f      	beq.n	800cc14 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800cbfa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cc08:	2b28      	cmp	r3, #40	; 0x28
 800cc0a:	d003      	beq.n	800cc14 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cc12:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cc14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	da03      	bge.n	800cc24 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cc22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cc24:	887b      	ldrh	r3, [r7, #2]
 800cc26:	2b10      	cmp	r3, #16
 800cc28:	d103      	bne.n	800cc32 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cc30:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cc32:	887b      	ldrh	r3, [r7, #2]
 800cc34:	2b20      	cmp	r3, #32
 800cc36:	d103      	bne.n	800cc40 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f043 0320 	orr.w	r3, r3, #32
 800cc3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800cc40:	887b      	ldrh	r3, [r7, #2]
 800cc42:	2b40      	cmp	r3, #64	; 0x40
 800cc44:	d103      	bne.n	800cc4e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc4c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	6819      	ldr	r1, [r3, #0]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	43da      	mvns	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	400a      	ands	r2, r1
 800cc5e:	601a      	str	r2, [r3, #0]
}
 800cc60:	bf00      	nop
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	2b20      	cmp	r3, #32
 800cc80:	d138      	bne.n	800ccf4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d101      	bne.n	800cc90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	e032      	b.n	800ccf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2224      	movs	r2, #36	; 0x24
 800cc9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f022 0201 	bic.w	r2, r2, #1
 800ccae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ccbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	6819      	ldr	r1, [r3, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	430a      	orrs	r2, r1
 800ccce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f042 0201 	orr.w	r2, r2, #1
 800ccde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2220      	movs	r2, #32
 800cce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	e000      	b.n	800ccf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ccf4:	2302      	movs	r3, #2
  }
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	370c      	adds	r7, #12
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cd02:	b480      	push	{r7}
 800cd04:	b085      	sub	sp, #20
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	2b20      	cmp	r3, #32
 800cd16:	d139      	bne.n	800cd8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d101      	bne.n	800cd26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cd22:	2302      	movs	r3, #2
 800cd24:	e033      	b.n	800cd8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2224      	movs	r2, #36	; 0x24
 800cd32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f022 0201 	bic.w	r2, r2, #1
 800cd44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cd54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	021b      	lsls	r3, r3, #8
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f042 0201 	orr.w	r2, r2, #1
 800cd76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2220      	movs	r2, #32
 800cd7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	e000      	b.n	800cd8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cd8c:	2302      	movs	r3, #2
  }
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
	...

0800cd9c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cda4:	4b0d      	ldr	r3, [pc, #52]	; (800cddc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800cda6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cdaa:	4a0c      	ldr	r2, [pc, #48]	; (800cddc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800cdac:	f043 0302 	orr.w	r3, r3, #2
 800cdb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cdb4:	4b09      	ldr	r3, [pc, #36]	; (800cddc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800cdb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cdba:	f003 0302 	and.w	r3, r3, #2
 800cdbe:	60fb      	str	r3, [r7, #12]
 800cdc0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800cdc2:	4b07      	ldr	r3, [pc, #28]	; (800cde0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	4906      	ldr	r1, [pc, #24]	; (800cde0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	604b      	str	r3, [r1, #4]
}
 800cdce:	bf00      	nop
 800cdd0:	3714      	adds	r7, #20
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	58024400 	.word	0x58024400
 800cde0:	58000400 	.word	0x58000400

0800cde4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800cdf4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800ce10:	4b18      	ldr	r3, [pc, #96]	; (800ce74 <HAL_PWR_EnterSTOPMode+0x70>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f023 0201 	bic.w	r2, r3, #1
 800ce18:	4916      	ldr	r1, [pc, #88]	; (800ce74 <HAL_PWR_EnterSTOPMode+0x70>)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800ce20:	4b14      	ldr	r3, [pc, #80]	; (800ce74 <HAL_PWR_EnterSTOPMode+0x70>)
 800ce22:	691b      	ldr	r3, [r3, #16]
 800ce24:	4a13      	ldr	r2, [pc, #76]	; (800ce74 <HAL_PWR_EnterSTOPMode+0x70>)
 800ce26:	f023 0305 	bic.w	r3, r3, #5
 800ce2a:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800ce2c:	4b11      	ldr	r3, [pc, #68]	; (800ce74 <HAL_PWR_EnterSTOPMode+0x70>)
 800ce2e:	691b      	ldr	r3, [r3, #16]
 800ce30:	4a10      	ldr	r2, [pc, #64]	; (800ce74 <HAL_PWR_EnterSTOPMode+0x70>)
 800ce32:	f023 0302 	bic.w	r3, r3, #2
 800ce36:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ce38:	4b0f      	ldr	r3, [pc, #60]	; (800ce78 <HAL_PWR_EnterSTOPMode+0x74>)
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	4a0e      	ldr	r2, [pc, #56]	; (800ce78 <HAL_PWR_EnterSTOPMode+0x74>)
 800ce3e:	f043 0304 	orr.w	r3, r3, #4
 800ce42:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800ce44:	f3bf 8f4f 	dsb	sy
}
 800ce48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ce4a:	f3bf 8f6f 	isb	sy
}
 800ce4e:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800ce50:	78fb      	ldrb	r3, [r7, #3]
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d101      	bne.n	800ce5a <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800ce56:	bf30      	wfi
 800ce58:	e000      	b.n	800ce5c <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800ce5a:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ce5c:	4b06      	ldr	r3, [pc, #24]	; (800ce78 <HAL_PWR_EnterSTOPMode+0x74>)
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	4a05      	ldr	r2, [pc, #20]	; (800ce78 <HAL_PWR_EnterSTOPMode+0x74>)
 800ce62:	f023 0304 	bic.w	r3, r3, #4
 800ce66:	6113      	str	r3, [r2, #16]
}
 800ce68:	bf00      	nop
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr
 800ce74:	58024800 	.word	0x58024800
 800ce78:	e000ed00 	.word	0xe000ed00

0800ce7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ce84:	4b19      	ldr	r3, [pc, #100]	; (800ceec <HAL_PWREx_ConfigSupply+0x70>)
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	f003 0304 	and.w	r3, r3, #4
 800ce8c:	2b04      	cmp	r3, #4
 800ce8e:	d00a      	beq.n	800cea6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ce90:	4b16      	ldr	r3, [pc, #88]	; (800ceec <HAL_PWREx_ConfigSupply+0x70>)
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d001      	beq.n	800cea2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e01f      	b.n	800cee2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800cea2:	2300      	movs	r3, #0
 800cea4:	e01d      	b.n	800cee2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cea6:	4b11      	ldr	r3, [pc, #68]	; (800ceec <HAL_PWREx_ConfigSupply+0x70>)
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	f023 0207 	bic.w	r2, r3, #7
 800ceae:	490f      	ldr	r1, [pc, #60]	; (800ceec <HAL_PWREx_ConfigSupply+0x70>)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ceb6:	f7f7 ff7f 	bl	8004db8 <HAL_GetTick>
 800ceba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cebc:	e009      	b.n	800ced2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cebe:	f7f7 ff7b 	bl	8004db8 <HAL_GetTick>
 800cec2:	4602      	mov	r2, r0
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	1ad3      	subs	r3, r2, r3
 800cec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cecc:	d901      	bls.n	800ced2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	e007      	b.n	800cee2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ced2:	4b06      	ldr	r3, [pc, #24]	; (800ceec <HAL_PWREx_ConfigSupply+0x70>)
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ceda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cede:	d1ee      	bne.n	800cebe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	58024800 	.word	0x58024800

0800cef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08c      	sub	sp, #48	; 0x30
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d102      	bne.n	800cf04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	f000 bc48 	b.w	800d794 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 0301 	and.w	r3, r3, #1
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 8088 	beq.w	800d022 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cf12:	4b99      	ldr	r3, [pc, #612]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cf14:	691b      	ldr	r3, [r3, #16]
 800cf16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cf1c:	4b96      	ldr	r3, [pc, #600]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cf1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf20:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf24:	2b10      	cmp	r3, #16
 800cf26:	d007      	beq.n	800cf38 <HAL_RCC_OscConfig+0x48>
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	2b18      	cmp	r3, #24
 800cf2c:	d111      	bne.n	800cf52 <HAL_RCC_OscConfig+0x62>
 800cf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf30:	f003 0303 	and.w	r3, r3, #3
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d10c      	bne.n	800cf52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf38:	4b8f      	ldr	r3, [pc, #572]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d06d      	beq.n	800d020 <HAL_RCC_OscConfig+0x130>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d169      	bne.n	800d020 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	f000 bc21 	b.w	800d794 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf5a:	d106      	bne.n	800cf6a <HAL_RCC_OscConfig+0x7a>
 800cf5c:	4b86      	ldr	r3, [pc, #536]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a85      	ldr	r2, [pc, #532]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cf62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf66:	6013      	str	r3, [r2, #0]
 800cf68:	e02e      	b.n	800cfc8 <HAL_RCC_OscConfig+0xd8>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10c      	bne.n	800cf8c <HAL_RCC_OscConfig+0x9c>
 800cf72:	4b81      	ldr	r3, [pc, #516]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a80      	ldr	r2, [pc, #512]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cf78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf7c:	6013      	str	r3, [r2, #0]
 800cf7e:	4b7e      	ldr	r3, [pc, #504]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a7d      	ldr	r2, [pc, #500]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cf84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf88:	6013      	str	r3, [r2, #0]
 800cf8a:	e01d      	b.n	800cfc8 <HAL_RCC_OscConfig+0xd8>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf94:	d10c      	bne.n	800cfb0 <HAL_RCC_OscConfig+0xc0>
 800cf96:	4b78      	ldr	r3, [pc, #480]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4a77      	ldr	r2, [pc, #476]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cf9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cfa0:	6013      	str	r3, [r2, #0]
 800cfa2:	4b75      	ldr	r3, [pc, #468]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a74      	ldr	r2, [pc, #464]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cfa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cfac:	6013      	str	r3, [r2, #0]
 800cfae:	e00b      	b.n	800cfc8 <HAL_RCC_OscConfig+0xd8>
 800cfb0:	4b71      	ldr	r3, [pc, #452]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a70      	ldr	r2, [pc, #448]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cfb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cfba:	6013      	str	r3, [r2, #0]
 800cfbc:	4b6e      	ldr	r3, [pc, #440]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a6d      	ldr	r2, [pc, #436]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cfc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cfc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d013      	beq.n	800cff8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfd0:	f7f7 fef2 	bl	8004db8 <HAL_GetTick>
 800cfd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cfd6:	e008      	b.n	800cfea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cfd8:	f7f7 feee 	bl	8004db8 <HAL_GetTick>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	2b64      	cmp	r3, #100	; 0x64
 800cfe4:	d901      	bls.n	800cfea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	e3d4      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cfea:	4b63      	ldr	r3, [pc, #396]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d0f0      	beq.n	800cfd8 <HAL_RCC_OscConfig+0xe8>
 800cff6:	e014      	b.n	800d022 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cff8:	f7f7 fede 	bl	8004db8 <HAL_GetTick>
 800cffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cffe:	e008      	b.n	800d012 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d000:	f7f7 feda 	bl	8004db8 <HAL_GetTick>
 800d004:	4602      	mov	r2, r0
 800d006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	2b64      	cmp	r3, #100	; 0x64
 800d00c:	d901      	bls.n	800d012 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d00e:	2303      	movs	r3, #3
 800d010:	e3c0      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d012:	4b59      	ldr	r3, [pc, #356]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1f0      	bne.n	800d000 <HAL_RCC_OscConfig+0x110>
 800d01e:	e000      	b.n	800d022 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f003 0302 	and.w	r3, r3, #2
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	f000 80ca 	beq.w	800d1c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d030:	4b51      	ldr	r3, [pc, #324]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d032:	691b      	ldr	r3, [r3, #16]
 800d034:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d038:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d03a:	4b4f      	ldr	r3, [pc, #316]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d040:	6a3b      	ldr	r3, [r7, #32]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d007      	beq.n	800d056 <HAL_RCC_OscConfig+0x166>
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	2b18      	cmp	r3, #24
 800d04a:	d156      	bne.n	800d0fa <HAL_RCC_OscConfig+0x20a>
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	f003 0303 	and.w	r3, r3, #3
 800d052:	2b00      	cmp	r3, #0
 800d054:	d151      	bne.n	800d0fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d056:	4b48      	ldr	r3, [pc, #288]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f003 0304 	and.w	r3, r3, #4
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d005      	beq.n	800d06e <HAL_RCC_OscConfig+0x17e>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d101      	bne.n	800d06e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e392      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d06e:	4b42      	ldr	r3, [pc, #264]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f023 0219 	bic.w	r2, r3, #25
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	493f      	ldr	r1, [pc, #252]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d07c:	4313      	orrs	r3, r2
 800d07e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d080:	f7f7 fe9a 	bl	8004db8 <HAL_GetTick>
 800d084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d086:	e008      	b.n	800d09a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d088:	f7f7 fe96 	bl	8004db8 <HAL_GetTick>
 800d08c:	4602      	mov	r2, r0
 800d08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	2b02      	cmp	r3, #2
 800d094:	d901      	bls.n	800d09a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d096:	2303      	movs	r3, #3
 800d098:	e37c      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d09a:	4b37      	ldr	r3, [pc, #220]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f003 0304 	and.w	r3, r3, #4
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d0f0      	beq.n	800d088 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0a6:	f7f7 fe93 	bl	8004dd0 <HAL_GetREVID>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	f241 0203 	movw	r2, #4099	; 0x1003
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d817      	bhi.n	800d0e4 <HAL_RCC_OscConfig+0x1f4>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	2b40      	cmp	r3, #64	; 0x40
 800d0ba:	d108      	bne.n	800d0ce <HAL_RCC_OscConfig+0x1de>
 800d0bc:	4b2e      	ldr	r3, [pc, #184]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d0c4:	4a2c      	ldr	r2, [pc, #176]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d0c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0cc:	e07a      	b.n	800d1c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0ce:	4b2a      	ldr	r3, [pc, #168]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	031b      	lsls	r3, r3, #12
 800d0dc:	4926      	ldr	r1, [pc, #152]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0e2:	e06f      	b.n	800d1c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0e4:	4b24      	ldr	r3, [pc, #144]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	061b      	lsls	r3, r3, #24
 800d0f2:	4921      	ldr	r1, [pc, #132]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0f8:	e064      	b.n	800d1c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d047      	beq.n	800d192 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d102:	4b1d      	ldr	r3, [pc, #116]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f023 0219 	bic.w	r2, r3, #25
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	491a      	ldr	r1, [pc, #104]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d110:	4313      	orrs	r3, r2
 800d112:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d114:	f7f7 fe50 	bl	8004db8 <HAL_GetTick>
 800d118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d11a:	e008      	b.n	800d12e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d11c:	f7f7 fe4c 	bl	8004db8 <HAL_GetTick>
 800d120:	4602      	mov	r2, r0
 800d122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	2b02      	cmp	r3, #2
 800d128:	d901      	bls.n	800d12e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d12a:	2303      	movs	r3, #3
 800d12c:	e332      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d12e:	4b12      	ldr	r3, [pc, #72]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f003 0304 	and.w	r3, r3, #4
 800d136:	2b00      	cmp	r3, #0
 800d138:	d0f0      	beq.n	800d11c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d13a:	f7f7 fe49 	bl	8004dd0 <HAL_GetREVID>
 800d13e:	4603      	mov	r3, r0
 800d140:	f241 0203 	movw	r2, #4099	; 0x1003
 800d144:	4293      	cmp	r3, r2
 800d146:	d819      	bhi.n	800d17c <HAL_RCC_OscConfig+0x28c>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	2b40      	cmp	r3, #64	; 0x40
 800d14e:	d108      	bne.n	800d162 <HAL_RCC_OscConfig+0x272>
 800d150:	4b09      	ldr	r3, [pc, #36]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d158:	4a07      	ldr	r2, [pc, #28]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d15a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d15e:	6053      	str	r3, [r2, #4]
 800d160:	e030      	b.n	800d1c4 <HAL_RCC_OscConfig+0x2d4>
 800d162:	4b05      	ldr	r3, [pc, #20]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	031b      	lsls	r3, r3, #12
 800d170:	4901      	ldr	r1, [pc, #4]	; (800d178 <HAL_RCC_OscConfig+0x288>)
 800d172:	4313      	orrs	r3, r2
 800d174:	604b      	str	r3, [r1, #4]
 800d176:	e025      	b.n	800d1c4 <HAL_RCC_OscConfig+0x2d4>
 800d178:	58024400 	.word	0x58024400
 800d17c:	4b9a      	ldr	r3, [pc, #616]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	691b      	ldr	r3, [r3, #16]
 800d188:	061b      	lsls	r3, r3, #24
 800d18a:	4997      	ldr	r1, [pc, #604]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d18c:	4313      	orrs	r3, r2
 800d18e:	604b      	str	r3, [r1, #4]
 800d190:	e018      	b.n	800d1c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d192:	4b95      	ldr	r3, [pc, #596]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a94      	ldr	r2, [pc, #592]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d198:	f023 0301 	bic.w	r3, r3, #1
 800d19c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d19e:	f7f7 fe0b 	bl	8004db8 <HAL_GetTick>
 800d1a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d1a4:	e008      	b.n	800d1b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d1a6:	f7f7 fe07 	bl	8004db8 <HAL_GetTick>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	1ad3      	subs	r3, r2, r3
 800d1b0:	2b02      	cmp	r3, #2
 800d1b2:	d901      	bls.n	800d1b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800d1b4:	2303      	movs	r3, #3
 800d1b6:	e2ed      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d1b8:	4b8b      	ldr	r3, [pc, #556]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f003 0304 	and.w	r3, r3, #4
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1f0      	bne.n	800d1a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f003 0310 	and.w	r3, r3, #16
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 80a9 	beq.w	800d324 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1d2:	4b85      	ldr	r3, [pc, #532]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d1d4:	691b      	ldr	r3, [r3, #16]
 800d1d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d1da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d1dc:	4b82      	ldr	r3, [pc, #520]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	2b08      	cmp	r3, #8
 800d1e6:	d007      	beq.n	800d1f8 <HAL_RCC_OscConfig+0x308>
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	2b18      	cmp	r3, #24
 800d1ec:	d13a      	bne.n	800d264 <HAL_RCC_OscConfig+0x374>
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	f003 0303 	and.w	r3, r3, #3
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d135      	bne.n	800d264 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d1f8:	4b7b      	ldr	r3, [pc, #492]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d200:	2b00      	cmp	r3, #0
 800d202:	d005      	beq.n	800d210 <HAL_RCC_OscConfig+0x320>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	69db      	ldr	r3, [r3, #28]
 800d208:	2b80      	cmp	r3, #128	; 0x80
 800d20a:	d001      	beq.n	800d210 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	e2c1      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d210:	f7f7 fdde 	bl	8004dd0 <HAL_GetREVID>
 800d214:	4603      	mov	r3, r0
 800d216:	f241 0203 	movw	r2, #4099	; 0x1003
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d817      	bhi.n	800d24e <HAL_RCC_OscConfig+0x35e>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a1b      	ldr	r3, [r3, #32]
 800d222:	2b20      	cmp	r3, #32
 800d224:	d108      	bne.n	800d238 <HAL_RCC_OscConfig+0x348>
 800d226:	4b70      	ldr	r3, [pc, #448]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d22e:	4a6e      	ldr	r2, [pc, #440]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d234:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d236:	e075      	b.n	800d324 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d238:	4b6b      	ldr	r3, [pc, #428]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6a1b      	ldr	r3, [r3, #32]
 800d244:	069b      	lsls	r3, r3, #26
 800d246:	4968      	ldr	r1, [pc, #416]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d248:	4313      	orrs	r3, r2
 800d24a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d24c:	e06a      	b.n	800d324 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d24e:	4b66      	ldr	r3, [pc, #408]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a1b      	ldr	r3, [r3, #32]
 800d25a:	061b      	lsls	r3, r3, #24
 800d25c:	4962      	ldr	r1, [pc, #392]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d25e:	4313      	orrs	r3, r2
 800d260:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d262:	e05f      	b.n	800d324 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	69db      	ldr	r3, [r3, #28]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d042      	beq.n	800d2f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d26c:	4b5e      	ldr	r3, [pc, #376]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a5d      	ldr	r2, [pc, #372]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d278:	f7f7 fd9e 	bl	8004db8 <HAL_GetTick>
 800d27c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d27e:	e008      	b.n	800d292 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d280:	f7f7 fd9a 	bl	8004db8 <HAL_GetTick>
 800d284:	4602      	mov	r2, r0
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	d901      	bls.n	800d292 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800d28e:	2303      	movs	r3, #3
 800d290:	e280      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d292:	4b55      	ldr	r3, [pc, #340]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d0f0      	beq.n	800d280 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d29e:	f7f7 fd97 	bl	8004dd0 <HAL_GetREVID>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	f241 0203 	movw	r2, #4099	; 0x1003
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d817      	bhi.n	800d2dc <HAL_RCC_OscConfig+0x3ec>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a1b      	ldr	r3, [r3, #32]
 800d2b0:	2b20      	cmp	r3, #32
 800d2b2:	d108      	bne.n	800d2c6 <HAL_RCC_OscConfig+0x3d6>
 800d2b4:	4b4c      	ldr	r3, [pc, #304]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d2bc:	4a4a      	ldr	r2, [pc, #296]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d2be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2c2:	6053      	str	r3, [r2, #4]
 800d2c4:	e02e      	b.n	800d324 <HAL_RCC_OscConfig+0x434>
 800d2c6:	4b48      	ldr	r3, [pc, #288]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a1b      	ldr	r3, [r3, #32]
 800d2d2:	069b      	lsls	r3, r3, #26
 800d2d4:	4944      	ldr	r1, [pc, #272]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	604b      	str	r3, [r1, #4]
 800d2da:	e023      	b.n	800d324 <HAL_RCC_OscConfig+0x434>
 800d2dc:	4b42      	ldr	r3, [pc, #264]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a1b      	ldr	r3, [r3, #32]
 800d2e8:	061b      	lsls	r3, r3, #24
 800d2ea:	493f      	ldr	r1, [pc, #252]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	60cb      	str	r3, [r1, #12]
 800d2f0:	e018      	b.n	800d324 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d2f2:	4b3d      	ldr	r3, [pc, #244]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a3c      	ldr	r2, [pc, #240]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d2f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2fe:	f7f7 fd5b 	bl	8004db8 <HAL_GetTick>
 800d302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d304:	e008      	b.n	800d318 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d306:	f7f7 fd57 	bl	8004db8 <HAL_GetTick>
 800d30a:	4602      	mov	r2, r0
 800d30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	2b02      	cmp	r3, #2
 800d312:	d901      	bls.n	800d318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d314:	2303      	movs	r3, #3
 800d316:	e23d      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d318:	4b33      	ldr	r3, [pc, #204]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d320:	2b00      	cmp	r3, #0
 800d322:	d1f0      	bne.n	800d306 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0308 	and.w	r3, r3, #8
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d036      	beq.n	800d39e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	695b      	ldr	r3, [r3, #20]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d019      	beq.n	800d36c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d338:	4b2b      	ldr	r3, [pc, #172]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d33c:	4a2a      	ldr	r2, [pc, #168]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d33e:	f043 0301 	orr.w	r3, r3, #1
 800d342:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d344:	f7f7 fd38 	bl	8004db8 <HAL_GetTick>
 800d348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d34a:	e008      	b.n	800d35e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d34c:	f7f7 fd34 	bl	8004db8 <HAL_GetTick>
 800d350:	4602      	mov	r2, r0
 800d352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	2b02      	cmp	r3, #2
 800d358:	d901      	bls.n	800d35e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800d35a:	2303      	movs	r3, #3
 800d35c:	e21a      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d35e:	4b22      	ldr	r3, [pc, #136]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d362:	f003 0302 	and.w	r3, r3, #2
 800d366:	2b00      	cmp	r3, #0
 800d368:	d0f0      	beq.n	800d34c <HAL_RCC_OscConfig+0x45c>
 800d36a:	e018      	b.n	800d39e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d36c:	4b1e      	ldr	r3, [pc, #120]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d36e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d370:	4a1d      	ldr	r2, [pc, #116]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d372:	f023 0301 	bic.w	r3, r3, #1
 800d376:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d378:	f7f7 fd1e 	bl	8004db8 <HAL_GetTick>
 800d37c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d37e:	e008      	b.n	800d392 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d380:	f7f7 fd1a 	bl	8004db8 <HAL_GetTick>
 800d384:	4602      	mov	r2, r0
 800d386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d388:	1ad3      	subs	r3, r2, r3
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d901      	bls.n	800d392 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d38e:	2303      	movs	r3, #3
 800d390:	e200      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d392:	4b15      	ldr	r3, [pc, #84]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d396:	f003 0302 	and.w	r3, r3, #2
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1f0      	bne.n	800d380 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f003 0320 	and.w	r3, r3, #32
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d039      	beq.n	800d41e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	699b      	ldr	r3, [r3, #24]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d01c      	beq.n	800d3ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d3b2:	4b0d      	ldr	r3, [pc, #52]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a0c      	ldr	r2, [pc, #48]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d3b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d3bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d3be:	f7f7 fcfb 	bl	8004db8 <HAL_GetTick>
 800d3c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d3c4:	e008      	b.n	800d3d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d3c6:	f7f7 fcf7 	bl	8004db8 <HAL_GetTick>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ce:	1ad3      	subs	r3, r2, r3
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	d901      	bls.n	800d3d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e1dd      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d3d8:	4b03      	ldr	r3, [pc, #12]	; (800d3e8 <HAL_RCC_OscConfig+0x4f8>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d0f0      	beq.n	800d3c6 <HAL_RCC_OscConfig+0x4d6>
 800d3e4:	e01b      	b.n	800d41e <HAL_RCC_OscConfig+0x52e>
 800d3e6:	bf00      	nop
 800d3e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d3ec:	4b9b      	ldr	r3, [pc, #620]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a9a      	ldr	r2, [pc, #616]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d3f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d3f8:	f7f7 fcde 	bl	8004db8 <HAL_GetTick>
 800d3fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d3fe:	e008      	b.n	800d412 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d400:	f7f7 fcda 	bl	8004db8 <HAL_GetTick>
 800d404:	4602      	mov	r2, r0
 800d406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d901      	bls.n	800d412 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d40e:	2303      	movs	r3, #3
 800d410:	e1c0      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d412:	4b92      	ldr	r3, [pc, #584]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1f0      	bne.n	800d400 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f003 0304 	and.w	r3, r3, #4
 800d426:	2b00      	cmp	r3, #0
 800d428:	f000 8081 	beq.w	800d52e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d42c:	4b8c      	ldr	r3, [pc, #560]	; (800d660 <HAL_RCC_OscConfig+0x770>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a8b      	ldr	r2, [pc, #556]	; (800d660 <HAL_RCC_OscConfig+0x770>)
 800d432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d438:	f7f7 fcbe 	bl	8004db8 <HAL_GetTick>
 800d43c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d43e:	e008      	b.n	800d452 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d440:	f7f7 fcba 	bl	8004db8 <HAL_GetTick>
 800d444:	4602      	mov	r2, r0
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	1ad3      	subs	r3, r2, r3
 800d44a:	2b64      	cmp	r3, #100	; 0x64
 800d44c:	d901      	bls.n	800d452 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d44e:	2303      	movs	r3, #3
 800d450:	e1a0      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d452:	4b83      	ldr	r3, [pc, #524]	; (800d660 <HAL_RCC_OscConfig+0x770>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d0f0      	beq.n	800d440 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	2b01      	cmp	r3, #1
 800d464:	d106      	bne.n	800d474 <HAL_RCC_OscConfig+0x584>
 800d466:	4b7d      	ldr	r3, [pc, #500]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d46a:	4a7c      	ldr	r2, [pc, #496]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d46c:	f043 0301 	orr.w	r3, r3, #1
 800d470:	6713      	str	r3, [r2, #112]	; 0x70
 800d472:	e02d      	b.n	800d4d0 <HAL_RCC_OscConfig+0x5e0>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10c      	bne.n	800d496 <HAL_RCC_OscConfig+0x5a6>
 800d47c:	4b77      	ldr	r3, [pc, #476]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d480:	4a76      	ldr	r2, [pc, #472]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d482:	f023 0301 	bic.w	r3, r3, #1
 800d486:	6713      	str	r3, [r2, #112]	; 0x70
 800d488:	4b74      	ldr	r3, [pc, #464]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d48c:	4a73      	ldr	r2, [pc, #460]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d48e:	f023 0304 	bic.w	r3, r3, #4
 800d492:	6713      	str	r3, [r2, #112]	; 0x70
 800d494:	e01c      	b.n	800d4d0 <HAL_RCC_OscConfig+0x5e0>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	2b05      	cmp	r3, #5
 800d49c:	d10c      	bne.n	800d4b8 <HAL_RCC_OscConfig+0x5c8>
 800d49e:	4b6f      	ldr	r3, [pc, #444]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4a2:	4a6e      	ldr	r2, [pc, #440]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d4a4:	f043 0304 	orr.w	r3, r3, #4
 800d4a8:	6713      	str	r3, [r2, #112]	; 0x70
 800d4aa:	4b6c      	ldr	r3, [pc, #432]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4ae:	4a6b      	ldr	r2, [pc, #428]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d4b0:	f043 0301 	orr.w	r3, r3, #1
 800d4b4:	6713      	str	r3, [r2, #112]	; 0x70
 800d4b6:	e00b      	b.n	800d4d0 <HAL_RCC_OscConfig+0x5e0>
 800d4b8:	4b68      	ldr	r3, [pc, #416]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4bc:	4a67      	ldr	r2, [pc, #412]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d4be:	f023 0301 	bic.w	r3, r3, #1
 800d4c2:	6713      	str	r3, [r2, #112]	; 0x70
 800d4c4:	4b65      	ldr	r3, [pc, #404]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4c8:	4a64      	ldr	r2, [pc, #400]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d4ca:	f023 0304 	bic.w	r3, r3, #4
 800d4ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d015      	beq.n	800d504 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4d8:	f7f7 fc6e 	bl	8004db8 <HAL_GetTick>
 800d4dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d4de:	e00a      	b.n	800d4f6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4e0:	f7f7 fc6a 	bl	8004db8 <HAL_GetTick>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e8:	1ad3      	subs	r3, r2, r3
 800d4ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d901      	bls.n	800d4f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d4f2:	2303      	movs	r3, #3
 800d4f4:	e14e      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d4f6:	4b59      	ldr	r3, [pc, #356]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4fa:	f003 0302 	and.w	r3, r3, #2
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d0ee      	beq.n	800d4e0 <HAL_RCC_OscConfig+0x5f0>
 800d502:	e014      	b.n	800d52e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d504:	f7f7 fc58 	bl	8004db8 <HAL_GetTick>
 800d508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d50a:	e00a      	b.n	800d522 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d50c:	f7f7 fc54 	bl	8004db8 <HAL_GetTick>
 800d510:	4602      	mov	r2, r0
 800d512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d514:	1ad3      	subs	r3, r2, r3
 800d516:	f241 3288 	movw	r2, #5000	; 0x1388
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d901      	bls.n	800d522 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d51e:	2303      	movs	r3, #3
 800d520:	e138      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d522:	4b4e      	ldr	r3, [pc, #312]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d526:	f003 0302 	and.w	r3, r3, #2
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1ee      	bne.n	800d50c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d532:	2b00      	cmp	r3, #0
 800d534:	f000 812d 	beq.w	800d792 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d538:	4b48      	ldr	r3, [pc, #288]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d540:	2b18      	cmp	r3, #24
 800d542:	f000 80bd 	beq.w	800d6c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	f040 809e 	bne.w	800d68c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d550:	4b42      	ldr	r3, [pc, #264]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a41      	ldr	r2, [pc, #260]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d55a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d55c:	f7f7 fc2c 	bl	8004db8 <HAL_GetTick>
 800d560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d562:	e008      	b.n	800d576 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d564:	f7f7 fc28 	bl	8004db8 <HAL_GetTick>
 800d568:	4602      	mov	r2, r0
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	1ad3      	subs	r3, r2, r3
 800d56e:	2b02      	cmp	r3, #2
 800d570:	d901      	bls.n	800d576 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d572:	2303      	movs	r3, #3
 800d574:	e10e      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d576:	4b39      	ldr	r3, [pc, #228]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1f0      	bne.n	800d564 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d582:	4b36      	ldr	r3, [pc, #216]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d586:	4b37      	ldr	r3, [pc, #220]	; (800d664 <HAL_RCC_OscConfig+0x774>)
 800d588:	4013      	ands	r3, r2
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d592:	0112      	lsls	r2, r2, #4
 800d594:	430a      	orrs	r2, r1
 800d596:	4931      	ldr	r1, [pc, #196]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d598:	4313      	orrs	r3, r2
 800d59a:	628b      	str	r3, [r1, #40]	; 0x28
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	025b      	lsls	r3, r3, #9
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	431a      	orrs	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	041b      	lsls	r3, r3, #16
 800d5ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5be:	431a      	orrs	r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	061b      	lsls	r3, r3, #24
 800d5c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d5cc:	4923      	ldr	r1, [pc, #140]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d5d2:	4b22      	ldr	r3, [pc, #136]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d6:	4a21      	ldr	r2, [pc, #132]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d5d8:	f023 0301 	bic.w	r3, r3, #1
 800d5dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d5de:	4b1f      	ldr	r3, [pc, #124]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d5e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5e2:	4b21      	ldr	r3, [pc, #132]	; (800d668 <HAL_RCC_OscConfig+0x778>)
 800d5e4:	4013      	ands	r3, r2
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d5ea:	00d2      	lsls	r2, r2, #3
 800d5ec:	491b      	ldr	r1, [pc, #108]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d5f2:	4b1a      	ldr	r3, [pc, #104]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f6:	f023 020c 	bic.w	r2, r3, #12
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fe:	4917      	ldr	r1, [pc, #92]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d600:	4313      	orrs	r3, r2
 800d602:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d604:	4b15      	ldr	r3, [pc, #84]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d608:	f023 0202 	bic.w	r2, r3, #2
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d610:	4912      	ldr	r1, [pc, #72]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d612:	4313      	orrs	r3, r2
 800d614:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d616:	4b11      	ldr	r3, [pc, #68]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61a:	4a10      	ldr	r2, [pc, #64]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d61c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d620:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d622:	4b0e      	ldr	r3, [pc, #56]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d626:	4a0d      	ldr	r2, [pc, #52]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d62c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d62e:	4b0b      	ldr	r3, [pc, #44]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d632:	4a0a      	ldr	r2, [pc, #40]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d638:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d63a:	4b08      	ldr	r3, [pc, #32]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63e:	4a07      	ldr	r2, [pc, #28]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d640:	f043 0301 	orr.w	r3, r3, #1
 800d644:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d646:	4b05      	ldr	r3, [pc, #20]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a04      	ldr	r2, [pc, #16]	; (800d65c <HAL_RCC_OscConfig+0x76c>)
 800d64c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d652:	f7f7 fbb1 	bl	8004db8 <HAL_GetTick>
 800d656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d658:	e011      	b.n	800d67e <HAL_RCC_OscConfig+0x78e>
 800d65a:	bf00      	nop
 800d65c:	58024400 	.word	0x58024400
 800d660:	58024800 	.word	0x58024800
 800d664:	fffffc0c 	.word	0xfffffc0c
 800d668:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d66c:	f7f7 fba4 	bl	8004db8 <HAL_GetTick>
 800d670:	4602      	mov	r2, r0
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	2b02      	cmp	r3, #2
 800d678:	d901      	bls.n	800d67e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d67a:	2303      	movs	r3, #3
 800d67c:	e08a      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d67e:	4b47      	ldr	r3, [pc, #284]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d686:	2b00      	cmp	r3, #0
 800d688:	d0f0      	beq.n	800d66c <HAL_RCC_OscConfig+0x77c>
 800d68a:	e082      	b.n	800d792 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d68c:	4b43      	ldr	r3, [pc, #268]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a42      	ldr	r2, [pc, #264]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d698:	f7f7 fb8e 	bl	8004db8 <HAL_GetTick>
 800d69c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d69e:	e008      	b.n	800d6b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d6a0:	f7f7 fb8a 	bl	8004db8 <HAL_GetTick>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	2b02      	cmp	r3, #2
 800d6ac:	d901      	bls.n	800d6b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d6ae:	2303      	movs	r3, #3
 800d6b0:	e070      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d6b2:	4b3a      	ldr	r3, [pc, #232]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1f0      	bne.n	800d6a0 <HAL_RCC_OscConfig+0x7b0>
 800d6be:	e068      	b.n	800d792 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d6c0:	4b36      	ldr	r3, [pc, #216]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d6c6:	4b35      	ldr	r3, [pc, #212]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d031      	beq.n	800d738 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	f003 0203 	and.w	r2, r3, #3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d12a      	bne.n	800d738 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	091b      	lsrs	r3, r3, #4
 800d6e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d122      	bne.n	800d738 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d11a      	bne.n	800d738 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	0a5b      	lsrs	r3, r3, #9
 800d706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d70e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d710:	429a      	cmp	r2, r3
 800d712:	d111      	bne.n	800d738 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	0c1b      	lsrs	r3, r3, #16
 800d718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d720:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d722:	429a      	cmp	r2, r3
 800d724:	d108      	bne.n	800d738 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	0e1b      	lsrs	r3, r3, #24
 800d72a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d732:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d734:	429a      	cmp	r2, r3
 800d736:	d001      	beq.n	800d73c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d738:	2301      	movs	r3, #1
 800d73a:	e02b      	b.n	800d794 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d73c:	4b17      	ldr	r3, [pc, #92]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d740:	08db      	lsrs	r3, r3, #3
 800d742:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d746:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d74c:	693a      	ldr	r2, [r7, #16]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d01f      	beq.n	800d792 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d752:	4b12      	ldr	r3, [pc, #72]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d756:	4a11      	ldr	r2, [pc, #68]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d758:	f023 0301 	bic.w	r3, r3, #1
 800d75c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d75e:	f7f7 fb2b 	bl	8004db8 <HAL_GetTick>
 800d762:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d764:	bf00      	nop
 800d766:	f7f7 fb27 	bl	8004db8 <HAL_GetTick>
 800d76a:	4602      	mov	r2, r0
 800d76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76e:	4293      	cmp	r3, r2
 800d770:	d0f9      	beq.n	800d766 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d772:	4b0a      	ldr	r3, [pc, #40]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d776:	4b0a      	ldr	r3, [pc, #40]	; (800d7a0 <HAL_RCC_OscConfig+0x8b0>)
 800d778:	4013      	ands	r3, r2
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d77e:	00d2      	lsls	r2, r2, #3
 800d780:	4906      	ldr	r1, [pc, #24]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d782:	4313      	orrs	r3, r2
 800d784:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d786:	4b05      	ldr	r3, [pc, #20]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d78a:	4a04      	ldr	r2, [pc, #16]	; (800d79c <HAL_RCC_OscConfig+0x8ac>)
 800d78c:	f043 0301 	orr.w	r3, r3, #1
 800d790:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	3730      	adds	r7, #48	; 0x30
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	58024400 	.word	0x58024400
 800d7a0:	ffff0007 	.word	0xffff0007

0800d7a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d101      	bne.n	800d7b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	e19c      	b.n	800daf2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d7b8:	4b8a      	ldr	r3, [pc, #552]	; (800d9e4 <HAL_RCC_ClockConfig+0x240>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f003 030f 	and.w	r3, r3, #15
 800d7c0:	683a      	ldr	r2, [r7, #0]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d910      	bls.n	800d7e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d7c6:	4b87      	ldr	r3, [pc, #540]	; (800d9e4 <HAL_RCC_ClockConfig+0x240>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f023 020f 	bic.w	r2, r3, #15
 800d7ce:	4985      	ldr	r1, [pc, #532]	; (800d9e4 <HAL_RCC_ClockConfig+0x240>)
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d7d6:	4b83      	ldr	r3, [pc, #524]	; (800d9e4 <HAL_RCC_ClockConfig+0x240>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f003 030f 	and.w	r3, r3, #15
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d001      	beq.n	800d7e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e184      	b.n	800daf2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f003 0304 	and.w	r3, r3, #4
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d010      	beq.n	800d816 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	691a      	ldr	r2, [r3, #16]
 800d7f8:	4b7b      	ldr	r3, [pc, #492]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d7fa:	699b      	ldr	r3, [r3, #24]
 800d7fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d800:	429a      	cmp	r2, r3
 800d802:	d908      	bls.n	800d816 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d804:	4b78      	ldr	r3, [pc, #480]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	4975      	ldr	r1, [pc, #468]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d812:	4313      	orrs	r3, r2
 800d814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f003 0308 	and.w	r3, r3, #8
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d010      	beq.n	800d844 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	695a      	ldr	r2, [r3, #20]
 800d826:	4b70      	ldr	r3, [pc, #448]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d828:	69db      	ldr	r3, [r3, #28]
 800d82a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d82e:	429a      	cmp	r2, r3
 800d830:	d908      	bls.n	800d844 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d832:	4b6d      	ldr	r3, [pc, #436]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d834:	69db      	ldr	r3, [r3, #28]
 800d836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	695b      	ldr	r3, [r3, #20]
 800d83e:	496a      	ldr	r1, [pc, #424]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d840:	4313      	orrs	r3, r2
 800d842:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f003 0310 	and.w	r3, r3, #16
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d010      	beq.n	800d872 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	699a      	ldr	r2, [r3, #24]
 800d854:	4b64      	ldr	r3, [pc, #400]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d856:	69db      	ldr	r3, [r3, #28]
 800d858:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d908      	bls.n	800d872 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d860:	4b61      	ldr	r3, [pc, #388]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d862:	69db      	ldr	r3, [r3, #28]
 800d864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	495e      	ldr	r1, [pc, #376]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d86e:	4313      	orrs	r3, r2
 800d870:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f003 0320 	and.w	r3, r3, #32
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d010      	beq.n	800d8a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	69da      	ldr	r2, [r3, #28]
 800d882:	4b59      	ldr	r3, [pc, #356]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d884:	6a1b      	ldr	r3, [r3, #32]
 800d886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d908      	bls.n	800d8a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d88e:	4b56      	ldr	r3, [pc, #344]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	69db      	ldr	r3, [r3, #28]
 800d89a:	4953      	ldr	r1, [pc, #332]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d89c:	4313      	orrs	r3, r2
 800d89e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f003 0302 	and.w	r3, r3, #2
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d010      	beq.n	800d8ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	68da      	ldr	r2, [r3, #12]
 800d8b0:	4b4d      	ldr	r3, [pc, #308]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	f003 030f 	and.w	r3, r3, #15
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d908      	bls.n	800d8ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d8bc:	4b4a      	ldr	r3, [pc, #296]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d8be:	699b      	ldr	r3, [r3, #24]
 800d8c0:	f023 020f 	bic.w	r2, r3, #15
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	4947      	ldr	r1, [pc, #284]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f003 0301 	and.w	r3, r3, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d055      	beq.n	800d986 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d8da:	4b43      	ldr	r3, [pc, #268]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d8dc:	699b      	ldr	r3, [r3, #24]
 800d8de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	4940      	ldr	r1, [pc, #256]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	d107      	bne.n	800d904 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d8f4:	4b3c      	ldr	r3, [pc, #240]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d121      	bne.n	800d944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	e0f6      	b.n	800daf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	2b03      	cmp	r3, #3
 800d90a:	d107      	bne.n	800d91c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d90c:	4b36      	ldr	r3, [pc, #216]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d914:	2b00      	cmp	r3, #0
 800d916:	d115      	bne.n	800d944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d918:	2301      	movs	r3, #1
 800d91a:	e0ea      	b.n	800daf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	2b01      	cmp	r3, #1
 800d922:	d107      	bne.n	800d934 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d924:	4b30      	ldr	r3, [pc, #192]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d109      	bne.n	800d944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d930:	2301      	movs	r3, #1
 800d932:	e0de      	b.n	800daf2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d934:	4b2c      	ldr	r3, [pc, #176]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f003 0304 	and.w	r3, r3, #4
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d101      	bne.n	800d944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	e0d6      	b.n	800daf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d944:	4b28      	ldr	r3, [pc, #160]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d946:	691b      	ldr	r3, [r3, #16]
 800d948:	f023 0207 	bic.w	r2, r3, #7
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	4925      	ldr	r1, [pc, #148]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d952:	4313      	orrs	r3, r2
 800d954:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d956:	f7f7 fa2f 	bl	8004db8 <HAL_GetTick>
 800d95a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d95c:	e00a      	b.n	800d974 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d95e:	f7f7 fa2b 	bl	8004db8 <HAL_GetTick>
 800d962:	4602      	mov	r2, r0
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	1ad3      	subs	r3, r2, r3
 800d968:	f241 3288 	movw	r2, #5000	; 0x1388
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d901      	bls.n	800d974 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d970:	2303      	movs	r3, #3
 800d972:	e0be      	b.n	800daf2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d974:	4b1c      	ldr	r3, [pc, #112]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d976:	691b      	ldr	r3, [r3, #16]
 800d978:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	00db      	lsls	r3, r3, #3
 800d982:	429a      	cmp	r2, r3
 800d984:	d1eb      	bne.n	800d95e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f003 0302 	and.w	r3, r3, #2
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d010      	beq.n	800d9b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	68da      	ldr	r2, [r3, #12]
 800d996:	4b14      	ldr	r3, [pc, #80]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	f003 030f 	and.w	r3, r3, #15
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d208      	bcs.n	800d9b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d9a2:	4b11      	ldr	r3, [pc, #68]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d9a4:	699b      	ldr	r3, [r3, #24]
 800d9a6:	f023 020f 	bic.w	r2, r3, #15
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	490e      	ldr	r1, [pc, #56]	; (800d9e8 <HAL_RCC_ClockConfig+0x244>)
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d9b4:	4b0b      	ldr	r3, [pc, #44]	; (800d9e4 <HAL_RCC_ClockConfig+0x240>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f003 030f 	and.w	r3, r3, #15
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d214      	bcs.n	800d9ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9c2:	4b08      	ldr	r3, [pc, #32]	; (800d9e4 <HAL_RCC_ClockConfig+0x240>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f023 020f 	bic.w	r2, r3, #15
 800d9ca:	4906      	ldr	r1, [pc, #24]	; (800d9e4 <HAL_RCC_ClockConfig+0x240>)
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9d2:	4b04      	ldr	r3, [pc, #16]	; (800d9e4 <HAL_RCC_ClockConfig+0x240>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f003 030f 	and.w	r3, r3, #15
 800d9da:	683a      	ldr	r2, [r7, #0]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d005      	beq.n	800d9ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e086      	b.n	800daf2 <HAL_RCC_ClockConfig+0x34e>
 800d9e4:	52002000 	.word	0x52002000
 800d9e8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f003 0304 	and.w	r3, r3, #4
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d010      	beq.n	800da1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	691a      	ldr	r2, [r3, #16]
 800d9fc:	4b3f      	ldr	r3, [pc, #252]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800d9fe:	699b      	ldr	r3, [r3, #24]
 800da00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da04:	429a      	cmp	r2, r3
 800da06:	d208      	bcs.n	800da1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800da08:	4b3c      	ldr	r3, [pc, #240]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	691b      	ldr	r3, [r3, #16]
 800da14:	4939      	ldr	r1, [pc, #228]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800da16:	4313      	orrs	r3, r2
 800da18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f003 0308 	and.w	r3, r3, #8
 800da22:	2b00      	cmp	r3, #0
 800da24:	d010      	beq.n	800da48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	695a      	ldr	r2, [r3, #20]
 800da2a:	4b34      	ldr	r3, [pc, #208]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800da2c:	69db      	ldr	r3, [r3, #28]
 800da2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da32:	429a      	cmp	r2, r3
 800da34:	d208      	bcs.n	800da48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800da36:	4b31      	ldr	r3, [pc, #196]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800da38:	69db      	ldr	r3, [r3, #28]
 800da3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	695b      	ldr	r3, [r3, #20]
 800da42:	492e      	ldr	r1, [pc, #184]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800da44:	4313      	orrs	r3, r2
 800da46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f003 0310 	and.w	r3, r3, #16
 800da50:	2b00      	cmp	r3, #0
 800da52:	d010      	beq.n	800da76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	699a      	ldr	r2, [r3, #24]
 800da58:	4b28      	ldr	r3, [pc, #160]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800da5a:	69db      	ldr	r3, [r3, #28]
 800da5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800da60:	429a      	cmp	r2, r3
 800da62:	d208      	bcs.n	800da76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800da64:	4b25      	ldr	r3, [pc, #148]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800da66:	69db      	ldr	r3, [r3, #28]
 800da68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	699b      	ldr	r3, [r3, #24]
 800da70:	4922      	ldr	r1, [pc, #136]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800da72:	4313      	orrs	r3, r2
 800da74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f003 0320 	and.w	r3, r3, #32
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d010      	beq.n	800daa4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	69da      	ldr	r2, [r3, #28]
 800da86:	4b1d      	ldr	r3, [pc, #116]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800da88:	6a1b      	ldr	r3, [r3, #32]
 800da8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da8e:	429a      	cmp	r2, r3
 800da90:	d208      	bcs.n	800daa4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800da92:	4b1a      	ldr	r3, [pc, #104]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800da94:	6a1b      	ldr	r3, [r3, #32]
 800da96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	69db      	ldr	r3, [r3, #28]
 800da9e:	4917      	ldr	r1, [pc, #92]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800daa0:	4313      	orrs	r3, r2
 800daa2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800daa4:	f000 f834 	bl	800db10 <HAL_RCC_GetSysClockFreq>
 800daa8:	4602      	mov	r2, r0
 800daaa:	4b14      	ldr	r3, [pc, #80]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800daac:	699b      	ldr	r3, [r3, #24]
 800daae:	0a1b      	lsrs	r3, r3, #8
 800dab0:	f003 030f 	and.w	r3, r3, #15
 800dab4:	4912      	ldr	r1, [pc, #72]	; (800db00 <HAL_RCC_ClockConfig+0x35c>)
 800dab6:	5ccb      	ldrb	r3, [r1, r3]
 800dab8:	f003 031f 	and.w	r3, r3, #31
 800dabc:	fa22 f303 	lsr.w	r3, r2, r3
 800dac0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dac2:	4b0e      	ldr	r3, [pc, #56]	; (800dafc <HAL_RCC_ClockConfig+0x358>)
 800dac4:	699b      	ldr	r3, [r3, #24]
 800dac6:	f003 030f 	and.w	r3, r3, #15
 800daca:	4a0d      	ldr	r2, [pc, #52]	; (800db00 <HAL_RCC_ClockConfig+0x35c>)
 800dacc:	5cd3      	ldrb	r3, [r2, r3]
 800dace:	f003 031f 	and.w	r3, r3, #31
 800dad2:	693a      	ldr	r2, [r7, #16]
 800dad4:	fa22 f303 	lsr.w	r3, r2, r3
 800dad8:	4a0a      	ldr	r2, [pc, #40]	; (800db04 <HAL_RCC_ClockConfig+0x360>)
 800dada:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dadc:	4a0a      	ldr	r2, [pc, #40]	; (800db08 <HAL_RCC_ClockConfig+0x364>)
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800dae2:	4b0a      	ldr	r3, [pc, #40]	; (800db0c <HAL_RCC_ClockConfig+0x368>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7f5 feca 	bl	8003880 <HAL_InitTick>
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3718      	adds	r7, #24
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	58024400 	.word	0x58024400
 800db00:	0801a1d4 	.word	0x0801a1d4
 800db04:	240000c0 	.word	0x240000c0
 800db08:	240000bc 	.word	0x240000bc
 800db0c:	240000c4 	.word	0x240000c4

0800db10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800db10:	b480      	push	{r7}
 800db12:	b089      	sub	sp, #36	; 0x24
 800db14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800db16:	4bb3      	ldr	r3, [pc, #716]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db18:	691b      	ldr	r3, [r3, #16]
 800db1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db1e:	2b18      	cmp	r3, #24
 800db20:	f200 8155 	bhi.w	800ddce <HAL_RCC_GetSysClockFreq+0x2be>
 800db24:	a201      	add	r2, pc, #4	; (adr r2, 800db2c <HAL_RCC_GetSysClockFreq+0x1c>)
 800db26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db2a:	bf00      	nop
 800db2c:	0800db91 	.word	0x0800db91
 800db30:	0800ddcf 	.word	0x0800ddcf
 800db34:	0800ddcf 	.word	0x0800ddcf
 800db38:	0800ddcf 	.word	0x0800ddcf
 800db3c:	0800ddcf 	.word	0x0800ddcf
 800db40:	0800ddcf 	.word	0x0800ddcf
 800db44:	0800ddcf 	.word	0x0800ddcf
 800db48:	0800ddcf 	.word	0x0800ddcf
 800db4c:	0800dbb7 	.word	0x0800dbb7
 800db50:	0800ddcf 	.word	0x0800ddcf
 800db54:	0800ddcf 	.word	0x0800ddcf
 800db58:	0800ddcf 	.word	0x0800ddcf
 800db5c:	0800ddcf 	.word	0x0800ddcf
 800db60:	0800ddcf 	.word	0x0800ddcf
 800db64:	0800ddcf 	.word	0x0800ddcf
 800db68:	0800ddcf 	.word	0x0800ddcf
 800db6c:	0800dbbd 	.word	0x0800dbbd
 800db70:	0800ddcf 	.word	0x0800ddcf
 800db74:	0800ddcf 	.word	0x0800ddcf
 800db78:	0800ddcf 	.word	0x0800ddcf
 800db7c:	0800ddcf 	.word	0x0800ddcf
 800db80:	0800ddcf 	.word	0x0800ddcf
 800db84:	0800ddcf 	.word	0x0800ddcf
 800db88:	0800ddcf 	.word	0x0800ddcf
 800db8c:	0800dbc3 	.word	0x0800dbc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db90:	4b94      	ldr	r3, [pc, #592]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f003 0320 	and.w	r3, r3, #32
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d009      	beq.n	800dbb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db9c:	4b91      	ldr	r3, [pc, #580]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	08db      	lsrs	r3, r3, #3
 800dba2:	f003 0303 	and.w	r3, r3, #3
 800dba6:	4a90      	ldr	r2, [pc, #576]	; (800dde8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dba8:	fa22 f303 	lsr.w	r3, r2, r3
 800dbac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800dbae:	e111      	b.n	800ddd4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800dbb0:	4b8d      	ldr	r3, [pc, #564]	; (800dde8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dbb2:	61bb      	str	r3, [r7, #24]
      break;
 800dbb4:	e10e      	b.n	800ddd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800dbb6:	4b8d      	ldr	r3, [pc, #564]	; (800ddec <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dbb8:	61bb      	str	r3, [r7, #24]
      break;
 800dbba:	e10b      	b.n	800ddd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800dbbc:	4b8c      	ldr	r3, [pc, #560]	; (800ddf0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800dbbe:	61bb      	str	r3, [r7, #24]
      break;
 800dbc0:	e108      	b.n	800ddd4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dbc2:	4b88      	ldr	r3, [pc, #544]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbc6:	f003 0303 	and.w	r3, r3, #3
 800dbca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800dbcc:	4b85      	ldr	r3, [pc, #532]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd0:	091b      	lsrs	r3, r3, #4
 800dbd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbd6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800dbd8:	4b82      	ldr	r3, [pc, #520]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbdc:	f003 0301 	and.w	r3, r3, #1
 800dbe0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800dbe2:	4b80      	ldr	r3, [pc, #512]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe6:	08db      	lsrs	r3, r3, #3
 800dbe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	fb02 f303 	mul.w	r3, r2, r3
 800dbf2:	ee07 3a90 	vmov	s15, r3
 800dbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbfa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f000 80e1 	beq.w	800ddc8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	f000 8083 	beq.w	800dd14 <HAL_RCC_GetSysClockFreq+0x204>
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	2b02      	cmp	r3, #2
 800dc12:	f200 80a1 	bhi.w	800dd58 <HAL_RCC_GetSysClockFreq+0x248>
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d003      	beq.n	800dc24 <HAL_RCC_GetSysClockFreq+0x114>
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d056      	beq.n	800dcd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800dc22:	e099      	b.n	800dd58 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc24:	4b6f      	ldr	r3, [pc, #444]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f003 0320 	and.w	r3, r3, #32
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d02d      	beq.n	800dc8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc30:	4b6c      	ldr	r3, [pc, #432]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	08db      	lsrs	r3, r3, #3
 800dc36:	f003 0303 	and.w	r3, r3, #3
 800dc3a:	4a6b      	ldr	r2, [pc, #428]	; (800dde8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dc3c:	fa22 f303 	lsr.w	r3, r2, r3
 800dc40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	ee07 3a90 	vmov	s15, r3
 800dc48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	ee07 3a90 	vmov	s15, r3
 800dc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc5a:	4b62      	ldr	r3, [pc, #392]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc62:	ee07 3a90 	vmov	s15, r3
 800dc66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ddf4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dc72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800dc8a:	e087      	b.n	800dd9c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	ee07 3a90 	vmov	s15, r3
 800dc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc96:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ddf8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800dc9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc9e:	4b51      	ldr	r3, [pc, #324]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dca6:	ee07 3a90 	vmov	s15, r3
 800dcaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcae:	ed97 6a02 	vldr	s12, [r7, #8]
 800dcb2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ddf4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dcb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dcce:	e065      	b.n	800dd9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	ee07 3a90 	vmov	s15, r3
 800dcd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcda:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ddfc <HAL_RCC_GetSysClockFreq+0x2ec>
 800dcde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dce2:	4b40      	ldr	r3, [pc, #256]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcea:	ee07 3a90 	vmov	s15, r3
 800dcee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800dcf6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ddf4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dcfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dd12:	e043      	b.n	800dd9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	ee07 3a90 	vmov	s15, r3
 800dd1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd1e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800de00 <HAL_RCC_GetSysClockFreq+0x2f0>
 800dd22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd26:	4b2f      	ldr	r3, [pc, #188]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd2e:	ee07 3a90 	vmov	s15, r3
 800dd32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd36:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd3a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ddf4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dd3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dd56:	e021      	b.n	800dd9c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	ee07 3a90 	vmov	s15, r3
 800dd5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd62:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ddfc <HAL_RCC_GetSysClockFreq+0x2ec>
 800dd66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd6a:	4b1e      	ldr	r3, [pc, #120]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd72:	ee07 3a90 	vmov	s15, r3
 800dd76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd7e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ddf4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dd82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dd9a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800dd9c:	4b11      	ldr	r3, [pc, #68]	; (800dde4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dda0:	0a5b      	lsrs	r3, r3, #9
 800dda2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dda6:	3301      	adds	r3, #1
 800dda8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	ee07 3a90 	vmov	s15, r3
 800ddb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ddb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddc0:	ee17 3a90 	vmov	r3, s15
 800ddc4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ddc6:	e005      	b.n	800ddd4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	61bb      	str	r3, [r7, #24]
      break;
 800ddcc:	e002      	b.n	800ddd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ddce:	4b07      	ldr	r3, [pc, #28]	; (800ddec <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ddd0:	61bb      	str	r3, [r7, #24]
      break;
 800ddd2:	bf00      	nop
  }

  return sysclockfreq;
 800ddd4:	69bb      	ldr	r3, [r7, #24]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3724      	adds	r7, #36	; 0x24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	58024400 	.word	0x58024400
 800dde8:	03d09000 	.word	0x03d09000
 800ddec:	003d0900 	.word	0x003d0900
 800ddf0:	017d7840 	.word	0x017d7840
 800ddf4:	46000000 	.word	0x46000000
 800ddf8:	4c742400 	.word	0x4c742400
 800ddfc:	4a742400 	.word	0x4a742400
 800de00:	4bbebc20 	.word	0x4bbebc20

0800de04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800de0a:	f7ff fe81 	bl	800db10 <HAL_RCC_GetSysClockFreq>
 800de0e:	4602      	mov	r2, r0
 800de10:	4b10      	ldr	r3, [pc, #64]	; (800de54 <HAL_RCC_GetHCLKFreq+0x50>)
 800de12:	699b      	ldr	r3, [r3, #24]
 800de14:	0a1b      	lsrs	r3, r3, #8
 800de16:	f003 030f 	and.w	r3, r3, #15
 800de1a:	490f      	ldr	r1, [pc, #60]	; (800de58 <HAL_RCC_GetHCLKFreq+0x54>)
 800de1c:	5ccb      	ldrb	r3, [r1, r3]
 800de1e:	f003 031f 	and.w	r3, r3, #31
 800de22:	fa22 f303 	lsr.w	r3, r2, r3
 800de26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800de28:	4b0a      	ldr	r3, [pc, #40]	; (800de54 <HAL_RCC_GetHCLKFreq+0x50>)
 800de2a:	699b      	ldr	r3, [r3, #24]
 800de2c:	f003 030f 	and.w	r3, r3, #15
 800de30:	4a09      	ldr	r2, [pc, #36]	; (800de58 <HAL_RCC_GetHCLKFreq+0x54>)
 800de32:	5cd3      	ldrb	r3, [r2, r3]
 800de34:	f003 031f 	and.w	r3, r3, #31
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	fa22 f303 	lsr.w	r3, r2, r3
 800de3e:	4a07      	ldr	r2, [pc, #28]	; (800de5c <HAL_RCC_GetHCLKFreq+0x58>)
 800de40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800de42:	4a07      	ldr	r2, [pc, #28]	; (800de60 <HAL_RCC_GetHCLKFreq+0x5c>)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800de48:	4b04      	ldr	r3, [pc, #16]	; (800de5c <HAL_RCC_GetHCLKFreq+0x58>)
 800de4a:	681b      	ldr	r3, [r3, #0]
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	58024400 	.word	0x58024400
 800de58:	0801a1d4 	.word	0x0801a1d4
 800de5c:	240000c0 	.word	0x240000c0
 800de60:	240000bc 	.word	0x240000bc

0800de64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800de68:	f7ff ffcc 	bl	800de04 <HAL_RCC_GetHCLKFreq>
 800de6c:	4602      	mov	r2, r0
 800de6e:	4b06      	ldr	r3, [pc, #24]	; (800de88 <HAL_RCC_GetPCLK1Freq+0x24>)
 800de70:	69db      	ldr	r3, [r3, #28]
 800de72:	091b      	lsrs	r3, r3, #4
 800de74:	f003 0307 	and.w	r3, r3, #7
 800de78:	4904      	ldr	r1, [pc, #16]	; (800de8c <HAL_RCC_GetPCLK1Freq+0x28>)
 800de7a:	5ccb      	ldrb	r3, [r1, r3]
 800de7c:	f003 031f 	and.w	r3, r3, #31
 800de80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800de84:	4618      	mov	r0, r3
 800de86:	bd80      	pop	{r7, pc}
 800de88:	58024400 	.word	0x58024400
 800de8c:	0801a1d4 	.word	0x0801a1d4

0800de90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800de94:	f7ff ffb6 	bl	800de04 <HAL_RCC_GetHCLKFreq>
 800de98:	4602      	mov	r2, r0
 800de9a:	4b06      	ldr	r3, [pc, #24]	; (800deb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800de9c:	69db      	ldr	r3, [r3, #28]
 800de9e:	0a1b      	lsrs	r3, r3, #8
 800dea0:	f003 0307 	and.w	r3, r3, #7
 800dea4:	4904      	ldr	r1, [pc, #16]	; (800deb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dea6:	5ccb      	ldrb	r3, [r1, r3]
 800dea8:	f003 031f 	and.w	r3, r3, #31
 800deac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	58024400 	.word	0x58024400
 800deb8:	0801a1d4 	.word	0x0801a1d4

0800debc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	223f      	movs	r2, #63	; 0x3f
 800deca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800decc:	4b1a      	ldr	r3, [pc, #104]	; (800df38 <HAL_RCC_GetClockConfig+0x7c>)
 800dece:	691b      	ldr	r3, [r3, #16]
 800ded0:	f003 0207 	and.w	r2, r3, #7
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ded8:	4b17      	ldr	r3, [pc, #92]	; (800df38 <HAL_RCC_GetClockConfig+0x7c>)
 800deda:	699b      	ldr	r3, [r3, #24]
 800dedc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800dee4:	4b14      	ldr	r3, [pc, #80]	; (800df38 <HAL_RCC_GetClockConfig+0x7c>)
 800dee6:	699b      	ldr	r3, [r3, #24]
 800dee8:	f003 020f 	and.w	r2, r3, #15
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800def0:	4b11      	ldr	r3, [pc, #68]	; (800df38 <HAL_RCC_GetClockConfig+0x7c>)
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800defc:	4b0e      	ldr	r3, [pc, #56]	; (800df38 <HAL_RCC_GetClockConfig+0x7c>)
 800defe:	69db      	ldr	r3, [r3, #28]
 800df00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800df08:	4b0b      	ldr	r3, [pc, #44]	; (800df38 <HAL_RCC_GetClockConfig+0x7c>)
 800df0a:	69db      	ldr	r3, [r3, #28]
 800df0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800df14:	4b08      	ldr	r3, [pc, #32]	; (800df38 <HAL_RCC_GetClockConfig+0x7c>)
 800df16:	6a1b      	ldr	r3, [r3, #32]
 800df18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800df20:	4b06      	ldr	r3, [pc, #24]	; (800df3c <HAL_RCC_GetClockConfig+0x80>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f003 020f 	and.w	r2, r3, #15
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	601a      	str	r2, [r3, #0]
}
 800df2c:	bf00      	nop
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr
 800df38:	58024400 	.word	0x58024400
 800df3c:	52002000 	.word	0x52002000

0800df40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800df40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df44:	b0ca      	sub	sp, #296	; 0x128
 800df46:	af00      	add	r7, sp, #0
 800df48:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800df4c:	2300      	movs	r3, #0
 800df4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800df52:	2300      	movs	r3, #0
 800df54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800df58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df60:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800df64:	2500      	movs	r5, #0
 800df66:	ea54 0305 	orrs.w	r3, r4, r5
 800df6a:	d049      	beq.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800df6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800df76:	d02f      	beq.n	800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800df78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800df7c:	d828      	bhi.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800df7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df82:	d01a      	beq.n	800dfba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800df84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df88:	d822      	bhi.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d003      	beq.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800df8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df92:	d007      	beq.n	800dfa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800df94:	e01c      	b.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df96:	4bb8      	ldr	r3, [pc, #736]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800df98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df9a:	4ab7      	ldr	r2, [pc, #732]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800df9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dfa2:	e01a      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dfa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfa8:	3308      	adds	r3, #8
 800dfaa:	2102      	movs	r1, #2
 800dfac:	4618      	mov	r0, r3
 800dfae:	f002 fb61 	bl	8010674 <RCCEx_PLL2_Config>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dfb8:	e00f      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dfba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfbe:	3328      	adds	r3, #40	; 0x28
 800dfc0:	2102      	movs	r1, #2
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f002 fc08 	bl	80107d8 <RCCEx_PLL3_Config>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dfce:	e004      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dfd6:	e000      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800dfd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dfda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10a      	bne.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dfe2:	4ba5      	ldr	r3, [pc, #660]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dfe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfe6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dfea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dff0:	4aa1      	ldr	r2, [pc, #644]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dff2:	430b      	orrs	r3, r1
 800dff4:	6513      	str	r3, [r2, #80]	; 0x50
 800dff6:	e003      	b.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dff8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dffc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e008:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800e00c:	f04f 0900 	mov.w	r9, #0
 800e010:	ea58 0309 	orrs.w	r3, r8, r9
 800e014:	d047      	beq.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e01a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e01c:	2b04      	cmp	r3, #4
 800e01e:	d82a      	bhi.n	800e076 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e020:	a201      	add	r2, pc, #4	; (adr r2, 800e028 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e026:	bf00      	nop
 800e028:	0800e03d 	.word	0x0800e03d
 800e02c:	0800e04b 	.word	0x0800e04b
 800e030:	0800e061 	.word	0x0800e061
 800e034:	0800e07f 	.word	0x0800e07f
 800e038:	0800e07f 	.word	0x0800e07f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e03c:	4b8e      	ldr	r3, [pc, #568]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e040:	4a8d      	ldr	r2, [pc, #564]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e048:	e01a      	b.n	800e080 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e04e:	3308      	adds	r3, #8
 800e050:	2100      	movs	r1, #0
 800e052:	4618      	mov	r0, r3
 800e054:	f002 fb0e 	bl	8010674 <RCCEx_PLL2_Config>
 800e058:	4603      	mov	r3, r0
 800e05a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e05e:	e00f      	b.n	800e080 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e064:	3328      	adds	r3, #40	; 0x28
 800e066:	2100      	movs	r1, #0
 800e068:	4618      	mov	r0, r3
 800e06a:	f002 fbb5 	bl	80107d8 <RCCEx_PLL3_Config>
 800e06e:	4603      	mov	r3, r0
 800e070:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e074:	e004      	b.n	800e080 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e07c:	e000      	b.n	800e080 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e07e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10a      	bne.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e088:	4b7b      	ldr	r3, [pc, #492]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e08a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e08c:	f023 0107 	bic.w	r1, r3, #7
 800e090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e096:	4a78      	ldr	r2, [pc, #480]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e098:	430b      	orrs	r3, r1
 800e09a:	6513      	str	r3, [r2, #80]	; 0x50
 800e09c:	e003      	b.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e09e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e0a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800e0b2:	f04f 0b00 	mov.w	fp, #0
 800e0b6:	ea5a 030b 	orrs.w	r3, sl, fp
 800e0ba:	d04c      	beq.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0c6:	d030      	beq.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e0c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0cc:	d829      	bhi.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e0ce:	2bc0      	cmp	r3, #192	; 0xc0
 800e0d0:	d02d      	beq.n	800e12e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e0d2:	2bc0      	cmp	r3, #192	; 0xc0
 800e0d4:	d825      	bhi.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e0d6:	2b80      	cmp	r3, #128	; 0x80
 800e0d8:	d018      	beq.n	800e10c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e0da:	2b80      	cmp	r3, #128	; 0x80
 800e0dc:	d821      	bhi.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d002      	beq.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e0e2:	2b40      	cmp	r3, #64	; 0x40
 800e0e4:	d007      	beq.n	800e0f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e0e6:	e01c      	b.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0e8:	4b63      	ldr	r3, [pc, #396]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ec:	4a62      	ldr	r2, [pc, #392]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e0ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e0f4:	e01c      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0fa:	3308      	adds	r3, #8
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	4618      	mov	r0, r3
 800e100:	f002 fab8 	bl	8010674 <RCCEx_PLL2_Config>
 800e104:	4603      	mov	r3, r0
 800e106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e10a:	e011      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e110:	3328      	adds	r3, #40	; 0x28
 800e112:	2100      	movs	r1, #0
 800e114:	4618      	mov	r0, r3
 800e116:	f002 fb5f 	bl	80107d8 <RCCEx_PLL3_Config>
 800e11a:	4603      	mov	r3, r0
 800e11c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e120:	e006      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e122:	2301      	movs	r3, #1
 800e124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e128:	e002      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e12a:	bf00      	nop
 800e12c:	e000      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e12e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10a      	bne.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e138:	4b4f      	ldr	r3, [pc, #316]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e13a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e13c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800e140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e146:	4a4c      	ldr	r2, [pc, #304]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e148:	430b      	orrs	r3, r1
 800e14a:	6513      	str	r3, [r2, #80]	; 0x50
 800e14c:	e003      	b.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e14e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800e162:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e166:	2300      	movs	r3, #0
 800e168:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e16c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800e170:	460b      	mov	r3, r1
 800e172:	4313      	orrs	r3, r2
 800e174:	d053      	beq.n	800e21e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e17a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e17e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e182:	d035      	beq.n	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800e184:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e188:	d82e      	bhi.n	800e1e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e18a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e18e:	d031      	beq.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800e190:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e194:	d828      	bhi.n	800e1e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e19a:	d01a      	beq.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e19c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1a0:	d822      	bhi.n	800e1e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d003      	beq.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800e1a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e1aa:	d007      	beq.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800e1ac:	e01c      	b.n	800e1e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1ae:	4b32      	ldr	r3, [pc, #200]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b2:	4a31      	ldr	r2, [pc, #196]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e1ba:	e01c      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1c0:	3308      	adds	r3, #8
 800e1c2:	2100      	movs	r1, #0
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f002 fa55 	bl	8010674 <RCCEx_PLL2_Config>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e1d0:	e011      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1d6:	3328      	adds	r3, #40	; 0x28
 800e1d8:	2100      	movs	r1, #0
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f002 fafc 	bl	80107d8 <RCCEx_PLL3_Config>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e1e6:	e006      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e1ee:	e002      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e1f0:	bf00      	nop
 800e1f2:	e000      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10b      	bne.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e1fe:	4b1e      	ldr	r3, [pc, #120]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e202:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800e206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e20a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e20e:	4a1a      	ldr	r2, [pc, #104]	; (800e278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e210:	430b      	orrs	r3, r1
 800e212:	6593      	str	r3, [r2, #88]	; 0x58
 800e214:	e003      	b.n	800e21e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e21a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e226:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800e22a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e22e:	2300      	movs	r3, #0
 800e230:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e234:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800e238:	460b      	mov	r3, r1
 800e23a:	4313      	orrs	r3, r2
 800e23c:	d056      	beq.n	800e2ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e242:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e24a:	d038      	beq.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e24c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e250:	d831      	bhi.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e252:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e256:	d034      	beq.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e258:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e25c:	d82b      	bhi.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e25e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e262:	d01d      	beq.n	800e2a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e264:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e268:	d825      	bhi.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d006      	beq.n	800e27c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e26e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e272:	d00a      	beq.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e274:	e01f      	b.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e276:	bf00      	nop
 800e278:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e27c:	4ba2      	ldr	r3, [pc, #648]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	4aa1      	ldr	r2, [pc, #644]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e286:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e288:	e01c      	b.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e28e:	3308      	adds	r3, #8
 800e290:	2100      	movs	r1, #0
 800e292:	4618      	mov	r0, r3
 800e294:	f002 f9ee 	bl	8010674 <RCCEx_PLL2_Config>
 800e298:	4603      	mov	r3, r0
 800e29a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e29e:	e011      	b.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e2a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2a4:	3328      	adds	r3, #40	; 0x28
 800e2a6:	2100      	movs	r1, #0
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f002 fa95 	bl	80107d8 <RCCEx_PLL3_Config>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e2b4:	e006      	b.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e2bc:	e002      	b.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e2be:	bf00      	nop
 800e2c0:	e000      	b.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e2c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d10b      	bne.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e2cc:	4b8e      	ldr	r3, [pc, #568]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e2ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800e2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e2dc:	4a8a      	ldr	r2, [pc, #552]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e2de:	430b      	orrs	r3, r1
 800e2e0:	6593      	str	r3, [r2, #88]	; 0x58
 800e2e2:	e003      	b.n	800e2ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800e2f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e302:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800e306:	460b      	mov	r3, r1
 800e308:	4313      	orrs	r3, r2
 800e30a:	d03a      	beq.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800e30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e312:	2b30      	cmp	r3, #48	; 0x30
 800e314:	d01f      	beq.n	800e356 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e316:	2b30      	cmp	r3, #48	; 0x30
 800e318:	d819      	bhi.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e31a:	2b20      	cmp	r3, #32
 800e31c:	d00c      	beq.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e31e:	2b20      	cmp	r3, #32
 800e320:	d815      	bhi.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e322:	2b00      	cmp	r3, #0
 800e324:	d019      	beq.n	800e35a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800e326:	2b10      	cmp	r3, #16
 800e328:	d111      	bne.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e32a:	4b77      	ldr	r3, [pc, #476]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e32e:	4a76      	ldr	r2, [pc, #472]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e334:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e336:	e011      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e33c:	3308      	adds	r3, #8
 800e33e:	2102      	movs	r1, #2
 800e340:	4618      	mov	r0, r3
 800e342:	f002 f997 	bl	8010674 <RCCEx_PLL2_Config>
 800e346:	4603      	mov	r3, r0
 800e348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e34c:	e006      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e34e:	2301      	movs	r3, #1
 800e350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e354:	e002      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e356:	bf00      	nop
 800e358:	e000      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e35a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e35c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10a      	bne.n	800e37a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e364:	4b68      	ldr	r3, [pc, #416]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e368:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800e36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e372:	4a65      	ldr	r2, [pc, #404]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e374:	430b      	orrs	r3, r1
 800e376:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e378:	e003      	b.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e37a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e37e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800e38e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e392:	2300      	movs	r3, #0
 800e394:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e398:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800e39c:	460b      	mov	r3, r1
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	d051      	beq.n	800e446 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3ac:	d035      	beq.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800e3ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3b2:	d82e      	bhi.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e3b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e3b8:	d031      	beq.n	800e41e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e3ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e3be:	d828      	bhi.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e3c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3c4:	d01a      	beq.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e3c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3ca:	d822      	bhi.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d003      	beq.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800e3d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3d4:	d007      	beq.n	800e3e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800e3d6:	e01c      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3d8:	4b4b      	ldr	r3, [pc, #300]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3dc:	4a4a      	ldr	r2, [pc, #296]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e3de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e3e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e3e4:	e01c      	b.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3ea:	3308      	adds	r3, #8
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f002 f940 	bl	8010674 <RCCEx_PLL2_Config>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e3fa:	e011      	b.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e3fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e400:	3328      	adds	r3, #40	; 0x28
 800e402:	2100      	movs	r1, #0
 800e404:	4618      	mov	r0, r3
 800e406:	f002 f9e7 	bl	80107d8 <RCCEx_PLL3_Config>
 800e40a:	4603      	mov	r3, r0
 800e40c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e410:	e006      	b.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e412:	2301      	movs	r3, #1
 800e414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e418:	e002      	b.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e41a:	bf00      	nop
 800e41c:	e000      	b.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e41e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10a      	bne.n	800e43e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e428:	4b37      	ldr	r3, [pc, #220]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e42c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800e430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e436:	4a34      	ldr	r2, [pc, #208]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e438:	430b      	orrs	r3, r1
 800e43a:	6513      	str	r3, [r2, #80]	; 0x50
 800e43c:	e003      	b.n	800e446 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e43e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e442:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800e452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e456:	2300      	movs	r3, #0
 800e458:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e45c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800e460:	460b      	mov	r3, r1
 800e462:	4313      	orrs	r3, r2
 800e464:	d056      	beq.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e46a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e46c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e470:	d033      	beq.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e476:	d82c      	bhi.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e478:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e47c:	d02f      	beq.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e47e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e482:	d826      	bhi.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e484:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e488:	d02b      	beq.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e48a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e48e:	d820      	bhi.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e494:	d012      	beq.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e49a:	d81a      	bhi.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d022      	beq.n	800e4e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e4a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4a4:	d115      	bne.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4aa:	3308      	adds	r3, #8
 800e4ac:	2101      	movs	r1, #1
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f002 f8e0 	bl	8010674 <RCCEx_PLL2_Config>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e4ba:	e015      	b.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4c0:	3328      	adds	r3, #40	; 0x28
 800e4c2:	2101      	movs	r1, #1
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f002 f987 	bl	80107d8 <RCCEx_PLL3_Config>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e4d0:	e00a      	b.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e4d8:	e006      	b.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e4da:	bf00      	nop
 800e4dc:	e004      	b.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e4de:	bf00      	nop
 800e4e0:	e002      	b.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e4e2:	bf00      	nop
 800e4e4:	e000      	b.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e4e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d10d      	bne.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e4f0:	4b05      	ldr	r3, [pc, #20]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4fe:	4a02      	ldr	r2, [pc, #8]	; (800e508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e500:	430b      	orrs	r3, r1
 800e502:	6513      	str	r3, [r2, #80]	; 0x50
 800e504:	e006      	b.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e506:	bf00      	nop
 800e508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e50c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e510:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800e520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e524:	2300      	movs	r3, #0
 800e526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e52a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800e52e:	460b      	mov	r3, r1
 800e530:	4313      	orrs	r3, r2
 800e532:	d055      	beq.n	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e538:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e53c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e540:	d033      	beq.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e546:	d82c      	bhi.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e54c:	d02f      	beq.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e54e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e552:	d826      	bhi.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e554:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e558:	d02b      	beq.n	800e5b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e55a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e55e:	d820      	bhi.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e564:	d012      	beq.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e56a:	d81a      	bhi.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d022      	beq.n	800e5b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e574:	d115      	bne.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e57a:	3308      	adds	r3, #8
 800e57c:	2101      	movs	r1, #1
 800e57e:	4618      	mov	r0, r3
 800e580:	f002 f878 	bl	8010674 <RCCEx_PLL2_Config>
 800e584:	4603      	mov	r3, r0
 800e586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e58a:	e015      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e590:	3328      	adds	r3, #40	; 0x28
 800e592:	2101      	movs	r1, #1
 800e594:	4618      	mov	r0, r3
 800e596:	f002 f91f 	bl	80107d8 <RCCEx_PLL3_Config>
 800e59a:	4603      	mov	r3, r0
 800e59c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e5a0:	e00a      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e5a8:	e006      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e5aa:	bf00      	nop
 800e5ac:	e004      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e5ae:	bf00      	nop
 800e5b0:	e002      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e5b2:	bf00      	nop
 800e5b4:	e000      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e5b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d10b      	bne.n	800e5d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e5c0:	4ba3      	ldr	r3, [pc, #652]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e5c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5c4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e5d0:	4a9f      	ldr	r2, [pc, #636]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e5d2:	430b      	orrs	r3, r1
 800e5d4:	6593      	str	r3, [r2, #88]	; 0x58
 800e5d6:	e003      	b.n	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e5dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800e5ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e5f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	d037      	beq.n	800e670 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e60a:	d00e      	beq.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e60c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e610:	d816      	bhi.n	800e640 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e612:	2b00      	cmp	r3, #0
 800e614:	d018      	beq.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e61a:	d111      	bne.n	800e640 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e61c:	4b8c      	ldr	r3, [pc, #560]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e620:	4a8b      	ldr	r2, [pc, #556]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e628:	e00f      	b.n	800e64a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e62e:	3308      	adds	r3, #8
 800e630:	2101      	movs	r1, #1
 800e632:	4618      	mov	r0, r3
 800e634:	f002 f81e 	bl	8010674 <RCCEx_PLL2_Config>
 800e638:	4603      	mov	r3, r0
 800e63a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e63e:	e004      	b.n	800e64a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e640:	2301      	movs	r3, #1
 800e642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e646:	e000      	b.n	800e64a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e64a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d10a      	bne.n	800e668 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e652:	4b7f      	ldr	r3, [pc, #508]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e656:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e660:	4a7b      	ldr	r2, [pc, #492]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e662:	430b      	orrs	r3, r1
 800e664:	6513      	str	r3, [r2, #80]	; 0x50
 800e666:	e003      	b.n	800e670 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e66c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e678:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e67c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e680:	2300      	movs	r3, #0
 800e682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e686:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800e68a:	460b      	mov	r3, r1
 800e68c:	4313      	orrs	r3, r2
 800e68e:	d039      	beq.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e696:	2b03      	cmp	r3, #3
 800e698:	d81c      	bhi.n	800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e69a:	a201      	add	r2, pc, #4	; (adr r2, 800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a0:	0800e6dd 	.word	0x0800e6dd
 800e6a4:	0800e6b1 	.word	0x0800e6b1
 800e6a8:	0800e6bf 	.word	0x0800e6bf
 800e6ac:	0800e6dd 	.word	0x0800e6dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6b0:	4b67      	ldr	r3, [pc, #412]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b4:	4a66      	ldr	r2, [pc, #408]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e6b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e6ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e6bc:	e00f      	b.n	800e6de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6c2:	3308      	adds	r3, #8
 800e6c4:	2102      	movs	r1, #2
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f001 ffd4 	bl	8010674 <RCCEx_PLL2_Config>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e6d2:	e004      	b.n	800e6de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e6da:	e000      	b.n	800e6de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e6dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d10a      	bne.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e6e6:	4b5a      	ldr	r3, [pc, #360]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6ea:	f023 0103 	bic.w	r1, r3, #3
 800e6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6f4:	4a56      	ldr	r2, [pc, #344]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e6f6:	430b      	orrs	r3, r1
 800e6f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e6fa:	e003      	b.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800e710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e714:	2300      	movs	r3, #0
 800e716:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e71a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e71e:	460b      	mov	r3, r1
 800e720:	4313      	orrs	r3, r2
 800e722:	f000 809f 	beq.w	800e864 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e726:	4b4b      	ldr	r3, [pc, #300]	; (800e854 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a4a      	ldr	r2, [pc, #296]	; (800e854 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e72c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e730:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e732:	f7f6 fb41 	bl	8004db8 <HAL_GetTick>
 800e736:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e73a:	e00b      	b.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e73c:	f7f6 fb3c 	bl	8004db8 <HAL_GetTick>
 800e740:	4602      	mov	r2, r0
 800e742:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	2b64      	cmp	r3, #100	; 0x64
 800e74a:	d903      	bls.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e74c:	2303      	movs	r3, #3
 800e74e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e752:	e005      	b.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e754:	4b3f      	ldr	r3, [pc, #252]	; (800e854 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d0ed      	beq.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e764:	2b00      	cmp	r3, #0
 800e766:	d179      	bne.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e768:	4b39      	ldr	r3, [pc, #228]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e76a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e770:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e774:	4053      	eors	r3, r2
 800e776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d015      	beq.n	800e7aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e77e:	4b34      	ldr	r3, [pc, #208]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e786:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e78a:	4b31      	ldr	r3, [pc, #196]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e78e:	4a30      	ldr	r2, [pc, #192]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e794:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e796:	4b2e      	ldr	r3, [pc, #184]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e79a:	4a2d      	ldr	r2, [pc, #180]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e79c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e7a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e7a2:	4a2b      	ldr	r2, [pc, #172]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e7a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e7b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7b6:	d118      	bne.n	800e7ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7b8:	f7f6 fafe 	bl	8004db8 <HAL_GetTick>
 800e7bc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e7c0:	e00d      	b.n	800e7de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e7c2:	f7f6 faf9 	bl	8004db8 <HAL_GetTick>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e7cc:	1ad2      	subs	r2, r2, r3
 800e7ce:	f241 3388 	movw	r3, #5000	; 0x1388
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d903      	bls.n	800e7de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e7d6:	2303      	movs	r3, #3
 800e7d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800e7dc:	e005      	b.n	800e7ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e7de:	4b1c      	ldr	r3, [pc, #112]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7e2:	f003 0302 	and.w	r3, r3, #2
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d0eb      	beq.n	800e7c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d129      	bne.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e7fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e802:	d10e      	bne.n	800e822 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e804:	4b12      	ldr	r3, [pc, #72]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e806:	691b      	ldr	r3, [r3, #16]
 800e808:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800e80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e810:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e814:	091a      	lsrs	r2, r3, #4
 800e816:	4b10      	ldr	r3, [pc, #64]	; (800e858 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e818:	4013      	ands	r3, r2
 800e81a:	4a0d      	ldr	r2, [pc, #52]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e81c:	430b      	orrs	r3, r1
 800e81e:	6113      	str	r3, [r2, #16]
 800e820:	e005      	b.n	800e82e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e822:	4b0b      	ldr	r3, [pc, #44]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	4a0a      	ldr	r2, [pc, #40]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e828:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e82c:	6113      	str	r3, [r2, #16]
 800e82e:	4b08      	ldr	r3, [pc, #32]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e830:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e836:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e83a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e83e:	4a04      	ldr	r2, [pc, #16]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e840:	430b      	orrs	r3, r1
 800e842:	6713      	str	r3, [r2, #112]	; 0x70
 800e844:	e00e      	b.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e84a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800e84e:	e009      	b.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e850:	58024400 	.word	0x58024400
 800e854:	58024800 	.word	0x58024800
 800e858:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e85c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e860:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86c:	f002 0301 	and.w	r3, r2, #1
 800e870:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e874:	2300      	movs	r3, #0
 800e876:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e87a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e87e:	460b      	mov	r3, r1
 800e880:	4313      	orrs	r3, r2
 800e882:	f000 8089 	beq.w	800e998 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e88a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e88c:	2b28      	cmp	r3, #40	; 0x28
 800e88e:	d86b      	bhi.n	800e968 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e890:	a201      	add	r2, pc, #4	; (adr r2, 800e898 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e896:	bf00      	nop
 800e898:	0800e971 	.word	0x0800e971
 800e89c:	0800e969 	.word	0x0800e969
 800e8a0:	0800e969 	.word	0x0800e969
 800e8a4:	0800e969 	.word	0x0800e969
 800e8a8:	0800e969 	.word	0x0800e969
 800e8ac:	0800e969 	.word	0x0800e969
 800e8b0:	0800e969 	.word	0x0800e969
 800e8b4:	0800e969 	.word	0x0800e969
 800e8b8:	0800e93d 	.word	0x0800e93d
 800e8bc:	0800e969 	.word	0x0800e969
 800e8c0:	0800e969 	.word	0x0800e969
 800e8c4:	0800e969 	.word	0x0800e969
 800e8c8:	0800e969 	.word	0x0800e969
 800e8cc:	0800e969 	.word	0x0800e969
 800e8d0:	0800e969 	.word	0x0800e969
 800e8d4:	0800e969 	.word	0x0800e969
 800e8d8:	0800e953 	.word	0x0800e953
 800e8dc:	0800e969 	.word	0x0800e969
 800e8e0:	0800e969 	.word	0x0800e969
 800e8e4:	0800e969 	.word	0x0800e969
 800e8e8:	0800e969 	.word	0x0800e969
 800e8ec:	0800e969 	.word	0x0800e969
 800e8f0:	0800e969 	.word	0x0800e969
 800e8f4:	0800e969 	.word	0x0800e969
 800e8f8:	0800e971 	.word	0x0800e971
 800e8fc:	0800e969 	.word	0x0800e969
 800e900:	0800e969 	.word	0x0800e969
 800e904:	0800e969 	.word	0x0800e969
 800e908:	0800e969 	.word	0x0800e969
 800e90c:	0800e969 	.word	0x0800e969
 800e910:	0800e969 	.word	0x0800e969
 800e914:	0800e969 	.word	0x0800e969
 800e918:	0800e971 	.word	0x0800e971
 800e91c:	0800e969 	.word	0x0800e969
 800e920:	0800e969 	.word	0x0800e969
 800e924:	0800e969 	.word	0x0800e969
 800e928:	0800e969 	.word	0x0800e969
 800e92c:	0800e969 	.word	0x0800e969
 800e930:	0800e969 	.word	0x0800e969
 800e934:	0800e969 	.word	0x0800e969
 800e938:	0800e971 	.word	0x0800e971
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e940:	3308      	adds	r3, #8
 800e942:	2101      	movs	r1, #1
 800e944:	4618      	mov	r0, r3
 800e946:	f001 fe95 	bl	8010674 <RCCEx_PLL2_Config>
 800e94a:	4603      	mov	r3, r0
 800e94c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e950:	e00f      	b.n	800e972 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e956:	3328      	adds	r3, #40	; 0x28
 800e958:	2101      	movs	r1, #1
 800e95a:	4618      	mov	r0, r3
 800e95c:	f001 ff3c 	bl	80107d8 <RCCEx_PLL3_Config>
 800e960:	4603      	mov	r3, r0
 800e962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e966:	e004      	b.n	800e972 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e968:	2301      	movs	r3, #1
 800e96a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e96e:	e000      	b.n	800e972 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e970:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e976:	2b00      	cmp	r3, #0
 800e978:	d10a      	bne.n	800e990 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e97a:	4bbf      	ldr	r3, [pc, #764]	; (800ec78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e97e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800e982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e988:	4abb      	ldr	r2, [pc, #748]	; (800ec78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e98a:	430b      	orrs	r3, r1
 800e98c:	6553      	str	r3, [r2, #84]	; 0x54
 800e98e:	e003      	b.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e994:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a0:	f002 0302 	and.w	r3, r2, #2
 800e9a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e9ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	d041      	beq.n	800ea3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9be:	2b05      	cmp	r3, #5
 800e9c0:	d824      	bhi.n	800ea0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e9c2:	a201      	add	r2, pc, #4	; (adr r2, 800e9c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c8:	0800ea15 	.word	0x0800ea15
 800e9cc:	0800e9e1 	.word	0x0800e9e1
 800e9d0:	0800e9f7 	.word	0x0800e9f7
 800e9d4:	0800ea15 	.word	0x0800ea15
 800e9d8:	0800ea15 	.word	0x0800ea15
 800e9dc:	0800ea15 	.word	0x0800ea15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9e4:	3308      	adds	r3, #8
 800e9e6:	2101      	movs	r1, #1
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f001 fe43 	bl	8010674 <RCCEx_PLL2_Config>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e9f4:	e00f      	b.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9fa:	3328      	adds	r3, #40	; 0x28
 800e9fc:	2101      	movs	r1, #1
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f001 feea 	bl	80107d8 <RCCEx_PLL3_Config>
 800ea04:	4603      	mov	r3, r0
 800ea06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ea0a:	e004      	b.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ea12:	e000      	b.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ea14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10a      	bne.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ea1e:	4b96      	ldr	r3, [pc, #600]	; (800ec78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ea20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea22:	f023 0107 	bic.w	r1, r3, #7
 800ea26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea2c:	4a92      	ldr	r2, [pc, #584]	; (800ec78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ea2e:	430b      	orrs	r3, r1
 800ea30:	6553      	str	r3, [r2, #84]	; 0x54
 800ea32:	e003      	b.n	800ea3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ea3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea44:	f002 0304 	and.w	r3, r2, #4
 800ea48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ea52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ea56:	460b      	mov	r3, r1
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	d044      	beq.n	800eae6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ea5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea64:	2b05      	cmp	r3, #5
 800ea66:	d825      	bhi.n	800eab4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ea68:	a201      	add	r2, pc, #4	; (adr r2, 800ea70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ea6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6e:	bf00      	nop
 800ea70:	0800eabd 	.word	0x0800eabd
 800ea74:	0800ea89 	.word	0x0800ea89
 800ea78:	0800ea9f 	.word	0x0800ea9f
 800ea7c:	0800eabd 	.word	0x0800eabd
 800ea80:	0800eabd 	.word	0x0800eabd
 800ea84:	0800eabd 	.word	0x0800eabd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea8c:	3308      	adds	r3, #8
 800ea8e:	2101      	movs	r1, #1
 800ea90:	4618      	mov	r0, r3
 800ea92:	f001 fdef 	bl	8010674 <RCCEx_PLL2_Config>
 800ea96:	4603      	mov	r3, r0
 800ea98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ea9c:	e00f      	b.n	800eabe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaa2:	3328      	adds	r3, #40	; 0x28
 800eaa4:	2101      	movs	r1, #1
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f001 fe96 	bl	80107d8 <RCCEx_PLL3_Config>
 800eaac:	4603      	mov	r3, r0
 800eaae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800eab2:	e004      	b.n	800eabe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eab4:	2301      	movs	r3, #1
 800eab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eaba:	e000      	b.n	800eabe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800eabc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eabe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d10b      	bne.n	800eade <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800eac6:	4b6c      	ldr	r3, [pc, #432]	; (800ec78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eaca:	f023 0107 	bic.w	r1, r3, #7
 800eace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ead2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ead6:	4a68      	ldr	r2, [pc, #416]	; (800ec78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ead8:	430b      	orrs	r3, r1
 800eada:	6593      	str	r3, [r2, #88]	; 0x58
 800eadc:	e003      	b.n	800eae6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800eae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaee:	f002 0320 	and.w	r3, r2, #32
 800eaf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eafc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800eb00:	460b      	mov	r3, r1
 800eb02:	4313      	orrs	r3, r2
 800eb04:	d055      	beq.n	800ebb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800eb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb12:	d033      	beq.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800eb14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb18:	d82c      	bhi.n	800eb74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eb1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb1e:	d02f      	beq.n	800eb80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800eb20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb24:	d826      	bhi.n	800eb74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eb26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800eb2a:	d02b      	beq.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800eb2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800eb30:	d820      	bhi.n	800eb74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eb32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb36:	d012      	beq.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800eb38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb3c:	d81a      	bhi.n	800eb74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d022      	beq.n	800eb88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800eb42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb46:	d115      	bne.n	800eb74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb4c:	3308      	adds	r3, #8
 800eb4e:	2100      	movs	r1, #0
 800eb50:	4618      	mov	r0, r3
 800eb52:	f001 fd8f 	bl	8010674 <RCCEx_PLL2_Config>
 800eb56:	4603      	mov	r3, r0
 800eb58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800eb5c:	e015      	b.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb62:	3328      	adds	r3, #40	; 0x28
 800eb64:	2102      	movs	r1, #2
 800eb66:	4618      	mov	r0, r3
 800eb68:	f001 fe36 	bl	80107d8 <RCCEx_PLL3_Config>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800eb72:	e00a      	b.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb74:	2301      	movs	r3, #1
 800eb76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb7a:	e006      	b.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb7c:	bf00      	nop
 800eb7e:	e004      	b.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb80:	bf00      	nop
 800eb82:	e002      	b.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb84:	bf00      	nop
 800eb86:	e000      	b.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d10b      	bne.n	800ebaa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800eb92:	4b39      	ldr	r3, [pc, #228]	; (800ec78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eb94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb96:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800eb9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eba2:	4a35      	ldr	r2, [pc, #212]	; (800ec78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eba4:	430b      	orrs	r3, r1
 800eba6:	6553      	str	r3, [r2, #84]	; 0x54
 800eba8:	e003      	b.n	800ebb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ebb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ebbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ebc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800ebcc:	460b      	mov	r3, r1
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	d058      	beq.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ebd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ebda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ebde:	d033      	beq.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ebe0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ebe4:	d82c      	bhi.n	800ec40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ebe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebea:	d02f      	beq.n	800ec4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ebec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebf0:	d826      	bhi.n	800ec40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ebf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ebf6:	d02b      	beq.n	800ec50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ebf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ebfc:	d820      	bhi.n	800ec40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ebfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec02:	d012      	beq.n	800ec2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ec04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec08:	d81a      	bhi.n	800ec40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d022      	beq.n	800ec54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ec0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec12:	d115      	bne.n	800ec40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec18:	3308      	adds	r3, #8
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f001 fd29 	bl	8010674 <RCCEx_PLL2_Config>
 800ec22:	4603      	mov	r3, r0
 800ec24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ec28:	e015      	b.n	800ec56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec2e:	3328      	adds	r3, #40	; 0x28
 800ec30:	2102      	movs	r1, #2
 800ec32:	4618      	mov	r0, r3
 800ec34:	f001 fdd0 	bl	80107d8 <RCCEx_PLL3_Config>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ec3e:	e00a      	b.n	800ec56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec40:	2301      	movs	r3, #1
 800ec42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec46:	e006      	b.n	800ec56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ec48:	bf00      	nop
 800ec4a:	e004      	b.n	800ec56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ec4c:	bf00      	nop
 800ec4e:	e002      	b.n	800ec56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ec50:	bf00      	nop
 800ec52:	e000      	b.n	800ec56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ec54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d10e      	bne.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ec5e:	4b06      	ldr	r3, [pc, #24]	; (800ec78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec62:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ec66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ec6e:	4a02      	ldr	r2, [pc, #8]	; (800ec78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec70:	430b      	orrs	r3, r1
 800ec72:	6593      	str	r3, [r2, #88]	; 0x58
 800ec74:	e006      	b.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ec76:	bf00      	nop
 800ec78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ec84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ec90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ec94:	2300      	movs	r3, #0
 800ec96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ec9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ec9e:	460b      	mov	r3, r1
 800eca0:	4313      	orrs	r3, r2
 800eca2:	d055      	beq.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800eca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ecac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ecb0:	d033      	beq.n	800ed1a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ecb2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ecb6:	d82c      	bhi.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ecb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecbc:	d02f      	beq.n	800ed1e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ecbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecc2:	d826      	bhi.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ecc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ecc8:	d02b      	beq.n	800ed22 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800ecca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ecce:	d820      	bhi.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ecd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecd4:	d012      	beq.n	800ecfc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ecd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecda:	d81a      	bhi.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d022      	beq.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ece0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ece4:	d115      	bne.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ece6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecea:	3308      	adds	r3, #8
 800ecec:	2100      	movs	r1, #0
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f001 fcc0 	bl	8010674 <RCCEx_PLL2_Config>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ecfa:	e015      	b.n	800ed28 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ecfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed00:	3328      	adds	r3, #40	; 0x28
 800ed02:	2102      	movs	r1, #2
 800ed04:	4618      	mov	r0, r3
 800ed06:	f001 fd67 	bl	80107d8 <RCCEx_PLL3_Config>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ed10:	e00a      	b.n	800ed28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed12:	2301      	movs	r3, #1
 800ed14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ed18:	e006      	b.n	800ed28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ed1a:	bf00      	nop
 800ed1c:	e004      	b.n	800ed28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ed1e:	bf00      	nop
 800ed20:	e002      	b.n	800ed28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ed22:	bf00      	nop
 800ed24:	e000      	b.n	800ed28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ed26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d10b      	bne.n	800ed48 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ed30:	4ba1      	ldr	r3, [pc, #644]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ed32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed34:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ed38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ed40:	4a9d      	ldr	r2, [pc, #628]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ed42:	430b      	orrs	r3, r1
 800ed44:	6593      	str	r3, [r2, #88]	; 0x58
 800ed46:	e003      	b.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ed50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed58:	f002 0308 	and.w	r3, r2, #8
 800ed5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ed60:	2300      	movs	r3, #0
 800ed62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ed66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	d01e      	beq.n	800edae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ed70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed7c:	d10c      	bne.n	800ed98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ed7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed82:	3328      	adds	r3, #40	; 0x28
 800ed84:	2102      	movs	r1, #2
 800ed86:	4618      	mov	r0, r3
 800ed88:	f001 fd26 	bl	80107d8 <RCCEx_PLL3_Config>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d002      	beq.n	800ed98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ed92:	2301      	movs	r3, #1
 800ed94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ed98:	4b87      	ldr	r3, [pc, #540]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ed9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eda4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eda8:	4a83      	ldr	r2, [pc, #524]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800edaa:	430b      	orrs	r3, r1
 800edac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800edae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb6:	f002 0310 	and.w	r3, r2, #16
 800edba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800edbe:	2300      	movs	r3, #0
 800edc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800edc4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800edc8:	460b      	mov	r3, r1
 800edca:	4313      	orrs	r3, r2
 800edcc:	d01e      	beq.n	800ee0c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800edce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800edd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edda:	d10c      	bne.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800eddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ede0:	3328      	adds	r3, #40	; 0x28
 800ede2:	2102      	movs	r1, #2
 800ede4:	4618      	mov	r0, r3
 800ede6:	f001 fcf7 	bl	80107d8 <RCCEx_PLL3_Config>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d002      	beq.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800edf0:	2301      	movs	r3, #1
 800edf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800edf6:	4b70      	ldr	r3, [pc, #448]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800edf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800edfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ee06:	4a6c      	ldr	r2, [pc, #432]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ee08:	430b      	orrs	r3, r1
 800ee0a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ee0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee14:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ee18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ee22:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ee26:	460b      	mov	r3, r1
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	d03e      	beq.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ee2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ee34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee38:	d022      	beq.n	800ee80 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ee3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee3e:	d81b      	bhi.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d003      	beq.n	800ee4c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ee44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee48:	d00b      	beq.n	800ee62 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ee4a:	e015      	b.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee50:	3308      	adds	r3, #8
 800ee52:	2100      	movs	r1, #0
 800ee54:	4618      	mov	r0, r3
 800ee56:	f001 fc0d 	bl	8010674 <RCCEx_PLL2_Config>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ee60:	e00f      	b.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ee62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee66:	3328      	adds	r3, #40	; 0x28
 800ee68:	2102      	movs	r1, #2
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f001 fcb4 	bl	80107d8 <RCCEx_PLL3_Config>
 800ee70:	4603      	mov	r3, r0
 800ee72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ee76:	e004      	b.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee78:	2301      	movs	r3, #1
 800ee7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee7e:	e000      	b.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ee80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10b      	bne.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ee8a:	4b4b      	ldr	r3, [pc, #300]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ee8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee8e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ee92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ee9a:	4a47      	ldr	r2, [pc, #284]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ee9c:	430b      	orrs	r3, r1
 800ee9e:	6593      	str	r3, [r2, #88]	; 0x58
 800eea0:	e003      	b.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800eeaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800eeb6:	67bb      	str	r3, [r7, #120]	; 0x78
 800eeb8:	2300      	movs	r3, #0
 800eeba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eebc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800eec0:	460b      	mov	r3, r1
 800eec2:	4313      	orrs	r3, r2
 800eec4:	d03b      	beq.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800eec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eece:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eed2:	d01f      	beq.n	800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800eed4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eed8:	d818      	bhi.n	800ef0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800eeda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eede:	d003      	beq.n	800eee8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800eee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eee4:	d007      	beq.n	800eef6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800eee6:	e011      	b.n	800ef0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eee8:	4b33      	ldr	r3, [pc, #204]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeec:	4a32      	ldr	r2, [pc, #200]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eeee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800eef4:	e00f      	b.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eefa:	3328      	adds	r3, #40	; 0x28
 800eefc:	2101      	movs	r1, #1
 800eefe:	4618      	mov	r0, r3
 800ef00:	f001 fc6a 	bl	80107d8 <RCCEx_PLL3_Config>
 800ef04:	4603      	mov	r3, r0
 800ef06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ef0a:	e004      	b.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef12:	e000      	b.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ef14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d10b      	bne.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ef1e:	4b26      	ldr	r3, [pc, #152]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ef26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef2e:	4a22      	ldr	r2, [pc, #136]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef30:	430b      	orrs	r3, r1
 800ef32:	6553      	str	r3, [r2, #84]	; 0x54
 800ef34:	e003      	b.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ef3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef46:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ef4a:	673b      	str	r3, [r7, #112]	; 0x70
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	677b      	str	r3, [r7, #116]	; 0x74
 800ef50:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ef54:	460b      	mov	r3, r1
 800ef56:	4313      	orrs	r3, r2
 800ef58:	d034      	beq.n	800efc4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ef5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d003      	beq.n	800ef6c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ef64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef68:	d007      	beq.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ef6a:	e011      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef6c:	4b12      	ldr	r3, [pc, #72]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef70:	4a11      	ldr	r2, [pc, #68]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ef78:	e00e      	b.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ef7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef7e:	3308      	adds	r3, #8
 800ef80:	2102      	movs	r1, #2
 800ef82:	4618      	mov	r0, r3
 800ef84:	f001 fb76 	bl	8010674 <RCCEx_PLL2_Config>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ef8e:	e003      	b.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d10d      	bne.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800efa0:	4b05      	ldr	r3, [pc, #20]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800efa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800efa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efae:	4a02      	ldr	r2, [pc, #8]	; (800efb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800efb0:	430b      	orrs	r3, r1
 800efb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800efb4:	e006      	b.n	800efc4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800efb6:	bf00      	nop
 800efb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800efc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efcc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800efd0:	66bb      	str	r3, [r7, #104]	; 0x68
 800efd2:	2300      	movs	r3, #0
 800efd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800efd6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800efda:	460b      	mov	r3, r1
 800efdc:	4313      	orrs	r3, r2
 800efde:	d00c      	beq.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800efe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efe4:	3328      	adds	r3, #40	; 0x28
 800efe6:	2102      	movs	r1, #2
 800efe8:	4618      	mov	r0, r3
 800efea:	f001 fbf5 	bl	80107d8 <RCCEx_PLL3_Config>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d002      	beq.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800eff4:	2301      	movs	r3, #1
 800eff6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800effa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800effe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f002:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800f006:	663b      	str	r3, [r7, #96]	; 0x60
 800f008:	2300      	movs	r3, #0
 800f00a:	667b      	str	r3, [r7, #100]	; 0x64
 800f00c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800f010:	460b      	mov	r3, r1
 800f012:	4313      	orrs	r3, r2
 800f014:	d038      	beq.n	800f088 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f01e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f022:	d018      	beq.n	800f056 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f028:	d811      	bhi.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f02a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f02e:	d014      	beq.n	800f05a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f034:	d80b      	bhi.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f036:	2b00      	cmp	r3, #0
 800f038:	d011      	beq.n	800f05e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f03e:	d106      	bne.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f040:	4bc3      	ldr	r3, [pc, #780]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f044:	4ac2      	ldr	r2, [pc, #776]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f04a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f04c:	e008      	b.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f04e:	2301      	movs	r3, #1
 800f050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f054:	e004      	b.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f056:	bf00      	nop
 800f058:	e002      	b.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f05a:	bf00      	nop
 800f05c:	e000      	b.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f05e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f060:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f064:	2b00      	cmp	r3, #0
 800f066:	d10b      	bne.n	800f080 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f068:	4bb9      	ldr	r3, [pc, #740]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f06a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f06c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f078:	4ab5      	ldr	r2, [pc, #724]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f07a:	430b      	orrs	r3, r1
 800f07c:	6553      	str	r3, [r2, #84]	; 0x54
 800f07e:	e003      	b.n	800f088 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f084:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f090:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800f094:	65bb      	str	r3, [r7, #88]	; 0x58
 800f096:	2300      	movs	r3, #0
 800f098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f09a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800f09e:	460b      	mov	r3, r1
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	d009      	beq.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f0a4:	4baa      	ldr	r3, [pc, #680]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0b2:	4aa7      	ldr	r2, [pc, #668]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0b4:	430b      	orrs	r3, r1
 800f0b6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800f0c4:	653b      	str	r3, [r7, #80]	; 0x50
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	657b      	str	r3, [r7, #84]	; 0x54
 800f0ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	d00a      	beq.n	800f0ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f0d4:	4b9e      	ldr	r3, [pc, #632]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0d6:	691b      	ldr	r3, [r3, #16]
 800f0d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800f0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f0e4:	4a9a      	ldr	r2, [pc, #616]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0e6:	430b      	orrs	r3, r1
 800f0e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800f0f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800f100:	460b      	mov	r3, r1
 800f102:	4313      	orrs	r3, r2
 800f104:	d009      	beq.n	800f11a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f106:	4b92      	ldr	r3, [pc, #584]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f10a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800f10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f114:	4a8e      	ldr	r2, [pc, #568]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f116:	430b      	orrs	r3, r1
 800f118:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f122:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800f126:	643b      	str	r3, [r7, #64]	; 0x40
 800f128:	2300      	movs	r3, #0
 800f12a:	647b      	str	r3, [r7, #68]	; 0x44
 800f12c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800f130:	460b      	mov	r3, r1
 800f132:	4313      	orrs	r3, r2
 800f134:	d00e      	beq.n	800f154 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f136:	4b86      	ldr	r3, [pc, #536]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f138:	691b      	ldr	r3, [r3, #16]
 800f13a:	4a85      	ldr	r2, [pc, #532]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f13c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f140:	6113      	str	r3, [r2, #16]
 800f142:	4b83      	ldr	r3, [pc, #524]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f144:	6919      	ldr	r1, [r3, #16]
 800f146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f14a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f14e:	4a80      	ldr	r2, [pc, #512]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f150:	430b      	orrs	r3, r1
 800f152:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800f160:	63bb      	str	r3, [r7, #56]	; 0x38
 800f162:	2300      	movs	r3, #0
 800f164:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f166:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800f16a:	460b      	mov	r3, r1
 800f16c:	4313      	orrs	r3, r2
 800f16e:	d009      	beq.n	800f184 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f170:	4b77      	ldr	r3, [pc, #476]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f174:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f17c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f17e:	4a74      	ldr	r2, [pc, #464]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f180:	430b      	orrs	r3, r1
 800f182:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800f190:	633b      	str	r3, [r7, #48]	; 0x30
 800f192:	2300      	movs	r3, #0
 800f194:	637b      	str	r3, [r7, #52]	; 0x34
 800f196:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800f19a:	460b      	mov	r3, r1
 800f19c:	4313      	orrs	r3, r2
 800f19e:	d00a      	beq.n	800f1b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f1a0:	4b6b      	ldr	r3, [pc, #428]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1a4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800f1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1b0:	4a67      	ldr	r2, [pc, #412]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f1b2:	430b      	orrs	r3, r1
 800f1b4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1be:	2100      	movs	r1, #0
 800f1c0:	62b9      	str	r1, [r7, #40]	; 0x28
 800f1c2:	f003 0301 	and.w	r3, r3, #1
 800f1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	d011      	beq.n	800f1f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1d6:	3308      	adds	r3, #8
 800f1d8:	2100      	movs	r1, #0
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f001 fa4a 	bl	8010674 <RCCEx_PLL2_Config>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f1e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d003      	beq.n	800f1f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fe:	2100      	movs	r1, #0
 800f200:	6239      	str	r1, [r7, #32]
 800f202:	f003 0302 	and.w	r3, r3, #2
 800f206:	627b      	str	r3, [r7, #36]	; 0x24
 800f208:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f20c:	460b      	mov	r3, r1
 800f20e:	4313      	orrs	r3, r2
 800f210:	d011      	beq.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f216:	3308      	adds	r3, #8
 800f218:	2101      	movs	r1, #1
 800f21a:	4618      	mov	r0, r3
 800f21c:	f001 fa2a 	bl	8010674 <RCCEx_PLL2_Config>
 800f220:	4603      	mov	r3, r0
 800f222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d003      	beq.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f22e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f232:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23e:	2100      	movs	r1, #0
 800f240:	61b9      	str	r1, [r7, #24]
 800f242:	f003 0304 	and.w	r3, r3, #4
 800f246:	61fb      	str	r3, [r7, #28]
 800f248:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f24c:	460b      	mov	r3, r1
 800f24e:	4313      	orrs	r3, r2
 800f250:	d011      	beq.n	800f276 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f256:	3308      	adds	r3, #8
 800f258:	2102      	movs	r1, #2
 800f25a:	4618      	mov	r0, r3
 800f25c:	f001 fa0a 	bl	8010674 <RCCEx_PLL2_Config>
 800f260:	4603      	mov	r3, r0
 800f262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d003      	beq.n	800f276 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f26e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27e:	2100      	movs	r1, #0
 800f280:	6139      	str	r1, [r7, #16]
 800f282:	f003 0308 	and.w	r3, r3, #8
 800f286:	617b      	str	r3, [r7, #20]
 800f288:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f28c:	460b      	mov	r3, r1
 800f28e:	4313      	orrs	r3, r2
 800f290:	d011      	beq.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f296:	3328      	adds	r3, #40	; 0x28
 800f298:	2100      	movs	r1, #0
 800f29a:	4618      	mov	r0, r3
 800f29c:	f001 fa9c 	bl	80107d8 <RCCEx_PLL3_Config>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800f2a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d003      	beq.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2be:	2100      	movs	r1, #0
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	f003 0310 	and.w	r3, r3, #16
 800f2c6:	60fb      	str	r3, [r7, #12]
 800f2c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	d011      	beq.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2d6:	3328      	adds	r3, #40	; 0x28
 800f2d8:	2101      	movs	r1, #1
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f001 fa7c 	bl	80107d8 <RCCEx_PLL3_Config>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f2e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d003      	beq.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fe:	2100      	movs	r1, #0
 800f300:	6039      	str	r1, [r7, #0]
 800f302:	f003 0320 	and.w	r3, r3, #32
 800f306:	607b      	str	r3, [r7, #4]
 800f308:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f30c:	460b      	mov	r3, r1
 800f30e:	4313      	orrs	r3, r2
 800f310:	d011      	beq.n	800f336 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f316:	3328      	adds	r3, #40	; 0x28
 800f318:	2102      	movs	r1, #2
 800f31a:	4618      	mov	r0, r3
 800f31c:	f001 fa5c 	bl	80107d8 <RCCEx_PLL3_Config>
 800f320:	4603      	mov	r3, r0
 800f322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d003      	beq.n	800f336 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f32e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800f336:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d101      	bne.n	800f342 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800f33e:	2300      	movs	r3, #0
 800f340:	e000      	b.n	800f344 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800f342:	2301      	movs	r3, #1
}
 800f344:	4618      	mov	r0, r3
 800f346:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f34a:	46bd      	mov	sp, r7
 800f34c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f350:	58024400 	.word	0x58024400

0800f354 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b090      	sub	sp, #64	; 0x40
 800f358:	af00      	add	r7, sp, #0
 800f35a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f35e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f362:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f366:	430b      	orrs	r3, r1
 800f368:	f040 8094 	bne.w	800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f36c:	4b9e      	ldr	r3, [pc, #632]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f36e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f370:	f003 0307 	and.w	r3, r3, #7
 800f374:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f378:	2b04      	cmp	r3, #4
 800f37a:	f200 8087 	bhi.w	800f48c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f37e:	a201      	add	r2, pc, #4	; (adr r2, 800f384 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f384:	0800f399 	.word	0x0800f399
 800f388:	0800f3c1 	.word	0x0800f3c1
 800f38c:	0800f3e9 	.word	0x0800f3e9
 800f390:	0800f485 	.word	0x0800f485
 800f394:	0800f411 	.word	0x0800f411
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f398:	4b93      	ldr	r3, [pc, #588]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f3a4:	d108      	bne.n	800f3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f3a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f001 f810 	bl	80103d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3b4:	f000 bd45 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3bc:	f000 bd41 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f3c0:	4b89      	ldr	r3, [pc, #548]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3cc:	d108      	bne.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3ce:	f107 0318 	add.w	r3, r7, #24
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f000 fd54 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f3d8:	69bb      	ldr	r3, [r7, #24]
 800f3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3dc:	f000 bd31 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e4:	f000 bd2d 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f3e8:	4b7f      	ldr	r3, [pc, #508]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f3f4:	d108      	bne.n	800f408 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3f6:	f107 030c 	add.w	r3, r7, #12
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f000 fe94 	bl	8010128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f404:	f000 bd1d 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f40c:	f000 bd19 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f410:	4b75      	ldr	r3, [pc, #468]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f414:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f418:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f41a:	4b73      	ldr	r3, [pc, #460]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f003 0304 	and.w	r3, r3, #4
 800f422:	2b04      	cmp	r3, #4
 800f424:	d10c      	bne.n	800f440 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d109      	bne.n	800f440 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f42c:	4b6e      	ldr	r3, [pc, #440]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	08db      	lsrs	r3, r3, #3
 800f432:	f003 0303 	and.w	r3, r3, #3
 800f436:	4a6d      	ldr	r2, [pc, #436]	; (800f5ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f438:	fa22 f303 	lsr.w	r3, r2, r3
 800f43c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f43e:	e01f      	b.n	800f480 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f440:	4b69      	ldr	r3, [pc, #420]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f44c:	d106      	bne.n	800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f454:	d102      	bne.n	800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f456:	4b66      	ldr	r3, [pc, #408]	; (800f5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f45a:	e011      	b.n	800f480 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f45c:	4b62      	ldr	r3, [pc, #392]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f468:	d106      	bne.n	800f478 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f46c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f470:	d102      	bne.n	800f478 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f472:	4b60      	ldr	r3, [pc, #384]	; (800f5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f474:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f476:	e003      	b.n	800f480 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f478:	2300      	movs	r3, #0
 800f47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f47c:	f000 bce1 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f480:	f000 bcdf 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f484:	4b5c      	ldr	r3, [pc, #368]	; (800f5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f488:	f000 bcdb 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f48c:	2300      	movs	r3, #0
 800f48e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f490:	f000 bcd7 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f494:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f498:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f49c:	430b      	orrs	r3, r1
 800f49e:	f040 80ad 	bne.w	800f5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f4a2:	4b51      	ldr	r3, [pc, #324]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f4a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4a6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800f4aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4b2:	d056      	beq.n	800f562 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800f4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4ba:	f200 8090 	bhi.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c0:	2bc0      	cmp	r3, #192	; 0xc0
 800f4c2:	f000 8088 	beq.w	800f5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800f4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c8:	2bc0      	cmp	r3, #192	; 0xc0
 800f4ca:	f200 8088 	bhi.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d0:	2b80      	cmp	r3, #128	; 0x80
 800f4d2:	d032      	beq.n	800f53a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d6:	2b80      	cmp	r3, #128	; 0x80
 800f4d8:	f200 8081 	bhi.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d003      	beq.n	800f4ea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e4:	2b40      	cmp	r3, #64	; 0x40
 800f4e6:	d014      	beq.n	800f512 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f4e8:	e079      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f4ea:	4b3f      	ldr	r3, [pc, #252]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f4f6:	d108      	bne.n	800f50a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f4f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f000 ff67 	bl	80103d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f506:	f000 bc9c 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f50a:	2300      	movs	r3, #0
 800f50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f50e:	f000 bc98 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f512:	4b35      	ldr	r3, [pc, #212]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f51a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f51e:	d108      	bne.n	800f532 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f520:	f107 0318 	add.w	r3, r7, #24
 800f524:	4618      	mov	r0, r3
 800f526:	f000 fcab 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f52e:	f000 bc88 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f532:	2300      	movs	r3, #0
 800f534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f536:	f000 bc84 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f53a:	4b2b      	ldr	r3, [pc, #172]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f546:	d108      	bne.n	800f55a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f548:	f107 030c 	add.w	r3, r7, #12
 800f54c:	4618      	mov	r0, r3
 800f54e:	f000 fdeb 	bl	8010128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f556:	f000 bc74 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f55a:	2300      	movs	r3, #0
 800f55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f55e:	f000 bc70 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f562:	4b21      	ldr	r3, [pc, #132]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f56a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f56c:	4b1e      	ldr	r3, [pc, #120]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f003 0304 	and.w	r3, r3, #4
 800f574:	2b04      	cmp	r3, #4
 800f576:	d10c      	bne.n	800f592 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800f578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d109      	bne.n	800f592 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f57e:	4b1a      	ldr	r3, [pc, #104]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	08db      	lsrs	r3, r3, #3
 800f584:	f003 0303 	and.w	r3, r3, #3
 800f588:	4a18      	ldr	r2, [pc, #96]	; (800f5ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f58a:	fa22 f303 	lsr.w	r3, r2, r3
 800f58e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f590:	e01f      	b.n	800f5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f592:	4b15      	ldr	r3, [pc, #84]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f59e:	d106      	bne.n	800f5ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5a6:	d102      	bne.n	800f5ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f5a8:	4b11      	ldr	r3, [pc, #68]	; (800f5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5ac:	e011      	b.n	800f5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f5ae:	4b0e      	ldr	r3, [pc, #56]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f5b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f5ba:	d106      	bne.n	800f5ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800f5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5c2:	d102      	bne.n	800f5ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f5c4:	4b0b      	ldr	r3, [pc, #44]	; (800f5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5c8:	e003      	b.n	800f5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f5ce:	f000 bc38 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5d2:	f000 bc36 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f5d6:	4b08      	ldr	r3, [pc, #32]	; (800f5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5da:	f000 bc32 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5e2:	f000 bc2e 	b.w	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5e6:	bf00      	nop
 800f5e8:	58024400 	.word	0x58024400
 800f5ec:	03d09000 	.word	0x03d09000
 800f5f0:	003d0900 	.word	0x003d0900
 800f5f4:	017d7840 	.word	0x017d7840
 800f5f8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f5fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f600:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800f604:	430b      	orrs	r3, r1
 800f606:	f040 809c 	bne.w	800f742 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f60a:	4b9e      	ldr	r3, [pc, #632]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f60e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800f612:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f616:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f61a:	d054      	beq.n	800f6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f622:	f200 808b 	bhi.w	800f73c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f628:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f62c:	f000 8083 	beq.w	800f736 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800f630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f632:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f636:	f200 8081 	bhi.w	800f73c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f640:	d02f      	beq.n	800f6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800f642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f648:	d878      	bhi.n	800f73c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d004      	beq.n	800f65a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f656:	d012      	beq.n	800f67e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f658:	e070      	b.n	800f73c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f65a:	4b8a      	ldr	r3, [pc, #552]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f666:	d107      	bne.n	800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f66c:	4618      	mov	r0, r3
 800f66e:	f000 feaf 	bl	80103d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f674:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f676:	e3e4      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f678:	2300      	movs	r3, #0
 800f67a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f67c:	e3e1      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f67e:	4b81      	ldr	r3, [pc, #516]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f68a:	d107      	bne.n	800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f68c:	f107 0318 	add.w	r3, r7, #24
 800f690:	4618      	mov	r0, r3
 800f692:	f000 fbf5 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f696:	69bb      	ldr	r3, [r7, #24]
 800f698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f69a:	e3d2      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f69c:	2300      	movs	r3, #0
 800f69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6a0:	e3cf      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f6a2:	4b78      	ldr	r3, [pc, #480]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f6aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6ae:	d107      	bne.n	800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6b0:	f107 030c 	add.w	r3, r7, #12
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f000 fd37 	bl	8010128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6be:	e3c0      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6c4:	e3bd      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f6c6:	4b6f      	ldr	r3, [pc, #444]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f6ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f6d0:	4b6c      	ldr	r3, [pc, #432]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f003 0304 	and.w	r3, r3, #4
 800f6d8:	2b04      	cmp	r3, #4
 800f6da:	d10c      	bne.n	800f6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800f6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d109      	bne.n	800f6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f6e2:	4b68      	ldr	r3, [pc, #416]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	08db      	lsrs	r3, r3, #3
 800f6e8:	f003 0303 	and.w	r3, r3, #3
 800f6ec:	4a66      	ldr	r2, [pc, #408]	; (800f888 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800f6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6f4:	e01e      	b.n	800f734 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f6f6:	4b63      	ldr	r3, [pc, #396]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f702:	d106      	bne.n	800f712 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f70a:	d102      	bne.n	800f712 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f70c:	4b5f      	ldr	r3, [pc, #380]	; (800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f70e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f710:	e010      	b.n	800f734 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f712:	4b5c      	ldr	r3, [pc, #368]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f71a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f71e:	d106      	bne.n	800f72e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f726:	d102      	bne.n	800f72e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f728:	4b59      	ldr	r3, [pc, #356]	; (800f890 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f72c:	e002      	b.n	800f734 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f732:	e386      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f734:	e385      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f736:	4b57      	ldr	r3, [pc, #348]	; (800f894 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f73a:	e382      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f73c:	2300      	movs	r3, #0
 800f73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f740:	e37f      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f742:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f746:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f74a:	430b      	orrs	r3, r1
 800f74c:	f040 80a7 	bne.w	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f750:	4b4c      	ldr	r3, [pc, #304]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f754:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f758:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f760:	d055      	beq.n	800f80e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f768:	f200 8096 	bhi.w	800f898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f772:	f000 8084 	beq.w	800f87e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f778:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f77c:	f200 808c 	bhi.w	800f898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f786:	d030      	beq.n	800f7ea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f78e:	f200 8083 	bhi.w	800f898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f794:	2b00      	cmp	r3, #0
 800f796:	d004      	beq.n	800f7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f79e:	d012      	beq.n	800f7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f7a0:	e07a      	b.n	800f898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f7a2:	4b38      	ldr	r3, [pc, #224]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f7ae:	d107      	bne.n	800f7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f7b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f000 fe0b 	bl	80103d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7be:	e340      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7c4:	e33d      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f7c6:	4b2f      	ldr	r3, [pc, #188]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f7ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f7d2:	d107      	bne.n	800f7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7d4:	f107 0318 	add.w	r3, r7, #24
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f000 fb51 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f7de:	69bb      	ldr	r3, [r7, #24]
 800f7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7e2:	e32e      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7e8:	e32b      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f7ea:	4b26      	ldr	r3, [pc, #152]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f7f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f7f6:	d107      	bne.n	800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7f8:	f107 030c 	add.w	r3, r7, #12
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f000 fc93 	bl	8010128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f806:	e31c      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f808:	2300      	movs	r3, #0
 800f80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f80c:	e319      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f80e:	4b1d      	ldr	r3, [pc, #116]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f816:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f818:	4b1a      	ldr	r3, [pc, #104]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f003 0304 	and.w	r3, r3, #4
 800f820:	2b04      	cmp	r3, #4
 800f822:	d10c      	bne.n	800f83e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f826:	2b00      	cmp	r3, #0
 800f828:	d109      	bne.n	800f83e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f82a:	4b16      	ldr	r3, [pc, #88]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	08db      	lsrs	r3, r3, #3
 800f830:	f003 0303 	and.w	r3, r3, #3
 800f834:	4a14      	ldr	r2, [pc, #80]	; (800f888 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f836:	fa22 f303 	lsr.w	r3, r2, r3
 800f83a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f83c:	e01e      	b.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f83e:	4b11      	ldr	r3, [pc, #68]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f84a:	d106      	bne.n	800f85a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f84e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f852:	d102      	bne.n	800f85a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f854:	4b0d      	ldr	r3, [pc, #52]	; (800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f856:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f858:	e010      	b.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f85a:	4b0a      	ldr	r3, [pc, #40]	; (800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f866:	d106      	bne.n	800f876 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f86a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f86e:	d102      	bne.n	800f876 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f870:	4b07      	ldr	r3, [pc, #28]	; (800f890 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f872:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f874:	e002      	b.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f876:	2300      	movs	r3, #0
 800f878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f87a:	e2e2      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f87c:	e2e1      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f87e:	4b05      	ldr	r3, [pc, #20]	; (800f894 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f882:	e2de      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f884:	58024400 	.word	0x58024400
 800f888:	03d09000 	.word	0x03d09000
 800f88c:	003d0900 	.word	0x003d0900
 800f890:	017d7840 	.word	0x017d7840
 800f894:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f898:	2300      	movs	r3, #0
 800f89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f89c:	e2d1      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f89e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8a2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f8a6:	430b      	orrs	r3, r1
 800f8a8:	f040 809c 	bne.w	800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f8ac:	4b93      	ldr	r3, [pc, #588]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f8ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f8b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8bc:	d054      	beq.n	800f968 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8c4:	f200 808b 	bhi.w	800f9de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f8ce:	f000 8083 	beq.w	800f9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f8d8:	f200 8081 	bhi.w	800f9de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8e2:	d02f      	beq.n	800f944 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8ea:	d878      	bhi.n	800f9de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d004      	beq.n	800f8fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8f8:	d012      	beq.n	800f920 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f8fa:	e070      	b.n	800f9de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f8fc:	4b7f      	ldr	r3, [pc, #508]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f904:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f908:	d107      	bne.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f90a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f90e:	4618      	mov	r0, r3
 800f910:	f000 fd5e 	bl	80103d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f918:	e293      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f91a:	2300      	movs	r3, #0
 800f91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f91e:	e290      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f920:	4b76      	ldr	r3, [pc, #472]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f92c:	d107      	bne.n	800f93e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f92e:	f107 0318 	add.w	r3, r7, #24
 800f932:	4618      	mov	r0, r3
 800f934:	f000 faa4 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f938:	69bb      	ldr	r3, [r7, #24]
 800f93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f93c:	e281      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f93e:	2300      	movs	r3, #0
 800f940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f942:	e27e      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f944:	4b6d      	ldr	r3, [pc, #436]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f94c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f950:	d107      	bne.n	800f962 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f952:	f107 030c 	add.w	r3, r7, #12
 800f956:	4618      	mov	r0, r3
 800f958:	f000 fbe6 	bl	8010128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f960:	e26f      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f962:	2300      	movs	r3, #0
 800f964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f966:	e26c      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f968:	4b64      	ldr	r3, [pc, #400]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f96a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f96c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f970:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f972:	4b62      	ldr	r3, [pc, #392]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f003 0304 	and.w	r3, r3, #4
 800f97a:	2b04      	cmp	r3, #4
 800f97c:	d10c      	bne.n	800f998 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f980:	2b00      	cmp	r3, #0
 800f982:	d109      	bne.n	800f998 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f984:	4b5d      	ldr	r3, [pc, #372]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	08db      	lsrs	r3, r3, #3
 800f98a:	f003 0303 	and.w	r3, r3, #3
 800f98e:	4a5c      	ldr	r2, [pc, #368]	; (800fb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f990:	fa22 f303 	lsr.w	r3, r2, r3
 800f994:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f996:	e01e      	b.n	800f9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f998:	4b58      	ldr	r3, [pc, #352]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9a4:	d106      	bne.n	800f9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f9ac:	d102      	bne.n	800f9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f9ae:	4b55      	ldr	r3, [pc, #340]	; (800fb04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9b2:	e010      	b.n	800f9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f9b4:	4b51      	ldr	r3, [pc, #324]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9c0:	d106      	bne.n	800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9c8:	d102      	bne.n	800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f9ca:	4b4f      	ldr	r3, [pc, #316]	; (800fb08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9ce:	e002      	b.n	800f9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f9d4:	e235      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f9d6:	e234      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f9d8:	4b4c      	ldr	r3, [pc, #304]	; (800fb0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9dc:	e231      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9e2:	e22e      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f9e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9e8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f9ec:	430b      	orrs	r3, r1
 800f9ee:	f040 808f 	bne.w	800fb10 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f9f2:	4b42      	ldr	r3, [pc, #264]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9f6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f9fa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800f9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fa02:	d06b      	beq.n	800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800fa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fa0a:	d874      	bhi.n	800faf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800fa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fa12:	d056      	beq.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800fa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fa1a:	d86c      	bhi.n	800faf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800fa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fa22:	d03b      	beq.n	800fa9c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800fa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fa2a:	d864      	bhi.n	800faf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800fa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa32:	d021      	beq.n	800fa78 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800fa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa3a:	d85c      	bhi.n	800faf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800fa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d004      	beq.n	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800fa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa48:	d004      	beq.n	800fa54 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800fa4a:	e054      	b.n	800faf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800fa4c:	f7fe fa0a 	bl	800de64 <HAL_RCC_GetPCLK1Freq>
 800fa50:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fa52:	e1f6      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fa54:	4b29      	ldr	r3, [pc, #164]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fa60:	d107      	bne.n	800fa72 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa62:	f107 0318 	add.w	r3, r7, #24
 800fa66:	4618      	mov	r0, r3
 800fa68:	f000 fa0a 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa70:	e1e7      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa72:	2300      	movs	r3, #0
 800fa74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa76:	e1e4      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fa78:	4b20      	ldr	r3, [pc, #128]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fa80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa84:	d107      	bne.n	800fa96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa86:	f107 030c 	add.w	r3, r7, #12
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f000 fb4c 	bl	8010128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa94:	e1d5      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa96:	2300      	movs	r3, #0
 800fa98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa9a:	e1d2      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fa9c:	4b17      	ldr	r3, [pc, #92]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f003 0304 	and.w	r3, r3, #4
 800faa4:	2b04      	cmp	r3, #4
 800faa6:	d109      	bne.n	800fabc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800faa8:	4b14      	ldr	r3, [pc, #80]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	08db      	lsrs	r3, r3, #3
 800faae:	f003 0303 	and.w	r3, r3, #3
 800fab2:	4a13      	ldr	r2, [pc, #76]	; (800fb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800fab4:	fa22 f303 	lsr.w	r3, r2, r3
 800fab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800faba:	e1c2      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fabc:	2300      	movs	r3, #0
 800fabe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fac0:	e1bf      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fac2:	4b0e      	ldr	r3, [pc, #56]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800faca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800face:	d102      	bne.n	800fad6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800fad0:	4b0c      	ldr	r3, [pc, #48]	; (800fb04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800fad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fad4:	e1b5      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fad6:	2300      	movs	r3, #0
 800fad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fada:	e1b2      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fadc:	4b07      	ldr	r3, [pc, #28]	; (800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fae8:	d102      	bne.n	800faf0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800faea:	4b07      	ldr	r3, [pc, #28]	; (800fb08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800faec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800faee:	e1a8      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800faf0:	2300      	movs	r3, #0
 800faf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800faf4:	e1a5      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800faf6:	2300      	movs	r3, #0
 800faf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fafa:	e1a2      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fafc:	58024400 	.word	0x58024400
 800fb00:	03d09000 	.word	0x03d09000
 800fb04:	003d0900 	.word	0x003d0900
 800fb08:	017d7840 	.word	0x017d7840
 800fb0c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800fb10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb14:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800fb18:	430b      	orrs	r3, r1
 800fb1a:	d173      	bne.n	800fc04 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800fb1c:	4b9c      	ldr	r3, [pc, #624]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fb24:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb2c:	d02f      	beq.n	800fb8e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800fb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb34:	d863      	bhi.n	800fbfe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800fb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d004      	beq.n	800fb46 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800fb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb42:	d012      	beq.n	800fb6a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800fb44:	e05b      	b.n	800fbfe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fb46:	4b92      	ldr	r3, [pc, #584]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb52:	d107      	bne.n	800fb64 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb54:	f107 0318 	add.w	r3, r7, #24
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f000 f991 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb62:	e16e      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb68:	e16b      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fb6a:	4b89      	ldr	r3, [pc, #548]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fb72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb76:	d107      	bne.n	800fb88 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb78:	f107 030c 	add.w	r3, r7, #12
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f000 fad3 	bl	8010128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb86:	e15c      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb8c:	e159      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fb8e:	4b80      	ldr	r3, [pc, #512]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fb96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fb98:	4b7d      	ldr	r3, [pc, #500]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f003 0304 	and.w	r3, r3, #4
 800fba0:	2b04      	cmp	r3, #4
 800fba2:	d10c      	bne.n	800fbbe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800fba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d109      	bne.n	800fbbe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fbaa:	4b79      	ldr	r3, [pc, #484]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	08db      	lsrs	r3, r3, #3
 800fbb0:	f003 0303 	and.w	r3, r3, #3
 800fbb4:	4a77      	ldr	r2, [pc, #476]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800fbb6:	fa22 f303 	lsr.w	r3, r2, r3
 800fbba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbbc:	e01e      	b.n	800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fbbe:	4b74      	ldr	r3, [pc, #464]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbca:	d106      	bne.n	800fbda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800fbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fbd2:	d102      	bne.n	800fbda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fbd4:	4b70      	ldr	r3, [pc, #448]	; (800fd98 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800fbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbd8:	e010      	b.n	800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fbda:	4b6d      	ldr	r3, [pc, #436]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fbe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fbe6:	d106      	bne.n	800fbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800fbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbee:	d102      	bne.n	800fbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fbf0:	4b6a      	ldr	r3, [pc, #424]	; (800fd9c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800fbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbf4:	e002      	b.n	800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fbfa:	e122      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fbfc:	e121      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc02:	e11e      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800fc04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc08:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800fc0c:	430b      	orrs	r3, r1
 800fc0e:	d133      	bne.n	800fc78 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800fc10:	4b5f      	ldr	r3, [pc, #380]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d004      	beq.n	800fc2a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800fc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc26:	d012      	beq.n	800fc4e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800fc28:	e023      	b.n	800fc72 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fc2a:	4b59      	ldr	r3, [pc, #356]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fc36:	d107      	bne.n	800fc48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f000 fbc7 	bl	80103d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc46:	e0fc      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc4c:	e0f9      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fc4e:	4b50      	ldr	r3, [pc, #320]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc5a:	d107      	bne.n	800fc6c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc5c:	f107 0318 	add.w	r3, r7, #24
 800fc60:	4618      	mov	r0, r3
 800fc62:	f000 f90d 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800fc66:	6a3b      	ldr	r3, [r7, #32]
 800fc68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc6a:	e0ea      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc70:	e0e7      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fc72:	2300      	movs	r3, #0
 800fc74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc76:	e0e4      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800fc78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc7c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800fc80:	430b      	orrs	r3, r1
 800fc82:	f040 808d 	bne.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800fc86:	4b42      	ldr	r3, [pc, #264]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc8a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800fc8e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc96:	d06b      	beq.n	800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc9e:	d874      	bhi.n	800fd8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fca6:	d056      	beq.n	800fd56 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800fca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcae:	d86c      	bhi.n	800fd8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fcb6:	d03b      	beq.n	800fd30 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800fcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fcbe:	d864      	bhi.n	800fd8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fcc6:	d021      	beq.n	800fd0c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800fcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fcce:	d85c      	bhi.n	800fd8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d004      	beq.n	800fce0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800fcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcdc:	d004      	beq.n	800fce8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800fcde:	e054      	b.n	800fd8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800fce0:	f000 f8b8 	bl	800fe54 <HAL_RCCEx_GetD3PCLK1Freq>
 800fce4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fce6:	e0ac      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fce8:	4b29      	ldr	r3, [pc, #164]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fcf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fcf4:	d107      	bne.n	800fd06 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcf6:	f107 0318 	add.w	r3, r7, #24
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f000 f8c0 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fd00:	69fb      	ldr	r3, [r7, #28]
 800fd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd04:	e09d      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd06:	2300      	movs	r3, #0
 800fd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd0a:	e09a      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fd0c:	4b20      	ldr	r3, [pc, #128]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fd14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd18:	d107      	bne.n	800fd2a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd1a:	f107 030c 	add.w	r3, r7, #12
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f000 fa02 	bl	8010128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd28:	e08b      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd2e:	e088      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fd30:	4b17      	ldr	r3, [pc, #92]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	f003 0304 	and.w	r3, r3, #4
 800fd38:	2b04      	cmp	r3, #4
 800fd3a:	d109      	bne.n	800fd50 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd3c:	4b14      	ldr	r3, [pc, #80]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	08db      	lsrs	r3, r3, #3
 800fd42:	f003 0303 	and.w	r3, r3, #3
 800fd46:	4a13      	ldr	r2, [pc, #76]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800fd48:	fa22 f303 	lsr.w	r3, r2, r3
 800fd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd4e:	e078      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd50:	2300      	movs	r3, #0
 800fd52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd54:	e075      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fd56:	4b0e      	ldr	r3, [pc, #56]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd62:	d102      	bne.n	800fd6a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800fd64:	4b0c      	ldr	r3, [pc, #48]	; (800fd98 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800fd66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd68:	e06b      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd6e:	e068      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fd70:	4b07      	ldr	r3, [pc, #28]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd7c:	d102      	bne.n	800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800fd7e:	4b07      	ldr	r3, [pc, #28]	; (800fd9c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800fd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd82:	e05e      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd84:	2300      	movs	r3, #0
 800fd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd88:	e05b      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd8e:	e058      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fd90:	58024400 	.word	0x58024400
 800fd94:	03d09000 	.word	0x03d09000
 800fd98:	003d0900 	.word	0x003d0900
 800fd9c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800fda0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fda4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800fda8:	430b      	orrs	r3, r1
 800fdaa:	d148      	bne.n	800fe3e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800fdac:	4b27      	ldr	r3, [pc, #156]	; (800fe4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fdae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fdb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fdbc:	d02a      	beq.n	800fe14 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800fdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fdc4:	d838      	bhi.n	800fe38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800fdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d004      	beq.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fdd2:	d00d      	beq.n	800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800fdd4:	e030      	b.n	800fe38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fdd6:	4b1d      	ldr	r3, [pc, #116]	; (800fe4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fdde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fde2:	d102      	bne.n	800fdea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800fde4:	4b1a      	ldr	r3, [pc, #104]	; (800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800fde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fde8:	e02b      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdee:	e028      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fdf0:	4b16      	ldr	r3, [pc, #88]	; (800fe4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fdf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fdfc:	d107      	bne.n	800fe0e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fdfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe02:	4618      	mov	r0, r3
 800fe04:	f000 fae4 	bl	80103d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fe08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe0c:	e019      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe12:	e016      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fe14:	4b0d      	ldr	r3, [pc, #52]	; (800fe4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fe20:	d107      	bne.n	800fe32 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe22:	f107 0318 	add.w	r3, r7, #24
 800fe26:	4618      	mov	r0, r3
 800fe28:	f000 f82a 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe30:	e007      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe32:	2300      	movs	r3, #0
 800fe34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe36:	e004      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe3c:	e001      	b.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800fe42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3740      	adds	r7, #64	; 0x40
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	58024400 	.word	0x58024400
 800fe50:	017d7840 	.word	0x017d7840

0800fe54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fe58:	f7fd ffd4 	bl	800de04 <HAL_RCC_GetHCLKFreq>
 800fe5c:	4602      	mov	r2, r0
 800fe5e:	4b06      	ldr	r3, [pc, #24]	; (800fe78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fe60:	6a1b      	ldr	r3, [r3, #32]
 800fe62:	091b      	lsrs	r3, r3, #4
 800fe64:	f003 0307 	and.w	r3, r3, #7
 800fe68:	4904      	ldr	r1, [pc, #16]	; (800fe7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fe6a:	5ccb      	ldrb	r3, [r1, r3]
 800fe6c:	f003 031f 	and.w	r3, r3, #31
 800fe70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	58024400 	.word	0x58024400
 800fe7c:	0801a1d4 	.word	0x0801a1d4

0800fe80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b089      	sub	sp, #36	; 0x24
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fe88:	4ba1      	ldr	r3, [pc, #644]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe8c:	f003 0303 	and.w	r3, r3, #3
 800fe90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fe92:	4b9f      	ldr	r3, [pc, #636]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe96:	0b1b      	lsrs	r3, r3, #12
 800fe98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fe9e:	4b9c      	ldr	r3, [pc, #624]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fea2:	091b      	lsrs	r3, r3, #4
 800fea4:	f003 0301 	and.w	r3, r3, #1
 800fea8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800feaa:	4b99      	ldr	r3, [pc, #612]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800feac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feae:	08db      	lsrs	r3, r3, #3
 800feb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800feb4:	693a      	ldr	r2, [r7, #16]
 800feb6:	fb02 f303 	mul.w	r3, r2, r3
 800feba:	ee07 3a90 	vmov	s15, r3
 800febe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fec2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	f000 8111 	beq.w	80100f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fece:	69bb      	ldr	r3, [r7, #24]
 800fed0:	2b02      	cmp	r3, #2
 800fed2:	f000 8083 	beq.w	800ffdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	2b02      	cmp	r3, #2
 800feda:	f200 80a1 	bhi.w	8010020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fede:	69bb      	ldr	r3, [r7, #24]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d003      	beq.n	800feec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fee4:	69bb      	ldr	r3, [r7, #24]
 800fee6:	2b01      	cmp	r3, #1
 800fee8:	d056      	beq.n	800ff98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800feea:	e099      	b.n	8010020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800feec:	4b88      	ldr	r3, [pc, #544]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	f003 0320 	and.w	r3, r3, #32
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d02d      	beq.n	800ff54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fef8:	4b85      	ldr	r3, [pc, #532]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	08db      	lsrs	r3, r3, #3
 800fefe:	f003 0303 	and.w	r3, r3, #3
 800ff02:	4a84      	ldr	r2, [pc, #528]	; (8010114 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ff04:	fa22 f303 	lsr.w	r3, r2, r3
 800ff08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	ee07 3a90 	vmov	s15, r3
 800ff10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	ee07 3a90 	vmov	s15, r3
 800ff1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff22:	4b7b      	ldr	r3, [pc, #492]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff2a:	ee07 3a90 	vmov	s15, r3
 800ff2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ff52:	e087      	b.n	8010064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	ee07 3a90 	vmov	s15, r3
 800ff5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801011c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ff62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff66:	4b6a      	ldr	r3, [pc, #424]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff6e:	ee07 3a90 	vmov	s15, r3
 800ff72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff96:	e065      	b.n	8010064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	ee07 3a90 	vmov	s15, r3
 800ff9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffa2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ffa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffaa:	4b59      	ldr	r3, [pc, #356]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffb2:	ee07 3a90 	vmov	s15, r3
 800ffb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffba:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffbe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ffc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ffda:	e043      	b.n	8010064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	ee07 3a90 	vmov	s15, r3
 800ffe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffe6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ffea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffee:	4b48      	ldr	r3, [pc, #288]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fff6:	ee07 3a90 	vmov	s15, r3
 800fffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8010002:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801000a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801000e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010016:	ee67 7a27 	vmul.f32	s15, s14, s15
 801001a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801001e:	e021      	b.n	8010064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	ee07 3a90 	vmov	s15, r3
 8010026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801002a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801002e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010032:	4b37      	ldr	r3, [pc, #220]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801003a:	ee07 3a90 	vmov	s15, r3
 801003e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010042:	ed97 6a03 	vldr	s12, [r7, #12]
 8010046:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801004a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801004e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801005a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801005e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010062:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010064:	4b2a      	ldr	r3, [pc, #168]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010068:	0a5b      	lsrs	r3, r3, #9
 801006a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801006e:	ee07 3a90 	vmov	s15, r3
 8010072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801007a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801007e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801008a:	ee17 2a90 	vmov	r2, s15
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010092:	4b1f      	ldr	r3, [pc, #124]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010096:	0c1b      	lsrs	r3, r3, #16
 8010098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801009c:	ee07 3a90 	vmov	s15, r3
 80100a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80100a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80100ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80100b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100b8:	ee17 2a90 	vmov	r2, s15
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80100c0:	4b13      	ldr	r3, [pc, #76]	; (8010110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80100c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100c4:	0e1b      	lsrs	r3, r3, #24
 80100c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100ca:	ee07 3a90 	vmov	s15, r3
 80100ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80100d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80100da:	edd7 6a07 	vldr	s13, [r7, #28]
 80100de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100e6:	ee17 2a90 	vmov	r2, s15
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80100ee:	e008      	b.n	8010102 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2200      	movs	r2, #0
 80100f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2200      	movs	r2, #0
 80100fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	609a      	str	r2, [r3, #8]
}
 8010102:	bf00      	nop
 8010104:	3724      	adds	r7, #36	; 0x24
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	58024400 	.word	0x58024400
 8010114:	03d09000 	.word	0x03d09000
 8010118:	46000000 	.word	0x46000000
 801011c:	4c742400 	.word	0x4c742400
 8010120:	4a742400 	.word	0x4a742400
 8010124:	4bbebc20 	.word	0x4bbebc20

08010128 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010128:	b480      	push	{r7}
 801012a:	b089      	sub	sp, #36	; 0x24
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010130:	4ba1      	ldr	r3, [pc, #644]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010134:	f003 0303 	and.w	r3, r3, #3
 8010138:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801013a:	4b9f      	ldr	r3, [pc, #636]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801013c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801013e:	0d1b      	lsrs	r3, r3, #20
 8010140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010144:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010146:	4b9c      	ldr	r3, [pc, #624]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801014a:	0a1b      	lsrs	r3, r3, #8
 801014c:	f003 0301 	and.w	r3, r3, #1
 8010150:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010152:	4b99      	ldr	r3, [pc, #612]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010156:	08db      	lsrs	r3, r3, #3
 8010158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801015c:	693a      	ldr	r2, [r7, #16]
 801015e:	fb02 f303 	mul.w	r3, r2, r3
 8010162:	ee07 3a90 	vmov	s15, r3
 8010166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801016a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	2b00      	cmp	r3, #0
 8010172:	f000 8111 	beq.w	8010398 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	2b02      	cmp	r3, #2
 801017a:	f000 8083 	beq.w	8010284 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	2b02      	cmp	r3, #2
 8010182:	f200 80a1 	bhi.w	80102c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d003      	beq.n	8010194 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	2b01      	cmp	r3, #1
 8010190:	d056      	beq.n	8010240 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010192:	e099      	b.n	80102c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010194:	4b88      	ldr	r3, [pc, #544]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f003 0320 	and.w	r3, r3, #32
 801019c:	2b00      	cmp	r3, #0
 801019e:	d02d      	beq.n	80101fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80101a0:	4b85      	ldr	r3, [pc, #532]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	08db      	lsrs	r3, r3, #3
 80101a6:	f003 0303 	and.w	r3, r3, #3
 80101aa:	4a84      	ldr	r2, [pc, #528]	; (80103bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80101ac:	fa22 f303 	lsr.w	r3, r2, r3
 80101b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	ee07 3a90 	vmov	s15, r3
 80101b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	ee07 3a90 	vmov	s15, r3
 80101c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101ca:	4b7b      	ldr	r3, [pc, #492]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101d2:	ee07 3a90 	vmov	s15, r3
 80101d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101da:	ed97 6a03 	vldr	s12, [r7, #12]
 80101de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80103c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80101e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80101fa:	e087      	b.n	801030c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	ee07 3a90 	vmov	s15, r3
 8010202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010206:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80103c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801020a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801020e:	4b6a      	ldr	r3, [pc, #424]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010216:	ee07 3a90 	vmov	s15, r3
 801021a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801021e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010222:	eddf 5a67 	vldr	s11, [pc, #412]	; 80103c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801022a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801022e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010236:	ee67 7a27 	vmul.f32	s15, s14, s15
 801023a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801023e:	e065      	b.n	801030c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	ee07 3a90 	vmov	s15, r3
 8010246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801024a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80103c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801024e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010252:	4b59      	ldr	r3, [pc, #356]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801025a:	ee07 3a90 	vmov	s15, r3
 801025e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010262:	ed97 6a03 	vldr	s12, [r7, #12]
 8010266:	eddf 5a56 	vldr	s11, [pc, #344]	; 80103c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801026a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801026e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801027a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801027e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010282:	e043      	b.n	801030c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	ee07 3a90 	vmov	s15, r3
 801028a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801028e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80103cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010296:	4b48      	ldr	r3, [pc, #288]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801029a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801029e:	ee07 3a90 	vmov	s15, r3
 80102a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80102a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80102aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80103c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80102ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80102b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80102ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80102c6:	e021      	b.n	801030c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	ee07 3a90 	vmov	s15, r3
 80102ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80103c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80102d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80102da:	4b37      	ldr	r3, [pc, #220]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102e2:	ee07 3a90 	vmov	s15, r3
 80102e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80102ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80102ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80103c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80102f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80102f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80102fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801030a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801030c:	4b2a      	ldr	r3, [pc, #168]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801030e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010310:	0a5b      	lsrs	r3, r3, #9
 8010312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010316:	ee07 3a90 	vmov	s15, r3
 801031a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801031e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010326:	edd7 6a07 	vldr	s13, [r7, #28]
 801032a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801032e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010332:	ee17 2a90 	vmov	r2, s15
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801033a:	4b1f      	ldr	r3, [pc, #124]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801033c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801033e:	0c1b      	lsrs	r3, r3, #16
 8010340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010344:	ee07 3a90 	vmov	s15, r3
 8010348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801034c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010350:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010354:	edd7 6a07 	vldr	s13, [r7, #28]
 8010358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801035c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010360:	ee17 2a90 	vmov	r2, s15
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010368:	4b13      	ldr	r3, [pc, #76]	; (80103b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801036a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801036c:	0e1b      	lsrs	r3, r3, #24
 801036e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010372:	ee07 3a90 	vmov	s15, r3
 8010376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801037a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801037e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010382:	edd7 6a07 	vldr	s13, [r7, #28]
 8010386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801038a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801038e:	ee17 2a90 	vmov	r2, s15
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010396:	e008      	b.n	80103aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2200      	movs	r2, #0
 80103a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2200      	movs	r2, #0
 80103a8:	609a      	str	r2, [r3, #8]
}
 80103aa:	bf00      	nop
 80103ac:	3724      	adds	r7, #36	; 0x24
 80103ae:	46bd      	mov	sp, r7
 80103b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b4:	4770      	bx	lr
 80103b6:	bf00      	nop
 80103b8:	58024400 	.word	0x58024400
 80103bc:	03d09000 	.word	0x03d09000
 80103c0:	46000000 	.word	0x46000000
 80103c4:	4c742400 	.word	0x4c742400
 80103c8:	4a742400 	.word	0x4a742400
 80103cc:	4bbebc20 	.word	0x4bbebc20

080103d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b089      	sub	sp, #36	; 0x24
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80103d8:	4ba0      	ldr	r3, [pc, #640]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103dc:	f003 0303 	and.w	r3, r3, #3
 80103e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80103e2:	4b9e      	ldr	r3, [pc, #632]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103e6:	091b      	lsrs	r3, r3, #4
 80103e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80103ee:	4b9b      	ldr	r3, [pc, #620]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f2:	f003 0301 	and.w	r3, r3, #1
 80103f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80103f8:	4b98      	ldr	r3, [pc, #608]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103fc:	08db      	lsrs	r3, r3, #3
 80103fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010402:	693a      	ldr	r2, [r7, #16]
 8010404:	fb02 f303 	mul.w	r3, r2, r3
 8010408:	ee07 3a90 	vmov	s15, r3
 801040c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010410:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	2b00      	cmp	r3, #0
 8010418:	f000 8111 	beq.w	801063e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801041c:	69bb      	ldr	r3, [r7, #24]
 801041e:	2b02      	cmp	r3, #2
 8010420:	f000 8083 	beq.w	801052a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	2b02      	cmp	r3, #2
 8010428:	f200 80a1 	bhi.w	801056e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d003      	beq.n	801043a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010432:	69bb      	ldr	r3, [r7, #24]
 8010434:	2b01      	cmp	r3, #1
 8010436:	d056      	beq.n	80104e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010438:	e099      	b.n	801056e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801043a:	4b88      	ldr	r3, [pc, #544]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f003 0320 	and.w	r3, r3, #32
 8010442:	2b00      	cmp	r3, #0
 8010444:	d02d      	beq.n	80104a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010446:	4b85      	ldr	r3, [pc, #532]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	08db      	lsrs	r3, r3, #3
 801044c:	f003 0303 	and.w	r3, r3, #3
 8010450:	4a83      	ldr	r2, [pc, #524]	; (8010660 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010452:	fa22 f303 	lsr.w	r3, r2, r3
 8010456:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	ee07 3a90 	vmov	s15, r3
 801045e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	ee07 3a90 	vmov	s15, r3
 8010468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801046c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010470:	4b7a      	ldr	r3, [pc, #488]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010478:	ee07 3a90 	vmov	s15, r3
 801047c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010480:	ed97 6a03 	vldr	s12, [r7, #12]
 8010484:	eddf 5a77 	vldr	s11, [pc, #476]	; 8010664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801048c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010498:	ee67 7a27 	vmul.f32	s15, s14, s15
 801049c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80104a0:	e087      	b.n	80105b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	ee07 3a90 	vmov	s15, r3
 80104a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8010668 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80104b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104b4:	4b69      	ldr	r3, [pc, #420]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104bc:	ee07 3a90 	vmov	s15, r3
 80104c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80104c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8010664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80104cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104e4:	e065      	b.n	80105b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	ee07 3a90 	vmov	s15, r3
 80104ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801066c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80104f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104f8:	4b58      	ldr	r3, [pc, #352]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010500:	ee07 3a90 	vmov	s15, r3
 8010504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010508:	ed97 6a03 	vldr	s12, [r7, #12]
 801050c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8010664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801051c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010524:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010528:	e043      	b.n	80105b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	ee07 3a90 	vmov	s15, r3
 8010530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010534:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8010670 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801053c:	4b47      	ldr	r3, [pc, #284]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010544:	ee07 3a90 	vmov	s15, r3
 8010548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801054c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010550:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801055c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010568:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801056c:	e021      	b.n	80105b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	ee07 3a90 	vmov	s15, r3
 8010574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010578:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010668 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801057c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010580:	4b36      	ldr	r3, [pc, #216]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010588:	ee07 3a90 	vmov	s15, r3
 801058c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010590:	ed97 6a03 	vldr	s12, [r7, #12]
 8010594:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801059c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80105a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80105a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80105a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80105b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80105b2:	4b2a      	ldr	r3, [pc, #168]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80105b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105b6:	0a5b      	lsrs	r3, r3, #9
 80105b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105bc:	ee07 3a90 	vmov	s15, r3
 80105c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80105c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80105d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105d8:	ee17 2a90 	vmov	r2, s15
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80105e0:	4b1e      	ldr	r3, [pc, #120]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80105e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105e4:	0c1b      	lsrs	r3, r3, #16
 80105e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105ea:	ee07 3a90 	vmov	s15, r3
 80105ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80105f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80105fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010606:	ee17 2a90 	vmov	r2, s15
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801060e:	4b13      	ldr	r3, [pc, #76]	; (801065c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010612:	0e1b      	lsrs	r3, r3, #24
 8010614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010618:	ee07 3a90 	vmov	s15, r3
 801061c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010624:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010628:	edd7 6a07 	vldr	s13, [r7, #28]
 801062c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010634:	ee17 2a90 	vmov	r2, s15
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801063c:	e008      	b.n	8010650 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2200      	movs	r2, #0
 8010642:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2200      	movs	r2, #0
 8010648:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2200      	movs	r2, #0
 801064e:	609a      	str	r2, [r3, #8]
}
 8010650:	bf00      	nop
 8010652:	3724      	adds	r7, #36	; 0x24
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr
 801065c:	58024400 	.word	0x58024400
 8010660:	03d09000 	.word	0x03d09000
 8010664:	46000000 	.word	0x46000000
 8010668:	4c742400 	.word	0x4c742400
 801066c:	4a742400 	.word	0x4a742400
 8010670:	4bbebc20 	.word	0x4bbebc20

08010674 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010682:	4b53      	ldr	r3, [pc, #332]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010686:	f003 0303 	and.w	r3, r3, #3
 801068a:	2b03      	cmp	r3, #3
 801068c:	d101      	bne.n	8010692 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801068e:	2301      	movs	r3, #1
 8010690:	e099      	b.n	80107c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010692:	4b4f      	ldr	r3, [pc, #316]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4a4e      	ldr	r2, [pc, #312]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010698:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801069c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801069e:	f7f4 fb8b 	bl	8004db8 <HAL_GetTick>
 80106a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80106a4:	e008      	b.n	80106b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80106a6:	f7f4 fb87 	bl	8004db8 <HAL_GetTick>
 80106aa:	4602      	mov	r2, r0
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	1ad3      	subs	r3, r2, r3
 80106b0:	2b02      	cmp	r3, #2
 80106b2:	d901      	bls.n	80106b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80106b4:	2303      	movs	r3, #3
 80106b6:	e086      	b.n	80107c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80106b8:	4b45      	ldr	r3, [pc, #276]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d1f0      	bne.n	80106a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80106c4:	4b42      	ldr	r3, [pc, #264]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 80106c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	031b      	lsls	r3, r3, #12
 80106d2:	493f      	ldr	r1, [pc, #252]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 80106d4:	4313      	orrs	r3, r2
 80106d6:	628b      	str	r3, [r1, #40]	; 0x28
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	3b01      	subs	r3, #1
 80106de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	689b      	ldr	r3, [r3, #8]
 80106e6:	3b01      	subs	r3, #1
 80106e8:	025b      	lsls	r3, r3, #9
 80106ea:	b29b      	uxth	r3, r3
 80106ec:	431a      	orrs	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	68db      	ldr	r3, [r3, #12]
 80106f2:	3b01      	subs	r3, #1
 80106f4:	041b      	lsls	r3, r3, #16
 80106f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80106fa:	431a      	orrs	r2, r3
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	691b      	ldr	r3, [r3, #16]
 8010700:	3b01      	subs	r3, #1
 8010702:	061b      	lsls	r3, r3, #24
 8010704:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010708:	4931      	ldr	r1, [pc, #196]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 801070a:	4313      	orrs	r3, r2
 801070c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801070e:	4b30      	ldr	r3, [pc, #192]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010712:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	695b      	ldr	r3, [r3, #20]
 801071a:	492d      	ldr	r1, [pc, #180]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 801071c:	4313      	orrs	r3, r2
 801071e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010720:	4b2b      	ldr	r3, [pc, #172]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010724:	f023 0220 	bic.w	r2, r3, #32
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	699b      	ldr	r3, [r3, #24]
 801072c:	4928      	ldr	r1, [pc, #160]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 801072e:	4313      	orrs	r3, r2
 8010730:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010732:	4b27      	ldr	r3, [pc, #156]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010736:	4a26      	ldr	r2, [pc, #152]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010738:	f023 0310 	bic.w	r3, r3, #16
 801073c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801073e:	4b24      	ldr	r3, [pc, #144]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010742:	4b24      	ldr	r3, [pc, #144]	; (80107d4 <RCCEx_PLL2_Config+0x160>)
 8010744:	4013      	ands	r3, r2
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	69d2      	ldr	r2, [r2, #28]
 801074a:	00d2      	lsls	r2, r2, #3
 801074c:	4920      	ldr	r1, [pc, #128]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 801074e:	4313      	orrs	r3, r2
 8010750:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010752:	4b1f      	ldr	r3, [pc, #124]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010756:	4a1e      	ldr	r2, [pc, #120]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010758:	f043 0310 	orr.w	r3, r3, #16
 801075c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d106      	bne.n	8010772 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010764:	4b1a      	ldr	r3, [pc, #104]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010768:	4a19      	ldr	r2, [pc, #100]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 801076a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801076e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010770:	e00f      	b.n	8010792 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	2b01      	cmp	r3, #1
 8010776:	d106      	bne.n	8010786 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010778:	4b15      	ldr	r3, [pc, #84]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 801077a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801077c:	4a14      	ldr	r2, [pc, #80]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 801077e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010782:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010784:	e005      	b.n	8010792 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010786:	4b12      	ldr	r3, [pc, #72]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801078a:	4a11      	ldr	r2, [pc, #68]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 801078c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010790:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010792:	4b0f      	ldr	r3, [pc, #60]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	4a0e      	ldr	r2, [pc, #56]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 8010798:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801079c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801079e:	f7f4 fb0b 	bl	8004db8 <HAL_GetTick>
 80107a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80107a4:	e008      	b.n	80107b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80107a6:	f7f4 fb07 	bl	8004db8 <HAL_GetTick>
 80107aa:	4602      	mov	r2, r0
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	1ad3      	subs	r3, r2, r3
 80107b0:	2b02      	cmp	r3, #2
 80107b2:	d901      	bls.n	80107b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80107b4:	2303      	movs	r3, #3
 80107b6:	e006      	b.n	80107c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80107b8:	4b05      	ldr	r3, [pc, #20]	; (80107d0 <RCCEx_PLL2_Config+0x15c>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d0f0      	beq.n	80107a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80107c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	bf00      	nop
 80107d0:	58024400 	.word	0x58024400
 80107d4:	ffff0007 	.word	0xffff0007

080107d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80107e2:	2300      	movs	r3, #0
 80107e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80107e6:	4b53      	ldr	r3, [pc, #332]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80107e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ea:	f003 0303 	and.w	r3, r3, #3
 80107ee:	2b03      	cmp	r3, #3
 80107f0:	d101      	bne.n	80107f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80107f2:	2301      	movs	r3, #1
 80107f4:	e099      	b.n	801092a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80107f6:	4b4f      	ldr	r3, [pc, #316]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4a4e      	ldr	r2, [pc, #312]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80107fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010802:	f7f4 fad9 	bl	8004db8 <HAL_GetTick>
 8010806:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010808:	e008      	b.n	801081c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801080a:	f7f4 fad5 	bl	8004db8 <HAL_GetTick>
 801080e:	4602      	mov	r2, r0
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	1ad3      	subs	r3, r2, r3
 8010814:	2b02      	cmp	r3, #2
 8010816:	d901      	bls.n	801081c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010818:	2303      	movs	r3, #3
 801081a:	e086      	b.n	801092a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801081c:	4b45      	ldr	r3, [pc, #276]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010824:	2b00      	cmp	r3, #0
 8010826:	d1f0      	bne.n	801080a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010828:	4b42      	ldr	r3, [pc, #264]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 801082a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801082c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	051b      	lsls	r3, r3, #20
 8010836:	493f      	ldr	r1, [pc, #252]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 8010838:	4313      	orrs	r3, r2
 801083a:	628b      	str	r3, [r1, #40]	; 0x28
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	3b01      	subs	r3, #1
 8010842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	689b      	ldr	r3, [r3, #8]
 801084a:	3b01      	subs	r3, #1
 801084c:	025b      	lsls	r3, r3, #9
 801084e:	b29b      	uxth	r3, r3
 8010850:	431a      	orrs	r2, r3
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	68db      	ldr	r3, [r3, #12]
 8010856:	3b01      	subs	r3, #1
 8010858:	041b      	lsls	r3, r3, #16
 801085a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801085e:	431a      	orrs	r2, r3
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	691b      	ldr	r3, [r3, #16]
 8010864:	3b01      	subs	r3, #1
 8010866:	061b      	lsls	r3, r3, #24
 8010868:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801086c:	4931      	ldr	r1, [pc, #196]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 801086e:	4313      	orrs	r3, r2
 8010870:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010872:	4b30      	ldr	r3, [pc, #192]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 8010874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010876:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	695b      	ldr	r3, [r3, #20]
 801087e:	492d      	ldr	r1, [pc, #180]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 8010880:	4313      	orrs	r3, r2
 8010882:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010884:	4b2b      	ldr	r3, [pc, #172]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 8010886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010888:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	699b      	ldr	r3, [r3, #24]
 8010890:	4928      	ldr	r1, [pc, #160]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 8010892:	4313      	orrs	r3, r2
 8010894:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010896:	4b27      	ldr	r3, [pc, #156]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 8010898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801089a:	4a26      	ldr	r2, [pc, #152]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 801089c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80108a2:	4b24      	ldr	r3, [pc, #144]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108a6:	4b24      	ldr	r3, [pc, #144]	; (8010938 <RCCEx_PLL3_Config+0x160>)
 80108a8:	4013      	ands	r3, r2
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	69d2      	ldr	r2, [r2, #28]
 80108ae:	00d2      	lsls	r2, r2, #3
 80108b0:	4920      	ldr	r1, [pc, #128]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108b2:	4313      	orrs	r3, r2
 80108b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80108b6:	4b1f      	ldr	r3, [pc, #124]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ba:	4a1e      	ldr	r2, [pc, #120]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80108c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d106      	bne.n	80108d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80108c8:	4b1a      	ldr	r3, [pc, #104]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108cc:	4a19      	ldr	r2, [pc, #100]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80108d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80108d4:	e00f      	b.n	80108f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	2b01      	cmp	r3, #1
 80108da:	d106      	bne.n	80108ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80108dc:	4b15      	ldr	r3, [pc, #84]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e0:	4a14      	ldr	r2, [pc, #80]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80108e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80108e8:	e005      	b.n	80108f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80108ea:	4b12      	ldr	r3, [pc, #72]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ee:	4a11      	ldr	r2, [pc, #68]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80108f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80108f6:	4b0f      	ldr	r3, [pc, #60]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	4a0e      	ldr	r2, [pc, #56]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 80108fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010902:	f7f4 fa59 	bl	8004db8 <HAL_GetTick>
 8010906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010908:	e008      	b.n	801091c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801090a:	f7f4 fa55 	bl	8004db8 <HAL_GetTick>
 801090e:	4602      	mov	r2, r0
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	1ad3      	subs	r3, r2, r3
 8010914:	2b02      	cmp	r3, #2
 8010916:	d901      	bls.n	801091c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010918:	2303      	movs	r3, #3
 801091a:	e006      	b.n	801092a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801091c:	4b05      	ldr	r3, [pc, #20]	; (8010934 <RCCEx_PLL3_Config+0x15c>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010924:	2b00      	cmp	r3, #0
 8010926:	d0f0      	beq.n	801090a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010928:	7bfb      	ldrb	r3, [r7, #15]
}
 801092a:	4618      	mov	r0, r3
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	58024400 	.word	0x58024400
 8010938:	ffff0007 	.word	0xffff0007

0801093c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010944:	2301      	movs	r3, #1
 8010946:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d071      	beq.n	8010a32 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010954:	b2db      	uxtb	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d106      	bne.n	8010968 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2200      	movs	r2, #0
 801095e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7f2 fbbe 	bl	80030e4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2202      	movs	r2, #2
 801096c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	68db      	ldr	r3, [r3, #12]
 8010976:	f003 0310 	and.w	r3, r3, #16
 801097a:	2b10      	cmp	r3, #16
 801097c:	d050      	beq.n	8010a20 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	22ca      	movs	r2, #202	; 0xca
 8010984:	625a      	str	r2, [r3, #36]	; 0x24
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	2253      	movs	r2, #83	; 0x53
 801098c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 fa4a 	bl	8010e28 <RTC_EnterInitMode>
 8010994:	4603      	mov	r3, r0
 8010996:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8010998:	7bfb      	ldrb	r3, [r7, #15]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d124      	bne.n	80109e8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	6899      	ldr	r1, [r3, #8]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681a      	ldr	r2, [r3, #0]
 80109a8:	4b24      	ldr	r3, [pc, #144]	; (8010a3c <HAL_RTC_Init+0x100>)
 80109aa:	400b      	ands	r3, r1
 80109ac:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	6899      	ldr	r1, [r3, #8]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	685a      	ldr	r2, [r3, #4]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	691b      	ldr	r3, [r3, #16]
 80109bc:	431a      	orrs	r2, r3
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	699b      	ldr	r3, [r3, #24]
 80109c2:	431a      	orrs	r2, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	430a      	orrs	r2, r1
 80109ca:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	0419      	lsls	r1, r3, #16
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	68da      	ldr	r2, [r3, #12]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	430a      	orrs	r2, r1
 80109dc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f000 fa56 	bl	8010e90 <RTC_ExitInitMode>
 80109e4:	4603      	mov	r3, r0
 80109e6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80109e8:	7bfb      	ldrb	r3, [r7, #15]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d113      	bne.n	8010a16 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f022 0203 	bic.w	r2, r2, #3
 80109fc:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	69da      	ldr	r2, [r3, #28]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	695b      	ldr	r3, [r3, #20]
 8010a0c:	431a      	orrs	r2, r3
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	430a      	orrs	r2, r1
 8010a14:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	22ff      	movs	r2, #255	; 0xff
 8010a1c:	625a      	str	r2, [r3, #36]	; 0x24
 8010a1e:	e001      	b.n	8010a24 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8010a20:	2300      	movs	r3, #0
 8010a22:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010a24:	7bfb      	ldrb	r3, [r7, #15]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d103      	bne.n	8010a32 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2201      	movs	r2, #1
 8010a2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8010a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3710      	adds	r7, #16
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	ff8fffbf 	.word	0xff8fffbf

08010a40 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010a40:	b590      	push	{r4, r7, lr}
 8010a42:	b087      	sub	sp, #28
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d101      	bne.n	8010a5a <HAL_RTC_SetTime+0x1a>
 8010a56:	2302      	movs	r3, #2
 8010a58:	e089      	b.n	8010b6e <HAL_RTC_SetTime+0x12e>
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2202      	movs	r2, #2
 8010a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	22ca      	movs	r2, #202	; 0xca
 8010a70:	625a      	str	r2, [r3, #36]	; 0x24
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2253      	movs	r2, #83	; 0x53
 8010a78:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010a7a:	68f8      	ldr	r0, [r7, #12]
 8010a7c:	f000 f9d4 	bl	8010e28 <RTC_EnterInitMode>
 8010a80:	4603      	mov	r3, r0
 8010a82:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010a84:	7cfb      	ldrb	r3, [r7, #19]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d161      	bne.n	8010b4e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d126      	bne.n	8010ade <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	689b      	ldr	r3, [r3, #8]
 8010a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d102      	bne.n	8010aa4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f000 fa2f 	bl	8010f0c <RTC_ByteToBcd2>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	785b      	ldrb	r3, [r3, #1]
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f000 fa28 	bl	8010f0c <RTC_ByteToBcd2>
 8010abc:	4603      	mov	r3, r0
 8010abe:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010ac0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	789b      	ldrb	r3, [r3, #2]
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f000 fa20 	bl	8010f0c <RTC_ByteToBcd2>
 8010acc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010ace:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	78db      	ldrb	r3, [r3, #3]
 8010ad6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010ad8:	4313      	orrs	r3, r2
 8010ada:	617b      	str	r3, [r7, #20]
 8010adc:	e018      	b.n	8010b10 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	689b      	ldr	r3, [r3, #8]
 8010ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d102      	bne.n	8010af2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	2200      	movs	r2, #0
 8010af0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	785b      	ldrb	r3, [r3, #1]
 8010afc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010afe:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8010b00:	68ba      	ldr	r2, [r7, #8]
 8010b02:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010b04:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	78db      	ldrb	r3, [r3, #3]
 8010b0a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010b0c:	4313      	orrs	r3, r2
 8010b0e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	6979      	ldr	r1, [r7, #20]
 8010b16:	4b18      	ldr	r3, [pc, #96]	; (8010b78 <HAL_RTC_SetTime+0x138>)
 8010b18:	400b      	ands	r3, r1
 8010b1a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	689a      	ldr	r2, [r3, #8]
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010b2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	6899      	ldr	r1, [r3, #8]
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	68da      	ldr	r2, [r3, #12]
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	431a      	orrs	r2, r3
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	430a      	orrs	r2, r1
 8010b42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010b44:	68f8      	ldr	r0, [r7, #12]
 8010b46:	f000 f9a3 	bl	8010e90 <RTC_ExitInitMode>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	22ff      	movs	r2, #255	; 0xff
 8010b54:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010b56:	7cfb      	ldrb	r3, [r7, #19]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d103      	bne.n	8010b64 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2201      	movs	r2, #1
 8010b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2200      	movs	r2, #0
 8010b68:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010b6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	371c      	adds	r7, #28
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd90      	pop	{r4, r7, pc}
 8010b76:	bf00      	nop
 8010b78:	007f7f7f 	.word	0x007f7f7f

08010b7c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b086      	sub	sp, #24
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	60f8      	str	r0, [r7, #12]
 8010b84:	60b9      	str	r1, [r7, #8]
 8010b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	691b      	ldr	r3, [r3, #16]
 8010b98:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	681a      	ldr	r2, [r3, #0]
 8010ba6:	4b22      	ldr	r3, [pc, #136]	; (8010c30 <HAL_RTC_GetTime+0xb4>)
 8010ba8:	4013      	ands	r3, r2
 8010baa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	0c1b      	lsrs	r3, r3, #16
 8010bb0:	b2db      	uxtb	r3, r3
 8010bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bb6:	b2da      	uxtb	r2, r3
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	0a1b      	lsrs	r3, r3, #8
 8010bc0:	b2db      	uxtb	r3, r3
 8010bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bc6:	b2da      	uxtb	r2, r3
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bd4:	b2da      	uxtb	r2, r3
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	0d9b      	lsrs	r3, r3, #22
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	f003 0301 	and.w	r3, r3, #1
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d11a      	bne.n	8010c26 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f000 f9a9 	bl	8010f4c <RTC_Bcd2ToByte>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	785b      	ldrb	r3, [r3, #1]
 8010c06:	4618      	mov	r0, r3
 8010c08:	f000 f9a0 	bl	8010f4c <RTC_Bcd2ToByte>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	461a      	mov	r2, r3
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	789b      	ldrb	r3, [r3, #2]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f000 f997 	bl	8010f4c <RTC_Bcd2ToByte>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	461a      	mov	r2, r3
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3718      	adds	r7, #24
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	007f7f7f 	.word	0x007f7f7f

08010c34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010c34:	b590      	push	{r4, r7, lr}
 8010c36:	b087      	sub	sp, #28
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c46:	2b01      	cmp	r3, #1
 8010c48:	d101      	bne.n	8010c4e <HAL_RTC_SetDate+0x1a>
 8010c4a:	2302      	movs	r3, #2
 8010c4c:	e073      	b.n	8010d36 <HAL_RTC_SetDate+0x102>
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2201      	movs	r2, #1
 8010c52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	2202      	movs	r2, #2
 8010c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d10e      	bne.n	8010c82 <HAL_RTC_SetDate+0x4e>
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	785b      	ldrb	r3, [r3, #1]
 8010c68:	f003 0310 	and.w	r3, r3, #16
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d008      	beq.n	8010c82 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	785b      	ldrb	r3, [r3, #1]
 8010c74:	f023 0310 	bic.w	r3, r3, #16
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	330a      	adds	r3, #10
 8010c7c:	b2da      	uxtb	r2, r3
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d11c      	bne.n	8010cc2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	78db      	ldrb	r3, [r3, #3]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f000 f93d 	bl	8010f0c <RTC_ByteToBcd2>
 8010c92:	4603      	mov	r3, r0
 8010c94:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	785b      	ldrb	r3, [r3, #1]
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f000 f936 	bl	8010f0c <RTC_ByteToBcd2>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010ca4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	789b      	ldrb	r3, [r3, #2]
 8010caa:	4618      	mov	r0, r3
 8010cac:	f000 f92e 	bl	8010f0c <RTC_ByteToBcd2>
 8010cb0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010cb2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	617b      	str	r3, [r7, #20]
 8010cc0:	e00e      	b.n	8010ce0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	78db      	ldrb	r3, [r3, #3]
 8010cc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	785b      	ldrb	r3, [r3, #1]
 8010ccc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010cce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8010cd0:	68ba      	ldr	r2, [r7, #8]
 8010cd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8010cd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010cdc:	4313      	orrs	r3, r2
 8010cde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	22ca      	movs	r2, #202	; 0xca
 8010ce6:	625a      	str	r2, [r3, #36]	; 0x24
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	2253      	movs	r2, #83	; 0x53
 8010cee:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f000 f899 	bl	8010e28 <RTC_EnterInitMode>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010cfa:	7cfb      	ldrb	r3, [r7, #19]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d10a      	bne.n	8010d16 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	6979      	ldr	r1, [r7, #20]
 8010d06:	4b0e      	ldr	r3, [pc, #56]	; (8010d40 <HAL_RTC_SetDate+0x10c>)
 8010d08:	400b      	ands	r3, r1
 8010d0a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f000 f8bf 	bl	8010e90 <RTC_ExitInitMode>
 8010d12:	4603      	mov	r3, r0
 8010d14:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	22ff      	movs	r2, #255	; 0xff
 8010d1c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010d1e:	7cfb      	ldrb	r3, [r7, #19]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d103      	bne.n	8010d2c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	2201      	movs	r2, #1
 8010d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010d34:	7cfb      	ldrb	r3, [r7, #19]


}
 8010d36:	4618      	mov	r0, r3
 8010d38:	371c      	adds	r7, #28
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd90      	pop	{r4, r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	00ffff3f 	.word	0x00ffff3f

08010d44 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b086      	sub	sp, #24
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	685a      	ldr	r2, [r3, #4]
 8010d56:	4b21      	ldr	r3, [pc, #132]	; (8010ddc <HAL_RTC_GetDate+0x98>)
 8010d58:	4013      	ands	r3, r2
 8010d5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	0c1b      	lsrs	r3, r3, #16
 8010d60:	b2da      	uxtb	r2, r3
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	0a1b      	lsrs	r3, r3, #8
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	f003 031f 	and.w	r3, r3, #31
 8010d70:	b2da      	uxtb	r2, r3
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	b2db      	uxtb	r3, r3
 8010d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d7e:	b2da      	uxtb	r2, r3
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	0b5b      	lsrs	r3, r3, #13
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	f003 0307 	and.w	r3, r3, #7
 8010d8e:	b2da      	uxtb	r2, r3
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d11a      	bne.n	8010dd0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	78db      	ldrb	r3, [r3, #3]
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f000 f8d4 	bl	8010f4c <RTC_Bcd2ToByte>
 8010da4:	4603      	mov	r3, r0
 8010da6:	461a      	mov	r2, r3
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	785b      	ldrb	r3, [r3, #1]
 8010db0:	4618      	mov	r0, r3
 8010db2:	f000 f8cb 	bl	8010f4c <RTC_Bcd2ToByte>
 8010db6:	4603      	mov	r3, r0
 8010db8:	461a      	mov	r2, r3
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	789b      	ldrb	r3, [r3, #2]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f000 f8c2 	bl	8010f4c <RTC_Bcd2ToByte>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	461a      	mov	r2, r3
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8010dd0:	2300      	movs	r3, #0
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3718      	adds	r7, #24
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	00ffff3f 	.word	0x00ffff3f

08010de0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b084      	sub	sp, #16
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	4a0d      	ldr	r2, [pc, #52]	; (8010e24 <HAL_RTC_WaitForSynchro+0x44>)
 8010dee:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8010df0:	f7f3 ffe2 	bl	8004db8 <HAL_GetTick>
 8010df4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010df6:	e009      	b.n	8010e0c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010df8:	f7f3 ffde 	bl	8004db8 <HAL_GetTick>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	1ad3      	subs	r3, r2, r3
 8010e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010e06:	d901      	bls.n	8010e0c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8010e08:	2303      	movs	r3, #3
 8010e0a:	e007      	b.n	8010e1c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	f003 0320 	and.w	r3, r3, #32
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d0ee      	beq.n	8010df8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8010e1a:	2300      	movs	r3, #0
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3710      	adds	r7, #16
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}
 8010e24:	0003ff5f 	.word	0x0003ff5f

08010e28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b084      	sub	sp, #16
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d120      	bne.n	8010e84 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8010e4c:	f7f3 ffb4 	bl	8004db8 <HAL_GetTick>
 8010e50:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010e52:	e00d      	b.n	8010e70 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010e54:	f7f3 ffb0 	bl	8004db8 <HAL_GetTick>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	1ad3      	subs	r3, r2, r3
 8010e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010e62:	d905      	bls.n	8010e70 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8010e64:	2303      	movs	r3, #3
 8010e66:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2203      	movs	r2, #3
 8010e6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d102      	bne.n	8010e84 <RTC_EnterInitMode+0x5c>
 8010e7e:	7bfb      	ldrb	r3, [r7, #15]
 8010e80:	2b03      	cmp	r3, #3
 8010e82:	d1e7      	bne.n	8010e54 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8010e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3710      	adds	r7, #16
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
	...

08010e90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8010e9c:	4b1a      	ldr	r3, [pc, #104]	; (8010f08 <RTC_ExitInitMode+0x78>)
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	4a19      	ldr	r2, [pc, #100]	; (8010f08 <RTC_ExitInitMode+0x78>)
 8010ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ea6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010ea8:	4b17      	ldr	r3, [pc, #92]	; (8010f08 <RTC_ExitInitMode+0x78>)
 8010eaa:	689b      	ldr	r3, [r3, #8]
 8010eac:	f003 0320 	and.w	r3, r3, #32
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d10c      	bne.n	8010ece <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f7ff ff93 	bl	8010de0 <HAL_RTC_WaitForSynchro>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d01e      	beq.n	8010efe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2203      	movs	r2, #3
 8010ec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8010ec8:	2303      	movs	r3, #3
 8010eca:	73fb      	strb	r3, [r7, #15]
 8010ecc:	e017      	b.n	8010efe <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010ece:	4b0e      	ldr	r3, [pc, #56]	; (8010f08 <RTC_ExitInitMode+0x78>)
 8010ed0:	689b      	ldr	r3, [r3, #8]
 8010ed2:	4a0d      	ldr	r2, [pc, #52]	; (8010f08 <RTC_ExitInitMode+0x78>)
 8010ed4:	f023 0320 	bic.w	r3, r3, #32
 8010ed8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7ff ff80 	bl	8010de0 <HAL_RTC_WaitForSynchro>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d005      	beq.n	8010ef2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2203      	movs	r2, #3
 8010eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8010eee:	2303      	movs	r3, #3
 8010ef0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010ef2:	4b05      	ldr	r3, [pc, #20]	; (8010f08 <RTC_ExitInitMode+0x78>)
 8010ef4:	689b      	ldr	r3, [r3, #8]
 8010ef6:	4a04      	ldr	r2, [pc, #16]	; (8010f08 <RTC_ExitInitMode+0x78>)
 8010ef8:	f043 0320 	orr.w	r3, r3, #32
 8010efc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8010efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3710      	adds	r7, #16
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}
 8010f08:	58004000 	.word	0x58004000

08010f0c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b085      	sub	sp, #20
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	4603      	mov	r3, r0
 8010f14:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8010f16:	2300      	movs	r3, #0
 8010f18:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8010f1a:	79fb      	ldrb	r3, [r7, #7]
 8010f1c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8010f1e:	e005      	b.n	8010f2c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	3301      	adds	r3, #1
 8010f24:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8010f26:	7afb      	ldrb	r3, [r7, #11]
 8010f28:	3b0a      	subs	r3, #10
 8010f2a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8010f2c:	7afb      	ldrb	r3, [r7, #11]
 8010f2e:	2b09      	cmp	r3, #9
 8010f30:	d8f6      	bhi.n	8010f20 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	011b      	lsls	r3, r3, #4
 8010f38:	b2da      	uxtb	r2, r3
 8010f3a:	7afb      	ldrb	r3, [r7, #11]
 8010f3c:	4313      	orrs	r3, r2
 8010f3e:	b2db      	uxtb	r3, r3
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	3714      	adds	r7, #20
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b085      	sub	sp, #20
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	4603      	mov	r3, r0
 8010f54:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8010f56:	79fb      	ldrb	r3, [r7, #7]
 8010f58:	091b      	lsrs	r3, r3, #4
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	0092      	lsls	r2, r2, #2
 8010f60:	4413      	add	r3, r2
 8010f62:	005b      	lsls	r3, r3, #1
 8010f64:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8010f66:	79fb      	ldrb	r3, [r7, #7]
 8010f68:	f003 030f 	and.w	r3, r3, #15
 8010f6c:	b2da      	uxtb	r2, r3
 8010f6e:	7bfb      	ldrb	r3, [r7, #15]
 8010f70:	4413      	add	r3, r2
 8010f72:	b2db      	uxtb	r3, r3
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3714      	adds	r7, #20
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7e:	4770      	bx	lr

08010f80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d101      	bne.n	8010f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010f8e:	2301      	movs	r3, #1
 8010f90:	e10f      	b.n	80111b2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2200      	movs	r2, #0
 8010f96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	4a87      	ldr	r2, [pc, #540]	; (80111bc <HAL_SPI_Init+0x23c>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d00f      	beq.n	8010fc2 <HAL_SPI_Init+0x42>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4a86      	ldr	r2, [pc, #536]	; (80111c0 <HAL_SPI_Init+0x240>)
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d00a      	beq.n	8010fc2 <HAL_SPI_Init+0x42>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4a84      	ldr	r2, [pc, #528]	; (80111c4 <HAL_SPI_Init+0x244>)
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d005      	beq.n	8010fc2 <HAL_SPI_Init+0x42>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	2b0f      	cmp	r3, #15
 8010fbc:	d901      	bls.n	8010fc2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e0f7      	b.n	80111b2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f000 fd60 	bl	8011a88 <SPI_GetPacketSize>
 8010fc8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	4a7b      	ldr	r2, [pc, #492]	; (80111bc <HAL_SPI_Init+0x23c>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d00c      	beq.n	8010fee <HAL_SPI_Init+0x6e>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	4a79      	ldr	r2, [pc, #484]	; (80111c0 <HAL_SPI_Init+0x240>)
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d007      	beq.n	8010fee <HAL_SPI_Init+0x6e>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	4a78      	ldr	r2, [pc, #480]	; (80111c4 <HAL_SPI_Init+0x244>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d002      	beq.n	8010fee <HAL_SPI_Init+0x6e>
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2b08      	cmp	r3, #8
 8010fec:	d811      	bhi.n	8011012 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010ff2:	4a72      	ldr	r2, [pc, #456]	; (80111bc <HAL_SPI_Init+0x23c>)
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d009      	beq.n	801100c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	4a70      	ldr	r2, [pc, #448]	; (80111c0 <HAL_SPI_Init+0x240>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d004      	beq.n	801100c <HAL_SPI_Init+0x8c>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	4a6f      	ldr	r2, [pc, #444]	; (80111c4 <HAL_SPI_Init+0x244>)
 8011008:	4293      	cmp	r3, r2
 801100a:	d104      	bne.n	8011016 <HAL_SPI_Init+0x96>
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2b10      	cmp	r3, #16
 8011010:	d901      	bls.n	8011016 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011012:	2301      	movs	r3, #1
 8011014:	e0cd      	b.n	80111b2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801101c:	b2db      	uxtb	r3, r3
 801101e:	2b00      	cmp	r3, #0
 8011020:	d106      	bne.n	8011030 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2200      	movs	r2, #0
 8011026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f7f2 fade 	bl	80035ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2202      	movs	r2, #2
 8011034:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	681a      	ldr	r2, [r3, #0]
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f022 0201 	bic.w	r2, r2, #1
 8011046:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	689b      	ldr	r3, [r3, #8]
 801104e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011052:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	699b      	ldr	r3, [r3, #24]
 8011058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801105c:	d119      	bne.n	8011092 <HAL_SPI_Init+0x112>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011066:	d103      	bne.n	8011070 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801106c:	2b00      	cmp	r3, #0
 801106e:	d008      	beq.n	8011082 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011074:	2b00      	cmp	r3, #0
 8011076:	d10c      	bne.n	8011092 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801107c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011080:	d107      	bne.n	8011092 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	681a      	ldr	r2, [r3, #0]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011090:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801109a:	2b00      	cmp	r3, #0
 801109c:	d00f      	beq.n	80110be <HAL_SPI_Init+0x13e>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	2b06      	cmp	r3, #6
 80110a4:	d90b      	bls.n	80110be <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	430a      	orrs	r2, r1
 80110ba:	601a      	str	r2, [r3, #0]
 80110bc:	e007      	b.n	80110ce <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	681a      	ldr	r2, [r3, #0]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80110cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	69da      	ldr	r2, [r3, #28]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110d6:	431a      	orrs	r2, r3
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	431a      	orrs	r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110e0:	ea42 0103 	orr.w	r1, r2, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	68da      	ldr	r2, [r3, #12]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	430a      	orrs	r2, r1
 80110ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110f8:	431a      	orrs	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110fe:	431a      	orrs	r2, r3
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	699b      	ldr	r3, [r3, #24]
 8011104:	431a      	orrs	r2, r3
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	691b      	ldr	r3, [r3, #16]
 801110a:	431a      	orrs	r2, r3
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	695b      	ldr	r3, [r3, #20]
 8011110:	431a      	orrs	r2, r3
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6a1b      	ldr	r3, [r3, #32]
 8011116:	431a      	orrs	r2, r3
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	431a      	orrs	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011122:	431a      	orrs	r2, r3
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	689b      	ldr	r3, [r3, #8]
 8011128:	431a      	orrs	r2, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801112e:	ea42 0103 	orr.w	r1, r2, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	430a      	orrs	r2, r1
 801113c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d113      	bne.n	801116e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	689b      	ldr	r3, [r3, #8]
 801114c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011158:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	689b      	ldr	r3, [r3, #8]
 8011160:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801116c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f022 0201 	bic.w	r2, r2, #1
 801117c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011186:	2b00      	cmp	r3, #0
 8011188:	d00a      	beq.n	80111a0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	430a      	orrs	r2, r1
 801119e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2200      	movs	r2, #0
 80111a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2201      	movs	r2, #1
 80111ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80111b0:	2300      	movs	r3, #0
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3710      	adds	r7, #16
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
 80111ba:	bf00      	nop
 80111bc:	40013000 	.word	0x40013000
 80111c0:	40003800 	.word	0x40003800
 80111c4:	40003c00 	.word	0x40003c00

080111c8 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b084      	sub	sp, #16
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	60f8      	str	r0, [r7, #12]
 80111d0:	60b9      	str	r1, [r7, #8]
 80111d2:	4613      	mov	r3, r2
 80111d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80111dc:	b2db      	uxtb	r3, r3
 80111de:	2b01      	cmp	r3, #1
 80111e0:	d005      	beq.n	80111ee <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2200      	movs	r2, #0
 80111e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 80111ea:	2302      	movs	r3, #2
 80111ec:	e127      	b.n	801143e <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <HAL_SPI_Receive_DMA+0x32>
 80111f4:	88fb      	ldrh	r3, [r7, #6]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d105      	bne.n	8011206 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2200      	movs	r2, #0
 80111fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011202:	2301      	movs	r3, #1
 8011204:	e11b      	b.n	801143e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801120c:	2b01      	cmp	r3, #1
 801120e:	d101      	bne.n	8011214 <HAL_SPI_Receive_DMA+0x4c>
 8011210:	2302      	movs	r3, #2
 8011212:	e114      	b.n	801143e <HAL_SPI_Receive_DMA+0x276>
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	2201      	movs	r2, #1
 8011218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2204      	movs	r2, #4
 8011220:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2200      	movs	r2, #0
 8011228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	68ba      	ldr	r2, [r7, #8]
 8011230:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	88fa      	ldrh	r2, [r7, #6]
 8011236:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	88fa      	ldrh	r2, [r7, #6]
 801123e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2200      	movs	r2, #0
 8011246:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	2200      	movs	r2, #0
 801124c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2200      	movs	r2, #0
 8011252:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2200      	movs	r2, #0
 801125a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	689b      	ldr	r3, [r3, #8]
 8011262:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011266:	d108      	bne.n	801127a <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011276:	601a      	str	r2, [r3, #0]
 8011278:	e009      	b.n	801128e <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801128c:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	68db      	ldr	r3, [r3, #12]
 8011292:	2b0f      	cmp	r3, #15
 8011294:	d905      	bls.n	80112a2 <HAL_SPI_Receive_DMA+0xda>
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801129a:	699b      	ldr	r3, [r3, #24]
 801129c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80112a0:	d10f      	bne.n	80112c2 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80112a6:	2b07      	cmp	r3, #7
 80112a8:	d911      	bls.n	80112ce <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112ae:	699b      	ldr	r3, [r3, #24]
 80112b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80112b4:	d00b      	beq.n	80112ce <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112ba:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80112bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80112c0:	d005      	beq.n	80112ce <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2200      	movs	r2, #0
 80112c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80112ca:	2301      	movs	r3, #1
 80112cc:	e0b7      	b.n	801143e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	689a      	ldr	r2, [r3, #8]
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80112dc:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	2b07      	cmp	r3, #7
 80112e4:	d820      	bhi.n	8011328 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112ea:	699b      	ldr	r3, [r3, #24]
 80112ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80112f0:	d109      	bne.n	8011306 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	3301      	adds	r3, #1
 80112fc:	105b      	asrs	r3, r3, #1
 80112fe:	b29a      	uxth	r2, r3
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801130a:	699b      	ldr	r3, [r3, #24]
 801130c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011310:	d11e      	bne.n	8011350 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011318:	b29b      	uxth	r3, r3
 801131a:	3303      	adds	r3, #3
 801131c:	109b      	asrs	r3, r3, #2
 801131e:	b29a      	uxth	r2, r3
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011326:	e013      	b.n	8011350 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	2b0f      	cmp	r3, #15
 801132e:	d80f      	bhi.n	8011350 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011334:	699b      	ldr	r3, [r3, #24]
 8011336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801133a:	d109      	bne.n	8011350 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011342:	b29b      	uxth	r3, r3
 8011344:	3301      	adds	r3, #1
 8011346:	105b      	asrs	r3, r3, #1
 8011348:	b29a      	uxth	r2, r3
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011354:	4a3c      	ldr	r2, [pc, #240]	; (8011448 <HAL_SPI_Receive_DMA+0x280>)
 8011356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801135c:	4a3b      	ldr	r2, [pc, #236]	; (801144c <HAL_SPI_Receive_DMA+0x284>)
 801135e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011364:	4a3a      	ldr	r2, [pc, #232]	; (8011450 <HAL_SPI_Receive_DMA+0x288>)
 8011366:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801136c:	2200      	movs	r2, #0
 801136e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	3330      	adds	r3, #48	; 0x30
 801137a:	4619      	mov	r1, r3
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011380:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011388:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801138a:	f7f6 fa11 	bl	80077b0 <HAL_DMA_Start_IT>
 801138e:	4603      	mov	r3, r0
 8011390:	2b00      	cmp	r3, #0
 8011392:	d011      	beq.n	80113b8 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801139a:	f043 0210 	orr.w	r2, r3, #16
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2201      	movs	r2, #1
 80113a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 80113b4:	2301      	movs	r3, #1
 80113b6:	e042      	b.n	801143e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113bc:	69db      	ldr	r3, [r3, #28]
 80113be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113c2:	d108      	bne.n	80113d6 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	6859      	ldr	r1, [r3, #4]
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	4b21      	ldr	r3, [pc, #132]	; (8011454 <HAL_SPI_Receive_DMA+0x28c>)
 80113d0:	400b      	ands	r3, r1
 80113d2:	6053      	str	r3, [r2, #4]
 80113d4:	e009      	b.n	80113ea <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	685a      	ldr	r2, [r3, #4]
 80113dc:	4b1d      	ldr	r3, [pc, #116]	; (8011454 <HAL_SPI_Receive_DMA+0x28c>)
 80113de:	4013      	ands	r3, r2
 80113e0:	88f9      	ldrh	r1, [r7, #6]
 80113e2:	68fa      	ldr	r2, [r7, #12]
 80113e4:	6812      	ldr	r2, [r2, #0]
 80113e6:	430b      	orrs	r3, r1
 80113e8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	689a      	ldr	r2, [r3, #8]
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80113f8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	691a      	ldr	r2, [r3, #16]
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8011408:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f042 0201 	orr.w	r2, r2, #1
 8011418:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011422:	d107      	bne.n	8011434 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	681a      	ldr	r2, [r3, #0]
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011432:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2200      	movs	r2, #0
 8011438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801143c:	2300      	movs	r3, #0
}
 801143e:	4618      	mov	r0, r3
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	080118b3 	.word	0x080118b3
 801144c:	0801186d 	.word	0x0801186d
 8011450:	080118cf 	.word	0x080118cf
 8011454:	ffff0000 	.word	0xffff0000

08011458 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b08a      	sub	sp, #40	; 0x28
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	691b      	ldr	r3, [r3, #16]
 8011466:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	695b      	ldr	r3, [r3, #20]
 801146e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011470:	6a3a      	ldr	r2, [r7, #32]
 8011472:	69fb      	ldr	r3, [r7, #28]
 8011474:	4013      	ands	r3, r2
 8011476:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	689b      	ldr	r3, [r3, #8]
 801147e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011480:	2300      	movs	r3, #0
 8011482:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801148a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	3330      	adds	r3, #48	; 0x30
 8011492:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801149a:	2b00      	cmp	r3, #0
 801149c:	d010      	beq.n	80114c0 <HAL_SPI_IRQHandler+0x68>
 801149e:	6a3b      	ldr	r3, [r7, #32]
 80114a0:	f003 0308 	and.w	r3, r3, #8
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d00b      	beq.n	80114c0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	699a      	ldr	r2, [r3, #24]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80114b6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f000 f9cd 	bl	8011858 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80114be:	e192      	b.n	80117e6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80114c0:	69bb      	ldr	r3, [r7, #24]
 80114c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d113      	bne.n	80114f2 <HAL_SPI_IRQHandler+0x9a>
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	f003 0320 	and.w	r3, r3, #32
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d10e      	bne.n	80114f2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d009      	beq.n	80114f2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	4798      	blx	r3
    handled = 1UL;
 80114ee:	2301      	movs	r3, #1
 80114f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d10f      	bne.n	801151c <HAL_SPI_IRQHandler+0xc4>
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	f003 0301 	and.w	r3, r3, #1
 8011502:	2b00      	cmp	r3, #0
 8011504:	d00a      	beq.n	801151c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801150c:	2b00      	cmp	r3, #0
 801150e:	d105      	bne.n	801151c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	4798      	blx	r3
    handled = 1UL;
 8011518:	2301      	movs	r3, #1
 801151a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801151c:	69bb      	ldr	r3, [r7, #24]
 801151e:	f003 0320 	and.w	r3, r3, #32
 8011522:	2b00      	cmp	r3, #0
 8011524:	d10f      	bne.n	8011546 <HAL_SPI_IRQHandler+0xee>
 8011526:	69bb      	ldr	r3, [r7, #24]
 8011528:	f003 0302 	and.w	r3, r3, #2
 801152c:	2b00      	cmp	r3, #0
 801152e:	d00a      	beq.n	8011546 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011536:	2b00      	cmp	r3, #0
 8011538:	d105      	bne.n	8011546 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	4798      	blx	r3
    handled = 1UL;
 8011542:	2301      	movs	r3, #1
 8011544:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8011546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011548:	2b00      	cmp	r3, #0
 801154a:	f040 8147 	bne.w	80117dc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801154e:	69bb      	ldr	r3, [r7, #24]
 8011550:	f003 0308 	and.w	r3, r3, #8
 8011554:	2b00      	cmp	r3, #0
 8011556:	f000 808b 	beq.w	8011670 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	699a      	ldr	r2, [r3, #24]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	f042 0208 	orr.w	r2, r2, #8
 8011568:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	699a      	ldr	r2, [r3, #24]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	f042 0210 	orr.w	r2, r2, #16
 8011578:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	699a      	ldr	r2, [r3, #24]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011588:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	691a      	ldr	r2, [r3, #16]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	f022 0208 	bic.w	r2, r2, #8
 8011598:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	689b      	ldr	r3, [r3, #8]
 80115a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d13d      	bne.n	8011624 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80115a8:	e036      	b.n	8011618 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	68db      	ldr	r3, [r3, #12]
 80115ae:	2b0f      	cmp	r3, #15
 80115b0:	d90b      	bls.n	80115ca <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80115bc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115c2:	1d1a      	adds	r2, r3, #4
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	665a      	str	r2, [r3, #100]	; 0x64
 80115c8:	e01d      	b.n	8011606 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	68db      	ldr	r3, [r3, #12]
 80115ce:	2b07      	cmp	r3, #7
 80115d0:	d90b      	bls.n	80115ea <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115d6:	68fa      	ldr	r2, [r7, #12]
 80115d8:	8812      	ldrh	r2, [r2, #0]
 80115da:	b292      	uxth	r2, r2
 80115dc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115e2:	1c9a      	adds	r2, r3, #2
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	665a      	str	r2, [r3, #100]	; 0x64
 80115e8:	e00d      	b.n	8011606 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115f6:	7812      	ldrb	r2, [r2, #0]
 80115f8:	b2d2      	uxtb	r2, r2
 80115fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011600:	1c5a      	adds	r2, r3, #1
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801160c:	b29b      	uxth	r3, r3
 801160e:	3b01      	subs	r3, #1
 8011610:	b29a      	uxth	r2, r3
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801161e:	b29b      	uxth	r3, r3
 8011620:	2b00      	cmp	r3, #0
 8011622:	d1c2      	bne.n	80115aa <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 f98f 	bl	8011948 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2201      	movs	r2, #1
 801162e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011638:	2b00      	cmp	r3, #0
 801163a:	d003      	beq.n	8011644 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f000 f901 	bl	8011844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011642:	e0d0      	b.n	80117e6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011644:	7cfb      	ldrb	r3, [r7, #19]
 8011646:	2b05      	cmp	r3, #5
 8011648:	d103      	bne.n	8011652 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 f8e6 	bl	801181c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011650:	e0c6      	b.n	80117e0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8011652:	7cfb      	ldrb	r3, [r7, #19]
 8011654:	2b04      	cmp	r3, #4
 8011656:	d103      	bne.n	8011660 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8011658:	6878      	ldr	r0, [r7, #4]
 801165a:	f000 f8d5 	bl	8011808 <HAL_SPI_RxCpltCallback>
    return;
 801165e:	e0bf      	b.n	80117e0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011660:	7cfb      	ldrb	r3, [r7, #19]
 8011662:	2b03      	cmp	r3, #3
 8011664:	f040 80bc 	bne.w	80117e0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f000 f8c3 	bl	80117f4 <HAL_SPI_TxCpltCallback>
    return;
 801166e:	e0b7      	b.n	80117e0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011670:	69bb      	ldr	r3, [r7, #24]
 8011672:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8011676:	2b00      	cmp	r3, #0
 8011678:	f000 80b5 	beq.w	80117e6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801167c:	69bb      	ldr	r3, [r7, #24]
 801167e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011682:	2b00      	cmp	r3, #0
 8011684:	d00f      	beq.n	80116a6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801168c:	f043 0204 	orr.w	r2, r3, #4
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	699a      	ldr	r2, [r3, #24]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80116a4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d00f      	beq.n	80116d0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116b6:	f043 0201 	orr.w	r2, r3, #1
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	699a      	ldr	r2, [r3, #24]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80116ce:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d00f      	beq.n	80116fa <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116e0:	f043 0208 	orr.w	r2, r3, #8
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	699a      	ldr	r2, [r3, #24]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80116f8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	f003 0320 	and.w	r3, r3, #32
 8011700:	2b00      	cmp	r3, #0
 8011702:	d00f      	beq.n	8011724 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801170a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	699a      	ldr	r2, [r3, #24]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	f042 0220 	orr.w	r2, r2, #32
 8011722:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801172a:	2b00      	cmp	r3, #0
 801172c:	d05a      	beq.n	80117e4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	681a      	ldr	r2, [r3, #0]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	f022 0201 	bic.w	r2, r2, #1
 801173c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	6919      	ldr	r1, [r3, #16]
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	4b28      	ldr	r3, [pc, #160]	; (80117ec <HAL_SPI_IRQHandler+0x394>)
 801174a:	400b      	ands	r3, r1
 801174c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011754:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011758:	d138      	bne.n	80117cc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	689a      	ldr	r2, [r3, #8]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011768:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801176e:	2b00      	cmp	r3, #0
 8011770:	d013      	beq.n	801179a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011776:	4a1e      	ldr	r2, [pc, #120]	; (80117f0 <HAL_SPI_IRQHandler+0x398>)
 8011778:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801177e:	4618      	mov	r0, r3
 8011780:	f7f6 fd9e 	bl	80082c0 <HAL_DMA_Abort_IT>
 8011784:	4603      	mov	r3, r0
 8011786:	2b00      	cmp	r3, #0
 8011788:	d007      	beq.n	801179a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d020      	beq.n	80117e4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117a6:	4a12      	ldr	r2, [pc, #72]	; (80117f0 <HAL_SPI_IRQHandler+0x398>)
 80117a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7f6 fd86 	bl	80082c0 <HAL_DMA_Abort_IT>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d014      	beq.n	80117e4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80117c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80117ca:	e00b      	b.n	80117e4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2201      	movs	r2, #1
 80117d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f000 f835 	bl	8011844 <HAL_SPI_ErrorCallback>
    return;
 80117da:	e003      	b.n	80117e4 <HAL_SPI_IRQHandler+0x38c>
    return;
 80117dc:	bf00      	nop
 80117de:	e002      	b.n	80117e6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80117e0:	bf00      	nop
 80117e2:	e000      	b.n	80117e6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80117e4:	bf00      	nop
  }
}
 80117e6:	3728      	adds	r7, #40	; 0x28
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	fffffc94 	.word	0xfffffc94
 80117f0:	08011915 	.word	0x08011915

080117f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80117fc:	bf00      	nop
 80117fe:	370c      	adds	r7, #12
 8011800:	46bd      	mov	sp, r7
 8011802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011806:	4770      	bx	lr

08011808 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011808:	b480      	push	{r7}
 801180a:	b083      	sub	sp, #12
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8011810:	bf00      	nop
 8011812:	370c      	adds	r7, #12
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr

0801181c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801181c:	b480      	push	{r7}
 801181e:	b083      	sub	sp, #12
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011824:	bf00      	nop
 8011826:	370c      	adds	r7, #12
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8011838:	bf00      	nop
 801183a:	370c      	adds	r7, #12
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr

08011844 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011844:	b480      	push	{r7}
 8011846:	b083      	sub	sp, #12
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801184c:	bf00      	nop
 801184e:	370c      	adds	r7, #12
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr

08011858 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8011860:	bf00      	nop
 8011862:	370c      	adds	r7, #12
 8011864:	46bd      	mov	sp, r7
 8011866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186a:	4770      	bx	lr

0801186c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011878:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011880:	b2db      	uxtb	r3, r3
 8011882:	2b07      	cmp	r3, #7
 8011884:	d011      	beq.n	80118aa <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801188a:	69db      	ldr	r3, [r3, #28]
 801188c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011890:	d103      	bne.n	801189a <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8011892:	68f8      	ldr	r0, [r7, #12]
 8011894:	f7ff ffb8 	bl	8011808 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8011898:	e007      	b.n	80118aa <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	691a      	ldr	r2, [r3, #16]
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	f042 0208 	orr.w	r2, r2, #8
 80118a8:	611a      	str	r2, [r3, #16]
}
 80118aa:	bf00      	nop
 80118ac:	3710      	adds	r7, #16
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}

080118b2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80118b2:	b580      	push	{r7, lr}
 80118b4:	b084      	sub	sp, #16
 80118b6:	af00      	add	r7, sp, #0
 80118b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118be:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	f7ff ffb5 	bl	8011830 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80118c6:	bf00      	nop
 80118c8:	3710      	adds	r7, #16
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}

080118ce <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80118ce:	b580      	push	{r7, lr}
 80118d0:	b084      	sub	sp, #16
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118da:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f7f7 fe6d 	bl	80095bc <HAL_DMA_GetError>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b02      	cmp	r3, #2
 80118e6:	d011      	beq.n	801190c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80118e8:	68f8      	ldr	r0, [r7, #12]
 80118ea:	f000 f82d 	bl	8011948 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80118f4:	f043 0210 	orr.w	r2, r3, #16
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	2201      	movs	r2, #1
 8011902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8011906:	68f8      	ldr	r0, [r7, #12]
 8011908:	f7ff ff9c 	bl	8011844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 801190c:	bf00      	nop
 801190e:	3710      	adds	r7, #16
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011920:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2200      	movs	r2, #0
 8011926:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	2200      	movs	r2, #0
 801192e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	2201      	movs	r2, #1
 8011936:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801193a:	68f8      	ldr	r0, [r7, #12]
 801193c:	f7ff ff82 	bl	8011844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011940:	bf00      	nop
 8011942:	3710      	adds	r7, #16
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}

08011948 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011948:	b480      	push	{r7}
 801194a:	b085      	sub	sp, #20
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	695b      	ldr	r3, [r3, #20]
 8011956:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	699a      	ldr	r2, [r3, #24]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f042 0208 	orr.w	r2, r2, #8
 8011966:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	699a      	ldr	r2, [r3, #24]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	f042 0210 	orr.w	r2, r2, #16
 8011976:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	f022 0201 	bic.w	r2, r2, #1
 8011986:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	6919      	ldr	r1, [r3, #16]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	4b3c      	ldr	r3, [pc, #240]	; (8011a84 <SPI_CloseTransfer+0x13c>)
 8011994:	400b      	ands	r3, r1
 8011996:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	689a      	ldr	r2, [r3, #8]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80119a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	2b04      	cmp	r3, #4
 80119b2:	d014      	beq.n	80119de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	f003 0320 	and.w	r3, r3, #32
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d00f      	beq.n	80119de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	699a      	ldr	r2, [r3, #24]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f042 0220 	orr.w	r2, r2, #32
 80119dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80119e4:	b2db      	uxtb	r3, r3
 80119e6:	2b03      	cmp	r3, #3
 80119e8:	d014      	beq.n	8011a14 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d00f      	beq.n	8011a14 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119fa:	f043 0204 	orr.w	r2, r3, #4
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	699a      	ldr	r2, [r3, #24]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011a12:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d00f      	beq.n	8011a3e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a24:	f043 0201 	orr.w	r2, r3, #1
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	699a      	ldr	r2, [r3, #24]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011a3c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00f      	beq.n	8011a68 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a4e:	f043 0208 	orr.w	r2, r3, #8
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	699a      	ldr	r2, [r3, #24]
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011a66:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2200      	movs	r2, #0
 8011a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8011a78:	bf00      	nop
 8011a7a:	3714      	adds	r7, #20
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr
 8011a84:	fffffc90 	.word	0xfffffc90

08011a88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b085      	sub	sp, #20
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a94:	095b      	lsrs	r3, r3, #5
 8011a96:	3301      	adds	r3, #1
 8011a98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	3307      	adds	r3, #7
 8011aa6:	08db      	lsrs	r3, r3, #3
 8011aa8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	68fa      	ldr	r2, [r7, #12]
 8011aae:	fb02 f303 	mul.w	r3, r2, r3
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3714      	adds	r7, #20
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr

08011abe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011abe:	b580      	push	{r7, lr}
 8011ac0:	b082      	sub	sp, #8
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d101      	bne.n	8011ad0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011acc:	2301      	movs	r3, #1
 8011ace:	e049      	b.n	8011b64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d106      	bne.n	8011aea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f7f2 fa8d 	bl	8004004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2202      	movs	r2, #2
 8011aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	3304      	adds	r3, #4
 8011afa:	4619      	mov	r1, r3
 8011afc:	4610      	mov	r0, r2
 8011afe:	f000 fe7d 	bl	80127fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2201      	movs	r2, #1
 8011b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2201      	movs	r2, #1
 8011b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2201      	movs	r2, #1
 8011b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2201      	movs	r2, #1
 8011b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2201      	movs	r2, #1
 8011b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2201      	movs	r2, #1
 8011b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2201      	movs	r2, #1
 8011b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2201      	movs	r2, #1
 8011b56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2201      	movs	r2, #1
 8011b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011b62:	2300      	movs	r3, #0
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b085      	sub	sp, #20
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b7a:	b2db      	uxtb	r3, r3
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	d001      	beq.n	8011b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011b80:	2301      	movs	r3, #1
 8011b82:	e054      	b.n	8011c2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2202      	movs	r2, #2
 8011b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	68da      	ldr	r2, [r3, #12]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	f042 0201 	orr.w	r2, r2, #1
 8011b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4a26      	ldr	r2, [pc, #152]	; (8011c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d022      	beq.n	8011bec <HAL_TIM_Base_Start_IT+0x80>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011bae:	d01d      	beq.n	8011bec <HAL_TIM_Base_Start_IT+0x80>
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	4a22      	ldr	r2, [pc, #136]	; (8011c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	d018      	beq.n	8011bec <HAL_TIM_Base_Start_IT+0x80>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	4a21      	ldr	r2, [pc, #132]	; (8011c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8011bc0:	4293      	cmp	r3, r2
 8011bc2:	d013      	beq.n	8011bec <HAL_TIM_Base_Start_IT+0x80>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	4a1f      	ldr	r2, [pc, #124]	; (8011c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d00e      	beq.n	8011bec <HAL_TIM_Base_Start_IT+0x80>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	4a1e      	ldr	r2, [pc, #120]	; (8011c4c <HAL_TIM_Base_Start_IT+0xe0>)
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	d009      	beq.n	8011bec <HAL_TIM_Base_Start_IT+0x80>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	4a1c      	ldr	r2, [pc, #112]	; (8011c50 <HAL_TIM_Base_Start_IT+0xe4>)
 8011bde:	4293      	cmp	r3, r2
 8011be0:	d004      	beq.n	8011bec <HAL_TIM_Base_Start_IT+0x80>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	4a1b      	ldr	r2, [pc, #108]	; (8011c54 <HAL_TIM_Base_Start_IT+0xe8>)
 8011be8:	4293      	cmp	r3, r2
 8011bea:	d115      	bne.n	8011c18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	689a      	ldr	r2, [r3, #8]
 8011bf2:	4b19      	ldr	r3, [pc, #100]	; (8011c58 <HAL_TIM_Base_Start_IT+0xec>)
 8011bf4:	4013      	ands	r3, r2
 8011bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2b06      	cmp	r3, #6
 8011bfc:	d015      	beq.n	8011c2a <HAL_TIM_Base_Start_IT+0xbe>
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c04:	d011      	beq.n	8011c2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	681a      	ldr	r2, [r3, #0]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	f042 0201 	orr.w	r2, r2, #1
 8011c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c16:	e008      	b.n	8011c2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f042 0201 	orr.w	r2, r2, #1
 8011c26:	601a      	str	r2, [r3, #0]
 8011c28:	e000      	b.n	8011c2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011c2c:	2300      	movs	r3, #0
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	3714      	adds	r7, #20
 8011c32:	46bd      	mov	sp, r7
 8011c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c38:	4770      	bx	lr
 8011c3a:	bf00      	nop
 8011c3c:	40010000 	.word	0x40010000
 8011c40:	40000400 	.word	0x40000400
 8011c44:	40000800 	.word	0x40000800
 8011c48:	40000c00 	.word	0x40000c00
 8011c4c:	40010400 	.word	0x40010400
 8011c50:	40001800 	.word	0x40001800
 8011c54:	40014000 	.word	0x40014000
 8011c58:	00010007 	.word	0x00010007

08011c5c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b084      	sub	sp, #16
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011c66:	2300      	movs	r3, #0
 8011c68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d109      	bne.n	8011c84 <HAL_TIM_OC_Start_IT+0x28>
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	bf14      	ite	ne
 8011c7c:	2301      	movne	r3, #1
 8011c7e:	2300      	moveq	r3, #0
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	e03c      	b.n	8011cfe <HAL_TIM_OC_Start_IT+0xa2>
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	2b04      	cmp	r3, #4
 8011c88:	d109      	bne.n	8011c9e <HAL_TIM_OC_Start_IT+0x42>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	bf14      	ite	ne
 8011c96:	2301      	movne	r3, #1
 8011c98:	2300      	moveq	r3, #0
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	e02f      	b.n	8011cfe <HAL_TIM_OC_Start_IT+0xa2>
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	2b08      	cmp	r3, #8
 8011ca2:	d109      	bne.n	8011cb8 <HAL_TIM_OC_Start_IT+0x5c>
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	bf14      	ite	ne
 8011cb0:	2301      	movne	r3, #1
 8011cb2:	2300      	moveq	r3, #0
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	e022      	b.n	8011cfe <HAL_TIM_OC_Start_IT+0xa2>
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	2b0c      	cmp	r3, #12
 8011cbc:	d109      	bne.n	8011cd2 <HAL_TIM_OC_Start_IT+0x76>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	bf14      	ite	ne
 8011cca:	2301      	movne	r3, #1
 8011ccc:	2300      	moveq	r3, #0
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	e015      	b.n	8011cfe <HAL_TIM_OC_Start_IT+0xa2>
 8011cd2:	683b      	ldr	r3, [r7, #0]
 8011cd4:	2b10      	cmp	r3, #16
 8011cd6:	d109      	bne.n	8011cec <HAL_TIM_OC_Start_IT+0x90>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011cde:	b2db      	uxtb	r3, r3
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	bf14      	ite	ne
 8011ce4:	2301      	movne	r3, #1
 8011ce6:	2300      	moveq	r3, #0
 8011ce8:	b2db      	uxtb	r3, r3
 8011cea:	e008      	b.n	8011cfe <HAL_TIM_OC_Start_IT+0xa2>
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011cf2:	b2db      	uxtb	r3, r3
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	bf14      	ite	ne
 8011cf8:	2301      	movne	r3, #1
 8011cfa:	2300      	moveq	r3, #0
 8011cfc:	b2db      	uxtb	r3, r3
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d001      	beq.n	8011d06 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8011d02:	2301      	movs	r3, #1
 8011d04:	e0ec      	b.n	8011ee0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d104      	bne.n	8011d16 <HAL_TIM_OC_Start_IT+0xba>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2202      	movs	r2, #2
 8011d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011d14:	e023      	b.n	8011d5e <HAL_TIM_OC_Start_IT+0x102>
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	2b04      	cmp	r3, #4
 8011d1a:	d104      	bne.n	8011d26 <HAL_TIM_OC_Start_IT+0xca>
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2202      	movs	r2, #2
 8011d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011d24:	e01b      	b.n	8011d5e <HAL_TIM_OC_Start_IT+0x102>
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	2b08      	cmp	r3, #8
 8011d2a:	d104      	bne.n	8011d36 <HAL_TIM_OC_Start_IT+0xda>
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2202      	movs	r2, #2
 8011d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011d34:	e013      	b.n	8011d5e <HAL_TIM_OC_Start_IT+0x102>
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	2b0c      	cmp	r3, #12
 8011d3a:	d104      	bne.n	8011d46 <HAL_TIM_OC_Start_IT+0xea>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2202      	movs	r2, #2
 8011d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011d44:	e00b      	b.n	8011d5e <HAL_TIM_OC_Start_IT+0x102>
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	2b10      	cmp	r3, #16
 8011d4a:	d104      	bne.n	8011d56 <HAL_TIM_OC_Start_IT+0xfa>
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2202      	movs	r2, #2
 8011d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011d54:	e003      	b.n	8011d5e <HAL_TIM_OC_Start_IT+0x102>
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2202      	movs	r2, #2
 8011d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	2b0c      	cmp	r3, #12
 8011d62:	d841      	bhi.n	8011de8 <HAL_TIM_OC_Start_IT+0x18c>
 8011d64:	a201      	add	r2, pc, #4	; (adr r2, 8011d6c <HAL_TIM_OC_Start_IT+0x110>)
 8011d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d6a:	bf00      	nop
 8011d6c:	08011da1 	.word	0x08011da1
 8011d70:	08011de9 	.word	0x08011de9
 8011d74:	08011de9 	.word	0x08011de9
 8011d78:	08011de9 	.word	0x08011de9
 8011d7c:	08011db3 	.word	0x08011db3
 8011d80:	08011de9 	.word	0x08011de9
 8011d84:	08011de9 	.word	0x08011de9
 8011d88:	08011de9 	.word	0x08011de9
 8011d8c:	08011dc5 	.word	0x08011dc5
 8011d90:	08011de9 	.word	0x08011de9
 8011d94:	08011de9 	.word	0x08011de9
 8011d98:	08011de9 	.word	0x08011de9
 8011d9c:	08011dd7 	.word	0x08011dd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	68da      	ldr	r2, [r3, #12]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f042 0202 	orr.w	r2, r2, #2
 8011dae:	60da      	str	r2, [r3, #12]
      break;
 8011db0:	e01d      	b.n	8011dee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	68da      	ldr	r2, [r3, #12]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	f042 0204 	orr.w	r2, r2, #4
 8011dc0:	60da      	str	r2, [r3, #12]
      break;
 8011dc2:	e014      	b.n	8011dee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	68da      	ldr	r2, [r3, #12]
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f042 0208 	orr.w	r2, r2, #8
 8011dd2:	60da      	str	r2, [r3, #12]
      break;
 8011dd4:	e00b      	b.n	8011dee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	68da      	ldr	r2, [r3, #12]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f042 0210 	orr.w	r2, r2, #16
 8011de4:	60da      	str	r2, [r3, #12]
      break;
 8011de6:	e002      	b.n	8011dee <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8011de8:	2301      	movs	r3, #1
 8011dea:	73fb      	strb	r3, [r7, #15]
      break;
 8011dec:	bf00      	nop
  }

  if (status == HAL_OK)
 8011dee:	7bfb      	ldrb	r3, [r7, #15]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d174      	bne.n	8011ede <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	2201      	movs	r2, #1
 8011dfa:	6839      	ldr	r1, [r7, #0]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f001 f917 	bl	8013030 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	4a38      	ldr	r2, [pc, #224]	; (8011ee8 <HAL_TIM_OC_Start_IT+0x28c>)
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d013      	beq.n	8011e34 <HAL_TIM_OC_Start_IT+0x1d8>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4a36      	ldr	r2, [pc, #216]	; (8011eec <HAL_TIM_OC_Start_IT+0x290>)
 8011e12:	4293      	cmp	r3, r2
 8011e14:	d00e      	beq.n	8011e34 <HAL_TIM_OC_Start_IT+0x1d8>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4a35      	ldr	r2, [pc, #212]	; (8011ef0 <HAL_TIM_OC_Start_IT+0x294>)
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d009      	beq.n	8011e34 <HAL_TIM_OC_Start_IT+0x1d8>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	4a33      	ldr	r2, [pc, #204]	; (8011ef4 <HAL_TIM_OC_Start_IT+0x298>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d004      	beq.n	8011e34 <HAL_TIM_OC_Start_IT+0x1d8>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	4a32      	ldr	r2, [pc, #200]	; (8011ef8 <HAL_TIM_OC_Start_IT+0x29c>)
 8011e30:	4293      	cmp	r3, r2
 8011e32:	d101      	bne.n	8011e38 <HAL_TIM_OC_Start_IT+0x1dc>
 8011e34:	2301      	movs	r3, #1
 8011e36:	e000      	b.n	8011e3a <HAL_TIM_OC_Start_IT+0x1de>
 8011e38:	2300      	movs	r3, #0
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d007      	beq.n	8011e4e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011e4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4a25      	ldr	r2, [pc, #148]	; (8011ee8 <HAL_TIM_OC_Start_IT+0x28c>)
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d022      	beq.n	8011e9e <HAL_TIM_OC_Start_IT+0x242>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e60:	d01d      	beq.n	8011e9e <HAL_TIM_OC_Start_IT+0x242>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	4a25      	ldr	r2, [pc, #148]	; (8011efc <HAL_TIM_OC_Start_IT+0x2a0>)
 8011e68:	4293      	cmp	r3, r2
 8011e6a:	d018      	beq.n	8011e9e <HAL_TIM_OC_Start_IT+0x242>
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	4a23      	ldr	r2, [pc, #140]	; (8011f00 <HAL_TIM_OC_Start_IT+0x2a4>)
 8011e72:	4293      	cmp	r3, r2
 8011e74:	d013      	beq.n	8011e9e <HAL_TIM_OC_Start_IT+0x242>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	4a22      	ldr	r2, [pc, #136]	; (8011f04 <HAL_TIM_OC_Start_IT+0x2a8>)
 8011e7c:	4293      	cmp	r3, r2
 8011e7e:	d00e      	beq.n	8011e9e <HAL_TIM_OC_Start_IT+0x242>
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	4a19      	ldr	r2, [pc, #100]	; (8011eec <HAL_TIM_OC_Start_IT+0x290>)
 8011e86:	4293      	cmp	r3, r2
 8011e88:	d009      	beq.n	8011e9e <HAL_TIM_OC_Start_IT+0x242>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	4a1e      	ldr	r2, [pc, #120]	; (8011f08 <HAL_TIM_OC_Start_IT+0x2ac>)
 8011e90:	4293      	cmp	r3, r2
 8011e92:	d004      	beq.n	8011e9e <HAL_TIM_OC_Start_IT+0x242>
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	4a15      	ldr	r2, [pc, #84]	; (8011ef0 <HAL_TIM_OC_Start_IT+0x294>)
 8011e9a:	4293      	cmp	r3, r2
 8011e9c:	d115      	bne.n	8011eca <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	689a      	ldr	r2, [r3, #8]
 8011ea4:	4b19      	ldr	r3, [pc, #100]	; (8011f0c <HAL_TIM_OC_Start_IT+0x2b0>)
 8011ea6:	4013      	ands	r3, r2
 8011ea8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	2b06      	cmp	r3, #6
 8011eae:	d015      	beq.n	8011edc <HAL_TIM_OC_Start_IT+0x280>
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011eb6:	d011      	beq.n	8011edc <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	f042 0201 	orr.w	r2, r2, #1
 8011ec6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011ec8:	e008      	b.n	8011edc <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	f042 0201 	orr.w	r2, r2, #1
 8011ed8:	601a      	str	r2, [r3, #0]
 8011eda:	e000      	b.n	8011ede <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011edc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8011ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	3710      	adds	r7, #16
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd80      	pop	{r7, pc}
 8011ee8:	40010000 	.word	0x40010000
 8011eec:	40010400 	.word	0x40010400
 8011ef0:	40014000 	.word	0x40014000
 8011ef4:	40014400 	.word	0x40014400
 8011ef8:	40014800 	.word	0x40014800
 8011efc:	40000400 	.word	0x40000400
 8011f00:	40000800 	.word	0x40000800
 8011f04:	40000c00 	.word	0x40000c00
 8011f08:	40001800 	.word	0x40001800
 8011f0c:	00010007 	.word	0x00010007

08011f10 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	2b0c      	cmp	r3, #12
 8011f22:	d841      	bhi.n	8011fa8 <HAL_TIM_OC_Stop_IT+0x98>
 8011f24:	a201      	add	r2, pc, #4	; (adr r2, 8011f2c <HAL_TIM_OC_Stop_IT+0x1c>)
 8011f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f2a:	bf00      	nop
 8011f2c:	08011f61 	.word	0x08011f61
 8011f30:	08011fa9 	.word	0x08011fa9
 8011f34:	08011fa9 	.word	0x08011fa9
 8011f38:	08011fa9 	.word	0x08011fa9
 8011f3c:	08011f73 	.word	0x08011f73
 8011f40:	08011fa9 	.word	0x08011fa9
 8011f44:	08011fa9 	.word	0x08011fa9
 8011f48:	08011fa9 	.word	0x08011fa9
 8011f4c:	08011f85 	.word	0x08011f85
 8011f50:	08011fa9 	.word	0x08011fa9
 8011f54:	08011fa9 	.word	0x08011fa9
 8011f58:	08011fa9 	.word	0x08011fa9
 8011f5c:	08011f97 	.word	0x08011f97
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	68da      	ldr	r2, [r3, #12]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	f022 0202 	bic.w	r2, r2, #2
 8011f6e:	60da      	str	r2, [r3, #12]
      break;
 8011f70:	e01d      	b.n	8011fae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	68da      	ldr	r2, [r3, #12]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f022 0204 	bic.w	r2, r2, #4
 8011f80:	60da      	str	r2, [r3, #12]
      break;
 8011f82:	e014      	b.n	8011fae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	68da      	ldr	r2, [r3, #12]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f022 0208 	bic.w	r2, r2, #8
 8011f92:	60da      	str	r2, [r3, #12]
      break;
 8011f94:	e00b      	b.n	8011fae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	68da      	ldr	r2, [r3, #12]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	f022 0210 	bic.w	r2, r2, #16
 8011fa4:	60da      	str	r2, [r3, #12]
      break;
 8011fa6:	e002      	b.n	8011fae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8011fa8:	2301      	movs	r3, #1
 8011faa:	73fb      	strb	r3, [r7, #15]
      break;
 8011fac:	bf00      	nop
  }

  if (status == HAL_OK)
 8011fae:	7bfb      	ldrb	r3, [r7, #15]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	f040 8081 	bne.w	80120b8 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	6839      	ldr	r1, [r7, #0]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f001 f836 	bl	8013030 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	4a3e      	ldr	r2, [pc, #248]	; (80120c4 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	d013      	beq.n	8011ff6 <HAL_TIM_OC_Stop_IT+0xe6>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	4a3d      	ldr	r2, [pc, #244]	; (80120c8 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d00e      	beq.n	8011ff6 <HAL_TIM_OC_Stop_IT+0xe6>
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	4a3b      	ldr	r2, [pc, #236]	; (80120cc <HAL_TIM_OC_Stop_IT+0x1bc>)
 8011fde:	4293      	cmp	r3, r2
 8011fe0:	d009      	beq.n	8011ff6 <HAL_TIM_OC_Stop_IT+0xe6>
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	4a3a      	ldr	r2, [pc, #232]	; (80120d0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8011fe8:	4293      	cmp	r3, r2
 8011fea:	d004      	beq.n	8011ff6 <HAL_TIM_OC_Stop_IT+0xe6>
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	4a38      	ldr	r2, [pc, #224]	; (80120d4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8011ff2:	4293      	cmp	r3, r2
 8011ff4:	d101      	bne.n	8011ffa <HAL_TIM_OC_Stop_IT+0xea>
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	e000      	b.n	8011ffc <HAL_TIM_OC_Stop_IT+0xec>
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d017      	beq.n	8012030 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	6a1a      	ldr	r2, [r3, #32]
 8012006:	f241 1311 	movw	r3, #4369	; 0x1111
 801200a:	4013      	ands	r3, r2
 801200c:	2b00      	cmp	r3, #0
 801200e:	d10f      	bne.n	8012030 <HAL_TIM_OC_Stop_IT+0x120>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	6a1a      	ldr	r2, [r3, #32]
 8012016:	f240 4344 	movw	r3, #1092	; 0x444
 801201a:	4013      	ands	r3, r2
 801201c:	2b00      	cmp	r3, #0
 801201e:	d107      	bne.n	8012030 <HAL_TIM_OC_Stop_IT+0x120>
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801202e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	6a1a      	ldr	r2, [r3, #32]
 8012036:	f241 1311 	movw	r3, #4369	; 0x1111
 801203a:	4013      	ands	r3, r2
 801203c:	2b00      	cmp	r3, #0
 801203e:	d10f      	bne.n	8012060 <HAL_TIM_OC_Stop_IT+0x150>
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	6a1a      	ldr	r2, [r3, #32]
 8012046:	f240 4344 	movw	r3, #1092	; 0x444
 801204a:	4013      	ands	r3, r2
 801204c:	2b00      	cmp	r3, #0
 801204e:	d107      	bne.n	8012060 <HAL_TIM_OC_Stop_IT+0x150>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	681a      	ldr	r2, [r3, #0]
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	f022 0201 	bic.w	r2, r2, #1
 801205e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d104      	bne.n	8012070 <HAL_TIM_OC_Stop_IT+0x160>
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2201      	movs	r2, #1
 801206a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801206e:	e023      	b.n	80120b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	2b04      	cmp	r3, #4
 8012074:	d104      	bne.n	8012080 <HAL_TIM_OC_Stop_IT+0x170>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2201      	movs	r2, #1
 801207a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801207e:	e01b      	b.n	80120b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	2b08      	cmp	r3, #8
 8012084:	d104      	bne.n	8012090 <HAL_TIM_OC_Stop_IT+0x180>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2201      	movs	r2, #1
 801208a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801208e:	e013      	b.n	80120b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	2b0c      	cmp	r3, #12
 8012094:	d104      	bne.n	80120a0 <HAL_TIM_OC_Stop_IT+0x190>
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2201      	movs	r2, #1
 801209a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801209e:	e00b      	b.n	80120b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	2b10      	cmp	r3, #16
 80120a4:	d104      	bne.n	80120b0 <HAL_TIM_OC_Stop_IT+0x1a0>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2201      	movs	r2, #1
 80120aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80120ae:	e003      	b.n	80120b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2201      	movs	r2, #1
 80120b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80120b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	40010000 	.word	0x40010000
 80120c8:	40010400 	.word	0x40010400
 80120cc:	40014000 	.word	0x40014000
 80120d0:	40014400 	.word	0x40014400
 80120d4:	40014800 	.word	0x40014800

080120d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d101      	bne.n	80120ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80120e6:	2301      	movs	r3, #1
 80120e8:	e049      	b.n	801217e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80120f0:	b2db      	uxtb	r3, r3
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d106      	bne.n	8012104 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2200      	movs	r2, #0
 80120fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 f841 	bl	8012186 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2202      	movs	r2, #2
 8012108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681a      	ldr	r2, [r3, #0]
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	3304      	adds	r3, #4
 8012114:	4619      	mov	r1, r3
 8012116:	4610      	mov	r0, r2
 8012118:	f000 fb70 	bl	80127fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2201      	movs	r2, #1
 8012120:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2201      	movs	r2, #1
 8012128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2201      	movs	r2, #1
 8012130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2201      	movs	r2, #1
 8012138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2201      	movs	r2, #1
 8012140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2201      	movs	r2, #1
 8012148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2201      	movs	r2, #1
 8012150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2201      	movs	r2, #1
 8012158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2201      	movs	r2, #1
 8012160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2201      	movs	r2, #1
 8012168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2201      	movs	r2, #1
 8012170:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2201      	movs	r2, #1
 8012178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801217c:	2300      	movs	r3, #0
}
 801217e:	4618      	mov	r0, r3
 8012180:	3708      	adds	r7, #8
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}

08012186 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012186:	b480      	push	{r7}
 8012188:	b083      	sub	sp, #12
 801218a:	af00      	add	r7, sp, #0
 801218c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801218e:	bf00      	nop
 8012190:	370c      	adds	r7, #12
 8012192:	46bd      	mov	sp, r7
 8012194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012198:	4770      	bx	lr

0801219a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801219a:	b580      	push	{r7, lr}
 801219c:	b084      	sub	sp, #16
 801219e:	af00      	add	r7, sp, #0
 80121a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	691b      	ldr	r3, [r3, #16]
 80121b0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	f003 0302 	and.w	r3, r3, #2
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d020      	beq.n	80121fe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f003 0302 	and.w	r3, r3, #2
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d01b      	beq.n	80121fe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f06f 0202 	mvn.w	r2, #2
 80121ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2201      	movs	r2, #1
 80121d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	699b      	ldr	r3, [r3, #24]
 80121dc:	f003 0303 	and.w	r3, r3, #3
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d003      	beq.n	80121ec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f000 faeb 	bl	80127c0 <HAL_TIM_IC_CaptureCallback>
 80121ea:	e005      	b.n	80121f8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7ef fe2f 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 faee 	bl	80127d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2200      	movs	r2, #0
 80121fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	f003 0304 	and.w	r3, r3, #4
 8012204:	2b00      	cmp	r3, #0
 8012206:	d020      	beq.n	801224a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	f003 0304 	and.w	r3, r3, #4
 801220e:	2b00      	cmp	r3, #0
 8012210:	d01b      	beq.n	801224a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	f06f 0204 	mvn.w	r2, #4
 801221a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2202      	movs	r2, #2
 8012220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	699b      	ldr	r3, [r3, #24]
 8012228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801222c:	2b00      	cmp	r3, #0
 801222e:	d003      	beq.n	8012238 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f000 fac5 	bl	80127c0 <HAL_TIM_IC_CaptureCallback>
 8012236:	e005      	b.n	8012244 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f7ef fe09 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f000 fac8 	bl	80127d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2200      	movs	r2, #0
 8012248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	f003 0308 	and.w	r3, r3, #8
 8012250:	2b00      	cmp	r3, #0
 8012252:	d020      	beq.n	8012296 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f003 0308 	and.w	r3, r3, #8
 801225a:	2b00      	cmp	r3, #0
 801225c:	d01b      	beq.n	8012296 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	f06f 0208 	mvn.w	r2, #8
 8012266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2204      	movs	r2, #4
 801226c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	69db      	ldr	r3, [r3, #28]
 8012274:	f003 0303 	and.w	r3, r3, #3
 8012278:	2b00      	cmp	r3, #0
 801227a:	d003      	beq.n	8012284 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f000 fa9f 	bl	80127c0 <HAL_TIM_IC_CaptureCallback>
 8012282:	e005      	b.n	8012290 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f7ef fde3 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 faa2 	bl	80127d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2200      	movs	r2, #0
 8012294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	f003 0310 	and.w	r3, r3, #16
 801229c:	2b00      	cmp	r3, #0
 801229e:	d020      	beq.n	80122e2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	f003 0310 	and.w	r3, r3, #16
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d01b      	beq.n	80122e2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	f06f 0210 	mvn.w	r2, #16
 80122b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2208      	movs	r2, #8
 80122b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	69db      	ldr	r3, [r3, #28]
 80122c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d003      	beq.n	80122d0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f000 fa79 	bl	80127c0 <HAL_TIM_IC_CaptureCallback>
 80122ce:	e005      	b.n	80122dc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f7ef fdbd 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 fa7c 	bl	80127d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2200      	movs	r2, #0
 80122e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	f003 0301 	and.w	r3, r3, #1
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d00c      	beq.n	8012306 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	f003 0301 	and.w	r3, r3, #1
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d007      	beq.n	8012306 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	f06f 0201 	mvn.w	r2, #1
 80122fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f7f0 fc69 	bl	8002bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801230c:	2b00      	cmp	r3, #0
 801230e:	d104      	bne.n	801231a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00c      	beq.n	8012334 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012320:	2b00      	cmp	r3, #0
 8012322:	d007      	beq.n	8012334 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 801232c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f000 ffba 	bl	80132a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801233a:	2b00      	cmp	r3, #0
 801233c:	d00c      	beq.n	8012358 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012344:	2b00      	cmp	r3, #0
 8012346:	d007      	beq.n	8012358 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 ffb2 	bl	80132bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801235e:	2b00      	cmp	r3, #0
 8012360:	d00c      	beq.n	801237c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012368:	2b00      	cmp	r3, #0
 801236a:	d007      	beq.n	801237c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f000 fa36 	bl	80127e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	f003 0320 	and.w	r3, r3, #32
 8012382:	2b00      	cmp	r3, #0
 8012384:	d00c      	beq.n	80123a0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	f003 0320 	and.w	r3, r3, #32
 801238c:	2b00      	cmp	r3, #0
 801238e:	d007      	beq.n	80123a0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	f06f 0220 	mvn.w	r2, #32
 8012398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f000 ff7a 	bl	8013294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80123a0:	bf00      	nop
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b086      	sub	sp, #24
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	60f8      	str	r0, [r7, #12]
 80123b0:	60b9      	str	r1, [r7, #8]
 80123b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80123b4:	2300      	movs	r3, #0
 80123b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d101      	bne.n	80123c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80123c2:	2302      	movs	r3, #2
 80123c4:	e0ff      	b.n	80125c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	2201      	movs	r2, #1
 80123ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2b14      	cmp	r3, #20
 80123d2:	f200 80f0 	bhi.w	80125b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80123d6:	a201      	add	r2, pc, #4	; (adr r2, 80123dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80123d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123dc:	08012431 	.word	0x08012431
 80123e0:	080125b7 	.word	0x080125b7
 80123e4:	080125b7 	.word	0x080125b7
 80123e8:	080125b7 	.word	0x080125b7
 80123ec:	08012471 	.word	0x08012471
 80123f0:	080125b7 	.word	0x080125b7
 80123f4:	080125b7 	.word	0x080125b7
 80123f8:	080125b7 	.word	0x080125b7
 80123fc:	080124b3 	.word	0x080124b3
 8012400:	080125b7 	.word	0x080125b7
 8012404:	080125b7 	.word	0x080125b7
 8012408:	080125b7 	.word	0x080125b7
 801240c:	080124f3 	.word	0x080124f3
 8012410:	080125b7 	.word	0x080125b7
 8012414:	080125b7 	.word	0x080125b7
 8012418:	080125b7 	.word	0x080125b7
 801241c:	08012535 	.word	0x08012535
 8012420:	080125b7 	.word	0x080125b7
 8012424:	080125b7 	.word	0x080125b7
 8012428:	080125b7 	.word	0x080125b7
 801242c:	08012575 	.word	0x08012575
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	68b9      	ldr	r1, [r7, #8]
 8012436:	4618      	mov	r0, r3
 8012438:	f000 fa86 	bl	8012948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	699a      	ldr	r2, [r3, #24]
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	f042 0208 	orr.w	r2, r2, #8
 801244a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	699a      	ldr	r2, [r3, #24]
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f022 0204 	bic.w	r2, r2, #4
 801245a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	6999      	ldr	r1, [r3, #24]
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	691a      	ldr	r2, [r3, #16]
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	430a      	orrs	r2, r1
 801246c:	619a      	str	r2, [r3, #24]
      break;
 801246e:	e0a5      	b.n	80125bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	68b9      	ldr	r1, [r7, #8]
 8012476:	4618      	mov	r0, r3
 8012478:	f000 faf6 	bl	8012a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	699a      	ldr	r2, [r3, #24]
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801248a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	699a      	ldr	r2, [r3, #24]
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801249a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	6999      	ldr	r1, [r3, #24]
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	691b      	ldr	r3, [r3, #16]
 80124a6:	021a      	lsls	r2, r3, #8
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	430a      	orrs	r2, r1
 80124ae:	619a      	str	r2, [r3, #24]
      break;
 80124b0:	e084      	b.n	80125bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	68b9      	ldr	r1, [r7, #8]
 80124b8:	4618      	mov	r0, r3
 80124ba:	f000 fb5f 	bl	8012b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	69da      	ldr	r2, [r3, #28]
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	f042 0208 	orr.w	r2, r2, #8
 80124cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	69da      	ldr	r2, [r3, #28]
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	f022 0204 	bic.w	r2, r2, #4
 80124dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	69d9      	ldr	r1, [r3, #28]
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	691a      	ldr	r2, [r3, #16]
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	430a      	orrs	r2, r1
 80124ee:	61da      	str	r2, [r3, #28]
      break;
 80124f0:	e064      	b.n	80125bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	68b9      	ldr	r1, [r7, #8]
 80124f8:	4618      	mov	r0, r3
 80124fa:	f000 fbc7 	bl	8012c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	69da      	ldr	r2, [r3, #28]
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801250c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	69da      	ldr	r2, [r3, #28]
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801251c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	69d9      	ldr	r1, [r3, #28]
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	691b      	ldr	r3, [r3, #16]
 8012528:	021a      	lsls	r2, r3, #8
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	430a      	orrs	r2, r1
 8012530:	61da      	str	r2, [r3, #28]
      break;
 8012532:	e043      	b.n	80125bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	68b9      	ldr	r1, [r7, #8]
 801253a:	4618      	mov	r0, r3
 801253c:	f000 fc10 	bl	8012d60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	f042 0208 	orr.w	r2, r2, #8
 801254e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	f022 0204 	bic.w	r2, r2, #4
 801255e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	691a      	ldr	r2, [r3, #16]
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	430a      	orrs	r2, r1
 8012570:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012572:	e023      	b.n	80125bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	68b9      	ldr	r1, [r7, #8]
 801257a:	4618      	mov	r0, r3
 801257c:	f000 fc54 	bl	8012e28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801258e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801259e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	691b      	ldr	r3, [r3, #16]
 80125aa:	021a      	lsls	r2, r3, #8
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	430a      	orrs	r2, r1
 80125b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80125b4:	e002      	b.n	80125bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80125b6:	2301      	movs	r3, #1
 80125b8:	75fb      	strb	r3, [r7, #23]
      break;
 80125ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	2200      	movs	r2, #0
 80125c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80125c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3718      	adds	r7, #24
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
 80125ce:	bf00      	nop

080125d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80125da:	2300      	movs	r3, #0
 80125dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80125e4:	2b01      	cmp	r3, #1
 80125e6:	d101      	bne.n	80125ec <HAL_TIM_ConfigClockSource+0x1c>
 80125e8:	2302      	movs	r3, #2
 80125ea:	e0dc      	b.n	80127a6 <HAL_TIM_ConfigClockSource+0x1d6>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2201      	movs	r2, #1
 80125f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2202      	movs	r2, #2
 80125f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	689b      	ldr	r3, [r3, #8]
 8012602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012604:	68ba      	ldr	r2, [r7, #8]
 8012606:	4b6a      	ldr	r3, [pc, #424]	; (80127b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012608:	4013      	ands	r3, r2
 801260a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	68ba      	ldr	r2, [r7, #8]
 801261a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4a64      	ldr	r2, [pc, #400]	; (80127b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012622:	4293      	cmp	r3, r2
 8012624:	f000 80a9 	beq.w	801277a <HAL_TIM_ConfigClockSource+0x1aa>
 8012628:	4a62      	ldr	r2, [pc, #392]	; (80127b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801262a:	4293      	cmp	r3, r2
 801262c:	f200 80ae 	bhi.w	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 8012630:	4a61      	ldr	r2, [pc, #388]	; (80127b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012632:	4293      	cmp	r3, r2
 8012634:	f000 80a1 	beq.w	801277a <HAL_TIM_ConfigClockSource+0x1aa>
 8012638:	4a5f      	ldr	r2, [pc, #380]	; (80127b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801263a:	4293      	cmp	r3, r2
 801263c:	f200 80a6 	bhi.w	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 8012640:	4a5e      	ldr	r2, [pc, #376]	; (80127bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8012642:	4293      	cmp	r3, r2
 8012644:	f000 8099 	beq.w	801277a <HAL_TIM_ConfigClockSource+0x1aa>
 8012648:	4a5c      	ldr	r2, [pc, #368]	; (80127bc <HAL_TIM_ConfigClockSource+0x1ec>)
 801264a:	4293      	cmp	r3, r2
 801264c:	f200 809e 	bhi.w	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 8012650:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012654:	f000 8091 	beq.w	801277a <HAL_TIM_ConfigClockSource+0x1aa>
 8012658:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801265c:	f200 8096 	bhi.w	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 8012660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012664:	f000 8089 	beq.w	801277a <HAL_TIM_ConfigClockSource+0x1aa>
 8012668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801266c:	f200 808e 	bhi.w	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 8012670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012674:	d03e      	beq.n	80126f4 <HAL_TIM_ConfigClockSource+0x124>
 8012676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801267a:	f200 8087 	bhi.w	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 801267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012682:	f000 8086 	beq.w	8012792 <HAL_TIM_ConfigClockSource+0x1c2>
 8012686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801268a:	d87f      	bhi.n	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 801268c:	2b70      	cmp	r3, #112	; 0x70
 801268e:	d01a      	beq.n	80126c6 <HAL_TIM_ConfigClockSource+0xf6>
 8012690:	2b70      	cmp	r3, #112	; 0x70
 8012692:	d87b      	bhi.n	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 8012694:	2b60      	cmp	r3, #96	; 0x60
 8012696:	d050      	beq.n	801273a <HAL_TIM_ConfigClockSource+0x16a>
 8012698:	2b60      	cmp	r3, #96	; 0x60
 801269a:	d877      	bhi.n	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 801269c:	2b50      	cmp	r3, #80	; 0x50
 801269e:	d03c      	beq.n	801271a <HAL_TIM_ConfigClockSource+0x14a>
 80126a0:	2b50      	cmp	r3, #80	; 0x50
 80126a2:	d873      	bhi.n	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 80126a4:	2b40      	cmp	r3, #64	; 0x40
 80126a6:	d058      	beq.n	801275a <HAL_TIM_ConfigClockSource+0x18a>
 80126a8:	2b40      	cmp	r3, #64	; 0x40
 80126aa:	d86f      	bhi.n	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 80126ac:	2b30      	cmp	r3, #48	; 0x30
 80126ae:	d064      	beq.n	801277a <HAL_TIM_ConfigClockSource+0x1aa>
 80126b0:	2b30      	cmp	r3, #48	; 0x30
 80126b2:	d86b      	bhi.n	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 80126b4:	2b20      	cmp	r3, #32
 80126b6:	d060      	beq.n	801277a <HAL_TIM_ConfigClockSource+0x1aa>
 80126b8:	2b20      	cmp	r3, #32
 80126ba:	d867      	bhi.n	801278c <HAL_TIM_ConfigClockSource+0x1bc>
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d05c      	beq.n	801277a <HAL_TIM_ConfigClockSource+0x1aa>
 80126c0:	2b10      	cmp	r3, #16
 80126c2:	d05a      	beq.n	801277a <HAL_TIM_ConfigClockSource+0x1aa>
 80126c4:	e062      	b.n	801278c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	6818      	ldr	r0, [r3, #0]
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	6899      	ldr	r1, [r3, #8]
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	685a      	ldr	r2, [r3, #4]
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	68db      	ldr	r3, [r3, #12]
 80126d6:	f000 fc8b 	bl	8012ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	689b      	ldr	r3, [r3, #8]
 80126e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80126e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	68ba      	ldr	r2, [r7, #8]
 80126f0:	609a      	str	r2, [r3, #8]
      break;
 80126f2:	e04f      	b.n	8012794 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6818      	ldr	r0, [r3, #0]
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	6899      	ldr	r1, [r3, #8]
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	685a      	ldr	r2, [r3, #4]
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	68db      	ldr	r3, [r3, #12]
 8012704:	f000 fc74 	bl	8012ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	689a      	ldr	r2, [r3, #8]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012716:	609a      	str	r2, [r3, #8]
      break;
 8012718:	e03c      	b.n	8012794 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6818      	ldr	r0, [r3, #0]
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	6859      	ldr	r1, [r3, #4]
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	68db      	ldr	r3, [r3, #12]
 8012726:	461a      	mov	r2, r3
 8012728:	f000 fbe4 	bl	8012ef4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	2150      	movs	r1, #80	; 0x50
 8012732:	4618      	mov	r0, r3
 8012734:	f000 fc3e 	bl	8012fb4 <TIM_ITRx_SetConfig>
      break;
 8012738:	e02c      	b.n	8012794 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	6818      	ldr	r0, [r3, #0]
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	6859      	ldr	r1, [r3, #4]
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	68db      	ldr	r3, [r3, #12]
 8012746:	461a      	mov	r2, r3
 8012748:	f000 fc03 	bl	8012f52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	2160      	movs	r1, #96	; 0x60
 8012752:	4618      	mov	r0, r3
 8012754:	f000 fc2e 	bl	8012fb4 <TIM_ITRx_SetConfig>
      break;
 8012758:	e01c      	b.n	8012794 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6818      	ldr	r0, [r3, #0]
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	6859      	ldr	r1, [r3, #4]
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	68db      	ldr	r3, [r3, #12]
 8012766:	461a      	mov	r2, r3
 8012768:	f000 fbc4 	bl	8012ef4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2140      	movs	r1, #64	; 0x40
 8012772:	4618      	mov	r0, r3
 8012774:	f000 fc1e 	bl	8012fb4 <TIM_ITRx_SetConfig>
      break;
 8012778:	e00c      	b.n	8012794 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681a      	ldr	r2, [r3, #0]
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	4619      	mov	r1, r3
 8012784:	4610      	mov	r0, r2
 8012786:	f000 fc15 	bl	8012fb4 <TIM_ITRx_SetConfig>
      break;
 801278a:	e003      	b.n	8012794 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801278c:	2301      	movs	r3, #1
 801278e:	73fb      	strb	r3, [r7, #15]
      break;
 8012790:	e000      	b.n	8012794 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8012792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2201      	movs	r2, #1
 8012798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2200      	movs	r2, #0
 80127a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80127a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3710      	adds	r7, #16
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	ffceff88 	.word	0xffceff88
 80127b4:	00100040 	.word	0x00100040
 80127b8:	00100030 	.word	0x00100030
 80127bc:	00100020 	.word	0x00100020

080127c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80127c8:	bf00      	nop
 80127ca:	370c      	adds	r7, #12
 80127cc:	46bd      	mov	sp, r7
 80127ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d2:	4770      	bx	lr

080127d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80127d4:	b480      	push	{r7}
 80127d6:	b083      	sub	sp, #12
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80127dc:	bf00      	nop
 80127de:	370c      	adds	r7, #12
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr

080127e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b083      	sub	sp, #12
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80127f0:	bf00      	nop
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr

080127fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80127fc:	b480      	push	{r7}
 80127fe:	b085      	sub	sp, #20
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	4a46      	ldr	r2, [pc, #280]	; (8012928 <TIM_Base_SetConfig+0x12c>)
 8012810:	4293      	cmp	r3, r2
 8012812:	d013      	beq.n	801283c <TIM_Base_SetConfig+0x40>
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801281a:	d00f      	beq.n	801283c <TIM_Base_SetConfig+0x40>
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	4a43      	ldr	r2, [pc, #268]	; (801292c <TIM_Base_SetConfig+0x130>)
 8012820:	4293      	cmp	r3, r2
 8012822:	d00b      	beq.n	801283c <TIM_Base_SetConfig+0x40>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	4a42      	ldr	r2, [pc, #264]	; (8012930 <TIM_Base_SetConfig+0x134>)
 8012828:	4293      	cmp	r3, r2
 801282a:	d007      	beq.n	801283c <TIM_Base_SetConfig+0x40>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	4a41      	ldr	r2, [pc, #260]	; (8012934 <TIM_Base_SetConfig+0x138>)
 8012830:	4293      	cmp	r3, r2
 8012832:	d003      	beq.n	801283c <TIM_Base_SetConfig+0x40>
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	4a40      	ldr	r2, [pc, #256]	; (8012938 <TIM_Base_SetConfig+0x13c>)
 8012838:	4293      	cmp	r3, r2
 801283a:	d108      	bne.n	801284e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	4313      	orrs	r3, r2
 801284c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	4a35      	ldr	r2, [pc, #212]	; (8012928 <TIM_Base_SetConfig+0x12c>)
 8012852:	4293      	cmp	r3, r2
 8012854:	d01f      	beq.n	8012896 <TIM_Base_SetConfig+0x9a>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801285c:	d01b      	beq.n	8012896 <TIM_Base_SetConfig+0x9a>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4a32      	ldr	r2, [pc, #200]	; (801292c <TIM_Base_SetConfig+0x130>)
 8012862:	4293      	cmp	r3, r2
 8012864:	d017      	beq.n	8012896 <TIM_Base_SetConfig+0x9a>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	4a31      	ldr	r2, [pc, #196]	; (8012930 <TIM_Base_SetConfig+0x134>)
 801286a:	4293      	cmp	r3, r2
 801286c:	d013      	beq.n	8012896 <TIM_Base_SetConfig+0x9a>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	4a30      	ldr	r2, [pc, #192]	; (8012934 <TIM_Base_SetConfig+0x138>)
 8012872:	4293      	cmp	r3, r2
 8012874:	d00f      	beq.n	8012896 <TIM_Base_SetConfig+0x9a>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	4a2f      	ldr	r2, [pc, #188]	; (8012938 <TIM_Base_SetConfig+0x13c>)
 801287a:	4293      	cmp	r3, r2
 801287c:	d00b      	beq.n	8012896 <TIM_Base_SetConfig+0x9a>
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	4a2e      	ldr	r2, [pc, #184]	; (801293c <TIM_Base_SetConfig+0x140>)
 8012882:	4293      	cmp	r3, r2
 8012884:	d007      	beq.n	8012896 <TIM_Base_SetConfig+0x9a>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	4a2d      	ldr	r2, [pc, #180]	; (8012940 <TIM_Base_SetConfig+0x144>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d003      	beq.n	8012896 <TIM_Base_SetConfig+0x9a>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4a2c      	ldr	r2, [pc, #176]	; (8012944 <TIM_Base_SetConfig+0x148>)
 8012892:	4293      	cmp	r3, r2
 8012894:	d108      	bne.n	80128a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801289c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	68db      	ldr	r3, [r3, #12]
 80128a2:	68fa      	ldr	r2, [r7, #12]
 80128a4:	4313      	orrs	r3, r2
 80128a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	695b      	ldr	r3, [r3, #20]
 80128b2:	4313      	orrs	r3, r2
 80128b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	689a      	ldr	r2, [r3, #8]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	4a16      	ldr	r2, [pc, #88]	; (8012928 <TIM_Base_SetConfig+0x12c>)
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d00f      	beq.n	80128f4 <TIM_Base_SetConfig+0xf8>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	4a18      	ldr	r2, [pc, #96]	; (8012938 <TIM_Base_SetConfig+0x13c>)
 80128d8:	4293      	cmp	r3, r2
 80128da:	d00b      	beq.n	80128f4 <TIM_Base_SetConfig+0xf8>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	4a17      	ldr	r2, [pc, #92]	; (801293c <TIM_Base_SetConfig+0x140>)
 80128e0:	4293      	cmp	r3, r2
 80128e2:	d007      	beq.n	80128f4 <TIM_Base_SetConfig+0xf8>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	4a16      	ldr	r2, [pc, #88]	; (8012940 <TIM_Base_SetConfig+0x144>)
 80128e8:	4293      	cmp	r3, r2
 80128ea:	d003      	beq.n	80128f4 <TIM_Base_SetConfig+0xf8>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	4a15      	ldr	r2, [pc, #84]	; (8012944 <TIM_Base_SetConfig+0x148>)
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d103      	bne.n	80128fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	691a      	ldr	r2, [r3, #16]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2201      	movs	r2, #1
 8012900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	691b      	ldr	r3, [r3, #16]
 8012906:	f003 0301 	and.w	r3, r3, #1
 801290a:	2b01      	cmp	r3, #1
 801290c:	d105      	bne.n	801291a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	691b      	ldr	r3, [r3, #16]
 8012912:	f023 0201 	bic.w	r2, r3, #1
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	611a      	str	r2, [r3, #16]
  }
}
 801291a:	bf00      	nop
 801291c:	3714      	adds	r7, #20
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr
 8012926:	bf00      	nop
 8012928:	40010000 	.word	0x40010000
 801292c:	40000400 	.word	0x40000400
 8012930:	40000800 	.word	0x40000800
 8012934:	40000c00 	.word	0x40000c00
 8012938:	40010400 	.word	0x40010400
 801293c:	40014000 	.word	0x40014000
 8012940:	40014400 	.word	0x40014400
 8012944:	40014800 	.word	0x40014800

08012948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012948:	b480      	push	{r7}
 801294a:	b087      	sub	sp, #28
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6a1b      	ldr	r3, [r3, #32]
 8012956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6a1b      	ldr	r3, [r3, #32]
 801295c:	f023 0201 	bic.w	r2, r3, #1
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	699b      	ldr	r3, [r3, #24]
 801296e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012970:	68fa      	ldr	r2, [r7, #12]
 8012972:	4b37      	ldr	r3, [pc, #220]	; (8012a50 <TIM_OC1_SetConfig+0x108>)
 8012974:	4013      	ands	r3, r2
 8012976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	f023 0303 	bic.w	r3, r3, #3
 801297e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	68fa      	ldr	r2, [r7, #12]
 8012986:	4313      	orrs	r3, r2
 8012988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	f023 0302 	bic.w	r3, r3, #2
 8012990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	689b      	ldr	r3, [r3, #8]
 8012996:	697a      	ldr	r2, [r7, #20]
 8012998:	4313      	orrs	r3, r2
 801299a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	4a2d      	ldr	r2, [pc, #180]	; (8012a54 <TIM_OC1_SetConfig+0x10c>)
 80129a0:	4293      	cmp	r3, r2
 80129a2:	d00f      	beq.n	80129c4 <TIM_OC1_SetConfig+0x7c>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	4a2c      	ldr	r2, [pc, #176]	; (8012a58 <TIM_OC1_SetConfig+0x110>)
 80129a8:	4293      	cmp	r3, r2
 80129aa:	d00b      	beq.n	80129c4 <TIM_OC1_SetConfig+0x7c>
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	4a2b      	ldr	r2, [pc, #172]	; (8012a5c <TIM_OC1_SetConfig+0x114>)
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d007      	beq.n	80129c4 <TIM_OC1_SetConfig+0x7c>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	4a2a      	ldr	r2, [pc, #168]	; (8012a60 <TIM_OC1_SetConfig+0x118>)
 80129b8:	4293      	cmp	r3, r2
 80129ba:	d003      	beq.n	80129c4 <TIM_OC1_SetConfig+0x7c>
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	4a29      	ldr	r2, [pc, #164]	; (8012a64 <TIM_OC1_SetConfig+0x11c>)
 80129c0:	4293      	cmp	r3, r2
 80129c2:	d10c      	bne.n	80129de <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	f023 0308 	bic.w	r3, r3, #8
 80129ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	697a      	ldr	r2, [r7, #20]
 80129d2:	4313      	orrs	r3, r2
 80129d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	f023 0304 	bic.w	r3, r3, #4
 80129dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	4a1c      	ldr	r2, [pc, #112]	; (8012a54 <TIM_OC1_SetConfig+0x10c>)
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d00f      	beq.n	8012a06 <TIM_OC1_SetConfig+0xbe>
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	4a1b      	ldr	r2, [pc, #108]	; (8012a58 <TIM_OC1_SetConfig+0x110>)
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d00b      	beq.n	8012a06 <TIM_OC1_SetConfig+0xbe>
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	4a1a      	ldr	r2, [pc, #104]	; (8012a5c <TIM_OC1_SetConfig+0x114>)
 80129f2:	4293      	cmp	r3, r2
 80129f4:	d007      	beq.n	8012a06 <TIM_OC1_SetConfig+0xbe>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4a19      	ldr	r2, [pc, #100]	; (8012a60 <TIM_OC1_SetConfig+0x118>)
 80129fa:	4293      	cmp	r3, r2
 80129fc:	d003      	beq.n	8012a06 <TIM_OC1_SetConfig+0xbe>
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	4a18      	ldr	r2, [pc, #96]	; (8012a64 <TIM_OC1_SetConfig+0x11c>)
 8012a02:	4293      	cmp	r3, r2
 8012a04:	d111      	bne.n	8012a2a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	695b      	ldr	r3, [r3, #20]
 8012a1a:	693a      	ldr	r2, [r7, #16]
 8012a1c:	4313      	orrs	r3, r2
 8012a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	699b      	ldr	r3, [r3, #24]
 8012a24:	693a      	ldr	r2, [r7, #16]
 8012a26:	4313      	orrs	r3, r2
 8012a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	693a      	ldr	r2, [r7, #16]
 8012a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	68fa      	ldr	r2, [r7, #12]
 8012a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	685a      	ldr	r2, [r3, #4]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	697a      	ldr	r2, [r7, #20]
 8012a42:	621a      	str	r2, [r3, #32]
}
 8012a44:	bf00      	nop
 8012a46:	371c      	adds	r7, #28
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4e:	4770      	bx	lr
 8012a50:	fffeff8f 	.word	0xfffeff8f
 8012a54:	40010000 	.word	0x40010000
 8012a58:	40010400 	.word	0x40010400
 8012a5c:	40014000 	.word	0x40014000
 8012a60:	40014400 	.word	0x40014400
 8012a64:	40014800 	.word	0x40014800

08012a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b087      	sub	sp, #28
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6a1b      	ldr	r3, [r3, #32]
 8012a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6a1b      	ldr	r3, [r3, #32]
 8012a7c:	f023 0210 	bic.w	r2, r3, #16
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	699b      	ldr	r3, [r3, #24]
 8012a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012a90:	68fa      	ldr	r2, [r7, #12]
 8012a92:	4b34      	ldr	r3, [pc, #208]	; (8012b64 <TIM_OC2_SetConfig+0xfc>)
 8012a94:	4013      	ands	r3, r2
 8012a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	021b      	lsls	r3, r3, #8
 8012aa6:	68fa      	ldr	r2, [r7, #12]
 8012aa8:	4313      	orrs	r3, r2
 8012aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	f023 0320 	bic.w	r3, r3, #32
 8012ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	689b      	ldr	r3, [r3, #8]
 8012ab8:	011b      	lsls	r3, r3, #4
 8012aba:	697a      	ldr	r2, [r7, #20]
 8012abc:	4313      	orrs	r3, r2
 8012abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	4a29      	ldr	r2, [pc, #164]	; (8012b68 <TIM_OC2_SetConfig+0x100>)
 8012ac4:	4293      	cmp	r3, r2
 8012ac6:	d003      	beq.n	8012ad0 <TIM_OC2_SetConfig+0x68>
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	4a28      	ldr	r2, [pc, #160]	; (8012b6c <TIM_OC2_SetConfig+0x104>)
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d10d      	bne.n	8012aec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	011b      	lsls	r3, r3, #4
 8012ade:	697a      	ldr	r2, [r7, #20]
 8012ae0:	4313      	orrs	r3, r2
 8012ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012aea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	4a1e      	ldr	r2, [pc, #120]	; (8012b68 <TIM_OC2_SetConfig+0x100>)
 8012af0:	4293      	cmp	r3, r2
 8012af2:	d00f      	beq.n	8012b14 <TIM_OC2_SetConfig+0xac>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	4a1d      	ldr	r2, [pc, #116]	; (8012b6c <TIM_OC2_SetConfig+0x104>)
 8012af8:	4293      	cmp	r3, r2
 8012afa:	d00b      	beq.n	8012b14 <TIM_OC2_SetConfig+0xac>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	4a1c      	ldr	r2, [pc, #112]	; (8012b70 <TIM_OC2_SetConfig+0x108>)
 8012b00:	4293      	cmp	r3, r2
 8012b02:	d007      	beq.n	8012b14 <TIM_OC2_SetConfig+0xac>
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	4a1b      	ldr	r2, [pc, #108]	; (8012b74 <TIM_OC2_SetConfig+0x10c>)
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d003      	beq.n	8012b14 <TIM_OC2_SetConfig+0xac>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	4a1a      	ldr	r2, [pc, #104]	; (8012b78 <TIM_OC2_SetConfig+0x110>)
 8012b10:	4293      	cmp	r3, r2
 8012b12:	d113      	bne.n	8012b3c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	695b      	ldr	r3, [r3, #20]
 8012b28:	009b      	lsls	r3, r3, #2
 8012b2a:	693a      	ldr	r2, [r7, #16]
 8012b2c:	4313      	orrs	r3, r2
 8012b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	699b      	ldr	r3, [r3, #24]
 8012b34:	009b      	lsls	r3, r3, #2
 8012b36:	693a      	ldr	r2, [r7, #16]
 8012b38:	4313      	orrs	r3, r2
 8012b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	693a      	ldr	r2, [r7, #16]
 8012b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	68fa      	ldr	r2, [r7, #12]
 8012b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	685a      	ldr	r2, [r3, #4]
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	697a      	ldr	r2, [r7, #20]
 8012b54:	621a      	str	r2, [r3, #32]
}
 8012b56:	bf00      	nop
 8012b58:	371c      	adds	r7, #28
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	feff8fff 	.word	0xfeff8fff
 8012b68:	40010000 	.word	0x40010000
 8012b6c:	40010400 	.word	0x40010400
 8012b70:	40014000 	.word	0x40014000
 8012b74:	40014400 	.word	0x40014400
 8012b78:	40014800 	.word	0x40014800

08012b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	b087      	sub	sp, #28
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	6a1b      	ldr	r3, [r3, #32]
 8012b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6a1b      	ldr	r3, [r3, #32]
 8012b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	69db      	ldr	r3, [r3, #28]
 8012ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012ba4:	68fa      	ldr	r2, [r7, #12]
 8012ba6:	4b33      	ldr	r3, [pc, #204]	; (8012c74 <TIM_OC3_SetConfig+0xf8>)
 8012ba8:	4013      	ands	r3, r2
 8012baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	f023 0303 	bic.w	r3, r3, #3
 8012bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	68fa      	ldr	r2, [r7, #12]
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	689b      	ldr	r3, [r3, #8]
 8012bca:	021b      	lsls	r3, r3, #8
 8012bcc:	697a      	ldr	r2, [r7, #20]
 8012bce:	4313      	orrs	r3, r2
 8012bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	4a28      	ldr	r2, [pc, #160]	; (8012c78 <TIM_OC3_SetConfig+0xfc>)
 8012bd6:	4293      	cmp	r3, r2
 8012bd8:	d003      	beq.n	8012be2 <TIM_OC3_SetConfig+0x66>
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	4a27      	ldr	r2, [pc, #156]	; (8012c7c <TIM_OC3_SetConfig+0x100>)
 8012bde:	4293      	cmp	r3, r2
 8012be0:	d10d      	bne.n	8012bfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	68db      	ldr	r3, [r3, #12]
 8012bee:	021b      	lsls	r3, r3, #8
 8012bf0:	697a      	ldr	r2, [r7, #20]
 8012bf2:	4313      	orrs	r3, r2
 8012bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	4a1d      	ldr	r2, [pc, #116]	; (8012c78 <TIM_OC3_SetConfig+0xfc>)
 8012c02:	4293      	cmp	r3, r2
 8012c04:	d00f      	beq.n	8012c26 <TIM_OC3_SetConfig+0xaa>
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	4a1c      	ldr	r2, [pc, #112]	; (8012c7c <TIM_OC3_SetConfig+0x100>)
 8012c0a:	4293      	cmp	r3, r2
 8012c0c:	d00b      	beq.n	8012c26 <TIM_OC3_SetConfig+0xaa>
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	4a1b      	ldr	r2, [pc, #108]	; (8012c80 <TIM_OC3_SetConfig+0x104>)
 8012c12:	4293      	cmp	r3, r2
 8012c14:	d007      	beq.n	8012c26 <TIM_OC3_SetConfig+0xaa>
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	4a1a      	ldr	r2, [pc, #104]	; (8012c84 <TIM_OC3_SetConfig+0x108>)
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	d003      	beq.n	8012c26 <TIM_OC3_SetConfig+0xaa>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	4a19      	ldr	r2, [pc, #100]	; (8012c88 <TIM_OC3_SetConfig+0x10c>)
 8012c22:	4293      	cmp	r3, r2
 8012c24:	d113      	bne.n	8012c4e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012c26:	693b      	ldr	r3, [r7, #16]
 8012c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	695b      	ldr	r3, [r3, #20]
 8012c3a:	011b      	lsls	r3, r3, #4
 8012c3c:	693a      	ldr	r2, [r7, #16]
 8012c3e:	4313      	orrs	r3, r2
 8012c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	699b      	ldr	r3, [r3, #24]
 8012c46:	011b      	lsls	r3, r3, #4
 8012c48:	693a      	ldr	r2, [r7, #16]
 8012c4a:	4313      	orrs	r3, r2
 8012c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	693a      	ldr	r2, [r7, #16]
 8012c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	68fa      	ldr	r2, [r7, #12]
 8012c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	685a      	ldr	r2, [r3, #4]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	697a      	ldr	r2, [r7, #20]
 8012c66:	621a      	str	r2, [r3, #32]
}
 8012c68:	bf00      	nop
 8012c6a:	371c      	adds	r7, #28
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr
 8012c74:	fffeff8f 	.word	0xfffeff8f
 8012c78:	40010000 	.word	0x40010000
 8012c7c:	40010400 	.word	0x40010400
 8012c80:	40014000 	.word	0x40014000
 8012c84:	40014400 	.word	0x40014400
 8012c88:	40014800 	.word	0x40014800

08012c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b087      	sub	sp, #28
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6a1b      	ldr	r3, [r3, #32]
 8012c9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6a1b      	ldr	r3, [r3, #32]
 8012ca0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	685b      	ldr	r3, [r3, #4]
 8012cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	69db      	ldr	r3, [r3, #28]
 8012cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012cb4:	68fa      	ldr	r2, [r7, #12]
 8012cb6:	4b24      	ldr	r3, [pc, #144]	; (8012d48 <TIM_OC4_SetConfig+0xbc>)
 8012cb8:	4013      	ands	r3, r2
 8012cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	021b      	lsls	r3, r3, #8
 8012cca:	68fa      	ldr	r2, [r7, #12]
 8012ccc:	4313      	orrs	r3, r2
 8012cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	031b      	lsls	r3, r3, #12
 8012cde:	693a      	ldr	r2, [r7, #16]
 8012ce0:	4313      	orrs	r3, r2
 8012ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	4a19      	ldr	r2, [pc, #100]	; (8012d4c <TIM_OC4_SetConfig+0xc0>)
 8012ce8:	4293      	cmp	r3, r2
 8012cea:	d00f      	beq.n	8012d0c <TIM_OC4_SetConfig+0x80>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	4a18      	ldr	r2, [pc, #96]	; (8012d50 <TIM_OC4_SetConfig+0xc4>)
 8012cf0:	4293      	cmp	r3, r2
 8012cf2:	d00b      	beq.n	8012d0c <TIM_OC4_SetConfig+0x80>
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	4a17      	ldr	r2, [pc, #92]	; (8012d54 <TIM_OC4_SetConfig+0xc8>)
 8012cf8:	4293      	cmp	r3, r2
 8012cfa:	d007      	beq.n	8012d0c <TIM_OC4_SetConfig+0x80>
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	4a16      	ldr	r2, [pc, #88]	; (8012d58 <TIM_OC4_SetConfig+0xcc>)
 8012d00:	4293      	cmp	r3, r2
 8012d02:	d003      	beq.n	8012d0c <TIM_OC4_SetConfig+0x80>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	4a15      	ldr	r2, [pc, #84]	; (8012d5c <TIM_OC4_SetConfig+0xd0>)
 8012d08:	4293      	cmp	r3, r2
 8012d0a:	d109      	bne.n	8012d20 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	695b      	ldr	r3, [r3, #20]
 8012d18:	019b      	lsls	r3, r3, #6
 8012d1a:	697a      	ldr	r2, [r7, #20]
 8012d1c:	4313      	orrs	r3, r2
 8012d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	697a      	ldr	r2, [r7, #20]
 8012d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	68fa      	ldr	r2, [r7, #12]
 8012d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	685a      	ldr	r2, [r3, #4]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	693a      	ldr	r2, [r7, #16]
 8012d38:	621a      	str	r2, [r3, #32]
}
 8012d3a:	bf00      	nop
 8012d3c:	371c      	adds	r7, #28
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d44:	4770      	bx	lr
 8012d46:	bf00      	nop
 8012d48:	feff8fff 	.word	0xfeff8fff
 8012d4c:	40010000 	.word	0x40010000
 8012d50:	40010400 	.word	0x40010400
 8012d54:	40014000 	.word	0x40014000
 8012d58:	40014400 	.word	0x40014400
 8012d5c:	40014800 	.word	0x40014800

08012d60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012d60:	b480      	push	{r7}
 8012d62:	b087      	sub	sp, #28
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6a1b      	ldr	r3, [r3, #32]
 8012d6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6a1b      	ldr	r3, [r3, #32]
 8012d74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	685b      	ldr	r3, [r3, #4]
 8012d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012d88:	68fa      	ldr	r2, [r7, #12]
 8012d8a:	4b21      	ldr	r3, [pc, #132]	; (8012e10 <TIM_OC5_SetConfig+0xb0>)
 8012d8c:	4013      	ands	r3, r2
 8012d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	68fa      	ldr	r2, [r7, #12]
 8012d96:	4313      	orrs	r3, r2
 8012d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012da0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	041b      	lsls	r3, r3, #16
 8012da8:	693a      	ldr	r2, [r7, #16]
 8012daa:	4313      	orrs	r3, r2
 8012dac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	4a18      	ldr	r2, [pc, #96]	; (8012e14 <TIM_OC5_SetConfig+0xb4>)
 8012db2:	4293      	cmp	r3, r2
 8012db4:	d00f      	beq.n	8012dd6 <TIM_OC5_SetConfig+0x76>
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	4a17      	ldr	r2, [pc, #92]	; (8012e18 <TIM_OC5_SetConfig+0xb8>)
 8012dba:	4293      	cmp	r3, r2
 8012dbc:	d00b      	beq.n	8012dd6 <TIM_OC5_SetConfig+0x76>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	4a16      	ldr	r2, [pc, #88]	; (8012e1c <TIM_OC5_SetConfig+0xbc>)
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	d007      	beq.n	8012dd6 <TIM_OC5_SetConfig+0x76>
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	4a15      	ldr	r2, [pc, #84]	; (8012e20 <TIM_OC5_SetConfig+0xc0>)
 8012dca:	4293      	cmp	r3, r2
 8012dcc:	d003      	beq.n	8012dd6 <TIM_OC5_SetConfig+0x76>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	4a14      	ldr	r2, [pc, #80]	; (8012e24 <TIM_OC5_SetConfig+0xc4>)
 8012dd2:	4293      	cmp	r3, r2
 8012dd4:	d109      	bne.n	8012dea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	695b      	ldr	r3, [r3, #20]
 8012de2:	021b      	lsls	r3, r3, #8
 8012de4:	697a      	ldr	r2, [r7, #20]
 8012de6:	4313      	orrs	r3, r2
 8012de8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	697a      	ldr	r2, [r7, #20]
 8012dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	68fa      	ldr	r2, [r7, #12]
 8012df4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	685a      	ldr	r2, [r3, #4]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	693a      	ldr	r2, [r7, #16]
 8012e02:	621a      	str	r2, [r3, #32]
}
 8012e04:	bf00      	nop
 8012e06:	371c      	adds	r7, #28
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0e:	4770      	bx	lr
 8012e10:	fffeff8f 	.word	0xfffeff8f
 8012e14:	40010000 	.word	0x40010000
 8012e18:	40010400 	.word	0x40010400
 8012e1c:	40014000 	.word	0x40014000
 8012e20:	40014400 	.word	0x40014400
 8012e24:	40014800 	.word	0x40014800

08012e28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012e28:	b480      	push	{r7}
 8012e2a:	b087      	sub	sp, #28
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6a1b      	ldr	r3, [r3, #32]
 8012e36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6a1b      	ldr	r3, [r3, #32]
 8012e3c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012e50:	68fa      	ldr	r2, [r7, #12]
 8012e52:	4b22      	ldr	r3, [pc, #136]	; (8012edc <TIM_OC6_SetConfig+0xb4>)
 8012e54:	4013      	ands	r3, r2
 8012e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	021b      	lsls	r3, r3, #8
 8012e5e:	68fa      	ldr	r2, [r7, #12]
 8012e60:	4313      	orrs	r3, r2
 8012e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	689b      	ldr	r3, [r3, #8]
 8012e70:	051b      	lsls	r3, r3, #20
 8012e72:	693a      	ldr	r2, [r7, #16]
 8012e74:	4313      	orrs	r3, r2
 8012e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	4a19      	ldr	r2, [pc, #100]	; (8012ee0 <TIM_OC6_SetConfig+0xb8>)
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d00f      	beq.n	8012ea0 <TIM_OC6_SetConfig+0x78>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	4a18      	ldr	r2, [pc, #96]	; (8012ee4 <TIM_OC6_SetConfig+0xbc>)
 8012e84:	4293      	cmp	r3, r2
 8012e86:	d00b      	beq.n	8012ea0 <TIM_OC6_SetConfig+0x78>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	4a17      	ldr	r2, [pc, #92]	; (8012ee8 <TIM_OC6_SetConfig+0xc0>)
 8012e8c:	4293      	cmp	r3, r2
 8012e8e:	d007      	beq.n	8012ea0 <TIM_OC6_SetConfig+0x78>
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	4a16      	ldr	r2, [pc, #88]	; (8012eec <TIM_OC6_SetConfig+0xc4>)
 8012e94:	4293      	cmp	r3, r2
 8012e96:	d003      	beq.n	8012ea0 <TIM_OC6_SetConfig+0x78>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	4a15      	ldr	r2, [pc, #84]	; (8012ef0 <TIM_OC6_SetConfig+0xc8>)
 8012e9c:	4293      	cmp	r3, r2
 8012e9e:	d109      	bne.n	8012eb4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	695b      	ldr	r3, [r3, #20]
 8012eac:	029b      	lsls	r3, r3, #10
 8012eae:	697a      	ldr	r2, [r7, #20]
 8012eb0:	4313      	orrs	r3, r2
 8012eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	697a      	ldr	r2, [r7, #20]
 8012eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	68fa      	ldr	r2, [r7, #12]
 8012ebe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	685a      	ldr	r2, [r3, #4]
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	693a      	ldr	r2, [r7, #16]
 8012ecc:	621a      	str	r2, [r3, #32]
}
 8012ece:	bf00      	nop
 8012ed0:	371c      	adds	r7, #28
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr
 8012eda:	bf00      	nop
 8012edc:	feff8fff 	.word	0xfeff8fff
 8012ee0:	40010000 	.word	0x40010000
 8012ee4:	40010400 	.word	0x40010400
 8012ee8:	40014000 	.word	0x40014000
 8012eec:	40014400 	.word	0x40014400
 8012ef0:	40014800 	.word	0x40014800

08012ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	b087      	sub	sp, #28
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	60f8      	str	r0, [r7, #12]
 8012efc:	60b9      	str	r1, [r7, #8]
 8012efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	6a1b      	ldr	r3, [r3, #32]
 8012f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	6a1b      	ldr	r3, [r3, #32]
 8012f0a:	f023 0201 	bic.w	r2, r3, #1
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	699b      	ldr	r3, [r3, #24]
 8012f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	011b      	lsls	r3, r3, #4
 8012f24:	693a      	ldr	r2, [r7, #16]
 8012f26:	4313      	orrs	r3, r2
 8012f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	f023 030a 	bic.w	r3, r3, #10
 8012f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012f32:	697a      	ldr	r2, [r7, #20]
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	4313      	orrs	r3, r2
 8012f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	693a      	ldr	r2, [r7, #16]
 8012f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	697a      	ldr	r2, [r7, #20]
 8012f44:	621a      	str	r2, [r3, #32]
}
 8012f46:	bf00      	nop
 8012f48:	371c      	adds	r7, #28
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f50:	4770      	bx	lr

08012f52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012f52:	b480      	push	{r7}
 8012f54:	b087      	sub	sp, #28
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	60f8      	str	r0, [r7, #12]
 8012f5a:	60b9      	str	r1, [r7, #8]
 8012f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	6a1b      	ldr	r3, [r3, #32]
 8012f62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	6a1b      	ldr	r3, [r3, #32]
 8012f68:	f023 0210 	bic.w	r2, r3, #16
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	699b      	ldr	r3, [r3, #24]
 8012f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	031b      	lsls	r3, r3, #12
 8012f82:	693a      	ldr	r2, [r7, #16]
 8012f84:	4313      	orrs	r3, r2
 8012f86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012f8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	011b      	lsls	r3, r3, #4
 8012f94:	697a      	ldr	r2, [r7, #20]
 8012f96:	4313      	orrs	r3, r2
 8012f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	693a      	ldr	r2, [r7, #16]
 8012f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	697a      	ldr	r2, [r7, #20]
 8012fa4:	621a      	str	r2, [r3, #32]
}
 8012fa6:	bf00      	nop
 8012fa8:	371c      	adds	r7, #28
 8012faa:	46bd      	mov	sp, r7
 8012fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb0:	4770      	bx	lr
	...

08012fb4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012fb4:	b480      	push	{r7}
 8012fb6:	b085      	sub	sp, #20
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	689b      	ldr	r3, [r3, #8]
 8012fc2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012fc4:	68fa      	ldr	r2, [r7, #12]
 8012fc6:	4b09      	ldr	r3, [pc, #36]	; (8012fec <TIM_ITRx_SetConfig+0x38>)
 8012fc8:	4013      	ands	r3, r2
 8012fca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012fcc:	683a      	ldr	r2, [r7, #0]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	4313      	orrs	r3, r2
 8012fd2:	f043 0307 	orr.w	r3, r3, #7
 8012fd6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	68fa      	ldr	r2, [r7, #12]
 8012fdc:	609a      	str	r2, [r3, #8]
}
 8012fde:	bf00      	nop
 8012fe0:	3714      	adds	r7, #20
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe8:	4770      	bx	lr
 8012fea:	bf00      	nop
 8012fec:	ffcfff8f 	.word	0xffcfff8f

08012ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	b087      	sub	sp, #28
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	60f8      	str	r0, [r7, #12]
 8012ff8:	60b9      	str	r1, [r7, #8]
 8012ffa:	607a      	str	r2, [r7, #4]
 8012ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	689b      	ldr	r3, [r3, #8]
 8013002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801300a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	021a      	lsls	r2, r3, #8
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	431a      	orrs	r2, r3
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	4313      	orrs	r3, r2
 8013018:	697a      	ldr	r2, [r7, #20]
 801301a:	4313      	orrs	r3, r2
 801301c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	697a      	ldr	r2, [r7, #20]
 8013022:	609a      	str	r2, [r3, #8]
}
 8013024:	bf00      	nop
 8013026:	371c      	adds	r7, #28
 8013028:	46bd      	mov	sp, r7
 801302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302e:	4770      	bx	lr

08013030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013030:	b480      	push	{r7}
 8013032:	b087      	sub	sp, #28
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	f003 031f 	and.w	r3, r3, #31
 8013042:	2201      	movs	r2, #1
 8013044:	fa02 f303 	lsl.w	r3, r2, r3
 8013048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	6a1a      	ldr	r2, [r3, #32]
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	43db      	mvns	r3, r3
 8013052:	401a      	ands	r2, r3
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	6a1a      	ldr	r2, [r3, #32]
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	f003 031f 	and.w	r3, r3, #31
 8013062:	6879      	ldr	r1, [r7, #4]
 8013064:	fa01 f303 	lsl.w	r3, r1, r3
 8013068:	431a      	orrs	r2, r3
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	621a      	str	r2, [r3, #32]
}
 801306e:	bf00      	nop
 8013070:	371c      	adds	r7, #28
 8013072:	46bd      	mov	sp, r7
 8013074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013078:	4770      	bx	lr
	...

0801307c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801307c:	b480      	push	{r7}
 801307e:	b085      	sub	sp, #20
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801308c:	2b01      	cmp	r3, #1
 801308e:	d101      	bne.n	8013094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013090:	2302      	movs	r3, #2
 8013092:	e06d      	b.n	8013170 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2201      	movs	r2, #1
 8013098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2202      	movs	r2, #2
 80130a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	689b      	ldr	r3, [r3, #8]
 80130b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	4a30      	ldr	r2, [pc, #192]	; (801317c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d004      	beq.n	80130c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	4a2f      	ldr	r2, [pc, #188]	; (8013180 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80130c4:	4293      	cmp	r3, r2
 80130c6:	d108      	bne.n	80130da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80130ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	685b      	ldr	r3, [r3, #4]
 80130d4:	68fa      	ldr	r2, [r7, #12]
 80130d6:	4313      	orrs	r3, r2
 80130d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80130e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	68fa      	ldr	r2, [r7, #12]
 80130e8:	4313      	orrs	r3, r2
 80130ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	68fa      	ldr	r2, [r7, #12]
 80130f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	4a20      	ldr	r2, [pc, #128]	; (801317c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80130fa:	4293      	cmp	r3, r2
 80130fc:	d022      	beq.n	8013144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013106:	d01d      	beq.n	8013144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4a1d      	ldr	r2, [pc, #116]	; (8013184 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801310e:	4293      	cmp	r3, r2
 8013110:	d018      	beq.n	8013144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	4a1c      	ldr	r2, [pc, #112]	; (8013188 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013118:	4293      	cmp	r3, r2
 801311a:	d013      	beq.n	8013144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4a1a      	ldr	r2, [pc, #104]	; (801318c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013122:	4293      	cmp	r3, r2
 8013124:	d00e      	beq.n	8013144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	4a15      	ldr	r2, [pc, #84]	; (8013180 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801312c:	4293      	cmp	r3, r2
 801312e:	d009      	beq.n	8013144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	4a16      	ldr	r2, [pc, #88]	; (8013190 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013136:	4293      	cmp	r3, r2
 8013138:	d004      	beq.n	8013144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	4a15      	ldr	r2, [pc, #84]	; (8013194 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013140:	4293      	cmp	r3, r2
 8013142:	d10c      	bne.n	801315e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801314a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	689b      	ldr	r3, [r3, #8]
 8013150:	68ba      	ldr	r2, [r7, #8]
 8013152:	4313      	orrs	r3, r2
 8013154:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	68ba      	ldr	r2, [r7, #8]
 801315c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2201      	movs	r2, #1
 8013162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2200      	movs	r2, #0
 801316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801316e:	2300      	movs	r3, #0
}
 8013170:	4618      	mov	r0, r3
 8013172:	3714      	adds	r7, #20
 8013174:	46bd      	mov	sp, r7
 8013176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317a:	4770      	bx	lr
 801317c:	40010000 	.word	0x40010000
 8013180:	40010400 	.word	0x40010400
 8013184:	40000400 	.word	0x40000400
 8013188:	40000800 	.word	0x40000800
 801318c:	40000c00 	.word	0x40000c00
 8013190:	40001800 	.word	0x40001800
 8013194:	40014000 	.word	0x40014000

08013198 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013198:	b480      	push	{r7}
 801319a:	b085      	sub	sp, #20
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80131a2:	2300      	movs	r3, #0
 80131a4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d101      	bne.n	80131b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80131b0:	2302      	movs	r3, #2
 80131b2:	e065      	b.n	8013280 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2201      	movs	r2, #1
 80131b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	4313      	orrs	r3, r2
 80131c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	689b      	ldr	r3, [r3, #8]
 80131d4:	4313      	orrs	r3, r2
 80131d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	4313      	orrs	r3, r2
 80131e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	4313      	orrs	r3, r2
 80131f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	691b      	ldr	r3, [r3, #16]
 80131fe:	4313      	orrs	r3, r2
 8013200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	695b      	ldr	r3, [r3, #20]
 801320c:	4313      	orrs	r3, r2
 801320e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801321a:	4313      	orrs	r3, r2
 801321c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	699b      	ldr	r3, [r3, #24]
 8013228:	041b      	lsls	r3, r3, #16
 801322a:	4313      	orrs	r3, r2
 801322c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	4a16      	ldr	r2, [pc, #88]	; (801328c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013234:	4293      	cmp	r3, r2
 8013236:	d004      	beq.n	8013242 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	4a14      	ldr	r2, [pc, #80]	; (8013290 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801323e:	4293      	cmp	r3, r2
 8013240:	d115      	bne.n	801326e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801324c:	051b      	lsls	r3, r3, #20
 801324e:	4313      	orrs	r3, r2
 8013250:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	69db      	ldr	r3, [r3, #28]
 801325c:	4313      	orrs	r3, r2
 801325e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	6a1b      	ldr	r3, [r3, #32]
 801326a:	4313      	orrs	r3, r2
 801326c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	68fa      	ldr	r2, [r7, #12]
 8013274:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2200      	movs	r2, #0
 801327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801327e:	2300      	movs	r3, #0
}
 8013280:	4618      	mov	r0, r3
 8013282:	3714      	adds	r7, #20
 8013284:	46bd      	mov	sp, r7
 8013286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328a:	4770      	bx	lr
 801328c:	40010000 	.word	0x40010000
 8013290:	40010400 	.word	0x40010400

08013294 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013294:	b480      	push	{r7}
 8013296:	b083      	sub	sp, #12
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801329c:	bf00      	nop
 801329e:	370c      	adds	r7, #12
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr

080132a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80132a8:	b480      	push	{r7}
 80132aa:	b083      	sub	sp, #12
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80132b0:	bf00      	nop
 80132b2:	370c      	adds	r7, #12
 80132b4:	46bd      	mov	sp, r7
 80132b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ba:	4770      	bx	lr

080132bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80132c4:	bf00      	nop
 80132c6:	370c      	adds	r7, #12
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr

080132d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d101      	bne.n	80132e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80132de:	2301      	movs	r3, #1
 80132e0:	e042      	b.n	8013368 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d106      	bne.n	80132fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2200      	movs	r2, #0
 80132f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	f7f1 f911 	bl	800451c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2224      	movs	r2, #36	; 0x24
 80132fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	681a      	ldr	r2, [r3, #0]
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	f022 0201 	bic.w	r2, r2, #1
 8013310:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013316:	2b00      	cmp	r3, #0
 8013318:	d002      	beq.n	8013320 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f001 fbc2 	bl	8014aa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f000 fe57 	bl	8013fd4 <UART_SetConfig>
 8013326:	4603      	mov	r3, r0
 8013328:	2b01      	cmp	r3, #1
 801332a:	d101      	bne.n	8013330 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801332c:	2301      	movs	r3, #1
 801332e:	e01b      	b.n	8013368 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	685a      	ldr	r2, [r3, #4]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801333e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	689a      	ldr	r2, [r3, #8]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801334e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	f042 0201 	orr.w	r2, r2, #1
 801335e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f001 fc41 	bl	8014be8 <UART_CheckIdleState>
 8013366:	4603      	mov	r3, r0
}
 8013368:	4618      	mov	r0, r3
 801336a:	3708      	adds	r7, #8
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b08a      	sub	sp, #40	; 0x28
 8013374:	af02      	add	r7, sp, #8
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	603b      	str	r3, [r7, #0]
 801337c:	4613      	mov	r3, r2
 801337e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013386:	2b20      	cmp	r3, #32
 8013388:	d17b      	bne.n	8013482 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d002      	beq.n	8013396 <HAL_UART_Transmit+0x26>
 8013390:	88fb      	ldrh	r3, [r7, #6]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d101      	bne.n	801339a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013396:	2301      	movs	r3, #1
 8013398:	e074      	b.n	8013484 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	2200      	movs	r2, #0
 801339e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2221      	movs	r2, #33	; 0x21
 80133a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80133aa:	f7f1 fd05 	bl	8004db8 <HAL_GetTick>
 80133ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	88fa      	ldrh	r2, [r7, #6]
 80133b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	88fa      	ldrh	r2, [r7, #6]
 80133bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	689b      	ldr	r3, [r3, #8]
 80133c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80133c8:	d108      	bne.n	80133dc <HAL_UART_Transmit+0x6c>
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	691b      	ldr	r3, [r3, #16]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d104      	bne.n	80133dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80133d2:	2300      	movs	r3, #0
 80133d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	61bb      	str	r3, [r7, #24]
 80133da:	e003      	b.n	80133e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80133e0:	2300      	movs	r3, #0
 80133e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80133e4:	e030      	b.n	8013448 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	9300      	str	r3, [sp, #0]
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	2200      	movs	r2, #0
 80133ee:	2180      	movs	r1, #128	; 0x80
 80133f0:	68f8      	ldr	r0, [r7, #12]
 80133f2:	f001 fca3 	bl	8014d3c <UART_WaitOnFlagUntilTimeout>
 80133f6:	4603      	mov	r3, r0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d005      	beq.n	8013408 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2220      	movs	r2, #32
 8013400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8013404:	2303      	movs	r3, #3
 8013406:	e03d      	b.n	8013484 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013408:	69fb      	ldr	r3, [r7, #28]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d10b      	bne.n	8013426 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801340e:	69bb      	ldr	r3, [r7, #24]
 8013410:	881b      	ldrh	r3, [r3, #0]
 8013412:	461a      	mov	r2, r3
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801341c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	3302      	adds	r3, #2
 8013422:	61bb      	str	r3, [r7, #24]
 8013424:	e007      	b.n	8013436 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013426:	69fb      	ldr	r3, [r7, #28]
 8013428:	781a      	ldrb	r2, [r3, #0]
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013430:	69fb      	ldr	r3, [r7, #28]
 8013432:	3301      	adds	r3, #1
 8013434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801343c:	b29b      	uxth	r3, r3
 801343e:	3b01      	subs	r3, #1
 8013440:	b29a      	uxth	r2, r3
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801344e:	b29b      	uxth	r3, r3
 8013450:	2b00      	cmp	r3, #0
 8013452:	d1c8      	bne.n	80133e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	9300      	str	r3, [sp, #0]
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	2200      	movs	r2, #0
 801345c:	2140      	movs	r1, #64	; 0x40
 801345e:	68f8      	ldr	r0, [r7, #12]
 8013460:	f001 fc6c 	bl	8014d3c <UART_WaitOnFlagUntilTimeout>
 8013464:	4603      	mov	r3, r0
 8013466:	2b00      	cmp	r3, #0
 8013468:	d005      	beq.n	8013476 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	2220      	movs	r2, #32
 801346e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8013472:	2303      	movs	r3, #3
 8013474:	e006      	b.n	8013484 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	2220      	movs	r2, #32
 801347a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801347e:	2300      	movs	r3, #0
 8013480:	e000      	b.n	8013484 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8013482:	2302      	movs	r3, #2
  }
}
 8013484:	4618      	mov	r0, r3
 8013486:	3720      	adds	r7, #32
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}

0801348c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b08a      	sub	sp, #40	; 0x28
 8013490:	af02      	add	r7, sp, #8
 8013492:	60f8      	str	r0, [r7, #12]
 8013494:	60b9      	str	r1, [r7, #8]
 8013496:	603b      	str	r3, [r7, #0]
 8013498:	4613      	mov	r3, r2
 801349a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80134a2:	2b20      	cmp	r3, #32
 80134a4:	f040 80b5 	bne.w	8013612 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d002      	beq.n	80134b4 <HAL_UART_Receive+0x28>
 80134ae:	88fb      	ldrh	r3, [r7, #6]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d101      	bne.n	80134b8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80134b4:	2301      	movs	r3, #1
 80134b6:	e0ad      	b.n	8013614 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2200      	movs	r2, #0
 80134bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	2222      	movs	r2, #34	; 0x22
 80134c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2200      	movs	r2, #0
 80134cc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80134ce:	f7f1 fc73 	bl	8004db8 <HAL_GetTick>
 80134d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	88fa      	ldrh	r2, [r7, #6]
 80134d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	88fa      	ldrh	r2, [r7, #6]
 80134e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	689b      	ldr	r3, [r3, #8]
 80134e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80134ec:	d10e      	bne.n	801350c <HAL_UART_Receive+0x80>
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	691b      	ldr	r3, [r3, #16]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d105      	bne.n	8013502 <HAL_UART_Receive+0x76>
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80134fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013500:	e02d      	b.n	801355e <HAL_UART_Receive+0xd2>
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	22ff      	movs	r2, #255	; 0xff
 8013506:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801350a:	e028      	b.n	801355e <HAL_UART_Receive+0xd2>
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	689b      	ldr	r3, [r3, #8]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d10d      	bne.n	8013530 <HAL_UART_Receive+0xa4>
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	691b      	ldr	r3, [r3, #16]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d104      	bne.n	8013526 <HAL_UART_Receive+0x9a>
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	22ff      	movs	r2, #255	; 0xff
 8013520:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013524:	e01b      	b.n	801355e <HAL_UART_Receive+0xd2>
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	227f      	movs	r2, #127	; 0x7f
 801352a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801352e:	e016      	b.n	801355e <HAL_UART_Receive+0xd2>
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	689b      	ldr	r3, [r3, #8]
 8013534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013538:	d10d      	bne.n	8013556 <HAL_UART_Receive+0xca>
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	691b      	ldr	r3, [r3, #16]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d104      	bne.n	801354c <HAL_UART_Receive+0xc0>
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	227f      	movs	r2, #127	; 0x7f
 8013546:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801354a:	e008      	b.n	801355e <HAL_UART_Receive+0xd2>
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	223f      	movs	r2, #63	; 0x3f
 8013550:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013554:	e003      	b.n	801355e <HAL_UART_Receive+0xd2>
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2200      	movs	r2, #0
 801355a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013564:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	689b      	ldr	r3, [r3, #8]
 801356a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801356e:	d108      	bne.n	8013582 <HAL_UART_Receive+0xf6>
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	691b      	ldr	r3, [r3, #16]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d104      	bne.n	8013582 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8013578:	2300      	movs	r3, #0
 801357a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	61bb      	str	r3, [r7, #24]
 8013580:	e003      	b.n	801358a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013586:	2300      	movs	r3, #0
 8013588:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801358a:	e036      	b.n	80135fa <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	2200      	movs	r2, #0
 8013594:	2120      	movs	r1, #32
 8013596:	68f8      	ldr	r0, [r7, #12]
 8013598:	f001 fbd0 	bl	8014d3c <UART_WaitOnFlagUntilTimeout>
 801359c:	4603      	mov	r3, r0
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d005      	beq.n	80135ae <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2220      	movs	r2, #32
 80135a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80135aa:	2303      	movs	r3, #3
 80135ac:	e032      	b.n	8013614 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80135ae:	69fb      	ldr	r3, [r7, #28]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d10c      	bne.n	80135ce <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	8a7b      	ldrh	r3, [r7, #18]
 80135be:	4013      	ands	r3, r2
 80135c0:	b29a      	uxth	r2, r3
 80135c2:	69bb      	ldr	r3, [r7, #24]
 80135c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	3302      	adds	r3, #2
 80135ca:	61bb      	str	r3, [r7, #24]
 80135cc:	e00c      	b.n	80135e8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135d4:	b2da      	uxtb	r2, r3
 80135d6:	8a7b      	ldrh	r3, [r7, #18]
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	4013      	ands	r3, r2
 80135dc:	b2da      	uxtb	r2, r3
 80135de:	69fb      	ldr	r3, [r7, #28]
 80135e0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	3301      	adds	r3, #1
 80135e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	3b01      	subs	r3, #1
 80135f2:	b29a      	uxth	r2, r3
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013600:	b29b      	uxth	r3, r3
 8013602:	2b00      	cmp	r3, #0
 8013604:	d1c2      	bne.n	801358c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	2220      	movs	r2, #32
 801360a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801360e:	2300      	movs	r3, #0
 8013610:	e000      	b.n	8013614 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8013612:	2302      	movs	r3, #2
  }
}
 8013614:	4618      	mov	r0, r3
 8013616:	3720      	adds	r7, #32
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}

0801361c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b08a      	sub	sp, #40	; 0x28
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	4613      	mov	r3, r2
 8013628:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013630:	2b20      	cmp	r3, #32
 8013632:	d137      	bne.n	80136a4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d002      	beq.n	8013640 <HAL_UART_Receive_IT+0x24>
 801363a:	88fb      	ldrh	r3, [r7, #6]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d101      	bne.n	8013644 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8013640:	2301      	movs	r3, #1
 8013642:	e030      	b.n	80136a6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	2200      	movs	r2, #0
 8013648:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	4a18      	ldr	r2, [pc, #96]	; (80136b0 <HAL_UART_Receive_IT+0x94>)
 8013650:	4293      	cmp	r3, r2
 8013652:	d01f      	beq.n	8013694 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	685b      	ldr	r3, [r3, #4]
 801365a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801365e:	2b00      	cmp	r3, #0
 8013660:	d018      	beq.n	8013694 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	e853 3f00 	ldrex	r3, [r3]
 801366e:	613b      	str	r3, [r7, #16]
   return(result);
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013676:	627b      	str	r3, [r7, #36]	; 0x24
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	461a      	mov	r2, r3
 801367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013680:	623b      	str	r3, [r7, #32]
 8013682:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013684:	69f9      	ldr	r1, [r7, #28]
 8013686:	6a3a      	ldr	r2, [r7, #32]
 8013688:	e841 2300 	strex	r3, r2, [r1]
 801368c:	61bb      	str	r3, [r7, #24]
   return(result);
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d1e6      	bne.n	8013662 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013694:	88fb      	ldrh	r3, [r7, #6]
 8013696:	461a      	mov	r2, r3
 8013698:	68b9      	ldr	r1, [r7, #8]
 801369a:	68f8      	ldr	r0, [r7, #12]
 801369c:	f001 fbbc 	bl	8014e18 <UART_Start_Receive_IT>
 80136a0:	4603      	mov	r3, r0
 80136a2:	e000      	b.n	80136a6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80136a4:	2302      	movs	r3, #2
  }
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	3728      	adds	r7, #40	; 0x28
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	bf00      	nop
 80136b0:	58000c00 	.word	0x58000c00

080136b4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b09a      	sub	sp, #104	; 0x68
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136c4:	e853 3f00 	ldrex	r3, [r3]
 80136c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80136ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80136d0:	667b      	str	r3, [r7, #100]	; 0x64
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	461a      	mov	r2, r3
 80136d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136da:	657b      	str	r3, [r7, #84]	; 0x54
 80136dc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80136e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80136e2:	e841 2300 	strex	r3, r2, [r1]
 80136e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80136e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d1e6      	bne.n	80136bc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	3308      	adds	r3, #8
 80136f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136f8:	e853 3f00 	ldrex	r3, [r3]
 80136fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80136fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013700:	4b46      	ldr	r3, [pc, #280]	; (801381c <HAL_UART_AbortReceive+0x168>)
 8013702:	4013      	ands	r3, r2
 8013704:	663b      	str	r3, [r7, #96]	; 0x60
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	3308      	adds	r3, #8
 801370c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801370e:	643a      	str	r2, [r7, #64]	; 0x40
 8013710:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013712:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013714:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013716:	e841 2300 	strex	r3, r2, [r1]
 801371a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801371e:	2b00      	cmp	r3, #0
 8013720:	d1e5      	bne.n	80136ee <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013726:	2b01      	cmp	r3, #1
 8013728:	d118      	bne.n	801375c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013730:	6a3b      	ldr	r3, [r7, #32]
 8013732:	e853 3f00 	ldrex	r3, [r3]
 8013736:	61fb      	str	r3, [r7, #28]
   return(result);
 8013738:	69fb      	ldr	r3, [r7, #28]
 801373a:	f023 0310 	bic.w	r3, r3, #16
 801373e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	461a      	mov	r2, r3
 8013746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013748:	62fb      	str	r3, [r7, #44]	; 0x2c
 801374a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801374c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801374e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013750:	e841 2300 	strex	r3, r2, [r1]
 8013754:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013758:	2b00      	cmp	r3, #0
 801375a:	d1e6      	bne.n	801372a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	689b      	ldr	r3, [r3, #8]
 8013762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013766:	2b40      	cmp	r3, #64	; 0x40
 8013768:	d13b      	bne.n	80137e2 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	3308      	adds	r3, #8
 8013770:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	e853 3f00 	ldrex	r3, [r3]
 8013778:	60bb      	str	r3, [r7, #8]
   return(result);
 801377a:	68bb      	ldr	r3, [r7, #8]
 801377c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013780:	65bb      	str	r3, [r7, #88]	; 0x58
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	3308      	adds	r3, #8
 8013788:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801378a:	61ba      	str	r2, [r7, #24]
 801378c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801378e:	6979      	ldr	r1, [r7, #20]
 8013790:	69ba      	ldr	r2, [r7, #24]
 8013792:	e841 2300 	strex	r3, r2, [r1]
 8013796:	613b      	str	r3, [r7, #16]
   return(result);
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d1e5      	bne.n	801376a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d01c      	beq.n	80137e2 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137ae:	2200      	movs	r2, #0
 80137b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7f4 fa63 	bl	8007c84 <HAL_DMA_Abort>
 80137be:	4603      	mov	r3, r0
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d00e      	beq.n	80137e2 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7f5 fef6 	bl	80095bc <HAL_DMA_GetError>
 80137d0:	4603      	mov	r3, r0
 80137d2:	2b20      	cmp	r3, #32
 80137d4:	d105      	bne.n	80137e2 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2210      	movs	r2, #16
 80137da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80137de:	2303      	movs	r3, #3
 80137e0:	e017      	b.n	8013812 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2200      	movs	r2, #0
 80137e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	220f      	movs	r2, #15
 80137f0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	699a      	ldr	r2, [r3, #24]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f042 0208 	orr.w	r2, r2, #8
 8013800:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2220      	movs	r2, #32
 8013806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2200      	movs	r2, #0
 801380e:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8013810:	2300      	movs	r3, #0
}
 8013812:	4618      	mov	r0, r3
 8013814:	3768      	adds	r7, #104	; 0x68
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}
 801381a:	bf00      	nop
 801381c:	effffffe 	.word	0xeffffffe

08013820 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b0ba      	sub	sp, #232	; 0xe8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	69db      	ldr	r3, [r3, #28]
 801382e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	689b      	ldr	r3, [r3, #8]
 8013842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013846:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801384a:	f640 030f 	movw	r3, #2063	; 0x80f
 801384e:	4013      	ands	r3, r2
 8013850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013858:	2b00      	cmp	r3, #0
 801385a:	d11b      	bne.n	8013894 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801385c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013860:	f003 0320 	and.w	r3, r3, #32
 8013864:	2b00      	cmp	r3, #0
 8013866:	d015      	beq.n	8013894 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801386c:	f003 0320 	and.w	r3, r3, #32
 8013870:	2b00      	cmp	r3, #0
 8013872:	d105      	bne.n	8013880 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801387c:	2b00      	cmp	r3, #0
 801387e:	d009      	beq.n	8013894 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013884:	2b00      	cmp	r3, #0
 8013886:	f000 8377 	beq.w	8013f78 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	4798      	blx	r3
      }
      return;
 8013892:	e371      	b.n	8013f78 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013898:	2b00      	cmp	r3, #0
 801389a:	f000 8123 	beq.w	8013ae4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801389e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80138a2:	4b8d      	ldr	r3, [pc, #564]	; (8013ad8 <HAL_UART_IRQHandler+0x2b8>)
 80138a4:	4013      	ands	r3, r2
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d106      	bne.n	80138b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80138aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80138ae:	4b8b      	ldr	r3, [pc, #556]	; (8013adc <HAL_UART_IRQHandler+0x2bc>)
 80138b0:	4013      	ands	r3, r2
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	f000 8116 	beq.w	8013ae4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80138b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80138bc:	f003 0301 	and.w	r3, r3, #1
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d011      	beq.n	80138e8 <HAL_UART_IRQHandler+0xc8>
 80138c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80138c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d00b      	beq.n	80138e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	2201      	movs	r2, #1
 80138d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138de:	f043 0201 	orr.w	r2, r3, #1
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80138e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80138ec:	f003 0302 	and.w	r3, r3, #2
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d011      	beq.n	8013918 <HAL_UART_IRQHandler+0xf8>
 80138f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80138f8:	f003 0301 	and.w	r3, r3, #1
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d00b      	beq.n	8013918 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	2202      	movs	r2, #2
 8013906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801390e:	f043 0204 	orr.w	r2, r3, #4
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801391c:	f003 0304 	and.w	r3, r3, #4
 8013920:	2b00      	cmp	r3, #0
 8013922:	d011      	beq.n	8013948 <HAL_UART_IRQHandler+0x128>
 8013924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013928:	f003 0301 	and.w	r3, r3, #1
 801392c:	2b00      	cmp	r3, #0
 801392e:	d00b      	beq.n	8013948 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	2204      	movs	r2, #4
 8013936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801393e:	f043 0202 	orr.w	r2, r3, #2
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801394c:	f003 0308 	and.w	r3, r3, #8
 8013950:	2b00      	cmp	r3, #0
 8013952:	d017      	beq.n	8013984 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013958:	f003 0320 	and.w	r3, r3, #32
 801395c:	2b00      	cmp	r3, #0
 801395e:	d105      	bne.n	801396c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013960:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013964:	4b5c      	ldr	r3, [pc, #368]	; (8013ad8 <HAL_UART_IRQHandler+0x2b8>)
 8013966:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013968:	2b00      	cmp	r3, #0
 801396a:	d00b      	beq.n	8013984 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	2208      	movs	r2, #8
 8013972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801397a:	f043 0208 	orr.w	r2, r3, #8
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801398c:	2b00      	cmp	r3, #0
 801398e:	d012      	beq.n	80139b6 <HAL_UART_IRQHandler+0x196>
 8013990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013994:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013998:	2b00      	cmp	r3, #0
 801399a:	d00c      	beq.n	80139b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80139a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139ac:	f043 0220 	orr.w	r2, r3, #32
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f000 82dd 	beq.w	8013f7c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80139c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80139c6:	f003 0320 	and.w	r3, r3, #32
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d013      	beq.n	80139f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80139ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80139d2:	f003 0320 	and.w	r3, r3, #32
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d105      	bne.n	80139e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80139da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80139de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d007      	beq.n	80139f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d003      	beq.n	80139f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	689b      	ldr	r3, [r3, #8]
 8013a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a0a:	2b40      	cmp	r3, #64	; 0x40
 8013a0c:	d005      	beq.n	8013a1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013a12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d054      	beq.n	8013ac4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f001 fb1e 	bl	801505c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	689b      	ldr	r3, [r3, #8]
 8013a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a2a:	2b40      	cmp	r3, #64	; 0x40
 8013a2c:	d146      	bne.n	8013abc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	3308      	adds	r3, #8
 8013a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013a3c:	e853 3f00 	ldrex	r3, [r3]
 8013a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8013a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	3308      	adds	r3, #8
 8013a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8013a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013a6a:	e841 2300 	strex	r3, r2, [r1]
 8013a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8013a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d1d9      	bne.n	8013a2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d017      	beq.n	8013ab4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a8a:	4a15      	ldr	r2, [pc, #84]	; (8013ae0 <HAL_UART_IRQHandler+0x2c0>)
 8013a8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7f4 fc13 	bl	80082c0 <HAL_DMA_Abort_IT>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d019      	beq.n	8013ad4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013aa8:	687a      	ldr	r2, [r7, #4]
 8013aaa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8013aae:	4610      	mov	r0, r2
 8013ab0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ab2:	e00f      	b.n	8013ad4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f000 fa77 	bl	8013fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013aba:	e00b      	b.n	8013ad4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f000 fa73 	bl	8013fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ac2:	e007      	b.n	8013ad4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f000 fa6f 	bl	8013fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	2200      	movs	r2, #0
 8013ace:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8013ad2:	e253      	b.n	8013f7c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ad4:	bf00      	nop
    return;
 8013ad6:	e251      	b.n	8013f7c <HAL_UART_IRQHandler+0x75c>
 8013ad8:	10000001 	.word	0x10000001
 8013adc:	04000120 	.word	0x04000120
 8013ae0:	08015129 	.word	0x08015129

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ae8:	2b01      	cmp	r3, #1
 8013aea:	f040 81e7 	bne.w	8013ebc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013af2:	f003 0310 	and.w	r3, r3, #16
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	f000 81e0 	beq.w	8013ebc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013b00:	f003 0310 	and.w	r3, r3, #16
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	f000 81d9 	beq.w	8013ebc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	2210      	movs	r2, #16
 8013b10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	689b      	ldr	r3, [r3, #8]
 8013b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b1c:	2b40      	cmp	r3, #64	; 0x40
 8013b1e:	f040 8151 	bne.w	8013dc4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	4a96      	ldr	r2, [pc, #600]	; (8013d84 <HAL_UART_IRQHandler+0x564>)
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	d068      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	4a93      	ldr	r2, [pc, #588]	; (8013d88 <HAL_UART_IRQHandler+0x568>)
 8013b3a:	4293      	cmp	r3, r2
 8013b3c:	d061      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	4a91      	ldr	r2, [pc, #580]	; (8013d8c <HAL_UART_IRQHandler+0x56c>)
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	d05a      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	4a8e      	ldr	r2, [pc, #568]	; (8013d90 <HAL_UART_IRQHandler+0x570>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d053      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	4a8c      	ldr	r2, [pc, #560]	; (8013d94 <HAL_UART_IRQHandler+0x574>)
 8013b64:	4293      	cmp	r3, r2
 8013b66:	d04c      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4a89      	ldr	r2, [pc, #548]	; (8013d98 <HAL_UART_IRQHandler+0x578>)
 8013b72:	4293      	cmp	r3, r2
 8013b74:	d045      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	4a87      	ldr	r2, [pc, #540]	; (8013d9c <HAL_UART_IRQHandler+0x57c>)
 8013b80:	4293      	cmp	r3, r2
 8013b82:	d03e      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	4a84      	ldr	r2, [pc, #528]	; (8013da0 <HAL_UART_IRQHandler+0x580>)
 8013b8e:	4293      	cmp	r3, r2
 8013b90:	d037      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	4a82      	ldr	r2, [pc, #520]	; (8013da4 <HAL_UART_IRQHandler+0x584>)
 8013b9c:	4293      	cmp	r3, r2
 8013b9e:	d030      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	4a7f      	ldr	r2, [pc, #508]	; (8013da8 <HAL_UART_IRQHandler+0x588>)
 8013baa:	4293      	cmp	r3, r2
 8013bac:	d029      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	4a7d      	ldr	r2, [pc, #500]	; (8013dac <HAL_UART_IRQHandler+0x58c>)
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d022      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	4a7a      	ldr	r2, [pc, #488]	; (8013db0 <HAL_UART_IRQHandler+0x590>)
 8013bc6:	4293      	cmp	r3, r2
 8013bc8:	d01b      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	4a78      	ldr	r2, [pc, #480]	; (8013db4 <HAL_UART_IRQHandler+0x594>)
 8013bd4:	4293      	cmp	r3, r2
 8013bd6:	d014      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	4a75      	ldr	r2, [pc, #468]	; (8013db8 <HAL_UART_IRQHandler+0x598>)
 8013be2:	4293      	cmp	r3, r2
 8013be4:	d00d      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	4a73      	ldr	r2, [pc, #460]	; (8013dbc <HAL_UART_IRQHandler+0x59c>)
 8013bf0:	4293      	cmp	r3, r2
 8013bf2:	d006      	beq.n	8013c02 <HAL_UART_IRQHandler+0x3e2>
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	4a70      	ldr	r2, [pc, #448]	; (8013dc0 <HAL_UART_IRQHandler+0x5a0>)
 8013bfe:	4293      	cmp	r3, r2
 8013c00:	d106      	bne.n	8013c10 <HAL_UART_IRQHandler+0x3f0>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	685b      	ldr	r3, [r3, #4]
 8013c0c:	b29b      	uxth	r3, r3
 8013c0e:	e005      	b.n	8013c1c <HAL_UART_IRQHandler+0x3fc>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	b29b      	uxth	r3, r3
 8013c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	f000 81ab 	beq.w	8013f80 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013c30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013c34:	429a      	cmp	r2, r3
 8013c36:	f080 81a3 	bcs.w	8013f80 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013c40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c4a:	69db      	ldr	r3, [r3, #28]
 8013c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c50:	f000 8087 	beq.w	8013d62 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013c60:	e853 3f00 	ldrex	r3, [r3]
 8013c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8013c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	461a      	mov	r2, r3
 8013c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013c7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013c82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8013c8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013c8e:	e841 2300 	strex	r3, r2, [r1]
 8013c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8013c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d1da      	bne.n	8013c54 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	3308      	adds	r3, #8
 8013ca4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013ca8:	e853 3f00 	ldrex	r3, [r3]
 8013cac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8013cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013cb0:	f023 0301 	bic.w	r3, r3, #1
 8013cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	3308      	adds	r3, #8
 8013cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013cc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8013cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013cca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013cce:	e841 2300 	strex	r3, r2, [r1]
 8013cd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8013cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d1e1      	bne.n	8013c9e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	3308      	adds	r3, #8
 8013ce0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013ce4:	e853 3f00 	ldrex	r3, [r3]
 8013ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8013cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	3308      	adds	r3, #8
 8013cfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8013cfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8013d00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013d04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013d06:	e841 2300 	strex	r3, r2, [r1]
 8013d0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8013d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d1e3      	bne.n	8013cda <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2220      	movs	r2, #32
 8013d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d28:	e853 3f00 	ldrex	r3, [r3]
 8013d2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d30:	f023 0310 	bic.w	r3, r3, #16
 8013d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d42:	65bb      	str	r3, [r7, #88]	; 0x58
 8013d44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013d4a:	e841 2300 	strex	r3, r2, [r1]
 8013d4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d1e4      	bne.n	8013d20 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f7f3 ff91 	bl	8007c84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2202      	movs	r2, #2
 8013d66:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013d74:	b29b      	uxth	r3, r3
 8013d76:	1ad3      	subs	r3, r2, r3
 8013d78:	b29b      	uxth	r3, r3
 8013d7a:	4619      	mov	r1, r3
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f000 f91d 	bl	8013fbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013d82:	e0fd      	b.n	8013f80 <HAL_UART_IRQHandler+0x760>
 8013d84:	40020010 	.word	0x40020010
 8013d88:	40020028 	.word	0x40020028
 8013d8c:	40020040 	.word	0x40020040
 8013d90:	40020058 	.word	0x40020058
 8013d94:	40020070 	.word	0x40020070
 8013d98:	40020088 	.word	0x40020088
 8013d9c:	400200a0 	.word	0x400200a0
 8013da0:	400200b8 	.word	0x400200b8
 8013da4:	40020410 	.word	0x40020410
 8013da8:	40020428 	.word	0x40020428
 8013dac:	40020440 	.word	0x40020440
 8013db0:	40020458 	.word	0x40020458
 8013db4:	40020470 	.word	0x40020470
 8013db8:	40020488 	.word	0x40020488
 8013dbc:	400204a0 	.word	0x400204a0
 8013dc0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	1ad3      	subs	r3, r2, r3
 8013dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	f000 80cf 	beq.w	8013f84 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8013de6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	f000 80ca 	beq.w	8013f84 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df8:	e853 3f00 	ldrex	r3, [r3]
 8013dfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013e04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	461a      	mov	r2, r3
 8013e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013e12:	647b      	str	r3, [r7, #68]	; 0x44
 8013e14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e1a:	e841 2300 	strex	r3, r2, [r1]
 8013e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d1e4      	bne.n	8013df0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	3308      	adds	r3, #8
 8013e2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e30:	e853 3f00 	ldrex	r3, [r3]
 8013e34:	623b      	str	r3, [r7, #32]
   return(result);
 8013e36:	6a3a      	ldr	r2, [r7, #32]
 8013e38:	4b55      	ldr	r3, [pc, #340]	; (8013f90 <HAL_UART_IRQHandler+0x770>)
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	3308      	adds	r3, #8
 8013e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013e4a:	633a      	str	r2, [r7, #48]	; 0x30
 8013e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e52:	e841 2300 	strex	r3, r2, [r1]
 8013e56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d1e3      	bne.n	8013e26 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2220      	movs	r2, #32
 8013e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	2200      	movs	r2, #0
 8013e6a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e78:	693b      	ldr	r3, [r7, #16]
 8013e7a:	e853 3f00 	ldrex	r3, [r3]
 8013e7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f023 0310 	bic.w	r3, r3, #16
 8013e86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	461a      	mov	r2, r3
 8013e90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013e94:	61fb      	str	r3, [r7, #28]
 8013e96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e98:	69b9      	ldr	r1, [r7, #24]
 8013e9a:	69fa      	ldr	r2, [r7, #28]
 8013e9c:	e841 2300 	strex	r3, r2, [r1]
 8013ea0:	617b      	str	r3, [r7, #20]
   return(result);
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d1e4      	bne.n	8013e72 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2202      	movs	r2, #2
 8013eac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013eae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013eb2:	4619      	mov	r1, r3
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f000 f881 	bl	8013fbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013eba:	e063      	b.n	8013f84 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d00e      	beq.n	8013ee6 <HAL_UART_IRQHandler+0x6c6>
 8013ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d008      	beq.n	8013ee6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013edc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f001 fe80 	bl	8015be4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013ee4:	e051      	b.n	8013f8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d014      	beq.n	8013f1c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8013ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d105      	bne.n	8013f0a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8013efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d008      	beq.n	8013f1c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d03a      	beq.n	8013f88 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	4798      	blx	r3
    }
    return;
 8013f1a:	e035      	b.n	8013f88 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d009      	beq.n	8013f3c <HAL_UART_IRQHandler+0x71c>
 8013f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d003      	beq.n	8013f3c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	f001 f90d 	bl	8015154 <UART_EndTransmit_IT>
    return;
 8013f3a:	e026      	b.n	8013f8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d009      	beq.n	8013f5c <HAL_UART_IRQHandler+0x73c>
 8013f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d003      	beq.n	8013f5c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	f001 fe59 	bl	8015c0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013f5a:	e016      	b.n	8013f8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d010      	beq.n	8013f8a <HAL_UART_IRQHandler+0x76a>
 8013f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	da0c      	bge.n	8013f8a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f001 fe41 	bl	8015bf8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013f76:	e008      	b.n	8013f8a <HAL_UART_IRQHandler+0x76a>
      return;
 8013f78:	bf00      	nop
 8013f7a:	e006      	b.n	8013f8a <HAL_UART_IRQHandler+0x76a>
    return;
 8013f7c:	bf00      	nop
 8013f7e:	e004      	b.n	8013f8a <HAL_UART_IRQHandler+0x76a>
      return;
 8013f80:	bf00      	nop
 8013f82:	e002      	b.n	8013f8a <HAL_UART_IRQHandler+0x76a>
      return;
 8013f84:	bf00      	nop
 8013f86:	e000      	b.n	8013f8a <HAL_UART_IRQHandler+0x76a>
    return;
 8013f88:	bf00      	nop
  }
}
 8013f8a:	37e8      	adds	r7, #232	; 0xe8
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	effffffe 	.word	0xeffffffe

08013f94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013f94:	b480      	push	{r7}
 8013f96:	b083      	sub	sp, #12
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013f9c:	bf00      	nop
 8013f9e:	370c      	adds	r7, #12
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa6:	4770      	bx	lr

08013fa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013fa8:	b480      	push	{r7}
 8013faa:	b083      	sub	sp, #12
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013fb0:	bf00      	nop
 8013fb2:	370c      	adds	r7, #12
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fba:	4770      	bx	lr

08013fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013fbc:	b480      	push	{r7}
 8013fbe:	b083      	sub	sp, #12
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013fc8:	bf00      	nop
 8013fca:	370c      	adds	r7, #12
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd2:	4770      	bx	lr

08013fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013fd8:	b092      	sub	sp, #72	; 0x48
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013fe4:	697b      	ldr	r3, [r7, #20]
 8013fe6:	689a      	ldr	r2, [r3, #8]
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	691b      	ldr	r3, [r3, #16]
 8013fec:	431a      	orrs	r2, r3
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	695b      	ldr	r3, [r3, #20]
 8013ff2:	431a      	orrs	r2, r3
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	69db      	ldr	r3, [r3, #28]
 8013ff8:	4313      	orrs	r3, r2
 8013ffa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	681a      	ldr	r2, [r3, #0]
 8014002:	4bbe      	ldr	r3, [pc, #760]	; (80142fc <UART_SetConfig+0x328>)
 8014004:	4013      	ands	r3, r2
 8014006:	697a      	ldr	r2, [r7, #20]
 8014008:	6812      	ldr	r2, [r2, #0]
 801400a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801400c:	430b      	orrs	r3, r1
 801400e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	685b      	ldr	r3, [r3, #4]
 8014016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	68da      	ldr	r2, [r3, #12]
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	430a      	orrs	r2, r1
 8014024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	699b      	ldr	r3, [r3, #24]
 801402a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801402c:	697b      	ldr	r3, [r7, #20]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	4ab3      	ldr	r2, [pc, #716]	; (8014300 <UART_SetConfig+0x32c>)
 8014032:	4293      	cmp	r3, r2
 8014034:	d004      	beq.n	8014040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	6a1b      	ldr	r3, [r3, #32]
 801403a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801403c:	4313      	orrs	r3, r2
 801403e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	689a      	ldr	r2, [r3, #8]
 8014046:	4baf      	ldr	r3, [pc, #700]	; (8014304 <UART_SetConfig+0x330>)
 8014048:	4013      	ands	r3, r2
 801404a:	697a      	ldr	r2, [r7, #20]
 801404c:	6812      	ldr	r2, [r2, #0]
 801404e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014050:	430b      	orrs	r3, r1
 8014052:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801405a:	f023 010f 	bic.w	r1, r3, #15
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	430a      	orrs	r2, r1
 8014068:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	4aa6      	ldr	r2, [pc, #664]	; (8014308 <UART_SetConfig+0x334>)
 8014070:	4293      	cmp	r3, r2
 8014072:	d177      	bne.n	8014164 <UART_SetConfig+0x190>
 8014074:	4ba5      	ldr	r3, [pc, #660]	; (801430c <UART_SetConfig+0x338>)
 8014076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014078:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801407c:	2b28      	cmp	r3, #40	; 0x28
 801407e:	d86d      	bhi.n	801415c <UART_SetConfig+0x188>
 8014080:	a201      	add	r2, pc, #4	; (adr r2, 8014088 <UART_SetConfig+0xb4>)
 8014082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014086:	bf00      	nop
 8014088:	0801412d 	.word	0x0801412d
 801408c:	0801415d 	.word	0x0801415d
 8014090:	0801415d 	.word	0x0801415d
 8014094:	0801415d 	.word	0x0801415d
 8014098:	0801415d 	.word	0x0801415d
 801409c:	0801415d 	.word	0x0801415d
 80140a0:	0801415d 	.word	0x0801415d
 80140a4:	0801415d 	.word	0x0801415d
 80140a8:	08014135 	.word	0x08014135
 80140ac:	0801415d 	.word	0x0801415d
 80140b0:	0801415d 	.word	0x0801415d
 80140b4:	0801415d 	.word	0x0801415d
 80140b8:	0801415d 	.word	0x0801415d
 80140bc:	0801415d 	.word	0x0801415d
 80140c0:	0801415d 	.word	0x0801415d
 80140c4:	0801415d 	.word	0x0801415d
 80140c8:	0801413d 	.word	0x0801413d
 80140cc:	0801415d 	.word	0x0801415d
 80140d0:	0801415d 	.word	0x0801415d
 80140d4:	0801415d 	.word	0x0801415d
 80140d8:	0801415d 	.word	0x0801415d
 80140dc:	0801415d 	.word	0x0801415d
 80140e0:	0801415d 	.word	0x0801415d
 80140e4:	0801415d 	.word	0x0801415d
 80140e8:	08014145 	.word	0x08014145
 80140ec:	0801415d 	.word	0x0801415d
 80140f0:	0801415d 	.word	0x0801415d
 80140f4:	0801415d 	.word	0x0801415d
 80140f8:	0801415d 	.word	0x0801415d
 80140fc:	0801415d 	.word	0x0801415d
 8014100:	0801415d 	.word	0x0801415d
 8014104:	0801415d 	.word	0x0801415d
 8014108:	0801414d 	.word	0x0801414d
 801410c:	0801415d 	.word	0x0801415d
 8014110:	0801415d 	.word	0x0801415d
 8014114:	0801415d 	.word	0x0801415d
 8014118:	0801415d 	.word	0x0801415d
 801411c:	0801415d 	.word	0x0801415d
 8014120:	0801415d 	.word	0x0801415d
 8014124:	0801415d 	.word	0x0801415d
 8014128:	08014155 	.word	0x08014155
 801412c:	2301      	movs	r3, #1
 801412e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014132:	e222      	b.n	801457a <UART_SetConfig+0x5a6>
 8014134:	2304      	movs	r3, #4
 8014136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801413a:	e21e      	b.n	801457a <UART_SetConfig+0x5a6>
 801413c:	2308      	movs	r3, #8
 801413e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014142:	e21a      	b.n	801457a <UART_SetConfig+0x5a6>
 8014144:	2310      	movs	r3, #16
 8014146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801414a:	e216      	b.n	801457a <UART_SetConfig+0x5a6>
 801414c:	2320      	movs	r3, #32
 801414e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014152:	e212      	b.n	801457a <UART_SetConfig+0x5a6>
 8014154:	2340      	movs	r3, #64	; 0x40
 8014156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801415a:	e20e      	b.n	801457a <UART_SetConfig+0x5a6>
 801415c:	2380      	movs	r3, #128	; 0x80
 801415e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014162:	e20a      	b.n	801457a <UART_SetConfig+0x5a6>
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	4a69      	ldr	r2, [pc, #420]	; (8014310 <UART_SetConfig+0x33c>)
 801416a:	4293      	cmp	r3, r2
 801416c:	d130      	bne.n	80141d0 <UART_SetConfig+0x1fc>
 801416e:	4b67      	ldr	r3, [pc, #412]	; (801430c <UART_SetConfig+0x338>)
 8014170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014172:	f003 0307 	and.w	r3, r3, #7
 8014176:	2b05      	cmp	r3, #5
 8014178:	d826      	bhi.n	80141c8 <UART_SetConfig+0x1f4>
 801417a:	a201      	add	r2, pc, #4	; (adr r2, 8014180 <UART_SetConfig+0x1ac>)
 801417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014180:	08014199 	.word	0x08014199
 8014184:	080141a1 	.word	0x080141a1
 8014188:	080141a9 	.word	0x080141a9
 801418c:	080141b1 	.word	0x080141b1
 8014190:	080141b9 	.word	0x080141b9
 8014194:	080141c1 	.word	0x080141c1
 8014198:	2300      	movs	r3, #0
 801419a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801419e:	e1ec      	b.n	801457a <UART_SetConfig+0x5a6>
 80141a0:	2304      	movs	r3, #4
 80141a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141a6:	e1e8      	b.n	801457a <UART_SetConfig+0x5a6>
 80141a8:	2308      	movs	r3, #8
 80141aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141ae:	e1e4      	b.n	801457a <UART_SetConfig+0x5a6>
 80141b0:	2310      	movs	r3, #16
 80141b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141b6:	e1e0      	b.n	801457a <UART_SetConfig+0x5a6>
 80141b8:	2320      	movs	r3, #32
 80141ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141be:	e1dc      	b.n	801457a <UART_SetConfig+0x5a6>
 80141c0:	2340      	movs	r3, #64	; 0x40
 80141c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141c6:	e1d8      	b.n	801457a <UART_SetConfig+0x5a6>
 80141c8:	2380      	movs	r3, #128	; 0x80
 80141ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141ce:	e1d4      	b.n	801457a <UART_SetConfig+0x5a6>
 80141d0:	697b      	ldr	r3, [r7, #20]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4a4f      	ldr	r2, [pc, #316]	; (8014314 <UART_SetConfig+0x340>)
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d130      	bne.n	801423c <UART_SetConfig+0x268>
 80141da:	4b4c      	ldr	r3, [pc, #304]	; (801430c <UART_SetConfig+0x338>)
 80141dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141de:	f003 0307 	and.w	r3, r3, #7
 80141e2:	2b05      	cmp	r3, #5
 80141e4:	d826      	bhi.n	8014234 <UART_SetConfig+0x260>
 80141e6:	a201      	add	r2, pc, #4	; (adr r2, 80141ec <UART_SetConfig+0x218>)
 80141e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141ec:	08014205 	.word	0x08014205
 80141f0:	0801420d 	.word	0x0801420d
 80141f4:	08014215 	.word	0x08014215
 80141f8:	0801421d 	.word	0x0801421d
 80141fc:	08014225 	.word	0x08014225
 8014200:	0801422d 	.word	0x0801422d
 8014204:	2300      	movs	r3, #0
 8014206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801420a:	e1b6      	b.n	801457a <UART_SetConfig+0x5a6>
 801420c:	2304      	movs	r3, #4
 801420e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014212:	e1b2      	b.n	801457a <UART_SetConfig+0x5a6>
 8014214:	2308      	movs	r3, #8
 8014216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801421a:	e1ae      	b.n	801457a <UART_SetConfig+0x5a6>
 801421c:	2310      	movs	r3, #16
 801421e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014222:	e1aa      	b.n	801457a <UART_SetConfig+0x5a6>
 8014224:	2320      	movs	r3, #32
 8014226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801422a:	e1a6      	b.n	801457a <UART_SetConfig+0x5a6>
 801422c:	2340      	movs	r3, #64	; 0x40
 801422e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014232:	e1a2      	b.n	801457a <UART_SetConfig+0x5a6>
 8014234:	2380      	movs	r3, #128	; 0x80
 8014236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801423a:	e19e      	b.n	801457a <UART_SetConfig+0x5a6>
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	4a35      	ldr	r2, [pc, #212]	; (8014318 <UART_SetConfig+0x344>)
 8014242:	4293      	cmp	r3, r2
 8014244:	d130      	bne.n	80142a8 <UART_SetConfig+0x2d4>
 8014246:	4b31      	ldr	r3, [pc, #196]	; (801430c <UART_SetConfig+0x338>)
 8014248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801424a:	f003 0307 	and.w	r3, r3, #7
 801424e:	2b05      	cmp	r3, #5
 8014250:	d826      	bhi.n	80142a0 <UART_SetConfig+0x2cc>
 8014252:	a201      	add	r2, pc, #4	; (adr r2, 8014258 <UART_SetConfig+0x284>)
 8014254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014258:	08014271 	.word	0x08014271
 801425c:	08014279 	.word	0x08014279
 8014260:	08014281 	.word	0x08014281
 8014264:	08014289 	.word	0x08014289
 8014268:	08014291 	.word	0x08014291
 801426c:	08014299 	.word	0x08014299
 8014270:	2300      	movs	r3, #0
 8014272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014276:	e180      	b.n	801457a <UART_SetConfig+0x5a6>
 8014278:	2304      	movs	r3, #4
 801427a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801427e:	e17c      	b.n	801457a <UART_SetConfig+0x5a6>
 8014280:	2308      	movs	r3, #8
 8014282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014286:	e178      	b.n	801457a <UART_SetConfig+0x5a6>
 8014288:	2310      	movs	r3, #16
 801428a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801428e:	e174      	b.n	801457a <UART_SetConfig+0x5a6>
 8014290:	2320      	movs	r3, #32
 8014292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014296:	e170      	b.n	801457a <UART_SetConfig+0x5a6>
 8014298:	2340      	movs	r3, #64	; 0x40
 801429a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801429e:	e16c      	b.n	801457a <UART_SetConfig+0x5a6>
 80142a0:	2380      	movs	r3, #128	; 0x80
 80142a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142a6:	e168      	b.n	801457a <UART_SetConfig+0x5a6>
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	4a1b      	ldr	r2, [pc, #108]	; (801431c <UART_SetConfig+0x348>)
 80142ae:	4293      	cmp	r3, r2
 80142b0:	d142      	bne.n	8014338 <UART_SetConfig+0x364>
 80142b2:	4b16      	ldr	r3, [pc, #88]	; (801430c <UART_SetConfig+0x338>)
 80142b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142b6:	f003 0307 	and.w	r3, r3, #7
 80142ba:	2b05      	cmp	r3, #5
 80142bc:	d838      	bhi.n	8014330 <UART_SetConfig+0x35c>
 80142be:	a201      	add	r2, pc, #4	; (adr r2, 80142c4 <UART_SetConfig+0x2f0>)
 80142c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142c4:	080142dd 	.word	0x080142dd
 80142c8:	080142e5 	.word	0x080142e5
 80142cc:	080142ed 	.word	0x080142ed
 80142d0:	080142f5 	.word	0x080142f5
 80142d4:	08014321 	.word	0x08014321
 80142d8:	08014329 	.word	0x08014329
 80142dc:	2300      	movs	r3, #0
 80142de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142e2:	e14a      	b.n	801457a <UART_SetConfig+0x5a6>
 80142e4:	2304      	movs	r3, #4
 80142e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142ea:	e146      	b.n	801457a <UART_SetConfig+0x5a6>
 80142ec:	2308      	movs	r3, #8
 80142ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142f2:	e142      	b.n	801457a <UART_SetConfig+0x5a6>
 80142f4:	2310      	movs	r3, #16
 80142f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142fa:	e13e      	b.n	801457a <UART_SetConfig+0x5a6>
 80142fc:	cfff69f3 	.word	0xcfff69f3
 8014300:	58000c00 	.word	0x58000c00
 8014304:	11fff4ff 	.word	0x11fff4ff
 8014308:	40011000 	.word	0x40011000
 801430c:	58024400 	.word	0x58024400
 8014310:	40004400 	.word	0x40004400
 8014314:	40004800 	.word	0x40004800
 8014318:	40004c00 	.word	0x40004c00
 801431c:	40005000 	.word	0x40005000
 8014320:	2320      	movs	r3, #32
 8014322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014326:	e128      	b.n	801457a <UART_SetConfig+0x5a6>
 8014328:	2340      	movs	r3, #64	; 0x40
 801432a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801432e:	e124      	b.n	801457a <UART_SetConfig+0x5a6>
 8014330:	2380      	movs	r3, #128	; 0x80
 8014332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014336:	e120      	b.n	801457a <UART_SetConfig+0x5a6>
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	4acb      	ldr	r2, [pc, #812]	; (801466c <UART_SetConfig+0x698>)
 801433e:	4293      	cmp	r3, r2
 8014340:	d176      	bne.n	8014430 <UART_SetConfig+0x45c>
 8014342:	4bcb      	ldr	r3, [pc, #812]	; (8014670 <UART_SetConfig+0x69c>)
 8014344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801434a:	2b28      	cmp	r3, #40	; 0x28
 801434c:	d86c      	bhi.n	8014428 <UART_SetConfig+0x454>
 801434e:	a201      	add	r2, pc, #4	; (adr r2, 8014354 <UART_SetConfig+0x380>)
 8014350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014354:	080143f9 	.word	0x080143f9
 8014358:	08014429 	.word	0x08014429
 801435c:	08014429 	.word	0x08014429
 8014360:	08014429 	.word	0x08014429
 8014364:	08014429 	.word	0x08014429
 8014368:	08014429 	.word	0x08014429
 801436c:	08014429 	.word	0x08014429
 8014370:	08014429 	.word	0x08014429
 8014374:	08014401 	.word	0x08014401
 8014378:	08014429 	.word	0x08014429
 801437c:	08014429 	.word	0x08014429
 8014380:	08014429 	.word	0x08014429
 8014384:	08014429 	.word	0x08014429
 8014388:	08014429 	.word	0x08014429
 801438c:	08014429 	.word	0x08014429
 8014390:	08014429 	.word	0x08014429
 8014394:	08014409 	.word	0x08014409
 8014398:	08014429 	.word	0x08014429
 801439c:	08014429 	.word	0x08014429
 80143a0:	08014429 	.word	0x08014429
 80143a4:	08014429 	.word	0x08014429
 80143a8:	08014429 	.word	0x08014429
 80143ac:	08014429 	.word	0x08014429
 80143b0:	08014429 	.word	0x08014429
 80143b4:	08014411 	.word	0x08014411
 80143b8:	08014429 	.word	0x08014429
 80143bc:	08014429 	.word	0x08014429
 80143c0:	08014429 	.word	0x08014429
 80143c4:	08014429 	.word	0x08014429
 80143c8:	08014429 	.word	0x08014429
 80143cc:	08014429 	.word	0x08014429
 80143d0:	08014429 	.word	0x08014429
 80143d4:	08014419 	.word	0x08014419
 80143d8:	08014429 	.word	0x08014429
 80143dc:	08014429 	.word	0x08014429
 80143e0:	08014429 	.word	0x08014429
 80143e4:	08014429 	.word	0x08014429
 80143e8:	08014429 	.word	0x08014429
 80143ec:	08014429 	.word	0x08014429
 80143f0:	08014429 	.word	0x08014429
 80143f4:	08014421 	.word	0x08014421
 80143f8:	2301      	movs	r3, #1
 80143fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143fe:	e0bc      	b.n	801457a <UART_SetConfig+0x5a6>
 8014400:	2304      	movs	r3, #4
 8014402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014406:	e0b8      	b.n	801457a <UART_SetConfig+0x5a6>
 8014408:	2308      	movs	r3, #8
 801440a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801440e:	e0b4      	b.n	801457a <UART_SetConfig+0x5a6>
 8014410:	2310      	movs	r3, #16
 8014412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014416:	e0b0      	b.n	801457a <UART_SetConfig+0x5a6>
 8014418:	2320      	movs	r3, #32
 801441a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801441e:	e0ac      	b.n	801457a <UART_SetConfig+0x5a6>
 8014420:	2340      	movs	r3, #64	; 0x40
 8014422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014426:	e0a8      	b.n	801457a <UART_SetConfig+0x5a6>
 8014428:	2380      	movs	r3, #128	; 0x80
 801442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801442e:	e0a4      	b.n	801457a <UART_SetConfig+0x5a6>
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	4a8f      	ldr	r2, [pc, #572]	; (8014674 <UART_SetConfig+0x6a0>)
 8014436:	4293      	cmp	r3, r2
 8014438:	d130      	bne.n	801449c <UART_SetConfig+0x4c8>
 801443a:	4b8d      	ldr	r3, [pc, #564]	; (8014670 <UART_SetConfig+0x69c>)
 801443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801443e:	f003 0307 	and.w	r3, r3, #7
 8014442:	2b05      	cmp	r3, #5
 8014444:	d826      	bhi.n	8014494 <UART_SetConfig+0x4c0>
 8014446:	a201      	add	r2, pc, #4	; (adr r2, 801444c <UART_SetConfig+0x478>)
 8014448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801444c:	08014465 	.word	0x08014465
 8014450:	0801446d 	.word	0x0801446d
 8014454:	08014475 	.word	0x08014475
 8014458:	0801447d 	.word	0x0801447d
 801445c:	08014485 	.word	0x08014485
 8014460:	0801448d 	.word	0x0801448d
 8014464:	2300      	movs	r3, #0
 8014466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801446a:	e086      	b.n	801457a <UART_SetConfig+0x5a6>
 801446c:	2304      	movs	r3, #4
 801446e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014472:	e082      	b.n	801457a <UART_SetConfig+0x5a6>
 8014474:	2308      	movs	r3, #8
 8014476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801447a:	e07e      	b.n	801457a <UART_SetConfig+0x5a6>
 801447c:	2310      	movs	r3, #16
 801447e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014482:	e07a      	b.n	801457a <UART_SetConfig+0x5a6>
 8014484:	2320      	movs	r3, #32
 8014486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801448a:	e076      	b.n	801457a <UART_SetConfig+0x5a6>
 801448c:	2340      	movs	r3, #64	; 0x40
 801448e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014492:	e072      	b.n	801457a <UART_SetConfig+0x5a6>
 8014494:	2380      	movs	r3, #128	; 0x80
 8014496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801449a:	e06e      	b.n	801457a <UART_SetConfig+0x5a6>
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	4a75      	ldr	r2, [pc, #468]	; (8014678 <UART_SetConfig+0x6a4>)
 80144a2:	4293      	cmp	r3, r2
 80144a4:	d130      	bne.n	8014508 <UART_SetConfig+0x534>
 80144a6:	4b72      	ldr	r3, [pc, #456]	; (8014670 <UART_SetConfig+0x69c>)
 80144a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80144aa:	f003 0307 	and.w	r3, r3, #7
 80144ae:	2b05      	cmp	r3, #5
 80144b0:	d826      	bhi.n	8014500 <UART_SetConfig+0x52c>
 80144b2:	a201      	add	r2, pc, #4	; (adr r2, 80144b8 <UART_SetConfig+0x4e4>)
 80144b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144b8:	080144d1 	.word	0x080144d1
 80144bc:	080144d9 	.word	0x080144d9
 80144c0:	080144e1 	.word	0x080144e1
 80144c4:	080144e9 	.word	0x080144e9
 80144c8:	080144f1 	.word	0x080144f1
 80144cc:	080144f9 	.word	0x080144f9
 80144d0:	2300      	movs	r3, #0
 80144d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144d6:	e050      	b.n	801457a <UART_SetConfig+0x5a6>
 80144d8:	2304      	movs	r3, #4
 80144da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144de:	e04c      	b.n	801457a <UART_SetConfig+0x5a6>
 80144e0:	2308      	movs	r3, #8
 80144e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144e6:	e048      	b.n	801457a <UART_SetConfig+0x5a6>
 80144e8:	2310      	movs	r3, #16
 80144ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144ee:	e044      	b.n	801457a <UART_SetConfig+0x5a6>
 80144f0:	2320      	movs	r3, #32
 80144f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144f6:	e040      	b.n	801457a <UART_SetConfig+0x5a6>
 80144f8:	2340      	movs	r3, #64	; 0x40
 80144fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144fe:	e03c      	b.n	801457a <UART_SetConfig+0x5a6>
 8014500:	2380      	movs	r3, #128	; 0x80
 8014502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014506:	e038      	b.n	801457a <UART_SetConfig+0x5a6>
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	4a5b      	ldr	r2, [pc, #364]	; (801467c <UART_SetConfig+0x6a8>)
 801450e:	4293      	cmp	r3, r2
 8014510:	d130      	bne.n	8014574 <UART_SetConfig+0x5a0>
 8014512:	4b57      	ldr	r3, [pc, #348]	; (8014670 <UART_SetConfig+0x69c>)
 8014514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014516:	f003 0307 	and.w	r3, r3, #7
 801451a:	2b05      	cmp	r3, #5
 801451c:	d826      	bhi.n	801456c <UART_SetConfig+0x598>
 801451e:	a201      	add	r2, pc, #4	; (adr r2, 8014524 <UART_SetConfig+0x550>)
 8014520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014524:	0801453d 	.word	0x0801453d
 8014528:	08014545 	.word	0x08014545
 801452c:	0801454d 	.word	0x0801454d
 8014530:	08014555 	.word	0x08014555
 8014534:	0801455d 	.word	0x0801455d
 8014538:	08014565 	.word	0x08014565
 801453c:	2302      	movs	r3, #2
 801453e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014542:	e01a      	b.n	801457a <UART_SetConfig+0x5a6>
 8014544:	2304      	movs	r3, #4
 8014546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801454a:	e016      	b.n	801457a <UART_SetConfig+0x5a6>
 801454c:	2308      	movs	r3, #8
 801454e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014552:	e012      	b.n	801457a <UART_SetConfig+0x5a6>
 8014554:	2310      	movs	r3, #16
 8014556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801455a:	e00e      	b.n	801457a <UART_SetConfig+0x5a6>
 801455c:	2320      	movs	r3, #32
 801455e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014562:	e00a      	b.n	801457a <UART_SetConfig+0x5a6>
 8014564:	2340      	movs	r3, #64	; 0x40
 8014566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801456a:	e006      	b.n	801457a <UART_SetConfig+0x5a6>
 801456c:	2380      	movs	r3, #128	; 0x80
 801456e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014572:	e002      	b.n	801457a <UART_SetConfig+0x5a6>
 8014574:	2380      	movs	r3, #128	; 0x80
 8014576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801457a:	697b      	ldr	r3, [r7, #20]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	4a3f      	ldr	r2, [pc, #252]	; (801467c <UART_SetConfig+0x6a8>)
 8014580:	4293      	cmp	r3, r2
 8014582:	f040 80f8 	bne.w	8014776 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014586:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801458a:	2b20      	cmp	r3, #32
 801458c:	dc46      	bgt.n	801461c <UART_SetConfig+0x648>
 801458e:	2b02      	cmp	r3, #2
 8014590:	f2c0 8082 	blt.w	8014698 <UART_SetConfig+0x6c4>
 8014594:	3b02      	subs	r3, #2
 8014596:	2b1e      	cmp	r3, #30
 8014598:	d87e      	bhi.n	8014698 <UART_SetConfig+0x6c4>
 801459a:	a201      	add	r2, pc, #4	; (adr r2, 80145a0 <UART_SetConfig+0x5cc>)
 801459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145a0:	08014623 	.word	0x08014623
 80145a4:	08014699 	.word	0x08014699
 80145a8:	0801462b 	.word	0x0801462b
 80145ac:	08014699 	.word	0x08014699
 80145b0:	08014699 	.word	0x08014699
 80145b4:	08014699 	.word	0x08014699
 80145b8:	0801463b 	.word	0x0801463b
 80145bc:	08014699 	.word	0x08014699
 80145c0:	08014699 	.word	0x08014699
 80145c4:	08014699 	.word	0x08014699
 80145c8:	08014699 	.word	0x08014699
 80145cc:	08014699 	.word	0x08014699
 80145d0:	08014699 	.word	0x08014699
 80145d4:	08014699 	.word	0x08014699
 80145d8:	0801464b 	.word	0x0801464b
 80145dc:	08014699 	.word	0x08014699
 80145e0:	08014699 	.word	0x08014699
 80145e4:	08014699 	.word	0x08014699
 80145e8:	08014699 	.word	0x08014699
 80145ec:	08014699 	.word	0x08014699
 80145f0:	08014699 	.word	0x08014699
 80145f4:	08014699 	.word	0x08014699
 80145f8:	08014699 	.word	0x08014699
 80145fc:	08014699 	.word	0x08014699
 8014600:	08014699 	.word	0x08014699
 8014604:	08014699 	.word	0x08014699
 8014608:	08014699 	.word	0x08014699
 801460c:	08014699 	.word	0x08014699
 8014610:	08014699 	.word	0x08014699
 8014614:	08014699 	.word	0x08014699
 8014618:	0801468b 	.word	0x0801468b
 801461c:	2b40      	cmp	r3, #64	; 0x40
 801461e:	d037      	beq.n	8014690 <UART_SetConfig+0x6bc>
 8014620:	e03a      	b.n	8014698 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8014622:	f7fb fc17 	bl	800fe54 <HAL_RCCEx_GetD3PCLK1Freq>
 8014626:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014628:	e03c      	b.n	80146a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801462a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801462e:	4618      	mov	r0, r3
 8014630:	f7fb fc26 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014638:	e034      	b.n	80146a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801463a:	f107 0318 	add.w	r3, r7, #24
 801463e:	4618      	mov	r0, r3
 8014640:	f7fb fd72 	bl	8010128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014648:	e02c      	b.n	80146a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801464a:	4b09      	ldr	r3, [pc, #36]	; (8014670 <UART_SetConfig+0x69c>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	f003 0320 	and.w	r3, r3, #32
 8014652:	2b00      	cmp	r3, #0
 8014654:	d016      	beq.n	8014684 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014656:	4b06      	ldr	r3, [pc, #24]	; (8014670 <UART_SetConfig+0x69c>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	08db      	lsrs	r3, r3, #3
 801465c:	f003 0303 	and.w	r3, r3, #3
 8014660:	4a07      	ldr	r2, [pc, #28]	; (8014680 <UART_SetConfig+0x6ac>)
 8014662:	fa22 f303 	lsr.w	r3, r2, r3
 8014666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014668:	e01c      	b.n	80146a4 <UART_SetConfig+0x6d0>
 801466a:	bf00      	nop
 801466c:	40011400 	.word	0x40011400
 8014670:	58024400 	.word	0x58024400
 8014674:	40007800 	.word	0x40007800
 8014678:	40007c00 	.word	0x40007c00
 801467c:	58000c00 	.word	0x58000c00
 8014680:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014684:	4b9d      	ldr	r3, [pc, #628]	; (80148fc <UART_SetConfig+0x928>)
 8014686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014688:	e00c      	b.n	80146a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801468a:	4b9d      	ldr	r3, [pc, #628]	; (8014900 <UART_SetConfig+0x92c>)
 801468c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801468e:	e009      	b.n	80146a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014694:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014696:	e005      	b.n	80146a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8014698:	2300      	movs	r3, #0
 801469a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801469c:	2301      	movs	r3, #1
 801469e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80146a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80146a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	f000 81de 	beq.w	8014a68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146b0:	4a94      	ldr	r2, [pc, #592]	; (8014904 <UART_SetConfig+0x930>)
 80146b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80146b6:	461a      	mov	r2, r3
 80146b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80146be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	685a      	ldr	r2, [r3, #4]
 80146c4:	4613      	mov	r3, r2
 80146c6:	005b      	lsls	r3, r3, #1
 80146c8:	4413      	add	r3, r2
 80146ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146cc:	429a      	cmp	r2, r3
 80146ce:	d305      	bcc.n	80146dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	685b      	ldr	r3, [r3, #4]
 80146d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80146d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146d8:	429a      	cmp	r2, r3
 80146da:	d903      	bls.n	80146e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80146dc:	2301      	movs	r3, #1
 80146de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80146e2:	e1c1      	b.n	8014a68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80146e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146e6:	2200      	movs	r2, #0
 80146e8:	60bb      	str	r3, [r7, #8]
 80146ea:	60fa      	str	r2, [r7, #12]
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146f0:	4a84      	ldr	r2, [pc, #528]	; (8014904 <UART_SetConfig+0x930>)
 80146f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80146f6:	b29b      	uxth	r3, r3
 80146f8:	2200      	movs	r2, #0
 80146fa:	603b      	str	r3, [r7, #0]
 80146fc:	607a      	str	r2, [r7, #4]
 80146fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014702:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014706:	f7eb fdeb 	bl	80002e0 <__aeabi_uldivmod>
 801470a:	4602      	mov	r2, r0
 801470c:	460b      	mov	r3, r1
 801470e:	4610      	mov	r0, r2
 8014710:	4619      	mov	r1, r3
 8014712:	f04f 0200 	mov.w	r2, #0
 8014716:	f04f 0300 	mov.w	r3, #0
 801471a:	020b      	lsls	r3, r1, #8
 801471c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014720:	0202      	lsls	r2, r0, #8
 8014722:	6979      	ldr	r1, [r7, #20]
 8014724:	6849      	ldr	r1, [r1, #4]
 8014726:	0849      	lsrs	r1, r1, #1
 8014728:	2000      	movs	r0, #0
 801472a:	460c      	mov	r4, r1
 801472c:	4605      	mov	r5, r0
 801472e:	eb12 0804 	adds.w	r8, r2, r4
 8014732:	eb43 0905 	adc.w	r9, r3, r5
 8014736:	697b      	ldr	r3, [r7, #20]
 8014738:	685b      	ldr	r3, [r3, #4]
 801473a:	2200      	movs	r2, #0
 801473c:	469a      	mov	sl, r3
 801473e:	4693      	mov	fp, r2
 8014740:	4652      	mov	r2, sl
 8014742:	465b      	mov	r3, fp
 8014744:	4640      	mov	r0, r8
 8014746:	4649      	mov	r1, r9
 8014748:	f7eb fdca 	bl	80002e0 <__aeabi_uldivmod>
 801474c:	4602      	mov	r2, r0
 801474e:	460b      	mov	r3, r1
 8014750:	4613      	mov	r3, r2
 8014752:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801475a:	d308      	bcc.n	801476e <UART_SetConfig+0x79a>
 801475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014762:	d204      	bcs.n	801476e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801476a:	60da      	str	r2, [r3, #12]
 801476c:	e17c      	b.n	8014a68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801476e:	2301      	movs	r3, #1
 8014770:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014774:	e178      	b.n	8014a68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	69db      	ldr	r3, [r3, #28]
 801477a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801477e:	f040 80c5 	bne.w	801490c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8014782:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014786:	2b20      	cmp	r3, #32
 8014788:	dc48      	bgt.n	801481c <UART_SetConfig+0x848>
 801478a:	2b00      	cmp	r3, #0
 801478c:	db7b      	blt.n	8014886 <UART_SetConfig+0x8b2>
 801478e:	2b20      	cmp	r3, #32
 8014790:	d879      	bhi.n	8014886 <UART_SetConfig+0x8b2>
 8014792:	a201      	add	r2, pc, #4	; (adr r2, 8014798 <UART_SetConfig+0x7c4>)
 8014794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014798:	08014823 	.word	0x08014823
 801479c:	0801482b 	.word	0x0801482b
 80147a0:	08014887 	.word	0x08014887
 80147a4:	08014887 	.word	0x08014887
 80147a8:	08014833 	.word	0x08014833
 80147ac:	08014887 	.word	0x08014887
 80147b0:	08014887 	.word	0x08014887
 80147b4:	08014887 	.word	0x08014887
 80147b8:	08014843 	.word	0x08014843
 80147bc:	08014887 	.word	0x08014887
 80147c0:	08014887 	.word	0x08014887
 80147c4:	08014887 	.word	0x08014887
 80147c8:	08014887 	.word	0x08014887
 80147cc:	08014887 	.word	0x08014887
 80147d0:	08014887 	.word	0x08014887
 80147d4:	08014887 	.word	0x08014887
 80147d8:	08014853 	.word	0x08014853
 80147dc:	08014887 	.word	0x08014887
 80147e0:	08014887 	.word	0x08014887
 80147e4:	08014887 	.word	0x08014887
 80147e8:	08014887 	.word	0x08014887
 80147ec:	08014887 	.word	0x08014887
 80147f0:	08014887 	.word	0x08014887
 80147f4:	08014887 	.word	0x08014887
 80147f8:	08014887 	.word	0x08014887
 80147fc:	08014887 	.word	0x08014887
 8014800:	08014887 	.word	0x08014887
 8014804:	08014887 	.word	0x08014887
 8014808:	08014887 	.word	0x08014887
 801480c:	08014887 	.word	0x08014887
 8014810:	08014887 	.word	0x08014887
 8014814:	08014887 	.word	0x08014887
 8014818:	08014879 	.word	0x08014879
 801481c:	2b40      	cmp	r3, #64	; 0x40
 801481e:	d02e      	beq.n	801487e <UART_SetConfig+0x8aa>
 8014820:	e031      	b.n	8014886 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014822:	f7f9 fb1f 	bl	800de64 <HAL_RCC_GetPCLK1Freq>
 8014826:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014828:	e033      	b.n	8014892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801482a:	f7f9 fb31 	bl	800de90 <HAL_RCC_GetPCLK2Freq>
 801482e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014830:	e02f      	b.n	8014892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014836:	4618      	mov	r0, r3
 8014838:	f7fb fb22 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801483e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014840:	e027      	b.n	8014892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014842:	f107 0318 	add.w	r3, r7, #24
 8014846:	4618      	mov	r0, r3
 8014848:	f7fb fc6e 	bl	8010128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801484c:	69fb      	ldr	r3, [r7, #28]
 801484e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014850:	e01f      	b.n	8014892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014852:	4b2d      	ldr	r3, [pc, #180]	; (8014908 <UART_SetConfig+0x934>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f003 0320 	and.w	r3, r3, #32
 801485a:	2b00      	cmp	r3, #0
 801485c:	d009      	beq.n	8014872 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801485e:	4b2a      	ldr	r3, [pc, #168]	; (8014908 <UART_SetConfig+0x934>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	08db      	lsrs	r3, r3, #3
 8014864:	f003 0303 	and.w	r3, r3, #3
 8014868:	4a24      	ldr	r2, [pc, #144]	; (80148fc <UART_SetConfig+0x928>)
 801486a:	fa22 f303 	lsr.w	r3, r2, r3
 801486e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014870:	e00f      	b.n	8014892 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8014872:	4b22      	ldr	r3, [pc, #136]	; (80148fc <UART_SetConfig+0x928>)
 8014874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014876:	e00c      	b.n	8014892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014878:	4b21      	ldr	r3, [pc, #132]	; (8014900 <UART_SetConfig+0x92c>)
 801487a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801487c:	e009      	b.n	8014892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801487e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014884:	e005      	b.n	8014892 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014886:	2300      	movs	r3, #0
 8014888:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801488a:	2301      	movs	r3, #1
 801488c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014894:	2b00      	cmp	r3, #0
 8014896:	f000 80e7 	beq.w	8014a68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801489a:	697b      	ldr	r3, [r7, #20]
 801489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801489e:	4a19      	ldr	r2, [pc, #100]	; (8014904 <UART_SetConfig+0x930>)
 80148a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148a4:	461a      	mov	r2, r3
 80148a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80148ac:	005a      	lsls	r2, r3, #1
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	685b      	ldr	r3, [r3, #4]
 80148b2:	085b      	lsrs	r3, r3, #1
 80148b4:	441a      	add	r2, r3
 80148b6:	697b      	ldr	r3, [r7, #20]
 80148b8:	685b      	ldr	r3, [r3, #4]
 80148ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80148be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80148c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c2:	2b0f      	cmp	r3, #15
 80148c4:	d916      	bls.n	80148f4 <UART_SetConfig+0x920>
 80148c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80148cc:	d212      	bcs.n	80148f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80148ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d0:	b29b      	uxth	r3, r3
 80148d2:	f023 030f 	bic.w	r3, r3, #15
 80148d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80148d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148da:	085b      	lsrs	r3, r3, #1
 80148dc:	b29b      	uxth	r3, r3
 80148de:	f003 0307 	and.w	r3, r3, #7
 80148e2:	b29a      	uxth	r2, r3
 80148e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80148e6:	4313      	orrs	r3, r2
 80148e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80148ea:	697b      	ldr	r3, [r7, #20]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80148f0:	60da      	str	r2, [r3, #12]
 80148f2:	e0b9      	b.n	8014a68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80148f4:	2301      	movs	r3, #1
 80148f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80148fa:	e0b5      	b.n	8014a68 <UART_SetConfig+0xa94>
 80148fc:	03d09000 	.word	0x03d09000
 8014900:	003d0900 	.word	0x003d0900
 8014904:	0801a1ec 	.word	0x0801a1ec
 8014908:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801490c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014910:	2b20      	cmp	r3, #32
 8014912:	dc49      	bgt.n	80149a8 <UART_SetConfig+0x9d4>
 8014914:	2b00      	cmp	r3, #0
 8014916:	db7c      	blt.n	8014a12 <UART_SetConfig+0xa3e>
 8014918:	2b20      	cmp	r3, #32
 801491a:	d87a      	bhi.n	8014a12 <UART_SetConfig+0xa3e>
 801491c:	a201      	add	r2, pc, #4	; (adr r2, 8014924 <UART_SetConfig+0x950>)
 801491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014922:	bf00      	nop
 8014924:	080149af 	.word	0x080149af
 8014928:	080149b7 	.word	0x080149b7
 801492c:	08014a13 	.word	0x08014a13
 8014930:	08014a13 	.word	0x08014a13
 8014934:	080149bf 	.word	0x080149bf
 8014938:	08014a13 	.word	0x08014a13
 801493c:	08014a13 	.word	0x08014a13
 8014940:	08014a13 	.word	0x08014a13
 8014944:	080149cf 	.word	0x080149cf
 8014948:	08014a13 	.word	0x08014a13
 801494c:	08014a13 	.word	0x08014a13
 8014950:	08014a13 	.word	0x08014a13
 8014954:	08014a13 	.word	0x08014a13
 8014958:	08014a13 	.word	0x08014a13
 801495c:	08014a13 	.word	0x08014a13
 8014960:	08014a13 	.word	0x08014a13
 8014964:	080149df 	.word	0x080149df
 8014968:	08014a13 	.word	0x08014a13
 801496c:	08014a13 	.word	0x08014a13
 8014970:	08014a13 	.word	0x08014a13
 8014974:	08014a13 	.word	0x08014a13
 8014978:	08014a13 	.word	0x08014a13
 801497c:	08014a13 	.word	0x08014a13
 8014980:	08014a13 	.word	0x08014a13
 8014984:	08014a13 	.word	0x08014a13
 8014988:	08014a13 	.word	0x08014a13
 801498c:	08014a13 	.word	0x08014a13
 8014990:	08014a13 	.word	0x08014a13
 8014994:	08014a13 	.word	0x08014a13
 8014998:	08014a13 	.word	0x08014a13
 801499c:	08014a13 	.word	0x08014a13
 80149a0:	08014a13 	.word	0x08014a13
 80149a4:	08014a05 	.word	0x08014a05
 80149a8:	2b40      	cmp	r3, #64	; 0x40
 80149aa:	d02e      	beq.n	8014a0a <UART_SetConfig+0xa36>
 80149ac:	e031      	b.n	8014a12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80149ae:	f7f9 fa59 	bl	800de64 <HAL_RCC_GetPCLK1Freq>
 80149b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80149b4:	e033      	b.n	8014a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80149b6:	f7f9 fa6b 	bl	800de90 <HAL_RCC_GetPCLK2Freq>
 80149ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80149bc:	e02f      	b.n	8014a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80149be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80149c2:	4618      	mov	r0, r3
 80149c4:	f7fb fa5c 	bl	800fe80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80149c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80149cc:	e027      	b.n	8014a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80149ce:	f107 0318 	add.w	r3, r7, #24
 80149d2:	4618      	mov	r0, r3
 80149d4:	f7fb fba8 	bl	8010128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80149d8:	69fb      	ldr	r3, [r7, #28]
 80149da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80149dc:	e01f      	b.n	8014a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80149de:	4b2d      	ldr	r3, [pc, #180]	; (8014a94 <UART_SetConfig+0xac0>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	f003 0320 	and.w	r3, r3, #32
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d009      	beq.n	80149fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80149ea:	4b2a      	ldr	r3, [pc, #168]	; (8014a94 <UART_SetConfig+0xac0>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	08db      	lsrs	r3, r3, #3
 80149f0:	f003 0303 	and.w	r3, r3, #3
 80149f4:	4a28      	ldr	r2, [pc, #160]	; (8014a98 <UART_SetConfig+0xac4>)
 80149f6:	fa22 f303 	lsr.w	r3, r2, r3
 80149fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80149fc:	e00f      	b.n	8014a1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80149fe:	4b26      	ldr	r3, [pc, #152]	; (8014a98 <UART_SetConfig+0xac4>)
 8014a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a02:	e00c      	b.n	8014a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014a04:	4b25      	ldr	r3, [pc, #148]	; (8014a9c <UART_SetConfig+0xac8>)
 8014a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a08:	e009      	b.n	8014a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a10:	e005      	b.n	8014a1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8014a12:	2300      	movs	r3, #0
 8014a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014a16:	2301      	movs	r3, #1
 8014a18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014a1c:	bf00      	nop
    }

    if (pclk != 0U)
 8014a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d021      	beq.n	8014a68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a28:	4a1d      	ldr	r2, [pc, #116]	; (8014aa0 <UART_SetConfig+0xacc>)
 8014a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a2e:	461a      	mov	r2, r3
 8014a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a32:	fbb3 f2f2 	udiv	r2, r3, r2
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	685b      	ldr	r3, [r3, #4]
 8014a3a:	085b      	lsrs	r3, r3, #1
 8014a3c:	441a      	add	r2, r3
 8014a3e:	697b      	ldr	r3, [r7, #20]
 8014a40:	685b      	ldr	r3, [r3, #4]
 8014a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a46:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4a:	2b0f      	cmp	r3, #15
 8014a4c:	d909      	bls.n	8014a62 <UART_SetConfig+0xa8e>
 8014a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a54:	d205      	bcs.n	8014a62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a58:	b29a      	uxth	r2, r3
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	60da      	str	r2, [r3, #12]
 8014a60:	e002      	b.n	8014a68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014a62:	2301      	movs	r3, #1
 8014a64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	2201      	movs	r2, #1
 8014a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	2201      	movs	r2, #1
 8014a74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	2200      	movs	r2, #0
 8014a82:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8014a84:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3748      	adds	r7, #72	; 0x48
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014a92:	bf00      	nop
 8014a94:	58024400 	.word	0x58024400
 8014a98:	03d09000 	.word	0x03d09000
 8014a9c:	003d0900 	.word	0x003d0900
 8014aa0:	0801a1ec 	.word	0x0801a1ec

08014aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ab0:	f003 0308 	and.w	r3, r3, #8
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d00a      	beq.n	8014ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	685b      	ldr	r3, [r3, #4]
 8014abe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	430a      	orrs	r2, r1
 8014acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ad2:	f003 0301 	and.w	r3, r3, #1
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d00a      	beq.n	8014af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	685b      	ldr	r3, [r3, #4]
 8014ae0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	430a      	orrs	r2, r1
 8014aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014af4:	f003 0302 	and.w	r3, r3, #2
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d00a      	beq.n	8014b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	685b      	ldr	r3, [r3, #4]
 8014b02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	430a      	orrs	r2, r1
 8014b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b16:	f003 0304 	and.w	r3, r3, #4
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d00a      	beq.n	8014b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	430a      	orrs	r2, r1
 8014b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b38:	f003 0310 	and.w	r3, r3, #16
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d00a      	beq.n	8014b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	689b      	ldr	r3, [r3, #8]
 8014b46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	430a      	orrs	r2, r1
 8014b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b5a:	f003 0320 	and.w	r3, r3, #32
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d00a      	beq.n	8014b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	689b      	ldr	r3, [r3, #8]
 8014b68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	430a      	orrs	r2, r1
 8014b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d01a      	beq.n	8014bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	685b      	ldr	r3, [r3, #4]
 8014b8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	430a      	orrs	r2, r1
 8014b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014ba2:	d10a      	bne.n	8014bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	685b      	ldr	r3, [r3, #4]
 8014baa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	430a      	orrs	r2, r1
 8014bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d00a      	beq.n	8014bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	685b      	ldr	r3, [r3, #4]
 8014bcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	430a      	orrs	r2, r1
 8014bda:	605a      	str	r2, [r3, #4]
  }
}
 8014bdc:	bf00      	nop
 8014bde:	370c      	adds	r7, #12
 8014be0:	46bd      	mov	sp, r7
 8014be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be6:	4770      	bx	lr

08014be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b098      	sub	sp, #96	; 0x60
 8014bec:	af02      	add	r7, sp, #8
 8014bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014bf8:	f7f0 f8de 	bl	8004db8 <HAL_GetTick>
 8014bfc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	f003 0308 	and.w	r3, r3, #8
 8014c08:	2b08      	cmp	r3, #8
 8014c0a:	d12f      	bne.n	8014c6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014c10:	9300      	str	r3, [sp, #0]
 8014c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c14:	2200      	movs	r2, #0
 8014c16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014c1a:	6878      	ldr	r0, [r7, #4]
 8014c1c:	f000 f88e 	bl	8014d3c <UART_WaitOnFlagUntilTimeout>
 8014c20:	4603      	mov	r3, r0
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d022      	beq.n	8014c6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c2e:	e853 3f00 	ldrex	r3, [r3]
 8014c32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	461a      	mov	r2, r3
 8014c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c44:	647b      	str	r3, [r7, #68]	; 0x44
 8014c46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014c4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014c4c:	e841 2300 	strex	r3, r2, [r1]
 8014c50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d1e6      	bne.n	8014c26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2220      	movs	r2, #32
 8014c5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2200      	movs	r2, #0
 8014c64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014c68:	2303      	movs	r3, #3
 8014c6a:	e063      	b.n	8014d34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	f003 0304 	and.w	r3, r3, #4
 8014c76:	2b04      	cmp	r3, #4
 8014c78:	d149      	bne.n	8014d0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014c7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014c7e:	9300      	str	r3, [sp, #0]
 8014c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c82:	2200      	movs	r2, #0
 8014c84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014c88:	6878      	ldr	r0, [r7, #4]
 8014c8a:	f000 f857 	bl	8014d3c <UART_WaitOnFlagUntilTimeout>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d03c      	beq.n	8014d0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c9c:	e853 3f00 	ldrex	r3, [r3]
 8014ca0:	623b      	str	r3, [r7, #32]
   return(result);
 8014ca2:	6a3b      	ldr	r3, [r7, #32]
 8014ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	461a      	mov	r2, r3
 8014cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8014cb4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cba:	e841 2300 	strex	r3, r2, [r1]
 8014cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d1e6      	bne.n	8014c94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	3308      	adds	r3, #8
 8014ccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	e853 3f00 	ldrex	r3, [r3]
 8014cd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	f023 0301 	bic.w	r3, r3, #1
 8014cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	3308      	adds	r3, #8
 8014ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014ce6:	61fa      	str	r2, [r7, #28]
 8014ce8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cea:	69b9      	ldr	r1, [r7, #24]
 8014cec:	69fa      	ldr	r2, [r7, #28]
 8014cee:	e841 2300 	strex	r3, r2, [r1]
 8014cf2:	617b      	str	r3, [r7, #20]
   return(result);
 8014cf4:	697b      	ldr	r3, [r7, #20]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d1e5      	bne.n	8014cc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2220      	movs	r2, #32
 8014cfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2200      	movs	r2, #0
 8014d06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014d0a:	2303      	movs	r3, #3
 8014d0c:	e012      	b.n	8014d34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	2220      	movs	r2, #32
 8014d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	2220      	movs	r2, #32
 8014d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2200      	movs	r2, #0
 8014d22:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2200      	movs	r2, #0
 8014d28:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014d32:	2300      	movs	r3, #0
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	3758      	adds	r7, #88	; 0x58
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}

08014d3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b084      	sub	sp, #16
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	60f8      	str	r0, [r7, #12]
 8014d44:	60b9      	str	r1, [r7, #8]
 8014d46:	603b      	str	r3, [r7, #0]
 8014d48:	4613      	mov	r3, r2
 8014d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014d4c:	e04f      	b.n	8014dee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014d4e:	69bb      	ldr	r3, [r7, #24]
 8014d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d54:	d04b      	beq.n	8014dee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014d56:	f7f0 f82f 	bl	8004db8 <HAL_GetTick>
 8014d5a:	4602      	mov	r2, r0
 8014d5c:	683b      	ldr	r3, [r7, #0]
 8014d5e:	1ad3      	subs	r3, r2, r3
 8014d60:	69ba      	ldr	r2, [r7, #24]
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d302      	bcc.n	8014d6c <UART_WaitOnFlagUntilTimeout+0x30>
 8014d66:	69bb      	ldr	r3, [r7, #24]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d101      	bne.n	8014d70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014d6c:	2303      	movs	r3, #3
 8014d6e:	e04e      	b.n	8014e0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	f003 0304 	and.w	r3, r3, #4
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d037      	beq.n	8014dee <UART_WaitOnFlagUntilTimeout+0xb2>
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	2b80      	cmp	r3, #128	; 0x80
 8014d82:	d034      	beq.n	8014dee <UART_WaitOnFlagUntilTimeout+0xb2>
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	2b40      	cmp	r3, #64	; 0x40
 8014d88:	d031      	beq.n	8014dee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	69db      	ldr	r3, [r3, #28]
 8014d90:	f003 0308 	and.w	r3, r3, #8
 8014d94:	2b08      	cmp	r3, #8
 8014d96:	d110      	bne.n	8014dba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	2208      	movs	r2, #8
 8014d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014da0:	68f8      	ldr	r0, [r7, #12]
 8014da2:	f000 f95b 	bl	801505c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	2208      	movs	r2, #8
 8014daa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	2200      	movs	r2, #0
 8014db2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8014db6:	2301      	movs	r3, #1
 8014db8:	e029      	b.n	8014e0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	69db      	ldr	r3, [r3, #28]
 8014dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014dc8:	d111      	bne.n	8014dee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014dd4:	68f8      	ldr	r0, [r7, #12]
 8014dd6:	f000 f941 	bl	801505c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	2220      	movs	r2, #32
 8014dde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2200      	movs	r2, #0
 8014de6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8014dea:	2303      	movs	r3, #3
 8014dec:	e00f      	b.n	8014e0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	69da      	ldr	r2, [r3, #28]
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	4013      	ands	r3, r2
 8014df8:	68ba      	ldr	r2, [r7, #8]
 8014dfa:	429a      	cmp	r2, r3
 8014dfc:	bf0c      	ite	eq
 8014dfe:	2301      	moveq	r3, #1
 8014e00:	2300      	movne	r3, #0
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	461a      	mov	r2, r3
 8014e06:	79fb      	ldrb	r3, [r7, #7]
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d0a0      	beq.n	8014d4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014e0c:	2300      	movs	r3, #0
}
 8014e0e:	4618      	mov	r0, r3
 8014e10:	3710      	adds	r7, #16
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}
	...

08014e18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b0a3      	sub	sp, #140	; 0x8c
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	60f8      	str	r0, [r7, #12]
 8014e20:	60b9      	str	r1, [r7, #8]
 8014e22:	4613      	mov	r3, r2
 8014e24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	68ba      	ldr	r2, [r7, #8]
 8014e2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	88fa      	ldrh	r2, [r7, #6]
 8014e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	88fa      	ldrh	r2, [r7, #6]
 8014e38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	689b      	ldr	r3, [r3, #8]
 8014e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014e4a:	d10e      	bne.n	8014e6a <UART_Start_Receive_IT+0x52>
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	691b      	ldr	r3, [r3, #16]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d105      	bne.n	8014e60 <UART_Start_Receive_IT+0x48>
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014e5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e5e:	e02d      	b.n	8014ebc <UART_Start_Receive_IT+0xa4>
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	22ff      	movs	r2, #255	; 0xff
 8014e64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e68:	e028      	b.n	8014ebc <UART_Start_Receive_IT+0xa4>
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	689b      	ldr	r3, [r3, #8]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d10d      	bne.n	8014e8e <UART_Start_Receive_IT+0x76>
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	691b      	ldr	r3, [r3, #16]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d104      	bne.n	8014e84 <UART_Start_Receive_IT+0x6c>
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	22ff      	movs	r2, #255	; 0xff
 8014e7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e82:	e01b      	b.n	8014ebc <UART_Start_Receive_IT+0xa4>
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	227f      	movs	r2, #127	; 0x7f
 8014e88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e8c:	e016      	b.n	8014ebc <UART_Start_Receive_IT+0xa4>
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	689b      	ldr	r3, [r3, #8]
 8014e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014e96:	d10d      	bne.n	8014eb4 <UART_Start_Receive_IT+0x9c>
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	691b      	ldr	r3, [r3, #16]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d104      	bne.n	8014eaa <UART_Start_Receive_IT+0x92>
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	227f      	movs	r2, #127	; 0x7f
 8014ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014ea8:	e008      	b.n	8014ebc <UART_Start_Receive_IT+0xa4>
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	223f      	movs	r2, #63	; 0x3f
 8014eae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014eb2:	e003      	b.n	8014ebc <UART_Start_Receive_IT+0xa4>
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	2222      	movs	r2, #34	; 0x22
 8014ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	3308      	adds	r3, #8
 8014ed2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014ed6:	e853 3f00 	ldrex	r3, [r3]
 8014eda:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8014edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014ede:	f043 0301 	orr.w	r3, r3, #1
 8014ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	3308      	adds	r3, #8
 8014eec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014ef0:	673a      	str	r2, [r7, #112]	; 0x70
 8014ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ef4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8014ef6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014ef8:	e841 2300 	strex	r3, r2, [r1]
 8014efc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8014efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d1e3      	bne.n	8014ecc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014f0c:	d14f      	bne.n	8014fae <UART_Start_Receive_IT+0x196>
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014f14:	88fa      	ldrh	r2, [r7, #6]
 8014f16:	429a      	cmp	r2, r3
 8014f18:	d349      	bcc.n	8014fae <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	689b      	ldr	r3, [r3, #8]
 8014f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014f22:	d107      	bne.n	8014f34 <UART_Start_Receive_IT+0x11c>
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	691b      	ldr	r3, [r3, #16]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d103      	bne.n	8014f34 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	4a47      	ldr	r2, [pc, #284]	; (801504c <UART_Start_Receive_IT+0x234>)
 8014f30:	675a      	str	r2, [r3, #116]	; 0x74
 8014f32:	e002      	b.n	8014f3a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	4a46      	ldr	r2, [pc, #280]	; (8015050 <UART_Start_Receive_IT+0x238>)
 8014f38:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	691b      	ldr	r3, [r3, #16]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d01a      	beq.n	8014f78 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f4a:	e853 3f00 	ldrex	r3, [r3]
 8014f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	461a      	mov	r2, r3
 8014f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014f66:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014f6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014f6c:	e841 2300 	strex	r3, r2, [r1]
 8014f70:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d1e4      	bne.n	8014f42 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	3308      	adds	r3, #8
 8014f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f82:	e853 3f00 	ldrex	r3, [r3]
 8014f86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	3308      	adds	r3, #8
 8014f96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014f98:	64ba      	str	r2, [r7, #72]	; 0x48
 8014f9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014fa0:	e841 2300 	strex	r3, r2, [r1]
 8014fa4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d1e5      	bne.n	8014f78 <UART_Start_Receive_IT+0x160>
 8014fac:	e046      	b.n	801503c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	689b      	ldr	r3, [r3, #8]
 8014fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014fb6:	d107      	bne.n	8014fc8 <UART_Start_Receive_IT+0x1b0>
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	691b      	ldr	r3, [r3, #16]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d103      	bne.n	8014fc8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	4a24      	ldr	r2, [pc, #144]	; (8015054 <UART_Start_Receive_IT+0x23c>)
 8014fc4:	675a      	str	r2, [r3, #116]	; 0x74
 8014fc6:	e002      	b.n	8014fce <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	4a23      	ldr	r2, [pc, #140]	; (8015058 <UART_Start_Receive_IT+0x240>)
 8014fcc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	691b      	ldr	r3, [r3, #16]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d019      	beq.n	801500a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fde:	e853 3f00 	ldrex	r3, [r3]
 8014fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8014fea:	677b      	str	r3, [r7, #116]	; 0x74
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8014ff6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ffc:	e841 2300 	strex	r3, r2, [r1]
 8015000:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015004:	2b00      	cmp	r3, #0
 8015006:	d1e6      	bne.n	8014fd6 <UART_Start_Receive_IT+0x1be>
 8015008:	e018      	b.n	801503c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	e853 3f00 	ldrex	r3, [r3]
 8015016:	613b      	str	r3, [r7, #16]
   return(result);
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	f043 0320 	orr.w	r3, r3, #32
 801501e:	67bb      	str	r3, [r7, #120]	; 0x78
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	461a      	mov	r2, r3
 8015026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015028:	623b      	str	r3, [r7, #32]
 801502a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801502c:	69f9      	ldr	r1, [r7, #28]
 801502e:	6a3a      	ldr	r2, [r7, #32]
 8015030:	e841 2300 	strex	r3, r2, [r1]
 8015034:	61bb      	str	r3, [r7, #24]
   return(result);
 8015036:	69bb      	ldr	r3, [r7, #24]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d1e6      	bne.n	801500a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801503c:	2300      	movs	r3, #0
}
 801503e:	4618      	mov	r0, r3
 8015040:	378c      	adds	r7, #140	; 0x8c
 8015042:	46bd      	mov	sp, r7
 8015044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015048:	4770      	bx	lr
 801504a:	bf00      	nop
 801504c:	0801587d 	.word	0x0801587d
 8015050:	0801551d 	.word	0x0801551d
 8015054:	08015365 	.word	0x08015365
 8015058:	080151ad 	.word	0x080151ad

0801505c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801505c:	b480      	push	{r7}
 801505e:	b095      	sub	sp, #84	; 0x54
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801506a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801506c:	e853 3f00 	ldrex	r3, [r3]
 8015070:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015078:	64fb      	str	r3, [r7, #76]	; 0x4c
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	461a      	mov	r2, r3
 8015080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015082:	643b      	str	r3, [r7, #64]	; 0x40
 8015084:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015086:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801508a:	e841 2300 	strex	r3, r2, [r1]
 801508e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015092:	2b00      	cmp	r3, #0
 8015094:	d1e6      	bne.n	8015064 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	3308      	adds	r3, #8
 801509c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801509e:	6a3b      	ldr	r3, [r7, #32]
 80150a0:	e853 3f00 	ldrex	r3, [r3]
 80150a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80150a6:	69fa      	ldr	r2, [r7, #28]
 80150a8:	4b1e      	ldr	r3, [pc, #120]	; (8015124 <UART_EndRxTransfer+0xc8>)
 80150aa:	4013      	ands	r3, r2
 80150ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	3308      	adds	r3, #8
 80150b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80150b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80150b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80150bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150be:	e841 2300 	strex	r3, r2, [r1]
 80150c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80150c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d1e5      	bne.n	8015096 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150ce:	2b01      	cmp	r3, #1
 80150d0:	d118      	bne.n	8015104 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	e853 3f00 	ldrex	r3, [r3]
 80150de:	60bb      	str	r3, [r7, #8]
   return(result);
 80150e0:	68bb      	ldr	r3, [r7, #8]
 80150e2:	f023 0310 	bic.w	r3, r3, #16
 80150e6:	647b      	str	r3, [r7, #68]	; 0x44
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	461a      	mov	r2, r3
 80150ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150f0:	61bb      	str	r3, [r7, #24]
 80150f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150f4:	6979      	ldr	r1, [r7, #20]
 80150f6:	69ba      	ldr	r2, [r7, #24]
 80150f8:	e841 2300 	strex	r3, r2, [r1]
 80150fc:	613b      	str	r3, [r7, #16]
   return(result);
 80150fe:	693b      	ldr	r3, [r7, #16]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d1e6      	bne.n	80150d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	2220      	movs	r2, #32
 8015108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	2200      	movs	r2, #0
 8015110:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	2200      	movs	r2, #0
 8015116:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015118:	bf00      	nop
 801511a:	3754      	adds	r7, #84	; 0x54
 801511c:	46bd      	mov	sp, r7
 801511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015122:	4770      	bx	lr
 8015124:	effffffe 	.word	0xeffffffe

08015128 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b084      	sub	sp, #16
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	2200      	movs	r2, #0
 801513a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	2200      	movs	r2, #0
 8015142:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015146:	68f8      	ldr	r0, [r7, #12]
 8015148:	f7fe ff2e 	bl	8013fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801514c:	bf00      	nop
 801514e:	3710      	adds	r7, #16
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}

08015154 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b088      	sub	sp, #32
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	e853 3f00 	ldrex	r3, [r3]
 8015168:	60bb      	str	r3, [r7, #8]
   return(result);
 801516a:	68bb      	ldr	r3, [r7, #8]
 801516c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015170:	61fb      	str	r3, [r7, #28]
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	461a      	mov	r2, r3
 8015178:	69fb      	ldr	r3, [r7, #28]
 801517a:	61bb      	str	r3, [r7, #24]
 801517c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801517e:	6979      	ldr	r1, [r7, #20]
 8015180:	69ba      	ldr	r2, [r7, #24]
 8015182:	e841 2300 	strex	r3, r2, [r1]
 8015186:	613b      	str	r3, [r7, #16]
   return(result);
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d1e6      	bne.n	801515c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2220      	movs	r2, #32
 8015192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2200      	movs	r2, #0
 801519a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f7fe fef9 	bl	8013f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80151a2:	bf00      	nop
 80151a4:	3720      	adds	r7, #32
 80151a6:	46bd      	mov	sp, r7
 80151a8:	bd80      	pop	{r7, pc}
	...

080151ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b09c      	sub	sp, #112	; 0x70
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80151ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80151c4:	2b22      	cmp	r3, #34	; 0x22
 80151c6:	f040 80be 	bne.w	8015346 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80151d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80151d8:	b2d9      	uxtb	r1, r3
 80151da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80151de:	b2da      	uxtb	r2, r3
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80151e4:	400a      	ands	r2, r1
 80151e6:	b2d2      	uxtb	r2, r2
 80151e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80151ee:	1c5a      	adds	r2, r3, #1
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80151fa:	b29b      	uxth	r3, r3
 80151fc:	3b01      	subs	r3, #1
 80151fe:	b29a      	uxth	r2, r3
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801520c:	b29b      	uxth	r3, r3
 801520e:	2b00      	cmp	r3, #0
 8015210:	f040 80a1 	bne.w	8015356 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801521a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801521c:	e853 3f00 	ldrex	r3, [r3]
 8015220:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015228:	66bb      	str	r3, [r7, #104]	; 0x68
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	461a      	mov	r2, r3
 8015230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015232:	65bb      	str	r3, [r7, #88]	; 0x58
 8015234:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015236:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801523a:	e841 2300 	strex	r3, r2, [r1]
 801523e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015242:	2b00      	cmp	r3, #0
 8015244:	d1e6      	bne.n	8015214 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	3308      	adds	r3, #8
 801524c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015250:	e853 3f00 	ldrex	r3, [r3]
 8015254:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015258:	f023 0301 	bic.w	r3, r3, #1
 801525c:	667b      	str	r3, [r7, #100]	; 0x64
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	3308      	adds	r3, #8
 8015264:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015266:	647a      	str	r2, [r7, #68]	; 0x44
 8015268:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801526a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801526c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801526e:	e841 2300 	strex	r3, r2, [r1]
 8015272:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015276:	2b00      	cmp	r3, #0
 8015278:	d1e5      	bne.n	8015246 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	2220      	movs	r2, #32
 801527e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	2200      	movs	r2, #0
 8015286:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	2200      	movs	r2, #0
 801528c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	4a33      	ldr	r2, [pc, #204]	; (8015360 <UART_RxISR_8BIT+0x1b4>)
 8015294:	4293      	cmp	r3, r2
 8015296:	d01f      	beq.n	80152d8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	685b      	ldr	r3, [r3, #4]
 801529e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d018      	beq.n	80152d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ae:	e853 3f00 	ldrex	r3, [r3]
 80152b2:	623b      	str	r3, [r7, #32]
   return(result);
 80152b4:	6a3b      	ldr	r3, [r7, #32]
 80152b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80152ba:	663b      	str	r3, [r7, #96]	; 0x60
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	461a      	mov	r2, r3
 80152c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80152c4:	633b      	str	r3, [r7, #48]	; 0x30
 80152c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80152ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152cc:	e841 2300 	strex	r3, r2, [r1]
 80152d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80152d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d1e6      	bne.n	80152a6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152dc:	2b01      	cmp	r3, #1
 80152de:	d12e      	bne.n	801533e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2200      	movs	r2, #0
 80152e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	e853 3f00 	ldrex	r3, [r3]
 80152f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	f023 0310 	bic.w	r3, r3, #16
 80152fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	461a      	mov	r2, r3
 8015302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015304:	61fb      	str	r3, [r7, #28]
 8015306:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015308:	69b9      	ldr	r1, [r7, #24]
 801530a:	69fa      	ldr	r2, [r7, #28]
 801530c:	e841 2300 	strex	r3, r2, [r1]
 8015310:	617b      	str	r3, [r7, #20]
   return(result);
 8015312:	697b      	ldr	r3, [r7, #20]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d1e6      	bne.n	80152e6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	69db      	ldr	r3, [r3, #28]
 801531e:	f003 0310 	and.w	r3, r3, #16
 8015322:	2b10      	cmp	r3, #16
 8015324:	d103      	bne.n	801532e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	2210      	movs	r2, #16
 801532c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015334:	4619      	mov	r1, r3
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	f7fe fe40 	bl	8013fbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801533c:	e00b      	b.n	8015356 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f7ec fddc 	bl	8001efc <HAL_UART_RxCpltCallback>
}
 8015344:	e007      	b.n	8015356 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	699a      	ldr	r2, [r3, #24]
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	f042 0208 	orr.w	r2, r2, #8
 8015354:	619a      	str	r2, [r3, #24]
}
 8015356:	bf00      	nop
 8015358:	3770      	adds	r7, #112	; 0x70
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
 801535e:	bf00      	nop
 8015360:	58000c00 	.word	0x58000c00

08015364 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b09c      	sub	sp, #112	; 0x70
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015372:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801537c:	2b22      	cmp	r3, #34	; 0x22
 801537e:	f040 80be 	bne.w	80154fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015388:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015390:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8015392:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015396:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801539a:	4013      	ands	r3, r2
 801539c:	b29a      	uxth	r2, r3
 801539e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80153a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80153a6:	1c9a      	adds	r2, r3, #2
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	3b01      	subs	r3, #1
 80153b6:	b29a      	uxth	r2, r3
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80153c4:	b29b      	uxth	r3, r3
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	f040 80a1 	bne.w	801550e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80153d4:	e853 3f00 	ldrex	r3, [r3]
 80153d8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80153da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80153e0:	667b      	str	r3, [r7, #100]	; 0x64
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	461a      	mov	r2, r3
 80153e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80153ea:	657b      	str	r3, [r7, #84]	; 0x54
 80153ec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80153f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80153f2:	e841 2300 	strex	r3, r2, [r1]
 80153f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80153f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d1e6      	bne.n	80153cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	3308      	adds	r3, #8
 8015404:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015408:	e853 3f00 	ldrex	r3, [r3]
 801540c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015410:	f023 0301 	bic.w	r3, r3, #1
 8015414:	663b      	str	r3, [r7, #96]	; 0x60
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	3308      	adds	r3, #8
 801541c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801541e:	643a      	str	r2, [r7, #64]	; 0x40
 8015420:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015422:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015426:	e841 2300 	strex	r3, r2, [r1]
 801542a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801542e:	2b00      	cmp	r3, #0
 8015430:	d1e5      	bne.n	80153fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	2220      	movs	r2, #32
 8015436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2200      	movs	r2, #0
 801543e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2200      	movs	r2, #0
 8015444:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	4a33      	ldr	r2, [pc, #204]	; (8015518 <UART_RxISR_16BIT+0x1b4>)
 801544c:	4293      	cmp	r3, r2
 801544e:	d01f      	beq.n	8015490 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	685b      	ldr	r3, [r3, #4]
 8015456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801545a:	2b00      	cmp	r3, #0
 801545c:	d018      	beq.n	8015490 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015464:	6a3b      	ldr	r3, [r7, #32]
 8015466:	e853 3f00 	ldrex	r3, [r3]
 801546a:	61fb      	str	r3, [r7, #28]
   return(result);
 801546c:	69fb      	ldr	r3, [r7, #28]
 801546e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015472:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	461a      	mov	r2, r3
 801547a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801547c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801547e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015484:	e841 2300 	strex	r3, r2, [r1]
 8015488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548c:	2b00      	cmp	r3, #0
 801548e:	d1e6      	bne.n	801545e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015494:	2b01      	cmp	r3, #1
 8015496:	d12e      	bne.n	80154f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2200      	movs	r2, #0
 801549c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	e853 3f00 	ldrex	r3, [r3]
 80154aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	f023 0310 	bic.w	r3, r3, #16
 80154b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	461a      	mov	r2, r3
 80154ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80154bc:	61bb      	str	r3, [r7, #24]
 80154be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154c0:	6979      	ldr	r1, [r7, #20]
 80154c2:	69ba      	ldr	r2, [r7, #24]
 80154c4:	e841 2300 	strex	r3, r2, [r1]
 80154c8:	613b      	str	r3, [r7, #16]
   return(result);
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d1e6      	bne.n	801549e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	69db      	ldr	r3, [r3, #28]
 80154d6:	f003 0310 	and.w	r3, r3, #16
 80154da:	2b10      	cmp	r3, #16
 80154dc:	d103      	bne.n	80154e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	2210      	movs	r2, #16
 80154e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80154ec:	4619      	mov	r1, r3
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f7fe fd64 	bl	8013fbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80154f4:	e00b      	b.n	801550e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f7ec fd00 	bl	8001efc <HAL_UART_RxCpltCallback>
}
 80154fc:	e007      	b.n	801550e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	699a      	ldr	r2, [r3, #24]
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	f042 0208 	orr.w	r2, r2, #8
 801550c:	619a      	str	r2, [r3, #24]
}
 801550e:	bf00      	nop
 8015510:	3770      	adds	r7, #112	; 0x70
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}
 8015516:	bf00      	nop
 8015518:	58000c00 	.word	0x58000c00

0801551c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b0ac      	sub	sp, #176	; 0xb0
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801552a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	69db      	ldr	r3, [r3, #28]
 8015534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	689b      	ldr	r3, [r3, #8]
 8015548:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015552:	2b22      	cmp	r3, #34	; 0x22
 8015554:	f040 8180 	bne.w	8015858 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801555e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015562:	e123      	b.n	80157ac <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801556a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801556e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8015572:	b2d9      	uxtb	r1, r3
 8015574:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8015578:	b2da      	uxtb	r2, r3
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801557e:	400a      	ands	r2, r1
 8015580:	b2d2      	uxtb	r2, r2
 8015582:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015588:	1c5a      	adds	r2, r3, #1
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015594:	b29b      	uxth	r3, r3
 8015596:	3b01      	subs	r3, #1
 8015598:	b29a      	uxth	r2, r3
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	69db      	ldr	r3, [r3, #28]
 80155a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80155aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155ae:	f003 0307 	and.w	r3, r3, #7
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d053      	beq.n	801565e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80155b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155ba:	f003 0301 	and.w	r3, r3, #1
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d011      	beq.n	80155e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80155c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80155c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d00b      	beq.n	80155e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	2201      	movs	r2, #1
 80155d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80155dc:	f043 0201 	orr.w	r2, r3, #1
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80155e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155ea:	f003 0302 	and.w	r3, r3, #2
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d011      	beq.n	8015616 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80155f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80155f6:	f003 0301 	and.w	r3, r3, #1
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d00b      	beq.n	8015616 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	2202      	movs	r2, #2
 8015604:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801560c:	f043 0204 	orr.w	r2, r3, #4
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801561a:	f003 0304 	and.w	r3, r3, #4
 801561e:	2b00      	cmp	r3, #0
 8015620:	d011      	beq.n	8015646 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8015622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015626:	f003 0301 	and.w	r3, r3, #1
 801562a:	2b00      	cmp	r3, #0
 801562c:	d00b      	beq.n	8015646 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	2204      	movs	r2, #4
 8015634:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801563c:	f043 0202 	orr.w	r2, r3, #2
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801564c:	2b00      	cmp	r3, #0
 801564e:	d006      	beq.n	801565e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f7fe fca9 	bl	8013fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	2200      	movs	r2, #0
 801565a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015664:	b29b      	uxth	r3, r3
 8015666:	2b00      	cmp	r3, #0
 8015668:	f040 80a0 	bne.w	80157ac <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015674:	e853 3f00 	ldrex	r3, [r3]
 8015678:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801567c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	461a      	mov	r2, r3
 801568a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801568e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015690:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015692:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8015694:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015696:	e841 2300 	strex	r3, r2, [r1]
 801569a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801569c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d1e4      	bne.n	801566c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	3308      	adds	r3, #8
 80156a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156ac:	e853 3f00 	ldrex	r3, [r3]
 80156b0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80156b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80156b4:	4b6e      	ldr	r3, [pc, #440]	; (8015870 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80156b6:	4013      	ands	r3, r2
 80156b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	3308      	adds	r3, #8
 80156c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80156c6:	66ba      	str	r2, [r7, #104]	; 0x68
 80156c8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80156cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80156ce:	e841 2300 	strex	r3, r2, [r1]
 80156d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80156d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d1e3      	bne.n	80156a2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2220      	movs	r2, #32
 80156de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	2200      	movs	r2, #0
 80156e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2200      	movs	r2, #0
 80156ec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	4a60      	ldr	r2, [pc, #384]	; (8015874 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80156f4:	4293      	cmp	r3, r2
 80156f6:	d021      	beq.n	801573c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	685b      	ldr	r3, [r3, #4]
 80156fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015702:	2b00      	cmp	r3, #0
 8015704:	d01a      	beq.n	801573c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801570c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801570e:	e853 3f00 	ldrex	r3, [r3]
 8015712:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015716:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801571a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	461a      	mov	r2, r3
 8015724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015728:	657b      	str	r3, [r7, #84]	; 0x54
 801572a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801572c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801572e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015730:	e841 2300 	strex	r3, r2, [r1]
 8015734:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015738:	2b00      	cmp	r3, #0
 801573a:	d1e4      	bne.n	8015706 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015740:	2b01      	cmp	r3, #1
 8015742:	d130      	bne.n	80157a6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2200      	movs	r2, #0
 8015748:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015752:	e853 3f00 	ldrex	r3, [r3]
 8015756:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801575a:	f023 0310 	bic.w	r3, r3, #16
 801575e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	461a      	mov	r2, r3
 8015768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801576c:	643b      	str	r3, [r7, #64]	; 0x40
 801576e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015772:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015774:	e841 2300 	strex	r3, r2, [r1]
 8015778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801577c:	2b00      	cmp	r3, #0
 801577e:	d1e4      	bne.n	801574a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	69db      	ldr	r3, [r3, #28]
 8015786:	f003 0310 	and.w	r3, r3, #16
 801578a:	2b10      	cmp	r3, #16
 801578c:	d103      	bne.n	8015796 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	2210      	movs	r2, #16
 8015794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801579c:	4619      	mov	r1, r3
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f7fe fc0c 	bl	8013fbc <HAL_UARTEx_RxEventCallback>
 80157a4:	e002      	b.n	80157ac <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f7ec fba8 	bl	8001efc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80157ac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d006      	beq.n	80157c2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80157b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80157b8:	f003 0320 	and.w	r3, r3, #32
 80157bc:	2b00      	cmp	r3, #0
 80157be:	f47f aed1 	bne.w	8015564 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80157c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80157cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d049      	beq.n	8015868 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80157da:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80157de:	429a      	cmp	r2, r3
 80157e0:	d242      	bcs.n	8015868 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	3308      	adds	r3, #8
 80157e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157ea:	6a3b      	ldr	r3, [r7, #32]
 80157ec:	e853 3f00 	ldrex	r3, [r3]
 80157f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80157f2:	69fb      	ldr	r3, [r7, #28]
 80157f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80157f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	3308      	adds	r3, #8
 8015802:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801580a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801580c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801580e:	e841 2300 	strex	r3, r2, [r1]
 8015812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015816:	2b00      	cmp	r3, #0
 8015818:	d1e3      	bne.n	80157e2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	4a16      	ldr	r2, [pc, #88]	; (8015878 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801581e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	e853 3f00 	ldrex	r3, [r3]
 801582c:	60bb      	str	r3, [r7, #8]
   return(result);
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	f043 0320 	orr.w	r3, r3, #32
 8015834:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	461a      	mov	r2, r3
 801583e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015842:	61bb      	str	r3, [r7, #24]
 8015844:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015846:	6979      	ldr	r1, [r7, #20]
 8015848:	69ba      	ldr	r2, [r7, #24]
 801584a:	e841 2300 	strex	r3, r2, [r1]
 801584e:	613b      	str	r3, [r7, #16]
   return(result);
 8015850:	693b      	ldr	r3, [r7, #16]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d1e4      	bne.n	8015820 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015856:	e007      	b.n	8015868 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	699a      	ldr	r2, [r3, #24]
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	f042 0208 	orr.w	r2, r2, #8
 8015866:	619a      	str	r2, [r3, #24]
}
 8015868:	bf00      	nop
 801586a:	37b0      	adds	r7, #176	; 0xb0
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}
 8015870:	effffffe 	.word	0xeffffffe
 8015874:	58000c00 	.word	0x58000c00
 8015878:	080151ad 	.word	0x080151ad

0801587c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b0ae      	sub	sp, #184	; 0xb8
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801588a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	69db      	ldr	r3, [r3, #28]
 8015894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	689b      	ldr	r3, [r3, #8]
 80158a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80158b2:	2b22      	cmp	r3, #34	; 0x22
 80158b4:	f040 8184 	bne.w	8015bc0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80158be:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80158c2:	e127      	b.n	8015b14 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80158d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80158da:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80158de:	4013      	ands	r3, r2
 80158e0:	b29a      	uxth	r2, r3
 80158e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80158e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158ec:	1c9a      	adds	r2, r3, #2
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80158f8:	b29b      	uxth	r3, r3
 80158fa:	3b01      	subs	r3, #1
 80158fc:	b29a      	uxth	r2, r3
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	69db      	ldr	r3, [r3, #28]
 801590a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801590e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015912:	f003 0307 	and.w	r3, r3, #7
 8015916:	2b00      	cmp	r3, #0
 8015918:	d053      	beq.n	80159c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801591a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801591e:	f003 0301 	and.w	r3, r3, #1
 8015922:	2b00      	cmp	r3, #0
 8015924:	d011      	beq.n	801594a <UART_RxISR_16BIT_FIFOEN+0xce>
 8015926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801592e:	2b00      	cmp	r3, #0
 8015930:	d00b      	beq.n	801594a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	2201      	movs	r2, #1
 8015938:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015940:	f043 0201 	orr.w	r2, r3, #1
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801594a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801594e:	f003 0302 	and.w	r3, r3, #2
 8015952:	2b00      	cmp	r3, #0
 8015954:	d011      	beq.n	801597a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8015956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801595a:	f003 0301 	and.w	r3, r3, #1
 801595e:	2b00      	cmp	r3, #0
 8015960:	d00b      	beq.n	801597a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	2202      	movs	r2, #2
 8015968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015970:	f043 0204 	orr.w	r2, r3, #4
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801597a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801597e:	f003 0304 	and.w	r3, r3, #4
 8015982:	2b00      	cmp	r3, #0
 8015984:	d011      	beq.n	80159aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8015986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801598a:	f003 0301 	and.w	r3, r3, #1
 801598e:	2b00      	cmp	r3, #0
 8015990:	d00b      	beq.n	80159aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	2204      	movs	r2, #4
 8015998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80159a0:	f043 0202 	orr.w	r2, r3, #2
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d006      	beq.n	80159c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f7fe faf7 	bl	8013fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2200      	movs	r2, #0
 80159be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80159c8:	b29b      	uxth	r3, r3
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	f040 80a2 	bne.w	8015b14 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159d8:	e853 3f00 	ldrex	r3, [r3]
 80159dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80159de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80159e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80159e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	461a      	mov	r2, r3
 80159ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80159f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80159f6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80159fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80159fe:	e841 2300 	strex	r3, r2, [r1]
 8015a02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8015a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d1e2      	bne.n	80159d0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	3308      	adds	r3, #8
 8015a10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015a14:	e853 3f00 	ldrex	r3, [r3]
 8015a18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015a1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015a1c:	4b6e      	ldr	r3, [pc, #440]	; (8015bd8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8015a1e:	4013      	ands	r3, r2
 8015a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	3308      	adds	r3, #8
 8015a2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015a2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8015a30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015a34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015a36:	e841 2300 	strex	r3, r2, [r1]
 8015a3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d1e3      	bne.n	8015a0a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2220      	movs	r2, #32
 8015a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	2200      	movs	r2, #0
 8015a54:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	4a60      	ldr	r2, [pc, #384]	; (8015bdc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8015a5c:	4293      	cmp	r3, r2
 8015a5e:	d021      	beq.n	8015aa4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	685b      	ldr	r3, [r3, #4]
 8015a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d01a      	beq.n	8015aa4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a76:	e853 3f00 	ldrex	r3, [r3]
 8015a7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	461a      	mov	r2, r3
 8015a8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015a90:	65bb      	str	r3, [r7, #88]	; 0x58
 8015a92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015a96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015a98:	e841 2300 	strex	r3, r2, [r1]
 8015a9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d1e4      	bne.n	8015a6e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015aa8:	2b01      	cmp	r3, #1
 8015aaa:	d130      	bne.n	8015b0e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	2200      	movs	r2, #0
 8015ab0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aba:	e853 3f00 	ldrex	r3, [r3]
 8015abe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ac2:	f023 0310 	bic.w	r3, r3, #16
 8015ac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	461a      	mov	r2, r3
 8015ad0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8015ad6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ad8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015adc:	e841 2300 	strex	r3, r2, [r1]
 8015ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d1e4      	bne.n	8015ab2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	69db      	ldr	r3, [r3, #28]
 8015aee:	f003 0310 	and.w	r3, r3, #16
 8015af2:	2b10      	cmp	r3, #16
 8015af4:	d103      	bne.n	8015afe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	2210      	movs	r2, #16
 8015afc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015b04:	4619      	mov	r1, r3
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f7fe fa58 	bl	8013fbc <HAL_UARTEx_RxEventCallback>
 8015b0c:	e002      	b.n	8015b14 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f7ec f9f4 	bl	8001efc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015b14:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d006      	beq.n	8015b2a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8015b1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015b20:	f003 0320 	and.w	r3, r3, #32
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	f47f aecd 	bne.w	80158c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015b30:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015b34:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d049      	beq.n	8015bd0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015b42:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d242      	bcs.n	8015bd0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	3308      	adds	r3, #8
 8015b50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b54:	e853 3f00 	ldrex	r3, [r3]
 8015b58:	623b      	str	r3, [r7, #32]
   return(result);
 8015b5a:	6a3b      	ldr	r3, [r7, #32]
 8015b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	3308      	adds	r3, #8
 8015b6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015b6e:	633a      	str	r2, [r7, #48]	; 0x30
 8015b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b76:	e841 2300 	strex	r3, r2, [r1]
 8015b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d1e3      	bne.n	8015b4a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	4a16      	ldr	r2, [pc, #88]	; (8015be0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8015b86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	e853 3f00 	ldrex	r3, [r3]
 8015b94:	60fb      	str	r3, [r7, #12]
   return(result);
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	f043 0320 	orr.w	r3, r3, #32
 8015b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	461a      	mov	r2, r3
 8015ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015baa:	61fb      	str	r3, [r7, #28]
 8015bac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bae:	69b9      	ldr	r1, [r7, #24]
 8015bb0:	69fa      	ldr	r2, [r7, #28]
 8015bb2:	e841 2300 	strex	r3, r2, [r1]
 8015bb6:	617b      	str	r3, [r7, #20]
   return(result);
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d1e4      	bne.n	8015b88 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015bbe:	e007      	b.n	8015bd0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	699a      	ldr	r2, [r3, #24]
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	f042 0208 	orr.w	r2, r2, #8
 8015bce:	619a      	str	r2, [r3, #24]
}
 8015bd0:	bf00      	nop
 8015bd2:	37b8      	adds	r7, #184	; 0xb8
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}
 8015bd8:	effffffe 	.word	0xeffffffe
 8015bdc:	58000c00 	.word	0x58000c00
 8015be0:	08015365 	.word	0x08015365

08015be4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015be4:	b480      	push	{r7}
 8015be6:	b083      	sub	sp, #12
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8015bec:	bf00      	nop
 8015bee:	370c      	adds	r7, #12
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf6:	4770      	bx	lr

08015bf8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8015bf8:	b480      	push	{r7}
 8015bfa:	b083      	sub	sp, #12
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8015c00:	bf00      	nop
 8015c02:	370c      	adds	r7, #12
 8015c04:	46bd      	mov	sp, r7
 8015c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0a:	4770      	bx	lr

08015c0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8015c0c:	b480      	push	{r7}
 8015c0e:	b083      	sub	sp, #12
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8015c14:	bf00      	nop
 8015c16:	370c      	adds	r7, #12
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1e:	4770      	bx	lr

08015c20 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8015c20:	b480      	push	{r7}
 8015c22:	b089      	sub	sp, #36	; 0x24
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015c2e:	2b01      	cmp	r3, #1
 8015c30:	d101      	bne.n	8015c36 <HAL_UARTEx_EnableStopMode+0x16>
 8015c32:	2302      	movs	r3, #2
 8015c34:	e021      	b.n	8015c7a <HAL_UARTEx_EnableStopMode+0x5a>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	2201      	movs	r2, #1
 8015c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	e853 3f00 	ldrex	r3, [r3]
 8015c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	f043 0302 	orr.w	r3, r3, #2
 8015c52:	61fb      	str	r3, [r7, #28]
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	461a      	mov	r2, r3
 8015c5a:	69fb      	ldr	r3, [r7, #28]
 8015c5c:	61bb      	str	r3, [r7, #24]
 8015c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c60:	6979      	ldr	r1, [r7, #20]
 8015c62:	69ba      	ldr	r2, [r7, #24]
 8015c64:	e841 2300 	strex	r3, r2, [r1]
 8015c68:	613b      	str	r3, [r7, #16]
   return(result);
 8015c6a:	693b      	ldr	r3, [r7, #16]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d1e6      	bne.n	8015c3e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	2200      	movs	r2, #0
 8015c74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015c78:	2300      	movs	r3, #0
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3724      	adds	r7, #36	; 0x24
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c84:	4770      	bx	lr

08015c86 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8015c86:	b580      	push	{r7, lr}
 8015c88:	b084      	sub	sp, #16
 8015c8a:	af00      	add	r7, sp, #0
 8015c8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015c94:	2b01      	cmp	r3, #1
 8015c96:	d101      	bne.n	8015c9c <HAL_UARTEx_EnableFifoMode+0x16>
 8015c98:	2302      	movs	r3, #2
 8015c9a:	e02b      	b.n	8015cf4 <HAL_UARTEx_EnableFifoMode+0x6e>
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	2201      	movs	r2, #1
 8015ca0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2224      	movs	r2, #36	; 0x24
 8015ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	681a      	ldr	r2, [r3, #0]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	f022 0201 	bic.w	r2, r2, #1
 8015cc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015cca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8015cd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	68fa      	ldr	r2, [r7, #12]
 8015cda:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015cdc:	6878      	ldr	r0, [r7, #4]
 8015cde:	f000 f8c3 	bl	8015e68 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	2220      	movs	r2, #32
 8015ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	2200      	movs	r2, #0
 8015cee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015cf2:	2300      	movs	r3, #0
}
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	3710      	adds	r7, #16
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bd80      	pop	{r7, pc}

08015cfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015cfc:	b480      	push	{r7}
 8015cfe:	b085      	sub	sp, #20
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015d0a:	2b01      	cmp	r3, #1
 8015d0c:	d101      	bne.n	8015d12 <HAL_UARTEx_DisableFifoMode+0x16>
 8015d0e:	2302      	movs	r3, #2
 8015d10:	e027      	b.n	8015d62 <HAL_UARTEx_DisableFifoMode+0x66>
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2201      	movs	r2, #1
 8015d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2224      	movs	r2, #36	; 0x24
 8015d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	681a      	ldr	r2, [r3, #0]
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	f022 0201 	bic.w	r2, r2, #1
 8015d38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015d40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2200      	movs	r2, #0
 8015d46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	68fa      	ldr	r2, [r7, #12]
 8015d4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	2220      	movs	r2, #32
 8015d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015d60:	2300      	movs	r3, #0
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3714      	adds	r7, #20
 8015d66:	46bd      	mov	sp, r7
 8015d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6c:	4770      	bx	lr

08015d6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015d6e:	b580      	push	{r7, lr}
 8015d70:	b084      	sub	sp, #16
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	6078      	str	r0, [r7, #4]
 8015d76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015d7e:	2b01      	cmp	r3, #1
 8015d80:	d101      	bne.n	8015d86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8015d82:	2302      	movs	r3, #2
 8015d84:	e02d      	b.n	8015de2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	2201      	movs	r2, #1
 8015d8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	2224      	movs	r2, #36	; 0x24
 8015d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	681a      	ldr	r2, [r3, #0]
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	f022 0201 	bic.w	r2, r2, #1
 8015dac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	689b      	ldr	r3, [r3, #8]
 8015db4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	683a      	ldr	r2, [r7, #0]
 8015dbe:	430a      	orrs	r2, r1
 8015dc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015dc2:	6878      	ldr	r0, [r7, #4]
 8015dc4:	f000 f850 	bl	8015e68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	68fa      	ldr	r2, [r7, #12]
 8015dce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2220      	movs	r2, #32
 8015dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2200      	movs	r2, #0
 8015ddc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015de0:	2300      	movs	r3, #0
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	3710      	adds	r7, #16
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}

08015dea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015dea:	b580      	push	{r7, lr}
 8015dec:	b084      	sub	sp, #16
 8015dee:	af00      	add	r7, sp, #0
 8015df0:	6078      	str	r0, [r7, #4]
 8015df2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015dfa:	2b01      	cmp	r3, #1
 8015dfc:	d101      	bne.n	8015e02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015dfe:	2302      	movs	r3, #2
 8015e00:	e02d      	b.n	8015e5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2201      	movs	r2, #1
 8015e06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	2224      	movs	r2, #36	; 0x24
 8015e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	681a      	ldr	r2, [r3, #0]
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	f022 0201 	bic.w	r2, r2, #1
 8015e28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	689b      	ldr	r3, [r3, #8]
 8015e30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	683a      	ldr	r2, [r7, #0]
 8015e3a:	430a      	orrs	r2, r1
 8015e3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f000 f812 	bl	8015e68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	68fa      	ldr	r2, [r7, #12]
 8015e4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	2220      	movs	r2, #32
 8015e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	2200      	movs	r2, #0
 8015e58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015e5c:	2300      	movs	r3, #0
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	3710      	adds	r7, #16
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}
	...

08015e68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015e68:	b480      	push	{r7}
 8015e6a:	b085      	sub	sp, #20
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d108      	bne.n	8015e8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2201      	movs	r2, #1
 8015e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	2201      	movs	r2, #1
 8015e84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015e88:	e031      	b.n	8015eee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015e8a:	2310      	movs	r3, #16
 8015e8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015e8e:	2310      	movs	r3, #16
 8015e90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	689b      	ldr	r3, [r3, #8]
 8015e98:	0e5b      	lsrs	r3, r3, #25
 8015e9a:	b2db      	uxtb	r3, r3
 8015e9c:	f003 0307 	and.w	r3, r3, #7
 8015ea0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	689b      	ldr	r3, [r3, #8]
 8015ea8:	0f5b      	lsrs	r3, r3, #29
 8015eaa:	b2db      	uxtb	r3, r3
 8015eac:	f003 0307 	and.w	r3, r3, #7
 8015eb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015eb2:	7bbb      	ldrb	r3, [r7, #14]
 8015eb4:	7b3a      	ldrb	r2, [r7, #12]
 8015eb6:	4911      	ldr	r1, [pc, #68]	; (8015efc <UARTEx_SetNbDataToProcess+0x94>)
 8015eb8:	5c8a      	ldrb	r2, [r1, r2]
 8015eba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8015ebe:	7b3a      	ldrb	r2, [r7, #12]
 8015ec0:	490f      	ldr	r1, [pc, #60]	; (8015f00 <UARTEx_SetNbDataToProcess+0x98>)
 8015ec2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015ec4:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ec8:	b29a      	uxth	r2, r3
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015ed0:	7bfb      	ldrb	r3, [r7, #15]
 8015ed2:	7b7a      	ldrb	r2, [r7, #13]
 8015ed4:	4909      	ldr	r1, [pc, #36]	; (8015efc <UARTEx_SetNbDataToProcess+0x94>)
 8015ed6:	5c8a      	ldrb	r2, [r1, r2]
 8015ed8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015edc:	7b7a      	ldrb	r2, [r7, #13]
 8015ede:	4908      	ldr	r1, [pc, #32]	; (8015f00 <UARTEx_SetNbDataToProcess+0x98>)
 8015ee0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015ee2:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ee6:	b29a      	uxth	r2, r3
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8015eee:	bf00      	nop
 8015ef0:	3714      	adds	r7, #20
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef8:	4770      	bx	lr
 8015efa:	bf00      	nop
 8015efc:	0801a204 	.word	0x0801a204
 8015f00:	0801a20c 	.word	0x0801a20c

08015f04 <__NVIC_SetPriority>:
{
 8015f04:	b480      	push	{r7}
 8015f06:	b083      	sub	sp, #12
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	6039      	str	r1, [r7, #0]
 8015f0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	db0a      	blt.n	8015f2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015f18:	683b      	ldr	r3, [r7, #0]
 8015f1a:	b2da      	uxtb	r2, r3
 8015f1c:	490c      	ldr	r1, [pc, #48]	; (8015f50 <__NVIC_SetPriority+0x4c>)
 8015f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015f22:	0112      	lsls	r2, r2, #4
 8015f24:	b2d2      	uxtb	r2, r2
 8015f26:	440b      	add	r3, r1
 8015f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015f2c:	e00a      	b.n	8015f44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	b2da      	uxtb	r2, r3
 8015f32:	4908      	ldr	r1, [pc, #32]	; (8015f54 <__NVIC_SetPriority+0x50>)
 8015f34:	88fb      	ldrh	r3, [r7, #6]
 8015f36:	f003 030f 	and.w	r3, r3, #15
 8015f3a:	3b04      	subs	r3, #4
 8015f3c:	0112      	lsls	r2, r2, #4
 8015f3e:	b2d2      	uxtb	r2, r2
 8015f40:	440b      	add	r3, r1
 8015f42:	761a      	strb	r2, [r3, #24]
}
 8015f44:	bf00      	nop
 8015f46:	370c      	adds	r7, #12
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4e:	4770      	bx	lr
 8015f50:	e000e100 	.word	0xe000e100
 8015f54:	e000ed00 	.word	0xe000ed00

08015f58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015f5c:	4b05      	ldr	r3, [pc, #20]	; (8015f74 <SysTick_Handler+0x1c>)
 8015f5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015f60:	f002 f958 	bl	8018214 <xTaskGetSchedulerState>
 8015f64:	4603      	mov	r3, r0
 8015f66:	2b01      	cmp	r3, #1
 8015f68:	d001      	beq.n	8015f6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015f6a:	f002 ff75 	bl	8018e58 <xPortSysTickHandler>
  }
}
 8015f6e:	bf00      	nop
 8015f70:	bd80      	pop	{r7, pc}
 8015f72:	bf00      	nop
 8015f74:	e000e010 	.word	0xe000e010

08015f78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015f7c:	2100      	movs	r1, #0
 8015f7e:	f06f 0004 	mvn.w	r0, #4
 8015f82:	f7ff ffbf 	bl	8015f04 <__NVIC_SetPriority>
#endif
}
 8015f86:	bf00      	nop
 8015f88:	bd80      	pop	{r7, pc}
	...

08015f8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015f8c:	b480      	push	{r7}
 8015f8e:	b083      	sub	sp, #12
 8015f90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f92:	f3ef 8305 	mrs	r3, IPSR
 8015f96:	603b      	str	r3, [r7, #0]
  return(result);
 8015f98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d003      	beq.n	8015fa6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015f9e:	f06f 0305 	mvn.w	r3, #5
 8015fa2:	607b      	str	r3, [r7, #4]
 8015fa4:	e00c      	b.n	8015fc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015fa6:	4b0a      	ldr	r3, [pc, #40]	; (8015fd0 <osKernelInitialize+0x44>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d105      	bne.n	8015fba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015fae:	4b08      	ldr	r3, [pc, #32]	; (8015fd0 <osKernelInitialize+0x44>)
 8015fb0:	2201      	movs	r2, #1
 8015fb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	607b      	str	r3, [r7, #4]
 8015fb8:	e002      	b.n	8015fc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015fbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015fc0:	687b      	ldr	r3, [r7, #4]
}
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	370c      	adds	r7, #12
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop
 8015fd0:	2400201c 	.word	0x2400201c

08015fd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b082      	sub	sp, #8
 8015fd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015fda:	f3ef 8305 	mrs	r3, IPSR
 8015fde:	603b      	str	r3, [r7, #0]
  return(result);
 8015fe0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d003      	beq.n	8015fee <osKernelStart+0x1a>
    stat = osErrorISR;
 8015fe6:	f06f 0305 	mvn.w	r3, #5
 8015fea:	607b      	str	r3, [r7, #4]
 8015fec:	e010      	b.n	8016010 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015fee:	4b0b      	ldr	r3, [pc, #44]	; (801601c <osKernelStart+0x48>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	2b01      	cmp	r3, #1
 8015ff4:	d109      	bne.n	801600a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015ff6:	f7ff ffbf 	bl	8015f78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015ffa:	4b08      	ldr	r3, [pc, #32]	; (801601c <osKernelStart+0x48>)
 8015ffc:	2202      	movs	r2, #2
 8015ffe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016000:	f001 fc0c 	bl	801781c <vTaskStartScheduler>
      stat = osOK;
 8016004:	2300      	movs	r3, #0
 8016006:	607b      	str	r3, [r7, #4]
 8016008:	e002      	b.n	8016010 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801600a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801600e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016010:	687b      	ldr	r3, [r7, #4]
}
 8016012:	4618      	mov	r0, r3
 8016014:	3708      	adds	r7, #8
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}
 801601a:	bf00      	nop
 801601c:	2400201c 	.word	0x2400201c

08016020 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016020:	b580      	push	{r7, lr}
 8016022:	b08e      	sub	sp, #56	; 0x38
 8016024:	af04      	add	r7, sp, #16
 8016026:	60f8      	str	r0, [r7, #12]
 8016028:	60b9      	str	r1, [r7, #8]
 801602a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801602c:	2300      	movs	r3, #0
 801602e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016030:	f3ef 8305 	mrs	r3, IPSR
 8016034:	617b      	str	r3, [r7, #20]
  return(result);
 8016036:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016038:	2b00      	cmp	r3, #0
 801603a:	d17e      	bne.n	801613a <osThreadNew+0x11a>
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d07b      	beq.n	801613a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016042:	2380      	movs	r3, #128	; 0x80
 8016044:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016046:	2318      	movs	r3, #24
 8016048:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801604a:	2300      	movs	r3, #0
 801604c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801604e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016052:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d045      	beq.n	80160e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d002      	beq.n	8016068 <osThreadNew+0x48>
        name = attr->name;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	699b      	ldr	r3, [r3, #24]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d002      	beq.n	8016076 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	699b      	ldr	r3, [r3, #24]
 8016074:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016076:	69fb      	ldr	r3, [r7, #28]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d008      	beq.n	801608e <osThreadNew+0x6e>
 801607c:	69fb      	ldr	r3, [r7, #28]
 801607e:	2b38      	cmp	r3, #56	; 0x38
 8016080:	d805      	bhi.n	801608e <osThreadNew+0x6e>
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	685b      	ldr	r3, [r3, #4]
 8016086:	f003 0301 	and.w	r3, r3, #1
 801608a:	2b00      	cmp	r3, #0
 801608c:	d001      	beq.n	8016092 <osThreadNew+0x72>
        return (NULL);
 801608e:	2300      	movs	r3, #0
 8016090:	e054      	b.n	801613c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	695b      	ldr	r3, [r3, #20]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d003      	beq.n	80160a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	695b      	ldr	r3, [r3, #20]
 801609e:	089b      	lsrs	r3, r3, #2
 80160a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	689b      	ldr	r3, [r3, #8]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d00e      	beq.n	80160c8 <osThreadNew+0xa8>
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	68db      	ldr	r3, [r3, #12]
 80160ae:	2b5b      	cmp	r3, #91	; 0x5b
 80160b0:	d90a      	bls.n	80160c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d006      	beq.n	80160c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	695b      	ldr	r3, [r3, #20]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d002      	beq.n	80160c8 <osThreadNew+0xa8>
        mem = 1;
 80160c2:	2301      	movs	r3, #1
 80160c4:	61bb      	str	r3, [r7, #24]
 80160c6:	e010      	b.n	80160ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	689b      	ldr	r3, [r3, #8]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d10c      	bne.n	80160ea <osThreadNew+0xca>
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	68db      	ldr	r3, [r3, #12]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d108      	bne.n	80160ea <osThreadNew+0xca>
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	691b      	ldr	r3, [r3, #16]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d104      	bne.n	80160ea <osThreadNew+0xca>
          mem = 0;
 80160e0:	2300      	movs	r3, #0
 80160e2:	61bb      	str	r3, [r7, #24]
 80160e4:	e001      	b.n	80160ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80160e6:	2300      	movs	r3, #0
 80160e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80160ea:	69bb      	ldr	r3, [r7, #24]
 80160ec:	2b01      	cmp	r3, #1
 80160ee:	d110      	bne.n	8016112 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80160f4:	687a      	ldr	r2, [r7, #4]
 80160f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80160f8:	9202      	str	r2, [sp, #8]
 80160fa:	9301      	str	r3, [sp, #4]
 80160fc:	69fb      	ldr	r3, [r7, #28]
 80160fe:	9300      	str	r3, [sp, #0]
 8016100:	68bb      	ldr	r3, [r7, #8]
 8016102:	6a3a      	ldr	r2, [r7, #32]
 8016104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016106:	68f8      	ldr	r0, [r7, #12]
 8016108:	f001 f9b2 	bl	8017470 <xTaskCreateStatic>
 801610c:	4603      	mov	r3, r0
 801610e:	613b      	str	r3, [r7, #16]
 8016110:	e013      	b.n	801613a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016112:	69bb      	ldr	r3, [r7, #24]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d110      	bne.n	801613a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016118:	6a3b      	ldr	r3, [r7, #32]
 801611a:	b29a      	uxth	r2, r3
 801611c:	f107 0310 	add.w	r3, r7, #16
 8016120:	9301      	str	r3, [sp, #4]
 8016122:	69fb      	ldr	r3, [r7, #28]
 8016124:	9300      	str	r3, [sp, #0]
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801612a:	68f8      	ldr	r0, [r7, #12]
 801612c:	f001 f9fd 	bl	801752a <xTaskCreate>
 8016130:	4603      	mov	r3, r0
 8016132:	2b01      	cmp	r3, #1
 8016134:	d001      	beq.n	801613a <osThreadNew+0x11a>
            hTask = NULL;
 8016136:	2300      	movs	r3, #0
 8016138:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801613a:	693b      	ldr	r3, [r7, #16]
}
 801613c:	4618      	mov	r0, r3
 801613e:	3728      	adds	r7, #40	; 0x28
 8016140:	46bd      	mov	sp, r7
 8016142:	bd80      	pop	{r7, pc}

08016144 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016144:	b480      	push	{r7}
 8016146:	b083      	sub	sp, #12
 8016148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801614a:	f3ef 8305 	mrs	r3, IPSR
 801614e:	603b      	str	r3, [r7, #0]
  return(result);
 8016150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016152:	2b00      	cmp	r3, #0
 8016154:	d003      	beq.n	801615e <osThreadYield+0x1a>
    stat = osErrorISR;
 8016156:	f06f 0305 	mvn.w	r3, #5
 801615a:	607b      	str	r3, [r7, #4]
 801615c:	e009      	b.n	8016172 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801615e:	2300      	movs	r3, #0
 8016160:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8016162:	4b07      	ldr	r3, [pc, #28]	; (8016180 <osThreadYield+0x3c>)
 8016164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016168:	601a      	str	r2, [r3, #0]
 801616a:	f3bf 8f4f 	dsb	sy
 801616e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8016172:	687b      	ldr	r3, [r7, #4]
}
 8016174:	4618      	mov	r0, r3
 8016176:	370c      	adds	r7, #12
 8016178:	46bd      	mov	sp, r7
 801617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617e:	4770      	bx	lr
 8016180:	e000ed04 	.word	0xe000ed04

08016184 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016184:	b580      	push	{r7, lr}
 8016186:	b084      	sub	sp, #16
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801618c:	f3ef 8305 	mrs	r3, IPSR
 8016190:	60bb      	str	r3, [r7, #8]
  return(result);
 8016192:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016194:	2b00      	cmp	r3, #0
 8016196:	d003      	beq.n	80161a0 <osDelay+0x1c>
    stat = osErrorISR;
 8016198:	f06f 0305 	mvn.w	r3, #5
 801619c:	60fb      	str	r3, [r7, #12]
 801619e:	e007      	b.n	80161b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80161a0:	2300      	movs	r3, #0
 80161a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d002      	beq.n	80161b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	f001 fb02 	bl	80177b4 <vTaskDelay>
    }
  }

  return (stat);
 80161b0:	68fb      	ldr	r3, [r7, #12]
}
 80161b2:	4618      	mov	r0, r3
 80161b4:	3710      	adds	r7, #16
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bd80      	pop	{r7, pc}

080161ba <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80161ba:	b580      	push	{r7, lr}
 80161bc:	b086      	sub	sp, #24
 80161be:	af00      	add	r7, sp, #0
 80161c0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80161c2:	2300      	movs	r3, #0
 80161c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161c6:	f3ef 8305 	mrs	r3, IPSR
 80161ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80161cc:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d12d      	bne.n	801622e <osEventFlagsNew+0x74>
    mem = -1;
 80161d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161d6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d015      	beq.n	801620a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	689b      	ldr	r3, [r3, #8]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d006      	beq.n	80161f4 <osEventFlagsNew+0x3a>
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	68db      	ldr	r3, [r3, #12]
 80161ea:	2b1f      	cmp	r3, #31
 80161ec:	d902      	bls.n	80161f4 <osEventFlagsNew+0x3a>
        mem = 1;
 80161ee:	2301      	movs	r3, #1
 80161f0:	613b      	str	r3, [r7, #16]
 80161f2:	e00c      	b.n	801620e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	689b      	ldr	r3, [r3, #8]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d108      	bne.n	801620e <osEventFlagsNew+0x54>
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	68db      	ldr	r3, [r3, #12]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d104      	bne.n	801620e <osEventFlagsNew+0x54>
          mem = 0;
 8016204:	2300      	movs	r3, #0
 8016206:	613b      	str	r3, [r7, #16]
 8016208:	e001      	b.n	801620e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801620a:	2300      	movs	r3, #0
 801620c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 801620e:	693b      	ldr	r3, [r7, #16]
 8016210:	2b01      	cmp	r3, #1
 8016212:	d106      	bne.n	8016222 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	689b      	ldr	r3, [r3, #8]
 8016218:	4618      	mov	r0, r3
 801621a:	f000 f91d 	bl	8016458 <xEventGroupCreateStatic>
 801621e:	6178      	str	r0, [r7, #20]
 8016220:	e005      	b.n	801622e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d102      	bne.n	801622e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016228:	f000 f94d 	bl	80164c6 <xEventGroupCreate>
 801622c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801622e:	697b      	ldr	r3, [r7, #20]
}
 8016230:	4618      	mov	r0, r3
 8016232:	3718      	adds	r7, #24
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}

08016238 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016238:	b580      	push	{r7, lr}
 801623a:	b086      	sub	sp, #24
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
 8016240:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016246:	693b      	ldr	r3, [r7, #16]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d004      	beq.n	8016256 <osEventFlagsSet+0x1e>
 801624c:	683b      	ldr	r3, [r7, #0]
 801624e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016252:	2b00      	cmp	r3, #0
 8016254:	d003      	beq.n	801625e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016256:	f06f 0303 	mvn.w	r3, #3
 801625a:	617b      	str	r3, [r7, #20]
 801625c:	e028      	b.n	80162b0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801625e:	f3ef 8305 	mrs	r3, IPSR
 8016262:	60fb      	str	r3, [r7, #12]
  return(result);
 8016264:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016266:	2b00      	cmp	r3, #0
 8016268:	d01d      	beq.n	80162a6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801626a:	2300      	movs	r3, #0
 801626c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801626e:	f107 0308 	add.w	r3, r7, #8
 8016272:	461a      	mov	r2, r3
 8016274:	6839      	ldr	r1, [r7, #0]
 8016276:	6938      	ldr	r0, [r7, #16]
 8016278:	f000 fb46 	bl	8016908 <xEventGroupSetBitsFromISR>
 801627c:	4603      	mov	r3, r0
 801627e:	2b00      	cmp	r3, #0
 8016280:	d103      	bne.n	801628a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8016282:	f06f 0302 	mvn.w	r3, #2
 8016286:	617b      	str	r3, [r7, #20]
 8016288:	e012      	b.n	80162b0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d00d      	beq.n	80162b0 <osEventFlagsSet+0x78>
 8016294:	4b09      	ldr	r3, [pc, #36]	; (80162bc <osEventFlagsSet+0x84>)
 8016296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801629a:	601a      	str	r2, [r3, #0]
 801629c:	f3bf 8f4f 	dsb	sy
 80162a0:	f3bf 8f6f 	isb	sy
 80162a4:	e004      	b.n	80162b0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80162a6:	6839      	ldr	r1, [r7, #0]
 80162a8:	6938      	ldr	r0, [r7, #16]
 80162aa:	f000 fa65 	bl	8016778 <xEventGroupSetBits>
 80162ae:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80162b0:	697b      	ldr	r3, [r7, #20]
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	3718      	adds	r7, #24
 80162b6:	46bd      	mov	sp, r7
 80162b8:	bd80      	pop	{r7, pc}
 80162ba:	bf00      	nop
 80162bc:	e000ed04 	.word	0xe000ed04

080162c0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b086      	sub	sp, #24
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
 80162c8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80162ce:	693b      	ldr	r3, [r7, #16]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d004      	beq.n	80162de <osEventFlagsClear+0x1e>
 80162d4:	683b      	ldr	r3, [r7, #0]
 80162d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d003      	beq.n	80162e6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80162de:	f06f 0303 	mvn.w	r3, #3
 80162e2:	617b      	str	r3, [r7, #20]
 80162e4:	e019      	b.n	801631a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80162e6:	f3ef 8305 	mrs	r3, IPSR
 80162ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80162ec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d00e      	beq.n	8016310 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80162f2:	6938      	ldr	r0, [r7, #16]
 80162f4:	f000 fa1c 	bl	8016730 <xEventGroupGetBitsFromISR>
 80162f8:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80162fa:	6839      	ldr	r1, [r7, #0]
 80162fc:	6938      	ldr	r0, [r7, #16]
 80162fe:	f000 fa03 	bl	8016708 <xEventGroupClearBitsFromISR>
 8016302:	4603      	mov	r3, r0
 8016304:	2b00      	cmp	r3, #0
 8016306:	d108      	bne.n	801631a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016308:	f06f 0302 	mvn.w	r3, #2
 801630c:	617b      	str	r3, [r7, #20]
 801630e:	e004      	b.n	801631a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016310:	6839      	ldr	r1, [r7, #0]
 8016312:	6938      	ldr	r0, [r7, #16]
 8016314:	f000 f9c0 	bl	8016698 <xEventGroupClearBits>
 8016318:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801631a:	697b      	ldr	r3, [r7, #20]
}
 801631c:	4618      	mov	r0, r3
 801631e:	3718      	adds	r7, #24
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}

08016324 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016324:	b580      	push	{r7, lr}
 8016326:	b08c      	sub	sp, #48	; 0x30
 8016328:	af02      	add	r7, sp, #8
 801632a:	60f8      	str	r0, [r7, #12]
 801632c:	60b9      	str	r1, [r7, #8]
 801632e:	607a      	str	r2, [r7, #4]
 8016330:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d004      	beq.n	8016346 <osEventFlagsWait+0x22>
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016342:	2b00      	cmp	r3, #0
 8016344:	d003      	beq.n	801634e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8016346:	f06f 0303 	mvn.w	r3, #3
 801634a:	61fb      	str	r3, [r7, #28]
 801634c:	e04b      	b.n	80163e6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801634e:	f3ef 8305 	mrs	r3, IPSR
 8016352:	617b      	str	r3, [r7, #20]
  return(result);
 8016354:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016356:	2b00      	cmp	r3, #0
 8016358:	d003      	beq.n	8016362 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801635a:	f06f 0305 	mvn.w	r3, #5
 801635e:	61fb      	str	r3, [r7, #28]
 8016360:	e041      	b.n	80163e6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f003 0301 	and.w	r3, r3, #1
 8016368:	2b00      	cmp	r3, #0
 801636a:	d002      	beq.n	8016372 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801636c:	2301      	movs	r3, #1
 801636e:	627b      	str	r3, [r7, #36]	; 0x24
 8016370:	e001      	b.n	8016376 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8016372:	2300      	movs	r3, #0
 8016374:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	f003 0302 	and.w	r3, r3, #2
 801637c:	2b00      	cmp	r3, #0
 801637e:	d002      	beq.n	8016386 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8016380:	2300      	movs	r3, #0
 8016382:	623b      	str	r3, [r7, #32]
 8016384:	e001      	b.n	801638a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016386:	2301      	movs	r3, #1
 8016388:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801638a:	683b      	ldr	r3, [r7, #0]
 801638c:	9300      	str	r3, [sp, #0]
 801638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016390:	6a3a      	ldr	r2, [r7, #32]
 8016392:	68b9      	ldr	r1, [r7, #8]
 8016394:	69b8      	ldr	r0, [r7, #24]
 8016396:	f000 f8b1 	bl	80164fc <xEventGroupWaitBits>
 801639a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	f003 0301 	and.w	r3, r3, #1
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d010      	beq.n	80163c8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80163a6:	68ba      	ldr	r2, [r7, #8]
 80163a8:	69fb      	ldr	r3, [r7, #28]
 80163aa:	4013      	ands	r3, r2
 80163ac:	68ba      	ldr	r2, [r7, #8]
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d019      	beq.n	80163e6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80163b2:	683b      	ldr	r3, [r7, #0]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d003      	beq.n	80163c0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80163b8:	f06f 0301 	mvn.w	r3, #1
 80163bc:	61fb      	str	r3, [r7, #28]
 80163be:	e012      	b.n	80163e6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80163c0:	f06f 0302 	mvn.w	r3, #2
 80163c4:	61fb      	str	r3, [r7, #28]
 80163c6:	e00e      	b.n	80163e6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80163c8:	68ba      	ldr	r2, [r7, #8]
 80163ca:	69fb      	ldr	r3, [r7, #28]
 80163cc:	4013      	ands	r3, r2
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d109      	bne.n	80163e6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d003      	beq.n	80163e0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80163d8:	f06f 0301 	mvn.w	r3, #1
 80163dc:	61fb      	str	r3, [r7, #28]
 80163de:	e002      	b.n	80163e6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80163e0:	f06f 0302 	mvn.w	r3, #2
 80163e4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80163e6:	69fb      	ldr	r3, [r7, #28]
}
 80163e8:	4618      	mov	r0, r3
 80163ea:	3728      	adds	r7, #40	; 0x28
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd80      	pop	{r7, pc}

080163f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80163f0:	b480      	push	{r7}
 80163f2:	b085      	sub	sp, #20
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	60f8      	str	r0, [r7, #12]
 80163f8:	60b9      	str	r1, [r7, #8]
 80163fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	4a07      	ldr	r2, [pc, #28]	; (801641c <vApplicationGetIdleTaskMemory+0x2c>)
 8016400:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	4a06      	ldr	r2, [pc, #24]	; (8016420 <vApplicationGetIdleTaskMemory+0x30>)
 8016406:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2280      	movs	r2, #128	; 0x80
 801640c:	601a      	str	r2, [r3, #0]
}
 801640e:	bf00      	nop
 8016410:	3714      	adds	r7, #20
 8016412:	46bd      	mov	sp, r7
 8016414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016418:	4770      	bx	lr
 801641a:	bf00      	nop
 801641c:	24002020 	.word	0x24002020
 8016420:	2400207c 	.word	0x2400207c

08016424 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016424:	b480      	push	{r7}
 8016426:	b085      	sub	sp, #20
 8016428:	af00      	add	r7, sp, #0
 801642a:	60f8      	str	r0, [r7, #12]
 801642c:	60b9      	str	r1, [r7, #8]
 801642e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	4a07      	ldr	r2, [pc, #28]	; (8016450 <vApplicationGetTimerTaskMemory+0x2c>)
 8016434:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016436:	68bb      	ldr	r3, [r7, #8]
 8016438:	4a06      	ldr	r2, [pc, #24]	; (8016454 <vApplicationGetTimerTaskMemory+0x30>)
 801643a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016442:	601a      	str	r2, [r3, #0]
}
 8016444:	bf00      	nop
 8016446:	3714      	adds	r7, #20
 8016448:	46bd      	mov	sp, r7
 801644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644e:	4770      	bx	lr
 8016450:	2400227c 	.word	0x2400227c
 8016454:	240022d8 	.word	0x240022d8

08016458 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8016458:	b580      	push	{r7, lr}
 801645a:	b086      	sub	sp, #24
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d10a      	bne.n	801647c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801646a:	f383 8811 	msr	BASEPRI, r3
 801646e:	f3bf 8f6f 	isb	sy
 8016472:	f3bf 8f4f 	dsb	sy
 8016476:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016478:	bf00      	nop
 801647a:	e7fe      	b.n	801647a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801647c:	2320      	movs	r3, #32
 801647e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	2b20      	cmp	r3, #32
 8016484:	d00a      	beq.n	801649c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8016486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801648a:	f383 8811 	msr	BASEPRI, r3
 801648e:	f3bf 8f6f 	isb	sy
 8016492:	f3bf 8f4f 	dsb	sy
 8016496:	60fb      	str	r3, [r7, #12]
}
 8016498:	bf00      	nop
 801649a:	e7fe      	b.n	801649a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d00a      	beq.n	80164bc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80164a6:	697b      	ldr	r3, [r7, #20]
 80164a8:	2200      	movs	r2, #0
 80164aa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80164ac:	697b      	ldr	r3, [r7, #20]
 80164ae:	3304      	adds	r3, #4
 80164b0:	4618      	mov	r0, r3
 80164b2:	f000 fa3d 	bl	8016930 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80164b6:	697b      	ldr	r3, [r7, #20]
 80164b8:	2201      	movs	r2, #1
 80164ba:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80164bc:	697b      	ldr	r3, [r7, #20]
	}
 80164be:	4618      	mov	r0, r3
 80164c0:	3718      	adds	r7, #24
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}

080164c6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80164c6:	b580      	push	{r7, lr}
 80164c8:	b082      	sub	sp, #8
 80164ca:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80164cc:	2020      	movs	r0, #32
 80164ce:	f002 fd53 	bl	8018f78 <pvPortMalloc>
 80164d2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d00a      	beq.n	80164f0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	2200      	movs	r2, #0
 80164de:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	3304      	adds	r3, #4
 80164e4:	4618      	mov	r0, r3
 80164e6:	f000 fa23 	bl	8016930 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	2200      	movs	r2, #0
 80164ee:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80164f0:	687b      	ldr	r3, [r7, #4]
	}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3708      	adds	r7, #8
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}
	...

080164fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b090      	sub	sp, #64	; 0x40
 8016500:	af00      	add	r7, sp, #0
 8016502:	60f8      	str	r0, [r7, #12]
 8016504:	60b9      	str	r1, [r7, #8]
 8016506:	607a      	str	r2, [r7, #4]
 8016508:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801650e:	2300      	movs	r3, #0
 8016510:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8016512:	2300      	movs	r3, #0
 8016514:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d10a      	bne.n	8016532 <xEventGroupWaitBits+0x36>
	__asm volatile
 801651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016520:	f383 8811 	msr	BASEPRI, r3
 8016524:	f3bf 8f6f 	isb	sy
 8016528:	f3bf 8f4f 	dsb	sy
 801652c:	623b      	str	r3, [r7, #32]
}
 801652e:	bf00      	nop
 8016530:	e7fe      	b.n	8016530 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016532:	68bb      	ldr	r3, [r7, #8]
 8016534:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016538:	2b00      	cmp	r3, #0
 801653a:	d00a      	beq.n	8016552 <xEventGroupWaitBits+0x56>
	__asm volatile
 801653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016540:	f383 8811 	msr	BASEPRI, r3
 8016544:	f3bf 8f6f 	isb	sy
 8016548:	f3bf 8f4f 	dsb	sy
 801654c:	61fb      	str	r3, [r7, #28]
}
 801654e:	bf00      	nop
 8016550:	e7fe      	b.n	8016550 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8016552:	68bb      	ldr	r3, [r7, #8]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d10a      	bne.n	801656e <xEventGroupWaitBits+0x72>
	__asm volatile
 8016558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801655c:	f383 8811 	msr	BASEPRI, r3
 8016560:	f3bf 8f6f 	isb	sy
 8016564:	f3bf 8f4f 	dsb	sy
 8016568:	61bb      	str	r3, [r7, #24]
}
 801656a:	bf00      	nop
 801656c:	e7fe      	b.n	801656c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801656e:	f001 fe51 	bl	8018214 <xTaskGetSchedulerState>
 8016572:	4603      	mov	r3, r0
 8016574:	2b00      	cmp	r3, #0
 8016576:	d102      	bne.n	801657e <xEventGroupWaitBits+0x82>
 8016578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801657a:	2b00      	cmp	r3, #0
 801657c:	d101      	bne.n	8016582 <xEventGroupWaitBits+0x86>
 801657e:	2301      	movs	r3, #1
 8016580:	e000      	b.n	8016584 <xEventGroupWaitBits+0x88>
 8016582:	2300      	movs	r3, #0
 8016584:	2b00      	cmp	r3, #0
 8016586:	d10a      	bne.n	801659e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8016588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801658c:	f383 8811 	msr	BASEPRI, r3
 8016590:	f3bf 8f6f 	isb	sy
 8016594:	f3bf 8f4f 	dsb	sy
 8016598:	617b      	str	r3, [r7, #20]
}
 801659a:	bf00      	nop
 801659c:	e7fe      	b.n	801659c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801659e:	f001 f9a3 	bl	80178e8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80165a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80165a8:	683a      	ldr	r2, [r7, #0]
 80165aa:	68b9      	ldr	r1, [r7, #8]
 80165ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165ae:	f000 f988 	bl	80168c2 <prvTestWaitCondition>
 80165b2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80165b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d00e      	beq.n	80165d8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80165ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80165be:	2300      	movs	r3, #0
 80165c0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d028      	beq.n	801661a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80165c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	68bb      	ldr	r3, [r7, #8]
 80165ce:	43db      	mvns	r3, r3
 80165d0:	401a      	ands	r2, r3
 80165d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165d4:	601a      	str	r2, [r3, #0]
 80165d6:	e020      	b.n	801661a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80165d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d104      	bne.n	80165e8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80165de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80165e2:	2301      	movs	r3, #1
 80165e4:	633b      	str	r3, [r7, #48]	; 0x30
 80165e6:	e018      	b.n	801661a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d003      	beq.n	80165f6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80165ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80165f4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80165f6:	683b      	ldr	r3, [r7, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d003      	beq.n	8016604 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80165fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016602:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8016604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016606:	1d18      	adds	r0, r3, #4
 8016608:	68ba      	ldr	r2, [r7, #8]
 801660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801660c:	4313      	orrs	r3, r2
 801660e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016610:	4619      	mov	r1, r3
 8016612:	f001 fb77 	bl	8017d04 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8016616:	2300      	movs	r3, #0
 8016618:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801661a:	f001 f973 	bl	8017904 <xTaskResumeAll>
 801661e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8016620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016622:	2b00      	cmp	r3, #0
 8016624:	d031      	beq.n	801668a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8016626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016628:	2b00      	cmp	r3, #0
 801662a:	d107      	bne.n	801663c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801662c:	4b19      	ldr	r3, [pc, #100]	; (8016694 <xEventGroupWaitBits+0x198>)
 801662e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016632:	601a      	str	r2, [r3, #0]
 8016634:	f3bf 8f4f 	dsb	sy
 8016638:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801663c:	f001 fe76 	bl	801832c <uxTaskResetEventItemValue>
 8016640:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8016642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016648:	2b00      	cmp	r3, #0
 801664a:	d11a      	bne.n	8016682 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801664c:	f002 fb72 	bl	8018d34 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8016650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8016656:	683a      	ldr	r2, [r7, #0]
 8016658:	68b9      	ldr	r1, [r7, #8]
 801665a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801665c:	f000 f931 	bl	80168c2 <prvTestWaitCondition>
 8016660:	4603      	mov	r3, r0
 8016662:	2b00      	cmp	r3, #0
 8016664:	d009      	beq.n	801667a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d006      	beq.n	801667a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801666c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801666e:	681a      	ldr	r2, [r3, #0]
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	43db      	mvns	r3, r3
 8016674:	401a      	ands	r2, r3
 8016676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016678:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801667a:	2301      	movs	r3, #1
 801667c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801667e:	f002 fb89 	bl	8018d94 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8016682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016684:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016688:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801668a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801668c:	4618      	mov	r0, r3
 801668e:	3740      	adds	r7, #64	; 0x40
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}
 8016694:	e000ed04 	.word	0xe000ed04

08016698 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b086      	sub	sp, #24
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
 80166a0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d10a      	bne.n	80166c2 <xEventGroupClearBits+0x2a>
	__asm volatile
 80166ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166b0:	f383 8811 	msr	BASEPRI, r3
 80166b4:	f3bf 8f6f 	isb	sy
 80166b8:	f3bf 8f4f 	dsb	sy
 80166bc:	60fb      	str	r3, [r7, #12]
}
 80166be:	bf00      	nop
 80166c0:	e7fe      	b.n	80166c0 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d00a      	beq.n	80166e2 <xEventGroupClearBits+0x4a>
	__asm volatile
 80166cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166d0:	f383 8811 	msr	BASEPRI, r3
 80166d4:	f3bf 8f6f 	isb	sy
 80166d8:	f3bf 8f4f 	dsb	sy
 80166dc:	60bb      	str	r3, [r7, #8]
}
 80166de:	bf00      	nop
 80166e0:	e7fe      	b.n	80166e0 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80166e2:	f002 fb27 	bl	8018d34 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80166ec:	697b      	ldr	r3, [r7, #20]
 80166ee:	681a      	ldr	r2, [r3, #0]
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	43db      	mvns	r3, r3
 80166f4:	401a      	ands	r2, r3
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80166fa:	f002 fb4b 	bl	8018d94 <vPortExitCritical>

	return uxReturn;
 80166fe:	693b      	ldr	r3, [r7, #16]
}
 8016700:	4618      	mov	r0, r3
 8016702:	3718      	adds	r7, #24
 8016704:	46bd      	mov	sp, r7
 8016706:	bd80      	pop	{r7, pc}

08016708 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8016708:	b580      	push	{r7, lr}
 801670a:	b084      	sub	sp, #16
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8016712:	2300      	movs	r3, #0
 8016714:	683a      	ldr	r2, [r7, #0]
 8016716:	6879      	ldr	r1, [r7, #4]
 8016718:	4804      	ldr	r0, [pc, #16]	; (801672c <xEventGroupClearBitsFromISR+0x24>)
 801671a:	f002 f9c1 	bl	8018aa0 <xTimerPendFunctionCallFromISR>
 801671e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8016720:	68fb      	ldr	r3, [r7, #12]
	}
 8016722:	4618      	mov	r0, r3
 8016724:	3710      	adds	r7, #16
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}
 801672a:	bf00      	nop
 801672c:	080168a9 	.word	0x080168a9

08016730 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8016730:	b480      	push	{r7}
 8016732:	b089      	sub	sp, #36	; 0x24
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801673c:	f3ef 8211 	mrs	r2, BASEPRI
 8016740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016744:	f383 8811 	msr	BASEPRI, r3
 8016748:	f3bf 8f6f 	isb	sy
 801674c:	f3bf 8f4f 	dsb	sy
 8016750:	60fa      	str	r2, [r7, #12]
 8016752:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016754:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016756:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8016758:	69fb      	ldr	r3, [r7, #28]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	617b      	str	r3, [r7, #20]
 801675e:	69bb      	ldr	r3, [r7, #24]
 8016760:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016762:	693b      	ldr	r3, [r7, #16]
 8016764:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016768:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801676a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 801676c:	4618      	mov	r0, r3
 801676e:	3724      	adds	r7, #36	; 0x24
 8016770:	46bd      	mov	sp, r7
 8016772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016776:	4770      	bx	lr

08016778 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b08e      	sub	sp, #56	; 0x38
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8016782:	2300      	movs	r3, #0
 8016784:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801678a:	2300      	movs	r3, #0
 801678c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d10a      	bne.n	80167aa <xEventGroupSetBits+0x32>
	__asm volatile
 8016794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016798:	f383 8811 	msr	BASEPRI, r3
 801679c:	f3bf 8f6f 	isb	sy
 80167a0:	f3bf 8f4f 	dsb	sy
 80167a4:	613b      	str	r3, [r7, #16]
}
 80167a6:	bf00      	nop
 80167a8:	e7fe      	b.n	80167a8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d00a      	beq.n	80167ca <xEventGroupSetBits+0x52>
	__asm volatile
 80167b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167b8:	f383 8811 	msr	BASEPRI, r3
 80167bc:	f3bf 8f6f 	isb	sy
 80167c0:	f3bf 8f4f 	dsb	sy
 80167c4:	60fb      	str	r3, [r7, #12]
}
 80167c6:	bf00      	nop
 80167c8:	e7fe      	b.n	80167c8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80167ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167cc:	3304      	adds	r3, #4
 80167ce:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d2:	3308      	adds	r3, #8
 80167d4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80167d6:	f001 f887 	bl	80178e8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80167da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167dc:	68db      	ldr	r3, [r3, #12]
 80167de:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80167e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167e2:	681a      	ldr	r2, [r3, #0]
 80167e4:	683b      	ldr	r3, [r7, #0]
 80167e6:	431a      	orrs	r2, r3
 80167e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ea:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80167ec:	e03c      	b.n	8016868 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80167ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167f0:	685b      	ldr	r3, [r3, #4]
 80167f2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80167f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80167fa:	2300      	movs	r3, #0
 80167fc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80167fe:	69bb      	ldr	r3, [r7, #24]
 8016800:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016804:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8016806:	69bb      	ldr	r3, [r7, #24]
 8016808:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801680c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016814:	2b00      	cmp	r3, #0
 8016816:	d108      	bne.n	801682a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8016818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801681a:	681a      	ldr	r2, [r3, #0]
 801681c:	69bb      	ldr	r3, [r7, #24]
 801681e:	4013      	ands	r3, r2
 8016820:	2b00      	cmp	r3, #0
 8016822:	d00b      	beq.n	801683c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8016824:	2301      	movs	r3, #1
 8016826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016828:	e008      	b.n	801683c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801682c:	681a      	ldr	r2, [r3, #0]
 801682e:	69bb      	ldr	r3, [r7, #24]
 8016830:	4013      	ands	r3, r2
 8016832:	69ba      	ldr	r2, [r7, #24]
 8016834:	429a      	cmp	r2, r3
 8016836:	d101      	bne.n	801683c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8016838:	2301      	movs	r3, #1
 801683a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801683e:	2b00      	cmp	r3, #0
 8016840:	d010      	beq.n	8016864 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8016842:	697b      	ldr	r3, [r7, #20]
 8016844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016848:	2b00      	cmp	r3, #0
 801684a:	d003      	beq.n	8016854 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801684c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801684e:	69bb      	ldr	r3, [r7, #24]
 8016850:	4313      	orrs	r3, r2
 8016852:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8016854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801685c:	4619      	mov	r1, r3
 801685e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016860:	f001 fb1c 	bl	8017e9c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8016864:	69fb      	ldr	r3, [r7, #28]
 8016866:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8016868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801686a:	6a3b      	ldr	r3, [r7, #32]
 801686c:	429a      	cmp	r2, r3
 801686e:	d1be      	bne.n	80167ee <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8016870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016872:	681a      	ldr	r2, [r3, #0]
 8016874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016876:	43db      	mvns	r3, r3
 8016878:	401a      	ands	r2, r3
 801687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801687c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801687e:	f001 f841 	bl	8017904 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8016882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016884:	681b      	ldr	r3, [r3, #0]
}
 8016886:	4618      	mov	r0, r3
 8016888:	3738      	adds	r7, #56	; 0x38
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}

0801688e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801688e:	b580      	push	{r7, lr}
 8016890:	b082      	sub	sp, #8
 8016892:	af00      	add	r7, sp, #0
 8016894:	6078      	str	r0, [r7, #4]
 8016896:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8016898:	6839      	ldr	r1, [r7, #0]
 801689a:	6878      	ldr	r0, [r7, #4]
 801689c:	f7ff ff6c 	bl	8016778 <xEventGroupSetBits>
}
 80168a0:	bf00      	nop
 80168a2:	3708      	adds	r7, #8
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}

080168a8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b082      	sub	sp, #8
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
 80168b0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80168b2:	6839      	ldr	r1, [r7, #0]
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	f7ff feef 	bl	8016698 <xEventGroupClearBits>
}
 80168ba:	bf00      	nop
 80168bc:	3708      	adds	r7, #8
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}

080168c2 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80168c2:	b480      	push	{r7}
 80168c4:	b087      	sub	sp, #28
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	60f8      	str	r0, [r7, #12]
 80168ca:	60b9      	str	r1, [r7, #8]
 80168cc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80168ce:	2300      	movs	r3, #0
 80168d0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d107      	bne.n	80168e8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80168d8:	68fa      	ldr	r2, [r7, #12]
 80168da:	68bb      	ldr	r3, [r7, #8]
 80168dc:	4013      	ands	r3, r2
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d00a      	beq.n	80168f8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80168e2:	2301      	movs	r3, #1
 80168e4:	617b      	str	r3, [r7, #20]
 80168e6:	e007      	b.n	80168f8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80168e8:	68fa      	ldr	r2, [r7, #12]
 80168ea:	68bb      	ldr	r3, [r7, #8]
 80168ec:	4013      	ands	r3, r2
 80168ee:	68ba      	ldr	r2, [r7, #8]
 80168f0:	429a      	cmp	r2, r3
 80168f2:	d101      	bne.n	80168f8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80168f4:	2301      	movs	r3, #1
 80168f6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80168f8:	697b      	ldr	r3, [r7, #20]
}
 80168fa:	4618      	mov	r0, r3
 80168fc:	371c      	adds	r7, #28
 80168fe:	46bd      	mov	sp, r7
 8016900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016904:	4770      	bx	lr
	...

08016908 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016908:	b580      	push	{r7, lr}
 801690a:	b086      	sub	sp, #24
 801690c:	af00      	add	r7, sp, #0
 801690e:	60f8      	str	r0, [r7, #12]
 8016910:	60b9      	str	r1, [r7, #8]
 8016912:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	68ba      	ldr	r2, [r7, #8]
 8016918:	68f9      	ldr	r1, [r7, #12]
 801691a:	4804      	ldr	r0, [pc, #16]	; (801692c <xEventGroupSetBitsFromISR+0x24>)
 801691c:	f002 f8c0 	bl	8018aa0 <xTimerPendFunctionCallFromISR>
 8016920:	6178      	str	r0, [r7, #20]

		return xReturn;
 8016922:	697b      	ldr	r3, [r7, #20]
	}
 8016924:	4618      	mov	r0, r3
 8016926:	3718      	adds	r7, #24
 8016928:	46bd      	mov	sp, r7
 801692a:	bd80      	pop	{r7, pc}
 801692c:	0801688f 	.word	0x0801688f

08016930 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016930:	b480      	push	{r7}
 8016932:	b083      	sub	sp, #12
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	f103 0208 	add.w	r2, r3, #8
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016948:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	f103 0208 	add.w	r2, r3, #8
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	f103 0208 	add.w	r2, r3, #8
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	2200      	movs	r2, #0
 8016962:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016964:	bf00      	nop
 8016966:	370c      	adds	r7, #12
 8016968:	46bd      	mov	sp, r7
 801696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696e:	4770      	bx	lr

08016970 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016970:	b480      	push	{r7}
 8016972:	b083      	sub	sp, #12
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2200      	movs	r2, #0
 801697c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801697e:	bf00      	nop
 8016980:	370c      	adds	r7, #12
 8016982:	46bd      	mov	sp, r7
 8016984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016988:	4770      	bx	lr

0801698a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801698a:	b480      	push	{r7}
 801698c:	b085      	sub	sp, #20
 801698e:	af00      	add	r7, sp, #0
 8016990:	6078      	str	r0, [r7, #4]
 8016992:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	685b      	ldr	r3, [r3, #4]
 8016998:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801699a:	683b      	ldr	r3, [r7, #0]
 801699c:	68fa      	ldr	r2, [r7, #12]
 801699e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	689a      	ldr	r2, [r3, #8]
 80169a4:	683b      	ldr	r3, [r7, #0]
 80169a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	689b      	ldr	r3, [r3, #8]
 80169ac:	683a      	ldr	r2, [r7, #0]
 80169ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	683a      	ldr	r2, [r7, #0]
 80169b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80169b6:	683b      	ldr	r3, [r7, #0]
 80169b8:	687a      	ldr	r2, [r7, #4]
 80169ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	1c5a      	adds	r2, r3, #1
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	601a      	str	r2, [r3, #0]
}
 80169c6:	bf00      	nop
 80169c8:	3714      	adds	r7, #20
 80169ca:	46bd      	mov	sp, r7
 80169cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d0:	4770      	bx	lr

080169d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80169d2:	b480      	push	{r7}
 80169d4:	b085      	sub	sp, #20
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
 80169da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80169e2:	68bb      	ldr	r3, [r7, #8]
 80169e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80169e8:	d103      	bne.n	80169f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	691b      	ldr	r3, [r3, #16]
 80169ee:	60fb      	str	r3, [r7, #12]
 80169f0:	e00c      	b.n	8016a0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	3308      	adds	r3, #8
 80169f6:	60fb      	str	r3, [r7, #12]
 80169f8:	e002      	b.n	8016a00 <vListInsert+0x2e>
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	685b      	ldr	r3, [r3, #4]
 80169fe:	60fb      	str	r3, [r7, #12]
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	685b      	ldr	r3, [r3, #4]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	68ba      	ldr	r2, [r7, #8]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d2f6      	bcs.n	80169fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	685a      	ldr	r2, [r3, #4]
 8016a10:	683b      	ldr	r3, [r7, #0]
 8016a12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	685b      	ldr	r3, [r3, #4]
 8016a18:	683a      	ldr	r2, [r7, #0]
 8016a1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	68fa      	ldr	r2, [r7, #12]
 8016a20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	683a      	ldr	r2, [r7, #0]
 8016a26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016a28:	683b      	ldr	r3, [r7, #0]
 8016a2a:	687a      	ldr	r2, [r7, #4]
 8016a2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	1c5a      	adds	r2, r3, #1
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	601a      	str	r2, [r3, #0]
}
 8016a38:	bf00      	nop
 8016a3a:	3714      	adds	r7, #20
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a42:	4770      	bx	lr

08016a44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016a44:	b480      	push	{r7}
 8016a46:	b085      	sub	sp, #20
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	691b      	ldr	r3, [r3, #16]
 8016a50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	687a      	ldr	r2, [r7, #4]
 8016a58:	6892      	ldr	r2, [r2, #8]
 8016a5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	689b      	ldr	r3, [r3, #8]
 8016a60:	687a      	ldr	r2, [r7, #4]
 8016a62:	6852      	ldr	r2, [r2, #4]
 8016a64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	687a      	ldr	r2, [r7, #4]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	d103      	bne.n	8016a78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	689a      	ldr	r2, [r3, #8]
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	1e5a      	subs	r2, r3, #1
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	681b      	ldr	r3, [r3, #0]
}
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	3714      	adds	r7, #20
 8016a90:	46bd      	mov	sp, r7
 8016a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a96:	4770      	bx	lr

08016a98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b084      	sub	sp, #16
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d10a      	bne.n	8016ac2 <xQueueGenericReset+0x2a>
	__asm volatile
 8016aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab0:	f383 8811 	msr	BASEPRI, r3
 8016ab4:	f3bf 8f6f 	isb	sy
 8016ab8:	f3bf 8f4f 	dsb	sy
 8016abc:	60bb      	str	r3, [r7, #8]
}
 8016abe:	bf00      	nop
 8016ac0:	e7fe      	b.n	8016ac0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016ac2:	f002 f937 	bl	8018d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	681a      	ldr	r2, [r3, #0]
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ace:	68f9      	ldr	r1, [r7, #12]
 8016ad0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016ad2:	fb01 f303 	mul.w	r3, r1, r3
 8016ad6:	441a      	add	r2, r3
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	2200      	movs	r2, #0
 8016ae0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	681a      	ldr	r2, [r3, #0]
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	681a      	ldr	r2, [r3, #0]
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016af2:	3b01      	subs	r3, #1
 8016af4:	68f9      	ldr	r1, [r7, #12]
 8016af6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016af8:	fb01 f303 	mul.w	r3, r1, r3
 8016afc:	441a      	add	r2, r3
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	22ff      	movs	r2, #255	; 0xff
 8016b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	22ff      	movs	r2, #255	; 0xff
 8016b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016b12:	683b      	ldr	r3, [r7, #0]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d114      	bne.n	8016b42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	691b      	ldr	r3, [r3, #16]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d01a      	beq.n	8016b56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	3310      	adds	r3, #16
 8016b24:	4618      	mov	r0, r3
 8016b26:	f001 f955 	bl	8017dd4 <xTaskRemoveFromEventList>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d012      	beq.n	8016b56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016b30:	4b0c      	ldr	r3, [pc, #48]	; (8016b64 <xQueueGenericReset+0xcc>)
 8016b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b36:	601a      	str	r2, [r3, #0]
 8016b38:	f3bf 8f4f 	dsb	sy
 8016b3c:	f3bf 8f6f 	isb	sy
 8016b40:	e009      	b.n	8016b56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	3310      	adds	r3, #16
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7ff fef2 	bl	8016930 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	3324      	adds	r3, #36	; 0x24
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7ff feed 	bl	8016930 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016b56:	f002 f91d 	bl	8018d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016b5a:	2301      	movs	r3, #1
}
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	3710      	adds	r7, #16
 8016b60:	46bd      	mov	sp, r7
 8016b62:	bd80      	pop	{r7, pc}
 8016b64:	e000ed04 	.word	0xe000ed04

08016b68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b08e      	sub	sp, #56	; 0x38
 8016b6c:	af02      	add	r7, sp, #8
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
 8016b74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d10a      	bne.n	8016b92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b80:	f383 8811 	msr	BASEPRI, r3
 8016b84:	f3bf 8f6f 	isb	sy
 8016b88:	f3bf 8f4f 	dsb	sy
 8016b8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016b8e:	bf00      	nop
 8016b90:	e7fe      	b.n	8016b90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016b92:	683b      	ldr	r3, [r7, #0]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d10a      	bne.n	8016bae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b9c:	f383 8811 	msr	BASEPRI, r3
 8016ba0:	f3bf 8f6f 	isb	sy
 8016ba4:	f3bf 8f4f 	dsb	sy
 8016ba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016baa:	bf00      	nop
 8016bac:	e7fe      	b.n	8016bac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d002      	beq.n	8016bba <xQueueGenericCreateStatic+0x52>
 8016bb4:	68bb      	ldr	r3, [r7, #8]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d001      	beq.n	8016bbe <xQueueGenericCreateStatic+0x56>
 8016bba:	2301      	movs	r3, #1
 8016bbc:	e000      	b.n	8016bc0 <xQueueGenericCreateStatic+0x58>
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d10a      	bne.n	8016bda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8016bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bc8:	f383 8811 	msr	BASEPRI, r3
 8016bcc:	f3bf 8f6f 	isb	sy
 8016bd0:	f3bf 8f4f 	dsb	sy
 8016bd4:	623b      	str	r3, [r7, #32]
}
 8016bd6:	bf00      	nop
 8016bd8:	e7fe      	b.n	8016bd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d102      	bne.n	8016be6 <xQueueGenericCreateStatic+0x7e>
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d101      	bne.n	8016bea <xQueueGenericCreateStatic+0x82>
 8016be6:	2301      	movs	r3, #1
 8016be8:	e000      	b.n	8016bec <xQueueGenericCreateStatic+0x84>
 8016bea:	2300      	movs	r3, #0
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d10a      	bne.n	8016c06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8016bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bf4:	f383 8811 	msr	BASEPRI, r3
 8016bf8:	f3bf 8f6f 	isb	sy
 8016bfc:	f3bf 8f4f 	dsb	sy
 8016c00:	61fb      	str	r3, [r7, #28]
}
 8016c02:	bf00      	nop
 8016c04:	e7fe      	b.n	8016c04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016c06:	2350      	movs	r3, #80	; 0x50
 8016c08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016c0a:	697b      	ldr	r3, [r7, #20]
 8016c0c:	2b50      	cmp	r3, #80	; 0x50
 8016c0e:	d00a      	beq.n	8016c26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c14:	f383 8811 	msr	BASEPRI, r3
 8016c18:	f3bf 8f6f 	isb	sy
 8016c1c:	f3bf 8f4f 	dsb	sy
 8016c20:	61bb      	str	r3, [r7, #24]
}
 8016c22:	bf00      	nop
 8016c24:	e7fe      	b.n	8016c24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016c26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016c28:	683b      	ldr	r3, [r7, #0]
 8016c2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d00d      	beq.n	8016c4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c34:	2201      	movs	r2, #1
 8016c36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016c3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c40:	9300      	str	r3, [sp, #0]
 8016c42:	4613      	mov	r3, r2
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	68b9      	ldr	r1, [r7, #8]
 8016c48:	68f8      	ldr	r0, [r7, #12]
 8016c4a:	f000 f805 	bl	8016c58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016c50:	4618      	mov	r0, r3
 8016c52:	3730      	adds	r7, #48	; 0x30
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}

08016c58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b084      	sub	sp, #16
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	60f8      	str	r0, [r7, #12]
 8016c60:	60b9      	str	r1, [r7, #8]
 8016c62:	607a      	str	r2, [r7, #4]
 8016c64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016c66:	68bb      	ldr	r3, [r7, #8]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d103      	bne.n	8016c74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016c6c:	69bb      	ldr	r3, [r7, #24]
 8016c6e:	69ba      	ldr	r2, [r7, #24]
 8016c70:	601a      	str	r2, [r3, #0]
 8016c72:	e002      	b.n	8016c7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016c74:	69bb      	ldr	r3, [r7, #24]
 8016c76:	687a      	ldr	r2, [r7, #4]
 8016c78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016c7a:	69bb      	ldr	r3, [r7, #24]
 8016c7c:	68fa      	ldr	r2, [r7, #12]
 8016c7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016c80:	69bb      	ldr	r3, [r7, #24]
 8016c82:	68ba      	ldr	r2, [r7, #8]
 8016c84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c86:	2101      	movs	r1, #1
 8016c88:	69b8      	ldr	r0, [r7, #24]
 8016c8a:	f7ff ff05 	bl	8016a98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016c8e:	69bb      	ldr	r3, [r7, #24]
 8016c90:	78fa      	ldrb	r2, [r7, #3]
 8016c92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016c96:	bf00      	nop
 8016c98:	3710      	adds	r7, #16
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bd80      	pop	{r7, pc}
	...

08016ca0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b08e      	sub	sp, #56	; 0x38
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	60f8      	str	r0, [r7, #12]
 8016ca8:	60b9      	str	r1, [r7, #8]
 8016caa:	607a      	str	r2, [r7, #4]
 8016cac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d10a      	bne.n	8016cd2 <xQueueGenericSend+0x32>
	__asm volatile
 8016cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cc0:	f383 8811 	msr	BASEPRI, r3
 8016cc4:	f3bf 8f6f 	isb	sy
 8016cc8:	f3bf 8f4f 	dsb	sy
 8016ccc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016cce:	bf00      	nop
 8016cd0:	e7fe      	b.n	8016cd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016cd2:	68bb      	ldr	r3, [r7, #8]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d103      	bne.n	8016ce0 <xQueueGenericSend+0x40>
 8016cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d101      	bne.n	8016ce4 <xQueueGenericSend+0x44>
 8016ce0:	2301      	movs	r3, #1
 8016ce2:	e000      	b.n	8016ce6 <xQueueGenericSend+0x46>
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d10a      	bne.n	8016d00 <xQueueGenericSend+0x60>
	__asm volatile
 8016cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cee:	f383 8811 	msr	BASEPRI, r3
 8016cf2:	f3bf 8f6f 	isb	sy
 8016cf6:	f3bf 8f4f 	dsb	sy
 8016cfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016cfc:	bf00      	nop
 8016cfe:	e7fe      	b.n	8016cfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	2b02      	cmp	r3, #2
 8016d04:	d103      	bne.n	8016d0e <xQueueGenericSend+0x6e>
 8016d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d0a:	2b01      	cmp	r3, #1
 8016d0c:	d101      	bne.n	8016d12 <xQueueGenericSend+0x72>
 8016d0e:	2301      	movs	r3, #1
 8016d10:	e000      	b.n	8016d14 <xQueueGenericSend+0x74>
 8016d12:	2300      	movs	r3, #0
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d10a      	bne.n	8016d2e <xQueueGenericSend+0x8e>
	__asm volatile
 8016d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d1c:	f383 8811 	msr	BASEPRI, r3
 8016d20:	f3bf 8f6f 	isb	sy
 8016d24:	f3bf 8f4f 	dsb	sy
 8016d28:	623b      	str	r3, [r7, #32]
}
 8016d2a:	bf00      	nop
 8016d2c:	e7fe      	b.n	8016d2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d2e:	f001 fa71 	bl	8018214 <xTaskGetSchedulerState>
 8016d32:	4603      	mov	r3, r0
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d102      	bne.n	8016d3e <xQueueGenericSend+0x9e>
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d101      	bne.n	8016d42 <xQueueGenericSend+0xa2>
 8016d3e:	2301      	movs	r3, #1
 8016d40:	e000      	b.n	8016d44 <xQueueGenericSend+0xa4>
 8016d42:	2300      	movs	r3, #0
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d10a      	bne.n	8016d5e <xQueueGenericSend+0xbe>
	__asm volatile
 8016d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d4c:	f383 8811 	msr	BASEPRI, r3
 8016d50:	f3bf 8f6f 	isb	sy
 8016d54:	f3bf 8f4f 	dsb	sy
 8016d58:	61fb      	str	r3, [r7, #28]
}
 8016d5a:	bf00      	nop
 8016d5c:	e7fe      	b.n	8016d5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016d5e:	f001 ffe9 	bl	8018d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d6a:	429a      	cmp	r2, r3
 8016d6c:	d302      	bcc.n	8016d74 <xQueueGenericSend+0xd4>
 8016d6e:	683b      	ldr	r3, [r7, #0]
 8016d70:	2b02      	cmp	r3, #2
 8016d72:	d129      	bne.n	8016dc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016d74:	683a      	ldr	r2, [r7, #0]
 8016d76:	68b9      	ldr	r1, [r7, #8]
 8016d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d7a:	f000 fa0b 	bl	8017194 <prvCopyDataToQueue>
 8016d7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d010      	beq.n	8016daa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d8a:	3324      	adds	r3, #36	; 0x24
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f001 f821 	bl	8017dd4 <xTaskRemoveFromEventList>
 8016d92:	4603      	mov	r3, r0
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d013      	beq.n	8016dc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016d98:	4b3f      	ldr	r3, [pc, #252]	; (8016e98 <xQueueGenericSend+0x1f8>)
 8016d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d9e:	601a      	str	r2, [r3, #0]
 8016da0:	f3bf 8f4f 	dsb	sy
 8016da4:	f3bf 8f6f 	isb	sy
 8016da8:	e00a      	b.n	8016dc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d007      	beq.n	8016dc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016db0:	4b39      	ldr	r3, [pc, #228]	; (8016e98 <xQueueGenericSend+0x1f8>)
 8016db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016db6:	601a      	str	r2, [r3, #0]
 8016db8:	f3bf 8f4f 	dsb	sy
 8016dbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016dc0:	f001 ffe8 	bl	8018d94 <vPortExitCritical>
				return pdPASS;
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	e063      	b.n	8016e90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d103      	bne.n	8016dd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016dce:	f001 ffe1 	bl	8018d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	e05c      	b.n	8016e90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d106      	bne.n	8016dea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016ddc:	f107 0314 	add.w	r3, r7, #20
 8016de0:	4618      	mov	r0, r3
 8016de2:	f001 f8bd 	bl	8017f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016de6:	2301      	movs	r3, #1
 8016de8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016dea:	f001 ffd3 	bl	8018d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016dee:	f000 fd7b 	bl	80178e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016df2:	f001 ff9f 	bl	8018d34 <vPortEnterCritical>
 8016df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016dfc:	b25b      	sxtb	r3, r3
 8016dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016e02:	d103      	bne.n	8016e0c <xQueueGenericSend+0x16c>
 8016e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e06:	2200      	movs	r2, #0
 8016e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e12:	b25b      	sxtb	r3, r3
 8016e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016e18:	d103      	bne.n	8016e22 <xQueueGenericSend+0x182>
 8016e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e1c:	2200      	movs	r2, #0
 8016e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016e22:	f001 ffb7 	bl	8018d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016e26:	1d3a      	adds	r2, r7, #4
 8016e28:	f107 0314 	add.w	r3, r7, #20
 8016e2c:	4611      	mov	r1, r2
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f001 f8ac 	bl	8017f8c <xTaskCheckForTimeOut>
 8016e34:	4603      	mov	r3, r0
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d124      	bne.n	8016e84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016e3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e3c:	f000 faa2 	bl	8017384 <prvIsQueueFull>
 8016e40:	4603      	mov	r3, r0
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d018      	beq.n	8016e78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e48:	3310      	adds	r3, #16
 8016e4a:	687a      	ldr	r2, [r7, #4]
 8016e4c:	4611      	mov	r1, r2
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f000 ff34 	bl	8017cbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e56:	f000 fa2d 	bl	80172b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016e5a:	f000 fd53 	bl	8017904 <xTaskResumeAll>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	f47f af7c 	bne.w	8016d5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016e66:	4b0c      	ldr	r3, [pc, #48]	; (8016e98 <xQueueGenericSend+0x1f8>)
 8016e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e6c:	601a      	str	r2, [r3, #0]
 8016e6e:	f3bf 8f4f 	dsb	sy
 8016e72:	f3bf 8f6f 	isb	sy
 8016e76:	e772      	b.n	8016d5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e7a:	f000 fa1b 	bl	80172b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016e7e:	f000 fd41 	bl	8017904 <xTaskResumeAll>
 8016e82:	e76c      	b.n	8016d5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e86:	f000 fa15 	bl	80172b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016e8a:	f000 fd3b 	bl	8017904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016e8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016e90:	4618      	mov	r0, r3
 8016e92:	3738      	adds	r7, #56	; 0x38
 8016e94:	46bd      	mov	sp, r7
 8016e96:	bd80      	pop	{r7, pc}
 8016e98:	e000ed04 	.word	0xe000ed04

08016e9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b090      	sub	sp, #64	; 0x40
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	60f8      	str	r0, [r7, #12]
 8016ea4:	60b9      	str	r1, [r7, #8]
 8016ea6:	607a      	str	r2, [r7, #4]
 8016ea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d10a      	bne.n	8016eca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb8:	f383 8811 	msr	BASEPRI, r3
 8016ebc:	f3bf 8f6f 	isb	sy
 8016ec0:	f3bf 8f4f 	dsb	sy
 8016ec4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016ec6:	bf00      	nop
 8016ec8:	e7fe      	b.n	8016ec8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d103      	bne.n	8016ed8 <xQueueGenericSendFromISR+0x3c>
 8016ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d101      	bne.n	8016edc <xQueueGenericSendFromISR+0x40>
 8016ed8:	2301      	movs	r3, #1
 8016eda:	e000      	b.n	8016ede <xQueueGenericSendFromISR+0x42>
 8016edc:	2300      	movs	r3, #0
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d10a      	bne.n	8016ef8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ee6:	f383 8811 	msr	BASEPRI, r3
 8016eea:	f3bf 8f6f 	isb	sy
 8016eee:	f3bf 8f4f 	dsb	sy
 8016ef2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016ef4:	bf00      	nop
 8016ef6:	e7fe      	b.n	8016ef6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	2b02      	cmp	r3, #2
 8016efc:	d103      	bne.n	8016f06 <xQueueGenericSendFromISR+0x6a>
 8016efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f02:	2b01      	cmp	r3, #1
 8016f04:	d101      	bne.n	8016f0a <xQueueGenericSendFromISR+0x6e>
 8016f06:	2301      	movs	r3, #1
 8016f08:	e000      	b.n	8016f0c <xQueueGenericSendFromISR+0x70>
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d10a      	bne.n	8016f26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f14:	f383 8811 	msr	BASEPRI, r3
 8016f18:	f3bf 8f6f 	isb	sy
 8016f1c:	f3bf 8f4f 	dsb	sy
 8016f20:	623b      	str	r3, [r7, #32]
}
 8016f22:	bf00      	nop
 8016f24:	e7fe      	b.n	8016f24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f26:	f001 ffe7 	bl	8018ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8016f2a:	f3ef 8211 	mrs	r2, BASEPRI
 8016f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f32:	f383 8811 	msr	BASEPRI, r3
 8016f36:	f3bf 8f6f 	isb	sy
 8016f3a:	f3bf 8f4f 	dsb	sy
 8016f3e:	61fa      	str	r2, [r7, #28]
 8016f40:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8016f42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016f44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	d302      	bcc.n	8016f58 <xQueueGenericSendFromISR+0xbc>
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	2b02      	cmp	r3, #2
 8016f56:	d12f      	bne.n	8016fb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f68:	683a      	ldr	r2, [r7, #0]
 8016f6a:	68b9      	ldr	r1, [r7, #8]
 8016f6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016f6e:	f000 f911 	bl	8017194 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016f72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f7a:	d112      	bne.n	8016fa2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d016      	beq.n	8016fb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f86:	3324      	adds	r3, #36	; 0x24
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f000 ff23 	bl	8017dd4 <xTaskRemoveFromEventList>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d00e      	beq.n	8016fb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d00b      	beq.n	8016fb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2201      	movs	r2, #1
 8016f9e:	601a      	str	r2, [r3, #0]
 8016fa0:	e007      	b.n	8016fb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	b2db      	uxtb	r3, r3
 8016faa:	b25a      	sxtb	r2, r3
 8016fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8016fb6:	e001      	b.n	8016fbc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016fb8:	2300      	movs	r3, #0
 8016fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fbe:	617b      	str	r3, [r7, #20]
	__asm volatile
 8016fc0:	697b      	ldr	r3, [r7, #20]
 8016fc2:	f383 8811 	msr	BASEPRI, r3
}
 8016fc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016fca:	4618      	mov	r0, r3
 8016fcc:	3740      	adds	r7, #64	; 0x40
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd80      	pop	{r7, pc}
	...

08016fd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b08c      	sub	sp, #48	; 0x30
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	60f8      	str	r0, [r7, #12]
 8016fdc:	60b9      	str	r1, [r7, #8]
 8016fde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d10a      	bne.n	8017004 <xQueueReceive+0x30>
	__asm volatile
 8016fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ff2:	f383 8811 	msr	BASEPRI, r3
 8016ff6:	f3bf 8f6f 	isb	sy
 8016ffa:	f3bf 8f4f 	dsb	sy
 8016ffe:	623b      	str	r3, [r7, #32]
}
 8017000:	bf00      	nop
 8017002:	e7fe      	b.n	8017002 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d103      	bne.n	8017012 <xQueueReceive+0x3e>
 801700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801700e:	2b00      	cmp	r3, #0
 8017010:	d101      	bne.n	8017016 <xQueueReceive+0x42>
 8017012:	2301      	movs	r3, #1
 8017014:	e000      	b.n	8017018 <xQueueReceive+0x44>
 8017016:	2300      	movs	r3, #0
 8017018:	2b00      	cmp	r3, #0
 801701a:	d10a      	bne.n	8017032 <xQueueReceive+0x5e>
	__asm volatile
 801701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017020:	f383 8811 	msr	BASEPRI, r3
 8017024:	f3bf 8f6f 	isb	sy
 8017028:	f3bf 8f4f 	dsb	sy
 801702c:	61fb      	str	r3, [r7, #28]
}
 801702e:	bf00      	nop
 8017030:	e7fe      	b.n	8017030 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017032:	f001 f8ef 	bl	8018214 <xTaskGetSchedulerState>
 8017036:	4603      	mov	r3, r0
 8017038:	2b00      	cmp	r3, #0
 801703a:	d102      	bne.n	8017042 <xQueueReceive+0x6e>
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d101      	bne.n	8017046 <xQueueReceive+0x72>
 8017042:	2301      	movs	r3, #1
 8017044:	e000      	b.n	8017048 <xQueueReceive+0x74>
 8017046:	2300      	movs	r3, #0
 8017048:	2b00      	cmp	r3, #0
 801704a:	d10a      	bne.n	8017062 <xQueueReceive+0x8e>
	__asm volatile
 801704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017050:	f383 8811 	msr	BASEPRI, r3
 8017054:	f3bf 8f6f 	isb	sy
 8017058:	f3bf 8f4f 	dsb	sy
 801705c:	61bb      	str	r3, [r7, #24]
}
 801705e:	bf00      	nop
 8017060:	e7fe      	b.n	8017060 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017062:	f001 fe67 	bl	8018d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801706a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801706e:	2b00      	cmp	r3, #0
 8017070:	d01f      	beq.n	80170b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017072:	68b9      	ldr	r1, [r7, #8]
 8017074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017076:	f000 f8f7 	bl	8017268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801707c:	1e5a      	subs	r2, r3, #1
 801707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017080:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017084:	691b      	ldr	r3, [r3, #16]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d00f      	beq.n	80170aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708c:	3310      	adds	r3, #16
 801708e:	4618      	mov	r0, r3
 8017090:	f000 fea0 	bl	8017dd4 <xTaskRemoveFromEventList>
 8017094:	4603      	mov	r3, r0
 8017096:	2b00      	cmp	r3, #0
 8017098:	d007      	beq.n	80170aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801709a:	4b3d      	ldr	r3, [pc, #244]	; (8017190 <xQueueReceive+0x1bc>)
 801709c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80170a0:	601a      	str	r2, [r3, #0]
 80170a2:	f3bf 8f4f 	dsb	sy
 80170a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80170aa:	f001 fe73 	bl	8018d94 <vPortExitCritical>
				return pdPASS;
 80170ae:	2301      	movs	r3, #1
 80170b0:	e069      	b.n	8017186 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d103      	bne.n	80170c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80170b8:	f001 fe6c 	bl	8018d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80170bc:	2300      	movs	r3, #0
 80170be:	e062      	b.n	8017186 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80170c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d106      	bne.n	80170d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80170c6:	f107 0310 	add.w	r3, r7, #16
 80170ca:	4618      	mov	r0, r3
 80170cc:	f000 ff48 	bl	8017f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80170d0:	2301      	movs	r3, #1
 80170d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80170d4:	f001 fe5e 	bl	8018d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80170d8:	f000 fc06 	bl	80178e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80170dc:	f001 fe2a 	bl	8018d34 <vPortEnterCritical>
 80170e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80170e6:	b25b      	sxtb	r3, r3
 80170e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80170ec:	d103      	bne.n	80170f6 <xQueueReceive+0x122>
 80170ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f0:	2200      	movs	r2, #0
 80170f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80170f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80170fc:	b25b      	sxtb	r3, r3
 80170fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017102:	d103      	bne.n	801710c <xQueueReceive+0x138>
 8017104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017106:	2200      	movs	r2, #0
 8017108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801710c:	f001 fe42 	bl	8018d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017110:	1d3a      	adds	r2, r7, #4
 8017112:	f107 0310 	add.w	r3, r7, #16
 8017116:	4611      	mov	r1, r2
 8017118:	4618      	mov	r0, r3
 801711a:	f000 ff37 	bl	8017f8c <xTaskCheckForTimeOut>
 801711e:	4603      	mov	r3, r0
 8017120:	2b00      	cmp	r3, #0
 8017122:	d123      	bne.n	801716c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017126:	f000 f917 	bl	8017358 <prvIsQueueEmpty>
 801712a:	4603      	mov	r3, r0
 801712c:	2b00      	cmp	r3, #0
 801712e:	d017      	beq.n	8017160 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017132:	3324      	adds	r3, #36	; 0x24
 8017134:	687a      	ldr	r2, [r7, #4]
 8017136:	4611      	mov	r1, r2
 8017138:	4618      	mov	r0, r3
 801713a:	f000 fdbf 	bl	8017cbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801713e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017140:	f000 f8b8 	bl	80172b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017144:	f000 fbde 	bl	8017904 <xTaskResumeAll>
 8017148:	4603      	mov	r3, r0
 801714a:	2b00      	cmp	r3, #0
 801714c:	d189      	bne.n	8017062 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801714e:	4b10      	ldr	r3, [pc, #64]	; (8017190 <xQueueReceive+0x1bc>)
 8017150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017154:	601a      	str	r2, [r3, #0]
 8017156:	f3bf 8f4f 	dsb	sy
 801715a:	f3bf 8f6f 	isb	sy
 801715e:	e780      	b.n	8017062 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017162:	f000 f8a7 	bl	80172b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017166:	f000 fbcd 	bl	8017904 <xTaskResumeAll>
 801716a:	e77a      	b.n	8017062 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801716c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801716e:	f000 f8a1 	bl	80172b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017172:	f000 fbc7 	bl	8017904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017178:	f000 f8ee 	bl	8017358 <prvIsQueueEmpty>
 801717c:	4603      	mov	r3, r0
 801717e:	2b00      	cmp	r3, #0
 8017180:	f43f af6f 	beq.w	8017062 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017184:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017186:	4618      	mov	r0, r3
 8017188:	3730      	adds	r7, #48	; 0x30
 801718a:	46bd      	mov	sp, r7
 801718c:	bd80      	pop	{r7, pc}
 801718e:	bf00      	nop
 8017190:	e000ed04 	.word	0xe000ed04

08017194 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017194:	b580      	push	{r7, lr}
 8017196:	b086      	sub	sp, #24
 8017198:	af00      	add	r7, sp, #0
 801719a:	60f8      	str	r0, [r7, #12]
 801719c:	60b9      	str	r1, [r7, #8]
 801719e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80171a0:	2300      	movs	r3, #0
 80171a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80171a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d10d      	bne.n	80171ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d14d      	bne.n	8017256 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	689b      	ldr	r3, [r3, #8]
 80171be:	4618      	mov	r0, r3
 80171c0:	f001 f846 	bl	8018250 <xTaskPriorityDisinherit>
 80171c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	2200      	movs	r2, #0
 80171ca:	609a      	str	r2, [r3, #8]
 80171cc:	e043      	b.n	8017256 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d119      	bne.n	8017208 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	6858      	ldr	r0, [r3, #4]
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171dc:	461a      	mov	r2, r3
 80171de:	68b9      	ldr	r1, [r7, #8]
 80171e0:	f002 f8de 	bl	80193a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	685a      	ldr	r2, [r3, #4]
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171ec:	441a      	add	r2, r3
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	685a      	ldr	r2, [r3, #4]
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	689b      	ldr	r3, [r3, #8]
 80171fa:	429a      	cmp	r2, r3
 80171fc:	d32b      	bcc.n	8017256 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	681a      	ldr	r2, [r3, #0]
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	605a      	str	r2, [r3, #4]
 8017206:	e026      	b.n	8017256 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	68d8      	ldr	r0, [r3, #12]
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017210:	461a      	mov	r2, r3
 8017212:	68b9      	ldr	r1, [r7, #8]
 8017214:	f002 f8c4 	bl	80193a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	68da      	ldr	r2, [r3, #12]
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017220:	425b      	negs	r3, r3
 8017222:	441a      	add	r2, r3
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	68da      	ldr	r2, [r3, #12]
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	429a      	cmp	r2, r3
 8017232:	d207      	bcs.n	8017244 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	689a      	ldr	r2, [r3, #8]
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801723c:	425b      	negs	r3, r3
 801723e:	441a      	add	r2, r3
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2b02      	cmp	r3, #2
 8017248:	d105      	bne.n	8017256 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801724a:	693b      	ldr	r3, [r7, #16]
 801724c:	2b00      	cmp	r3, #0
 801724e:	d002      	beq.n	8017256 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017250:	693b      	ldr	r3, [r7, #16]
 8017252:	3b01      	subs	r3, #1
 8017254:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017256:	693b      	ldr	r3, [r7, #16]
 8017258:	1c5a      	adds	r2, r3, #1
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801725e:	697b      	ldr	r3, [r7, #20]
}
 8017260:	4618      	mov	r0, r3
 8017262:	3718      	adds	r7, #24
 8017264:	46bd      	mov	sp, r7
 8017266:	bd80      	pop	{r7, pc}

08017268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b082      	sub	sp, #8
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
 8017270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017276:	2b00      	cmp	r3, #0
 8017278:	d018      	beq.n	80172ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	68da      	ldr	r2, [r3, #12]
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017282:	441a      	add	r2, r3
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	68da      	ldr	r2, [r3, #12]
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	689b      	ldr	r3, [r3, #8]
 8017290:	429a      	cmp	r2, r3
 8017292:	d303      	bcc.n	801729c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	681a      	ldr	r2, [r3, #0]
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	68d9      	ldr	r1, [r3, #12]
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172a4:	461a      	mov	r2, r3
 80172a6:	6838      	ldr	r0, [r7, #0]
 80172a8:	f002 f87a 	bl	80193a0 <memcpy>
	}
}
 80172ac:	bf00      	nop
 80172ae:	3708      	adds	r7, #8
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}

080172b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b084      	sub	sp, #16
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80172bc:	f001 fd3a 	bl	8018d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80172c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80172c8:	e011      	b.n	80172ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d012      	beq.n	80172f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	3324      	adds	r3, #36	; 0x24
 80172d6:	4618      	mov	r0, r3
 80172d8:	f000 fd7c 	bl	8017dd4 <xTaskRemoveFromEventList>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d001      	beq.n	80172e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80172e2:	f000 feb5 	bl	8018050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80172e6:	7bfb      	ldrb	r3, [r7, #15]
 80172e8:	3b01      	subs	r3, #1
 80172ea:	b2db      	uxtb	r3, r3
 80172ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80172ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	dce9      	bgt.n	80172ca <prvUnlockQueue+0x16>
 80172f6:	e000      	b.n	80172fa <prvUnlockQueue+0x46>
					break;
 80172f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	22ff      	movs	r2, #255	; 0xff
 80172fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017302:	f001 fd47 	bl	8018d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017306:	f001 fd15 	bl	8018d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017310:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017312:	e011      	b.n	8017338 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	691b      	ldr	r3, [r3, #16]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d012      	beq.n	8017342 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	3310      	adds	r3, #16
 8017320:	4618      	mov	r0, r3
 8017322:	f000 fd57 	bl	8017dd4 <xTaskRemoveFromEventList>
 8017326:	4603      	mov	r3, r0
 8017328:	2b00      	cmp	r3, #0
 801732a:	d001      	beq.n	8017330 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801732c:	f000 fe90 	bl	8018050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017330:	7bbb      	ldrb	r3, [r7, #14]
 8017332:	3b01      	subs	r3, #1
 8017334:	b2db      	uxtb	r3, r3
 8017336:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801733c:	2b00      	cmp	r3, #0
 801733e:	dce9      	bgt.n	8017314 <prvUnlockQueue+0x60>
 8017340:	e000      	b.n	8017344 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017342:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	22ff      	movs	r2, #255	; 0xff
 8017348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801734c:	f001 fd22 	bl	8018d94 <vPortExitCritical>
}
 8017350:	bf00      	nop
 8017352:	3710      	adds	r7, #16
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}

08017358 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b084      	sub	sp, #16
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017360:	f001 fce8 	bl	8018d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017368:	2b00      	cmp	r3, #0
 801736a:	d102      	bne.n	8017372 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801736c:	2301      	movs	r3, #1
 801736e:	60fb      	str	r3, [r7, #12]
 8017370:	e001      	b.n	8017376 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017372:	2300      	movs	r3, #0
 8017374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017376:	f001 fd0d 	bl	8018d94 <vPortExitCritical>

	return xReturn;
 801737a:	68fb      	ldr	r3, [r7, #12]
}
 801737c:	4618      	mov	r0, r3
 801737e:	3710      	adds	r7, #16
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}

08017384 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801738c:	f001 fcd2 	bl	8018d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017398:	429a      	cmp	r2, r3
 801739a:	d102      	bne.n	80173a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801739c:	2301      	movs	r3, #1
 801739e:	60fb      	str	r3, [r7, #12]
 80173a0:	e001      	b.n	80173a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80173a2:	2300      	movs	r3, #0
 80173a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80173a6:	f001 fcf5 	bl	8018d94 <vPortExitCritical>

	return xReturn;
 80173aa:	68fb      	ldr	r3, [r7, #12]
}
 80173ac:	4618      	mov	r0, r3
 80173ae:	3710      	adds	r7, #16
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}

080173b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80173b4:	b480      	push	{r7}
 80173b6:	b085      	sub	sp, #20
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
 80173bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80173be:	2300      	movs	r3, #0
 80173c0:	60fb      	str	r3, [r7, #12]
 80173c2:	e014      	b.n	80173ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80173c4:	4a0f      	ldr	r2, [pc, #60]	; (8017404 <vQueueAddToRegistry+0x50>)
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d10b      	bne.n	80173e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80173d0:	490c      	ldr	r1, [pc, #48]	; (8017404 <vQueueAddToRegistry+0x50>)
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	683a      	ldr	r2, [r7, #0]
 80173d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80173da:	4a0a      	ldr	r2, [pc, #40]	; (8017404 <vQueueAddToRegistry+0x50>)
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	00db      	lsls	r3, r3, #3
 80173e0:	4413      	add	r3, r2
 80173e2:	687a      	ldr	r2, [r7, #4]
 80173e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80173e6:	e006      	b.n	80173f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	3301      	adds	r3, #1
 80173ec:	60fb      	str	r3, [r7, #12]
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	2b07      	cmp	r3, #7
 80173f2:	d9e7      	bls.n	80173c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80173f4:	bf00      	nop
 80173f6:	bf00      	nop
 80173f8:	3714      	adds	r7, #20
 80173fa:	46bd      	mov	sp, r7
 80173fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017400:	4770      	bx	lr
 8017402:	bf00      	nop
 8017404:	240026d8 	.word	0x240026d8

08017408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017408:	b580      	push	{r7, lr}
 801740a:	b086      	sub	sp, #24
 801740c:	af00      	add	r7, sp, #0
 801740e:	60f8      	str	r0, [r7, #12]
 8017410:	60b9      	str	r1, [r7, #8]
 8017412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017418:	f001 fc8c 	bl	8018d34 <vPortEnterCritical>
 801741c:	697b      	ldr	r3, [r7, #20]
 801741e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017422:	b25b      	sxtb	r3, r3
 8017424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017428:	d103      	bne.n	8017432 <vQueueWaitForMessageRestricted+0x2a>
 801742a:	697b      	ldr	r3, [r7, #20]
 801742c:	2200      	movs	r2, #0
 801742e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017432:	697b      	ldr	r3, [r7, #20]
 8017434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017438:	b25b      	sxtb	r3, r3
 801743a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801743e:	d103      	bne.n	8017448 <vQueueWaitForMessageRestricted+0x40>
 8017440:	697b      	ldr	r3, [r7, #20]
 8017442:	2200      	movs	r2, #0
 8017444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017448:	f001 fca4 	bl	8018d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801744c:	697b      	ldr	r3, [r7, #20]
 801744e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017450:	2b00      	cmp	r3, #0
 8017452:	d106      	bne.n	8017462 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017454:	697b      	ldr	r3, [r7, #20]
 8017456:	3324      	adds	r3, #36	; 0x24
 8017458:	687a      	ldr	r2, [r7, #4]
 801745a:	68b9      	ldr	r1, [r7, #8]
 801745c:	4618      	mov	r0, r3
 801745e:	f000 fc8d 	bl	8017d7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017462:	6978      	ldr	r0, [r7, #20]
 8017464:	f7ff ff26 	bl	80172b4 <prvUnlockQueue>
	}
 8017468:	bf00      	nop
 801746a:	3718      	adds	r7, #24
 801746c:	46bd      	mov	sp, r7
 801746e:	bd80      	pop	{r7, pc}

08017470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017470:	b580      	push	{r7, lr}
 8017472:	b08e      	sub	sp, #56	; 0x38
 8017474:	af04      	add	r7, sp, #16
 8017476:	60f8      	str	r0, [r7, #12]
 8017478:	60b9      	str	r1, [r7, #8]
 801747a:	607a      	str	r2, [r7, #4]
 801747c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801747e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017480:	2b00      	cmp	r3, #0
 8017482:	d10a      	bne.n	801749a <xTaskCreateStatic+0x2a>
	__asm volatile
 8017484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017488:	f383 8811 	msr	BASEPRI, r3
 801748c:	f3bf 8f6f 	isb	sy
 8017490:	f3bf 8f4f 	dsb	sy
 8017494:	623b      	str	r3, [r7, #32]
}
 8017496:	bf00      	nop
 8017498:	e7fe      	b.n	8017498 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801749c:	2b00      	cmp	r3, #0
 801749e:	d10a      	bne.n	80174b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80174a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174a4:	f383 8811 	msr	BASEPRI, r3
 80174a8:	f3bf 8f6f 	isb	sy
 80174ac:	f3bf 8f4f 	dsb	sy
 80174b0:	61fb      	str	r3, [r7, #28]
}
 80174b2:	bf00      	nop
 80174b4:	e7fe      	b.n	80174b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80174b6:	235c      	movs	r3, #92	; 0x5c
 80174b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80174ba:	693b      	ldr	r3, [r7, #16]
 80174bc:	2b5c      	cmp	r3, #92	; 0x5c
 80174be:	d00a      	beq.n	80174d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80174c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174c4:	f383 8811 	msr	BASEPRI, r3
 80174c8:	f3bf 8f6f 	isb	sy
 80174cc:	f3bf 8f4f 	dsb	sy
 80174d0:	61bb      	str	r3, [r7, #24]
}
 80174d2:	bf00      	nop
 80174d4:	e7fe      	b.n	80174d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80174d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80174d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d01e      	beq.n	801751c <xTaskCreateStatic+0xac>
 80174de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d01b      	beq.n	801751c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80174e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80174e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80174ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174f0:	2202      	movs	r2, #2
 80174f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80174f6:	2300      	movs	r3, #0
 80174f8:	9303      	str	r3, [sp, #12]
 80174fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174fc:	9302      	str	r3, [sp, #8]
 80174fe:	f107 0314 	add.w	r3, r7, #20
 8017502:	9301      	str	r3, [sp, #4]
 8017504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017506:	9300      	str	r3, [sp, #0]
 8017508:	683b      	ldr	r3, [r7, #0]
 801750a:	687a      	ldr	r2, [r7, #4]
 801750c:	68b9      	ldr	r1, [r7, #8]
 801750e:	68f8      	ldr	r0, [r7, #12]
 8017510:	f000 f850 	bl	80175b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017516:	f000 f8dd 	bl	80176d4 <prvAddNewTaskToReadyList>
 801751a:	e001      	b.n	8017520 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801751c:	2300      	movs	r3, #0
 801751e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017520:	697b      	ldr	r3, [r7, #20]
	}
 8017522:	4618      	mov	r0, r3
 8017524:	3728      	adds	r7, #40	; 0x28
 8017526:	46bd      	mov	sp, r7
 8017528:	bd80      	pop	{r7, pc}

0801752a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801752a:	b580      	push	{r7, lr}
 801752c:	b08c      	sub	sp, #48	; 0x30
 801752e:	af04      	add	r7, sp, #16
 8017530:	60f8      	str	r0, [r7, #12]
 8017532:	60b9      	str	r1, [r7, #8]
 8017534:	603b      	str	r3, [r7, #0]
 8017536:	4613      	mov	r3, r2
 8017538:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801753a:	88fb      	ldrh	r3, [r7, #6]
 801753c:	009b      	lsls	r3, r3, #2
 801753e:	4618      	mov	r0, r3
 8017540:	f001 fd1a 	bl	8018f78 <pvPortMalloc>
 8017544:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017546:	697b      	ldr	r3, [r7, #20]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d00e      	beq.n	801756a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801754c:	205c      	movs	r0, #92	; 0x5c
 801754e:	f001 fd13 	bl	8018f78 <pvPortMalloc>
 8017552:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017554:	69fb      	ldr	r3, [r7, #28]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d003      	beq.n	8017562 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801755a:	69fb      	ldr	r3, [r7, #28]
 801755c:	697a      	ldr	r2, [r7, #20]
 801755e:	631a      	str	r2, [r3, #48]	; 0x30
 8017560:	e005      	b.n	801756e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017562:	6978      	ldr	r0, [r7, #20]
 8017564:	f001 fdd4 	bl	8019110 <vPortFree>
 8017568:	e001      	b.n	801756e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801756a:	2300      	movs	r3, #0
 801756c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801756e:	69fb      	ldr	r3, [r7, #28]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d017      	beq.n	80175a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017574:	69fb      	ldr	r3, [r7, #28]
 8017576:	2200      	movs	r2, #0
 8017578:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801757c:	88fa      	ldrh	r2, [r7, #6]
 801757e:	2300      	movs	r3, #0
 8017580:	9303      	str	r3, [sp, #12]
 8017582:	69fb      	ldr	r3, [r7, #28]
 8017584:	9302      	str	r3, [sp, #8]
 8017586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017588:	9301      	str	r3, [sp, #4]
 801758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801758c:	9300      	str	r3, [sp, #0]
 801758e:	683b      	ldr	r3, [r7, #0]
 8017590:	68b9      	ldr	r1, [r7, #8]
 8017592:	68f8      	ldr	r0, [r7, #12]
 8017594:	f000 f80e 	bl	80175b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017598:	69f8      	ldr	r0, [r7, #28]
 801759a:	f000 f89b 	bl	80176d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801759e:	2301      	movs	r3, #1
 80175a0:	61bb      	str	r3, [r7, #24]
 80175a2:	e002      	b.n	80175aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80175a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80175a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80175aa:	69bb      	ldr	r3, [r7, #24]
	}
 80175ac:	4618      	mov	r0, r3
 80175ae:	3720      	adds	r7, #32
 80175b0:	46bd      	mov	sp, r7
 80175b2:	bd80      	pop	{r7, pc}

080175b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b088      	sub	sp, #32
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	60f8      	str	r0, [r7, #12]
 80175bc:	60b9      	str	r1, [r7, #8]
 80175be:	607a      	str	r2, [r7, #4]
 80175c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80175c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	009b      	lsls	r3, r3, #2
 80175ca:	461a      	mov	r2, r3
 80175cc:	21a5      	movs	r1, #165	; 0xa5
 80175ce:	f001 fef5 	bl	80193bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80175d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80175d6:	6879      	ldr	r1, [r7, #4]
 80175d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80175dc:	440b      	add	r3, r1
 80175de:	009b      	lsls	r3, r3, #2
 80175e0:	4413      	add	r3, r2
 80175e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80175e4:	69bb      	ldr	r3, [r7, #24]
 80175e6:	f023 0307 	bic.w	r3, r3, #7
 80175ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80175ec:	69bb      	ldr	r3, [r7, #24]
 80175ee:	f003 0307 	and.w	r3, r3, #7
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d00a      	beq.n	801760c <prvInitialiseNewTask+0x58>
	__asm volatile
 80175f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175fa:	f383 8811 	msr	BASEPRI, r3
 80175fe:	f3bf 8f6f 	isb	sy
 8017602:	f3bf 8f4f 	dsb	sy
 8017606:	617b      	str	r3, [r7, #20]
}
 8017608:	bf00      	nop
 801760a:	e7fe      	b.n	801760a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801760c:	68bb      	ldr	r3, [r7, #8]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d01f      	beq.n	8017652 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017612:	2300      	movs	r3, #0
 8017614:	61fb      	str	r3, [r7, #28]
 8017616:	e012      	b.n	801763e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017618:	68ba      	ldr	r2, [r7, #8]
 801761a:	69fb      	ldr	r3, [r7, #28]
 801761c:	4413      	add	r3, r2
 801761e:	7819      	ldrb	r1, [r3, #0]
 8017620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017622:	69fb      	ldr	r3, [r7, #28]
 8017624:	4413      	add	r3, r2
 8017626:	3334      	adds	r3, #52	; 0x34
 8017628:	460a      	mov	r2, r1
 801762a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801762c:	68ba      	ldr	r2, [r7, #8]
 801762e:	69fb      	ldr	r3, [r7, #28]
 8017630:	4413      	add	r3, r2
 8017632:	781b      	ldrb	r3, [r3, #0]
 8017634:	2b00      	cmp	r3, #0
 8017636:	d006      	beq.n	8017646 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017638:	69fb      	ldr	r3, [r7, #28]
 801763a:	3301      	adds	r3, #1
 801763c:	61fb      	str	r3, [r7, #28]
 801763e:	69fb      	ldr	r3, [r7, #28]
 8017640:	2b0f      	cmp	r3, #15
 8017642:	d9e9      	bls.n	8017618 <prvInitialiseNewTask+0x64>
 8017644:	e000      	b.n	8017648 <prvInitialiseNewTask+0x94>
			{
				break;
 8017646:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801764a:	2200      	movs	r2, #0
 801764c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017650:	e003      	b.n	801765a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017654:	2200      	movs	r2, #0
 8017656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801765c:	2b37      	cmp	r3, #55	; 0x37
 801765e:	d901      	bls.n	8017664 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017660:	2337      	movs	r3, #55	; 0x37
 8017662:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017668:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801766c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801766e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017672:	2200      	movs	r2, #0
 8017674:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017678:	3304      	adds	r3, #4
 801767a:	4618      	mov	r0, r3
 801767c:	f7ff f978 	bl	8016970 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017682:	3318      	adds	r3, #24
 8017684:	4618      	mov	r0, r3
 8017686:	f7ff f973 	bl	8016970 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801768c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801768e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017692:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017698:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801769c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801769e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80176a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176a2:	2200      	movs	r2, #0
 80176a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80176a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176a8:	2200      	movs	r2, #0
 80176aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80176ae:	683a      	ldr	r2, [r7, #0]
 80176b0:	68f9      	ldr	r1, [r7, #12]
 80176b2:	69b8      	ldr	r0, [r7, #24]
 80176b4:	f001 fa14 	bl	8018ae0 <pxPortInitialiseStack>
 80176b8:	4602      	mov	r2, r0
 80176ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80176be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d002      	beq.n	80176ca <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80176c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80176c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80176ca:	bf00      	nop
 80176cc:	3720      	adds	r7, #32
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}
	...

080176d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b082      	sub	sp, #8
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80176dc:	f001 fb2a 	bl	8018d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80176e0:	4b2d      	ldr	r3, [pc, #180]	; (8017798 <prvAddNewTaskToReadyList+0xc4>)
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	3301      	adds	r3, #1
 80176e6:	4a2c      	ldr	r2, [pc, #176]	; (8017798 <prvAddNewTaskToReadyList+0xc4>)
 80176e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80176ea:	4b2c      	ldr	r3, [pc, #176]	; (801779c <prvAddNewTaskToReadyList+0xc8>)
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d109      	bne.n	8017706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80176f2:	4a2a      	ldr	r2, [pc, #168]	; (801779c <prvAddNewTaskToReadyList+0xc8>)
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80176f8:	4b27      	ldr	r3, [pc, #156]	; (8017798 <prvAddNewTaskToReadyList+0xc4>)
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	2b01      	cmp	r3, #1
 80176fe:	d110      	bne.n	8017722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017700:	f000 fcca 	bl	8018098 <prvInitialiseTaskLists>
 8017704:	e00d      	b.n	8017722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017706:	4b26      	ldr	r3, [pc, #152]	; (80177a0 <prvAddNewTaskToReadyList+0xcc>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d109      	bne.n	8017722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801770e:	4b23      	ldr	r3, [pc, #140]	; (801779c <prvAddNewTaskToReadyList+0xc8>)
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017718:	429a      	cmp	r2, r3
 801771a:	d802      	bhi.n	8017722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801771c:	4a1f      	ldr	r2, [pc, #124]	; (801779c <prvAddNewTaskToReadyList+0xc8>)
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017722:	4b20      	ldr	r3, [pc, #128]	; (80177a4 <prvAddNewTaskToReadyList+0xd0>)
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	3301      	adds	r3, #1
 8017728:	4a1e      	ldr	r2, [pc, #120]	; (80177a4 <prvAddNewTaskToReadyList+0xd0>)
 801772a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801772c:	4b1d      	ldr	r3, [pc, #116]	; (80177a4 <prvAddNewTaskToReadyList+0xd0>)
 801772e:	681a      	ldr	r2, [r3, #0]
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017738:	4b1b      	ldr	r3, [pc, #108]	; (80177a8 <prvAddNewTaskToReadyList+0xd4>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	429a      	cmp	r2, r3
 801773e:	d903      	bls.n	8017748 <prvAddNewTaskToReadyList+0x74>
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017744:	4a18      	ldr	r2, [pc, #96]	; (80177a8 <prvAddNewTaskToReadyList+0xd4>)
 8017746:	6013      	str	r3, [r2, #0]
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801774c:	4613      	mov	r3, r2
 801774e:	009b      	lsls	r3, r3, #2
 8017750:	4413      	add	r3, r2
 8017752:	009b      	lsls	r3, r3, #2
 8017754:	4a15      	ldr	r2, [pc, #84]	; (80177ac <prvAddNewTaskToReadyList+0xd8>)
 8017756:	441a      	add	r2, r3
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	3304      	adds	r3, #4
 801775c:	4619      	mov	r1, r3
 801775e:	4610      	mov	r0, r2
 8017760:	f7ff f913 	bl	801698a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017764:	f001 fb16 	bl	8018d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017768:	4b0d      	ldr	r3, [pc, #52]	; (80177a0 <prvAddNewTaskToReadyList+0xcc>)
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d00e      	beq.n	801778e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017770:	4b0a      	ldr	r3, [pc, #40]	; (801779c <prvAddNewTaskToReadyList+0xc8>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801777a:	429a      	cmp	r2, r3
 801777c:	d207      	bcs.n	801778e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801777e:	4b0c      	ldr	r3, [pc, #48]	; (80177b0 <prvAddNewTaskToReadyList+0xdc>)
 8017780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017784:	601a      	str	r2, [r3, #0]
 8017786:	f3bf 8f4f 	dsb	sy
 801778a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801778e:	bf00      	nop
 8017790:	3708      	adds	r7, #8
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}
 8017796:	bf00      	nop
 8017798:	24002bec 	.word	0x24002bec
 801779c:	24002718 	.word	0x24002718
 80177a0:	24002bf8 	.word	0x24002bf8
 80177a4:	24002c08 	.word	0x24002c08
 80177a8:	24002bf4 	.word	0x24002bf4
 80177ac:	2400271c 	.word	0x2400271c
 80177b0:	e000ed04 	.word	0xe000ed04

080177b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b084      	sub	sp, #16
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80177bc:	2300      	movs	r3, #0
 80177be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d017      	beq.n	80177f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80177c6:	4b13      	ldr	r3, [pc, #76]	; (8017814 <vTaskDelay+0x60>)
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d00a      	beq.n	80177e4 <vTaskDelay+0x30>
	__asm volatile
 80177ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177d2:	f383 8811 	msr	BASEPRI, r3
 80177d6:	f3bf 8f6f 	isb	sy
 80177da:	f3bf 8f4f 	dsb	sy
 80177de:	60bb      	str	r3, [r7, #8]
}
 80177e0:	bf00      	nop
 80177e2:	e7fe      	b.n	80177e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80177e4:	f000 f880 	bl	80178e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80177e8:	2100      	movs	r1, #0
 80177ea:	6878      	ldr	r0, [r7, #4]
 80177ec:	f000 fdb6 	bl	801835c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80177f0:	f000 f888 	bl	8017904 <xTaskResumeAll>
 80177f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d107      	bne.n	801780c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80177fc:	4b06      	ldr	r3, [pc, #24]	; (8017818 <vTaskDelay+0x64>)
 80177fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017802:	601a      	str	r2, [r3, #0]
 8017804:	f3bf 8f4f 	dsb	sy
 8017808:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801780c:	bf00      	nop
 801780e:	3710      	adds	r7, #16
 8017810:	46bd      	mov	sp, r7
 8017812:	bd80      	pop	{r7, pc}
 8017814:	24002c14 	.word	0x24002c14
 8017818:	e000ed04 	.word	0xe000ed04

0801781c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b08a      	sub	sp, #40	; 0x28
 8017820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017822:	2300      	movs	r3, #0
 8017824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017826:	2300      	movs	r3, #0
 8017828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801782a:	463a      	mov	r2, r7
 801782c:	1d39      	adds	r1, r7, #4
 801782e:	f107 0308 	add.w	r3, r7, #8
 8017832:	4618      	mov	r0, r3
 8017834:	f7fe fddc 	bl	80163f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017838:	6839      	ldr	r1, [r7, #0]
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	68ba      	ldr	r2, [r7, #8]
 801783e:	9202      	str	r2, [sp, #8]
 8017840:	9301      	str	r3, [sp, #4]
 8017842:	2300      	movs	r3, #0
 8017844:	9300      	str	r3, [sp, #0]
 8017846:	2300      	movs	r3, #0
 8017848:	460a      	mov	r2, r1
 801784a:	4921      	ldr	r1, [pc, #132]	; (80178d0 <vTaskStartScheduler+0xb4>)
 801784c:	4821      	ldr	r0, [pc, #132]	; (80178d4 <vTaskStartScheduler+0xb8>)
 801784e:	f7ff fe0f 	bl	8017470 <xTaskCreateStatic>
 8017852:	4603      	mov	r3, r0
 8017854:	4a20      	ldr	r2, [pc, #128]	; (80178d8 <vTaskStartScheduler+0xbc>)
 8017856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017858:	4b1f      	ldr	r3, [pc, #124]	; (80178d8 <vTaskStartScheduler+0xbc>)
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d002      	beq.n	8017866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017860:	2301      	movs	r3, #1
 8017862:	617b      	str	r3, [r7, #20]
 8017864:	e001      	b.n	801786a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017866:	2300      	movs	r3, #0
 8017868:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801786a:	697b      	ldr	r3, [r7, #20]
 801786c:	2b01      	cmp	r3, #1
 801786e:	d102      	bne.n	8017876 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017870:	f000 fdc8 	bl	8018404 <xTimerCreateTimerTask>
 8017874:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017876:	697b      	ldr	r3, [r7, #20]
 8017878:	2b01      	cmp	r3, #1
 801787a:	d116      	bne.n	80178aa <vTaskStartScheduler+0x8e>
	__asm volatile
 801787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017880:	f383 8811 	msr	BASEPRI, r3
 8017884:	f3bf 8f6f 	isb	sy
 8017888:	f3bf 8f4f 	dsb	sy
 801788c:	613b      	str	r3, [r7, #16]
}
 801788e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017890:	4b12      	ldr	r3, [pc, #72]	; (80178dc <vTaskStartScheduler+0xc0>)
 8017892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017896:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017898:	4b11      	ldr	r3, [pc, #68]	; (80178e0 <vTaskStartScheduler+0xc4>)
 801789a:	2201      	movs	r2, #1
 801789c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801789e:	4b11      	ldr	r3, [pc, #68]	; (80178e4 <vTaskStartScheduler+0xc8>)
 80178a0:	2200      	movs	r2, #0
 80178a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80178a4:	f001 f9a4 	bl	8018bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80178a8:	e00e      	b.n	80178c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80178aa:	697b      	ldr	r3, [r7, #20]
 80178ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80178b0:	d10a      	bne.n	80178c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80178b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178b6:	f383 8811 	msr	BASEPRI, r3
 80178ba:	f3bf 8f6f 	isb	sy
 80178be:	f3bf 8f4f 	dsb	sy
 80178c2:	60fb      	str	r3, [r7, #12]
}
 80178c4:	bf00      	nop
 80178c6:	e7fe      	b.n	80178c6 <vTaskStartScheduler+0xaa>
}
 80178c8:	bf00      	nop
 80178ca:	3718      	adds	r7, #24
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}
 80178d0:	0801a030 	.word	0x0801a030
 80178d4:	08018069 	.word	0x08018069
 80178d8:	24002c10 	.word	0x24002c10
 80178dc:	24002c0c 	.word	0x24002c0c
 80178e0:	24002bf8 	.word	0x24002bf8
 80178e4:	24002bf0 	.word	0x24002bf0

080178e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80178e8:	b480      	push	{r7}
 80178ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80178ec:	4b04      	ldr	r3, [pc, #16]	; (8017900 <vTaskSuspendAll+0x18>)
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	3301      	adds	r3, #1
 80178f2:	4a03      	ldr	r2, [pc, #12]	; (8017900 <vTaskSuspendAll+0x18>)
 80178f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80178f6:	bf00      	nop
 80178f8:	46bd      	mov	sp, r7
 80178fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fe:	4770      	bx	lr
 8017900:	24002c14 	.word	0x24002c14

08017904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b084      	sub	sp, #16
 8017908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801790a:	2300      	movs	r3, #0
 801790c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801790e:	2300      	movs	r3, #0
 8017910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017912:	4b42      	ldr	r3, [pc, #264]	; (8017a1c <xTaskResumeAll+0x118>)
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d10a      	bne.n	8017930 <xTaskResumeAll+0x2c>
	__asm volatile
 801791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801791e:	f383 8811 	msr	BASEPRI, r3
 8017922:	f3bf 8f6f 	isb	sy
 8017926:	f3bf 8f4f 	dsb	sy
 801792a:	603b      	str	r3, [r7, #0]
}
 801792c:	bf00      	nop
 801792e:	e7fe      	b.n	801792e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017930:	f001 fa00 	bl	8018d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017934:	4b39      	ldr	r3, [pc, #228]	; (8017a1c <xTaskResumeAll+0x118>)
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	3b01      	subs	r3, #1
 801793a:	4a38      	ldr	r2, [pc, #224]	; (8017a1c <xTaskResumeAll+0x118>)
 801793c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801793e:	4b37      	ldr	r3, [pc, #220]	; (8017a1c <xTaskResumeAll+0x118>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d162      	bne.n	8017a0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017946:	4b36      	ldr	r3, [pc, #216]	; (8017a20 <xTaskResumeAll+0x11c>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d05e      	beq.n	8017a0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801794e:	e02f      	b.n	80179b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017950:	4b34      	ldr	r3, [pc, #208]	; (8017a24 <xTaskResumeAll+0x120>)
 8017952:	68db      	ldr	r3, [r3, #12]
 8017954:	68db      	ldr	r3, [r3, #12]
 8017956:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	3318      	adds	r3, #24
 801795c:	4618      	mov	r0, r3
 801795e:	f7ff f871 	bl	8016a44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	3304      	adds	r3, #4
 8017966:	4618      	mov	r0, r3
 8017968:	f7ff f86c 	bl	8016a44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017970:	4b2d      	ldr	r3, [pc, #180]	; (8017a28 <xTaskResumeAll+0x124>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	429a      	cmp	r2, r3
 8017976:	d903      	bls.n	8017980 <xTaskResumeAll+0x7c>
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801797c:	4a2a      	ldr	r2, [pc, #168]	; (8017a28 <xTaskResumeAll+0x124>)
 801797e:	6013      	str	r3, [r2, #0]
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017984:	4613      	mov	r3, r2
 8017986:	009b      	lsls	r3, r3, #2
 8017988:	4413      	add	r3, r2
 801798a:	009b      	lsls	r3, r3, #2
 801798c:	4a27      	ldr	r2, [pc, #156]	; (8017a2c <xTaskResumeAll+0x128>)
 801798e:	441a      	add	r2, r3
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	3304      	adds	r3, #4
 8017994:	4619      	mov	r1, r3
 8017996:	4610      	mov	r0, r2
 8017998:	f7fe fff7 	bl	801698a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179a0:	4b23      	ldr	r3, [pc, #140]	; (8017a30 <xTaskResumeAll+0x12c>)
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179a6:	429a      	cmp	r2, r3
 80179a8:	d302      	bcc.n	80179b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80179aa:	4b22      	ldr	r3, [pc, #136]	; (8017a34 <xTaskResumeAll+0x130>)
 80179ac:	2201      	movs	r2, #1
 80179ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80179b0:	4b1c      	ldr	r3, [pc, #112]	; (8017a24 <xTaskResumeAll+0x120>)
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d1cb      	bne.n	8017950 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d001      	beq.n	80179c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80179be:	f000 fc09 	bl	80181d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80179c2:	4b1d      	ldr	r3, [pc, #116]	; (8017a38 <xTaskResumeAll+0x134>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d010      	beq.n	80179f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80179ce:	f000 f847 	bl	8017a60 <xTaskIncrementTick>
 80179d2:	4603      	mov	r3, r0
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d002      	beq.n	80179de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80179d8:	4b16      	ldr	r3, [pc, #88]	; (8017a34 <xTaskResumeAll+0x130>)
 80179da:	2201      	movs	r2, #1
 80179dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	3b01      	subs	r3, #1
 80179e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d1f1      	bne.n	80179ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80179ea:	4b13      	ldr	r3, [pc, #76]	; (8017a38 <xTaskResumeAll+0x134>)
 80179ec:	2200      	movs	r2, #0
 80179ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80179f0:	4b10      	ldr	r3, [pc, #64]	; (8017a34 <xTaskResumeAll+0x130>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d009      	beq.n	8017a0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80179f8:	2301      	movs	r3, #1
 80179fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80179fc:	4b0f      	ldr	r3, [pc, #60]	; (8017a3c <xTaskResumeAll+0x138>)
 80179fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a02:	601a      	str	r2, [r3, #0]
 8017a04:	f3bf 8f4f 	dsb	sy
 8017a08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017a0c:	f001 f9c2 	bl	8018d94 <vPortExitCritical>

	return xAlreadyYielded;
 8017a10:	68bb      	ldr	r3, [r7, #8]
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3710      	adds	r7, #16
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}
 8017a1a:	bf00      	nop
 8017a1c:	24002c14 	.word	0x24002c14
 8017a20:	24002bec 	.word	0x24002bec
 8017a24:	24002bac 	.word	0x24002bac
 8017a28:	24002bf4 	.word	0x24002bf4
 8017a2c:	2400271c 	.word	0x2400271c
 8017a30:	24002718 	.word	0x24002718
 8017a34:	24002c00 	.word	0x24002c00
 8017a38:	24002bfc 	.word	0x24002bfc
 8017a3c:	e000ed04 	.word	0xe000ed04

08017a40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017a40:	b480      	push	{r7}
 8017a42:	b083      	sub	sp, #12
 8017a44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017a46:	4b05      	ldr	r3, [pc, #20]	; (8017a5c <xTaskGetTickCount+0x1c>)
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017a4c:	687b      	ldr	r3, [r7, #4]
}
 8017a4e:	4618      	mov	r0, r3
 8017a50:	370c      	adds	r7, #12
 8017a52:	46bd      	mov	sp, r7
 8017a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a58:	4770      	bx	lr
 8017a5a:	bf00      	nop
 8017a5c:	24002bf0 	.word	0x24002bf0

08017a60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b086      	sub	sp, #24
 8017a64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017a66:	2300      	movs	r3, #0
 8017a68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017a6a:	4b53      	ldr	r3, [pc, #332]	; (8017bb8 <xTaskIncrementTick+0x158>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	f040 8095 	bne.w	8017b9e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017a74:	4b51      	ldr	r3, [pc, #324]	; (8017bbc <xTaskIncrementTick+0x15c>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	3301      	adds	r3, #1
 8017a7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017a7c:	4a4f      	ldr	r2, [pc, #316]	; (8017bbc <xTaskIncrementTick+0x15c>)
 8017a7e:	693b      	ldr	r3, [r7, #16]
 8017a80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017a82:	693b      	ldr	r3, [r7, #16]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d120      	bne.n	8017aca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017a88:	4b4d      	ldr	r3, [pc, #308]	; (8017bc0 <xTaskIncrementTick+0x160>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d00a      	beq.n	8017aa8 <xTaskIncrementTick+0x48>
	__asm volatile
 8017a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a96:	f383 8811 	msr	BASEPRI, r3
 8017a9a:	f3bf 8f6f 	isb	sy
 8017a9e:	f3bf 8f4f 	dsb	sy
 8017aa2:	603b      	str	r3, [r7, #0]
}
 8017aa4:	bf00      	nop
 8017aa6:	e7fe      	b.n	8017aa6 <xTaskIncrementTick+0x46>
 8017aa8:	4b45      	ldr	r3, [pc, #276]	; (8017bc0 <xTaskIncrementTick+0x160>)
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	60fb      	str	r3, [r7, #12]
 8017aae:	4b45      	ldr	r3, [pc, #276]	; (8017bc4 <xTaskIncrementTick+0x164>)
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	4a43      	ldr	r2, [pc, #268]	; (8017bc0 <xTaskIncrementTick+0x160>)
 8017ab4:	6013      	str	r3, [r2, #0]
 8017ab6:	4a43      	ldr	r2, [pc, #268]	; (8017bc4 <xTaskIncrementTick+0x164>)
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	6013      	str	r3, [r2, #0]
 8017abc:	4b42      	ldr	r3, [pc, #264]	; (8017bc8 <xTaskIncrementTick+0x168>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	3301      	adds	r3, #1
 8017ac2:	4a41      	ldr	r2, [pc, #260]	; (8017bc8 <xTaskIncrementTick+0x168>)
 8017ac4:	6013      	str	r3, [r2, #0]
 8017ac6:	f000 fb85 	bl	80181d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017aca:	4b40      	ldr	r3, [pc, #256]	; (8017bcc <xTaskIncrementTick+0x16c>)
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	693a      	ldr	r2, [r7, #16]
 8017ad0:	429a      	cmp	r2, r3
 8017ad2:	d349      	bcc.n	8017b68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017ad4:	4b3a      	ldr	r3, [pc, #232]	; (8017bc0 <xTaskIncrementTick+0x160>)
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d104      	bne.n	8017ae8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017ade:	4b3b      	ldr	r3, [pc, #236]	; (8017bcc <xTaskIncrementTick+0x16c>)
 8017ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ae4:	601a      	str	r2, [r3, #0]
					break;
 8017ae6:	e03f      	b.n	8017b68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ae8:	4b35      	ldr	r3, [pc, #212]	; (8017bc0 <xTaskIncrementTick+0x160>)
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	68db      	ldr	r3, [r3, #12]
 8017aee:	68db      	ldr	r3, [r3, #12]
 8017af0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017af2:	68bb      	ldr	r3, [r7, #8]
 8017af4:	685b      	ldr	r3, [r3, #4]
 8017af6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017af8:	693a      	ldr	r2, [r7, #16]
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	429a      	cmp	r2, r3
 8017afe:	d203      	bcs.n	8017b08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017b00:	4a32      	ldr	r2, [pc, #200]	; (8017bcc <xTaskIncrementTick+0x16c>)
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017b06:	e02f      	b.n	8017b68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	3304      	adds	r3, #4
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f7fe ff99 	bl	8016a44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017b12:	68bb      	ldr	r3, [r7, #8]
 8017b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d004      	beq.n	8017b24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017b1a:	68bb      	ldr	r3, [r7, #8]
 8017b1c:	3318      	adds	r3, #24
 8017b1e:	4618      	mov	r0, r3
 8017b20:	f7fe ff90 	bl	8016a44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017b24:	68bb      	ldr	r3, [r7, #8]
 8017b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b28:	4b29      	ldr	r3, [pc, #164]	; (8017bd0 <xTaskIncrementTick+0x170>)
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	429a      	cmp	r2, r3
 8017b2e:	d903      	bls.n	8017b38 <xTaskIncrementTick+0xd8>
 8017b30:	68bb      	ldr	r3, [r7, #8]
 8017b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b34:	4a26      	ldr	r2, [pc, #152]	; (8017bd0 <xTaskIncrementTick+0x170>)
 8017b36:	6013      	str	r3, [r2, #0]
 8017b38:	68bb      	ldr	r3, [r7, #8]
 8017b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b3c:	4613      	mov	r3, r2
 8017b3e:	009b      	lsls	r3, r3, #2
 8017b40:	4413      	add	r3, r2
 8017b42:	009b      	lsls	r3, r3, #2
 8017b44:	4a23      	ldr	r2, [pc, #140]	; (8017bd4 <xTaskIncrementTick+0x174>)
 8017b46:	441a      	add	r2, r3
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	3304      	adds	r3, #4
 8017b4c:	4619      	mov	r1, r3
 8017b4e:	4610      	mov	r0, r2
 8017b50:	f7fe ff1b 	bl	801698a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b58:	4b1f      	ldr	r3, [pc, #124]	; (8017bd8 <xTaskIncrementTick+0x178>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b5e:	429a      	cmp	r2, r3
 8017b60:	d3b8      	bcc.n	8017ad4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017b62:	2301      	movs	r3, #1
 8017b64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017b66:	e7b5      	b.n	8017ad4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017b68:	4b1b      	ldr	r3, [pc, #108]	; (8017bd8 <xTaskIncrementTick+0x178>)
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b6e:	4919      	ldr	r1, [pc, #100]	; (8017bd4 <xTaskIncrementTick+0x174>)
 8017b70:	4613      	mov	r3, r2
 8017b72:	009b      	lsls	r3, r3, #2
 8017b74:	4413      	add	r3, r2
 8017b76:	009b      	lsls	r3, r3, #2
 8017b78:	440b      	add	r3, r1
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	2b01      	cmp	r3, #1
 8017b7e:	d901      	bls.n	8017b84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017b80:	2301      	movs	r3, #1
 8017b82:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8017b84:	4b15      	ldr	r3, [pc, #84]	; (8017bdc <xTaskIncrementTick+0x17c>)
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d101      	bne.n	8017b90 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8017b8c:	f7e9 fd6a 	bl	8001664 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017b90:	4b13      	ldr	r3, [pc, #76]	; (8017be0 <xTaskIncrementTick+0x180>)
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d009      	beq.n	8017bac <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8017b98:	2301      	movs	r3, #1
 8017b9a:	617b      	str	r3, [r7, #20]
 8017b9c:	e006      	b.n	8017bac <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017b9e:	4b0f      	ldr	r3, [pc, #60]	; (8017bdc <xTaskIncrementTick+0x17c>)
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	3301      	adds	r3, #1
 8017ba4:	4a0d      	ldr	r2, [pc, #52]	; (8017bdc <xTaskIncrementTick+0x17c>)
 8017ba6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8017ba8:	f7e9 fd5c 	bl	8001664 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8017bac:	697b      	ldr	r3, [r7, #20]
}
 8017bae:	4618      	mov	r0, r3
 8017bb0:	3718      	adds	r7, #24
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}
 8017bb6:	bf00      	nop
 8017bb8:	24002c14 	.word	0x24002c14
 8017bbc:	24002bf0 	.word	0x24002bf0
 8017bc0:	24002ba4 	.word	0x24002ba4
 8017bc4:	24002ba8 	.word	0x24002ba8
 8017bc8:	24002c04 	.word	0x24002c04
 8017bcc:	24002c0c 	.word	0x24002c0c
 8017bd0:	24002bf4 	.word	0x24002bf4
 8017bd4:	2400271c 	.word	0x2400271c
 8017bd8:	24002718 	.word	0x24002718
 8017bdc:	24002bfc 	.word	0x24002bfc
 8017be0:	24002c00 	.word	0x24002c00

08017be4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b084      	sub	sp, #16
 8017be8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017bea:	4b2f      	ldr	r3, [pc, #188]	; (8017ca8 <vTaskSwitchContext+0xc4>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d003      	beq.n	8017bfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017bf2:	4b2e      	ldr	r3, [pc, #184]	; (8017cac <vTaskSwitchContext+0xc8>)
 8017bf4:	2201      	movs	r2, #1
 8017bf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017bf8:	e052      	b.n	8017ca0 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8017bfa:	4b2c      	ldr	r3, [pc, #176]	; (8017cac <vTaskSwitchContext+0xc8>)
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8017c00:	4b2b      	ldr	r3, [pc, #172]	; (8017cb0 <vTaskSwitchContext+0xcc>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	681a      	ldr	r2, [r3, #0]
 8017c06:	4b2a      	ldr	r3, [pc, #168]	; (8017cb0 <vTaskSwitchContext+0xcc>)
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c0c:	429a      	cmp	r2, r3
 8017c0e:	d808      	bhi.n	8017c22 <vTaskSwitchContext+0x3e>
 8017c10:	4b27      	ldr	r3, [pc, #156]	; (8017cb0 <vTaskSwitchContext+0xcc>)
 8017c12:	681a      	ldr	r2, [r3, #0]
 8017c14:	4b26      	ldr	r3, [pc, #152]	; (8017cb0 <vTaskSwitchContext+0xcc>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	3334      	adds	r3, #52	; 0x34
 8017c1a:	4619      	mov	r1, r3
 8017c1c:	4610      	mov	r0, r2
 8017c1e:	f7e9 fd2f 	bl	8001680 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c22:	4b24      	ldr	r3, [pc, #144]	; (8017cb4 <vTaskSwitchContext+0xd0>)
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	60fb      	str	r3, [r7, #12]
 8017c28:	e010      	b.n	8017c4c <vTaskSwitchContext+0x68>
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d10a      	bne.n	8017c46 <vTaskSwitchContext+0x62>
	__asm volatile
 8017c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c34:	f383 8811 	msr	BASEPRI, r3
 8017c38:	f3bf 8f6f 	isb	sy
 8017c3c:	f3bf 8f4f 	dsb	sy
 8017c40:	607b      	str	r3, [r7, #4]
}
 8017c42:	bf00      	nop
 8017c44:	e7fe      	b.n	8017c44 <vTaskSwitchContext+0x60>
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	3b01      	subs	r3, #1
 8017c4a:	60fb      	str	r3, [r7, #12]
 8017c4c:	491a      	ldr	r1, [pc, #104]	; (8017cb8 <vTaskSwitchContext+0xd4>)
 8017c4e:	68fa      	ldr	r2, [r7, #12]
 8017c50:	4613      	mov	r3, r2
 8017c52:	009b      	lsls	r3, r3, #2
 8017c54:	4413      	add	r3, r2
 8017c56:	009b      	lsls	r3, r3, #2
 8017c58:	440b      	add	r3, r1
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d0e4      	beq.n	8017c2a <vTaskSwitchContext+0x46>
 8017c60:	68fa      	ldr	r2, [r7, #12]
 8017c62:	4613      	mov	r3, r2
 8017c64:	009b      	lsls	r3, r3, #2
 8017c66:	4413      	add	r3, r2
 8017c68:	009b      	lsls	r3, r3, #2
 8017c6a:	4a13      	ldr	r2, [pc, #76]	; (8017cb8 <vTaskSwitchContext+0xd4>)
 8017c6c:	4413      	add	r3, r2
 8017c6e:	60bb      	str	r3, [r7, #8]
 8017c70:	68bb      	ldr	r3, [r7, #8]
 8017c72:	685b      	ldr	r3, [r3, #4]
 8017c74:	685a      	ldr	r2, [r3, #4]
 8017c76:	68bb      	ldr	r3, [r7, #8]
 8017c78:	605a      	str	r2, [r3, #4]
 8017c7a:	68bb      	ldr	r3, [r7, #8]
 8017c7c:	685a      	ldr	r2, [r3, #4]
 8017c7e:	68bb      	ldr	r3, [r7, #8]
 8017c80:	3308      	adds	r3, #8
 8017c82:	429a      	cmp	r2, r3
 8017c84:	d104      	bne.n	8017c90 <vTaskSwitchContext+0xac>
 8017c86:	68bb      	ldr	r3, [r7, #8]
 8017c88:	685b      	ldr	r3, [r3, #4]
 8017c8a:	685a      	ldr	r2, [r3, #4]
 8017c8c:	68bb      	ldr	r3, [r7, #8]
 8017c8e:	605a      	str	r2, [r3, #4]
 8017c90:	68bb      	ldr	r3, [r7, #8]
 8017c92:	685b      	ldr	r3, [r3, #4]
 8017c94:	68db      	ldr	r3, [r3, #12]
 8017c96:	4a06      	ldr	r2, [pc, #24]	; (8017cb0 <vTaskSwitchContext+0xcc>)
 8017c98:	6013      	str	r3, [r2, #0]
 8017c9a:	4a06      	ldr	r2, [pc, #24]	; (8017cb4 <vTaskSwitchContext+0xd0>)
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	6013      	str	r3, [r2, #0]
}
 8017ca0:	bf00      	nop
 8017ca2:	3710      	adds	r7, #16
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}
 8017ca8:	24002c14 	.word	0x24002c14
 8017cac:	24002c00 	.word	0x24002c00
 8017cb0:	24002718 	.word	0x24002718
 8017cb4:	24002bf4 	.word	0x24002bf4
 8017cb8:	2400271c 	.word	0x2400271c

08017cbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b084      	sub	sp, #16
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
 8017cc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d10a      	bne.n	8017ce2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cd0:	f383 8811 	msr	BASEPRI, r3
 8017cd4:	f3bf 8f6f 	isb	sy
 8017cd8:	f3bf 8f4f 	dsb	sy
 8017cdc:	60fb      	str	r3, [r7, #12]
}
 8017cde:	bf00      	nop
 8017ce0:	e7fe      	b.n	8017ce0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017ce2:	4b07      	ldr	r3, [pc, #28]	; (8017d00 <vTaskPlaceOnEventList+0x44>)
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	3318      	adds	r3, #24
 8017ce8:	4619      	mov	r1, r3
 8017cea:	6878      	ldr	r0, [r7, #4]
 8017cec:	f7fe fe71 	bl	80169d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017cf0:	2101      	movs	r1, #1
 8017cf2:	6838      	ldr	r0, [r7, #0]
 8017cf4:	f000 fb32 	bl	801835c <prvAddCurrentTaskToDelayedList>
}
 8017cf8:	bf00      	nop
 8017cfa:	3710      	adds	r7, #16
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	bd80      	pop	{r7, pc}
 8017d00:	24002718 	.word	0x24002718

08017d04 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b086      	sub	sp, #24
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	60f8      	str	r0, [r7, #12]
 8017d0c:	60b9      	str	r1, [r7, #8]
 8017d0e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d10a      	bne.n	8017d2c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8017d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d1a:	f383 8811 	msr	BASEPRI, r3
 8017d1e:	f3bf 8f6f 	isb	sy
 8017d22:	f3bf 8f4f 	dsb	sy
 8017d26:	617b      	str	r3, [r7, #20]
}
 8017d28:	bf00      	nop
 8017d2a:	e7fe      	b.n	8017d2a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8017d2c:	4b11      	ldr	r3, [pc, #68]	; (8017d74 <vTaskPlaceOnUnorderedEventList+0x70>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d10a      	bne.n	8017d4a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8017d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d38:	f383 8811 	msr	BASEPRI, r3
 8017d3c:	f3bf 8f6f 	isb	sy
 8017d40:	f3bf 8f4f 	dsb	sy
 8017d44:	613b      	str	r3, [r7, #16]
}
 8017d46:	bf00      	nop
 8017d48:	e7fe      	b.n	8017d48 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8017d4a:	4b0b      	ldr	r3, [pc, #44]	; (8017d78 <vTaskPlaceOnUnorderedEventList+0x74>)
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	68ba      	ldr	r2, [r7, #8]
 8017d50:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8017d54:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017d56:	4b08      	ldr	r3, [pc, #32]	; (8017d78 <vTaskPlaceOnUnorderedEventList+0x74>)
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	3318      	adds	r3, #24
 8017d5c:	4619      	mov	r1, r3
 8017d5e:	68f8      	ldr	r0, [r7, #12]
 8017d60:	f7fe fe13 	bl	801698a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017d64:	2101      	movs	r1, #1
 8017d66:	6878      	ldr	r0, [r7, #4]
 8017d68:	f000 faf8 	bl	801835c <prvAddCurrentTaskToDelayedList>
}
 8017d6c:	bf00      	nop
 8017d6e:	3718      	adds	r7, #24
 8017d70:	46bd      	mov	sp, r7
 8017d72:	bd80      	pop	{r7, pc}
 8017d74:	24002c14 	.word	0x24002c14
 8017d78:	24002718 	.word	0x24002718

08017d7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b086      	sub	sp, #24
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	60f8      	str	r0, [r7, #12]
 8017d84:	60b9      	str	r1, [r7, #8]
 8017d86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d10a      	bne.n	8017da4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d92:	f383 8811 	msr	BASEPRI, r3
 8017d96:	f3bf 8f6f 	isb	sy
 8017d9a:	f3bf 8f4f 	dsb	sy
 8017d9e:	617b      	str	r3, [r7, #20]
}
 8017da0:	bf00      	nop
 8017da2:	e7fe      	b.n	8017da2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017da4:	4b0a      	ldr	r3, [pc, #40]	; (8017dd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	3318      	adds	r3, #24
 8017daa:	4619      	mov	r1, r3
 8017dac:	68f8      	ldr	r0, [r7, #12]
 8017dae:	f7fe fdec 	bl	801698a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d002      	beq.n	8017dbe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017dbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017dbe:	6879      	ldr	r1, [r7, #4]
 8017dc0:	68b8      	ldr	r0, [r7, #8]
 8017dc2:	f000 facb 	bl	801835c <prvAddCurrentTaskToDelayedList>
	}
 8017dc6:	bf00      	nop
 8017dc8:	3718      	adds	r7, #24
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	bd80      	pop	{r7, pc}
 8017dce:	bf00      	nop
 8017dd0:	24002718 	.word	0x24002718

08017dd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b086      	sub	sp, #24
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	68db      	ldr	r3, [r3, #12]
 8017de0:	68db      	ldr	r3, [r3, #12]
 8017de2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017de4:	693b      	ldr	r3, [r7, #16]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d10a      	bne.n	8017e00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dee:	f383 8811 	msr	BASEPRI, r3
 8017df2:	f3bf 8f6f 	isb	sy
 8017df6:	f3bf 8f4f 	dsb	sy
 8017dfa:	60fb      	str	r3, [r7, #12]
}
 8017dfc:	bf00      	nop
 8017dfe:	e7fe      	b.n	8017dfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017e00:	693b      	ldr	r3, [r7, #16]
 8017e02:	3318      	adds	r3, #24
 8017e04:	4618      	mov	r0, r3
 8017e06:	f7fe fe1d 	bl	8016a44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017e0a:	4b1e      	ldr	r3, [pc, #120]	; (8017e84 <xTaskRemoveFromEventList+0xb0>)
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d11d      	bne.n	8017e4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017e12:	693b      	ldr	r3, [r7, #16]
 8017e14:	3304      	adds	r3, #4
 8017e16:	4618      	mov	r0, r3
 8017e18:	f7fe fe14 	bl	8016a44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017e1c:	693b      	ldr	r3, [r7, #16]
 8017e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e20:	4b19      	ldr	r3, [pc, #100]	; (8017e88 <xTaskRemoveFromEventList+0xb4>)
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d903      	bls.n	8017e30 <xTaskRemoveFromEventList+0x5c>
 8017e28:	693b      	ldr	r3, [r7, #16]
 8017e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e2c:	4a16      	ldr	r2, [pc, #88]	; (8017e88 <xTaskRemoveFromEventList+0xb4>)
 8017e2e:	6013      	str	r3, [r2, #0]
 8017e30:	693b      	ldr	r3, [r7, #16]
 8017e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e34:	4613      	mov	r3, r2
 8017e36:	009b      	lsls	r3, r3, #2
 8017e38:	4413      	add	r3, r2
 8017e3a:	009b      	lsls	r3, r3, #2
 8017e3c:	4a13      	ldr	r2, [pc, #76]	; (8017e8c <xTaskRemoveFromEventList+0xb8>)
 8017e3e:	441a      	add	r2, r3
 8017e40:	693b      	ldr	r3, [r7, #16]
 8017e42:	3304      	adds	r3, #4
 8017e44:	4619      	mov	r1, r3
 8017e46:	4610      	mov	r0, r2
 8017e48:	f7fe fd9f 	bl	801698a <vListInsertEnd>
 8017e4c:	e005      	b.n	8017e5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017e4e:	693b      	ldr	r3, [r7, #16]
 8017e50:	3318      	adds	r3, #24
 8017e52:	4619      	mov	r1, r3
 8017e54:	480e      	ldr	r0, [pc, #56]	; (8017e90 <xTaskRemoveFromEventList+0xbc>)
 8017e56:	f7fe fd98 	bl	801698a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017e5a:	693b      	ldr	r3, [r7, #16]
 8017e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e5e:	4b0d      	ldr	r3, [pc, #52]	; (8017e94 <xTaskRemoveFromEventList+0xc0>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e64:	429a      	cmp	r2, r3
 8017e66:	d905      	bls.n	8017e74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017e68:	2301      	movs	r3, #1
 8017e6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017e6c:	4b0a      	ldr	r3, [pc, #40]	; (8017e98 <xTaskRemoveFromEventList+0xc4>)
 8017e6e:	2201      	movs	r2, #1
 8017e70:	601a      	str	r2, [r3, #0]
 8017e72:	e001      	b.n	8017e78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017e74:	2300      	movs	r3, #0
 8017e76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017e78:	697b      	ldr	r3, [r7, #20]
}
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	3718      	adds	r7, #24
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	bd80      	pop	{r7, pc}
 8017e82:	bf00      	nop
 8017e84:	24002c14 	.word	0x24002c14
 8017e88:	24002bf4 	.word	0x24002bf4
 8017e8c:	2400271c 	.word	0x2400271c
 8017e90:	24002bac 	.word	0x24002bac
 8017e94:	24002718 	.word	0x24002718
 8017e98:	24002c00 	.word	0x24002c00

08017e9c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b086      	sub	sp, #24
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
 8017ea4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8017ea6:	4b29      	ldr	r3, [pc, #164]	; (8017f4c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d10a      	bne.n	8017ec4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8017eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eb2:	f383 8811 	msr	BASEPRI, r3
 8017eb6:	f3bf 8f6f 	isb	sy
 8017eba:	f3bf 8f4f 	dsb	sy
 8017ebe:	613b      	str	r3, [r7, #16]
}
 8017ec0:	bf00      	nop
 8017ec2:	e7fe      	b.n	8017ec2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8017ec4:	683b      	ldr	r3, [r7, #0]
 8017ec6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	68db      	ldr	r3, [r3, #12]
 8017ed2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8017ed4:	697b      	ldr	r3, [r7, #20]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d10a      	bne.n	8017ef0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8017eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ede:	f383 8811 	msr	BASEPRI, r3
 8017ee2:	f3bf 8f6f 	isb	sy
 8017ee6:	f3bf 8f4f 	dsb	sy
 8017eea:	60fb      	str	r3, [r7, #12]
}
 8017eec:	bf00      	nop
 8017eee:	e7fe      	b.n	8017eee <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8017ef0:	6878      	ldr	r0, [r7, #4]
 8017ef2:	f7fe fda7 	bl	8016a44 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017ef6:	697b      	ldr	r3, [r7, #20]
 8017ef8:	3304      	adds	r3, #4
 8017efa:	4618      	mov	r0, r3
 8017efc:	f7fe fda2 	bl	8016a44 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8017f00:	697b      	ldr	r3, [r7, #20]
 8017f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f04:	4b12      	ldr	r3, [pc, #72]	; (8017f50 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	429a      	cmp	r2, r3
 8017f0a:	d903      	bls.n	8017f14 <vTaskRemoveFromUnorderedEventList+0x78>
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f10:	4a0f      	ldr	r2, [pc, #60]	; (8017f50 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8017f12:	6013      	str	r3, [r2, #0]
 8017f14:	697b      	ldr	r3, [r7, #20]
 8017f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f18:	4613      	mov	r3, r2
 8017f1a:	009b      	lsls	r3, r3, #2
 8017f1c:	4413      	add	r3, r2
 8017f1e:	009b      	lsls	r3, r3, #2
 8017f20:	4a0c      	ldr	r2, [pc, #48]	; (8017f54 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8017f22:	441a      	add	r2, r3
 8017f24:	697b      	ldr	r3, [r7, #20]
 8017f26:	3304      	adds	r3, #4
 8017f28:	4619      	mov	r1, r3
 8017f2a:	4610      	mov	r0, r2
 8017f2c:	f7fe fd2d 	bl	801698a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017f30:	697b      	ldr	r3, [r7, #20]
 8017f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f34:	4b08      	ldr	r3, [pc, #32]	; (8017f58 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	d902      	bls.n	8017f44 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8017f3e:	4b07      	ldr	r3, [pc, #28]	; (8017f5c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8017f40:	2201      	movs	r2, #1
 8017f42:	601a      	str	r2, [r3, #0]
	}
}
 8017f44:	bf00      	nop
 8017f46:	3718      	adds	r7, #24
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	bd80      	pop	{r7, pc}
 8017f4c:	24002c14 	.word	0x24002c14
 8017f50:	24002bf4 	.word	0x24002bf4
 8017f54:	2400271c 	.word	0x2400271c
 8017f58:	24002718 	.word	0x24002718
 8017f5c:	24002c00 	.word	0x24002c00

08017f60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017f60:	b480      	push	{r7}
 8017f62:	b083      	sub	sp, #12
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017f68:	4b06      	ldr	r3, [pc, #24]	; (8017f84 <vTaskInternalSetTimeOutState+0x24>)
 8017f6a:	681a      	ldr	r2, [r3, #0]
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017f70:	4b05      	ldr	r3, [pc, #20]	; (8017f88 <vTaskInternalSetTimeOutState+0x28>)
 8017f72:	681a      	ldr	r2, [r3, #0]
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	605a      	str	r2, [r3, #4]
}
 8017f78:	bf00      	nop
 8017f7a:	370c      	adds	r7, #12
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f82:	4770      	bx	lr
 8017f84:	24002c04 	.word	0x24002c04
 8017f88:	24002bf0 	.word	0x24002bf0

08017f8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b088      	sub	sp, #32
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
 8017f94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d10a      	bne.n	8017fb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fa0:	f383 8811 	msr	BASEPRI, r3
 8017fa4:	f3bf 8f6f 	isb	sy
 8017fa8:	f3bf 8f4f 	dsb	sy
 8017fac:	613b      	str	r3, [r7, #16]
}
 8017fae:	bf00      	nop
 8017fb0:	e7fe      	b.n	8017fb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d10a      	bne.n	8017fce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fbc:	f383 8811 	msr	BASEPRI, r3
 8017fc0:	f3bf 8f6f 	isb	sy
 8017fc4:	f3bf 8f4f 	dsb	sy
 8017fc8:	60fb      	str	r3, [r7, #12]
}
 8017fca:	bf00      	nop
 8017fcc:	e7fe      	b.n	8017fcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017fce:	f000 feb1 	bl	8018d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017fd2:	4b1d      	ldr	r3, [pc, #116]	; (8018048 <xTaskCheckForTimeOut+0xbc>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	685b      	ldr	r3, [r3, #4]
 8017fdc:	69ba      	ldr	r2, [r7, #24]
 8017fde:	1ad3      	subs	r3, r2, r3
 8017fe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017fe2:	683b      	ldr	r3, [r7, #0]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017fea:	d102      	bne.n	8017ff2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017fec:	2300      	movs	r3, #0
 8017fee:	61fb      	str	r3, [r7, #28]
 8017ff0:	e023      	b.n	801803a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	681a      	ldr	r2, [r3, #0]
 8017ff6:	4b15      	ldr	r3, [pc, #84]	; (801804c <xTaskCheckForTimeOut+0xc0>)
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d007      	beq.n	801800e <xTaskCheckForTimeOut+0x82>
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	685b      	ldr	r3, [r3, #4]
 8018002:	69ba      	ldr	r2, [r7, #24]
 8018004:	429a      	cmp	r2, r3
 8018006:	d302      	bcc.n	801800e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018008:	2301      	movs	r3, #1
 801800a:	61fb      	str	r3, [r7, #28]
 801800c:	e015      	b.n	801803a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801800e:	683b      	ldr	r3, [r7, #0]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	697a      	ldr	r2, [r7, #20]
 8018014:	429a      	cmp	r2, r3
 8018016:	d20b      	bcs.n	8018030 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018018:	683b      	ldr	r3, [r7, #0]
 801801a:	681a      	ldr	r2, [r3, #0]
 801801c:	697b      	ldr	r3, [r7, #20]
 801801e:	1ad2      	subs	r2, r2, r3
 8018020:	683b      	ldr	r3, [r7, #0]
 8018022:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018024:	6878      	ldr	r0, [r7, #4]
 8018026:	f7ff ff9b 	bl	8017f60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801802a:	2300      	movs	r3, #0
 801802c:	61fb      	str	r3, [r7, #28]
 801802e:	e004      	b.n	801803a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018030:	683b      	ldr	r3, [r7, #0]
 8018032:	2200      	movs	r2, #0
 8018034:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018036:	2301      	movs	r3, #1
 8018038:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801803a:	f000 feab 	bl	8018d94 <vPortExitCritical>

	return xReturn;
 801803e:	69fb      	ldr	r3, [r7, #28]
}
 8018040:	4618      	mov	r0, r3
 8018042:	3720      	adds	r7, #32
 8018044:	46bd      	mov	sp, r7
 8018046:	bd80      	pop	{r7, pc}
 8018048:	24002bf0 	.word	0x24002bf0
 801804c:	24002c04 	.word	0x24002c04

08018050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018050:	b480      	push	{r7}
 8018052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018054:	4b03      	ldr	r3, [pc, #12]	; (8018064 <vTaskMissedYield+0x14>)
 8018056:	2201      	movs	r2, #1
 8018058:	601a      	str	r2, [r3, #0]
}
 801805a:	bf00      	nop
 801805c:	46bd      	mov	sp, r7
 801805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018062:	4770      	bx	lr
 8018064:	24002c00 	.word	0x24002c00

08018068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b082      	sub	sp, #8
 801806c:	af00      	add	r7, sp, #0
 801806e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018070:	f000 f852 	bl	8018118 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018074:	4b06      	ldr	r3, [pc, #24]	; (8018090 <prvIdleTask+0x28>)
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	2b01      	cmp	r3, #1
 801807a:	d9f9      	bls.n	8018070 <prvIdleTask+0x8>
			{
				taskYIELD();
 801807c:	4b05      	ldr	r3, [pc, #20]	; (8018094 <prvIdleTask+0x2c>)
 801807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018082:	601a      	str	r2, [r3, #0]
 8018084:	f3bf 8f4f 	dsb	sy
 8018088:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801808c:	e7f0      	b.n	8018070 <prvIdleTask+0x8>
 801808e:	bf00      	nop
 8018090:	2400271c 	.word	0x2400271c
 8018094:	e000ed04 	.word	0xe000ed04

08018098 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b082      	sub	sp, #8
 801809c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801809e:	2300      	movs	r3, #0
 80180a0:	607b      	str	r3, [r7, #4]
 80180a2:	e00c      	b.n	80180be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80180a4:	687a      	ldr	r2, [r7, #4]
 80180a6:	4613      	mov	r3, r2
 80180a8:	009b      	lsls	r3, r3, #2
 80180aa:	4413      	add	r3, r2
 80180ac:	009b      	lsls	r3, r3, #2
 80180ae:	4a12      	ldr	r2, [pc, #72]	; (80180f8 <prvInitialiseTaskLists+0x60>)
 80180b0:	4413      	add	r3, r2
 80180b2:	4618      	mov	r0, r3
 80180b4:	f7fe fc3c 	bl	8016930 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	3301      	adds	r3, #1
 80180bc:	607b      	str	r3, [r7, #4]
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	2b37      	cmp	r3, #55	; 0x37
 80180c2:	d9ef      	bls.n	80180a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80180c4:	480d      	ldr	r0, [pc, #52]	; (80180fc <prvInitialiseTaskLists+0x64>)
 80180c6:	f7fe fc33 	bl	8016930 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80180ca:	480d      	ldr	r0, [pc, #52]	; (8018100 <prvInitialiseTaskLists+0x68>)
 80180cc:	f7fe fc30 	bl	8016930 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80180d0:	480c      	ldr	r0, [pc, #48]	; (8018104 <prvInitialiseTaskLists+0x6c>)
 80180d2:	f7fe fc2d 	bl	8016930 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80180d6:	480c      	ldr	r0, [pc, #48]	; (8018108 <prvInitialiseTaskLists+0x70>)
 80180d8:	f7fe fc2a 	bl	8016930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80180dc:	480b      	ldr	r0, [pc, #44]	; (801810c <prvInitialiseTaskLists+0x74>)
 80180de:	f7fe fc27 	bl	8016930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80180e2:	4b0b      	ldr	r3, [pc, #44]	; (8018110 <prvInitialiseTaskLists+0x78>)
 80180e4:	4a05      	ldr	r2, [pc, #20]	; (80180fc <prvInitialiseTaskLists+0x64>)
 80180e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80180e8:	4b0a      	ldr	r3, [pc, #40]	; (8018114 <prvInitialiseTaskLists+0x7c>)
 80180ea:	4a05      	ldr	r2, [pc, #20]	; (8018100 <prvInitialiseTaskLists+0x68>)
 80180ec:	601a      	str	r2, [r3, #0]
}
 80180ee:	bf00      	nop
 80180f0:	3708      	adds	r7, #8
 80180f2:	46bd      	mov	sp, r7
 80180f4:	bd80      	pop	{r7, pc}
 80180f6:	bf00      	nop
 80180f8:	2400271c 	.word	0x2400271c
 80180fc:	24002b7c 	.word	0x24002b7c
 8018100:	24002b90 	.word	0x24002b90
 8018104:	24002bac 	.word	0x24002bac
 8018108:	24002bc0 	.word	0x24002bc0
 801810c:	24002bd8 	.word	0x24002bd8
 8018110:	24002ba4 	.word	0x24002ba4
 8018114:	24002ba8 	.word	0x24002ba8

08018118 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b082      	sub	sp, #8
 801811c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801811e:	e019      	b.n	8018154 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018120:	f000 fe08 	bl	8018d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018124:	4b10      	ldr	r3, [pc, #64]	; (8018168 <prvCheckTasksWaitingTermination+0x50>)
 8018126:	68db      	ldr	r3, [r3, #12]
 8018128:	68db      	ldr	r3, [r3, #12]
 801812a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	3304      	adds	r3, #4
 8018130:	4618      	mov	r0, r3
 8018132:	f7fe fc87 	bl	8016a44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018136:	4b0d      	ldr	r3, [pc, #52]	; (801816c <prvCheckTasksWaitingTermination+0x54>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	3b01      	subs	r3, #1
 801813c:	4a0b      	ldr	r2, [pc, #44]	; (801816c <prvCheckTasksWaitingTermination+0x54>)
 801813e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018140:	4b0b      	ldr	r3, [pc, #44]	; (8018170 <prvCheckTasksWaitingTermination+0x58>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	3b01      	subs	r3, #1
 8018146:	4a0a      	ldr	r2, [pc, #40]	; (8018170 <prvCheckTasksWaitingTermination+0x58>)
 8018148:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801814a:	f000 fe23 	bl	8018d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801814e:	6878      	ldr	r0, [r7, #4]
 8018150:	f000 f810 	bl	8018174 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018154:	4b06      	ldr	r3, [pc, #24]	; (8018170 <prvCheckTasksWaitingTermination+0x58>)
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d1e1      	bne.n	8018120 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801815c:	bf00      	nop
 801815e:	bf00      	nop
 8018160:	3708      	adds	r7, #8
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}
 8018166:	bf00      	nop
 8018168:	24002bc0 	.word	0x24002bc0
 801816c:	24002bec 	.word	0x24002bec
 8018170:	24002bd4 	.word	0x24002bd4

08018174 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018174:	b580      	push	{r7, lr}
 8018176:	b084      	sub	sp, #16
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018182:	2b00      	cmp	r3, #0
 8018184:	d108      	bne.n	8018198 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801818a:	4618      	mov	r0, r3
 801818c:	f000 ffc0 	bl	8019110 <vPortFree>
				vPortFree( pxTCB );
 8018190:	6878      	ldr	r0, [r7, #4]
 8018192:	f000 ffbd 	bl	8019110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018196:	e018      	b.n	80181ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801819e:	2b01      	cmp	r3, #1
 80181a0:	d103      	bne.n	80181aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80181a2:	6878      	ldr	r0, [r7, #4]
 80181a4:	f000 ffb4 	bl	8019110 <vPortFree>
	}
 80181a8:	e00f      	b.n	80181ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80181b0:	2b02      	cmp	r3, #2
 80181b2:	d00a      	beq.n	80181ca <prvDeleteTCB+0x56>
	__asm volatile
 80181b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181b8:	f383 8811 	msr	BASEPRI, r3
 80181bc:	f3bf 8f6f 	isb	sy
 80181c0:	f3bf 8f4f 	dsb	sy
 80181c4:	60fb      	str	r3, [r7, #12]
}
 80181c6:	bf00      	nop
 80181c8:	e7fe      	b.n	80181c8 <prvDeleteTCB+0x54>
	}
 80181ca:	bf00      	nop
 80181cc:	3710      	adds	r7, #16
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}
	...

080181d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80181d4:	b480      	push	{r7}
 80181d6:	b083      	sub	sp, #12
 80181d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80181da:	4b0c      	ldr	r3, [pc, #48]	; (801820c <prvResetNextTaskUnblockTime+0x38>)
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d104      	bne.n	80181ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80181e4:	4b0a      	ldr	r3, [pc, #40]	; (8018210 <prvResetNextTaskUnblockTime+0x3c>)
 80181e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80181ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80181ec:	e008      	b.n	8018200 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80181ee:	4b07      	ldr	r3, [pc, #28]	; (801820c <prvResetNextTaskUnblockTime+0x38>)
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	68db      	ldr	r3, [r3, #12]
 80181f4:	68db      	ldr	r3, [r3, #12]
 80181f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	685b      	ldr	r3, [r3, #4]
 80181fc:	4a04      	ldr	r2, [pc, #16]	; (8018210 <prvResetNextTaskUnblockTime+0x3c>)
 80181fe:	6013      	str	r3, [r2, #0]
}
 8018200:	bf00      	nop
 8018202:	370c      	adds	r7, #12
 8018204:	46bd      	mov	sp, r7
 8018206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820a:	4770      	bx	lr
 801820c:	24002ba4 	.word	0x24002ba4
 8018210:	24002c0c 	.word	0x24002c0c

08018214 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018214:	b480      	push	{r7}
 8018216:	b083      	sub	sp, #12
 8018218:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801821a:	4b0b      	ldr	r3, [pc, #44]	; (8018248 <xTaskGetSchedulerState+0x34>)
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	2b00      	cmp	r3, #0
 8018220:	d102      	bne.n	8018228 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018222:	2301      	movs	r3, #1
 8018224:	607b      	str	r3, [r7, #4]
 8018226:	e008      	b.n	801823a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018228:	4b08      	ldr	r3, [pc, #32]	; (801824c <xTaskGetSchedulerState+0x38>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d102      	bne.n	8018236 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018230:	2302      	movs	r3, #2
 8018232:	607b      	str	r3, [r7, #4]
 8018234:	e001      	b.n	801823a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018236:	2300      	movs	r3, #0
 8018238:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801823a:	687b      	ldr	r3, [r7, #4]
	}
 801823c:	4618      	mov	r0, r3
 801823e:	370c      	adds	r7, #12
 8018240:	46bd      	mov	sp, r7
 8018242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018246:	4770      	bx	lr
 8018248:	24002bf8 	.word	0x24002bf8
 801824c:	24002c14 	.word	0x24002c14

08018250 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018250:	b580      	push	{r7, lr}
 8018252:	b086      	sub	sp, #24
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801825c:	2300      	movs	r3, #0
 801825e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d056      	beq.n	8018314 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018266:	4b2e      	ldr	r3, [pc, #184]	; (8018320 <xTaskPriorityDisinherit+0xd0>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	693a      	ldr	r2, [r7, #16]
 801826c:	429a      	cmp	r2, r3
 801826e:	d00a      	beq.n	8018286 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018274:	f383 8811 	msr	BASEPRI, r3
 8018278:	f3bf 8f6f 	isb	sy
 801827c:	f3bf 8f4f 	dsb	sy
 8018280:	60fb      	str	r3, [r7, #12]
}
 8018282:	bf00      	nop
 8018284:	e7fe      	b.n	8018284 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018286:	693b      	ldr	r3, [r7, #16]
 8018288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801828a:	2b00      	cmp	r3, #0
 801828c:	d10a      	bne.n	80182a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018292:	f383 8811 	msr	BASEPRI, r3
 8018296:	f3bf 8f6f 	isb	sy
 801829a:	f3bf 8f4f 	dsb	sy
 801829e:	60bb      	str	r3, [r7, #8]
}
 80182a0:	bf00      	nop
 80182a2:	e7fe      	b.n	80182a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80182a4:	693b      	ldr	r3, [r7, #16]
 80182a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80182a8:	1e5a      	subs	r2, r3, #1
 80182aa:	693b      	ldr	r3, [r7, #16]
 80182ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80182ae:	693b      	ldr	r3, [r7, #16]
 80182b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182b2:	693b      	ldr	r3, [r7, #16]
 80182b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182b6:	429a      	cmp	r2, r3
 80182b8:	d02c      	beq.n	8018314 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80182ba:	693b      	ldr	r3, [r7, #16]
 80182bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d128      	bne.n	8018314 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80182c2:	693b      	ldr	r3, [r7, #16]
 80182c4:	3304      	adds	r3, #4
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7fe fbbc 	bl	8016a44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80182cc:	693b      	ldr	r3, [r7, #16]
 80182ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80182d0:	693b      	ldr	r3, [r7, #16]
 80182d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80182d4:	693b      	ldr	r3, [r7, #16]
 80182d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80182dc:	693b      	ldr	r3, [r7, #16]
 80182de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80182e0:	693b      	ldr	r3, [r7, #16]
 80182e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182e4:	4b0f      	ldr	r3, [pc, #60]	; (8018324 <xTaskPriorityDisinherit+0xd4>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	429a      	cmp	r2, r3
 80182ea:	d903      	bls.n	80182f4 <xTaskPriorityDisinherit+0xa4>
 80182ec:	693b      	ldr	r3, [r7, #16]
 80182ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182f0:	4a0c      	ldr	r2, [pc, #48]	; (8018324 <xTaskPriorityDisinherit+0xd4>)
 80182f2:	6013      	str	r3, [r2, #0]
 80182f4:	693b      	ldr	r3, [r7, #16]
 80182f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182f8:	4613      	mov	r3, r2
 80182fa:	009b      	lsls	r3, r3, #2
 80182fc:	4413      	add	r3, r2
 80182fe:	009b      	lsls	r3, r3, #2
 8018300:	4a09      	ldr	r2, [pc, #36]	; (8018328 <xTaskPriorityDisinherit+0xd8>)
 8018302:	441a      	add	r2, r3
 8018304:	693b      	ldr	r3, [r7, #16]
 8018306:	3304      	adds	r3, #4
 8018308:	4619      	mov	r1, r3
 801830a:	4610      	mov	r0, r2
 801830c:	f7fe fb3d 	bl	801698a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018310:	2301      	movs	r3, #1
 8018312:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018314:	697b      	ldr	r3, [r7, #20]
	}
 8018316:	4618      	mov	r0, r3
 8018318:	3718      	adds	r7, #24
 801831a:	46bd      	mov	sp, r7
 801831c:	bd80      	pop	{r7, pc}
 801831e:	bf00      	nop
 8018320:	24002718 	.word	0x24002718
 8018324:	24002bf4 	.word	0x24002bf4
 8018328:	2400271c 	.word	0x2400271c

0801832c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801832c:	b480      	push	{r7}
 801832e:	b083      	sub	sp, #12
 8018330:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018332:	4b09      	ldr	r3, [pc, #36]	; (8018358 <uxTaskResetEventItemValue+0x2c>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	699b      	ldr	r3, [r3, #24]
 8018338:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801833a:	4b07      	ldr	r3, [pc, #28]	; (8018358 <uxTaskResetEventItemValue+0x2c>)
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018340:	4b05      	ldr	r3, [pc, #20]	; (8018358 <uxTaskResetEventItemValue+0x2c>)
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018348:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801834a:	687b      	ldr	r3, [r7, #4]
}
 801834c:	4618      	mov	r0, r3
 801834e:	370c      	adds	r7, #12
 8018350:	46bd      	mov	sp, r7
 8018352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018356:	4770      	bx	lr
 8018358:	24002718 	.word	0x24002718

0801835c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b084      	sub	sp, #16
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
 8018364:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018366:	4b21      	ldr	r3, [pc, #132]	; (80183ec <prvAddCurrentTaskToDelayedList+0x90>)
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801836c:	4b20      	ldr	r3, [pc, #128]	; (80183f0 <prvAddCurrentTaskToDelayedList+0x94>)
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	3304      	adds	r3, #4
 8018372:	4618      	mov	r0, r3
 8018374:	f7fe fb66 	bl	8016a44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801837e:	d10a      	bne.n	8018396 <prvAddCurrentTaskToDelayedList+0x3a>
 8018380:	683b      	ldr	r3, [r7, #0]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d007      	beq.n	8018396 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018386:	4b1a      	ldr	r3, [pc, #104]	; (80183f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	3304      	adds	r3, #4
 801838c:	4619      	mov	r1, r3
 801838e:	4819      	ldr	r0, [pc, #100]	; (80183f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8018390:	f7fe fafb 	bl	801698a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018394:	e026      	b.n	80183e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018396:	68fa      	ldr	r2, [r7, #12]
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	4413      	add	r3, r2
 801839c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801839e:	4b14      	ldr	r3, [pc, #80]	; (80183f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	68ba      	ldr	r2, [r7, #8]
 80183a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80183a6:	68ba      	ldr	r2, [r7, #8]
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	429a      	cmp	r2, r3
 80183ac:	d209      	bcs.n	80183c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80183ae:	4b12      	ldr	r3, [pc, #72]	; (80183f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80183b0:	681a      	ldr	r2, [r3, #0]
 80183b2:	4b0f      	ldr	r3, [pc, #60]	; (80183f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	3304      	adds	r3, #4
 80183b8:	4619      	mov	r1, r3
 80183ba:	4610      	mov	r0, r2
 80183bc:	f7fe fb09 	bl	80169d2 <vListInsert>
}
 80183c0:	e010      	b.n	80183e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80183c2:	4b0e      	ldr	r3, [pc, #56]	; (80183fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80183c4:	681a      	ldr	r2, [r3, #0]
 80183c6:	4b0a      	ldr	r3, [pc, #40]	; (80183f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	3304      	adds	r3, #4
 80183cc:	4619      	mov	r1, r3
 80183ce:	4610      	mov	r0, r2
 80183d0:	f7fe faff 	bl	80169d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80183d4:	4b0a      	ldr	r3, [pc, #40]	; (8018400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	68ba      	ldr	r2, [r7, #8]
 80183da:	429a      	cmp	r2, r3
 80183dc:	d202      	bcs.n	80183e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80183de:	4a08      	ldr	r2, [pc, #32]	; (8018400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80183e0:	68bb      	ldr	r3, [r7, #8]
 80183e2:	6013      	str	r3, [r2, #0]
}
 80183e4:	bf00      	nop
 80183e6:	3710      	adds	r7, #16
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}
 80183ec:	24002bf0 	.word	0x24002bf0
 80183f0:	24002718 	.word	0x24002718
 80183f4:	24002bd8 	.word	0x24002bd8
 80183f8:	24002ba8 	.word	0x24002ba8
 80183fc:	24002ba4 	.word	0x24002ba4
 8018400:	24002c0c 	.word	0x24002c0c

08018404 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018404:	b580      	push	{r7, lr}
 8018406:	b08a      	sub	sp, #40	; 0x28
 8018408:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801840a:	2300      	movs	r3, #0
 801840c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801840e:	f000 fb07 	bl	8018a20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018412:	4b1c      	ldr	r3, [pc, #112]	; (8018484 <xTimerCreateTimerTask+0x80>)
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d021      	beq.n	801845e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801841a:	2300      	movs	r3, #0
 801841c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801841e:	2300      	movs	r3, #0
 8018420:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018422:	1d3a      	adds	r2, r7, #4
 8018424:	f107 0108 	add.w	r1, r7, #8
 8018428:	f107 030c 	add.w	r3, r7, #12
 801842c:	4618      	mov	r0, r3
 801842e:	f7fd fff9 	bl	8016424 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018432:	6879      	ldr	r1, [r7, #4]
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	68fa      	ldr	r2, [r7, #12]
 8018438:	9202      	str	r2, [sp, #8]
 801843a:	9301      	str	r3, [sp, #4]
 801843c:	2302      	movs	r3, #2
 801843e:	9300      	str	r3, [sp, #0]
 8018440:	2300      	movs	r3, #0
 8018442:	460a      	mov	r2, r1
 8018444:	4910      	ldr	r1, [pc, #64]	; (8018488 <xTimerCreateTimerTask+0x84>)
 8018446:	4811      	ldr	r0, [pc, #68]	; (801848c <xTimerCreateTimerTask+0x88>)
 8018448:	f7ff f812 	bl	8017470 <xTaskCreateStatic>
 801844c:	4603      	mov	r3, r0
 801844e:	4a10      	ldr	r2, [pc, #64]	; (8018490 <xTimerCreateTimerTask+0x8c>)
 8018450:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018452:	4b0f      	ldr	r3, [pc, #60]	; (8018490 <xTimerCreateTimerTask+0x8c>)
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d001      	beq.n	801845e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801845a:	2301      	movs	r3, #1
 801845c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801845e:	697b      	ldr	r3, [r7, #20]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d10a      	bne.n	801847a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018468:	f383 8811 	msr	BASEPRI, r3
 801846c:	f3bf 8f6f 	isb	sy
 8018470:	f3bf 8f4f 	dsb	sy
 8018474:	613b      	str	r3, [r7, #16]
}
 8018476:	bf00      	nop
 8018478:	e7fe      	b.n	8018478 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801847a:	697b      	ldr	r3, [r7, #20]
}
 801847c:	4618      	mov	r0, r3
 801847e:	3718      	adds	r7, #24
 8018480:	46bd      	mov	sp, r7
 8018482:	bd80      	pop	{r7, pc}
 8018484:	24002c48 	.word	0x24002c48
 8018488:	0801a038 	.word	0x0801a038
 801848c:	080185c9 	.word	0x080185c9
 8018490:	24002c4c 	.word	0x24002c4c

08018494 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b08a      	sub	sp, #40	; 0x28
 8018498:	af00      	add	r7, sp, #0
 801849a:	60f8      	str	r0, [r7, #12]
 801849c:	60b9      	str	r1, [r7, #8]
 801849e:	607a      	str	r2, [r7, #4]
 80184a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80184a2:	2300      	movs	r3, #0
 80184a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d10a      	bne.n	80184c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80184ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184b0:	f383 8811 	msr	BASEPRI, r3
 80184b4:	f3bf 8f6f 	isb	sy
 80184b8:	f3bf 8f4f 	dsb	sy
 80184bc:	623b      	str	r3, [r7, #32]
}
 80184be:	bf00      	nop
 80184c0:	e7fe      	b.n	80184c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80184c2:	4b1a      	ldr	r3, [pc, #104]	; (801852c <xTimerGenericCommand+0x98>)
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d02a      	beq.n	8018520 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80184d6:	68bb      	ldr	r3, [r7, #8]
 80184d8:	2b05      	cmp	r3, #5
 80184da:	dc18      	bgt.n	801850e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80184dc:	f7ff fe9a 	bl	8018214 <xTaskGetSchedulerState>
 80184e0:	4603      	mov	r3, r0
 80184e2:	2b02      	cmp	r3, #2
 80184e4:	d109      	bne.n	80184fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80184e6:	4b11      	ldr	r3, [pc, #68]	; (801852c <xTimerGenericCommand+0x98>)
 80184e8:	6818      	ldr	r0, [r3, #0]
 80184ea:	f107 0110 	add.w	r1, r7, #16
 80184ee:	2300      	movs	r3, #0
 80184f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184f2:	f7fe fbd5 	bl	8016ca0 <xQueueGenericSend>
 80184f6:	6278      	str	r0, [r7, #36]	; 0x24
 80184f8:	e012      	b.n	8018520 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80184fa:	4b0c      	ldr	r3, [pc, #48]	; (801852c <xTimerGenericCommand+0x98>)
 80184fc:	6818      	ldr	r0, [r3, #0]
 80184fe:	f107 0110 	add.w	r1, r7, #16
 8018502:	2300      	movs	r3, #0
 8018504:	2200      	movs	r2, #0
 8018506:	f7fe fbcb 	bl	8016ca0 <xQueueGenericSend>
 801850a:	6278      	str	r0, [r7, #36]	; 0x24
 801850c:	e008      	b.n	8018520 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801850e:	4b07      	ldr	r3, [pc, #28]	; (801852c <xTimerGenericCommand+0x98>)
 8018510:	6818      	ldr	r0, [r3, #0]
 8018512:	f107 0110 	add.w	r1, r7, #16
 8018516:	2300      	movs	r3, #0
 8018518:	683a      	ldr	r2, [r7, #0]
 801851a:	f7fe fcbf 	bl	8016e9c <xQueueGenericSendFromISR>
 801851e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018522:	4618      	mov	r0, r3
 8018524:	3728      	adds	r7, #40	; 0x28
 8018526:	46bd      	mov	sp, r7
 8018528:	bd80      	pop	{r7, pc}
 801852a:	bf00      	nop
 801852c:	24002c48 	.word	0x24002c48

08018530 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018530:	b580      	push	{r7, lr}
 8018532:	b088      	sub	sp, #32
 8018534:	af02      	add	r7, sp, #8
 8018536:	6078      	str	r0, [r7, #4]
 8018538:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801853a:	4b22      	ldr	r3, [pc, #136]	; (80185c4 <prvProcessExpiredTimer+0x94>)
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	68db      	ldr	r3, [r3, #12]
 8018540:	68db      	ldr	r3, [r3, #12]
 8018542:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018544:	697b      	ldr	r3, [r7, #20]
 8018546:	3304      	adds	r3, #4
 8018548:	4618      	mov	r0, r3
 801854a:	f7fe fa7b 	bl	8016a44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801854e:	697b      	ldr	r3, [r7, #20]
 8018550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018554:	f003 0304 	and.w	r3, r3, #4
 8018558:	2b00      	cmp	r3, #0
 801855a:	d022      	beq.n	80185a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801855c:	697b      	ldr	r3, [r7, #20]
 801855e:	699a      	ldr	r2, [r3, #24]
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	18d1      	adds	r1, r2, r3
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	683a      	ldr	r2, [r7, #0]
 8018568:	6978      	ldr	r0, [r7, #20]
 801856a:	f000 f8d1 	bl	8018710 <prvInsertTimerInActiveList>
 801856e:	4603      	mov	r3, r0
 8018570:	2b00      	cmp	r3, #0
 8018572:	d01f      	beq.n	80185b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018574:	2300      	movs	r3, #0
 8018576:	9300      	str	r3, [sp, #0]
 8018578:	2300      	movs	r3, #0
 801857a:	687a      	ldr	r2, [r7, #4]
 801857c:	2100      	movs	r1, #0
 801857e:	6978      	ldr	r0, [r7, #20]
 8018580:	f7ff ff88 	bl	8018494 <xTimerGenericCommand>
 8018584:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018586:	693b      	ldr	r3, [r7, #16]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d113      	bne.n	80185b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018590:	f383 8811 	msr	BASEPRI, r3
 8018594:	f3bf 8f6f 	isb	sy
 8018598:	f3bf 8f4f 	dsb	sy
 801859c:	60fb      	str	r3, [r7, #12]
}
 801859e:	bf00      	nop
 80185a0:	e7fe      	b.n	80185a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80185a2:	697b      	ldr	r3, [r7, #20]
 80185a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80185a8:	f023 0301 	bic.w	r3, r3, #1
 80185ac:	b2da      	uxtb	r2, r3
 80185ae:	697b      	ldr	r3, [r7, #20]
 80185b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80185b4:	697b      	ldr	r3, [r7, #20]
 80185b6:	6a1b      	ldr	r3, [r3, #32]
 80185b8:	6978      	ldr	r0, [r7, #20]
 80185ba:	4798      	blx	r3
}
 80185bc:	bf00      	nop
 80185be:	3718      	adds	r7, #24
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bd80      	pop	{r7, pc}
 80185c4:	24002c40 	.word	0x24002c40

080185c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b084      	sub	sp, #16
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80185d0:	f107 0308 	add.w	r3, r7, #8
 80185d4:	4618      	mov	r0, r3
 80185d6:	f000 f857 	bl	8018688 <prvGetNextExpireTime>
 80185da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80185dc:	68bb      	ldr	r3, [r7, #8]
 80185de:	4619      	mov	r1, r3
 80185e0:	68f8      	ldr	r0, [r7, #12]
 80185e2:	f000 f803 	bl	80185ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80185e6:	f000 f8d5 	bl	8018794 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80185ea:	e7f1      	b.n	80185d0 <prvTimerTask+0x8>

080185ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b084      	sub	sp, #16
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
 80185f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80185f6:	f7ff f977 	bl	80178e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80185fa:	f107 0308 	add.w	r3, r7, #8
 80185fe:	4618      	mov	r0, r3
 8018600:	f000 f866 	bl	80186d0 <prvSampleTimeNow>
 8018604:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018606:	68bb      	ldr	r3, [r7, #8]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d130      	bne.n	801866e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801860c:	683b      	ldr	r3, [r7, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d10a      	bne.n	8018628 <prvProcessTimerOrBlockTask+0x3c>
 8018612:	687a      	ldr	r2, [r7, #4]
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	429a      	cmp	r2, r3
 8018618:	d806      	bhi.n	8018628 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801861a:	f7ff f973 	bl	8017904 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801861e:	68f9      	ldr	r1, [r7, #12]
 8018620:	6878      	ldr	r0, [r7, #4]
 8018622:	f7ff ff85 	bl	8018530 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018626:	e024      	b.n	8018672 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018628:	683b      	ldr	r3, [r7, #0]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d008      	beq.n	8018640 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801862e:	4b13      	ldr	r3, [pc, #76]	; (801867c <prvProcessTimerOrBlockTask+0x90>)
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d101      	bne.n	801863c <prvProcessTimerOrBlockTask+0x50>
 8018638:	2301      	movs	r3, #1
 801863a:	e000      	b.n	801863e <prvProcessTimerOrBlockTask+0x52>
 801863c:	2300      	movs	r3, #0
 801863e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018640:	4b0f      	ldr	r3, [pc, #60]	; (8018680 <prvProcessTimerOrBlockTask+0x94>)
 8018642:	6818      	ldr	r0, [r3, #0]
 8018644:	687a      	ldr	r2, [r7, #4]
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	1ad3      	subs	r3, r2, r3
 801864a:	683a      	ldr	r2, [r7, #0]
 801864c:	4619      	mov	r1, r3
 801864e:	f7fe fedb 	bl	8017408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018652:	f7ff f957 	bl	8017904 <xTaskResumeAll>
 8018656:	4603      	mov	r3, r0
 8018658:	2b00      	cmp	r3, #0
 801865a:	d10a      	bne.n	8018672 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801865c:	4b09      	ldr	r3, [pc, #36]	; (8018684 <prvProcessTimerOrBlockTask+0x98>)
 801865e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018662:	601a      	str	r2, [r3, #0]
 8018664:	f3bf 8f4f 	dsb	sy
 8018668:	f3bf 8f6f 	isb	sy
}
 801866c:	e001      	b.n	8018672 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801866e:	f7ff f949 	bl	8017904 <xTaskResumeAll>
}
 8018672:	bf00      	nop
 8018674:	3710      	adds	r7, #16
 8018676:	46bd      	mov	sp, r7
 8018678:	bd80      	pop	{r7, pc}
 801867a:	bf00      	nop
 801867c:	24002c44 	.word	0x24002c44
 8018680:	24002c48 	.word	0x24002c48
 8018684:	e000ed04 	.word	0xe000ed04

08018688 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018688:	b480      	push	{r7}
 801868a:	b085      	sub	sp, #20
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018690:	4b0e      	ldr	r3, [pc, #56]	; (80186cc <prvGetNextExpireTime+0x44>)
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d101      	bne.n	801869e <prvGetNextExpireTime+0x16>
 801869a:	2201      	movs	r2, #1
 801869c:	e000      	b.n	80186a0 <prvGetNextExpireTime+0x18>
 801869e:	2200      	movs	r2, #0
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d105      	bne.n	80186b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80186ac:	4b07      	ldr	r3, [pc, #28]	; (80186cc <prvGetNextExpireTime+0x44>)
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	68db      	ldr	r3, [r3, #12]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	60fb      	str	r3, [r7, #12]
 80186b6:	e001      	b.n	80186bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80186b8:	2300      	movs	r3, #0
 80186ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80186bc:	68fb      	ldr	r3, [r7, #12]
}
 80186be:	4618      	mov	r0, r3
 80186c0:	3714      	adds	r7, #20
 80186c2:	46bd      	mov	sp, r7
 80186c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c8:	4770      	bx	lr
 80186ca:	bf00      	nop
 80186cc:	24002c40 	.word	0x24002c40

080186d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b084      	sub	sp, #16
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80186d8:	f7ff f9b2 	bl	8017a40 <xTaskGetTickCount>
 80186dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80186de:	4b0b      	ldr	r3, [pc, #44]	; (801870c <prvSampleTimeNow+0x3c>)
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	68fa      	ldr	r2, [r7, #12]
 80186e4:	429a      	cmp	r2, r3
 80186e6:	d205      	bcs.n	80186f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80186e8:	f000 f936 	bl	8018958 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	2201      	movs	r2, #1
 80186f0:	601a      	str	r2, [r3, #0]
 80186f2:	e002      	b.n	80186fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	2200      	movs	r2, #0
 80186f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80186fa:	4a04      	ldr	r2, [pc, #16]	; (801870c <prvSampleTimeNow+0x3c>)
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018700:	68fb      	ldr	r3, [r7, #12]
}
 8018702:	4618      	mov	r0, r3
 8018704:	3710      	adds	r7, #16
 8018706:	46bd      	mov	sp, r7
 8018708:	bd80      	pop	{r7, pc}
 801870a:	bf00      	nop
 801870c:	24002c50 	.word	0x24002c50

08018710 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018710:	b580      	push	{r7, lr}
 8018712:	b086      	sub	sp, #24
 8018714:	af00      	add	r7, sp, #0
 8018716:	60f8      	str	r0, [r7, #12]
 8018718:	60b9      	str	r1, [r7, #8]
 801871a:	607a      	str	r2, [r7, #4]
 801871c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801871e:	2300      	movs	r3, #0
 8018720:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	68ba      	ldr	r2, [r7, #8]
 8018726:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	68fa      	ldr	r2, [r7, #12]
 801872c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801872e:	68ba      	ldr	r2, [r7, #8]
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	429a      	cmp	r2, r3
 8018734:	d812      	bhi.n	801875c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018736:	687a      	ldr	r2, [r7, #4]
 8018738:	683b      	ldr	r3, [r7, #0]
 801873a:	1ad2      	subs	r2, r2, r3
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	699b      	ldr	r3, [r3, #24]
 8018740:	429a      	cmp	r2, r3
 8018742:	d302      	bcc.n	801874a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018744:	2301      	movs	r3, #1
 8018746:	617b      	str	r3, [r7, #20]
 8018748:	e01b      	b.n	8018782 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801874a:	4b10      	ldr	r3, [pc, #64]	; (801878c <prvInsertTimerInActiveList+0x7c>)
 801874c:	681a      	ldr	r2, [r3, #0]
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	3304      	adds	r3, #4
 8018752:	4619      	mov	r1, r3
 8018754:	4610      	mov	r0, r2
 8018756:	f7fe f93c 	bl	80169d2 <vListInsert>
 801875a:	e012      	b.n	8018782 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801875c:	687a      	ldr	r2, [r7, #4]
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	429a      	cmp	r2, r3
 8018762:	d206      	bcs.n	8018772 <prvInsertTimerInActiveList+0x62>
 8018764:	68ba      	ldr	r2, [r7, #8]
 8018766:	683b      	ldr	r3, [r7, #0]
 8018768:	429a      	cmp	r2, r3
 801876a:	d302      	bcc.n	8018772 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801876c:	2301      	movs	r3, #1
 801876e:	617b      	str	r3, [r7, #20]
 8018770:	e007      	b.n	8018782 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018772:	4b07      	ldr	r3, [pc, #28]	; (8018790 <prvInsertTimerInActiveList+0x80>)
 8018774:	681a      	ldr	r2, [r3, #0]
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	3304      	adds	r3, #4
 801877a:	4619      	mov	r1, r3
 801877c:	4610      	mov	r0, r2
 801877e:	f7fe f928 	bl	80169d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018782:	697b      	ldr	r3, [r7, #20]
}
 8018784:	4618      	mov	r0, r3
 8018786:	3718      	adds	r7, #24
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}
 801878c:	24002c44 	.word	0x24002c44
 8018790:	24002c40 	.word	0x24002c40

08018794 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b08e      	sub	sp, #56	; 0x38
 8018798:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801879a:	e0ca      	b.n	8018932 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	da18      	bge.n	80187d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80187a2:	1d3b      	adds	r3, r7, #4
 80187a4:	3304      	adds	r3, #4
 80187a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80187a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d10a      	bne.n	80187c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80187ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187b2:	f383 8811 	msr	BASEPRI, r3
 80187b6:	f3bf 8f6f 	isb	sy
 80187ba:	f3bf 8f4f 	dsb	sy
 80187be:	61fb      	str	r3, [r7, #28]
}
 80187c0:	bf00      	nop
 80187c2:	e7fe      	b.n	80187c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80187c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80187ca:	6850      	ldr	r0, [r2, #4]
 80187cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80187ce:	6892      	ldr	r2, [r2, #8]
 80187d0:	4611      	mov	r1, r2
 80187d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	f2c0 80aa 	blt.w	8018930 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80187e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e2:	695b      	ldr	r3, [r3, #20]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d004      	beq.n	80187f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80187e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ea:	3304      	adds	r3, #4
 80187ec:	4618      	mov	r0, r3
 80187ee:	f7fe f929 	bl	8016a44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80187f2:	463b      	mov	r3, r7
 80187f4:	4618      	mov	r0, r3
 80187f6:	f7ff ff6b 	bl	80186d0 <prvSampleTimeNow>
 80187fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	2b09      	cmp	r3, #9
 8018800:	f200 8097 	bhi.w	8018932 <prvProcessReceivedCommands+0x19e>
 8018804:	a201      	add	r2, pc, #4	; (adr r2, 801880c <prvProcessReceivedCommands+0x78>)
 8018806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801880a:	bf00      	nop
 801880c:	08018835 	.word	0x08018835
 8018810:	08018835 	.word	0x08018835
 8018814:	08018835 	.word	0x08018835
 8018818:	080188a9 	.word	0x080188a9
 801881c:	080188bd 	.word	0x080188bd
 8018820:	08018907 	.word	0x08018907
 8018824:	08018835 	.word	0x08018835
 8018828:	08018835 	.word	0x08018835
 801882c:	080188a9 	.word	0x080188a9
 8018830:	080188bd 	.word	0x080188bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801883a:	f043 0301 	orr.w	r3, r3, #1
 801883e:	b2da      	uxtb	r2, r3
 8018840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018846:	68ba      	ldr	r2, [r7, #8]
 8018848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801884a:	699b      	ldr	r3, [r3, #24]
 801884c:	18d1      	adds	r1, r2, r3
 801884e:	68bb      	ldr	r3, [r7, #8]
 8018850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018854:	f7ff ff5c 	bl	8018710 <prvInsertTimerInActiveList>
 8018858:	4603      	mov	r3, r0
 801885a:	2b00      	cmp	r3, #0
 801885c:	d069      	beq.n	8018932 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018860:	6a1b      	ldr	r3, [r3, #32]
 8018862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018864:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801886c:	f003 0304 	and.w	r3, r3, #4
 8018870:	2b00      	cmp	r3, #0
 8018872:	d05e      	beq.n	8018932 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018874:	68ba      	ldr	r2, [r7, #8]
 8018876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018878:	699b      	ldr	r3, [r3, #24]
 801887a:	441a      	add	r2, r3
 801887c:	2300      	movs	r3, #0
 801887e:	9300      	str	r3, [sp, #0]
 8018880:	2300      	movs	r3, #0
 8018882:	2100      	movs	r1, #0
 8018884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018886:	f7ff fe05 	bl	8018494 <xTimerGenericCommand>
 801888a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801888c:	6a3b      	ldr	r3, [r7, #32]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d14f      	bne.n	8018932 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018896:	f383 8811 	msr	BASEPRI, r3
 801889a:	f3bf 8f6f 	isb	sy
 801889e:	f3bf 8f4f 	dsb	sy
 80188a2:	61bb      	str	r3, [r7, #24]
}
 80188a4:	bf00      	nop
 80188a6:	e7fe      	b.n	80188a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80188a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188ae:	f023 0301 	bic.w	r3, r3, #1
 80188b2:	b2da      	uxtb	r2, r3
 80188b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80188ba:	e03a      	b.n	8018932 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80188bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188c2:	f043 0301 	orr.w	r3, r3, #1
 80188c6:	b2da      	uxtb	r2, r3
 80188c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80188ce:	68ba      	ldr	r2, [r7, #8]
 80188d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80188d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188d6:	699b      	ldr	r3, [r3, #24]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d10a      	bne.n	80188f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80188dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188e0:	f383 8811 	msr	BASEPRI, r3
 80188e4:	f3bf 8f6f 	isb	sy
 80188e8:	f3bf 8f4f 	dsb	sy
 80188ec:	617b      	str	r3, [r7, #20]
}
 80188ee:	bf00      	nop
 80188f0:	e7fe      	b.n	80188f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80188f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188f4:	699a      	ldr	r2, [r3, #24]
 80188f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f8:	18d1      	adds	r1, r2, r3
 80188fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018900:	f7ff ff06 	bl	8018710 <prvInsertTimerInActiveList>
					break;
 8018904:	e015      	b.n	8018932 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801890c:	f003 0302 	and.w	r3, r3, #2
 8018910:	2b00      	cmp	r3, #0
 8018912:	d103      	bne.n	801891c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018916:	f000 fbfb 	bl	8019110 <vPortFree>
 801891a:	e00a      	b.n	8018932 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801891e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018922:	f023 0301 	bic.w	r3, r3, #1
 8018926:	b2da      	uxtb	r2, r3
 8018928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801892a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801892e:	e000      	b.n	8018932 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018930:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018932:	4b08      	ldr	r3, [pc, #32]	; (8018954 <prvProcessReceivedCommands+0x1c0>)
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	1d39      	adds	r1, r7, #4
 8018938:	2200      	movs	r2, #0
 801893a:	4618      	mov	r0, r3
 801893c:	f7fe fb4a 	bl	8016fd4 <xQueueReceive>
 8018940:	4603      	mov	r3, r0
 8018942:	2b00      	cmp	r3, #0
 8018944:	f47f af2a 	bne.w	801879c <prvProcessReceivedCommands+0x8>
	}
}
 8018948:	bf00      	nop
 801894a:	bf00      	nop
 801894c:	3730      	adds	r7, #48	; 0x30
 801894e:	46bd      	mov	sp, r7
 8018950:	bd80      	pop	{r7, pc}
 8018952:	bf00      	nop
 8018954:	24002c48 	.word	0x24002c48

08018958 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b088      	sub	sp, #32
 801895c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801895e:	e048      	b.n	80189f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018960:	4b2d      	ldr	r3, [pc, #180]	; (8018a18 <prvSwitchTimerLists+0xc0>)
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	68db      	ldr	r3, [r3, #12]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801896a:	4b2b      	ldr	r3, [pc, #172]	; (8018a18 <prvSwitchTimerLists+0xc0>)
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	68db      	ldr	r3, [r3, #12]
 8018970:	68db      	ldr	r3, [r3, #12]
 8018972:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	3304      	adds	r3, #4
 8018978:	4618      	mov	r0, r3
 801897a:	f7fe f863 	bl	8016a44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	6a1b      	ldr	r3, [r3, #32]
 8018982:	68f8      	ldr	r0, [r7, #12]
 8018984:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801898c:	f003 0304 	and.w	r3, r3, #4
 8018990:	2b00      	cmp	r3, #0
 8018992:	d02e      	beq.n	80189f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	699b      	ldr	r3, [r3, #24]
 8018998:	693a      	ldr	r2, [r7, #16]
 801899a:	4413      	add	r3, r2
 801899c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801899e:	68ba      	ldr	r2, [r7, #8]
 80189a0:	693b      	ldr	r3, [r7, #16]
 80189a2:	429a      	cmp	r2, r3
 80189a4:	d90e      	bls.n	80189c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	68ba      	ldr	r2, [r7, #8]
 80189aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	68fa      	ldr	r2, [r7, #12]
 80189b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80189b2:	4b19      	ldr	r3, [pc, #100]	; (8018a18 <prvSwitchTimerLists+0xc0>)
 80189b4:	681a      	ldr	r2, [r3, #0]
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	3304      	adds	r3, #4
 80189ba:	4619      	mov	r1, r3
 80189bc:	4610      	mov	r0, r2
 80189be:	f7fe f808 	bl	80169d2 <vListInsert>
 80189c2:	e016      	b.n	80189f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80189c4:	2300      	movs	r3, #0
 80189c6:	9300      	str	r3, [sp, #0]
 80189c8:	2300      	movs	r3, #0
 80189ca:	693a      	ldr	r2, [r7, #16]
 80189cc:	2100      	movs	r1, #0
 80189ce:	68f8      	ldr	r0, [r7, #12]
 80189d0:	f7ff fd60 	bl	8018494 <xTimerGenericCommand>
 80189d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d10a      	bne.n	80189f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80189dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189e0:	f383 8811 	msr	BASEPRI, r3
 80189e4:	f3bf 8f6f 	isb	sy
 80189e8:	f3bf 8f4f 	dsb	sy
 80189ec:	603b      	str	r3, [r7, #0]
}
 80189ee:	bf00      	nop
 80189f0:	e7fe      	b.n	80189f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80189f2:	4b09      	ldr	r3, [pc, #36]	; (8018a18 <prvSwitchTimerLists+0xc0>)
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d1b1      	bne.n	8018960 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80189fc:	4b06      	ldr	r3, [pc, #24]	; (8018a18 <prvSwitchTimerLists+0xc0>)
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018a02:	4b06      	ldr	r3, [pc, #24]	; (8018a1c <prvSwitchTimerLists+0xc4>)
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	4a04      	ldr	r2, [pc, #16]	; (8018a18 <prvSwitchTimerLists+0xc0>)
 8018a08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018a0a:	4a04      	ldr	r2, [pc, #16]	; (8018a1c <prvSwitchTimerLists+0xc4>)
 8018a0c:	697b      	ldr	r3, [r7, #20]
 8018a0e:	6013      	str	r3, [r2, #0]
}
 8018a10:	bf00      	nop
 8018a12:	3718      	adds	r7, #24
 8018a14:	46bd      	mov	sp, r7
 8018a16:	bd80      	pop	{r7, pc}
 8018a18:	24002c40 	.word	0x24002c40
 8018a1c:	24002c44 	.word	0x24002c44

08018a20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b082      	sub	sp, #8
 8018a24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018a26:	f000 f985 	bl	8018d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018a2a:	4b15      	ldr	r3, [pc, #84]	; (8018a80 <prvCheckForValidListAndQueue+0x60>)
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d120      	bne.n	8018a74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018a32:	4814      	ldr	r0, [pc, #80]	; (8018a84 <prvCheckForValidListAndQueue+0x64>)
 8018a34:	f7fd ff7c 	bl	8016930 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018a38:	4813      	ldr	r0, [pc, #76]	; (8018a88 <prvCheckForValidListAndQueue+0x68>)
 8018a3a:	f7fd ff79 	bl	8016930 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018a3e:	4b13      	ldr	r3, [pc, #76]	; (8018a8c <prvCheckForValidListAndQueue+0x6c>)
 8018a40:	4a10      	ldr	r2, [pc, #64]	; (8018a84 <prvCheckForValidListAndQueue+0x64>)
 8018a42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018a44:	4b12      	ldr	r3, [pc, #72]	; (8018a90 <prvCheckForValidListAndQueue+0x70>)
 8018a46:	4a10      	ldr	r2, [pc, #64]	; (8018a88 <prvCheckForValidListAndQueue+0x68>)
 8018a48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	9300      	str	r3, [sp, #0]
 8018a4e:	4b11      	ldr	r3, [pc, #68]	; (8018a94 <prvCheckForValidListAndQueue+0x74>)
 8018a50:	4a11      	ldr	r2, [pc, #68]	; (8018a98 <prvCheckForValidListAndQueue+0x78>)
 8018a52:	2110      	movs	r1, #16
 8018a54:	200a      	movs	r0, #10
 8018a56:	f7fe f887 	bl	8016b68 <xQueueGenericCreateStatic>
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	4a08      	ldr	r2, [pc, #32]	; (8018a80 <prvCheckForValidListAndQueue+0x60>)
 8018a5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018a60:	4b07      	ldr	r3, [pc, #28]	; (8018a80 <prvCheckForValidListAndQueue+0x60>)
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d005      	beq.n	8018a74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018a68:	4b05      	ldr	r3, [pc, #20]	; (8018a80 <prvCheckForValidListAndQueue+0x60>)
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	490b      	ldr	r1, [pc, #44]	; (8018a9c <prvCheckForValidListAndQueue+0x7c>)
 8018a6e:	4618      	mov	r0, r3
 8018a70:	f7fe fca0 	bl	80173b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018a74:	f000 f98e 	bl	8018d94 <vPortExitCritical>
}
 8018a78:	bf00      	nop
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bd80      	pop	{r7, pc}
 8018a7e:	bf00      	nop
 8018a80:	24002c48 	.word	0x24002c48
 8018a84:	24002c18 	.word	0x24002c18
 8018a88:	24002c2c 	.word	0x24002c2c
 8018a8c:	24002c40 	.word	0x24002c40
 8018a90:	24002c44 	.word	0x24002c44
 8018a94:	24002cf4 	.word	0x24002cf4
 8018a98:	24002c54 	.word	0x24002c54
 8018a9c:	0801a040 	.word	0x0801a040

08018aa0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b08a      	sub	sp, #40	; 0x28
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	60f8      	str	r0, [r7, #12]
 8018aa8:	60b9      	str	r1, [r7, #8]
 8018aaa:	607a      	str	r2, [r7, #4]
 8018aac:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8018aae:	f06f 0301 	mvn.w	r3, #1
 8018ab2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8018ab8:	68bb      	ldr	r3, [r7, #8]
 8018aba:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018ac0:	4b06      	ldr	r3, [pc, #24]	; (8018adc <xTimerPendFunctionCallFromISR+0x3c>)
 8018ac2:	6818      	ldr	r0, [r3, #0]
 8018ac4:	f107 0114 	add.w	r1, r7, #20
 8018ac8:	2300      	movs	r3, #0
 8018aca:	683a      	ldr	r2, [r7, #0]
 8018acc:	f7fe f9e6 	bl	8016e9c <xQueueGenericSendFromISR>
 8018ad0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8018ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	3728      	adds	r7, #40	; 0x28
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	bd80      	pop	{r7, pc}
 8018adc:	24002c48 	.word	0x24002c48

08018ae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018ae0:	b480      	push	{r7}
 8018ae2:	b085      	sub	sp, #20
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	60f8      	str	r0, [r7, #12]
 8018ae8:	60b9      	str	r1, [r7, #8]
 8018aea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	3b04      	subs	r3, #4
 8018af0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	3b04      	subs	r3, #4
 8018afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018b00:	68bb      	ldr	r3, [r7, #8]
 8018b02:	f023 0201 	bic.w	r2, r3, #1
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	3b04      	subs	r3, #4
 8018b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018b10:	4a0c      	ldr	r2, [pc, #48]	; (8018b44 <pxPortInitialiseStack+0x64>)
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	3b14      	subs	r3, #20
 8018b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018b1c:	687a      	ldr	r2, [r7, #4]
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	3b04      	subs	r3, #4
 8018b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	f06f 0202 	mvn.w	r2, #2
 8018b2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	3b20      	subs	r3, #32
 8018b34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018b36:	68fb      	ldr	r3, [r7, #12]
}
 8018b38:	4618      	mov	r0, r3
 8018b3a:	3714      	adds	r7, #20
 8018b3c:	46bd      	mov	sp, r7
 8018b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b42:	4770      	bx	lr
 8018b44:	08018b49 	.word	0x08018b49

08018b48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018b48:	b480      	push	{r7}
 8018b4a:	b085      	sub	sp, #20
 8018b4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018b4e:	2300      	movs	r3, #0
 8018b50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018b52:	4b12      	ldr	r3, [pc, #72]	; (8018b9c <prvTaskExitError+0x54>)
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018b5a:	d00a      	beq.n	8018b72 <prvTaskExitError+0x2a>
	__asm volatile
 8018b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b60:	f383 8811 	msr	BASEPRI, r3
 8018b64:	f3bf 8f6f 	isb	sy
 8018b68:	f3bf 8f4f 	dsb	sy
 8018b6c:	60fb      	str	r3, [r7, #12]
}
 8018b6e:	bf00      	nop
 8018b70:	e7fe      	b.n	8018b70 <prvTaskExitError+0x28>
	__asm volatile
 8018b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b76:	f383 8811 	msr	BASEPRI, r3
 8018b7a:	f3bf 8f6f 	isb	sy
 8018b7e:	f3bf 8f4f 	dsb	sy
 8018b82:	60bb      	str	r3, [r7, #8]
}
 8018b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018b86:	bf00      	nop
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d0fc      	beq.n	8018b88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018b8e:	bf00      	nop
 8018b90:	bf00      	nop
 8018b92:	3714      	adds	r7, #20
 8018b94:	46bd      	mov	sp, r7
 8018b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b9a:	4770      	bx	lr
 8018b9c:	240000cc 	.word	0x240000cc

08018ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018ba0:	4b07      	ldr	r3, [pc, #28]	; (8018bc0 <pxCurrentTCBConst2>)
 8018ba2:	6819      	ldr	r1, [r3, #0]
 8018ba4:	6808      	ldr	r0, [r1, #0]
 8018ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018baa:	f380 8809 	msr	PSP, r0
 8018bae:	f3bf 8f6f 	isb	sy
 8018bb2:	f04f 0000 	mov.w	r0, #0
 8018bb6:	f380 8811 	msr	BASEPRI, r0
 8018bba:	4770      	bx	lr
 8018bbc:	f3af 8000 	nop.w

08018bc0 <pxCurrentTCBConst2>:
 8018bc0:	24002718 	.word	0x24002718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018bc4:	bf00      	nop
 8018bc6:	bf00      	nop

08018bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018bc8:	4808      	ldr	r0, [pc, #32]	; (8018bec <prvPortStartFirstTask+0x24>)
 8018bca:	6800      	ldr	r0, [r0, #0]
 8018bcc:	6800      	ldr	r0, [r0, #0]
 8018bce:	f380 8808 	msr	MSP, r0
 8018bd2:	f04f 0000 	mov.w	r0, #0
 8018bd6:	f380 8814 	msr	CONTROL, r0
 8018bda:	b662      	cpsie	i
 8018bdc:	b661      	cpsie	f
 8018bde:	f3bf 8f4f 	dsb	sy
 8018be2:	f3bf 8f6f 	isb	sy
 8018be6:	df00      	svc	0
 8018be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018bea:	bf00      	nop
 8018bec:	e000ed08 	.word	0xe000ed08

08018bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b086      	sub	sp, #24
 8018bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018bf6:	4b46      	ldr	r3, [pc, #280]	; (8018d10 <xPortStartScheduler+0x120>)
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	4a46      	ldr	r2, [pc, #280]	; (8018d14 <xPortStartScheduler+0x124>)
 8018bfc:	4293      	cmp	r3, r2
 8018bfe:	d10a      	bne.n	8018c16 <xPortStartScheduler+0x26>
	__asm volatile
 8018c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c04:	f383 8811 	msr	BASEPRI, r3
 8018c08:	f3bf 8f6f 	isb	sy
 8018c0c:	f3bf 8f4f 	dsb	sy
 8018c10:	613b      	str	r3, [r7, #16]
}
 8018c12:	bf00      	nop
 8018c14:	e7fe      	b.n	8018c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018c16:	4b3e      	ldr	r3, [pc, #248]	; (8018d10 <xPortStartScheduler+0x120>)
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	4a3f      	ldr	r2, [pc, #252]	; (8018d18 <xPortStartScheduler+0x128>)
 8018c1c:	4293      	cmp	r3, r2
 8018c1e:	d10a      	bne.n	8018c36 <xPortStartScheduler+0x46>
	__asm volatile
 8018c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c24:	f383 8811 	msr	BASEPRI, r3
 8018c28:	f3bf 8f6f 	isb	sy
 8018c2c:	f3bf 8f4f 	dsb	sy
 8018c30:	60fb      	str	r3, [r7, #12]
}
 8018c32:	bf00      	nop
 8018c34:	e7fe      	b.n	8018c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018c36:	4b39      	ldr	r3, [pc, #228]	; (8018d1c <xPortStartScheduler+0x12c>)
 8018c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018c3a:	697b      	ldr	r3, [r7, #20]
 8018c3c:	781b      	ldrb	r3, [r3, #0]
 8018c3e:	b2db      	uxtb	r3, r3
 8018c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018c42:	697b      	ldr	r3, [r7, #20]
 8018c44:	22ff      	movs	r2, #255	; 0xff
 8018c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018c48:	697b      	ldr	r3, [r7, #20]
 8018c4a:	781b      	ldrb	r3, [r3, #0]
 8018c4c:	b2db      	uxtb	r3, r3
 8018c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018c50:	78fb      	ldrb	r3, [r7, #3]
 8018c52:	b2db      	uxtb	r3, r3
 8018c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018c58:	b2da      	uxtb	r2, r3
 8018c5a:	4b31      	ldr	r3, [pc, #196]	; (8018d20 <xPortStartScheduler+0x130>)
 8018c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018c5e:	4b31      	ldr	r3, [pc, #196]	; (8018d24 <xPortStartScheduler+0x134>)
 8018c60:	2207      	movs	r2, #7
 8018c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c64:	e009      	b.n	8018c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018c66:	4b2f      	ldr	r3, [pc, #188]	; (8018d24 <xPortStartScheduler+0x134>)
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	3b01      	subs	r3, #1
 8018c6c:	4a2d      	ldr	r2, [pc, #180]	; (8018d24 <xPortStartScheduler+0x134>)
 8018c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018c70:	78fb      	ldrb	r3, [r7, #3]
 8018c72:	b2db      	uxtb	r3, r3
 8018c74:	005b      	lsls	r3, r3, #1
 8018c76:	b2db      	uxtb	r3, r3
 8018c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c7a:	78fb      	ldrb	r3, [r7, #3]
 8018c7c:	b2db      	uxtb	r3, r3
 8018c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c82:	2b80      	cmp	r3, #128	; 0x80
 8018c84:	d0ef      	beq.n	8018c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018c86:	4b27      	ldr	r3, [pc, #156]	; (8018d24 <xPortStartScheduler+0x134>)
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	f1c3 0307 	rsb	r3, r3, #7
 8018c8e:	2b04      	cmp	r3, #4
 8018c90:	d00a      	beq.n	8018ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8018c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c96:	f383 8811 	msr	BASEPRI, r3
 8018c9a:	f3bf 8f6f 	isb	sy
 8018c9e:	f3bf 8f4f 	dsb	sy
 8018ca2:	60bb      	str	r3, [r7, #8]
}
 8018ca4:	bf00      	nop
 8018ca6:	e7fe      	b.n	8018ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018ca8:	4b1e      	ldr	r3, [pc, #120]	; (8018d24 <xPortStartScheduler+0x134>)
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	021b      	lsls	r3, r3, #8
 8018cae:	4a1d      	ldr	r2, [pc, #116]	; (8018d24 <xPortStartScheduler+0x134>)
 8018cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018cb2:	4b1c      	ldr	r3, [pc, #112]	; (8018d24 <xPortStartScheduler+0x134>)
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018cba:	4a1a      	ldr	r2, [pc, #104]	; (8018d24 <xPortStartScheduler+0x134>)
 8018cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	b2da      	uxtb	r2, r3
 8018cc2:	697b      	ldr	r3, [r7, #20]
 8018cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018cc6:	4b18      	ldr	r3, [pc, #96]	; (8018d28 <xPortStartScheduler+0x138>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	4a17      	ldr	r2, [pc, #92]	; (8018d28 <xPortStartScheduler+0x138>)
 8018ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018cd2:	4b15      	ldr	r3, [pc, #84]	; (8018d28 <xPortStartScheduler+0x138>)
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	4a14      	ldr	r2, [pc, #80]	; (8018d28 <xPortStartScheduler+0x138>)
 8018cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018cde:	f000 f8dd 	bl	8018e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018ce2:	4b12      	ldr	r3, [pc, #72]	; (8018d2c <xPortStartScheduler+0x13c>)
 8018ce4:	2200      	movs	r2, #0
 8018ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018ce8:	f000 f8fc 	bl	8018ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018cec:	4b10      	ldr	r3, [pc, #64]	; (8018d30 <xPortStartScheduler+0x140>)
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	4a0f      	ldr	r2, [pc, #60]	; (8018d30 <xPortStartScheduler+0x140>)
 8018cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018cf8:	f7ff ff66 	bl	8018bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018cfc:	f7fe ff72 	bl	8017be4 <vTaskSwitchContext>
	prvTaskExitError();
 8018d00:	f7ff ff22 	bl	8018b48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018d04:	2300      	movs	r3, #0
}
 8018d06:	4618      	mov	r0, r3
 8018d08:	3718      	adds	r7, #24
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	bd80      	pop	{r7, pc}
 8018d0e:	bf00      	nop
 8018d10:	e000ed00 	.word	0xe000ed00
 8018d14:	410fc271 	.word	0x410fc271
 8018d18:	410fc270 	.word	0x410fc270
 8018d1c:	e000e400 	.word	0xe000e400
 8018d20:	24002d44 	.word	0x24002d44
 8018d24:	24002d48 	.word	0x24002d48
 8018d28:	e000ed20 	.word	0xe000ed20
 8018d2c:	240000cc 	.word	0x240000cc
 8018d30:	e000ef34 	.word	0xe000ef34

08018d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018d34:	b480      	push	{r7}
 8018d36:	b083      	sub	sp, #12
 8018d38:	af00      	add	r7, sp, #0
	__asm volatile
 8018d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d3e:	f383 8811 	msr	BASEPRI, r3
 8018d42:	f3bf 8f6f 	isb	sy
 8018d46:	f3bf 8f4f 	dsb	sy
 8018d4a:	607b      	str	r3, [r7, #4]
}
 8018d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018d4e:	4b0f      	ldr	r3, [pc, #60]	; (8018d8c <vPortEnterCritical+0x58>)
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	3301      	adds	r3, #1
 8018d54:	4a0d      	ldr	r2, [pc, #52]	; (8018d8c <vPortEnterCritical+0x58>)
 8018d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018d58:	4b0c      	ldr	r3, [pc, #48]	; (8018d8c <vPortEnterCritical+0x58>)
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	2b01      	cmp	r3, #1
 8018d5e:	d10f      	bne.n	8018d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018d60:	4b0b      	ldr	r3, [pc, #44]	; (8018d90 <vPortEnterCritical+0x5c>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	b2db      	uxtb	r3, r3
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d00a      	beq.n	8018d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8018d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d6e:	f383 8811 	msr	BASEPRI, r3
 8018d72:	f3bf 8f6f 	isb	sy
 8018d76:	f3bf 8f4f 	dsb	sy
 8018d7a:	603b      	str	r3, [r7, #0]
}
 8018d7c:	bf00      	nop
 8018d7e:	e7fe      	b.n	8018d7e <vPortEnterCritical+0x4a>
	}
}
 8018d80:	bf00      	nop
 8018d82:	370c      	adds	r7, #12
 8018d84:	46bd      	mov	sp, r7
 8018d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d8a:	4770      	bx	lr
 8018d8c:	240000cc 	.word	0x240000cc
 8018d90:	e000ed04 	.word	0xe000ed04

08018d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018d94:	b480      	push	{r7}
 8018d96:	b083      	sub	sp, #12
 8018d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018d9a:	4b12      	ldr	r3, [pc, #72]	; (8018de4 <vPortExitCritical+0x50>)
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d10a      	bne.n	8018db8 <vPortExitCritical+0x24>
	__asm volatile
 8018da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018da6:	f383 8811 	msr	BASEPRI, r3
 8018daa:	f3bf 8f6f 	isb	sy
 8018dae:	f3bf 8f4f 	dsb	sy
 8018db2:	607b      	str	r3, [r7, #4]
}
 8018db4:	bf00      	nop
 8018db6:	e7fe      	b.n	8018db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018db8:	4b0a      	ldr	r3, [pc, #40]	; (8018de4 <vPortExitCritical+0x50>)
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	3b01      	subs	r3, #1
 8018dbe:	4a09      	ldr	r2, [pc, #36]	; (8018de4 <vPortExitCritical+0x50>)
 8018dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018dc2:	4b08      	ldr	r3, [pc, #32]	; (8018de4 <vPortExitCritical+0x50>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d105      	bne.n	8018dd6 <vPortExitCritical+0x42>
 8018dca:	2300      	movs	r3, #0
 8018dcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018dce:	683b      	ldr	r3, [r7, #0]
 8018dd0:	f383 8811 	msr	BASEPRI, r3
}
 8018dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018dd6:	bf00      	nop
 8018dd8:	370c      	adds	r7, #12
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de0:	4770      	bx	lr
 8018de2:	bf00      	nop
 8018de4:	240000cc 	.word	0x240000cc
	...

08018df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018df0:	f3ef 8009 	mrs	r0, PSP
 8018df4:	f3bf 8f6f 	isb	sy
 8018df8:	4b15      	ldr	r3, [pc, #84]	; (8018e50 <pxCurrentTCBConst>)
 8018dfa:	681a      	ldr	r2, [r3, #0]
 8018dfc:	f01e 0f10 	tst.w	lr, #16
 8018e00:	bf08      	it	eq
 8018e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e0a:	6010      	str	r0, [r2, #0]
 8018e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018e14:	f380 8811 	msr	BASEPRI, r0
 8018e18:	f3bf 8f4f 	dsb	sy
 8018e1c:	f3bf 8f6f 	isb	sy
 8018e20:	f7fe fee0 	bl	8017be4 <vTaskSwitchContext>
 8018e24:	f04f 0000 	mov.w	r0, #0
 8018e28:	f380 8811 	msr	BASEPRI, r0
 8018e2c:	bc09      	pop	{r0, r3}
 8018e2e:	6819      	ldr	r1, [r3, #0]
 8018e30:	6808      	ldr	r0, [r1, #0]
 8018e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e36:	f01e 0f10 	tst.w	lr, #16
 8018e3a:	bf08      	it	eq
 8018e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018e40:	f380 8809 	msr	PSP, r0
 8018e44:	f3bf 8f6f 	isb	sy
 8018e48:	4770      	bx	lr
 8018e4a:	bf00      	nop
 8018e4c:	f3af 8000 	nop.w

08018e50 <pxCurrentTCBConst>:
 8018e50:	24002718 	.word	0x24002718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018e54:	bf00      	nop
 8018e56:	bf00      	nop

08018e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	b082      	sub	sp, #8
 8018e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8018e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e62:	f383 8811 	msr	BASEPRI, r3
 8018e66:	f3bf 8f6f 	isb	sy
 8018e6a:	f3bf 8f4f 	dsb	sy
 8018e6e:	607b      	str	r3, [r7, #4]
}
 8018e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018e72:	f7fe fdf5 	bl	8017a60 <xTaskIncrementTick>
 8018e76:	4603      	mov	r3, r0
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d003      	beq.n	8018e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018e7c:	4b06      	ldr	r3, [pc, #24]	; (8018e98 <xPortSysTickHandler+0x40>)
 8018e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e82:	601a      	str	r2, [r3, #0]
 8018e84:	2300      	movs	r3, #0
 8018e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018e88:	683b      	ldr	r3, [r7, #0]
 8018e8a:	f383 8811 	msr	BASEPRI, r3
}
 8018e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018e90:	bf00      	nop
 8018e92:	3708      	adds	r7, #8
 8018e94:	46bd      	mov	sp, r7
 8018e96:	bd80      	pop	{r7, pc}
 8018e98:	e000ed04 	.word	0xe000ed04

08018e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018e9c:	b480      	push	{r7}
 8018e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018ea0:	4b0b      	ldr	r3, [pc, #44]	; (8018ed0 <vPortSetupTimerInterrupt+0x34>)
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018ea6:	4b0b      	ldr	r3, [pc, #44]	; (8018ed4 <vPortSetupTimerInterrupt+0x38>)
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018eac:	4b0a      	ldr	r3, [pc, #40]	; (8018ed8 <vPortSetupTimerInterrupt+0x3c>)
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	4a0a      	ldr	r2, [pc, #40]	; (8018edc <vPortSetupTimerInterrupt+0x40>)
 8018eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8018eb6:	099b      	lsrs	r3, r3, #6
 8018eb8:	4a09      	ldr	r2, [pc, #36]	; (8018ee0 <vPortSetupTimerInterrupt+0x44>)
 8018eba:	3b01      	subs	r3, #1
 8018ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018ebe:	4b04      	ldr	r3, [pc, #16]	; (8018ed0 <vPortSetupTimerInterrupt+0x34>)
 8018ec0:	2207      	movs	r2, #7
 8018ec2:	601a      	str	r2, [r3, #0]
}
 8018ec4:	bf00      	nop
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ecc:	4770      	bx	lr
 8018ece:	bf00      	nop
 8018ed0:	e000e010 	.word	0xe000e010
 8018ed4:	e000e018 	.word	0xe000e018
 8018ed8:	240000bc 	.word	0x240000bc
 8018edc:	10624dd3 	.word	0x10624dd3
 8018ee0:	e000e014 	.word	0xe000e014

08018ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018ef4 <vPortEnableVFP+0x10>
 8018ee8:	6801      	ldr	r1, [r0, #0]
 8018eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018eee:	6001      	str	r1, [r0, #0]
 8018ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018ef2:	bf00      	nop
 8018ef4:	e000ed88 	.word	0xe000ed88

08018ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018ef8:	b480      	push	{r7}
 8018efa:	b085      	sub	sp, #20
 8018efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018efe:	f3ef 8305 	mrs	r3, IPSR
 8018f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	2b0f      	cmp	r3, #15
 8018f08:	d914      	bls.n	8018f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018f0a:	4a17      	ldr	r2, [pc, #92]	; (8018f68 <vPortValidateInterruptPriority+0x70>)
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	4413      	add	r3, r2
 8018f10:	781b      	ldrb	r3, [r3, #0]
 8018f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018f14:	4b15      	ldr	r3, [pc, #84]	; (8018f6c <vPortValidateInterruptPriority+0x74>)
 8018f16:	781b      	ldrb	r3, [r3, #0]
 8018f18:	7afa      	ldrb	r2, [r7, #11]
 8018f1a:	429a      	cmp	r2, r3
 8018f1c:	d20a      	bcs.n	8018f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8018f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f22:	f383 8811 	msr	BASEPRI, r3
 8018f26:	f3bf 8f6f 	isb	sy
 8018f2a:	f3bf 8f4f 	dsb	sy
 8018f2e:	607b      	str	r3, [r7, #4]
}
 8018f30:	bf00      	nop
 8018f32:	e7fe      	b.n	8018f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018f34:	4b0e      	ldr	r3, [pc, #56]	; (8018f70 <vPortValidateInterruptPriority+0x78>)
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018f3c:	4b0d      	ldr	r3, [pc, #52]	; (8018f74 <vPortValidateInterruptPriority+0x7c>)
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	429a      	cmp	r2, r3
 8018f42:	d90a      	bls.n	8018f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f48:	f383 8811 	msr	BASEPRI, r3
 8018f4c:	f3bf 8f6f 	isb	sy
 8018f50:	f3bf 8f4f 	dsb	sy
 8018f54:	603b      	str	r3, [r7, #0]
}
 8018f56:	bf00      	nop
 8018f58:	e7fe      	b.n	8018f58 <vPortValidateInterruptPriority+0x60>
	}
 8018f5a:	bf00      	nop
 8018f5c:	3714      	adds	r7, #20
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f64:	4770      	bx	lr
 8018f66:	bf00      	nop
 8018f68:	e000e3f0 	.word	0xe000e3f0
 8018f6c:	24002d44 	.word	0x24002d44
 8018f70:	e000ed0c 	.word	0xe000ed0c
 8018f74:	24002d48 	.word	0x24002d48

08018f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b08a      	sub	sp, #40	; 0x28
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018f80:	2300      	movs	r3, #0
 8018f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018f84:	f7fe fcb0 	bl	80178e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018f88:	4b5b      	ldr	r3, [pc, #364]	; (80190f8 <pvPortMalloc+0x180>)
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d101      	bne.n	8018f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018f90:	f000 f920 	bl	80191d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018f94:	4b59      	ldr	r3, [pc, #356]	; (80190fc <pvPortMalloc+0x184>)
 8018f96:	681a      	ldr	r2, [r3, #0]
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	4013      	ands	r3, r2
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	f040 8093 	bne.w	80190c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d01d      	beq.n	8018fe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018fa8:	2208      	movs	r2, #8
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	4413      	add	r3, r2
 8018fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	f003 0307 	and.w	r3, r3, #7
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d014      	beq.n	8018fe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	f023 0307 	bic.w	r3, r3, #7
 8018fc0:	3308      	adds	r3, #8
 8018fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	f003 0307 	and.w	r3, r3, #7
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d00a      	beq.n	8018fe4 <pvPortMalloc+0x6c>
	__asm volatile
 8018fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fd2:	f383 8811 	msr	BASEPRI, r3
 8018fd6:	f3bf 8f6f 	isb	sy
 8018fda:	f3bf 8f4f 	dsb	sy
 8018fde:	617b      	str	r3, [r7, #20]
}
 8018fe0:	bf00      	nop
 8018fe2:	e7fe      	b.n	8018fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d06e      	beq.n	80190c8 <pvPortMalloc+0x150>
 8018fea:	4b45      	ldr	r3, [pc, #276]	; (8019100 <pvPortMalloc+0x188>)
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	687a      	ldr	r2, [r7, #4]
 8018ff0:	429a      	cmp	r2, r3
 8018ff2:	d869      	bhi.n	80190c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018ff4:	4b43      	ldr	r3, [pc, #268]	; (8019104 <pvPortMalloc+0x18c>)
 8018ff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018ff8:	4b42      	ldr	r3, [pc, #264]	; (8019104 <pvPortMalloc+0x18c>)
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018ffe:	e004      	b.n	801900a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801900c:	685b      	ldr	r3, [r3, #4]
 801900e:	687a      	ldr	r2, [r7, #4]
 8019010:	429a      	cmp	r2, r3
 8019012:	d903      	bls.n	801901c <pvPortMalloc+0xa4>
 8019014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d1f1      	bne.n	8019000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801901c:	4b36      	ldr	r3, [pc, #216]	; (80190f8 <pvPortMalloc+0x180>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019022:	429a      	cmp	r2, r3
 8019024:	d050      	beq.n	80190c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019026:	6a3b      	ldr	r3, [r7, #32]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	2208      	movs	r2, #8
 801902c:	4413      	add	r3, r2
 801902e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019032:	681a      	ldr	r2, [r3, #0]
 8019034:	6a3b      	ldr	r3, [r7, #32]
 8019036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801903a:	685a      	ldr	r2, [r3, #4]
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	1ad2      	subs	r2, r2, r3
 8019040:	2308      	movs	r3, #8
 8019042:	005b      	lsls	r3, r3, #1
 8019044:	429a      	cmp	r2, r3
 8019046:	d91f      	bls.n	8019088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	4413      	add	r3, r2
 801904e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019050:	69bb      	ldr	r3, [r7, #24]
 8019052:	f003 0307 	and.w	r3, r3, #7
 8019056:	2b00      	cmp	r3, #0
 8019058:	d00a      	beq.n	8019070 <pvPortMalloc+0xf8>
	__asm volatile
 801905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801905e:	f383 8811 	msr	BASEPRI, r3
 8019062:	f3bf 8f6f 	isb	sy
 8019066:	f3bf 8f4f 	dsb	sy
 801906a:	613b      	str	r3, [r7, #16]
}
 801906c:	bf00      	nop
 801906e:	e7fe      	b.n	801906e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019072:	685a      	ldr	r2, [r3, #4]
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	1ad2      	subs	r2, r2, r3
 8019078:	69bb      	ldr	r3, [r7, #24]
 801907a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801907e:	687a      	ldr	r2, [r7, #4]
 8019080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019082:	69b8      	ldr	r0, [r7, #24]
 8019084:	f000 f908 	bl	8019298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019088:	4b1d      	ldr	r3, [pc, #116]	; (8019100 <pvPortMalloc+0x188>)
 801908a:	681a      	ldr	r2, [r3, #0]
 801908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801908e:	685b      	ldr	r3, [r3, #4]
 8019090:	1ad3      	subs	r3, r2, r3
 8019092:	4a1b      	ldr	r2, [pc, #108]	; (8019100 <pvPortMalloc+0x188>)
 8019094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019096:	4b1a      	ldr	r3, [pc, #104]	; (8019100 <pvPortMalloc+0x188>)
 8019098:	681a      	ldr	r2, [r3, #0]
 801909a:	4b1b      	ldr	r3, [pc, #108]	; (8019108 <pvPortMalloc+0x190>)
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	429a      	cmp	r2, r3
 80190a0:	d203      	bcs.n	80190aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80190a2:	4b17      	ldr	r3, [pc, #92]	; (8019100 <pvPortMalloc+0x188>)
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	4a18      	ldr	r2, [pc, #96]	; (8019108 <pvPortMalloc+0x190>)
 80190a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80190aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190ac:	685a      	ldr	r2, [r3, #4]
 80190ae:	4b13      	ldr	r3, [pc, #76]	; (80190fc <pvPortMalloc+0x184>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	431a      	orrs	r2, r3
 80190b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80190b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190ba:	2200      	movs	r2, #0
 80190bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80190be:	4b13      	ldr	r3, [pc, #76]	; (801910c <pvPortMalloc+0x194>)
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	3301      	adds	r3, #1
 80190c4:	4a11      	ldr	r2, [pc, #68]	; (801910c <pvPortMalloc+0x194>)
 80190c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80190c8:	f7fe fc1c 	bl	8017904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80190cc:	69fb      	ldr	r3, [r7, #28]
 80190ce:	f003 0307 	and.w	r3, r3, #7
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d00a      	beq.n	80190ec <pvPortMalloc+0x174>
	__asm volatile
 80190d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190da:	f383 8811 	msr	BASEPRI, r3
 80190de:	f3bf 8f6f 	isb	sy
 80190e2:	f3bf 8f4f 	dsb	sy
 80190e6:	60fb      	str	r3, [r7, #12]
}
 80190e8:	bf00      	nop
 80190ea:	e7fe      	b.n	80190ea <pvPortMalloc+0x172>
	return pvReturn;
 80190ec:	69fb      	ldr	r3, [r7, #28]
}
 80190ee:	4618      	mov	r0, r3
 80190f0:	3728      	adds	r7, #40	; 0x28
 80190f2:	46bd      	mov	sp, r7
 80190f4:	bd80      	pop	{r7, pc}
 80190f6:	bf00      	nop
 80190f8:	24006954 	.word	0x24006954
 80190fc:	24006968 	.word	0x24006968
 8019100:	24006958 	.word	0x24006958
 8019104:	2400694c 	.word	0x2400694c
 8019108:	2400695c 	.word	0x2400695c
 801910c:	24006960 	.word	0x24006960

08019110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b086      	sub	sp, #24
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d04d      	beq.n	80191be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019122:	2308      	movs	r3, #8
 8019124:	425b      	negs	r3, r3
 8019126:	697a      	ldr	r2, [r7, #20]
 8019128:	4413      	add	r3, r2
 801912a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801912c:	697b      	ldr	r3, [r7, #20]
 801912e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019130:	693b      	ldr	r3, [r7, #16]
 8019132:	685a      	ldr	r2, [r3, #4]
 8019134:	4b24      	ldr	r3, [pc, #144]	; (80191c8 <vPortFree+0xb8>)
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	4013      	ands	r3, r2
 801913a:	2b00      	cmp	r3, #0
 801913c:	d10a      	bne.n	8019154 <vPortFree+0x44>
	__asm volatile
 801913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019142:	f383 8811 	msr	BASEPRI, r3
 8019146:	f3bf 8f6f 	isb	sy
 801914a:	f3bf 8f4f 	dsb	sy
 801914e:	60fb      	str	r3, [r7, #12]
}
 8019150:	bf00      	nop
 8019152:	e7fe      	b.n	8019152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019154:	693b      	ldr	r3, [r7, #16]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d00a      	beq.n	8019172 <vPortFree+0x62>
	__asm volatile
 801915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019160:	f383 8811 	msr	BASEPRI, r3
 8019164:	f3bf 8f6f 	isb	sy
 8019168:	f3bf 8f4f 	dsb	sy
 801916c:	60bb      	str	r3, [r7, #8]
}
 801916e:	bf00      	nop
 8019170:	e7fe      	b.n	8019170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019172:	693b      	ldr	r3, [r7, #16]
 8019174:	685a      	ldr	r2, [r3, #4]
 8019176:	4b14      	ldr	r3, [pc, #80]	; (80191c8 <vPortFree+0xb8>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	4013      	ands	r3, r2
 801917c:	2b00      	cmp	r3, #0
 801917e:	d01e      	beq.n	80191be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019180:	693b      	ldr	r3, [r7, #16]
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d11a      	bne.n	80191be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019188:	693b      	ldr	r3, [r7, #16]
 801918a:	685a      	ldr	r2, [r3, #4]
 801918c:	4b0e      	ldr	r3, [pc, #56]	; (80191c8 <vPortFree+0xb8>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	43db      	mvns	r3, r3
 8019192:	401a      	ands	r2, r3
 8019194:	693b      	ldr	r3, [r7, #16]
 8019196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019198:	f7fe fba6 	bl	80178e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801919c:	693b      	ldr	r3, [r7, #16]
 801919e:	685a      	ldr	r2, [r3, #4]
 80191a0:	4b0a      	ldr	r3, [pc, #40]	; (80191cc <vPortFree+0xbc>)
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	4413      	add	r3, r2
 80191a6:	4a09      	ldr	r2, [pc, #36]	; (80191cc <vPortFree+0xbc>)
 80191a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80191aa:	6938      	ldr	r0, [r7, #16]
 80191ac:	f000 f874 	bl	8019298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80191b0:	4b07      	ldr	r3, [pc, #28]	; (80191d0 <vPortFree+0xc0>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	3301      	adds	r3, #1
 80191b6:	4a06      	ldr	r2, [pc, #24]	; (80191d0 <vPortFree+0xc0>)
 80191b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80191ba:	f7fe fba3 	bl	8017904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80191be:	bf00      	nop
 80191c0:	3718      	adds	r7, #24
 80191c2:	46bd      	mov	sp, r7
 80191c4:	bd80      	pop	{r7, pc}
 80191c6:	bf00      	nop
 80191c8:	24006968 	.word	0x24006968
 80191cc:	24006958 	.word	0x24006958
 80191d0:	24006964 	.word	0x24006964

080191d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80191d4:	b480      	push	{r7}
 80191d6:	b085      	sub	sp, #20
 80191d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80191da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80191de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80191e0:	4b27      	ldr	r3, [pc, #156]	; (8019280 <prvHeapInit+0xac>)
 80191e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	f003 0307 	and.w	r3, r3, #7
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d00c      	beq.n	8019208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	3307      	adds	r3, #7
 80191f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	f023 0307 	bic.w	r3, r3, #7
 80191fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80191fc:	68ba      	ldr	r2, [r7, #8]
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	1ad3      	subs	r3, r2, r3
 8019202:	4a1f      	ldr	r2, [pc, #124]	; (8019280 <prvHeapInit+0xac>)
 8019204:	4413      	add	r3, r2
 8019206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801920c:	4a1d      	ldr	r2, [pc, #116]	; (8019284 <prvHeapInit+0xb0>)
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019212:	4b1c      	ldr	r3, [pc, #112]	; (8019284 <prvHeapInit+0xb0>)
 8019214:	2200      	movs	r2, #0
 8019216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	68ba      	ldr	r2, [r7, #8]
 801921c:	4413      	add	r3, r2
 801921e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019220:	2208      	movs	r2, #8
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	1a9b      	subs	r3, r3, r2
 8019226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	f023 0307 	bic.w	r3, r3, #7
 801922e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	4a15      	ldr	r2, [pc, #84]	; (8019288 <prvHeapInit+0xb4>)
 8019234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019236:	4b14      	ldr	r3, [pc, #80]	; (8019288 <prvHeapInit+0xb4>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	2200      	movs	r2, #0
 801923c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801923e:	4b12      	ldr	r3, [pc, #72]	; (8019288 <prvHeapInit+0xb4>)
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	2200      	movs	r2, #0
 8019244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801924a:	683b      	ldr	r3, [r7, #0]
 801924c:	68fa      	ldr	r2, [r7, #12]
 801924e:	1ad2      	subs	r2, r2, r3
 8019250:	683b      	ldr	r3, [r7, #0]
 8019252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019254:	4b0c      	ldr	r3, [pc, #48]	; (8019288 <prvHeapInit+0xb4>)
 8019256:	681a      	ldr	r2, [r3, #0]
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801925c:	683b      	ldr	r3, [r7, #0]
 801925e:	685b      	ldr	r3, [r3, #4]
 8019260:	4a0a      	ldr	r2, [pc, #40]	; (801928c <prvHeapInit+0xb8>)
 8019262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	685b      	ldr	r3, [r3, #4]
 8019268:	4a09      	ldr	r2, [pc, #36]	; (8019290 <prvHeapInit+0xbc>)
 801926a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801926c:	4b09      	ldr	r3, [pc, #36]	; (8019294 <prvHeapInit+0xc0>)
 801926e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019272:	601a      	str	r2, [r3, #0]
}
 8019274:	bf00      	nop
 8019276:	3714      	adds	r7, #20
 8019278:	46bd      	mov	sp, r7
 801927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927e:	4770      	bx	lr
 8019280:	24002d4c 	.word	0x24002d4c
 8019284:	2400694c 	.word	0x2400694c
 8019288:	24006954 	.word	0x24006954
 801928c:	2400695c 	.word	0x2400695c
 8019290:	24006958 	.word	0x24006958
 8019294:	24006968 	.word	0x24006968

08019298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019298:	b480      	push	{r7}
 801929a:	b085      	sub	sp, #20
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80192a0:	4b28      	ldr	r3, [pc, #160]	; (8019344 <prvInsertBlockIntoFreeList+0xac>)
 80192a2:	60fb      	str	r3, [r7, #12]
 80192a4:	e002      	b.n	80192ac <prvInsertBlockIntoFreeList+0x14>
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	60fb      	str	r3, [r7, #12]
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	687a      	ldr	r2, [r7, #4]
 80192b2:	429a      	cmp	r2, r3
 80192b4:	d8f7      	bhi.n	80192a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	685b      	ldr	r3, [r3, #4]
 80192be:	68ba      	ldr	r2, [r7, #8]
 80192c0:	4413      	add	r3, r2
 80192c2:	687a      	ldr	r2, [r7, #4]
 80192c4:	429a      	cmp	r2, r3
 80192c6:	d108      	bne.n	80192da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	685a      	ldr	r2, [r3, #4]
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	685b      	ldr	r3, [r3, #4]
 80192d0:	441a      	add	r2, r3
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	685b      	ldr	r3, [r3, #4]
 80192e2:	68ba      	ldr	r2, [r7, #8]
 80192e4:	441a      	add	r2, r3
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	429a      	cmp	r2, r3
 80192ec:	d118      	bne.n	8019320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	681a      	ldr	r2, [r3, #0]
 80192f2:	4b15      	ldr	r3, [pc, #84]	; (8019348 <prvInsertBlockIntoFreeList+0xb0>)
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	429a      	cmp	r2, r3
 80192f8:	d00d      	beq.n	8019316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	685a      	ldr	r2, [r3, #4]
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	685b      	ldr	r3, [r3, #4]
 8019304:	441a      	add	r2, r3
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	681a      	ldr	r2, [r3, #0]
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	601a      	str	r2, [r3, #0]
 8019314:	e008      	b.n	8019328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019316:	4b0c      	ldr	r3, [pc, #48]	; (8019348 <prvInsertBlockIntoFreeList+0xb0>)
 8019318:	681a      	ldr	r2, [r3, #0]
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	601a      	str	r2, [r3, #0]
 801931e:	e003      	b.n	8019328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	681a      	ldr	r2, [r3, #0]
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019328:	68fa      	ldr	r2, [r7, #12]
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	429a      	cmp	r2, r3
 801932e:	d002      	beq.n	8019336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	687a      	ldr	r2, [r7, #4]
 8019334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019336:	bf00      	nop
 8019338:	3714      	adds	r7, #20
 801933a:	46bd      	mov	sp, r7
 801933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019340:	4770      	bx	lr
 8019342:	bf00      	nop
 8019344:	2400694c 	.word	0x2400694c
 8019348:	24006954 	.word	0x24006954

0801934c <__errno>:
 801934c:	4b01      	ldr	r3, [pc, #4]	; (8019354 <__errno+0x8>)
 801934e:	6818      	ldr	r0, [r3, #0]
 8019350:	4770      	bx	lr
 8019352:	bf00      	nop
 8019354:	240000d0 	.word	0x240000d0

08019358 <__libc_init_array>:
 8019358:	b570      	push	{r4, r5, r6, lr}
 801935a:	4d0d      	ldr	r5, [pc, #52]	; (8019390 <__libc_init_array+0x38>)
 801935c:	4c0d      	ldr	r4, [pc, #52]	; (8019394 <__libc_init_array+0x3c>)
 801935e:	1b64      	subs	r4, r4, r5
 8019360:	10a4      	asrs	r4, r4, #2
 8019362:	2600      	movs	r6, #0
 8019364:	42a6      	cmp	r6, r4
 8019366:	d109      	bne.n	801937c <__libc_init_array+0x24>
 8019368:	4d0b      	ldr	r5, [pc, #44]	; (8019398 <__libc_init_array+0x40>)
 801936a:	4c0c      	ldr	r4, [pc, #48]	; (801939c <__libc_init_array+0x44>)
 801936c:	f000 fd2c 	bl	8019dc8 <_init>
 8019370:	1b64      	subs	r4, r4, r5
 8019372:	10a4      	asrs	r4, r4, #2
 8019374:	2600      	movs	r6, #0
 8019376:	42a6      	cmp	r6, r4
 8019378:	d105      	bne.n	8019386 <__libc_init_array+0x2e>
 801937a:	bd70      	pop	{r4, r5, r6, pc}
 801937c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019380:	4798      	blx	r3
 8019382:	3601      	adds	r6, #1
 8019384:	e7ee      	b.n	8019364 <__libc_init_array+0xc>
 8019386:	f855 3b04 	ldr.w	r3, [r5], #4
 801938a:	4798      	blx	r3
 801938c:	3601      	adds	r6, #1
 801938e:	e7f2      	b.n	8019376 <__libc_init_array+0x1e>
 8019390:	0801a280 	.word	0x0801a280
 8019394:	0801a280 	.word	0x0801a280
 8019398:	0801a280 	.word	0x0801a280
 801939c:	0801a284 	.word	0x0801a284

080193a0 <memcpy>:
 80193a0:	440a      	add	r2, r1
 80193a2:	4291      	cmp	r1, r2
 80193a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80193a8:	d100      	bne.n	80193ac <memcpy+0xc>
 80193aa:	4770      	bx	lr
 80193ac:	b510      	push	{r4, lr}
 80193ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80193b6:	4291      	cmp	r1, r2
 80193b8:	d1f9      	bne.n	80193ae <memcpy+0xe>
 80193ba:	bd10      	pop	{r4, pc}

080193bc <memset>:
 80193bc:	4402      	add	r2, r0
 80193be:	4603      	mov	r3, r0
 80193c0:	4293      	cmp	r3, r2
 80193c2:	d100      	bne.n	80193c6 <memset+0xa>
 80193c4:	4770      	bx	lr
 80193c6:	f803 1b01 	strb.w	r1, [r3], #1
 80193ca:	e7f9      	b.n	80193c0 <memset+0x4>

080193cc <_puts_r>:
 80193cc:	b570      	push	{r4, r5, r6, lr}
 80193ce:	460e      	mov	r6, r1
 80193d0:	4605      	mov	r5, r0
 80193d2:	b118      	cbz	r0, 80193dc <_puts_r+0x10>
 80193d4:	6983      	ldr	r3, [r0, #24]
 80193d6:	b90b      	cbnz	r3, 80193dc <_puts_r+0x10>
 80193d8:	f000 fa48 	bl	801986c <__sinit>
 80193dc:	69ab      	ldr	r3, [r5, #24]
 80193de:	68ac      	ldr	r4, [r5, #8]
 80193e0:	b913      	cbnz	r3, 80193e8 <_puts_r+0x1c>
 80193e2:	4628      	mov	r0, r5
 80193e4:	f000 fa42 	bl	801986c <__sinit>
 80193e8:	4b2c      	ldr	r3, [pc, #176]	; (801949c <_puts_r+0xd0>)
 80193ea:	429c      	cmp	r4, r3
 80193ec:	d120      	bne.n	8019430 <_puts_r+0x64>
 80193ee:	686c      	ldr	r4, [r5, #4]
 80193f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80193f2:	07db      	lsls	r3, r3, #31
 80193f4:	d405      	bmi.n	8019402 <_puts_r+0x36>
 80193f6:	89a3      	ldrh	r3, [r4, #12]
 80193f8:	0598      	lsls	r0, r3, #22
 80193fa:	d402      	bmi.n	8019402 <_puts_r+0x36>
 80193fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80193fe:	f000 fad3 	bl	80199a8 <__retarget_lock_acquire_recursive>
 8019402:	89a3      	ldrh	r3, [r4, #12]
 8019404:	0719      	lsls	r1, r3, #28
 8019406:	d51d      	bpl.n	8019444 <_puts_r+0x78>
 8019408:	6923      	ldr	r3, [r4, #16]
 801940a:	b1db      	cbz	r3, 8019444 <_puts_r+0x78>
 801940c:	3e01      	subs	r6, #1
 801940e:	68a3      	ldr	r3, [r4, #8]
 8019410:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019414:	3b01      	subs	r3, #1
 8019416:	60a3      	str	r3, [r4, #8]
 8019418:	bb39      	cbnz	r1, 801946a <_puts_r+0x9e>
 801941a:	2b00      	cmp	r3, #0
 801941c:	da38      	bge.n	8019490 <_puts_r+0xc4>
 801941e:	4622      	mov	r2, r4
 8019420:	210a      	movs	r1, #10
 8019422:	4628      	mov	r0, r5
 8019424:	f000 f848 	bl	80194b8 <__swbuf_r>
 8019428:	3001      	adds	r0, #1
 801942a:	d011      	beq.n	8019450 <_puts_r+0x84>
 801942c:	250a      	movs	r5, #10
 801942e:	e011      	b.n	8019454 <_puts_r+0x88>
 8019430:	4b1b      	ldr	r3, [pc, #108]	; (80194a0 <_puts_r+0xd4>)
 8019432:	429c      	cmp	r4, r3
 8019434:	d101      	bne.n	801943a <_puts_r+0x6e>
 8019436:	68ac      	ldr	r4, [r5, #8]
 8019438:	e7da      	b.n	80193f0 <_puts_r+0x24>
 801943a:	4b1a      	ldr	r3, [pc, #104]	; (80194a4 <_puts_r+0xd8>)
 801943c:	429c      	cmp	r4, r3
 801943e:	bf08      	it	eq
 8019440:	68ec      	ldreq	r4, [r5, #12]
 8019442:	e7d5      	b.n	80193f0 <_puts_r+0x24>
 8019444:	4621      	mov	r1, r4
 8019446:	4628      	mov	r0, r5
 8019448:	f000 f888 	bl	801955c <__swsetup_r>
 801944c:	2800      	cmp	r0, #0
 801944e:	d0dd      	beq.n	801940c <_puts_r+0x40>
 8019450:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019456:	07da      	lsls	r2, r3, #31
 8019458:	d405      	bmi.n	8019466 <_puts_r+0x9a>
 801945a:	89a3      	ldrh	r3, [r4, #12]
 801945c:	059b      	lsls	r3, r3, #22
 801945e:	d402      	bmi.n	8019466 <_puts_r+0x9a>
 8019460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019462:	f000 faa2 	bl	80199aa <__retarget_lock_release_recursive>
 8019466:	4628      	mov	r0, r5
 8019468:	bd70      	pop	{r4, r5, r6, pc}
 801946a:	2b00      	cmp	r3, #0
 801946c:	da04      	bge.n	8019478 <_puts_r+0xac>
 801946e:	69a2      	ldr	r2, [r4, #24]
 8019470:	429a      	cmp	r2, r3
 8019472:	dc06      	bgt.n	8019482 <_puts_r+0xb6>
 8019474:	290a      	cmp	r1, #10
 8019476:	d004      	beq.n	8019482 <_puts_r+0xb6>
 8019478:	6823      	ldr	r3, [r4, #0]
 801947a:	1c5a      	adds	r2, r3, #1
 801947c:	6022      	str	r2, [r4, #0]
 801947e:	7019      	strb	r1, [r3, #0]
 8019480:	e7c5      	b.n	801940e <_puts_r+0x42>
 8019482:	4622      	mov	r2, r4
 8019484:	4628      	mov	r0, r5
 8019486:	f000 f817 	bl	80194b8 <__swbuf_r>
 801948a:	3001      	adds	r0, #1
 801948c:	d1bf      	bne.n	801940e <_puts_r+0x42>
 801948e:	e7df      	b.n	8019450 <_puts_r+0x84>
 8019490:	6823      	ldr	r3, [r4, #0]
 8019492:	250a      	movs	r5, #10
 8019494:	1c5a      	adds	r2, r3, #1
 8019496:	6022      	str	r2, [r4, #0]
 8019498:	701d      	strb	r5, [r3, #0]
 801949a:	e7db      	b.n	8019454 <_puts_r+0x88>
 801949c:	0801a238 	.word	0x0801a238
 80194a0:	0801a258 	.word	0x0801a258
 80194a4:	0801a218 	.word	0x0801a218

080194a8 <puts>:
 80194a8:	4b02      	ldr	r3, [pc, #8]	; (80194b4 <puts+0xc>)
 80194aa:	4601      	mov	r1, r0
 80194ac:	6818      	ldr	r0, [r3, #0]
 80194ae:	f7ff bf8d 	b.w	80193cc <_puts_r>
 80194b2:	bf00      	nop
 80194b4:	240000d0 	.word	0x240000d0

080194b8 <__swbuf_r>:
 80194b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194ba:	460e      	mov	r6, r1
 80194bc:	4614      	mov	r4, r2
 80194be:	4605      	mov	r5, r0
 80194c0:	b118      	cbz	r0, 80194ca <__swbuf_r+0x12>
 80194c2:	6983      	ldr	r3, [r0, #24]
 80194c4:	b90b      	cbnz	r3, 80194ca <__swbuf_r+0x12>
 80194c6:	f000 f9d1 	bl	801986c <__sinit>
 80194ca:	4b21      	ldr	r3, [pc, #132]	; (8019550 <__swbuf_r+0x98>)
 80194cc:	429c      	cmp	r4, r3
 80194ce:	d12b      	bne.n	8019528 <__swbuf_r+0x70>
 80194d0:	686c      	ldr	r4, [r5, #4]
 80194d2:	69a3      	ldr	r3, [r4, #24]
 80194d4:	60a3      	str	r3, [r4, #8]
 80194d6:	89a3      	ldrh	r3, [r4, #12]
 80194d8:	071a      	lsls	r2, r3, #28
 80194da:	d52f      	bpl.n	801953c <__swbuf_r+0x84>
 80194dc:	6923      	ldr	r3, [r4, #16]
 80194de:	b36b      	cbz	r3, 801953c <__swbuf_r+0x84>
 80194e0:	6923      	ldr	r3, [r4, #16]
 80194e2:	6820      	ldr	r0, [r4, #0]
 80194e4:	1ac0      	subs	r0, r0, r3
 80194e6:	6963      	ldr	r3, [r4, #20]
 80194e8:	b2f6      	uxtb	r6, r6
 80194ea:	4283      	cmp	r3, r0
 80194ec:	4637      	mov	r7, r6
 80194ee:	dc04      	bgt.n	80194fa <__swbuf_r+0x42>
 80194f0:	4621      	mov	r1, r4
 80194f2:	4628      	mov	r0, r5
 80194f4:	f000 f926 	bl	8019744 <_fflush_r>
 80194f8:	bb30      	cbnz	r0, 8019548 <__swbuf_r+0x90>
 80194fa:	68a3      	ldr	r3, [r4, #8]
 80194fc:	3b01      	subs	r3, #1
 80194fe:	60a3      	str	r3, [r4, #8]
 8019500:	6823      	ldr	r3, [r4, #0]
 8019502:	1c5a      	adds	r2, r3, #1
 8019504:	6022      	str	r2, [r4, #0]
 8019506:	701e      	strb	r6, [r3, #0]
 8019508:	6963      	ldr	r3, [r4, #20]
 801950a:	3001      	adds	r0, #1
 801950c:	4283      	cmp	r3, r0
 801950e:	d004      	beq.n	801951a <__swbuf_r+0x62>
 8019510:	89a3      	ldrh	r3, [r4, #12]
 8019512:	07db      	lsls	r3, r3, #31
 8019514:	d506      	bpl.n	8019524 <__swbuf_r+0x6c>
 8019516:	2e0a      	cmp	r6, #10
 8019518:	d104      	bne.n	8019524 <__swbuf_r+0x6c>
 801951a:	4621      	mov	r1, r4
 801951c:	4628      	mov	r0, r5
 801951e:	f000 f911 	bl	8019744 <_fflush_r>
 8019522:	b988      	cbnz	r0, 8019548 <__swbuf_r+0x90>
 8019524:	4638      	mov	r0, r7
 8019526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019528:	4b0a      	ldr	r3, [pc, #40]	; (8019554 <__swbuf_r+0x9c>)
 801952a:	429c      	cmp	r4, r3
 801952c:	d101      	bne.n	8019532 <__swbuf_r+0x7a>
 801952e:	68ac      	ldr	r4, [r5, #8]
 8019530:	e7cf      	b.n	80194d2 <__swbuf_r+0x1a>
 8019532:	4b09      	ldr	r3, [pc, #36]	; (8019558 <__swbuf_r+0xa0>)
 8019534:	429c      	cmp	r4, r3
 8019536:	bf08      	it	eq
 8019538:	68ec      	ldreq	r4, [r5, #12]
 801953a:	e7ca      	b.n	80194d2 <__swbuf_r+0x1a>
 801953c:	4621      	mov	r1, r4
 801953e:	4628      	mov	r0, r5
 8019540:	f000 f80c 	bl	801955c <__swsetup_r>
 8019544:	2800      	cmp	r0, #0
 8019546:	d0cb      	beq.n	80194e0 <__swbuf_r+0x28>
 8019548:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801954c:	e7ea      	b.n	8019524 <__swbuf_r+0x6c>
 801954e:	bf00      	nop
 8019550:	0801a238 	.word	0x0801a238
 8019554:	0801a258 	.word	0x0801a258
 8019558:	0801a218 	.word	0x0801a218

0801955c <__swsetup_r>:
 801955c:	4b32      	ldr	r3, [pc, #200]	; (8019628 <__swsetup_r+0xcc>)
 801955e:	b570      	push	{r4, r5, r6, lr}
 8019560:	681d      	ldr	r5, [r3, #0]
 8019562:	4606      	mov	r6, r0
 8019564:	460c      	mov	r4, r1
 8019566:	b125      	cbz	r5, 8019572 <__swsetup_r+0x16>
 8019568:	69ab      	ldr	r3, [r5, #24]
 801956a:	b913      	cbnz	r3, 8019572 <__swsetup_r+0x16>
 801956c:	4628      	mov	r0, r5
 801956e:	f000 f97d 	bl	801986c <__sinit>
 8019572:	4b2e      	ldr	r3, [pc, #184]	; (801962c <__swsetup_r+0xd0>)
 8019574:	429c      	cmp	r4, r3
 8019576:	d10f      	bne.n	8019598 <__swsetup_r+0x3c>
 8019578:	686c      	ldr	r4, [r5, #4]
 801957a:	89a3      	ldrh	r3, [r4, #12]
 801957c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019580:	0719      	lsls	r1, r3, #28
 8019582:	d42c      	bmi.n	80195de <__swsetup_r+0x82>
 8019584:	06dd      	lsls	r5, r3, #27
 8019586:	d411      	bmi.n	80195ac <__swsetup_r+0x50>
 8019588:	2309      	movs	r3, #9
 801958a:	6033      	str	r3, [r6, #0]
 801958c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019590:	81a3      	strh	r3, [r4, #12]
 8019592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019596:	e03e      	b.n	8019616 <__swsetup_r+0xba>
 8019598:	4b25      	ldr	r3, [pc, #148]	; (8019630 <__swsetup_r+0xd4>)
 801959a:	429c      	cmp	r4, r3
 801959c:	d101      	bne.n	80195a2 <__swsetup_r+0x46>
 801959e:	68ac      	ldr	r4, [r5, #8]
 80195a0:	e7eb      	b.n	801957a <__swsetup_r+0x1e>
 80195a2:	4b24      	ldr	r3, [pc, #144]	; (8019634 <__swsetup_r+0xd8>)
 80195a4:	429c      	cmp	r4, r3
 80195a6:	bf08      	it	eq
 80195a8:	68ec      	ldreq	r4, [r5, #12]
 80195aa:	e7e6      	b.n	801957a <__swsetup_r+0x1e>
 80195ac:	0758      	lsls	r0, r3, #29
 80195ae:	d512      	bpl.n	80195d6 <__swsetup_r+0x7a>
 80195b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80195b2:	b141      	cbz	r1, 80195c6 <__swsetup_r+0x6a>
 80195b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80195b8:	4299      	cmp	r1, r3
 80195ba:	d002      	beq.n	80195c2 <__swsetup_r+0x66>
 80195bc:	4630      	mov	r0, r6
 80195be:	f000 fa5b 	bl	8019a78 <_free_r>
 80195c2:	2300      	movs	r3, #0
 80195c4:	6363      	str	r3, [r4, #52]	; 0x34
 80195c6:	89a3      	ldrh	r3, [r4, #12]
 80195c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80195cc:	81a3      	strh	r3, [r4, #12]
 80195ce:	2300      	movs	r3, #0
 80195d0:	6063      	str	r3, [r4, #4]
 80195d2:	6923      	ldr	r3, [r4, #16]
 80195d4:	6023      	str	r3, [r4, #0]
 80195d6:	89a3      	ldrh	r3, [r4, #12]
 80195d8:	f043 0308 	orr.w	r3, r3, #8
 80195dc:	81a3      	strh	r3, [r4, #12]
 80195de:	6923      	ldr	r3, [r4, #16]
 80195e0:	b94b      	cbnz	r3, 80195f6 <__swsetup_r+0x9a>
 80195e2:	89a3      	ldrh	r3, [r4, #12]
 80195e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80195e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80195ec:	d003      	beq.n	80195f6 <__swsetup_r+0x9a>
 80195ee:	4621      	mov	r1, r4
 80195f0:	4630      	mov	r0, r6
 80195f2:	f000 fa01 	bl	80199f8 <__smakebuf_r>
 80195f6:	89a0      	ldrh	r0, [r4, #12]
 80195f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80195fc:	f010 0301 	ands.w	r3, r0, #1
 8019600:	d00a      	beq.n	8019618 <__swsetup_r+0xbc>
 8019602:	2300      	movs	r3, #0
 8019604:	60a3      	str	r3, [r4, #8]
 8019606:	6963      	ldr	r3, [r4, #20]
 8019608:	425b      	negs	r3, r3
 801960a:	61a3      	str	r3, [r4, #24]
 801960c:	6923      	ldr	r3, [r4, #16]
 801960e:	b943      	cbnz	r3, 8019622 <__swsetup_r+0xc6>
 8019610:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019614:	d1ba      	bne.n	801958c <__swsetup_r+0x30>
 8019616:	bd70      	pop	{r4, r5, r6, pc}
 8019618:	0781      	lsls	r1, r0, #30
 801961a:	bf58      	it	pl
 801961c:	6963      	ldrpl	r3, [r4, #20]
 801961e:	60a3      	str	r3, [r4, #8]
 8019620:	e7f4      	b.n	801960c <__swsetup_r+0xb0>
 8019622:	2000      	movs	r0, #0
 8019624:	e7f7      	b.n	8019616 <__swsetup_r+0xba>
 8019626:	bf00      	nop
 8019628:	240000d0 	.word	0x240000d0
 801962c:	0801a238 	.word	0x0801a238
 8019630:	0801a258 	.word	0x0801a258
 8019634:	0801a218 	.word	0x0801a218

08019638 <__sflush_r>:
 8019638:	898a      	ldrh	r2, [r1, #12]
 801963a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801963e:	4605      	mov	r5, r0
 8019640:	0710      	lsls	r0, r2, #28
 8019642:	460c      	mov	r4, r1
 8019644:	d458      	bmi.n	80196f8 <__sflush_r+0xc0>
 8019646:	684b      	ldr	r3, [r1, #4]
 8019648:	2b00      	cmp	r3, #0
 801964a:	dc05      	bgt.n	8019658 <__sflush_r+0x20>
 801964c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801964e:	2b00      	cmp	r3, #0
 8019650:	dc02      	bgt.n	8019658 <__sflush_r+0x20>
 8019652:	2000      	movs	r0, #0
 8019654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801965a:	2e00      	cmp	r6, #0
 801965c:	d0f9      	beq.n	8019652 <__sflush_r+0x1a>
 801965e:	2300      	movs	r3, #0
 8019660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019664:	682f      	ldr	r7, [r5, #0]
 8019666:	602b      	str	r3, [r5, #0]
 8019668:	d032      	beq.n	80196d0 <__sflush_r+0x98>
 801966a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801966c:	89a3      	ldrh	r3, [r4, #12]
 801966e:	075a      	lsls	r2, r3, #29
 8019670:	d505      	bpl.n	801967e <__sflush_r+0x46>
 8019672:	6863      	ldr	r3, [r4, #4]
 8019674:	1ac0      	subs	r0, r0, r3
 8019676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019678:	b10b      	cbz	r3, 801967e <__sflush_r+0x46>
 801967a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801967c:	1ac0      	subs	r0, r0, r3
 801967e:	2300      	movs	r3, #0
 8019680:	4602      	mov	r2, r0
 8019682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019684:	6a21      	ldr	r1, [r4, #32]
 8019686:	4628      	mov	r0, r5
 8019688:	47b0      	blx	r6
 801968a:	1c43      	adds	r3, r0, #1
 801968c:	89a3      	ldrh	r3, [r4, #12]
 801968e:	d106      	bne.n	801969e <__sflush_r+0x66>
 8019690:	6829      	ldr	r1, [r5, #0]
 8019692:	291d      	cmp	r1, #29
 8019694:	d82c      	bhi.n	80196f0 <__sflush_r+0xb8>
 8019696:	4a2a      	ldr	r2, [pc, #168]	; (8019740 <__sflush_r+0x108>)
 8019698:	40ca      	lsrs	r2, r1
 801969a:	07d6      	lsls	r6, r2, #31
 801969c:	d528      	bpl.n	80196f0 <__sflush_r+0xb8>
 801969e:	2200      	movs	r2, #0
 80196a0:	6062      	str	r2, [r4, #4]
 80196a2:	04d9      	lsls	r1, r3, #19
 80196a4:	6922      	ldr	r2, [r4, #16]
 80196a6:	6022      	str	r2, [r4, #0]
 80196a8:	d504      	bpl.n	80196b4 <__sflush_r+0x7c>
 80196aa:	1c42      	adds	r2, r0, #1
 80196ac:	d101      	bne.n	80196b2 <__sflush_r+0x7a>
 80196ae:	682b      	ldr	r3, [r5, #0]
 80196b0:	b903      	cbnz	r3, 80196b4 <__sflush_r+0x7c>
 80196b2:	6560      	str	r0, [r4, #84]	; 0x54
 80196b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80196b6:	602f      	str	r7, [r5, #0]
 80196b8:	2900      	cmp	r1, #0
 80196ba:	d0ca      	beq.n	8019652 <__sflush_r+0x1a>
 80196bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80196c0:	4299      	cmp	r1, r3
 80196c2:	d002      	beq.n	80196ca <__sflush_r+0x92>
 80196c4:	4628      	mov	r0, r5
 80196c6:	f000 f9d7 	bl	8019a78 <_free_r>
 80196ca:	2000      	movs	r0, #0
 80196cc:	6360      	str	r0, [r4, #52]	; 0x34
 80196ce:	e7c1      	b.n	8019654 <__sflush_r+0x1c>
 80196d0:	6a21      	ldr	r1, [r4, #32]
 80196d2:	2301      	movs	r3, #1
 80196d4:	4628      	mov	r0, r5
 80196d6:	47b0      	blx	r6
 80196d8:	1c41      	adds	r1, r0, #1
 80196da:	d1c7      	bne.n	801966c <__sflush_r+0x34>
 80196dc:	682b      	ldr	r3, [r5, #0]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d0c4      	beq.n	801966c <__sflush_r+0x34>
 80196e2:	2b1d      	cmp	r3, #29
 80196e4:	d001      	beq.n	80196ea <__sflush_r+0xb2>
 80196e6:	2b16      	cmp	r3, #22
 80196e8:	d101      	bne.n	80196ee <__sflush_r+0xb6>
 80196ea:	602f      	str	r7, [r5, #0]
 80196ec:	e7b1      	b.n	8019652 <__sflush_r+0x1a>
 80196ee:	89a3      	ldrh	r3, [r4, #12]
 80196f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196f4:	81a3      	strh	r3, [r4, #12]
 80196f6:	e7ad      	b.n	8019654 <__sflush_r+0x1c>
 80196f8:	690f      	ldr	r7, [r1, #16]
 80196fa:	2f00      	cmp	r7, #0
 80196fc:	d0a9      	beq.n	8019652 <__sflush_r+0x1a>
 80196fe:	0793      	lsls	r3, r2, #30
 8019700:	680e      	ldr	r6, [r1, #0]
 8019702:	bf08      	it	eq
 8019704:	694b      	ldreq	r3, [r1, #20]
 8019706:	600f      	str	r7, [r1, #0]
 8019708:	bf18      	it	ne
 801970a:	2300      	movne	r3, #0
 801970c:	eba6 0807 	sub.w	r8, r6, r7
 8019710:	608b      	str	r3, [r1, #8]
 8019712:	f1b8 0f00 	cmp.w	r8, #0
 8019716:	dd9c      	ble.n	8019652 <__sflush_r+0x1a>
 8019718:	6a21      	ldr	r1, [r4, #32]
 801971a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801971c:	4643      	mov	r3, r8
 801971e:	463a      	mov	r2, r7
 8019720:	4628      	mov	r0, r5
 8019722:	47b0      	blx	r6
 8019724:	2800      	cmp	r0, #0
 8019726:	dc06      	bgt.n	8019736 <__sflush_r+0xfe>
 8019728:	89a3      	ldrh	r3, [r4, #12]
 801972a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801972e:	81a3      	strh	r3, [r4, #12]
 8019730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019734:	e78e      	b.n	8019654 <__sflush_r+0x1c>
 8019736:	4407      	add	r7, r0
 8019738:	eba8 0800 	sub.w	r8, r8, r0
 801973c:	e7e9      	b.n	8019712 <__sflush_r+0xda>
 801973e:	bf00      	nop
 8019740:	20400001 	.word	0x20400001

08019744 <_fflush_r>:
 8019744:	b538      	push	{r3, r4, r5, lr}
 8019746:	690b      	ldr	r3, [r1, #16]
 8019748:	4605      	mov	r5, r0
 801974a:	460c      	mov	r4, r1
 801974c:	b913      	cbnz	r3, 8019754 <_fflush_r+0x10>
 801974e:	2500      	movs	r5, #0
 8019750:	4628      	mov	r0, r5
 8019752:	bd38      	pop	{r3, r4, r5, pc}
 8019754:	b118      	cbz	r0, 801975e <_fflush_r+0x1a>
 8019756:	6983      	ldr	r3, [r0, #24]
 8019758:	b90b      	cbnz	r3, 801975e <_fflush_r+0x1a>
 801975a:	f000 f887 	bl	801986c <__sinit>
 801975e:	4b14      	ldr	r3, [pc, #80]	; (80197b0 <_fflush_r+0x6c>)
 8019760:	429c      	cmp	r4, r3
 8019762:	d11b      	bne.n	801979c <_fflush_r+0x58>
 8019764:	686c      	ldr	r4, [r5, #4]
 8019766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801976a:	2b00      	cmp	r3, #0
 801976c:	d0ef      	beq.n	801974e <_fflush_r+0xa>
 801976e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019770:	07d0      	lsls	r0, r2, #31
 8019772:	d404      	bmi.n	801977e <_fflush_r+0x3a>
 8019774:	0599      	lsls	r1, r3, #22
 8019776:	d402      	bmi.n	801977e <_fflush_r+0x3a>
 8019778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801977a:	f000 f915 	bl	80199a8 <__retarget_lock_acquire_recursive>
 801977e:	4628      	mov	r0, r5
 8019780:	4621      	mov	r1, r4
 8019782:	f7ff ff59 	bl	8019638 <__sflush_r>
 8019786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019788:	07da      	lsls	r2, r3, #31
 801978a:	4605      	mov	r5, r0
 801978c:	d4e0      	bmi.n	8019750 <_fflush_r+0xc>
 801978e:	89a3      	ldrh	r3, [r4, #12]
 8019790:	059b      	lsls	r3, r3, #22
 8019792:	d4dd      	bmi.n	8019750 <_fflush_r+0xc>
 8019794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019796:	f000 f908 	bl	80199aa <__retarget_lock_release_recursive>
 801979a:	e7d9      	b.n	8019750 <_fflush_r+0xc>
 801979c:	4b05      	ldr	r3, [pc, #20]	; (80197b4 <_fflush_r+0x70>)
 801979e:	429c      	cmp	r4, r3
 80197a0:	d101      	bne.n	80197a6 <_fflush_r+0x62>
 80197a2:	68ac      	ldr	r4, [r5, #8]
 80197a4:	e7df      	b.n	8019766 <_fflush_r+0x22>
 80197a6:	4b04      	ldr	r3, [pc, #16]	; (80197b8 <_fflush_r+0x74>)
 80197a8:	429c      	cmp	r4, r3
 80197aa:	bf08      	it	eq
 80197ac:	68ec      	ldreq	r4, [r5, #12]
 80197ae:	e7da      	b.n	8019766 <_fflush_r+0x22>
 80197b0:	0801a238 	.word	0x0801a238
 80197b4:	0801a258 	.word	0x0801a258
 80197b8:	0801a218 	.word	0x0801a218

080197bc <std>:
 80197bc:	2300      	movs	r3, #0
 80197be:	b510      	push	{r4, lr}
 80197c0:	4604      	mov	r4, r0
 80197c2:	e9c0 3300 	strd	r3, r3, [r0]
 80197c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80197ca:	6083      	str	r3, [r0, #8]
 80197cc:	8181      	strh	r1, [r0, #12]
 80197ce:	6643      	str	r3, [r0, #100]	; 0x64
 80197d0:	81c2      	strh	r2, [r0, #14]
 80197d2:	6183      	str	r3, [r0, #24]
 80197d4:	4619      	mov	r1, r3
 80197d6:	2208      	movs	r2, #8
 80197d8:	305c      	adds	r0, #92	; 0x5c
 80197da:	f7ff fdef 	bl	80193bc <memset>
 80197de:	4b05      	ldr	r3, [pc, #20]	; (80197f4 <std+0x38>)
 80197e0:	6263      	str	r3, [r4, #36]	; 0x24
 80197e2:	4b05      	ldr	r3, [pc, #20]	; (80197f8 <std+0x3c>)
 80197e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80197e6:	4b05      	ldr	r3, [pc, #20]	; (80197fc <std+0x40>)
 80197e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80197ea:	4b05      	ldr	r3, [pc, #20]	; (8019800 <std+0x44>)
 80197ec:	6224      	str	r4, [r4, #32]
 80197ee:	6323      	str	r3, [r4, #48]	; 0x30
 80197f0:	bd10      	pop	{r4, pc}
 80197f2:	bf00      	nop
 80197f4:	08019c59 	.word	0x08019c59
 80197f8:	08019c7b 	.word	0x08019c7b
 80197fc:	08019cb3 	.word	0x08019cb3
 8019800:	08019cd7 	.word	0x08019cd7

08019804 <_cleanup_r>:
 8019804:	4901      	ldr	r1, [pc, #4]	; (801980c <_cleanup_r+0x8>)
 8019806:	f000 b8af 	b.w	8019968 <_fwalk_reent>
 801980a:	bf00      	nop
 801980c:	08019745 	.word	0x08019745

08019810 <__sfmoreglue>:
 8019810:	b570      	push	{r4, r5, r6, lr}
 8019812:	2268      	movs	r2, #104	; 0x68
 8019814:	1e4d      	subs	r5, r1, #1
 8019816:	4355      	muls	r5, r2
 8019818:	460e      	mov	r6, r1
 801981a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801981e:	f000 f997 	bl	8019b50 <_malloc_r>
 8019822:	4604      	mov	r4, r0
 8019824:	b140      	cbz	r0, 8019838 <__sfmoreglue+0x28>
 8019826:	2100      	movs	r1, #0
 8019828:	e9c0 1600 	strd	r1, r6, [r0]
 801982c:	300c      	adds	r0, #12
 801982e:	60a0      	str	r0, [r4, #8]
 8019830:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019834:	f7ff fdc2 	bl	80193bc <memset>
 8019838:	4620      	mov	r0, r4
 801983a:	bd70      	pop	{r4, r5, r6, pc}

0801983c <__sfp_lock_acquire>:
 801983c:	4801      	ldr	r0, [pc, #4]	; (8019844 <__sfp_lock_acquire+0x8>)
 801983e:	f000 b8b3 	b.w	80199a8 <__retarget_lock_acquire_recursive>
 8019842:	bf00      	nop
 8019844:	2400696d 	.word	0x2400696d

08019848 <__sfp_lock_release>:
 8019848:	4801      	ldr	r0, [pc, #4]	; (8019850 <__sfp_lock_release+0x8>)
 801984a:	f000 b8ae 	b.w	80199aa <__retarget_lock_release_recursive>
 801984e:	bf00      	nop
 8019850:	2400696d 	.word	0x2400696d

08019854 <__sinit_lock_acquire>:
 8019854:	4801      	ldr	r0, [pc, #4]	; (801985c <__sinit_lock_acquire+0x8>)
 8019856:	f000 b8a7 	b.w	80199a8 <__retarget_lock_acquire_recursive>
 801985a:	bf00      	nop
 801985c:	2400696e 	.word	0x2400696e

08019860 <__sinit_lock_release>:
 8019860:	4801      	ldr	r0, [pc, #4]	; (8019868 <__sinit_lock_release+0x8>)
 8019862:	f000 b8a2 	b.w	80199aa <__retarget_lock_release_recursive>
 8019866:	bf00      	nop
 8019868:	2400696e 	.word	0x2400696e

0801986c <__sinit>:
 801986c:	b510      	push	{r4, lr}
 801986e:	4604      	mov	r4, r0
 8019870:	f7ff fff0 	bl	8019854 <__sinit_lock_acquire>
 8019874:	69a3      	ldr	r3, [r4, #24]
 8019876:	b11b      	cbz	r3, 8019880 <__sinit+0x14>
 8019878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801987c:	f7ff bff0 	b.w	8019860 <__sinit_lock_release>
 8019880:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019884:	6523      	str	r3, [r4, #80]	; 0x50
 8019886:	4b13      	ldr	r3, [pc, #76]	; (80198d4 <__sinit+0x68>)
 8019888:	4a13      	ldr	r2, [pc, #76]	; (80198d8 <__sinit+0x6c>)
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	62a2      	str	r2, [r4, #40]	; 0x28
 801988e:	42a3      	cmp	r3, r4
 8019890:	bf04      	itt	eq
 8019892:	2301      	moveq	r3, #1
 8019894:	61a3      	streq	r3, [r4, #24]
 8019896:	4620      	mov	r0, r4
 8019898:	f000 f820 	bl	80198dc <__sfp>
 801989c:	6060      	str	r0, [r4, #4]
 801989e:	4620      	mov	r0, r4
 80198a0:	f000 f81c 	bl	80198dc <__sfp>
 80198a4:	60a0      	str	r0, [r4, #8]
 80198a6:	4620      	mov	r0, r4
 80198a8:	f000 f818 	bl	80198dc <__sfp>
 80198ac:	2200      	movs	r2, #0
 80198ae:	60e0      	str	r0, [r4, #12]
 80198b0:	2104      	movs	r1, #4
 80198b2:	6860      	ldr	r0, [r4, #4]
 80198b4:	f7ff ff82 	bl	80197bc <std>
 80198b8:	68a0      	ldr	r0, [r4, #8]
 80198ba:	2201      	movs	r2, #1
 80198bc:	2109      	movs	r1, #9
 80198be:	f7ff ff7d 	bl	80197bc <std>
 80198c2:	68e0      	ldr	r0, [r4, #12]
 80198c4:	2202      	movs	r2, #2
 80198c6:	2112      	movs	r1, #18
 80198c8:	f7ff ff78 	bl	80197bc <std>
 80198cc:	2301      	movs	r3, #1
 80198ce:	61a3      	str	r3, [r4, #24]
 80198d0:	e7d2      	b.n	8019878 <__sinit+0xc>
 80198d2:	bf00      	nop
 80198d4:	0801a214 	.word	0x0801a214
 80198d8:	08019805 	.word	0x08019805

080198dc <__sfp>:
 80198dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198de:	4607      	mov	r7, r0
 80198e0:	f7ff ffac 	bl	801983c <__sfp_lock_acquire>
 80198e4:	4b1e      	ldr	r3, [pc, #120]	; (8019960 <__sfp+0x84>)
 80198e6:	681e      	ldr	r6, [r3, #0]
 80198e8:	69b3      	ldr	r3, [r6, #24]
 80198ea:	b913      	cbnz	r3, 80198f2 <__sfp+0x16>
 80198ec:	4630      	mov	r0, r6
 80198ee:	f7ff ffbd 	bl	801986c <__sinit>
 80198f2:	3648      	adds	r6, #72	; 0x48
 80198f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80198f8:	3b01      	subs	r3, #1
 80198fa:	d503      	bpl.n	8019904 <__sfp+0x28>
 80198fc:	6833      	ldr	r3, [r6, #0]
 80198fe:	b30b      	cbz	r3, 8019944 <__sfp+0x68>
 8019900:	6836      	ldr	r6, [r6, #0]
 8019902:	e7f7      	b.n	80198f4 <__sfp+0x18>
 8019904:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019908:	b9d5      	cbnz	r5, 8019940 <__sfp+0x64>
 801990a:	4b16      	ldr	r3, [pc, #88]	; (8019964 <__sfp+0x88>)
 801990c:	60e3      	str	r3, [r4, #12]
 801990e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019912:	6665      	str	r5, [r4, #100]	; 0x64
 8019914:	f000 f847 	bl	80199a6 <__retarget_lock_init_recursive>
 8019918:	f7ff ff96 	bl	8019848 <__sfp_lock_release>
 801991c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019920:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019924:	6025      	str	r5, [r4, #0]
 8019926:	61a5      	str	r5, [r4, #24]
 8019928:	2208      	movs	r2, #8
 801992a:	4629      	mov	r1, r5
 801992c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019930:	f7ff fd44 	bl	80193bc <memset>
 8019934:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019938:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801993c:	4620      	mov	r0, r4
 801993e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019940:	3468      	adds	r4, #104	; 0x68
 8019942:	e7d9      	b.n	80198f8 <__sfp+0x1c>
 8019944:	2104      	movs	r1, #4
 8019946:	4638      	mov	r0, r7
 8019948:	f7ff ff62 	bl	8019810 <__sfmoreglue>
 801994c:	4604      	mov	r4, r0
 801994e:	6030      	str	r0, [r6, #0]
 8019950:	2800      	cmp	r0, #0
 8019952:	d1d5      	bne.n	8019900 <__sfp+0x24>
 8019954:	f7ff ff78 	bl	8019848 <__sfp_lock_release>
 8019958:	230c      	movs	r3, #12
 801995a:	603b      	str	r3, [r7, #0]
 801995c:	e7ee      	b.n	801993c <__sfp+0x60>
 801995e:	bf00      	nop
 8019960:	0801a214 	.word	0x0801a214
 8019964:	ffff0001 	.word	0xffff0001

08019968 <_fwalk_reent>:
 8019968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801996c:	4606      	mov	r6, r0
 801996e:	4688      	mov	r8, r1
 8019970:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019974:	2700      	movs	r7, #0
 8019976:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801997a:	f1b9 0901 	subs.w	r9, r9, #1
 801997e:	d505      	bpl.n	801998c <_fwalk_reent+0x24>
 8019980:	6824      	ldr	r4, [r4, #0]
 8019982:	2c00      	cmp	r4, #0
 8019984:	d1f7      	bne.n	8019976 <_fwalk_reent+0xe>
 8019986:	4638      	mov	r0, r7
 8019988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801998c:	89ab      	ldrh	r3, [r5, #12]
 801998e:	2b01      	cmp	r3, #1
 8019990:	d907      	bls.n	80199a2 <_fwalk_reent+0x3a>
 8019992:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019996:	3301      	adds	r3, #1
 8019998:	d003      	beq.n	80199a2 <_fwalk_reent+0x3a>
 801999a:	4629      	mov	r1, r5
 801999c:	4630      	mov	r0, r6
 801999e:	47c0      	blx	r8
 80199a0:	4307      	orrs	r7, r0
 80199a2:	3568      	adds	r5, #104	; 0x68
 80199a4:	e7e9      	b.n	801997a <_fwalk_reent+0x12>

080199a6 <__retarget_lock_init_recursive>:
 80199a6:	4770      	bx	lr

080199a8 <__retarget_lock_acquire_recursive>:
 80199a8:	4770      	bx	lr

080199aa <__retarget_lock_release_recursive>:
 80199aa:	4770      	bx	lr

080199ac <__swhatbuf_r>:
 80199ac:	b570      	push	{r4, r5, r6, lr}
 80199ae:	460e      	mov	r6, r1
 80199b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199b4:	2900      	cmp	r1, #0
 80199b6:	b096      	sub	sp, #88	; 0x58
 80199b8:	4614      	mov	r4, r2
 80199ba:	461d      	mov	r5, r3
 80199bc:	da08      	bge.n	80199d0 <__swhatbuf_r+0x24>
 80199be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80199c2:	2200      	movs	r2, #0
 80199c4:	602a      	str	r2, [r5, #0]
 80199c6:	061a      	lsls	r2, r3, #24
 80199c8:	d410      	bmi.n	80199ec <__swhatbuf_r+0x40>
 80199ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80199ce:	e00e      	b.n	80199ee <__swhatbuf_r+0x42>
 80199d0:	466a      	mov	r2, sp
 80199d2:	f000 f9a7 	bl	8019d24 <_fstat_r>
 80199d6:	2800      	cmp	r0, #0
 80199d8:	dbf1      	blt.n	80199be <__swhatbuf_r+0x12>
 80199da:	9a01      	ldr	r2, [sp, #4]
 80199dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80199e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80199e4:	425a      	negs	r2, r3
 80199e6:	415a      	adcs	r2, r3
 80199e8:	602a      	str	r2, [r5, #0]
 80199ea:	e7ee      	b.n	80199ca <__swhatbuf_r+0x1e>
 80199ec:	2340      	movs	r3, #64	; 0x40
 80199ee:	2000      	movs	r0, #0
 80199f0:	6023      	str	r3, [r4, #0]
 80199f2:	b016      	add	sp, #88	; 0x58
 80199f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080199f8 <__smakebuf_r>:
 80199f8:	898b      	ldrh	r3, [r1, #12]
 80199fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80199fc:	079d      	lsls	r5, r3, #30
 80199fe:	4606      	mov	r6, r0
 8019a00:	460c      	mov	r4, r1
 8019a02:	d507      	bpl.n	8019a14 <__smakebuf_r+0x1c>
 8019a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019a08:	6023      	str	r3, [r4, #0]
 8019a0a:	6123      	str	r3, [r4, #16]
 8019a0c:	2301      	movs	r3, #1
 8019a0e:	6163      	str	r3, [r4, #20]
 8019a10:	b002      	add	sp, #8
 8019a12:	bd70      	pop	{r4, r5, r6, pc}
 8019a14:	ab01      	add	r3, sp, #4
 8019a16:	466a      	mov	r2, sp
 8019a18:	f7ff ffc8 	bl	80199ac <__swhatbuf_r>
 8019a1c:	9900      	ldr	r1, [sp, #0]
 8019a1e:	4605      	mov	r5, r0
 8019a20:	4630      	mov	r0, r6
 8019a22:	f000 f895 	bl	8019b50 <_malloc_r>
 8019a26:	b948      	cbnz	r0, 8019a3c <__smakebuf_r+0x44>
 8019a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a2c:	059a      	lsls	r2, r3, #22
 8019a2e:	d4ef      	bmi.n	8019a10 <__smakebuf_r+0x18>
 8019a30:	f023 0303 	bic.w	r3, r3, #3
 8019a34:	f043 0302 	orr.w	r3, r3, #2
 8019a38:	81a3      	strh	r3, [r4, #12]
 8019a3a:	e7e3      	b.n	8019a04 <__smakebuf_r+0xc>
 8019a3c:	4b0d      	ldr	r3, [pc, #52]	; (8019a74 <__smakebuf_r+0x7c>)
 8019a3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019a40:	89a3      	ldrh	r3, [r4, #12]
 8019a42:	6020      	str	r0, [r4, #0]
 8019a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a48:	81a3      	strh	r3, [r4, #12]
 8019a4a:	9b00      	ldr	r3, [sp, #0]
 8019a4c:	6163      	str	r3, [r4, #20]
 8019a4e:	9b01      	ldr	r3, [sp, #4]
 8019a50:	6120      	str	r0, [r4, #16]
 8019a52:	b15b      	cbz	r3, 8019a6c <__smakebuf_r+0x74>
 8019a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a58:	4630      	mov	r0, r6
 8019a5a:	f000 f975 	bl	8019d48 <_isatty_r>
 8019a5e:	b128      	cbz	r0, 8019a6c <__smakebuf_r+0x74>
 8019a60:	89a3      	ldrh	r3, [r4, #12]
 8019a62:	f023 0303 	bic.w	r3, r3, #3
 8019a66:	f043 0301 	orr.w	r3, r3, #1
 8019a6a:	81a3      	strh	r3, [r4, #12]
 8019a6c:	89a0      	ldrh	r0, [r4, #12]
 8019a6e:	4305      	orrs	r5, r0
 8019a70:	81a5      	strh	r5, [r4, #12]
 8019a72:	e7cd      	b.n	8019a10 <__smakebuf_r+0x18>
 8019a74:	08019805 	.word	0x08019805

08019a78 <_free_r>:
 8019a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a7a:	2900      	cmp	r1, #0
 8019a7c:	d044      	beq.n	8019b08 <_free_r+0x90>
 8019a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a82:	9001      	str	r0, [sp, #4]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	f1a1 0404 	sub.w	r4, r1, #4
 8019a8a:	bfb8      	it	lt
 8019a8c:	18e4      	addlt	r4, r4, r3
 8019a8e:	f000 f97d 	bl	8019d8c <__malloc_lock>
 8019a92:	4a1e      	ldr	r2, [pc, #120]	; (8019b0c <_free_r+0x94>)
 8019a94:	9801      	ldr	r0, [sp, #4]
 8019a96:	6813      	ldr	r3, [r2, #0]
 8019a98:	b933      	cbnz	r3, 8019aa8 <_free_r+0x30>
 8019a9a:	6063      	str	r3, [r4, #4]
 8019a9c:	6014      	str	r4, [r2, #0]
 8019a9e:	b003      	add	sp, #12
 8019aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019aa4:	f000 b978 	b.w	8019d98 <__malloc_unlock>
 8019aa8:	42a3      	cmp	r3, r4
 8019aaa:	d908      	bls.n	8019abe <_free_r+0x46>
 8019aac:	6825      	ldr	r5, [r4, #0]
 8019aae:	1961      	adds	r1, r4, r5
 8019ab0:	428b      	cmp	r3, r1
 8019ab2:	bf01      	itttt	eq
 8019ab4:	6819      	ldreq	r1, [r3, #0]
 8019ab6:	685b      	ldreq	r3, [r3, #4]
 8019ab8:	1949      	addeq	r1, r1, r5
 8019aba:	6021      	streq	r1, [r4, #0]
 8019abc:	e7ed      	b.n	8019a9a <_free_r+0x22>
 8019abe:	461a      	mov	r2, r3
 8019ac0:	685b      	ldr	r3, [r3, #4]
 8019ac2:	b10b      	cbz	r3, 8019ac8 <_free_r+0x50>
 8019ac4:	42a3      	cmp	r3, r4
 8019ac6:	d9fa      	bls.n	8019abe <_free_r+0x46>
 8019ac8:	6811      	ldr	r1, [r2, #0]
 8019aca:	1855      	adds	r5, r2, r1
 8019acc:	42a5      	cmp	r5, r4
 8019ace:	d10b      	bne.n	8019ae8 <_free_r+0x70>
 8019ad0:	6824      	ldr	r4, [r4, #0]
 8019ad2:	4421      	add	r1, r4
 8019ad4:	1854      	adds	r4, r2, r1
 8019ad6:	42a3      	cmp	r3, r4
 8019ad8:	6011      	str	r1, [r2, #0]
 8019ada:	d1e0      	bne.n	8019a9e <_free_r+0x26>
 8019adc:	681c      	ldr	r4, [r3, #0]
 8019ade:	685b      	ldr	r3, [r3, #4]
 8019ae0:	6053      	str	r3, [r2, #4]
 8019ae2:	4421      	add	r1, r4
 8019ae4:	6011      	str	r1, [r2, #0]
 8019ae6:	e7da      	b.n	8019a9e <_free_r+0x26>
 8019ae8:	d902      	bls.n	8019af0 <_free_r+0x78>
 8019aea:	230c      	movs	r3, #12
 8019aec:	6003      	str	r3, [r0, #0]
 8019aee:	e7d6      	b.n	8019a9e <_free_r+0x26>
 8019af0:	6825      	ldr	r5, [r4, #0]
 8019af2:	1961      	adds	r1, r4, r5
 8019af4:	428b      	cmp	r3, r1
 8019af6:	bf04      	itt	eq
 8019af8:	6819      	ldreq	r1, [r3, #0]
 8019afa:	685b      	ldreq	r3, [r3, #4]
 8019afc:	6063      	str	r3, [r4, #4]
 8019afe:	bf04      	itt	eq
 8019b00:	1949      	addeq	r1, r1, r5
 8019b02:	6021      	streq	r1, [r4, #0]
 8019b04:	6054      	str	r4, [r2, #4]
 8019b06:	e7ca      	b.n	8019a9e <_free_r+0x26>
 8019b08:	b003      	add	sp, #12
 8019b0a:	bd30      	pop	{r4, r5, pc}
 8019b0c:	24006970 	.word	0x24006970

08019b10 <sbrk_aligned>:
 8019b10:	b570      	push	{r4, r5, r6, lr}
 8019b12:	4e0e      	ldr	r6, [pc, #56]	; (8019b4c <sbrk_aligned+0x3c>)
 8019b14:	460c      	mov	r4, r1
 8019b16:	6831      	ldr	r1, [r6, #0]
 8019b18:	4605      	mov	r5, r0
 8019b1a:	b911      	cbnz	r1, 8019b22 <sbrk_aligned+0x12>
 8019b1c:	f000 f88c 	bl	8019c38 <_sbrk_r>
 8019b20:	6030      	str	r0, [r6, #0]
 8019b22:	4621      	mov	r1, r4
 8019b24:	4628      	mov	r0, r5
 8019b26:	f000 f887 	bl	8019c38 <_sbrk_r>
 8019b2a:	1c43      	adds	r3, r0, #1
 8019b2c:	d00a      	beq.n	8019b44 <sbrk_aligned+0x34>
 8019b2e:	1cc4      	adds	r4, r0, #3
 8019b30:	f024 0403 	bic.w	r4, r4, #3
 8019b34:	42a0      	cmp	r0, r4
 8019b36:	d007      	beq.n	8019b48 <sbrk_aligned+0x38>
 8019b38:	1a21      	subs	r1, r4, r0
 8019b3a:	4628      	mov	r0, r5
 8019b3c:	f000 f87c 	bl	8019c38 <_sbrk_r>
 8019b40:	3001      	adds	r0, #1
 8019b42:	d101      	bne.n	8019b48 <sbrk_aligned+0x38>
 8019b44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019b48:	4620      	mov	r0, r4
 8019b4a:	bd70      	pop	{r4, r5, r6, pc}
 8019b4c:	24006974 	.word	0x24006974

08019b50 <_malloc_r>:
 8019b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b54:	1ccd      	adds	r5, r1, #3
 8019b56:	f025 0503 	bic.w	r5, r5, #3
 8019b5a:	3508      	adds	r5, #8
 8019b5c:	2d0c      	cmp	r5, #12
 8019b5e:	bf38      	it	cc
 8019b60:	250c      	movcc	r5, #12
 8019b62:	2d00      	cmp	r5, #0
 8019b64:	4607      	mov	r7, r0
 8019b66:	db01      	blt.n	8019b6c <_malloc_r+0x1c>
 8019b68:	42a9      	cmp	r1, r5
 8019b6a:	d905      	bls.n	8019b78 <_malloc_r+0x28>
 8019b6c:	230c      	movs	r3, #12
 8019b6e:	603b      	str	r3, [r7, #0]
 8019b70:	2600      	movs	r6, #0
 8019b72:	4630      	mov	r0, r6
 8019b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b78:	4e2e      	ldr	r6, [pc, #184]	; (8019c34 <_malloc_r+0xe4>)
 8019b7a:	f000 f907 	bl	8019d8c <__malloc_lock>
 8019b7e:	6833      	ldr	r3, [r6, #0]
 8019b80:	461c      	mov	r4, r3
 8019b82:	bb34      	cbnz	r4, 8019bd2 <_malloc_r+0x82>
 8019b84:	4629      	mov	r1, r5
 8019b86:	4638      	mov	r0, r7
 8019b88:	f7ff ffc2 	bl	8019b10 <sbrk_aligned>
 8019b8c:	1c43      	adds	r3, r0, #1
 8019b8e:	4604      	mov	r4, r0
 8019b90:	d14d      	bne.n	8019c2e <_malloc_r+0xde>
 8019b92:	6834      	ldr	r4, [r6, #0]
 8019b94:	4626      	mov	r6, r4
 8019b96:	2e00      	cmp	r6, #0
 8019b98:	d140      	bne.n	8019c1c <_malloc_r+0xcc>
 8019b9a:	6823      	ldr	r3, [r4, #0]
 8019b9c:	4631      	mov	r1, r6
 8019b9e:	4638      	mov	r0, r7
 8019ba0:	eb04 0803 	add.w	r8, r4, r3
 8019ba4:	f000 f848 	bl	8019c38 <_sbrk_r>
 8019ba8:	4580      	cmp	r8, r0
 8019baa:	d13a      	bne.n	8019c22 <_malloc_r+0xd2>
 8019bac:	6821      	ldr	r1, [r4, #0]
 8019bae:	3503      	adds	r5, #3
 8019bb0:	1a6d      	subs	r5, r5, r1
 8019bb2:	f025 0503 	bic.w	r5, r5, #3
 8019bb6:	3508      	adds	r5, #8
 8019bb8:	2d0c      	cmp	r5, #12
 8019bba:	bf38      	it	cc
 8019bbc:	250c      	movcc	r5, #12
 8019bbe:	4629      	mov	r1, r5
 8019bc0:	4638      	mov	r0, r7
 8019bc2:	f7ff ffa5 	bl	8019b10 <sbrk_aligned>
 8019bc6:	3001      	adds	r0, #1
 8019bc8:	d02b      	beq.n	8019c22 <_malloc_r+0xd2>
 8019bca:	6823      	ldr	r3, [r4, #0]
 8019bcc:	442b      	add	r3, r5
 8019bce:	6023      	str	r3, [r4, #0]
 8019bd0:	e00e      	b.n	8019bf0 <_malloc_r+0xa0>
 8019bd2:	6822      	ldr	r2, [r4, #0]
 8019bd4:	1b52      	subs	r2, r2, r5
 8019bd6:	d41e      	bmi.n	8019c16 <_malloc_r+0xc6>
 8019bd8:	2a0b      	cmp	r2, #11
 8019bda:	d916      	bls.n	8019c0a <_malloc_r+0xba>
 8019bdc:	1961      	adds	r1, r4, r5
 8019bde:	42a3      	cmp	r3, r4
 8019be0:	6025      	str	r5, [r4, #0]
 8019be2:	bf18      	it	ne
 8019be4:	6059      	strne	r1, [r3, #4]
 8019be6:	6863      	ldr	r3, [r4, #4]
 8019be8:	bf08      	it	eq
 8019bea:	6031      	streq	r1, [r6, #0]
 8019bec:	5162      	str	r2, [r4, r5]
 8019bee:	604b      	str	r3, [r1, #4]
 8019bf0:	4638      	mov	r0, r7
 8019bf2:	f104 060b 	add.w	r6, r4, #11
 8019bf6:	f000 f8cf 	bl	8019d98 <__malloc_unlock>
 8019bfa:	f026 0607 	bic.w	r6, r6, #7
 8019bfe:	1d23      	adds	r3, r4, #4
 8019c00:	1af2      	subs	r2, r6, r3
 8019c02:	d0b6      	beq.n	8019b72 <_malloc_r+0x22>
 8019c04:	1b9b      	subs	r3, r3, r6
 8019c06:	50a3      	str	r3, [r4, r2]
 8019c08:	e7b3      	b.n	8019b72 <_malloc_r+0x22>
 8019c0a:	6862      	ldr	r2, [r4, #4]
 8019c0c:	42a3      	cmp	r3, r4
 8019c0e:	bf0c      	ite	eq
 8019c10:	6032      	streq	r2, [r6, #0]
 8019c12:	605a      	strne	r2, [r3, #4]
 8019c14:	e7ec      	b.n	8019bf0 <_malloc_r+0xa0>
 8019c16:	4623      	mov	r3, r4
 8019c18:	6864      	ldr	r4, [r4, #4]
 8019c1a:	e7b2      	b.n	8019b82 <_malloc_r+0x32>
 8019c1c:	4634      	mov	r4, r6
 8019c1e:	6876      	ldr	r6, [r6, #4]
 8019c20:	e7b9      	b.n	8019b96 <_malloc_r+0x46>
 8019c22:	230c      	movs	r3, #12
 8019c24:	603b      	str	r3, [r7, #0]
 8019c26:	4638      	mov	r0, r7
 8019c28:	f000 f8b6 	bl	8019d98 <__malloc_unlock>
 8019c2c:	e7a1      	b.n	8019b72 <_malloc_r+0x22>
 8019c2e:	6025      	str	r5, [r4, #0]
 8019c30:	e7de      	b.n	8019bf0 <_malloc_r+0xa0>
 8019c32:	bf00      	nop
 8019c34:	24006970 	.word	0x24006970

08019c38 <_sbrk_r>:
 8019c38:	b538      	push	{r3, r4, r5, lr}
 8019c3a:	4d06      	ldr	r5, [pc, #24]	; (8019c54 <_sbrk_r+0x1c>)
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	4604      	mov	r4, r0
 8019c40:	4608      	mov	r0, r1
 8019c42:	602b      	str	r3, [r5, #0]
 8019c44:	f7e9 fffc 	bl	8003c40 <_sbrk>
 8019c48:	1c43      	adds	r3, r0, #1
 8019c4a:	d102      	bne.n	8019c52 <_sbrk_r+0x1a>
 8019c4c:	682b      	ldr	r3, [r5, #0]
 8019c4e:	b103      	cbz	r3, 8019c52 <_sbrk_r+0x1a>
 8019c50:	6023      	str	r3, [r4, #0]
 8019c52:	bd38      	pop	{r3, r4, r5, pc}
 8019c54:	24006978 	.word	0x24006978

08019c58 <__sread>:
 8019c58:	b510      	push	{r4, lr}
 8019c5a:	460c      	mov	r4, r1
 8019c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c60:	f000 f8a0 	bl	8019da4 <_read_r>
 8019c64:	2800      	cmp	r0, #0
 8019c66:	bfab      	itete	ge
 8019c68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8019c6c:	181b      	addge	r3, r3, r0
 8019c6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019c72:	bfac      	ite	ge
 8019c74:	6563      	strge	r3, [r4, #84]	; 0x54
 8019c76:	81a3      	strhlt	r3, [r4, #12]
 8019c78:	bd10      	pop	{r4, pc}

08019c7a <__swrite>:
 8019c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c7e:	461f      	mov	r7, r3
 8019c80:	898b      	ldrh	r3, [r1, #12]
 8019c82:	05db      	lsls	r3, r3, #23
 8019c84:	4605      	mov	r5, r0
 8019c86:	460c      	mov	r4, r1
 8019c88:	4616      	mov	r6, r2
 8019c8a:	d505      	bpl.n	8019c98 <__swrite+0x1e>
 8019c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c90:	2302      	movs	r3, #2
 8019c92:	2200      	movs	r2, #0
 8019c94:	f000 f868 	bl	8019d68 <_lseek_r>
 8019c98:	89a3      	ldrh	r3, [r4, #12]
 8019c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019ca2:	81a3      	strh	r3, [r4, #12]
 8019ca4:	4632      	mov	r2, r6
 8019ca6:	463b      	mov	r3, r7
 8019ca8:	4628      	mov	r0, r5
 8019caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019cae:	f000 b817 	b.w	8019ce0 <_write_r>

08019cb2 <__sseek>:
 8019cb2:	b510      	push	{r4, lr}
 8019cb4:	460c      	mov	r4, r1
 8019cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cba:	f000 f855 	bl	8019d68 <_lseek_r>
 8019cbe:	1c43      	adds	r3, r0, #1
 8019cc0:	89a3      	ldrh	r3, [r4, #12]
 8019cc2:	bf15      	itete	ne
 8019cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8019cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019cce:	81a3      	strheq	r3, [r4, #12]
 8019cd0:	bf18      	it	ne
 8019cd2:	81a3      	strhne	r3, [r4, #12]
 8019cd4:	bd10      	pop	{r4, pc}

08019cd6 <__sclose>:
 8019cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cda:	f000 b813 	b.w	8019d04 <_close_r>
	...

08019ce0 <_write_r>:
 8019ce0:	b538      	push	{r3, r4, r5, lr}
 8019ce2:	4d07      	ldr	r5, [pc, #28]	; (8019d00 <_write_r+0x20>)
 8019ce4:	4604      	mov	r4, r0
 8019ce6:	4608      	mov	r0, r1
 8019ce8:	4611      	mov	r1, r2
 8019cea:	2200      	movs	r2, #0
 8019cec:	602a      	str	r2, [r5, #0]
 8019cee:	461a      	mov	r2, r3
 8019cf0:	f7e9 ff55 	bl	8003b9e <_write>
 8019cf4:	1c43      	adds	r3, r0, #1
 8019cf6:	d102      	bne.n	8019cfe <_write_r+0x1e>
 8019cf8:	682b      	ldr	r3, [r5, #0]
 8019cfa:	b103      	cbz	r3, 8019cfe <_write_r+0x1e>
 8019cfc:	6023      	str	r3, [r4, #0]
 8019cfe:	bd38      	pop	{r3, r4, r5, pc}
 8019d00:	24006978 	.word	0x24006978

08019d04 <_close_r>:
 8019d04:	b538      	push	{r3, r4, r5, lr}
 8019d06:	4d06      	ldr	r5, [pc, #24]	; (8019d20 <_close_r+0x1c>)
 8019d08:	2300      	movs	r3, #0
 8019d0a:	4604      	mov	r4, r0
 8019d0c:	4608      	mov	r0, r1
 8019d0e:	602b      	str	r3, [r5, #0]
 8019d10:	f7e9 ff61 	bl	8003bd6 <_close>
 8019d14:	1c43      	adds	r3, r0, #1
 8019d16:	d102      	bne.n	8019d1e <_close_r+0x1a>
 8019d18:	682b      	ldr	r3, [r5, #0]
 8019d1a:	b103      	cbz	r3, 8019d1e <_close_r+0x1a>
 8019d1c:	6023      	str	r3, [r4, #0]
 8019d1e:	bd38      	pop	{r3, r4, r5, pc}
 8019d20:	24006978 	.word	0x24006978

08019d24 <_fstat_r>:
 8019d24:	b538      	push	{r3, r4, r5, lr}
 8019d26:	4d07      	ldr	r5, [pc, #28]	; (8019d44 <_fstat_r+0x20>)
 8019d28:	2300      	movs	r3, #0
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	4608      	mov	r0, r1
 8019d2e:	4611      	mov	r1, r2
 8019d30:	602b      	str	r3, [r5, #0]
 8019d32:	f7e9 ff5c 	bl	8003bee <_fstat>
 8019d36:	1c43      	adds	r3, r0, #1
 8019d38:	d102      	bne.n	8019d40 <_fstat_r+0x1c>
 8019d3a:	682b      	ldr	r3, [r5, #0]
 8019d3c:	b103      	cbz	r3, 8019d40 <_fstat_r+0x1c>
 8019d3e:	6023      	str	r3, [r4, #0]
 8019d40:	bd38      	pop	{r3, r4, r5, pc}
 8019d42:	bf00      	nop
 8019d44:	24006978 	.word	0x24006978

08019d48 <_isatty_r>:
 8019d48:	b538      	push	{r3, r4, r5, lr}
 8019d4a:	4d06      	ldr	r5, [pc, #24]	; (8019d64 <_isatty_r+0x1c>)
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	4604      	mov	r4, r0
 8019d50:	4608      	mov	r0, r1
 8019d52:	602b      	str	r3, [r5, #0]
 8019d54:	f7e9 ff5b 	bl	8003c0e <_isatty>
 8019d58:	1c43      	adds	r3, r0, #1
 8019d5a:	d102      	bne.n	8019d62 <_isatty_r+0x1a>
 8019d5c:	682b      	ldr	r3, [r5, #0]
 8019d5e:	b103      	cbz	r3, 8019d62 <_isatty_r+0x1a>
 8019d60:	6023      	str	r3, [r4, #0]
 8019d62:	bd38      	pop	{r3, r4, r5, pc}
 8019d64:	24006978 	.word	0x24006978

08019d68 <_lseek_r>:
 8019d68:	b538      	push	{r3, r4, r5, lr}
 8019d6a:	4d07      	ldr	r5, [pc, #28]	; (8019d88 <_lseek_r+0x20>)
 8019d6c:	4604      	mov	r4, r0
 8019d6e:	4608      	mov	r0, r1
 8019d70:	4611      	mov	r1, r2
 8019d72:	2200      	movs	r2, #0
 8019d74:	602a      	str	r2, [r5, #0]
 8019d76:	461a      	mov	r2, r3
 8019d78:	f7e9 ff54 	bl	8003c24 <_lseek>
 8019d7c:	1c43      	adds	r3, r0, #1
 8019d7e:	d102      	bne.n	8019d86 <_lseek_r+0x1e>
 8019d80:	682b      	ldr	r3, [r5, #0]
 8019d82:	b103      	cbz	r3, 8019d86 <_lseek_r+0x1e>
 8019d84:	6023      	str	r3, [r4, #0]
 8019d86:	bd38      	pop	{r3, r4, r5, pc}
 8019d88:	24006978 	.word	0x24006978

08019d8c <__malloc_lock>:
 8019d8c:	4801      	ldr	r0, [pc, #4]	; (8019d94 <__malloc_lock+0x8>)
 8019d8e:	f7ff be0b 	b.w	80199a8 <__retarget_lock_acquire_recursive>
 8019d92:	bf00      	nop
 8019d94:	2400696c 	.word	0x2400696c

08019d98 <__malloc_unlock>:
 8019d98:	4801      	ldr	r0, [pc, #4]	; (8019da0 <__malloc_unlock+0x8>)
 8019d9a:	f7ff be06 	b.w	80199aa <__retarget_lock_release_recursive>
 8019d9e:	bf00      	nop
 8019da0:	2400696c 	.word	0x2400696c

08019da4 <_read_r>:
 8019da4:	b538      	push	{r3, r4, r5, lr}
 8019da6:	4d07      	ldr	r5, [pc, #28]	; (8019dc4 <_read_r+0x20>)
 8019da8:	4604      	mov	r4, r0
 8019daa:	4608      	mov	r0, r1
 8019dac:	4611      	mov	r1, r2
 8019dae:	2200      	movs	r2, #0
 8019db0:	602a      	str	r2, [r5, #0]
 8019db2:	461a      	mov	r2, r3
 8019db4:	f7e9 fed6 	bl	8003b64 <_read>
 8019db8:	1c43      	adds	r3, r0, #1
 8019dba:	d102      	bne.n	8019dc2 <_read_r+0x1e>
 8019dbc:	682b      	ldr	r3, [r5, #0]
 8019dbe:	b103      	cbz	r3, 8019dc2 <_read_r+0x1e>
 8019dc0:	6023      	str	r3, [r4, #0]
 8019dc2:	bd38      	pop	{r3, r4, r5, pc}
 8019dc4:	24006978 	.word	0x24006978

08019dc8 <_init>:
 8019dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dca:	bf00      	nop
 8019dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dce:	bc08      	pop	{r3}
 8019dd0:	469e      	mov	lr, r3
 8019dd2:	4770      	bx	lr

08019dd4 <_fini>:
 8019dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dd6:	bf00      	nop
 8019dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dda:	bc08      	pop	{r3}
 8019ddc:	469e      	mov	lr, r3
 8019dde:	4770      	bx	lr
