
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a520  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801a7c0  0801a7c0  0002a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ac58  0801ac58  0002ac58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ac60  0801ac60  0002ac60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ac64  0801ac64  0002ac64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  0801ac68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000067fc  24000120  0801ad70  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400691c  0801ad70  0003691c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040419  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007ae0  00000000  00000000  0007054f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b50  00000000  00000000  00078030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002828  00000000  00000000  0007ab80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045d3e  00000000  00000000  0007d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000416ca  00000000  00000000  000c30e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019633b  00000000  00000000  001047b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029aaeb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bbbc  00000000  00000000  0029ab3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a7a8 	.word	0x0801a7a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0801a7a8 	.word	0x0801a7a8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fadd 	bl	8005c28 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f888 	bl	8003788 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 fbf8 	bl	8006e78 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f87b 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 fd3b 	bl	8006130 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f862 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 fd2d 	bl	8006130 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f854 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 fd1f 	bl	8006130 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f846 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 fd11 	bl	8006130 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f838 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 fd02 	bl	8006130 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f829 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f005 fcf3 	bl	8006130 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f81a 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f005 fce4 	bl	8006130 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f80b 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f005 fcd5 	bl	8006130 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f002 fffc 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 fcc6 	bl	8006130 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f002 ffed 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 fcb7 	bl	8006130 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f002 ffde 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 fca8 	bl	8006130 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f002 ffcf 	bl	8003788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400013c 	.word	0x2400013c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 f9c5 	bl	8005c28 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f002 ff70 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 fc30 	bl	8006130 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f002 ff57 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 fc22 	bl	8006130 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f002 ff49 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 fc14 	bl	8006130 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f002 ff3b 	bl	8003788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 fc06 	bl	8006130 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 ff2d 	bl	8003788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001a0 	.word	0x240001a0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a f9a8 	bl	800ad50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a f99c 	bl	800ad50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a f990 	bl	800ad50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 f83b 	bl	8007af0 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 fe82 	bl	8003788 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 fe7e 	bl	80057e0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 fe78 	bl	80057e0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f006 ffdb 	bl	8007af0 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 fe22 	bl	8003788 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000204 	.word	0x24000204
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400027c 	.word	0x2400027c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 f905 	bl	8019d9c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fba3 	bl	80072e4 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 fdf0 	bl	8003788 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 fdbe 	bl	8007744 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 fddb 	bl	8003788 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002f4 	.word	0x240002f4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a f87b 	bl	800ad50 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f006 ff26 	bl	8007af0 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fd6d 	bl	8003788 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fa70 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fa87 	bl	80071d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000308 	.word	0x24000308
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fa47 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fa5e 	bl	80071d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fa3f 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fa56 	bl	80071d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fa37 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fa4e 	bl	80071d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fa2f 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fa46 	bl	80071d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fa27 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fa3e 	bl	80071d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fa1f 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fa36 	bl	80071d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fa17 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fa2e 	bl	80071d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fa0f 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fa26 	bl	80071d8 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f018 ffe6 	bl	8019d9c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f009 fdfe 	bl	800aa6c <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fda3 	bl	800aa6c <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 fbf0 	bl	800a79c <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	24000380 	.word	0x24000380
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fb44 	bl	800a79c <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fc50 	bl	800aa6c <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fbed 	bl	800aa6c <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fa3a 	bl	800a79c <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fb18 	bl	800aa6c <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b04      	cmp	r3, #4
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 f923 	bl	800a79c <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fa30 	bl	800aa6c <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	24000380 	.word	0x24000380
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 fad2 	bl	8019d9c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 f90b 	bl	800aa6c <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f008 ff59 	bl	800a79c <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 f86d 	bl	800aa6c <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 f96d 	bl	8019d9c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 f964 	bl	8019d9c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f008 fe25 	bl	800a79c <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f008 fe12 	bl	800a79c <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 f8af 	bl	8019d9c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 f8a8 	bl	8019d9c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f008 fd6b 	bl	800a79c <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f008 fd83 	bl	800a8c0 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 fe2b 	bl	800aa6c <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fc77 	bl	800a79c <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	24000380 	.word	0x24000380
 8001f2c:	52002000 	.word	0x52002000

08001f30 <handle_error>:
#include "eeprom.h"

uint16_t VirtAddVarTab[NB_OF_VAR] = { 0x5555, 0x6666, 0x7777, 0x8888, 0x9999 };
uint16_t VarDataTab[NB_OF_VAR] = { 0, 0, 0, 0, 0 };

void handle_error(ERROR_STRUCT error) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	80b8      	strh	r0, [r7, #4]
	switch (error.detail) {
 8001f38:	797b      	ldrb	r3, [r7, #5]
 8001f3a:	2b14      	cmp	r3, #20
 8001f3c:	d831      	bhi.n	8001fa2 <handle_error+0x72>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <handle_error+0x14>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f99 	.word	0x08001f99
 8001f48:	08001f99 	.word	0x08001f99
 8001f4c:	08001f99 	.word	0x08001f99
 8001f50:	08001f99 	.word	0x08001f99
 8001f54:	08001f99 	.word	0x08001f99
 8001f58:	08001f99 	.word	0x08001f99
 8001f5c:	08001f99 	.word	0x08001f99
 8001f60:	08001f99 	.word	0x08001f99
 8001f64:	08001f99 	.word	0x08001f99
 8001f68:	08001f99 	.word	0x08001f99
 8001f6c:	08001f99 	.word	0x08001f99
 8001f70:	08001f99 	.word	0x08001f99
 8001f74:	08001f99 	.word	0x08001f99
 8001f78:	08001f99 	.word	0x08001f99
 8001f7c:	08001f99 	.word	0x08001f99
 8001f80:	08001f99 	.word	0x08001f99
 8001f84:	08001f99 	.word	0x08001f99
 8001f88:	08001f99 	.word	0x08001f99
 8001f8c:	08001fa3 	.word	0x08001fa3
 8001f90:	08001fa3 	.word	0x08001fa3
 8001f94:	08001fa3 	.word	0x08001fa3
	case ED_5vref:
	case ED_n200v:
	case ED_n800v:
	case ED_TMP1:
		// TODO: system reset?
		increment_error_counter(error.category);
 8001f98:	793b      	ldrb	r3, [r7, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f813 	bl	8001fc6 <increment_error_counter>
		break;
 8001fa0:	e000      	b.n	8001fa4 <handle_error+0x74>
		break;
	case ED_UNDEFINED:
		// TODO: send error packet?
		break;
	default:
		break;
 8001fa2:	bf00      	nop
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <error_counter_init>:

void error_counter_init() {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fb0:	f008 fc86 	bl	800a8c0 <HAL_FLASH_Unlock>
	  if( EE_Init() != EE_OK)
 8001fb4:	f7fe fef0 	bl	8000d98 <EE_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <error_counter_init+0x16>
	  {
		Error_Handler();
 8001fbe:	f001 fbe3 	bl	8003788 <Error_Handler>
	  }
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <increment_error_counter>:

void increment_error_counter(ERROR_CATEGORY category) {
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
	uint16_t counter_value;
	counter_value = get_eeprom_error_counter(category);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f810 	bl	8001ff8 <get_eeprom_error_counter>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	81fb      	strh	r3, [r7, #14]
	counter_value++;
 8001fdc:	89fb      	ldrh	r3, [r7, #14]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	81fb      	strh	r3, [r7, #14]
	set_eeprom_error_counter(category, counter_value);
 8001fe2:	89fa      	ldrh	r2, [r7, #14]
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f823 	bl	8002034 <set_eeprom_error_counter>

}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <get_eeprom_error_counter>:

uint16_t get_eeprom_error_counter(ERROR_CATEGORY category) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
	uint16_t retval = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	81fb      	strh	r3, [r7, #14]
	if ((EE_ReadVariable(VirtAddVarTab[category], &retval)) != HAL_OK) {
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	4a09      	ldr	r2, [pc, #36]	; (8002030 <get_eeprom_error_counter+0x38>)
 800200a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800200e:	f107 020e 	add.w	r2, r7, #14
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fb77 	bl	8001708 <EE_ReadVariable>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <get_eeprom_error_counter+0x2c>
		Error_Handler();
 8002020:	f001 fbb2 	bl	8003788 <Error_Handler>
	}
	return retval;
 8002024:	89fb      	ldrh	r3, [r7, #14]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	24000000 	.word	0x24000000

08002034 <set_eeprom_error_counter>:

void set_eeprom_error_counter(ERROR_CATEGORY category, uint16_t new_counter_value) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	460a      	mov	r2, r1
 800203e:	71fb      	strb	r3, [r7, #7]
 8002040:	4613      	mov	r3, r2
 8002042:	80bb      	strh	r3, [r7, #4]
	VarDataTab[category] = new_counter_value;
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	490c      	ldr	r1, [pc, #48]	; (8002078 <set_eeprom_error_counter+0x44>)
 8002048:	88ba      	ldrh	r2, [r7, #4]
 800204a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if ((EE_WriteVariable(VirtAddVarTab[category], VarDataTab[category]))
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <set_eeprom_error_counter+0x48>)
 8002052:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	4907      	ldr	r1, [pc, #28]	; (8002078 <set_eeprom_error_counter+0x44>)
 800205a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f7ff fb99 	bl	8001798 <EE_WriteVariable>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <set_eeprom_error_counter+0x3c>
			!= HAL_OK) {
		Error_Handler();
 800206c:	f001 fb8c 	bl	8003788 <Error_Handler>
	}
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	24000384 	.word	0x24000384
 800207c:	24000000 	.word	0x24000000

08002080 <reset_eeprom_error_counters>:


void reset_eeprom_error_counters() {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_VAR; i++) {
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	e00f      	b.n	80020ac <reset_eeprom_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0x00))
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <reset_eeprom_error_counters+0x3c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fb7e 	bl	8001798 <EE_WriteVariable>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <reset_eeprom_error_counters+0x26>
				!= HAL_OK) {
			Error_Handler();
 80020a2:	f001 fb71 	bl	8003788 <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3301      	adds	r3, #1
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	ddec      	ble.n	800208c <reset_eeprom_error_counters+0xc>
		}
	}
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	24000000 	.word	0x24000000

080020c0 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <vApplicationTickHook+0x18>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	4a03      	ldr	r2, [pc, #12]	; (80020d8 <vApplicationTickHook+0x18>)
 80020cc:	6013      	str	r3, [r2, #0]
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	24001a84 	.word	0x24001a84

080020dc <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80020f8:	4a24      	ldr	r2, [pc, #144]	; (800218c <MX_FREERTOS_Init+0x98>)
 80020fa:	2100      	movs	r1, #0
 80020fc:	4824      	ldr	r0, [pc, #144]	; (8002190 <MX_FREERTOS_Init+0x9c>)
 80020fe:	f014 fc7b 	bl	80169f8 <osThreadNew>
 8002102:	4603      	mov	r3, r0
 8002104:	4a23      	ldr	r2, [pc, #140]	; (8002194 <MX_FREERTOS_Init+0xa0>)
 8002106:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8002108:	4a23      	ldr	r2, [pc, #140]	; (8002198 <MX_FREERTOS_Init+0xa4>)
 800210a:	2100      	movs	r1, #0
 800210c:	4823      	ldr	r0, [pc, #140]	; (800219c <MX_FREERTOS_Init+0xa8>)
 800210e:	f014 fc73 	bl	80169f8 <osThreadNew>
 8002112:	4603      	mov	r3, r0
 8002114:	4a22      	ldr	r2, [pc, #136]	; (80021a0 <MX_FREERTOS_Init+0xac>)
 8002116:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002118:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <MX_FREERTOS_Init+0xb0>)
 800211a:	2100      	movs	r1, #0
 800211c:	4822      	ldr	r0, [pc, #136]	; (80021a8 <MX_FREERTOS_Init+0xb4>)
 800211e:	f014 fc6b 	bl	80169f8 <osThreadNew>
 8002122:	4603      	mov	r3, r0
 8002124:	4a21      	ldr	r2, [pc, #132]	; (80021ac <MX_FREERTOS_Init+0xb8>)
 8002126:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002128:	4a21      	ldr	r2, [pc, #132]	; (80021b0 <MX_FREERTOS_Init+0xbc>)
 800212a:	2100      	movs	r1, #0
 800212c:	4821      	ldr	r0, [pc, #132]	; (80021b4 <MX_FREERTOS_Init+0xc0>)
 800212e:	f014 fc63 	bl	80169f8 <osThreadNew>
 8002132:	4603      	mov	r3, r0
 8002134:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <MX_FREERTOS_Init+0xc4>)
 8002136:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002138:	4a20      	ldr	r2, [pc, #128]	; (80021bc <MX_FREERTOS_Init+0xc8>)
 800213a:	2100      	movs	r1, #0
 800213c:	4820      	ldr	r0, [pc, #128]	; (80021c0 <MX_FREERTOS_Init+0xcc>)
 800213e:	f014 fc5b 	bl	80169f8 <osThreadNew>
 8002142:	4603      	mov	r3, r0
 8002144:	4a1f      	ldr	r2, [pc, #124]	; (80021c4 <MX_FREERTOS_Init+0xd0>)
 8002146:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002148:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <MX_FREERTOS_Init+0xd4>)
 800214a:	2100      	movs	r1, #0
 800214c:	481f      	ldr	r0, [pc, #124]	; (80021cc <MX_FREERTOS_Init+0xd8>)
 800214e:	f014 fc53 	bl	80169f8 <osThreadNew>
 8002152:	4603      	mov	r3, r0
 8002154:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <MX_FREERTOS_Init+0xdc>)
 8002156:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002158:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <MX_FREERTOS_Init+0xe0>)
 800215a:	2100      	movs	r1, #0
 800215c:	481e      	ldr	r0, [pc, #120]	; (80021d8 <MX_FREERTOS_Init+0xe4>)
 800215e:	f014 fc4b 	bl	80169f8 <osThreadNew>
 8002162:	4603      	mov	r3, r0
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <MX_FREERTOS_Init+0xe8>)
 8002166:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002168:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <MX_FREERTOS_Init+0xec>)
 800216a:	2100      	movs	r1, #0
 800216c:	481d      	ldr	r0, [pc, #116]	; (80021e4 <MX_FREERTOS_Init+0xf0>)
 800216e:	f014 fc43 	bl	80169f8 <osThreadNew>
 8002172:	4603      	mov	r3, r0
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <MX_FREERTOS_Init+0xf4>)
 8002176:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002178:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <MX_FREERTOS_Init+0xf8>)
 800217a:	2100      	movs	r1, #0
 800217c:	481c      	ldr	r0, [pc, #112]	; (80021f0 <MX_FREERTOS_Init+0xfc>)
 800217e:	f014 fc3b 	bl	80169f8 <osThreadNew>
 8002182:	4603      	mov	r3, r0
 8002184:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <MX_FREERTOS_Init+0x100>)
 8002186:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	0801aa28 	.word	0x0801aa28
 8002190:	080021f9 	.word	0x080021f9
 8002194:	24000390 	.word	0x24000390
 8002198:	0801aa4c 	.word	0x0801aa4c
 800219c:	08002221 	.word	0x08002221
 80021a0:	240005f0 	.word	0x240005f0
 80021a4:	0801aa70 	.word	0x0801aa70
 80021a8:	08002249 	.word	0x08002249
 80021ac:	24000850 	.word	0x24000850
 80021b0:	0801aa94 	.word	0x0801aa94
 80021b4:	08002271 	.word	0x08002271
 80021b8:	24000ab0 	.word	0x24000ab0
 80021bc:	0801aab8 	.word	0x0801aab8
 80021c0:	080022e9 	.word	0x080022e9
 80021c4:	24000d10 	.word	0x24000d10
 80021c8:	0801aadc 	.word	0x0801aadc
 80021cc:	08002361 	.word	0x08002361
 80021d0:	24000f70 	.word	0x24000f70
 80021d4:	0801ab00 	.word	0x0801ab00
 80021d8:	08002389 	.word	0x08002389
 80021dc:	240011d0 	.word	0x240011d0
 80021e0:	0801ab24 	.word	0x0801ab24
 80021e4:	080023b9 	.word	0x080023b9
 80021e8:	24001430 	.word	0x24001430
 80021ec:	0801ab48 	.word	0x0801ab48
 80021f0:	08002489 	.word	0x08002489
 80021f4:	24001690 	.word	0x24001690

080021f8 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <PMT_init+0x24>)
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002208:	2200      	movs	r2, #0
 800220a:	2101      	movs	r1, #1
 800220c:	f014 fd76 	bl	8016cfc <osEventFlagsWait>

		create_pmt_packet();
 8002210:	f001 fac0 	bl	8003794 <create_pmt_packet>

		osThreadYield();
 8002214:	f014 fc82 	bl	8016b1c <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002218:	e7f2      	b.n	8002200 <PMT_init+0x8>
 800221a:	bf00      	nop
 800221c:	24001a34 	.word	0x24001a34

08002220 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <ERPA_init+0x24>)
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002230:	2200      	movs	r2, #0
 8002232:	2102      	movs	r1, #2
 8002234:	f014 fd62 	bl	8016cfc <osEventFlagsWait>

		create_erpa_packet();
 8002238:	f001 faf2 	bl	8003820 <create_erpa_packet>

		osThreadYield();
 800223c:	f014 fc6e 	bl	8016b1c <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002240:	e7f2      	b.n	8002228 <ERPA_init+0x8>
 8002242:	bf00      	nop
 8002244:	24001a34 	.word	0x24001a34

08002248 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <HK_init+0x24>)
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002258:	2200      	movs	r2, #0
 800225a:	2104      	movs	r1, #4
 800225c:	f014 fd4e 	bl	8016cfc <osEventFlagsWait>

		create_hk_packet();
 8002260:	f001 fb3c 	bl	80038dc <create_hk_packet>

		osThreadYield();
 8002264:	f014 fc5a 	bl	8016b1c <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002268:	e7f2      	b.n	8002250 <HK_init+0x8>
 800226a:	bf00      	nop
 800226c:	24001a34 	.word	0x24001a34

08002270 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002278:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <AUTOINIT_init+0x70>)
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002280:	2200      	movs	r2, #0
 8002282:	2104      	movs	r1, #4
 8002284:	f014 fd3a 	bl	8016cfc <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e012      	b.n	80022b4 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <AUTOINIT_init+0x74>)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002296:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <AUTOINIT_init+0x74>)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	889b      	ldrh	r3, [r3, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4619      	mov	r1, r3
 80022a4:	f008 ff1c 	bl	800b0e0 <HAL_GPIO_WritePin>
			osDelay(100);
 80022a8:	2064      	movs	r0, #100	; 0x64
 80022aa:	f014 fc57 	bl	8016b5c <osDelay>
		for (int i = 0; i < 7; i++) {
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3301      	adds	r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	dde9      	ble.n	800228e <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80022ba:	2308      	movs	r3, #8
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	e008      	b.n	80022d2 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2101      	movs	r1, #1
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 f884 	bl	80053d4 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b0d      	cmp	r3, #13
 80022d6:	ddf3      	ble.n	80022c0 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80022d8:	f014 fc20 	bl	8016b1c <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80022dc:	e7cc      	b.n	8002278 <AUTOINIT_init+0x8>
 80022de:	bf00      	nop
 80022e0:	24001a38 	.word	0x24001a38
 80022e4:	0801ab6c 	.word	0x0801ab6c

080022e8 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <AUTODEINIT_init+0x70>)
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022f8:	2200      	movs	r2, #0
 80022fa:	2108      	movs	r1, #8
 80022fc:	f014 fcfe 	bl	8016cfc <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8002300:	230d      	movs	r3, #13
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e008      	b.n	8002318 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f003 f861 	bl	80053d4 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3b01      	subs	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b07      	cmp	r3, #7
 800231c:	dcf3      	bgt.n	8002306 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 800231e:	2306      	movs	r3, #6
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	e012      	b.n	800234a <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <AUTODEINIT_init+0x74>)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800232c:	4a0b      	ldr	r2, [pc, #44]	; (800235c <AUTODEINIT_init+0x74>)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4413      	add	r3, r2
 8002334:	889b      	ldrh	r3, [r3, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	f008 fed1 	bl	800b0e0 <HAL_GPIO_WritePin>
			osDelay(100);
 800233e:	2064      	movs	r0, #100	; 0x64
 8002340:	f014 fc0c 	bl	8016b5c <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	3b01      	subs	r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	dae9      	bge.n	8002324 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8002350:	f014 fbe4 	bl	8016b1c <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002354:	e7cc      	b.n	80022f0 <AUTODEINIT_init+0x8>
 8002356:	bf00      	nop
 8002358:	24001a38 	.word	0x24001a38
 800235c:	0801ab6c 	.word	0x0801ab6c

08002360 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <Voltage_Monitor_init+0x24>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002370:	2200      	movs	r2, #0
 8002372:	2101      	movs	r1, #1
 8002374:	f014 fcc2 	bl	8016cfc <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8002378:	f003 f84c 	bl	8005414 <set_rail_monitor>
	  monitor_rails();
 800237c:	f003 f8ce 	bl	800551c <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002380:	e7f2      	b.n	8002368 <Voltage_Monitor_init+0x8>
 8002382:	bf00      	nop
 8002384:	24001a38 	.word	0x24001a38

08002388 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <STOP_init+0x2c>)
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002398:	2200      	movs	r2, #0
 800239a:	2102      	movs	r1, #2
 800239c:	f014 fcae 	bl	8016cfc <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <STOP_init+0x2c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2102      	movs	r1, #2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f014 fc76 	bl	8016c98 <osEventFlagsClear>

	  enter_stop();
 80023ac:	f001 f98c 	bl	80036c8 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80023b0:	e7ee      	b.n	8002390 <STOP_init+0x8>
 80023b2:	bf00      	nop
 80023b4:	24001a38 	.word	0x24001a38

080023b8 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af02      	add	r7, sp, #8
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80023c0:	4b29      	ldr	r3, [pc, #164]	; (8002468 <Science_init+0xb0>)
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c8:	2200      	movs	r2, #0
 80023ca:	2101      	movs	r1, #1
 80023cc:	f014 fc96 	bl	8016cfc <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e012      	b.n	80023fc <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80023d6:	4a25      	ldr	r2, [pc, #148]	; (800246c <Science_init+0xb4>)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80023de:	4a23      	ldr	r2, [pc, #140]	; (800246c <Science_init+0xb4>)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	889b      	ldrh	r3, [r3, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	4619      	mov	r1, r3
 80023ec:	f008 fe78 	bl	800b0e0 <HAL_GPIO_WritePin>
			osDelay(200);
 80023f0:	20c8      	movs	r0, #200	; 0xc8
 80023f2:	f014 fbb3 	bl	8016b5c <osDelay>
		for (int i = 0; i < 9; i++) {
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b08      	cmp	r3, #8
 8002400:	dde9      	ble.n	80023d6 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8002402:	2308      	movs	r3, #8
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	e008      	b.n	800241a <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2101      	movs	r1, #1
 800240e:	4618      	mov	r0, r3
 8002410:	f002 ffe0 	bl	80053d4 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3301      	adds	r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b10      	cmp	r3, #16
 800241e:	ddf3      	ble.n	8002408 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8002424:	2300      	movs	r3, #0
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2320      	movs	r3, #32
 800242a:	4a11      	ldr	r2, [pc, #68]	; (8002470 <Science_init+0xb8>)
 800242c:	2100      	movs	r1, #0
 800242e:	4811      	ldr	r0, [pc, #68]	; (8002474 <Science_init+0xbc>)
 8002430:	f004 ffd2 	bl	80073d8 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <Science_init+0xc0>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <Science_init+0xc4>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <Science_init+0xc8>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 8002446:	f001 fb97 	bl	8003b78 <reset_packet_sequence_numbers>
		TIM2->CCR4 = 312;
 800244a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800244e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8002454:	2100      	movs	r1, #0
 8002456:	480b      	ldr	r0, [pc, #44]	; (8002484 <Science_init+0xcc>)
 8002458:	f010 f8ec 	bl	8012634 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800245c:	b662      	cpsie	i
}
 800245e:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002460:	f014 fb5c 	bl	8016b1c <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002464:	e7ac      	b.n	80023c0 <Science_init+0x8>
 8002466:	bf00      	nop
 8002468:	24001a3c 	.word	0x24001a3c
 800246c:	0801ab6c 	.word	0x0801ab6c
 8002470:	2400000c 	.word	0x2400000c
 8002474:	240002f4 	.word	0x240002f4
 8002478:	24001a80 	.word	0x24001a80
 800247c:	24001a81 	.word	0x24001a81
 8002480:	24001a84 	.word	0x24001a84
 8002484:	24001d44 	.word	0x24001d44

08002488 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <Idle_init+0x94>)
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002498:	2200      	movs	r2, #0
 800249a:	2102      	movs	r1, #2
 800249c:	f014 fc2e 	bl	8016cfc <osEventFlagsWait>

		ERPA_ENABLED = 0;
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <Idle_init+0x98>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80024a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80024ae:	2100      	movs	r1, #0
 80024b0:	481c      	ldr	r0, [pc, #112]	; (8002524 <Idle_init+0x9c>)
 80024b2:	f010 fa19 	bl	80128e8 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <Idle_init+0xa0>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80024bc:	2100      	movs	r1, #0
 80024be:	481b      	ldr	r0, [pc, #108]	; (800252c <Idle_init+0xa4>)
 80024c0:	f005 f84a 	bl	8007558 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80024c4:	2310      	movs	r3, #16
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e008      	b.n	80024dc <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f002 ff7f 	bl	80053d4 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3b01      	subs	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b07      	cmp	r3, #7
 80024e0:	dcf3      	bgt.n	80024ca <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 80024e2:	2308      	movs	r3, #8
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	e012      	b.n	800250e <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80024e8:	4a11      	ldr	r2, [pc, #68]	; (8002530 <Idle_init+0xa8>)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80024f0:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <Idle_init+0xa8>)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	889b      	ldrh	r3, [r3, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	4619      	mov	r1, r3
 80024fe:	f008 fdef 	bl	800b0e0 <HAL_GPIO_WritePin>
			osDelay(200);
 8002502:	20c8      	movs	r0, #200	; 0xc8
 8002504:	f014 fb2a 	bl	8016b5c <osDelay>
		for (int i = 8; i >= 0; i--) {
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	3b01      	subs	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	dae9      	bge.n	80024e8 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 8002514:	f014 fb02 	bl	8016b1c <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002518:	e7ba      	b.n	8002490 <Idle_init+0x8>
 800251a:	bf00      	nop
 800251c:	24001a3c 	.word	0x24001a3c
 8002520:	24001a81 	.word	0x24001a81
 8002524:	24001d44 	.word	0x24001d44
 8002528:	24001a80 	.word	0x24001a80
 800252c:	240002f4 	.word	0x240002f4
 8002530:	0801ab6c 	.word	0x0801ab6c

08002534 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800254a:	4b34      	ldr	r3, [pc, #208]	; (800261c <MX_GPIO_Init+0xe8>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002550:	4a32      	ldr	r2, [pc, #200]	; (800261c <MX_GPIO_Init+0xe8>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <MX_GPIO_Init+0xe8>)
 800255c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002568:	4b2c      	ldr	r3, [pc, #176]	; (800261c <MX_GPIO_Init+0xe8>)
 800256a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256e:	4a2b      	ldr	r2, [pc, #172]	; (800261c <MX_GPIO_Init+0xe8>)
 8002570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <MX_GPIO_Init+0xe8>)
 800257a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	4b25      	ldr	r3, [pc, #148]	; (800261c <MX_GPIO_Init+0xe8>)
 8002588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258c:	4a23      	ldr	r2, [pc, #140]	; (800261c <MX_GPIO_Init+0xe8>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002596:	4b21      	ldr	r3, [pc, #132]	; (800261c <MX_GPIO_Init+0xe8>)
 8002598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <MX_GPIO_Init+0xe8>)
 80025a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <MX_GPIO_Init+0xe8>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025b4:	4b19      	ldr	r3, [pc, #100]	; (800261c <MX_GPIO_Init+0xe8>)
 80025b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80025c2:	2200      	movs	r2, #0
 80025c4:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80025c8:	4815      	ldr	r0, [pc, #84]	; (8002620 <MX_GPIO_Init+0xec>)
 80025ca:	f008 fd89 	bl	800b0e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2164      	movs	r1, #100	; 0x64
 80025d2:	4814      	ldr	r0, [pc, #80]	; (8002624 <MX_GPIO_Init+0xf0>)
 80025d4:	f008 fd84 	bl	800b0e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80025d8:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80025dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025de:	2301      	movs	r3, #1
 80025e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025e2:	2302      	movs	r3, #2
 80025e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	480b      	ldr	r0, [pc, #44]	; (8002620 <MX_GPIO_Init+0xec>)
 80025f2:	f008 fbad 	bl	800ad50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80025f6:	2364      	movs	r3, #100	; 0x64
 80025f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fa:	2301      	movs	r3, #1
 80025fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025fe:	2302      	movs	r3, #2
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_GPIO_Init+0xf0>)
 800260e:	f008 fb9f 	bl	800ad50 <HAL_GPIO_Init>

}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	58024400 	.word	0x58024400
 8002620:	58020800 	.word	0x58020800
 8002624:	58020400 	.word	0x58020400

08002628 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800262c:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <MX_I2C1_Init+0x78>)
 800262e:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <MX_I2C1_Init+0x7c>)
 8002630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <MX_I2C1_Init+0x78>)
 8002634:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <MX_I2C1_Init+0x80>)
 8002636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <MX_I2C1_Init+0x78>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <MX_I2C1_Init+0x78>)
 8002640:	2201      	movs	r2, #1
 8002642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <MX_I2C1_Init+0x78>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <MX_I2C1_Init+0x78>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <MX_I2C1_Init+0x78>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <MX_I2C1_Init+0x78>)
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_I2C1_Init+0x78>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002662:	480f      	ldr	r0, [pc, #60]	; (80026a0 <MX_I2C1_Init+0x78>)
 8002664:	f008 fd56 	bl	800b114 <HAL_I2C_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800266e:	f001 f88b 	bl	8003788 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002672:	2100      	movs	r1, #0
 8002674:	480a      	ldr	r0, [pc, #40]	; (80026a0 <MX_I2C1_Init+0x78>)
 8002676:	f00a fff5 	bl	800d664 <HAL_I2CEx_ConfigAnalogFilter>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002680:	f001 f882 	bl	8003788 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002684:	2100      	movs	r1, #0
 8002686:	4806      	ldr	r0, [pc, #24]	; (80026a0 <MX_I2C1_Init+0x78>)
 8002688:	f00b f837 	bl	800d6fa <HAL_I2CEx_ConfigDigitalFilter>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002692:	f001 f879 	bl	8003788 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002696:	2001      	movs	r0, #1
 8002698:	f00b f87c 	bl	800d794 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	240018f0 	.word	0x240018f0
 80026a4:	40005400 	.word	0x40005400
 80026a8:	00100517 	.word	0x00100517

080026ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0ba      	sub	sp, #232	; 0xe8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	22c0      	movs	r2, #192	; 0xc0
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f017 fb65 	bl	8019d9c <memset>
  if(i2cHandle->Instance==I2C1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a5d      	ldr	r2, [pc, #372]	; (800284c <HAL_I2C_MspInit+0x1a0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	f040 80b3 	bne.w	8002844 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026de:	f04f 0208 	mov.w	r2, #8
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f0:	f107 0310 	add.w	r3, r7, #16
 80026f4:	4618      	mov	r0, r3
 80026f6:	f00c f90f 	bl	800e918 <HAL_RCCEx_PeriphCLKConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002700:	f001 f842 	bl	8003788 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	4b52      	ldr	r3, [pc, #328]	; (8002850 <HAL_I2C_MspInit+0x1a4>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270a:	4a51      	ldr	r2, [pc, #324]	; (8002850 <HAL_I2C_MspInit+0x1a4>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002714:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <HAL_I2C_MspInit+0x1a4>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002722:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800272a:	2312      	movs	r3, #18
 800272c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800273c:	2304      	movs	r3, #4
 800273e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002742:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002746:	4619      	mov	r1, r3
 8002748:	4842      	ldr	r0, [pc, #264]	; (8002854 <HAL_I2C_MspInit+0x1a8>)
 800274a:	f008 fb01 	bl	800ad50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_I2C_MspInit+0x1a4>)
 8002750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002754:	4a3e      	ldr	r2, [pc, #248]	; (8002850 <HAL_I2C_MspInit+0x1a4>)
 8002756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800275a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800275e:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <HAL_I2C_MspInit+0x1a4>)
 8002760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 800276e:	4a3b      	ldr	r2, [pc, #236]	; (800285c <HAL_I2C_MspInit+0x1b0>)
 8002770:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002772:	4b39      	ldr	r3, [pc, #228]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 8002774:	2222      	movs	r2, #34	; 0x22
 8002776:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002778:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 800277a:	2240      	movs	r2, #64	; 0x40
 800277c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 8002780:	2200      	movs	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002784:	4b34      	ldr	r3, [pc, #208]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 8002786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800278a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800278c:	4b32      	ldr	r3, [pc, #200]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002798:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800279e:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 80027a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80027a4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80027ac:	482a      	ldr	r0, [pc, #168]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 80027ae:	f005 f99f 	bl	8007af0 <HAL_DMA_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 80027b8:	f000 ffe6 	bl	8003788 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a26      	ldr	r2, [pc, #152]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38
 80027c2:	4a25      	ldr	r2, [pc, #148]	; (8002858 <HAL_I2C_MspInit+0x1ac>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 80027c8:	4b25      	ldr	r3, [pc, #148]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 80027ca:	4a26      	ldr	r2, [pc, #152]	; (8002864 <HAL_I2C_MspInit+0x1b8>)
 80027cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 80027d0:	2221      	movs	r2, #33	; 0x21
 80027d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d4:	4b22      	ldr	r3, [pc, #136]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 80027dc:	2200      	movs	r2, #0
 80027de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027e0:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 80027e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027e6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 80027fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002800:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 8002804:	2200      	movs	r2, #0
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002808:	4815      	ldr	r0, [pc, #84]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 800280a:	f005 f971 	bl	8007af0 <HAL_DMA_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002814:	f000 ffb8 	bl	8003788 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a11      	ldr	r2, [pc, #68]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <HAL_I2C_MspInit+0x1b4>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	2105      	movs	r1, #5
 8002828:	201f      	movs	r0, #31
 800282a:	f004 fcbb 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800282e:	201f      	movs	r0, #31
 8002830:	f004 fcd2 	bl	80071d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2105      	movs	r1, #5
 8002838:	2020      	movs	r0, #32
 800283a:	f004 fcb3 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800283e:	2020      	movs	r0, #32
 8002840:	f004 fcca 	bl	80071d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002844:	bf00      	nop
 8002846:	37e8      	adds	r7, #232	; 0xe8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40005400 	.word	0x40005400
 8002850:	58024400 	.word	0x58024400
 8002854:	58020400 	.word	0x58020400
 8002858:	24001944 	.word	0x24001944
 800285c:	400200a0 	.word	0x400200a0
 8002860:	240019bc 	.word	0x240019bc
 8002864:	400200b8 	.word	0x400200b8

08002868 <__NVIC_SystemReset>:
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800286c:	f3bf 8f4f 	dsb	sy
}
 8002870:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <__NVIC_SystemReset+0x24>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800287a:	4904      	ldr	r1, [pc, #16]	; (800288c <__NVIC_SystemReset+0x24>)
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <__NVIC_SystemReset+0x28>)
 800287e:	4313      	orrs	r3, r2
 8002880:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002882:	f3bf 8f4f 	dsb	sy
}
 8002886:	bf00      	nop
    __NOP();
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <__NVIC_SystemReset+0x20>
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	05fa0004 	.word	0x05fa0004

08002894 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a20      	ldr	r2, [pc, #128]	; (8002920 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d106      	bne.n	80028b2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80028a4:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f014 f9b0 	bl	8016c10 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80028b0:	e032      	b.n	8002918 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d12b      	bne.n	8002912 <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80028c4:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2102      	movs	r1, #2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f014 f9a0 	bl	8016c10 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d113      	bne.n	8002902 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2101      	movs	r1, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f014 f995 	bl	8016c10 <osEventFlagsSet>
			if (HK_ENABLED){
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2104      	movs	r1, #4
 80028f6:	4618      	mov	r0, r3
 80028f8:	f014 f98a 	bl	8016c10 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	3301      	adds	r3, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800290e:	701a      	strb	r2, [r3, #0]
}
 8002910:	e002      	b.n	8002918 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002912:	480a      	ldr	r0, [pc, #40]	; (800293c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002914:	f017 fab8 	bl	8019e88 <puts>
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	24001d44 	.word	0x24001d44
 8002924:	24001a34 	.word	0x24001a34
 8002928:	24001d90 	.word	0x24001d90
 800292c:	24001a81 	.word	0x24001a81
 8002930:	24001a88 	.word	0x24001a88
 8002934:	24001a38 	.word	0x24001a38
 8002938:	24001a80 	.word	0x24001a80
 800293c:	0801a838 	.word	0x0801a838

08002940 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af02      	add	r7, sp, #8
 8002946:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002948:	2201      	movs	r2, #1
 800294a:	49f2      	ldr	r1, [pc, #968]	; (8002d14 <HAL_UART_RxCpltCallback+0x3d4>)
 800294c:	48f2      	ldr	r0, [pc, #968]	; (8002d18 <HAL_UART_RxCpltCallback+0x3d8>)
 800294e:	f011 fb51 	bl	8013ff4 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002952:	4bf0      	ldr	r3, [pc, #960]	; (8002d14 <HAL_UART_RxCpltCallback+0x3d4>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2be0      	cmp	r3, #224	; 0xe0
 800295c:	f200 8424 	bhi.w	80031a8 <HAL_UART_RxCpltCallback+0x868>
 8002960:	a201      	add	r2, pc, #4	; (adr r2, 8002968 <HAL_UART_RxCpltCallback+0x28>)
 8002962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002966:	bf00      	nop
 8002968:	08002d01 	.word	0x08002d01
 800296c:	08002d45 	.word	0x08002d45
 8002970:	08002db5 	.word	0x08002db5
 8002974:	08002def 	.word	0x08002def
 8002978:	08002e27 	.word	0x08002e27
 800297c:	08002e61 	.word	0x08002e61
 8002980:	08002e9d 	.word	0x08002e9d
 8002984:	08002ed9 	.word	0x08002ed9
 8002988:	08002f13 	.word	0x08002f13
 800298c:	08002f47 	.word	0x08002f47
 8002990:	08002f7b 	.word	0x08002f7b
 8002994:	08002fad 	.word	0x08002fad
 8002998:	08002fd7 	.word	0x08002fd7
 800299c:	080030b5 	.word	0x080030b5
 80029a0:	0800311d 	.word	0x0800311d
 80029a4:	08003145 	.word	0x08003145
 80029a8:	08002ced 	.word	0x08002ced
 80029ac:	08002d29 	.word	0x08002d29
 80029b0:	08002d97 	.word	0x08002d97
 80029b4:	08002dd3 	.word	0x08002dd3
 80029b8:	08002e0b 	.word	0x08002e0b
 80029bc:	08002e43 	.word	0x08002e43
 80029c0:	08002e7f 	.word	0x08002e7f
 80029c4:	08002ebb 	.word	0x08002ebb
 80029c8:	08002ef7 	.word	0x08002ef7
 80029cc:	08002f2f 	.word	0x08002f2f
 80029d0:	08002f57 	.word	0x08002f57
 80029d4:	08002f91 	.word	0x08002f91
 80029d8:	08002fbd 	.word	0x08002fbd
 80029dc:	08002fe5 	.word	0x08002fe5
 80029e0:	080030f5 	.word	0x080030f5
 80029e4:	080031a9 	.word	0x080031a9
 80029e8:	080031a9 	.word	0x080031a9
 80029ec:	080031a9 	.word	0x080031a9
 80029f0:	080031a9 	.word	0x080031a9
 80029f4:	080031a9 	.word	0x080031a9
 80029f8:	080031a9 	.word	0x080031a9
 80029fc:	080031a9 	.word	0x080031a9
 8002a00:	080031a9 	.word	0x080031a9
 8002a04:	080031a9 	.word	0x080031a9
 8002a08:	080031a9 	.word	0x080031a9
 8002a0c:	080031a9 	.word	0x080031a9
 8002a10:	080031a9 	.word	0x080031a9
 8002a14:	080031a9 	.word	0x080031a9
 8002a18:	080031a9 	.word	0x080031a9
 8002a1c:	080031a9 	.word	0x080031a9
 8002a20:	080031a9 	.word	0x080031a9
 8002a24:	080031a9 	.word	0x080031a9
 8002a28:	080031a9 	.word	0x080031a9
 8002a2c:	080031a9 	.word	0x080031a9
 8002a30:	080031a9 	.word	0x080031a9
 8002a34:	080031a9 	.word	0x080031a9
 8002a38:	080031a9 	.word	0x080031a9
 8002a3c:	080031a9 	.word	0x080031a9
 8002a40:	080031a9 	.word	0x080031a9
 8002a44:	080031a9 	.word	0x080031a9
 8002a48:	080031a9 	.word	0x080031a9
 8002a4c:	080031a9 	.word	0x080031a9
 8002a50:	080031a9 	.word	0x080031a9
 8002a54:	080031a9 	.word	0x080031a9
 8002a58:	080031a9 	.word	0x080031a9
 8002a5c:	080031a9 	.word	0x080031a9
 8002a60:	080031a9 	.word	0x080031a9
 8002a64:	080031a9 	.word	0x080031a9
 8002a68:	080031a9 	.word	0x080031a9
 8002a6c:	080031a9 	.word	0x080031a9
 8002a70:	080031a9 	.word	0x080031a9
 8002a74:	080031a9 	.word	0x080031a9
 8002a78:	080031a9 	.word	0x080031a9
 8002a7c:	080031a9 	.word	0x080031a9
 8002a80:	080031a9 	.word	0x080031a9
 8002a84:	080031a9 	.word	0x080031a9
 8002a88:	080031a9 	.word	0x080031a9
 8002a8c:	080031a9 	.word	0x080031a9
 8002a90:	080031a9 	.word	0x080031a9
 8002a94:	080031a9 	.word	0x080031a9
 8002a98:	080031a9 	.word	0x080031a9
 8002a9c:	080031a9 	.word	0x080031a9
 8002aa0:	080031a9 	.word	0x080031a9
 8002aa4:	080031a9 	.word	0x080031a9
 8002aa8:	080031a9 	.word	0x080031a9
 8002aac:	080031a9 	.word	0x080031a9
 8002ab0:	080031a9 	.word	0x080031a9
 8002ab4:	080031a9 	.word	0x080031a9
 8002ab8:	080031a9 	.word	0x080031a9
 8002abc:	080031a9 	.word	0x080031a9
 8002ac0:	080031a9 	.word	0x080031a9
 8002ac4:	080031a9 	.word	0x080031a9
 8002ac8:	080031a9 	.word	0x080031a9
 8002acc:	080031a9 	.word	0x080031a9
 8002ad0:	080031a9 	.word	0x080031a9
 8002ad4:	080031a9 	.word	0x080031a9
 8002ad8:	080031a9 	.word	0x080031a9
 8002adc:	080031a9 	.word	0x080031a9
 8002ae0:	080031a9 	.word	0x080031a9
 8002ae4:	080031a9 	.word	0x080031a9
 8002ae8:	080031a9 	.word	0x080031a9
 8002aec:	080031a9 	.word	0x080031a9
 8002af0:	080031a9 	.word	0x080031a9
 8002af4:	080031a9 	.word	0x080031a9
 8002af8:	080031a9 	.word	0x080031a9
 8002afc:	080031a9 	.word	0x080031a9
 8002b00:	080031a9 	.word	0x080031a9
 8002b04:	080031a9 	.word	0x080031a9
 8002b08:	080031a9 	.word	0x080031a9
 8002b0c:	080031a9 	.word	0x080031a9
 8002b10:	080031a9 	.word	0x080031a9
 8002b14:	080031a9 	.word	0x080031a9
 8002b18:	080031a9 	.word	0x080031a9
 8002b1c:	080031a9 	.word	0x080031a9
 8002b20:	080031a9 	.word	0x080031a9
 8002b24:	080031a9 	.word	0x080031a9
 8002b28:	080031a9 	.word	0x080031a9
 8002b2c:	080031a9 	.word	0x080031a9
 8002b30:	080031a9 	.word	0x080031a9
 8002b34:	080031a9 	.word	0x080031a9
 8002b38:	080031a9 	.word	0x080031a9
 8002b3c:	080031a9 	.word	0x080031a9
 8002b40:	080031a9 	.word	0x080031a9
 8002b44:	080031a9 	.word	0x080031a9
 8002b48:	080031a9 	.word	0x080031a9
 8002b4c:	080031a9 	.word	0x080031a9
 8002b50:	080031a9 	.word	0x080031a9
 8002b54:	080031a9 	.word	0x080031a9
 8002b58:	080031a9 	.word	0x080031a9
 8002b5c:	080031a9 	.word	0x080031a9
 8002b60:	080031a9 	.word	0x080031a9
 8002b64:	080031a9 	.word	0x080031a9
 8002b68:	080031a9 	.word	0x080031a9
 8002b6c:	080031a9 	.word	0x080031a9
 8002b70:	080031a9 	.word	0x080031a9
 8002b74:	080031a9 	.word	0x080031a9
 8002b78:	080031a9 	.word	0x080031a9
 8002b7c:	080031a9 	.word	0x080031a9
 8002b80:	080031a9 	.word	0x080031a9
 8002b84:	080031a9 	.word	0x080031a9
 8002b88:	080031a9 	.word	0x080031a9
 8002b8c:	080031a9 	.word	0x080031a9
 8002b90:	080031a9 	.word	0x080031a9
 8002b94:	080031a9 	.word	0x080031a9
 8002b98:	080031a9 	.word	0x080031a9
 8002b9c:	080031a9 	.word	0x080031a9
 8002ba0:	080031a9 	.word	0x080031a9
 8002ba4:	080031a9 	.word	0x080031a9
 8002ba8:	080031a9 	.word	0x080031a9
 8002bac:	080031a9 	.word	0x080031a9
 8002bb0:	080031a9 	.word	0x080031a9
 8002bb4:	080031a9 	.word	0x080031a9
 8002bb8:	080031a9 	.word	0x080031a9
 8002bbc:	080031a9 	.word	0x080031a9
 8002bc0:	080031a9 	.word	0x080031a9
 8002bc4:	080031a9 	.word	0x080031a9
 8002bc8:	080031a9 	.word	0x080031a9
 8002bcc:	080031a9 	.word	0x080031a9
 8002bd0:	080031a9 	.word	0x080031a9
 8002bd4:	080031a9 	.word	0x080031a9
 8002bd8:	080031a9 	.word	0x080031a9
 8002bdc:	080031a9 	.word	0x080031a9
 8002be0:	080031a9 	.word	0x080031a9
 8002be4:	080031a9 	.word	0x080031a9
 8002be8:	080031a9 	.word	0x080031a9
 8002bec:	080031a9 	.word	0x080031a9
 8002bf0:	080031a9 	.word	0x080031a9
 8002bf4:	080031a9 	.word	0x080031a9
 8002bf8:	080031a9 	.word	0x080031a9
 8002bfc:	080031a9 	.word	0x080031a9
 8002c00:	080031a9 	.word	0x080031a9
 8002c04:	080031a9 	.word	0x080031a9
 8002c08:	080031a9 	.word	0x080031a9
 8002c0c:	080031a9 	.word	0x080031a9
 8002c10:	080031a9 	.word	0x080031a9
 8002c14:	080031a9 	.word	0x080031a9
 8002c18:	080031a9 	.word	0x080031a9
 8002c1c:	080031a9 	.word	0x080031a9
 8002c20:	080031a9 	.word	0x080031a9
 8002c24:	08003181 	.word	0x08003181
 8002c28:	080031a9 	.word	0x080031a9
 8002c2c:	080031a9 	.word	0x080031a9
 8002c30:	080031a9 	.word	0x080031a9
 8002c34:	080031a9 	.word	0x080031a9
 8002c38:	080031a9 	.word	0x080031a9
 8002c3c:	080031a9 	.word	0x080031a9
 8002c40:	080031a9 	.word	0x080031a9
 8002c44:	080031a9 	.word	0x080031a9
 8002c48:	080031a9 	.word	0x080031a9
 8002c4c:	080031a9 	.word	0x080031a9
 8002c50:	080031a9 	.word	0x080031a9
 8002c54:	080031a9 	.word	0x080031a9
 8002c58:	080031a9 	.word	0x080031a9
 8002c5c:	080031a9 	.word	0x080031a9
 8002c60:	080031a9 	.word	0x080031a9
 8002c64:	08003187 	.word	0x08003187
 8002c68:	080031a9 	.word	0x080031a9
 8002c6c:	080031a9 	.word	0x080031a9
 8002c70:	080031a9 	.word	0x080031a9
 8002c74:	080031a9 	.word	0x080031a9
 8002c78:	080031a9 	.word	0x080031a9
 8002c7c:	080031a9 	.word	0x080031a9
 8002c80:	080031a9 	.word	0x080031a9
 8002c84:	080031a9 	.word	0x080031a9
 8002c88:	080031a9 	.word	0x080031a9
 8002c8c:	080031a9 	.word	0x080031a9
 8002c90:	080031a9 	.word	0x080031a9
 8002c94:	080031a9 	.word	0x080031a9
 8002c98:	080031a9 	.word	0x080031a9
 8002c9c:	080031a9 	.word	0x080031a9
 8002ca0:	080031a9 	.word	0x080031a9
 8002ca4:	08003195 	.word	0x08003195
 8002ca8:	0800316d 	.word	0x0800316d
 8002cac:	080031a9 	.word	0x080031a9
 8002cb0:	080031a9 	.word	0x080031a9
 8002cb4:	080031a9 	.word	0x080031a9
 8002cb8:	080031a9 	.word	0x080031a9
 8002cbc:	080031a9 	.word	0x080031a9
 8002cc0:	080031a9 	.word	0x080031a9
 8002cc4:	080031a9 	.word	0x080031a9
 8002cc8:	080031a9 	.word	0x080031a9
 8002ccc:	080031a9 	.word	0x080031a9
 8002cd0:	080031a9 	.word	0x080031a9
 8002cd4:	080031a9 	.word	0x080031a9
 8002cd8:	080031a9 	.word	0x080031a9
 8002cdc:	080031a9 	.word	0x080031a9
 8002ce0:	080031a9 	.word	0x080031a9
 8002ce4:	080031a3 	.word	0x080031a3
 8002ce8:	08003159 	.word	0x08003159
	case 0x10: {
		printf("SDN1 ON\n");
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <HAL_UART_RxCpltCallback+0x3dc>)
 8002cee:	f017 f8cb 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_UART_RxCpltCallback+0x3e0>)
 8002cf4:	2104      	movs	r1, #4
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f008 f9f1 	bl	800b0e0 <HAL_GPIO_WritePin>
		break;
 8002cfe:	e25e      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8002d00:	4808      	ldr	r0, [pc, #32]	; (8002d24 <HAL_UART_RxCpltCallback+0x3e4>)
 8002d02:	f017 f8c1 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_UART_RxCpltCallback+0x3e0>)
 8002d08:	2104      	movs	r1, #4
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f008 f9e7 	bl	800b0e0 <HAL_GPIO_WritePin>
		break;
 8002d12:	e254      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
 8002d14:	24001a40 	.word	0x24001a40
 8002d18:	24001ddc 	.word	0x24001ddc
 8002d1c:	0801a850 	.word	0x0801a850
 8002d20:	58020400 	.word	0x58020400
 8002d24:	0801a858 	.word	0x0801a858
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8002d28:	48bf      	ldr	r0, [pc, #764]	; (8003028 <HAL_UART_RxCpltCallback+0x6e8>)
 8002d2a:	f017 f8ad 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8002d2e:	4bbf      	ldr	r3, [pc, #764]	; (800302c <HAL_UART_RxCpltCallback+0x6ec>)
 8002d30:	2120      	movs	r1, #32
 8002d32:	2201      	movs	r2, #1
 8002d34:	4618      	mov	r0, r3
 8002d36:	f008 f9d3 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	2008      	movs	r0, #8
 8002d3e:	f002 fb49 	bl	80053d4 <set_rail_monitor_enable>
		break;
 8002d42:	e23c      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8002d44:	48ba      	ldr	r0, [pc, #744]	; (8003030 <HAL_UART_RxCpltCallback+0x6f0>)
 8002d46:	f017 f89f 	bl	8019e88 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	e00f      	b.n	8002d70 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002d50:	4ab8      	ldr	r2, [pc, #736]	; (8003034 <HAL_UART_RxCpltCallback+0x6f4>)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002d58:	4ab6      	ldr	r2, [pc, #728]	; (8003034 <HAL_UART_RxCpltCallback+0x6f4>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	889b      	ldrh	r3, [r3, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	4619      	mov	r1, r3
 8002d66:	f008 f9bb 	bl	800b0e0 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	dcec      	bgt.n	8002d50 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002d76:	2310      	movs	r3, #16
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e008      	b.n	8002d8e <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2100      	movs	r1, #0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 fb26 	bl	80053d4 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b07      	cmp	r3, #7
 8002d92:	dcf3      	bgt.n	8002d7c <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8002d94:	e213      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8002d96:	48a8      	ldr	r0, [pc, #672]	; (8003038 <HAL_UART_RxCpltCallback+0x6f8>)
 8002d98:	f017 f876 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8002d9c:	4ba7      	ldr	r3, [pc, #668]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002da2:	2201      	movs	r2, #1
 8002da4:	4618      	mov	r0, r3
 8002da6:	f008 f99b 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8002daa:	2101      	movs	r1, #1
 8002dac:	2009      	movs	r0, #9
 8002dae:	f002 fb11 	bl	80053d4 <set_rail_monitor_enable>

		break;
 8002db2:	e204      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8002db4:	48a2      	ldr	r0, [pc, #648]	; (8003040 <HAL_UART_RxCpltCallback+0x700>)
 8002db6:	f017 f867 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8002dba:	4ba0      	ldr	r3, [pc, #640]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f008 f98c 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2009      	movs	r0, #9
 8002dcc:	f002 fb02 	bl	80053d4 <set_rail_monitor_enable>
		break;
 8002dd0:	e1f5      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8002dd2:	489c      	ldr	r0, [pc, #624]	; (8003044 <HAL_UART_RxCpltCallback+0x704>)
 8002dd4:	f017 f858 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8002dd8:	4b98      	ldr	r3, [pc, #608]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	f008 f97e 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8002de4:	2101      	movs	r1, #1
 8002de6:	200a      	movs	r0, #10
 8002de8:	f002 faf4 	bl	80053d4 <set_rail_monitor_enable>

		break;
 8002dec:	e1e7      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8002dee:	4896      	ldr	r0, [pc, #600]	; (8003048 <HAL_UART_RxCpltCallback+0x708>)
 8002df0:	f017 f84a 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8002df4:	4b91      	ldr	r3, [pc, #580]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002df6:	2180      	movs	r1, #128	; 0x80
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f008 f970 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8002e00:	2100      	movs	r1, #0
 8002e02:	200a      	movs	r0, #10
 8002e04:	f002 fae6 	bl	80053d4 <set_rail_monitor_enable>
		break;
 8002e08:	e1d9      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8002e0a:	4890      	ldr	r0, [pc, #576]	; (800304c <HAL_UART_RxCpltCallback+0x70c>)
 8002e0c:	f017 f83c 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8002e10:	4b8a      	ldr	r3, [pc, #552]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002e12:	2140      	movs	r1, #64	; 0x40
 8002e14:	2201      	movs	r2, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f008 f962 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	200b      	movs	r0, #11
 8002e20:	f002 fad8 	bl	80053d4 <set_rail_monitor_enable>

		break;
 8002e24:	e1cb      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8002e26:	488a      	ldr	r0, [pc, #552]	; (8003050 <HAL_UART_RxCpltCallback+0x710>)
 8002e28:	f017 f82e 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8002e2c:	4b83      	ldr	r3, [pc, #524]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002e2e:	2140      	movs	r1, #64	; 0x40
 8002e30:	2200      	movs	r2, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f008 f954 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8002e38:	2100      	movs	r1, #0
 8002e3a:	200b      	movs	r0, #11
 8002e3c:	f002 faca 	bl	80053d4 <set_rail_monitor_enable>
		break;
 8002e40:	e1bd      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8002e42:	4884      	ldr	r0, [pc, #528]	; (8003054 <HAL_UART_RxCpltCallback+0x714>)
 8002e44:	f017 f820 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8002e48:	4b7c      	ldr	r3, [pc, #496]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4618      	mov	r0, r3
 8002e52:	f008 f945 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8002e56:	2101      	movs	r1, #1
 8002e58:	200c      	movs	r0, #12
 8002e5a:	f002 fabb 	bl	80053d4 <set_rail_monitor_enable>

		break;
 8002e5e:	e1ae      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8002e60:	487d      	ldr	r0, [pc, #500]	; (8003058 <HAL_UART_RxCpltCallback+0x718>)
 8002e62:	f017 f811 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8002e66:	4b75      	ldr	r3, [pc, #468]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f008 f936 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8002e74:	2100      	movs	r1, #0
 8002e76:	200c      	movs	r0, #12
 8002e78:	f002 faac 	bl	80053d4 <set_rail_monitor_enable>
		break;
 8002e7c:	e19f      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8002e7e:	4877      	ldr	r0, [pc, #476]	; (800305c <HAL_UART_RxCpltCallback+0x71c>)
 8002e80:	f017 f802 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8002e84:	4b6d      	ldr	r3, [pc, #436]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f008 f927 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8002e92:	2101      	movs	r1, #1
 8002e94:	200d      	movs	r0, #13
 8002e96:	f002 fa9d 	bl	80053d4 <set_rail_monitor_enable>

		break;
 8002e9a:	e190      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8002e9c:	4870      	ldr	r0, [pc, #448]	; (8003060 <HAL_UART_RxCpltCallback+0x720>)
 8002e9e:	f016 fff3 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8002ea2:	4b66      	ldr	r3, [pc, #408]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f008 f918 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	200d      	movs	r0, #13
 8002eb4:	f002 fa8e 	bl	80053d4 <set_rail_monitor_enable>
		break;
 8002eb8:	e181      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8002eba:	486a      	ldr	r0, [pc, #424]	; (8003064 <HAL_UART_RxCpltCallback+0x724>)
 8002ebc:	f016 ffe4 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8002ec0:	4b5e      	ldr	r3, [pc, #376]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f008 f909 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8002ece:	2101      	movs	r1, #1
 8002ed0:	200f      	movs	r0, #15
 8002ed2:	f002 fa7f 	bl	80053d4 <set_rail_monitor_enable>

		break;
 8002ed6:	e172      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8002ed8:	4863      	ldr	r0, [pc, #396]	; (8003068 <HAL_UART_RxCpltCallback+0x728>)
 8002eda:	f016 ffd5 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8002ede:	4b57      	ldr	r3, [pc, #348]	; (800303c <HAL_UART_RxCpltCallback+0x6fc>)
 8002ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f008 f8fa 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8002eec:	2100      	movs	r1, #0
 8002eee:	200f      	movs	r0, #15
 8002ef0:	f002 fa70 	bl	80053d4 <set_rail_monitor_enable>
		break;
 8002ef4:	e163      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8002ef6:	485d      	ldr	r0, [pc, #372]	; (800306c <HAL_UART_RxCpltCallback+0x72c>)
 8002ef8:	f016 ffc6 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8002efc:	4b4b      	ldr	r3, [pc, #300]	; (800302c <HAL_UART_RxCpltCallback+0x6ec>)
 8002efe:	2140      	movs	r1, #64	; 0x40
 8002f00:	2201      	movs	r2, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f008 f8ec 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8002f08:	2101      	movs	r1, #1
 8002f0a:	2010      	movs	r0, #16
 8002f0c:	f002 fa62 	bl	80053d4 <set_rail_monitor_enable>

		break;
 8002f10:	e155      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8002f12:	4857      	ldr	r0, [pc, #348]	; (8003070 <HAL_UART_RxCpltCallback+0x730>)
 8002f14:	f016 ffb8 	bl	8019e88 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8002f18:	4b44      	ldr	r3, [pc, #272]	; (800302c <HAL_UART_RxCpltCallback+0x6ec>)
 8002f1a:	2140      	movs	r1, #64	; 0x40
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f008 f8de 	bl	800b0e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8002f24:	2100      	movs	r1, #0
 8002f26:	2010      	movs	r0, #16
 8002f28:	f002 fa54 	bl	80053d4 <set_rail_monitor_enable>
		break;
 8002f2c:	e147      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8002f2e:	4851      	ldr	r0, [pc, #324]	; (8003074 <HAL_UART_RxCpltCallback+0x734>)
 8002f30:	f016 ffaa 	bl	8019e88 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8002f34:	2300      	movs	r3, #0
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2320      	movs	r3, #32
 8002f3a:	4a4f      	ldr	r2, [pc, #316]	; (8003078 <HAL_UART_RxCpltCallback+0x738>)
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	484f      	ldr	r0, [pc, #316]	; (800307c <HAL_UART_RxCpltCallback+0x73c>)
 8002f40:	f004 fa4a 	bl	80073d8 <HAL_DAC_Start_DMA>
		break;
 8002f44:	e13b      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8002f46:	484e      	ldr	r0, [pc, #312]	; (8003080 <HAL_UART_RxCpltCallback+0x740>)
 8002f48:	f016 ff9e 	bl	8019e88 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	484b      	ldr	r0, [pc, #300]	; (800307c <HAL_UART_RxCpltCallback+0x73c>)
 8002f50:	f004 fb02 	bl	8007558 <HAL_DAC_Stop_DMA>
		break;
 8002f54:	e133      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8002f56:	484b      	ldr	r0, [pc, #300]	; (8003084 <HAL_UART_RxCpltCallback+0x744>)
 8002f58:	f016 ff96 	bl	8019e88 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002f5c:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <HAL_UART_RxCpltCallback+0x748>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2102      	movs	r1, #2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f013 fe54 	bl	8016c10 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f6c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 8002f72:	4b46      	ldr	r3, [pc, #280]	; (800308c <HAL_UART_RxCpltCallback+0x74c>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]

		break;
 8002f78:	e121      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8002f7a:	4845      	ldr	r0, [pc, #276]	; (8003090 <HAL_UART_RxCpltCallback+0x750>)
 8002f7c:	f016 ff84 	bl	8019e88 <puts>
		ERPA_ENABLED = 0;
 8002f80:	4b42      	ldr	r3, [pc, #264]	; (800308c <HAL_UART_RxCpltCallback+0x74c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002f8e:	e116      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8002f90:	4840      	ldr	r0, [pc, #256]	; (8003094 <HAL_UART_RxCpltCallback+0x754>)
 8002f92:	f016 ff79 	bl	8019e88 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002f96:	2100      	movs	r1, #0
 8002f98:	483f      	ldr	r0, [pc, #252]	; (8003098 <HAL_UART_RxCpltCallback+0x758>)
 8002f9a:	f00f fb4b 	bl	8012634 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002f9e:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <HAL_UART_RxCpltCallback+0x748>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f013 fe33 	bl	8016c10 <osEventFlagsSet>
		break;
 8002faa:	e108      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8002fac:	483b      	ldr	r0, [pc, #236]	; (800309c <HAL_UART_RxCpltCallback+0x75c>)
 8002fae:	f016 ff6b 	bl	8019e88 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4838      	ldr	r0, [pc, #224]	; (8003098 <HAL_UART_RxCpltCallback+0x758>)
 8002fb6:	f00f fc97 	bl	80128e8 <HAL_TIM_OC_Stop_IT>
		break;
 8002fba:	e100      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1C: {
		printf("HK ON \n");
 8002fbc:	4838      	ldr	r0, [pc, #224]	; (80030a0 <HAL_UART_RxCpltCallback+0x760>)
 8002fbe:	f016 ff63 	bl	8019e88 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002fc2:	4b31      	ldr	r3, [pc, #196]	; (8003088 <HAL_UART_RxCpltCallback+0x748>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2104      	movs	r1, #4
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f013 fe21 	bl	8016c10 <osEventFlagsSet>
		HK_ENABLED = 1;
 8002fce:	4b35      	ldr	r3, [pc, #212]	; (80030a4 <HAL_UART_RxCpltCallback+0x764>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
		break;
 8002fd4:	e0f3      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8002fd6:	4834      	ldr	r0, [pc, #208]	; (80030a8 <HAL_UART_RxCpltCallback+0x768>)
 8002fd8:	f016 ff56 	bl	8019e88 <puts>
		HK_ENABLED = 0;
 8002fdc:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <HAL_UART_RxCpltCallback+0x764>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
		break;
 8002fe2:	e0ec      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1D: {
		printf("Step Up\n");
 8002fe4:	4831      	ldr	r0, [pc, #196]	; (80030ac <HAL_UART_RxCpltCallback+0x76c>)
 8002fe6:	f016 ff4f 	bl	8019e88 <puts>
		if (step < 14) {
 8002fea:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_UART_RxCpltCallback+0x770>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b0d      	cmp	r3, #13
 8002ff2:	f200 80dd 	bhi.w	80031b0 <HAL_UART_RxCpltCallback+0x870>
			step += 2;
 8002ff6:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <HAL_UART_RxCpltCallback+0x770>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_UART_RxCpltCallback+0x770>)
 8003002:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_UART_RxCpltCallback+0x770>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <HAL_UART_RxCpltCallback+0x738>)
 800300e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003012:	2200      	movs	r2, #0
 8003014:	2100      	movs	r1, #0
 8003016:	4819      	ldr	r0, [pc, #100]	; (800307c <HAL_UART_RxCpltCallback+0x73c>)
 8003018:	f004 fb41 	bl	800769e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800301c:	2100      	movs	r1, #0
 800301e:	4817      	ldr	r0, [pc, #92]	; (800307c <HAL_UART_RxCpltCallback+0x73c>)
 8003020:	f004 f982 	bl	8007328 <HAL_DAC_Start>
		}
		break;
 8003024:	e0c4      	b.n	80031b0 <HAL_UART_RxCpltCallback+0x870>
 8003026:	bf00      	nop
 8003028:	0801a864 	.word	0x0801a864
 800302c:	58020400 	.word	0x58020400
 8003030:	0801a870 	.word	0x0801a870
 8003034:	0801ab6c 	.word	0x0801ab6c
 8003038:	0801a87c 	.word	0x0801a87c
 800303c:	58020800 	.word	0x58020800
 8003040:	0801a888 	.word	0x0801a888
 8003044:	0801a898 	.word	0x0801a898
 8003048:	0801a8a4 	.word	0x0801a8a4
 800304c:	0801a8b0 	.word	0x0801a8b0
 8003050:	0801a8bc 	.word	0x0801a8bc
 8003054:	0801a8cc 	.word	0x0801a8cc
 8003058:	0801a8d8 	.word	0x0801a8d8
 800305c:	0801a8e4 	.word	0x0801a8e4
 8003060:	0801a8f0 	.word	0x0801a8f0
 8003064:	0801a8fc 	.word	0x0801a8fc
 8003068:	0801a90c 	.word	0x0801a90c
 800306c:	0801a91c 	.word	0x0801a91c
 8003070:	0801a928 	.word	0x0801a928
 8003074:	0801a938 	.word	0x0801a938
 8003078:	2400000c 	.word	0x2400000c
 800307c:	240002f4 	.word	0x240002f4
 8003080:	0801a948 	.word	0x0801a948
 8003084:	0801a958 	.word	0x0801a958
 8003088:	24001a34 	.word	0x24001a34
 800308c:	24001a81 	.word	0x24001a81
 8003090:	0801a960 	.word	0x0801a960
 8003094:	0801a96c 	.word	0x0801a96c
 8003098:	24001d44 	.word	0x24001d44
 800309c:	0801a974 	.word	0x0801a974
 80030a0:	0801a97c 	.word	0x0801a97c
 80030a4:	24001a80 	.word	0x24001a80
 80030a8:	0801a984 	.word	0x0801a984
 80030ac:	0801a98c 	.word	0x0801a98c
 80030b0:	24001a82 	.word	0x24001a82
	}
	case 0x0D: {
		printf("Step Down\n");
 80030b4:	4844      	ldr	r0, [pc, #272]	; (80031c8 <HAL_UART_RxCpltCallback+0x888>)
 80030b6:	f016 fee7 	bl	8019e88 <puts>
		if (step > 1) {
 80030ba:	4b44      	ldr	r3, [pc, #272]	; (80031cc <HAL_UART_RxCpltCallback+0x88c>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d977      	bls.n	80031b4 <HAL_UART_RxCpltCallback+0x874>
			step -= 2;
 80030c4:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_UART_RxCpltCallback+0x88c>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	3b02      	subs	r3, #2
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4b3f      	ldr	r3, [pc, #252]	; (80031cc <HAL_UART_RxCpltCallback+0x88c>)
 80030d0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80030d2:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <HAL_UART_RxCpltCallback+0x88c>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_UART_RxCpltCallback+0x890>)
 80030dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e0:	2200      	movs	r2, #0
 80030e2:	2100      	movs	r1, #0
 80030e4:	483b      	ldr	r0, [pc, #236]	; (80031d4 <HAL_UART_RxCpltCallback+0x894>)
 80030e6:	f004 fada 	bl	800769e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80030ea:	2100      	movs	r1, #0
 80030ec:	4839      	ldr	r0, [pc, #228]	; (80031d4 <HAL_UART_RxCpltCallback+0x894>)
 80030ee:	f004 f91b 	bl	8007328 <HAL_DAC_Start>
		}
		break;
 80030f2:	e05f      	b.n	80031b4 <HAL_UART_RxCpltCallback+0x874>
	}
	case 0x1E: {
		printf("Factor Up\n");
 80030f4:	4838      	ldr	r0, [pc, #224]	; (80031d8 <HAL_UART_RxCpltCallback+0x898>)
 80030f6:	f016 fec7 	bl	8019e88 <puts>
		if (cadence <= 50000) {
 80030fa:	4b38      	ldr	r3, [pc, #224]	; (80031dc <HAL_UART_RxCpltCallback+0x89c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003102:	4293      	cmp	r3, r2
 8003104:	d858      	bhi.n	80031b8 <HAL_UART_RxCpltCallback+0x878>
			cadence *= 2;
 8003106:	4b35      	ldr	r3, [pc, #212]	; (80031dc <HAL_UART_RxCpltCallback+0x89c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4a33      	ldr	r2, [pc, #204]	; (80031dc <HAL_UART_RxCpltCallback+0x89c>)
 800310e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003114:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_UART_RxCpltCallback+0x89c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800311a:	e04d      	b.n	80031b8 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0E: {
		printf("Factor Down\n");
 800311c:	4830      	ldr	r0, [pc, #192]	; (80031e0 <HAL_UART_RxCpltCallback+0x8a0>)
 800311e:	f016 feb3 	bl	8019e88 <puts>
		if (cadence >= 6250) {
 8003122:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <HAL_UART_RxCpltCallback+0x89c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f641 0269 	movw	r2, #6249	; 0x1869
 800312a:	4293      	cmp	r3, r2
 800312c:	d946      	bls.n	80031bc <HAL_UART_RxCpltCallback+0x87c>
			cadence /= 2;
 800312e:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_UART_RxCpltCallback+0x89c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	4a29      	ldr	r2, [pc, #164]	; (80031dc <HAL_UART_RxCpltCallback+0x89c>)
 8003136:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003138:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_UART_RxCpltCallback+0x89c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003142:	e03b      	b.n	80031bc <HAL_UART_RxCpltCallback+0x87c>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8003144:	4827      	ldr	r0, [pc, #156]	; (80031e4 <HAL_UART_RxCpltCallback+0x8a4>)
 8003146:	f016 fe9f 	bl	8019e88 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 800314a:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_UART_RxCpltCallback+0x8a8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2102      	movs	r1, #2
 8003150:	4618      	mov	r0, r3
 8003152:	f013 fd5d 	bl	8016c10 <osEventFlagsSet>
		break;
 8003156:	e032      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8003158:	4824      	ldr	r0, [pc, #144]	; (80031ec <HAL_UART_RxCpltCallback+0x8ac>)
 800315a:	f016 fe95 	bl	8019e88 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 800315e:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <HAL_UART_RxCpltCallback+0x8a8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2104      	movs	r1, #4
 8003164:	4618      	mov	r0, r3
 8003166:	f013 fd53 	bl	8016c10 <osEventFlagsSet>
		break;
 800316a:	e028      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 800316c:	4820      	ldr	r0, [pc, #128]	; (80031f0 <HAL_UART_RxCpltCallback+0x8b0>)
 800316e:	f016 fe8b 	bl	8019e88 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_UART_RxCpltCallback+0x8a8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2108      	movs	r1, #8
 8003178:	4618      	mov	r0, r3
 800317a:	f013 fd49 	bl	8016c10 <osEventFlagsSet>
		break;
 800317e:	e01e      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xAF: {
		sync();
 8003180:	f000 fa0a 	bl	8003598 <sync>
		break;
 8003184:	e01b      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_UART_RxCpltCallback+0x8b4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2101      	movs	r1, #1
 800318c:	4618      	mov	r0, r3
 800318e:	f013 fd3f 	bl	8016c10 <osEventFlagsSet>
		break;
 8003192:	e014      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8003194:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <HAL_UART_RxCpltCallback+0x8b4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2102      	movs	r1, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f013 fd38 	bl	8016c10 <osEventFlagsSet>
		break;
 80031a0:	e00d      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xDF: {
		reset_eeprom_error_counters();
 80031a2:	f7fe ff6d 	bl	8002080 <reset_eeprom_error_counters>
		break;
 80031a6:	e00a      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
	}
	default: {
		printf("Unknown Command\n");
 80031a8:	4813      	ldr	r0, [pc, #76]	; (80031f8 <HAL_UART_RxCpltCallback+0x8b8>)
 80031aa:	f016 fe6d 	bl	8019e88 <puts>
		break;
 80031ae:	e006      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
		break;
 80031b0:	bf00      	nop
 80031b2:	e004      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
		break;
 80031b4:	bf00      	nop
 80031b6:	e002      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
		break;
 80031b8:	bf00      	nop
 80031ba:	e000      	b.n	80031be <HAL_UART_RxCpltCallback+0x87e>
		break;
 80031bc:	bf00      	nop
	}
	}
}
 80031be:	bf00      	nop
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	0801a994 	.word	0x0801a994
 80031cc:	24001a82 	.word	0x24001a82
 80031d0:	2400000c 	.word	0x2400000c
 80031d4:	240002f4 	.word	0x240002f4
 80031d8:	0801a9a0 	.word	0x0801a9a0
 80031dc:	2400008c 	.word	0x2400008c
 80031e0:	0801a9ac 	.word	0x0801a9ac
 80031e4:	0801a9b8 	.word	0x0801a9b8
 80031e8:	24001a38 	.word	0x24001a38
 80031ec:	0801a9c8 	.word	0x0801a9c8
 80031f0:	0801a9d4 	.word	0x0801a9d4
 80031f4:	24001a3c 	.word	0x24001a3c
 80031f8:	0801a9e0 	.word	0x0801a9e0

080031fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003202:	f000 fa6d 	bl	80036e0 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003206:	4b66      	ldr	r3, [pc, #408]	; (80033a0 <main+0x1a4>)
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11b      	bne.n	800324a <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003212:	f3bf 8f4f 	dsb	sy
}
 8003216:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003218:	f3bf 8f6f 	isb	sy
}
 800321c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800321e:	4b60      	ldr	r3, [pc, #384]	; (80033a0 <main+0x1a4>)
 8003220:	2200      	movs	r2, #0
 8003222:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003226:	f3bf 8f4f 	dsb	sy
}
 800322a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800322c:	f3bf 8f6f 	isb	sy
}
 8003230:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003232:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <main+0x1a4>)
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	4a5a      	ldr	r2, [pc, #360]	; (80033a0 <main+0x1a4>)
 8003238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800323e:	f3bf 8f4f 	dsb	sy
}
 8003242:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003244:	f3bf 8f6f 	isb	sy
}
 8003248:	e000      	b.n	800324c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800324a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800324c:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <main+0x1a4>)
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d138      	bne.n	80032ca <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003258:	4b51      	ldr	r3, [pc, #324]	; (80033a0 <main+0x1a4>)
 800325a:	2200      	movs	r2, #0
 800325c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003260:	f3bf 8f4f 	dsb	sy
}
 8003264:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003266:	4b4e      	ldr	r3, [pc, #312]	; (80033a0 <main+0x1a4>)
 8003268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326c:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0b5b      	lsrs	r3, r3, #13
 8003272:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003276:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	08db      	lsrs	r3, r3, #3
 800327c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003280:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800328a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003290:	4943      	ldr	r1, [pc, #268]	; (80033a0 <main+0x1a4>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	1e5a      	subs	r2, r3, #1
 800329c:	603a      	str	r2, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1ef      	bne.n	8003282 <main+0x86>
    } while(sets-- != 0U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	1e5a      	subs	r2, r3, #1
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e5      	bne.n	8003278 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80032ac:	f3bf 8f4f 	dsb	sy
}
 80032b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80032b2:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <main+0x1a4>)
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	4a3a      	ldr	r2, [pc, #232]	; (80033a0 <main+0x1a4>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80032be:	f3bf 8f4f 	dsb	sy
}
 80032c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032c4:	f3bf 8f6f 	isb	sy
}
 80032c8:	e000      	b.n	80032cc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80032ca:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032cc:	f002 fa20 	bl	8005710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032d0:	f000 f868 	bl	80033a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80032d4:	f000 f8e6 	bl	80034a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032d8:	f7ff f92c 	bl	8002534 <MX_GPIO_Init>
  MX_DMA_Init();
 80032dc:	f7fd fd04 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80032e0:	f001 fdb0 	bl	8004e44 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80032e4:	f7ff f9a0 	bl	8002628 <MX_I2C1_Init>
  MX_SPI2_Init();
 80032e8:	f000 fee6 	bl	80040b8 <MX_SPI2_Init>
  MX_TIM2_Init();
 80032ec:	f001 fbd2 	bl	8004a94 <MX_TIM2_Init>
  MX_TIM1_Init();
 80032f0:	f001 fb22 	bl	8004938 <MX_TIM1_Init>
  MX_ADC3_Init();
 80032f4:	f7fd fa98 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80032f8:	f7fd f974 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80032fc:	f7fd fc40 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003300:	f000 fe82 	bl	8004008 <MX_SPI1_Init>
  MX_RTC_Init();
 8003304:	f000 fc4e 	bl	8003ba4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  	error_counter_init();
 8003308:	f7fe fe50 	bl	8001fac <error_counter_init>

	reset_eeprom_error_counters();
 800330c:	f7fe feb8 	bl	8002080 <reset_eeprom_error_counters>

	for (int i = 0; i < 5; i++) {
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	e00e      	b.n	8003334 <main+0x138>
		uint16_t temp = 1;
 8003316:	2301      	movs	r3, #1
 8003318:	81bb      	strh	r3, [r7, #12]
		temp = get_eeprom_error_counter(i);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe fe6a 	bl	8001ff8 <get_eeprom_error_counter>
 8003324:	4603      	mov	r3, r0
 8003326:	81bb      	strh	r3, [r7, #12]
		temp++;
 8003328:	89bb      	ldrh	r3, [r7, #12]
 800332a:	3301      	adds	r3, #1
 800332c:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < 5; i++) {
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	3301      	adds	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b04      	cmp	r3, #4
 8003338:	dded      	ble.n	8003316 <main+0x11a>
	}

	set_eeprom_error_counter(EC_power_supply_rail, 4);
 800333a:	2104      	movs	r1, #4
 800333c:	2000      	movs	r0, #0
 800333e:	f7fe fe79 	bl	8002034 <set_eeprom_error_counter>
	set_eeprom_error_counter(EC_seu, 7);
 8003342:	2107      	movs	r1, #7
 8003344:	2001      	movs	r0, #1
 8003346:	f7fe fe75 	bl	8002034 <set_eeprom_error_counter>
	set_eeprom_error_counter(EC_peripheral, 3);
 800334a:	2103      	movs	r1, #3
 800334c:	2002      	movs	r0, #2
 800334e:	f7fe fe71 	bl	8002034 <set_eeprom_error_counter>
	set_eeprom_error_counter(EC_brownout, 6);
 8003352:	2106      	movs	r1, #6
 8003354:	2003      	movs	r0, #3
 8003356:	f7fe fe6d 	bl	8002034 <set_eeprom_error_counter>
	set_eeprom_error_counter(EC_manual_reset, 9);
 800335a:	2109      	movs	r1, #9
 800335c:	2004      	movs	r0, #4
 800335e:	f7fe fe69 	bl	8002034 <set_eeprom_error_counter>

	for (int i = 0; i < 5; i++) {
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	e00e      	b.n	8003386 <main+0x18a>
		uint16_t temp = 1;
 8003368:	2301      	movs	r3, #1
 800336a:	81fb      	strh	r3, [r7, #14]
		temp = get_eeprom_error_counter(i);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe fe41 	bl	8001ff8 <get_eeprom_error_counter>
 8003376:	4603      	mov	r3, r0
 8003378:	81fb      	strh	r3, [r7, #14]
		temp++;
 800337a:	89fb      	ldrh	r3, [r7, #14]
 800337c:	3301      	adds	r3, #1
 800337e:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 5; i++) {
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	3301      	adds	r3, #1
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b04      	cmp	r3, #4
 800338a:	dded      	ble.n	8003368 <main+0x16c>
	}

  system_setup();
 800338c:	f000 f8ba 	bl	8003504 <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003390:	f013 fae8 	bl	8016964 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003394:	f7fe feae 	bl	80020f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003398:	f013 fb08 	bl	80169ac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800339c:	e7fe      	b.n	800339c <main+0x1a0>
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b09c      	sub	sp, #112	; 0x70
 80033a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ae:	224c      	movs	r2, #76	; 0x4c
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f016 fcf2 	bl	8019d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	2220      	movs	r2, #32
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f016 fcec 	bl	8019d9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80033c4:	2002      	movs	r0, #2
 80033c6:	f00a fa45 	bl	800d854 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80033ca:	2300      	movs	r3, #0
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4b33      	ldr	r3, [pc, #204]	; (800349c <SystemClock_Config+0xf8>)
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	4a32      	ldr	r2, [pc, #200]	; (800349c <SystemClock_Config+0xf8>)
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033da:	4b30      	ldr	r3, [pc, #192]	; (800349c <SystemClock_Config+0xf8>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	4b2e      	ldr	r3, [pc, #184]	; (80034a0 <SystemClock_Config+0xfc>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033ec:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <SystemClock_Config+0xfc>)
 80033ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f2:	6193      	str	r3, [r2, #24]
 80033f4:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <SystemClock_Config+0xfc>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003400:	bf00      	nop
 8003402:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <SystemClock_Config+0xfc>)
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800340a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340e:	d1f8      	bne.n	8003402 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003410:	2303      	movs	r3, #3
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800341a:	2309      	movs	r3, #9
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800341e:	2340      	movs	r3, #64	; 0x40
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003422:	2302      	movs	r3, #2
 8003424:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003426:	2302      	movs	r3, #2
 8003428:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800342a:	2304      	movs	r3, #4
 800342c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800342e:	2318      	movs	r3, #24
 8003430:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003432:	2302      	movs	r3, #2
 8003434:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003436:	2302      	movs	r3, #2
 8003438:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800343a:	2302      	movs	r3, #2
 800343c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800343e:	2308      	movs	r3, #8
 8003440:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8003442:	2302      	movs	r3, #2
 8003444:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800344a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344e:	4618      	mov	r0, r3
 8003450:	f00a fa3a 	bl	800d8c8 <HAL_RCC_OscConfig>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800345a:	f000 f995 	bl	8003788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800345e:	233f      	movs	r3, #63	; 0x3f
 8003460:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003462:	2303      	movs	r3, #3
 8003464:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003472:	2340      	movs	r3, #64	; 0x40
 8003474:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800347a:	2300      	movs	r3, #0
 800347c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	2101      	movs	r1, #1
 8003482:	4618      	mov	r0, r3
 8003484:	f00a fe7a 	bl	800e17c <HAL_RCC_ClockConfig>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800348e:	f000 f97b 	bl	8003788 <Error_Handler>
  }
}
 8003492:	bf00      	nop
 8003494:	3770      	adds	r7, #112	; 0x70
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	58000400 	.word	0x58000400
 80034a0:	58024800 	.word	0x58024800

080034a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b0b0      	sub	sp, #192	; 0xc0
 80034a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034aa:	463b      	mov	r3, r7
 80034ac:	22c0      	movs	r2, #192	; 0xc0
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f016 fc73 	bl	8019d9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80034b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80034c2:	2304      	movs	r3, #4
 80034c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80034c6:	2318      	movs	r3, #24
 80034c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80034ca:	2308      	movs	r3, #8
 80034cc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80034ce:	2302      	movs	r3, #2
 80034d0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80034d2:	2302      	movs	r3, #2
 80034d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80034da:	2320      	movs	r3, #32
 80034dc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034e8:	463b      	mov	r3, r7
 80034ea:	4618      	mov	r0, r3
 80034ec:	f00b fa14 	bl	800e918 <HAL_RCCEx_PeriphCLKConfig>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80034f6:	f000 f947 	bl	8003788 <Error_Handler>
  }
}
 80034fa:	bf00      	nop
 80034fc:	37c0      	adds	r7, #192	; 0xc0
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	packet_event_flags = osEventFlagsNew(NULL);
 8003508:	2000      	movs	r0, #0
 800350a:	f013 fb42 	bl	8016b92 <osEventFlagsNew>
 800350e:	4603      	mov	r3, r0
 8003510:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <system_setup+0x7c>)
 8003512:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <system_setup+0x7c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d100      	bne.n	800351e <system_setup+0x1a>
        while (1);
 800351c:	e7fe      	b.n	800351c <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800351e:	2000      	movs	r0, #0
 8003520:	f013 fb37 	bl	8016b92 <osEventFlagsNew>
 8003524:	4603      	mov	r3, r0
 8003526:	4a17      	ldr	r2, [pc, #92]	; (8003584 <system_setup+0x80>)
 8003528:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 800352a:	4b16      	ldr	r3, [pc, #88]	; (8003584 <system_setup+0x80>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d100      	bne.n	8003534 <system_setup+0x30>
        while (1);
 8003532:	e7fe      	b.n	8003532 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003534:	2000      	movs	r0, #0
 8003536:	f013 fb2c 	bl	8016b92 <osEventFlagsNew>
 800353a:	4603      	mov	r3, r0
 800353c:	4a12      	ldr	r2, [pc, #72]	; (8003588 <system_setup+0x84>)
 800353e:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <system_setup+0x84>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d100      	bne.n	800354a <system_setup+0x46>
        while (1);
 8003548:	e7fe      	b.n	8003548 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 800354a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800354e:	2200      	movs	r2, #0
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8003552:	210c      	movs	r1, #12
 8003554:	480d      	ldr	r0, [pc, #52]	; (800358c <system_setup+0x88>)
 8003556:	f00f f86d 	bl	8012634 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 800355a:	f001 fd7d 	bl	8005058 <voltage_monitor_init>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d100      	bne.n	8003566 <system_setup+0x62>
		while (1);
 8003564:	e7fe      	b.n	8003564 <system_setup+0x60>
	}




	if (!init_adc_dma()) {
 8003566:	f000 fbaf 	bl	8003cc8 <init_adc_dma>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d100      	bne.n	8003572 <system_setup+0x6e>
		while (1);
 8003570:	e7fe      	b.n	8003570 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8003572:	2201      	movs	r2, #1
 8003574:	4906      	ldr	r1, [pc, #24]	; (8003590 <system_setup+0x8c>)
 8003576:	4807      	ldr	r0, [pc, #28]	; (8003594 <system_setup+0x90>)
 8003578:	f010 fd3c 	bl	8013ff4 <HAL_UART_Receive_IT>

}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}
 8003580:	24001a34 	.word	0x24001a34
 8003584:	24001a38 	.word	0x24001a38
 8003588:	24001a3c 	.word	0x24001a3c
 800358c:	24001d90 	.word	0x24001d90
 8003590:	24001a40 	.word	0x24001a40
 8003594:	24001ddc 	.word	0x24001ddc

08003598 <sync>:

void sync() {
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
	send_ACK();
 800359e:	f000 f81f 	bl	80035e0 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80035a2:	480d      	ldr	r0, [pc, #52]	; (80035d8 <sync+0x40>)
 80035a4:	f010 fd72 	bl	801408c <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80035a8:	2364      	movs	r3, #100	; 0x64
 80035aa:	2209      	movs	r2, #9
 80035ac:	490b      	ldr	r1, [pc, #44]	; (80035dc <sync+0x44>)
 80035ae:	480a      	ldr	r0, [pc, #40]	; (80035d8 <sync+0x40>)
 80035b0:	f010 fc58 	bl	8013e64 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <sync+0x44>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	2bff      	cmp	r3, #255	; 0xff
 80035be:	d1f3      	bne.n	80035a8 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80035c0:	2201      	movs	r2, #1
 80035c2:	4906      	ldr	r1, [pc, #24]	; (80035dc <sync+0x44>)
 80035c4:	4804      	ldr	r0, [pc, #16]	; (80035d8 <sync+0x40>)
 80035c6:	f010 fd15 	bl	8013ff4 <HAL_UART_Receive_IT>

	send_ACK();
 80035ca:	f000 f809 	bl	80035e0 <send_ACK>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	24001ddc 	.word	0x24001ddc
 80035dc:	24001a40 	.word	0x24001a40

080035e0 <send_ACK>:

void send_ACK() {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <send_ACK+0x1c>)
 80035e6:	22ff      	movs	r2, #255	; 0xff
 80035e8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80035ea:	2364      	movs	r3, #100	; 0x64
 80035ec:	2201      	movs	r2, #1
 80035ee:	4903      	ldr	r1, [pc, #12]	; (80035fc <send_ACK+0x1c>)
 80035f0:	4803      	ldr	r0, [pc, #12]	; (8003600 <send_ACK+0x20>)
 80035f2:	f010 fba9 	bl	8013d48 <HAL_UART_Transmit>
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	24001a8c 	.word	0x24001a8c
 8003600:	24001ddc 	.word	0x24001ddc

08003604 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800360a:	4b2e      	ldr	r3, [pc, #184]	; (80036c4 <get_current_step+0xc0>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003616:	4293      	cmp	r3, r2
 8003618:	d04a      	beq.n	80036b0 <get_current_step+0xac>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003620:	da48      	bge.n	80036b4 <get_current_step+0xb0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003628:	4293      	cmp	r3, r2
 800362a:	d03f      	beq.n	80036ac <get_current_step+0xa8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003632:	4293      	cmp	r3, r2
 8003634:	dc3e      	bgt.n	80036b4 <get_current_step+0xb0>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f640 421f 	movw	r2, #3103	; 0xc1f
 800363c:	4293      	cmp	r3, r2
 800363e:	d033      	beq.n	80036a8 <get_current_step+0xa4>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003646:	da35      	bge.n	80036b4 <get_current_step+0xb0>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800364e:	4293      	cmp	r3, r2
 8003650:	d028      	beq.n	80036a4 <get_current_step+0xa0>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003658:	4293      	cmp	r3, r2
 800365a:	dc2b      	bgt.n	80036b4 <get_current_step+0xb0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f240 7245 	movw	r2, #1861	; 0x745
 8003662:	4293      	cmp	r3, r2
 8003664:	d01c      	beq.n	80036a0 <get_current_step+0x9c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f240 7245 	movw	r2, #1861	; 0x745
 800366c:	4293      	cmp	r3, r2
 800366e:	dc21      	bgt.n	80036b4 <get_current_step+0xb0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003676:	4293      	cmp	r3, r2
 8003678:	d010      	beq.n	800369c <get_current_step+0x98>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003680:	4293      	cmp	r3, r2
 8003682:	dc17      	bgt.n	80036b4 <get_current_step+0xb0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <get_current_step+0x90>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8003690:	d002      	beq.n	8003698 <get_current_step+0x94>
 8003692:	e00f      	b.n	80036b4 <get_current_step+0xb0>
	case 0:
		return 0;
 8003694:	2300      	movs	r3, #0
 8003696:	e00e      	b.n	80036b6 <get_current_step+0xb2>
	case 620:
		return 1;
 8003698:	2301      	movs	r3, #1
 800369a:	e00c      	b.n	80036b6 <get_current_step+0xb2>
	case 1241:
		return 2;
 800369c:	2302      	movs	r3, #2
 800369e:	e00a      	b.n	80036b6 <get_current_step+0xb2>
	case 1861:
		return 3;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e008      	b.n	80036b6 <get_current_step+0xb2>
	case 2482:
		return 4;
 80036a4:	2304      	movs	r3, #4
 80036a6:	e006      	b.n	80036b6 <get_current_step+0xb2>
	case 3103:
		return 5;
 80036a8:	2305      	movs	r3, #5
 80036aa:	e004      	b.n	80036b6 <get_current_step+0xb2>
	case 3723:
		return 6;
 80036ac:	2306      	movs	r3, #6
 80036ae:	e002      	b.n	80036b6 <get_current_step+0xb2>
	case 4095:
		return 7;
 80036b0:	2307      	movs	r3, #7
 80036b2:	e000      	b.n	80036b6 <get_current_step+0xb2>
	default:
		return -1;
 80036b4:	23ff      	movs	r3, #255	; 0xff
	}
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40007400 	.word	0x40007400

080036c8 <enter_stop>:

void enter_stop() {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
	  send_ACK();
 80036cc:	f7ff ff88 	bl	80035e0 <send_ACK>

	  vTaskSuspendAll();
 80036d0:	f014 fdf6 	bl	80182c0 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80036d4:	2101      	movs	r1, #1
 80036d6:	2001      	movs	r0, #1
 80036d8:	f00a f880 	bl	800d7dc <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 80036dc:	f7ff f8c4 	bl	8002868 <__NVIC_SystemReset>

080036e0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80036e6:	463b      	mov	r3, r7
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80036f2:	f003 fd7f 	bl	80071f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036f6:	2301      	movs	r3, #1
 80036f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003702:	231f      	movs	r3, #31
 8003704:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003706:	2387      	movs	r3, #135	; 0x87
 8003708:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800370a:	2300      	movs	r3, #0
 800370c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800370e:	2300      	movs	r3, #0
 8003710:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003712:	2301      	movs	r3, #1
 8003714:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003716:	2301      	movs	r3, #1
 8003718:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800371a:	2300      	movs	r3, #0
 800371c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003722:	463b      	mov	r3, r7
 8003724:	4618      	mov	r0, r3
 8003726:	f003 fd9d 	bl	8007264 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800372a:	2301      	movs	r3, #1
 800372c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x081C0000;
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <MPU_Config+0x80>)
 8003730:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8003732:	2311      	movs	r3, #17
 8003734:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8003736:	2300      	movs	r3, #0
 8003738:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800373a:	2301      	movs	r3, #1
 800373c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800373e:	2303      	movs	r3, #3
 8003740:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8003742:	2300      	movs	r3, #0
 8003744:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003746:	2300      	movs	r3, #0
 8003748:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800374a:	463b      	mov	r3, r7
 800374c:	4618      	mov	r0, r3
 800374e:	f003 fd89 	bl	8007264 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003752:	2004      	movs	r0, #4
 8003754:	f003 fd66 	bl	8007224 <HAL_MPU_Enable>

}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	081c0000 	.word	0x081c0000

08003764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a04      	ldr	r2, [pc, #16]	; (8003784 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d101      	bne.n	800377a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003776:	f002 f807 	bl	8005788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40001000 	.word	0x40001000

08003788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800378c:	b672      	cpsid	i
}
 800378e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003790:	e7fe      	b.n	8003790 <Error_Handler+0x8>
	...

08003794 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800379a:	bf00      	nop
 800379c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037a0:	481c      	ldr	r0, [pc, #112]	; (8003814 <create_pmt_packet+0x80>)
 80037a2:	f007 fc85 	bl	800b0b0 <HAL_GPIO_ReadPin>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f7      	bne.n	800379c <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80037ac:	1d3b      	adds	r3, r7, #4
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 faa8 	bl	8004d04 <get_uptime>
	sample_pmt_spi(pmt_spi);
 80037b4:	f107 0308 	add.w	r3, r7, #8
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fad9 	bl	8003d70 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80037be:	23bb      	movs	r3, #187	; 0xbb
 80037c0:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 80037c2:	23bb      	movs	r3, #187	; 0xbb
 80037c4:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80037c6:	4b14      	ldr	r3, [pc, #80]	; (8003818 <create_pmt_packet+0x84>)
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <create_pmt_packet+0x84>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 80037da:	7a3b      	ldrb	r3, [r7, #8]
 80037dc:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 80037de:	7a7b      	ldrb	r3, [r7, #9]
 80037e0:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 80037e2:	793b      	ldrb	r3, [r7, #4]
 80037e4:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 80037e6:	797b      	ldrb	r3, [r7, #5]
 80037e8:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 80037ea:	79bb      	ldrb	r3, [r7, #6]
 80037ec:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 80037f2:	f107 010c 	add.w	r1, r7, #12
 80037f6:	2364      	movs	r3, #100	; 0x64
 80037f8:	220a      	movs	r2, #10
 80037fa:	4808      	ldr	r0, [pc, #32]	; (800381c <create_pmt_packet+0x88>)
 80037fc:	f010 faa4 	bl	8013d48 <HAL_UART_Transmit>

	pmt_seq++;
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <create_pmt_packet+0x84>)
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <create_pmt_packet+0x84>)
 800380a:	801a      	strh	r2, [r3, #0]
}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	58020000 	.word	0x58020000
 8003818:	24001a8e 	.word	0x24001a8e
 800381c:	24001ddc 	.word	0x24001ddc

08003820 <create_erpa_packet>:


void create_erpa_packet() {
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003826:	bf00      	nop
 8003828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800382c:	4828      	ldr	r0, [pc, #160]	; (80038d0 <create_erpa_packet+0xb0>)
 800382e:	f007 fc3f 	bl	800b0b0 <HAL_GPIO_ReadPin>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f7      	bne.n	8003828 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003838:	23ff      	movs	r3, #255	; 0xff
 800383a:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fa60 	bl	8004d04 <get_uptime>
	sweep_step = get_current_step();
 8003844:	f7ff fede 	bl	8003604 <get_current_step>
 8003848:	4603      	mov	r3, r0
 800384a:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 800384c:	f107 030c 	add.w	r3, r7, #12
 8003850:	4618      	mov	r0, r3
 8003852:	f000 faad 	bl	8003db0 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003856:	f107 0308 	add.w	r3, r7, #8
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fac8 	bl	8003df0 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003860:	23aa      	movs	r3, #170	; 0xaa
 8003862:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003864:	23aa      	movs	r3, #170	; 0xaa
 8003866:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003868:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <create_erpa_packet+0xb4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	b2db      	uxtb	r3, r3
 8003870:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003872:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <create_erpa_packet+0xb4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	0a1b      	lsrs	r3, r3, #8
 8003878:	b2db      	uxtb	r3, r3
 800387a:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 800387c:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <create_erpa_packet+0xb4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003884:	7ffb      	ldrb	r3, [r7, #31]
 8003886:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003888:	893b      	ldrh	r3, [r7, #8]
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	b29b      	uxth	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003892:	893b      	ldrh	r3, [r7, #8]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003898:	7b3b      	ldrb	r3, [r7, #12]
 800389a:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 800389c:	7b7b      	ldrb	r3, [r7, #13]
 800389e:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80038a0:	793b      	ldrb	r3, [r7, #4]
 80038a2:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 80038a4:	797b      	ldrb	r3, [r7, #5]
 80038a6:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 80038a8:	79bb      	ldrb	r3, [r7, #6]
 80038aa:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80038b0:	f107 0110 	add.w	r1, r7, #16
 80038b4:	2364      	movs	r3, #100	; 0x64
 80038b6:	220e      	movs	r2, #14
 80038b8:	4807      	ldr	r0, [pc, #28]	; (80038d8 <create_erpa_packet+0xb8>)
 80038ba:	f010 fa45 	bl	8013d48 <HAL_UART_Transmit>

	erpa_seq++;
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <create_erpa_packet+0xb4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	4a03      	ldr	r2, [pc, #12]	; (80038d4 <create_erpa_packet+0xb4>)
 80038c6:	6013      	str	r3, [r2, #0]
}
 80038c8:	bf00      	nop
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	58020400 	.word	0x58020400
 80038d4:	24001a90 	.word	0x24001a90
 80038d8:	24001ddc 	.word	0x24001ddc

080038dc <create_hk_packet>:


void create_hk_packet() {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b094      	sub	sp, #80	; 0x50
 80038e0:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 fa0d 	bl	8004d04 <get_uptime>
	get_timestamp(timestamp);
 80038ea:	f107 0308 	add.w	r3, r7, #8
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 fa58 	bl	8004da4 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 80038f4:	f001 fdf0 	bl	80054d8 <get_rail_monitor>
 80038f8:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80038fa:	23cc      	movs	r3, #204	; 0xcc
 80038fc:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80038fe:	23cc      	movs	r3, #204	; 0xcc
 8003900:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003902:	4b9b      	ldr	r3, [pc, #620]	; (8003b70 <create_hk_packet+0x294>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	b29b      	uxth	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800390e:	4b98      	ldr	r3, [pc, #608]	; (8003b70 <create_hk_packet+0x294>)
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003918:	889b      	ldrh	r3, [r3, #4]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	b29b      	uxth	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003924:	889b      	ldrh	r3, [r3, #4]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 800392a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392c:	330a      	adds	r3, #10
 800392e:	889b      	ldrh	r3, [r3, #4]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	b29b      	uxth	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393a:	330a      	adds	r3, #10
 800393c:	889b      	ldrh	r3, [r3, #4]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003944:	3314      	adds	r3, #20
 8003946:	889b      	ldrh	r3, [r3, #4]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	b29b      	uxth	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003952:	3314      	adds	r3, #20
 8003954:	889b      	ldrh	r3, [r3, #4]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 800395a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395c:	331e      	adds	r3, #30
 800395e:	889b      	ldrh	r3, [r3, #4]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	b29b      	uxth	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396a:	331e      	adds	r3, #30
 800396c:	889b      	ldrh	r3, [r3, #4]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003974:	3328      	adds	r3, #40	; 0x28
 8003976:	889b      	ldrh	r3, [r3, #4]
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	b29b      	uxth	r3, r3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003984:	3328      	adds	r3, #40	; 0x28
 8003986:	889b      	ldrh	r3, [r3, #4]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 800398e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003990:	3332      	adds	r3, #50	; 0x32
 8003992:	889b      	ldrh	r3, [r3, #4]
 8003994:	0a1b      	lsrs	r3, r3, #8
 8003996:	b29b      	uxth	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	3332      	adds	r3, #50	; 0x32
 80039a2:	889b      	ldrh	r3, [r3, #4]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 80039aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ac:	333c      	adds	r3, #60	; 0x3c
 80039ae:	889b      	ldrh	r3, [r3, #4]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 80039ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039bc:	333c      	adds	r3, #60	; 0x3c
 80039be:	889b      	ldrh	r3, [r3, #4]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 80039c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c8:	3346      	adds	r3, #70	; 0x46
 80039ca:	889b      	ldrh	r3, [r3, #4]
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	3346      	adds	r3, #70	; 0x46
 80039da:	889b      	ldrh	r3, [r3, #4]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 80039e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e4:	3350      	adds	r3, #80	; 0x50
 80039e6:	889b      	ldrh	r3, [r3, #4]
 80039e8:	0a1b      	lsrs	r3, r3, #8
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 80039f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f4:	3350      	adds	r3, #80	; 0x50
 80039f6:	889b      	ldrh	r3, [r3, #4]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 80039fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a00:	335a      	adds	r3, #90	; 0x5a
 8003a02:	889b      	ldrh	r3, [r3, #4]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a10:	335a      	adds	r3, #90	; 0x5a
 8003a12:	889b      	ldrh	r3, [r3, #4]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1c:	3364      	adds	r3, #100	; 0x64
 8003a1e:	889b      	ldrh	r3, [r3, #4]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2c:	3364      	adds	r3, #100	; 0x64
 8003a2e:	889b      	ldrh	r3, [r3, #4]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a38:	336e      	adds	r3, #110	; 0x6e
 8003a3a:	889b      	ldrh	r3, [r3, #4]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a48:	336e      	adds	r3, #110	; 0x6e
 8003a4a:	889b      	ldrh	r3, [r3, #4]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a54:	3378      	adds	r3, #120	; 0x78
 8003a56:	889b      	ldrh	r3, [r3, #4]
 8003a58:	0a1b      	lsrs	r3, r3, #8
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a64:	3378      	adds	r3, #120	; 0x78
 8003a66:	889b      	ldrh	r3, [r3, #4]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a70:	3382      	adds	r3, #130	; 0x82
 8003a72:	889b      	ldrh	r3, [r3, #4]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a80:	3382      	adds	r3, #130	; 0x82
 8003a82:	889b      	ldrh	r3, [r3, #4]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8c:	338c      	adds	r3, #140	; 0x8c
 8003a8e:	889b      	ldrh	r3, [r3, #4]
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9c:	338c      	adds	r3, #140	; 0x8c
 8003a9e:	889b      	ldrh	r3, [r3, #4]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa8:	3396      	adds	r3, #150	; 0x96
 8003aaa:	889b      	ldrh	r3, [r3, #4]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab8:	3396      	adds	r3, #150	; 0x96
 8003aba:	889b      	ldrh	r3, [r3, #4]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac4:	33a0      	adds	r3, #160	; 0xa0
 8003ac6:	889b      	ldrh	r3, [r3, #4]
 8003ac8:	0a1b      	lsrs	r3, r3, #8
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad4:	33a0      	adds	r3, #160	; 0xa0
 8003ad6:	889b      	ldrh	r3, [r3, #4]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae0:	33aa      	adds	r3, #170	; 0xaa
 8003ae2:	889b      	ldrh	r3, [r3, #4]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af0:	33aa      	adds	r3, #170	; 0xaa
 8003af2:	889b      	ldrh	r3, [r3, #4]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8003afa:	7a3b      	ldrb	r3, [r7, #8]
 8003afc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8003b00:	7a7b      	ldrb	r3, [r7, #9]
 8003b02:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8003b06:	7abb      	ldrb	r3, [r7, #10]
 8003b08:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8003b0c:	7afb      	ldrb	r3, [r7, #11]
 8003b0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8003b12:	7b3b      	ldrb	r3, [r7, #12]
 8003b14:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8003b18:	7b7b      	ldrb	r3, [r7, #13]
 8003b1a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8003b1e:	7bbb      	ldrb	r3, [r7, #14]
 8003b20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8003b2a:	7c3b      	ldrb	r3, [r7, #16]
 8003b2c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8003b30:	7c7b      	ldrb	r3, [r7, #17]
 8003b32:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8003b36:	793b      	ldrb	r3, [r7, #4]
 8003b38:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8003b3c:	797b      	ldrb	r3, [r7, #5]
 8003b3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8003b42:	79bb      	ldrb	r3, [r7, #6]
 8003b44:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003b4e:	f107 0114 	add.w	r1, r7, #20
 8003b52:	2364      	movs	r3, #100	; 0x64
 8003b54:	2236      	movs	r2, #54	; 0x36
 8003b56:	4807      	ldr	r0, [pc, #28]	; (8003b74 <create_hk_packet+0x298>)
 8003b58:	f010 f8f6 	bl	8013d48 <HAL_UART_Transmit>

	hk_seq++;
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <create_hk_packet+0x294>)
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	4b02      	ldr	r3, [pc, #8]	; (8003b70 <create_hk_packet+0x294>)
 8003b66:	801a      	strh	r2, [r3, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3750      	adds	r7, #80	; 0x50
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	24001a94 	.word	0x24001a94
 8003b74:	24001ddc 	.word	0x24001ddc

08003b78 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <reset_packet_sequence_numbers+0x20>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <reset_packet_sequence_numbers+0x24>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <reset_packet_sequence_numbers+0x28>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	801a      	strh	r2, [r3, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	24001a8e 	.word	0x24001a8e
 8003b9c:	24001a90 	.word	0x24001a90
 8003ba0:	24001a94 	.word	0x24001a94

08003ba4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003bb8:	2300      	movs	r3, #0
 8003bba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003bbc:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <MX_RTC_Init+0xb4>)
 8003bbe:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <MX_RTC_Init+0xb8>)
 8003bc0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003bc2:	4b25      	ldr	r3, [pc, #148]	; (8003c58 <MX_RTC_Init+0xb4>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003bc8:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <MX_RTC_Init+0xb4>)
 8003bca:	2263      	movs	r2, #99	; 0x63
 8003bcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003bce:	4b22      	ldr	r3, [pc, #136]	; (8003c58 <MX_RTC_Init+0xb4>)
 8003bd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8003bd4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <MX_RTC_Init+0xb4>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003bdc:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <MX_RTC_Init+0xb4>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <MX_RTC_Init+0xb4>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <MX_RTC_Init+0xb4>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003bee:	481a      	ldr	r0, [pc, #104]	; (8003c58 <MX_RTC_Init+0xb4>)
 8003bf0:	f00d fb90 	bl	8011314 <HAL_RTC_Init>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003bfa:	f7ff fdc5 	bl	8003788 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	2201      	movs	r2, #1
 8003c16:	4619      	mov	r1, r3
 8003c18:	480f      	ldr	r0, [pc, #60]	; (8003c58 <MX_RTC_Init+0xb4>)
 8003c1a:	f00d fbfd 	bl	8011418 <HAL_RTC_SetTime>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003c24:	f7ff fdb0 	bl	8003788 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003c30:	2301      	movs	r3, #1
 8003c32:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003c38:	463b      	mov	r3, r7
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4806      	ldr	r0, [pc, #24]	; (8003c58 <MX_RTC_Init+0xb4>)
 8003c40:	f00d fce4 	bl	801160c <HAL_RTC_SetDate>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003c4a:	f7ff fd9d 	bl	8003788 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	24001a98 	.word	0x24001a98
 8003c5c:	58004000 	.word	0x58004000

08003c60 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b0b2      	sub	sp, #200	; 0xc8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c68:	f107 0308 	add.w	r3, r7, #8
 8003c6c:	22c0      	movs	r2, #192	; 0xc0
 8003c6e:	2100      	movs	r1, #0
 8003c70:	4618      	mov	r0, r3
 8003c72:	f016 f893 	bl	8019d9c <memset>
  if(rtcHandle->Instance==RTC)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a10      	ldr	r2, [pc, #64]	; (8003cbc <HAL_RTC_MspInit+0x5c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d118      	bne.n	8003cb2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c80:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <HAL_RTC_MspInit+0x60>)
 8003c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c92:	f107 0308 	add.w	r3, r7, #8
 8003c96:	4618      	mov	r0, r3
 8003c98:	f00a fe3e 	bl	800e918 <HAL_RCCEx_PeriphCLKConfig>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003ca2:	f7ff fd71 	bl	8003788 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_RTC_MspInit+0x64>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	4a06      	ldr	r2, [pc, #24]	; (8003cc4 <HAL_RTC_MspInit+0x64>)
 8003cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	37c8      	adds	r7, #200	; 0xc8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	58004000 	.word	0x58004000
 8003cc0:	00019300 	.word	0x00019300
 8003cc4:	58024400 	.word	0x58024400

08003cc8 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003cd2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003cd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cda:	481f      	ldr	r0, [pc, #124]	; (8003d58 <init_adc_dma+0x90>)
 8003cdc:	f003 f868 	bl	8006db0 <HAL_ADCEx_Calibration_Start>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003ce6:	f7ff fd4f 	bl	8003788 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003cea:	220b      	movs	r2, #11
 8003cec:	491b      	ldr	r1, [pc, #108]	; (8003d5c <init_adc_dma+0x94>)
 8003cee:	481a      	ldr	r0, [pc, #104]	; (8003d58 <init_adc_dma+0x90>)
 8003cf0:	f002 f93c 	bl	8005f6c <HAL_ADC_Start_DMA>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003cfa:	f7ff fd45 	bl	8003788 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003cfe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d06:	4816      	ldr	r0, [pc, #88]	; (8003d60 <init_adc_dma+0x98>)
 8003d08:	f003 f852 	bl	8006db0 <HAL_ADCEx_Calibration_Start>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003d12:	f7ff fd39 	bl	8003788 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003d16:	2204      	movs	r2, #4
 8003d18:	4912      	ldr	r1, [pc, #72]	; (8003d64 <init_adc_dma+0x9c>)
 8003d1a:	4811      	ldr	r0, [pc, #68]	; (8003d60 <init_adc_dma+0x98>)
 8003d1c:	f002 f926 	bl	8005f6c <HAL_ADC_Start_DMA>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003d26:	f7ff fd2f 	bl	8003788 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <init_adc_dma+0xa0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <init_adc_dma+0xa0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d38:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <init_adc_dma+0xa4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <init_adc_dma+0xa4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d48:	601a      	str	r2, [r3, #0]


	status = 1;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	71fb      	strb	r3, [r7, #7]

	return status;
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	2400013c 	.word	0x2400013c
 8003d5c:	24001ac0 	.word	0x24001ac0
 8003d60:	240001a0 	.word	0x240001a0
 8003d64:	24001ae0 	.word	0x24001ae0
 8003d68:	24001b7c 	.word	0x24001b7c
 8003d6c:	24001af4 	.word	0x24001af4

08003d70 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003d78:	2201      	movs	r2, #1
 8003d7a:	490b      	ldr	r1, [pc, #44]	; (8003da8 <sample_pmt_spi+0x38>)
 8003d7c:	480b      	ldr	r0, [pc, #44]	; (8003dac <sample_pmt_spi+0x3c>)
 8003d7e:	f00d ff0f 	bl	8011ba0 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <sample_pmt_spi+0x38>)
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <sample_pmt_spi+0x38>)
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7bfa      	ldrb	r2, [r7, #15]
 8003d96:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	7bba      	ldrb	r2, [r7, #14]
 8003d9e:	701a      	strb	r2, [r3, #0]
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	24001aec 	.word	0x24001aec
 8003dac:	24001af4 	.word	0x24001af4

08003db0 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8003db8:	2201      	movs	r2, #1
 8003dba:	490b      	ldr	r1, [pc, #44]	; (8003de8 <sample_erpa_spi+0x38>)
 8003dbc:	480b      	ldr	r0, [pc, #44]	; (8003dec <sample_erpa_spi+0x3c>)
 8003dbe:	f00d feef 	bl	8011ba0 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <sample_erpa_spi+0x38>)
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <sample_erpa_spi+0x38>)
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	7bba      	ldrb	r2, [r7, #14]
 8003dde:	701a      	strb	r2, [r3, #0]
}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	24001ae8 	.word	0x24001ae8
 8003dec:	24001b7c 	.word	0x24001b7c

08003df0 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <sample_erpa_adc+0x20>)
 8003dfa:	885b      	ldrh	r3, [r3, #2]
 8003dfc:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	89fa      	ldrh	r2, [r7, #14]
 8003e02:	801a      	strh	r2, [r3, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	24001ac0 	.word	0x24001ac0

08003e14 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8003e1c:	2390      	movs	r3, #144	; 0x90
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f8a2 	bl	8003f68 <poll_i2c_sensor>
 8003e24:	4603      	mov	r3, r0
 8003e26:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8003e28:	2394      	movs	r3, #148	; 0x94
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f89c 	bl	8003f68 <poll_i2c_sensor>
 8003e30:	4603      	mov	r3, r0
 8003e32:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8003e34:	2392      	movs	r3, #146	; 0x92
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f896 	bl	8003f68 <poll_i2c_sensor>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8003e40:	2396      	movs	r3, #150	; 0x96
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f890 	bl	8003f68 <poll_i2c_sensor>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	89fa      	ldrh	r2, [r7, #14]
 8003e50:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3302      	adds	r3, #2
 8003e56:	89ba      	ldrh	r2, [r7, #12]
 8003e58:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	897a      	ldrh	r2, [r7, #10]
 8003e60:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3306      	adds	r3, #6
 8003e66:	893a      	ldrh	r2, [r7, #8]
 8003e68:	801a      	strh	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <sample_hk_adc1+0xa0>)
 8003e7e:	8a9b      	ldrh	r3, [r3, #20]
 8003e80:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8003e82:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <sample_hk_adc1+0xa0>)
 8003e84:	8a1b      	ldrh	r3, [r3, #16]
 8003e86:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8003e88:	4b22      	ldr	r3, [pc, #136]	; (8003f14 <sample_hk_adc1+0xa0>)
 8003e8a:	899b      	ldrh	r3, [r3, #12]
 8003e8c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8003e8e:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <sample_hk_adc1+0xa0>)
 8003e90:	8a5b      	ldrh	r3, [r3, #18]
 8003e92:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8003e94:	4b1f      	ldr	r3, [pc, #124]	; (8003f14 <sample_hk_adc1+0xa0>)
 8003e96:	889b      	ldrh	r3, [r3, #4]
 8003e98:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8003e9a:	4b1e      	ldr	r3, [pc, #120]	; (8003f14 <sample_hk_adc1+0xa0>)
 8003e9c:	88db      	ldrh	r3, [r3, #6]
 8003e9e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8003ea0:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <sample_hk_adc1+0xa0>)
 8003ea2:	89db      	ldrh	r3, [r3, #14]
 8003ea4:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <sample_hk_adc1+0xa0>)
 8003ea8:	891b      	ldrh	r3, [r3, #8]
 8003eaa:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <sample_hk_adc1+0xa0>)
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8003eb2:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <sample_hk_adc1+0xa0>)
 8003eb4:	895b      	ldrh	r3, [r3, #10]
 8003eb6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8bfa      	ldrh	r2, [r7, #30]
 8003ebc:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	8bba      	ldrh	r2, [r7, #28]
 8003ec4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	8b7a      	ldrh	r2, [r7, #26]
 8003ecc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3306      	adds	r3, #6
 8003ed2:	8b3a      	ldrh	r2, [r7, #24]
 8003ed4:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	8afa      	ldrh	r2, [r7, #22]
 8003edc:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	330a      	adds	r3, #10
 8003ee2:	8aba      	ldrh	r2, [r7, #20]
 8003ee4:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	8a7a      	ldrh	r2, [r7, #18]
 8003eec:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	330e      	adds	r3, #14
 8003ef2:	8a3a      	ldrh	r2, [r7, #16]
 8003ef4:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3310      	adds	r3, #16
 8003efa:	89fa      	ldrh	r2, [r7, #14]
 8003efc:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3312      	adds	r3, #18
 8003f02:	89ba      	ldrh	r2, [r7, #12]
 8003f04:	801a      	strh	r2, [r3, #0]
}
 8003f06:	bf00      	nop
 8003f08:	3724      	adds	r7, #36	; 0x24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	24001ac0 	.word	0x24001ac0

08003f18 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <sample_hk_adc3+0x4c>)
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <sample_hk_adc3+0x4c>)
 8003f28:	885b      	ldrh	r3, [r3, #2]
 8003f2a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <sample_hk_adc3+0x4c>)
 8003f2e:	889b      	ldrh	r3, [r3, #4]
 8003f30:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8003f32:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <sample_hk_adc3+0x4c>)
 8003f34:	88db      	ldrh	r3, [r3, #6]
 8003f36:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	89fa      	ldrh	r2, [r7, #14]
 8003f3c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3302      	adds	r3, #2
 8003f42:	89ba      	ldrh	r2, [r7, #12]
 8003f44:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	897a      	ldrh	r2, [r7, #10]
 8003f4c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3306      	adds	r3, #6
 8003f52:	893a      	ldrh	r2, [r7, #8]
 8003f54:	801a      	strh	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	24001ae0 	.word	0x24001ae0

08003f68 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8003f72:	2200      	movs	r2, #0
 8003f74:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <poll_i2c_sensor+0x90>)
 8003f76:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	b299      	uxth	r1, r3
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <poll_i2c_sensor+0x90>)
 8003f80:	481e      	ldr	r0, [pc, #120]	; (8003ffc <poll_i2c_sensor+0x94>)
 8003f82:	f007 f963 	bl	800b24c <HAL_I2C_Master_Transmit_DMA>
 8003f86:	4603      	mov	r3, r0
 8003f88:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8003f8a:	7b7b      	ldrb	r3, [r7, #13]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8003f90:	481b      	ldr	r0, [pc, #108]	; (8004000 <poll_i2c_sensor+0x98>)
 8003f92:	f015 ff79 	bl	8019e88 <puts>
 8003f96:	e028      	b.n	8003fea <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8003f98:	bf00      	nop
 8003f9a:	4818      	ldr	r0, [pc, #96]	; (8003ffc <poll_i2c_sensor+0x94>)
 8003f9c:	f007 fc3d 	bl	800b81a <HAL_I2C_GetState>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d1f9      	bne.n	8003f9a <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	b299      	uxth	r1, r3
 8003faa:	2302      	movs	r3, #2
 8003fac:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <poll_i2c_sensor+0x90>)
 8003fae:	4813      	ldr	r0, [pc, #76]	; (8003ffc <poll_i2c_sensor+0x94>)
 8003fb0:	f007 fa60 	bl	800b474 <HAL_I2C_Master_Receive_DMA>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8003fb8:	7b7b      	ldrb	r3, [r7, #13]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8003fbe:	4811      	ldr	r0, [pc, #68]	; (8004004 <poll_i2c_sensor+0x9c>)
 8003fc0:	f015 ff62 	bl	8019e88 <puts>
 8003fc4:	e011      	b.n	8003fea <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8003fc6:	bf00      	nop
 8003fc8:	480c      	ldr	r0, [pc, #48]	; (8003ffc <poll_i2c_sensor+0x94>)
 8003fca:	f007 fc26 	bl	800b81a <HAL_I2C_GetState>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d1f9      	bne.n	8003fc8 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <poll_i2c_sensor+0x90>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8003fdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fe0:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <poll_i2c_sensor+0x90>)
 8003fe2:	7852      	ldrb	r2, [r2, #1]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	10db      	asrs	r3, r3, #3
 8003fe8:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8003fea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	24001af0 	.word	0x24001af0
 8003ffc:	240018f0 	.word	0x240018f0
 8004000:	0801a9f0 	.word	0x0801a9f0
 8004004:	0801aa00 	.word	0x0801aa00

08004008 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800400c:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <MX_SPI1_Init+0xa8>)
 800400e:	4a29      	ldr	r2, [pc, #164]	; (80040b4 <MX_SPI1_Init+0xac>)
 8004010:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004012:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004014:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004018:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800401a:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <MX_SPI1_Init+0xa8>)
 800401c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004020:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004024:	220f      	movs	r2, #15
 8004026:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004028:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <MX_SPI1_Init+0xa8>)
 800402a:	2200      	movs	r2, #0
 800402c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800402e:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004030:	2200      	movs	r2, #0
 8004032:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004034:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004036:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800403a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800403c:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <MX_SPI1_Init+0xa8>)
 800403e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004042:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004046:	2200      	movs	r2, #0
 8004048:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800404a:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <MX_SPI1_Init+0xa8>)
 800404c:	2200      	movs	r2, #0
 800404e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004052:	2200      	movs	r2, #0
 8004054:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004058:	2200      	movs	r2, #0
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <MX_SPI1_Init+0xa8>)
 800405e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004062:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004064:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004066:	2200      	movs	r2, #0
 8004068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <MX_SPI1_Init+0xa8>)
 800406c:	2200      	movs	r2, #0
 800406e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004072:	2200      	movs	r2, #0
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004076:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004078:	2200      	movs	r2, #0
 800407a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800407c:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <MX_SPI1_Init+0xa8>)
 800407e:	2200      	movs	r2, #0
 8004080:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004084:	2200      	movs	r2, #0
 8004086:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <MX_SPI1_Init+0xa8>)
 800408a:	2200      	movs	r2, #0
 800408c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004090:	2200      	movs	r2, #0
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <MX_SPI1_Init+0xa8>)
 8004096:	2200      	movs	r2, #0
 8004098:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800409a:	4805      	ldr	r0, [pc, #20]	; (80040b0 <MX_SPI1_Init+0xa8>)
 800409c:	f00d fc5c 	bl	8011958 <HAL_SPI_Init>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80040a6:	f7ff fb6f 	bl	8003788 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	24001af4 	.word	0x24001af4
 80040b4:	40013000 	.word	0x40013000

080040b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80040bc:	4b28      	ldr	r3, [pc, #160]	; (8004160 <MX_SPI2_Init+0xa8>)
 80040be:	4a29      	ldr	r2, [pc, #164]	; (8004164 <MX_SPI2_Init+0xac>)
 80040c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80040c2:	4b27      	ldr	r3, [pc, #156]	; (8004160 <MX_SPI2_Init+0xa8>)
 80040c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80040c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80040ca:	4b25      	ldr	r3, [pc, #148]	; (8004160 <MX_SPI2_Init+0xa8>)
 80040cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80040d0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80040d2:	4b23      	ldr	r3, [pc, #140]	; (8004160 <MX_SPI2_Init+0xa8>)
 80040d4:	220f      	movs	r2, #15
 80040d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040d8:	4b21      	ldr	r3, [pc, #132]	; (8004160 <MX_SPI2_Init+0xa8>)
 80040da:	2200      	movs	r2, #0
 80040dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040de:	4b20      	ldr	r3, [pc, #128]	; (8004160 <MX_SPI2_Init+0xa8>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040e4:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <MX_SPI2_Init+0xa8>)
 80040e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80040ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80040ec:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <MX_SPI2_Init+0xa8>)
 80040ee:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80040f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040f4:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <MX_SPI2_Init+0xa8>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040fa:	4b19      	ldr	r3, [pc, #100]	; (8004160 <MX_SPI2_Init+0xa8>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004100:	4b17      	ldr	r3, [pc, #92]	; (8004160 <MX_SPI2_Init+0xa8>)
 8004102:	2200      	movs	r2, #0
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004106:	4b16      	ldr	r3, [pc, #88]	; (8004160 <MX_SPI2_Init+0xa8>)
 8004108:	2200      	movs	r2, #0
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800410c:	4b14      	ldr	r3, [pc, #80]	; (8004160 <MX_SPI2_Init+0xa8>)
 800410e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004112:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004114:	4b12      	ldr	r3, [pc, #72]	; (8004160 <MX_SPI2_Init+0xa8>)
 8004116:	2200      	movs	r2, #0
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <MX_SPI2_Init+0xa8>)
 800411c:	2200      	movs	r2, #0
 800411e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <MX_SPI2_Init+0xa8>)
 8004122:	2200      	movs	r2, #0
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004126:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <MX_SPI2_Init+0xa8>)
 8004128:	2200      	movs	r2, #0
 800412a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <MX_SPI2_Init+0xa8>)
 800412e:	2200      	movs	r2, #0
 8004130:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <MX_SPI2_Init+0xa8>)
 8004134:	2200      	movs	r2, #0
 8004136:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <MX_SPI2_Init+0xa8>)
 800413a:	2200      	movs	r2, #0
 800413c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <MX_SPI2_Init+0xa8>)
 8004140:	2200      	movs	r2, #0
 8004142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <MX_SPI2_Init+0xa8>)
 8004146:	2200      	movs	r2, #0
 8004148:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800414a:	4805      	ldr	r0, [pc, #20]	; (8004160 <MX_SPI2_Init+0xa8>)
 800414c:	f00d fc04 	bl	8011958 <HAL_SPI_Init>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004156:	f7ff fb17 	bl	8003788 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	24001b7c 	.word	0x24001b7c
 8004164:	40003800 	.word	0x40003800

08004168 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b0bc      	sub	sp, #240	; 0xf0
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004170:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004180:	f107 0318 	add.w	r3, r7, #24
 8004184:	22c0      	movs	r2, #192	; 0xc0
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f015 fe07 	bl	8019d9c <memset>
  if(spiHandle->Instance==SPI1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a83      	ldr	r2, [pc, #524]	; (80043a0 <HAL_SPI_MspInit+0x238>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d17c      	bne.n	8004292 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041a8:	f107 0318 	add.w	r3, r7, #24
 80041ac:	4618      	mov	r0, r3
 80041ae:	f00a fbb3 	bl	800e918 <HAL_RCCEx_PeriphCLKConfig>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80041b8:	f7ff fae6 	bl	8003788 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80041bc:	4b79      	ldr	r3, [pc, #484]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80041be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041c2:	4a78      	ldr	r2, [pc, #480]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80041c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041cc:	4b75      	ldr	r3, [pc, #468]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80041ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041da:	4b72      	ldr	r3, [pc, #456]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80041dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041e0:	4a70      	ldr	r2, [pc, #448]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80041e2:	f043 0302 	orr.w	r3, r3, #2
 80041e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041ea:	4b6e      	ldr	r3, [pc, #440]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80041ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80041f8:	2318      	movs	r3, #24
 80041fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fe:	2302      	movs	r3, #2
 8004200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420a:	2300      	movs	r3, #0
 800420c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004210:	2305      	movs	r3, #5
 8004212:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004216:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800421a:	4619      	mov	r1, r3
 800421c:	4862      	ldr	r0, [pc, #392]	; (80043a8 <HAL_SPI_MspInit+0x240>)
 800421e:	f006 fd97 	bl	800ad50 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8004222:	4b62      	ldr	r3, [pc, #392]	; (80043ac <HAL_SPI_MspInit+0x244>)
 8004224:	4a62      	ldr	r2, [pc, #392]	; (80043b0 <HAL_SPI_MspInit+0x248>)
 8004226:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004228:	4b60      	ldr	r3, [pc, #384]	; (80043ac <HAL_SPI_MspInit+0x244>)
 800422a:	2225      	movs	r2, #37	; 0x25
 800422c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800422e:	4b5f      	ldr	r3, [pc, #380]	; (80043ac <HAL_SPI_MspInit+0x244>)
 8004230:	2200      	movs	r2, #0
 8004232:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004234:	4b5d      	ldr	r3, [pc, #372]	; (80043ac <HAL_SPI_MspInit+0x244>)
 8004236:	2200      	movs	r2, #0
 8004238:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800423a:	4b5c      	ldr	r3, [pc, #368]	; (80043ac <HAL_SPI_MspInit+0x244>)
 800423c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004240:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004242:	4b5a      	ldr	r3, [pc, #360]	; (80043ac <HAL_SPI_MspInit+0x244>)
 8004244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004248:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800424a:	4b58      	ldr	r3, [pc, #352]	; (80043ac <HAL_SPI_MspInit+0x244>)
 800424c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004250:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004252:	4b56      	ldr	r3, [pc, #344]	; (80043ac <HAL_SPI_MspInit+0x244>)
 8004254:	2200      	movs	r2, #0
 8004256:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004258:	4b54      	ldr	r3, [pc, #336]	; (80043ac <HAL_SPI_MspInit+0x244>)
 800425a:	2200      	movs	r2, #0
 800425c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800425e:	4b53      	ldr	r3, [pc, #332]	; (80043ac <HAL_SPI_MspInit+0x244>)
 8004260:	2200      	movs	r2, #0
 8004262:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004264:	4851      	ldr	r0, [pc, #324]	; (80043ac <HAL_SPI_MspInit+0x244>)
 8004266:	f003 fc43 	bl	8007af0 <HAL_DMA_Init>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004270:	f7ff fa8a 	bl	8003788 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a4d      	ldr	r2, [pc, #308]	; (80043ac <HAL_SPI_MspInit+0x244>)
 8004278:	67da      	str	r2, [r3, #124]	; 0x7c
 800427a:	4a4c      	ldr	r2, [pc, #304]	; (80043ac <HAL_SPI_MspInit+0x244>)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004280:	2200      	movs	r2, #0
 8004282:	2105      	movs	r1, #5
 8004284:	2023      	movs	r0, #35	; 0x23
 8004286:	f002 ff8d 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800428a:	2023      	movs	r0, #35	; 0x23
 800428c:	f002 ffa4 	bl	80071d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004290:	e081      	b.n	8004396 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a47      	ldr	r2, [pc, #284]	; (80043b4 <HAL_SPI_MspInit+0x24c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d17c      	bne.n	8004396 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800429c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042ac:	f107 0318 	add.w	r3, r7, #24
 80042b0:	4618      	mov	r0, r3
 80042b2:	f00a fb31 	bl	800e918 <HAL_RCCEx_PeriphCLKConfig>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80042bc:	f7ff fa64 	bl	8003788 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80042c0:	4b38      	ldr	r3, [pc, #224]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80042c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042c6:	4a37      	ldr	r2, [pc, #220]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80042c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042d0:	4b34      	ldr	r3, [pc, #208]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80042d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042de:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80042e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e4:	4a2f      	ldr	r2, [pc, #188]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80042e6:	f043 0302 	orr.w	r3, r3, #2
 80042ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042ee:	4b2d      	ldr	r3, [pc, #180]	; (80043a4 <HAL_SPI_MspInit+0x23c>)
 80042f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80042fc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004300:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004304:	2302      	movs	r3, #2
 8004306:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430a:	2300      	movs	r3, #0
 800430c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004310:	2300      	movs	r3, #0
 8004312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004316:	2305      	movs	r3, #5
 8004318:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004320:	4619      	mov	r1, r3
 8004322:	4821      	ldr	r0, [pc, #132]	; (80043a8 <HAL_SPI_MspInit+0x240>)
 8004324:	f006 fd14 	bl	800ad50 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004328:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 800432a:	4a24      	ldr	r2, [pc, #144]	; (80043bc <HAL_SPI_MspInit+0x254>)
 800432c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800432e:	4b22      	ldr	r3, [pc, #136]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 8004330:	2227      	movs	r2, #39	; 0x27
 8004332:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004334:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800433a:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 800433c:	2200      	movs	r2, #0
 800433e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004340:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 8004342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004346:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 800434a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800434e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 8004352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004356:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004358:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 800435a:	2200      	movs	r2, #0
 800435c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800435e:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 8004360:	2200      	movs	r2, #0
 8004362:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 8004366:	2200      	movs	r2, #0
 8004368:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800436a:	4813      	ldr	r0, [pc, #76]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 800436c:	f003 fbc0 	bl	8007af0 <HAL_DMA_Init>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8004376:	f7ff fa07 	bl	8003788 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 800437e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004380:	4a0d      	ldr	r2, [pc, #52]	; (80043b8 <HAL_SPI_MspInit+0x250>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004386:	2200      	movs	r2, #0
 8004388:	2105      	movs	r1, #5
 800438a:	2024      	movs	r0, #36	; 0x24
 800438c:	f002 ff0a 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004390:	2024      	movs	r0, #36	; 0x24
 8004392:	f002 ff21 	bl	80071d8 <HAL_NVIC_EnableIRQ>
}
 8004396:	bf00      	nop
 8004398:	37f0      	adds	r7, #240	; 0xf0
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40013000 	.word	0x40013000
 80043a4:	58024400 	.word	0x58024400
 80043a8:	58020400 	.word	0x58020400
 80043ac:	24001c04 	.word	0x24001c04
 80043b0:	40020070 	.word	0x40020070
 80043b4:	40003800 	.word	0x40003800
 80043b8:	24001c7c 	.word	0x24001c7c
 80043bc:	40020058 	.word	0x40020058

080043c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <HAL_MspInit+0x38>)
 80043c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043cc:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <HAL_MspInit+0x38>)
 80043ce:	f043 0302 	orr.w	r3, r3, #2
 80043d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043d6:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <HAL_MspInit+0x38>)
 80043d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80043e4:	2200      	movs	r2, #0
 80043e6:	210f      	movs	r1, #15
 80043e8:	f06f 0001 	mvn.w	r0, #1
 80043ec:	f002 feda 	bl	80071a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	58024400 	.word	0x58024400

080043fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b090      	sub	sp, #64	; 0x40
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b0f      	cmp	r3, #15
 8004408:	d827      	bhi.n	800445a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800440a:	2200      	movs	r2, #0
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	2036      	movs	r0, #54	; 0x36
 8004410:	f002 fec8 	bl	80071a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004414:	2036      	movs	r0, #54	; 0x36
 8004416:	f002 fedf 	bl	80071d8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800441a:	4a29      	ldr	r2, [pc, #164]	; (80044c0 <HAL_InitTick+0xc4>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <HAL_InitTick+0xc8>)
 8004422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004426:	4a27      	ldr	r2, [pc, #156]	; (80044c4 <HAL_InitTick+0xc8>)
 8004428:	f043 0310 	orr.w	r3, r3, #16
 800442c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004430:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <HAL_InitTick+0xc8>)
 8004432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800443e:	f107 0210 	add.w	r2, r7, #16
 8004442:	f107 0314 	add.w	r3, r7, #20
 8004446:	4611      	mov	r1, r2
 8004448:	4618      	mov	r0, r3
 800444a:	f00a fa23 	bl	800e894 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <HAL_InitTick+0x6a>
 8004458:	e001      	b.n	800445e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e02b      	b.n	80044b6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800445e:	f00a f9ed 	bl	800e83c <HAL_RCC_GetPCLK1Freq>
 8004462:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004464:	e004      	b.n	8004470 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004466:	f00a f9e9 	bl	800e83c <HAL_RCC_GetPCLK1Freq>
 800446a:	4603      	mov	r3, r0
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004472:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <HAL_InitTick+0xcc>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	0c9b      	lsrs	r3, r3, #18
 800447a:	3b01      	subs	r3, #1
 800447c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800447e:	4b13      	ldr	r3, [pc, #76]	; (80044cc <HAL_InitTick+0xd0>)
 8004480:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <HAL_InitTick+0xd4>)
 8004482:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004484:	4b11      	ldr	r3, [pc, #68]	; (80044cc <HAL_InitTick+0xd0>)
 8004486:	f240 32e7 	movw	r2, #999	; 0x3e7
 800448a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800448c:	4a0f      	ldr	r2, [pc, #60]	; (80044cc <HAL_InitTick+0xd0>)
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004490:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004492:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <HAL_InitTick+0xd0>)
 8004494:	2200      	movs	r2, #0
 8004496:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_InitTick+0xd0>)
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800449e:	480b      	ldr	r0, [pc, #44]	; (80044cc <HAL_InitTick+0xd0>)
 80044a0:	f00d fff9 	bl	8012496 <HAL_TIM_Base_Init>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80044aa:	4808      	ldr	r0, [pc, #32]	; (80044cc <HAL_InitTick+0xd0>)
 80044ac:	f00e f84a 	bl	8012544 <HAL_TIM_Base_Start_IT>
 80044b0:	4603      	mov	r3, r0
 80044b2:	e000      	b.n	80044b6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3740      	adds	r7, #64	; 0x40
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	24000098 	.word	0x24000098
 80044c4:	58024400 	.word	0x58024400
 80044c8:	431bde83 	.word	0x431bde83
 80044cc:	24001cf4 	.word	0x24001cf4
 80044d0:	40001000 	.word	0x40001000

080044d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80044d8:	e7fe      	b.n	80044d8 <NMI_Handler+0x4>

080044da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044da:	b480      	push	{r7}
 80044dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044de:	e7fe      	b.n	80044de <HardFault_Handler+0x4>

080044e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044e4:	e7fe      	b.n	80044e4 <MemManage_Handler+0x4>

080044e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044e6:	b480      	push	{r7}
 80044e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044ea:	e7fe      	b.n	80044ea <BusFault_Handler+0x4>

080044ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044f0:	e7fe      	b.n	80044f0 <UsageFault_Handler+0x4>

080044f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044f2:	b480      	push	{r7}
 80044f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044f6:	bf00      	nop
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004504:	4802      	ldr	r0, [pc, #8]	; (8004510 <DMA1_Stream0_IRQHandler+0x10>)
 8004506:	f004 fe1d 	bl	8009144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800450a:	bf00      	nop
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	24000204 	.word	0x24000204

08004514 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004518:	4802      	ldr	r0, [pc, #8]	; (8004524 <DMA1_Stream1_IRQHandler+0x10>)
 800451a:	f004 fe13 	bl	8009144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	2400027c 	.word	0x2400027c

08004528 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800452c:	4802      	ldr	r0, [pc, #8]	; (8004538 <DMA1_Stream2_IRQHandler+0x10>)
 800452e:	f004 fe09 	bl	8009144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	24001e70 	.word	0x24001e70

0800453c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004540:	4802      	ldr	r0, [pc, #8]	; (800454c <DMA1_Stream3_IRQHandler+0x10>)
 8004542:	f004 fdff 	bl	8009144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	24001c7c 	.word	0x24001c7c

08004550 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004554:	4802      	ldr	r0, [pc, #8]	; (8004560 <DMA1_Stream4_IRQHandler+0x10>)
 8004556:	f004 fdf5 	bl	8009144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	24001c04 	.word	0x24001c04

08004564 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004568:	4802      	ldr	r0, [pc, #8]	; (8004574 <DMA1_Stream5_IRQHandler+0x10>)
 800456a:	f004 fdeb 	bl	8009144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	24000308 	.word	0x24000308

08004578 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800457c:	4802      	ldr	r0, [pc, #8]	; (8004588 <DMA1_Stream6_IRQHandler+0x10>)
 800457e:	f004 fde1 	bl	8009144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	24001944 	.word	0x24001944

0800458c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004590:	4802      	ldr	r0, [pc, #8]	; (800459c <TIM1_BRK_IRQHandler+0x10>)
 8004592:	f00e faee 	bl	8012b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	24001d44 	.word	0x24001d44

080045a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <TIM1_UP_IRQHandler+0x10>)
 80045a6:	f00e fae4 	bl	8012b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	24001d44 	.word	0x24001d44

080045b4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045b8:	4802      	ldr	r0, [pc, #8]	; (80045c4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80045ba:	f00e fada 	bl	8012b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	24001d44 	.word	0x24001d44

080045c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <TIM1_CC_IRQHandler+0x10>)
 80045ce:	f00e fad0 	bl	8012b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	24001d44 	.word	0x24001d44

080045dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045e0:	4802      	ldr	r0, [pc, #8]	; (80045ec <TIM2_IRQHandler+0x10>)
 80045e2:	f00e fac6 	bl	8012b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	24001d90 	.word	0x24001d90

080045f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80045f4:	4802      	ldr	r0, [pc, #8]	; (8004600 <I2C1_EV_IRQHandler+0x10>)
 80045f6:	f007 f82d 	bl	800b654 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	240018f0 	.word	0x240018f0

08004604 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004608:	4802      	ldr	r0, [pc, #8]	; (8004614 <I2C1_ER_IRQHandler+0x10>)
 800460a:	f007 f83d 	bl	800b688 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	240018f0 	.word	0x240018f0

08004618 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800461c:	4802      	ldr	r0, [pc, #8]	; (8004628 <SPI1_IRQHandler+0x10>)
 800461e:	f00d fc07 	bl	8011e30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	24001af4 	.word	0x24001af4

0800462c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004630:	4802      	ldr	r0, [pc, #8]	; (800463c <SPI2_IRQHandler+0x10>)
 8004632:	f00d fbfd 	bl	8011e30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	24001b7c 	.word	0x24001b7c

08004640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004644:	4802      	ldr	r0, [pc, #8]	; (8004650 <USART1_IRQHandler+0x10>)
 8004646:	f00f fdd7 	bl	80141f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	24001ddc 	.word	0x24001ddc

08004654 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004658:	4802      	ldr	r0, [pc, #8]	; (8004664 <DMA1_Stream7_IRQHandler+0x10>)
 800465a:	f004 fd73 	bl	8009144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	240019bc 	.word	0x240019bc

08004668 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <TIM6_DAC_IRQHandler+0x20>)
 800466e:	791b      	ldrb	r3, [r3, #4]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8004676:	4804      	ldr	r0, [pc, #16]	; (8004688 <TIM6_DAC_IRQHandler+0x20>)
 8004678:	f002 ffbb 	bl	80075f2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800467c:	4803      	ldr	r0, [pc, #12]	; (800468c <TIM6_DAC_IRQHandler+0x24>)
 800467e:	f00e fa78 	bl	8012b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	240002f4 	.word	0x240002f4
 800468c:	24001cf4 	.word	0x24001cf4

08004690 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800469a:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <ITM_SendChar+0x48>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a0e      	ldr	r2, [pc, #56]	; (80046d8 <ITM_SendChar+0x48>)
 80046a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a4:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <ITM_SendChar+0x4c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a0c      	ldr	r2, [pc, #48]	; (80046dc <ITM_SendChar+0x4c>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80046b2:	bf00      	nop
 80046b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f8      	beq.n	80046b4 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80046c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	6013      	str	r3, [r2, #0]
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	e000edfc 	.word	0xe000edfc
 80046dc:	e0000e00 	.word	0xe0000e00

080046e0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e00a      	b.n	8004708 <_read+0x28>
		*ptr++ = __io_getchar();
 80046f2:	f3af 8000 	nop.w
 80046f6:	4601      	mov	r1, r0
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	60ba      	str	r2, [r7, #8]
 80046fe:	b2ca      	uxtb	r2, r1
 8004700:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	3301      	adds	r3, #1
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	dbf0      	blt.n	80046f2 <_read+0x12>
	}

	return len;
 8004710:	687b      	ldr	r3, [r7, #4]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800471a:	b580      	push	{r7, lr}
 800471c:	b086      	sub	sp, #24
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	e009      	b.n	8004740 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	60ba      	str	r2, [r7, #8]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ffab 	bl	8004690 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	3301      	adds	r3, #1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	dbf1      	blt.n	800472c <_write+0x12>
	}
	return len;
 8004748:	687b      	ldr	r3, [r7, #4]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <_close>:

int _close(int file) {
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800475a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <_fstat>:

int _fstat(int file, struct stat *st) {
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800477a:	605a      	str	r2, [r3, #4]
	return 0;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <_isatty>:

int _isatty(int file) {
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004792:	2301      	movs	r3, #1
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80047c4:	4a14      	ldr	r2, [pc, #80]	; (8004818 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80047d0:	4b13      	ldr	r3, [pc, #76]	; (8004820 <_sbrk+0x64>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <_sbrk+0x64>)
 80047da:	4a12      	ldr	r2, [pc, #72]	; (8004824 <_sbrk+0x68>)
 80047dc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80047de:	4b10      	ldr	r3, [pc, #64]	; (8004820 <_sbrk+0x64>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d207      	bcs.n	80047fc <_sbrk+0x40>
		errno = ENOMEM;
 80047ec:	f015 fa9e 	bl	8019d2c <__errno>
 80047f0:	4603      	mov	r3, r0
 80047f2:	220c      	movs	r2, #12
 80047f4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80047f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047fa:	e009      	b.n	8004810 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80047fc:	4b08      	ldr	r3, [pc, #32]	; (8004820 <_sbrk+0x64>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004802:	4b07      	ldr	r3, [pc, #28]	; (8004820 <_sbrk+0x64>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4413      	add	r3, r2
 800480a:	4a05      	ldr	r2, [pc, #20]	; (8004820 <_sbrk+0x64>)
 800480c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800480e:	68fb      	ldr	r3, [r7, #12]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	24080000 	.word	0x24080000
 800481c:	00000400 	.word	0x00000400
 8004820:	24001d40 	.word	0x24001d40
 8004824:	24006920 	.word	0x24006920

08004828 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800482c:	4b37      	ldr	r3, [pc, #220]	; (800490c <SystemInit+0xe4>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	4a36      	ldr	r2, [pc, #216]	; (800490c <SystemInit+0xe4>)
 8004834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800483c:	4b34      	ldr	r3, [pc, #208]	; (8004910 <SystemInit+0xe8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	2b06      	cmp	r3, #6
 8004846:	d807      	bhi.n	8004858 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004848:	4b31      	ldr	r3, [pc, #196]	; (8004910 <SystemInit+0xe8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 030f 	bic.w	r3, r3, #15
 8004850:	4a2f      	ldr	r2, [pc, #188]	; (8004910 <SystemInit+0xe8>)
 8004852:	f043 0307 	orr.w	r3, r3, #7
 8004856:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004858:	4b2e      	ldr	r3, [pc, #184]	; (8004914 <SystemInit+0xec>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a2d      	ldr	r2, [pc, #180]	; (8004914 <SystemInit+0xec>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004864:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <SystemInit+0xec>)
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800486a:	4b2a      	ldr	r3, [pc, #168]	; (8004914 <SystemInit+0xec>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4929      	ldr	r1, [pc, #164]	; (8004914 <SystemInit+0xec>)
 8004870:	4b29      	ldr	r3, [pc, #164]	; (8004918 <SystemInit+0xf0>)
 8004872:	4013      	ands	r3, r2
 8004874:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004876:	4b26      	ldr	r3, [pc, #152]	; (8004910 <SystemInit+0xe8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004882:	4b23      	ldr	r3, [pc, #140]	; (8004910 <SystemInit+0xe8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 030f 	bic.w	r3, r3, #15
 800488a:	4a21      	ldr	r2, [pc, #132]	; (8004910 <SystemInit+0xe8>)
 800488c:	f043 0307 	orr.w	r3, r3, #7
 8004890:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004892:	4b20      	ldr	r3, [pc, #128]	; (8004914 <SystemInit+0xec>)
 8004894:	2200      	movs	r2, #0
 8004896:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004898:	4b1e      	ldr	r3, [pc, #120]	; (8004914 <SystemInit+0xec>)
 800489a:	2200      	movs	r2, #0
 800489c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800489e:	4b1d      	ldr	r3, [pc, #116]	; (8004914 <SystemInit+0xec>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80048a4:	4b1b      	ldr	r3, [pc, #108]	; (8004914 <SystemInit+0xec>)
 80048a6:	4a1d      	ldr	r2, [pc, #116]	; (800491c <SystemInit+0xf4>)
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80048aa:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <SystemInit+0xec>)
 80048ac:	4a1c      	ldr	r2, [pc, #112]	; (8004920 <SystemInit+0xf8>)
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80048b0:	4b18      	ldr	r3, [pc, #96]	; (8004914 <SystemInit+0xec>)
 80048b2:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <SystemInit+0xfc>)
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80048b6:	4b17      	ldr	r3, [pc, #92]	; (8004914 <SystemInit+0xec>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80048bc:	4b15      	ldr	r3, [pc, #84]	; (8004914 <SystemInit+0xec>)
 80048be:	4a19      	ldr	r2, [pc, #100]	; (8004924 <SystemInit+0xfc>)
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80048c2:	4b14      	ldr	r3, [pc, #80]	; (8004914 <SystemInit+0xec>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80048c8:	4b12      	ldr	r3, [pc, #72]	; (8004914 <SystemInit+0xec>)
 80048ca:	4a16      	ldr	r2, [pc, #88]	; (8004924 <SystemInit+0xfc>)
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <SystemInit+0xec>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <SystemInit+0xec>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <SystemInit+0xec>)
 80048da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048de:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80048e0:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <SystemInit+0xec>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80048e6:	4b10      	ldr	r3, [pc, #64]	; (8004928 <SystemInit+0x100>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b10      	ldr	r3, [pc, #64]	; (800492c <SystemInit+0x104>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048f2:	d202      	bcs.n	80048fa <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <SystemInit+0x108>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80048fa:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <SystemInit+0x10c>)
 80048fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004900:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004902:	bf00      	nop
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000ed00 	.word	0xe000ed00
 8004910:	52002000 	.word	0x52002000
 8004914:	58024400 	.word	0x58024400
 8004918:	eaf6ed7f 	.word	0xeaf6ed7f
 800491c:	02020200 	.word	0x02020200
 8004920:	01ff0000 	.word	0x01ff0000
 8004924:	01010280 	.word	0x01010280
 8004928:	5c001000 	.word	0x5c001000
 800492c:	ffff0000 	.word	0xffff0000
 8004930:	51008108 	.word	0x51008108
 8004934:	52004000 	.word	0x52004000

08004938 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b09a      	sub	sp, #104	; 0x68
 800493c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800493e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	605a      	str	r2, [r3, #4]
 8004948:	609a      	str	r2, [r3, #8]
 800494a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800494c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]
 8004968:	615a      	str	r2, [r3, #20]
 800496a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800496c:	1d3b      	adds	r3, r7, #4
 800496e:	222c      	movs	r2, #44	; 0x2c
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f015 fa12 	bl	8019d9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004978:	4b44      	ldr	r3, [pc, #272]	; (8004a8c <MX_TIM1_Init+0x154>)
 800497a:	4a45      	ldr	r2, [pc, #276]	; (8004a90 <MX_TIM1_Init+0x158>)
 800497c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 800497e:	4b43      	ldr	r3, [pc, #268]	; (8004a8c <MX_TIM1_Init+0x154>)
 8004980:	224a      	movs	r2, #74	; 0x4a
 8004982:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004984:	4b41      	ldr	r3, [pc, #260]	; (8004a8c <MX_TIM1_Init+0x154>)
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800498a:	4b40      	ldr	r3, [pc, #256]	; (8004a8c <MX_TIM1_Init+0x154>)
 800498c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004990:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004992:	4b3e      	ldr	r3, [pc, #248]	; (8004a8c <MX_TIM1_Init+0x154>)
 8004994:	2200      	movs	r2, #0
 8004996:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004998:	4b3c      	ldr	r3, [pc, #240]	; (8004a8c <MX_TIM1_Init+0x154>)
 800499a:	2200      	movs	r2, #0
 800499c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800499e:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <MX_TIM1_Init+0x154>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80049a4:	4839      	ldr	r0, [pc, #228]	; (8004a8c <MX_TIM1_Init+0x154>)
 80049a6:	f00d fd76 	bl	8012496 <HAL_TIM_Base_Init>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80049b0:	f7fe feea 	bl	8003788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049b8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80049ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80049be:	4619      	mov	r1, r3
 80049c0:	4832      	ldr	r0, [pc, #200]	; (8004a8c <MX_TIM1_Init+0x154>)
 80049c2:	f00e faf1 	bl	8012fa8 <HAL_TIM_ConfigClockSource>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80049cc:	f7fe fedc 	bl	8003788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80049d0:	482e      	ldr	r0, [pc, #184]	; (8004a8c <MX_TIM1_Init+0x154>)
 80049d2:	f00e f86d 	bl	8012ab0 <HAL_TIM_PWM_Init>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80049dc:	f7fe fed4 	bl	8003788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049e0:	2300      	movs	r3, #0
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80049e4:	2300      	movs	r3, #0
 80049e6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80049ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80049f0:	4619      	mov	r1, r3
 80049f2:	4826      	ldr	r0, [pc, #152]	; (8004a8c <MX_TIM1_Init+0x154>)
 80049f4:	f00f f82e 	bl	8013a54 <HAL_TIMEx_MasterConfigSynchronization>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80049fe:	f7fe fec3 	bl	8003788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a02:	2360      	movs	r3, #96	; 0x60
 8004a04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004a06:	f240 13df 	movw	r3, #479	; 0x1df
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a10:	2300      	movs	r3, #0
 8004a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a14:	2300      	movs	r3, #0
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a24:	2200      	movs	r2, #0
 8004a26:	4619      	mov	r1, r3
 8004a28:	4818      	ldr	r0, [pc, #96]	; (8004a8c <MX_TIM1_Init+0x154>)
 8004a2a:	f00e f9a9 	bl	8012d80 <HAL_TIM_PWM_ConfigChannel>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004a34:	f7fe fea8 	bl	8003788 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004a68:	1d3b      	adds	r3, r7, #4
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4807      	ldr	r0, [pc, #28]	; (8004a8c <MX_TIM1_Init+0x154>)
 8004a6e:	f00f f87f 	bl	8013b70 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004a78:	f7fe fe86 	bl	8003788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004a7c:	4803      	ldr	r0, [pc, #12]	; (8004a8c <MX_TIM1_Init+0x154>)
 8004a7e:	f000 f8dd 	bl	8004c3c <HAL_TIM_MspPostInit>

}
 8004a82:	bf00      	nop
 8004a84:	3768      	adds	r7, #104	; 0x68
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	24001d44 	.word	0x24001d44
 8004a90:	40010000 	.word	0x40010000

08004a94 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08e      	sub	sp, #56	; 0x38
 8004a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
 8004aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aa8:	f107 031c 	add.w	r3, r7, #28
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	605a      	str	r2, [r3, #4]
 8004abc:	609a      	str	r2, [r3, #8]
 8004abe:	60da      	str	r2, [r3, #12]
 8004ac0:	611a      	str	r2, [r3, #16]
 8004ac2:	615a      	str	r2, [r3, #20]
 8004ac4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ac6:	4b2d      	ldr	r3, [pc, #180]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004acc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004ace:	4b2b      	ldr	r3, [pc, #172]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004ad0:	224a      	movs	r2, #74	; 0x4a
 8004ad2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ad4:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004ada:	4b28      	ldr	r3, [pc, #160]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004adc:	f640 4234 	movw	r2, #3124	; 0xc34
 8004ae0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae2:	4b26      	ldr	r3, [pc, #152]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ae8:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004aea:	2280      	movs	r2, #128	; 0x80
 8004aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004aee:	4823      	ldr	r0, [pc, #140]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004af0:	f00d fcd1 	bl	8012496 <HAL_TIM_Base_Init>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004afa:	f7fe fe45 	bl	8003788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b08:	4619      	mov	r1, r3
 8004b0a:	481c      	ldr	r0, [pc, #112]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004b0c:	f00e fa4c 	bl	8012fa8 <HAL_TIM_ConfigClockSource>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004b16:	f7fe fe37 	bl	8003788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004b1a:	4818      	ldr	r0, [pc, #96]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004b1c:	f00d ffc8 	bl	8012ab0 <HAL_TIM_PWM_Init>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004b26:	f7fe fe2f 	bl	8003788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004b2a:	2320      	movs	r3, #32
 8004b2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b32:	f107 031c 	add.w	r3, r7, #28
 8004b36:	4619      	mov	r1, r3
 8004b38:	4810      	ldr	r0, [pc, #64]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004b3a:	f00e ff8b 	bl	8013a54 <HAL_TIMEx_MasterConfigSynchronization>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004b44:	f7fe fe20 	bl	8003788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b48:	2360      	movs	r3, #96	; 0x60
 8004b4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b58:	463b      	mov	r3, r7
 8004b5a:	220c      	movs	r2, #12
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4807      	ldr	r0, [pc, #28]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004b60:	f00e f90e 	bl	8012d80 <HAL_TIM_PWM_ConfigChannel>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004b6a:	f7fe fe0d 	bl	8003788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004b6e:	4803      	ldr	r0, [pc, #12]	; (8004b7c <MX_TIM2_Init+0xe8>)
 8004b70:	f000 f864 	bl	8004c3c <HAL_TIM_MspPostInit>

}
 8004b74:	bf00      	nop
 8004b76:	3738      	adds	r7, #56	; 0x38
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	24001d90 	.word	0x24001d90

08004b80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a29      	ldr	r2, [pc, #164]	; (8004c34 <HAL_TIM_Base_MspInit+0xb4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d12f      	bne.n	8004bf2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b92:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <HAL_TIM_Base_MspInit+0xb8>)
 8004b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b98:	4a27      	ldr	r2, [pc, #156]	; (8004c38 <HAL_TIM_Base_MspInit+0xb8>)
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ba2:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <HAL_TIM_Base_MspInit+0xb8>)
 8004ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2105      	movs	r1, #5
 8004bb4:	2018      	movs	r0, #24
 8004bb6:	f002 faf5 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004bba:	2018      	movs	r0, #24
 8004bbc:	f002 fb0c 	bl	80071d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2105      	movs	r1, #5
 8004bc4:	2019      	movs	r0, #25
 8004bc6:	f002 faed 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004bca:	2019      	movs	r0, #25
 8004bcc:	f002 fb04 	bl	80071d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2105      	movs	r1, #5
 8004bd4:	201a      	movs	r0, #26
 8004bd6:	f002 fae5 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004bda:	201a      	movs	r0, #26
 8004bdc:	f002 fafc 	bl	80071d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004be0:	2200      	movs	r2, #0
 8004be2:	2105      	movs	r1, #5
 8004be4:	201b      	movs	r0, #27
 8004be6:	f002 fadd 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004bea:	201b      	movs	r0, #27
 8004bec:	f002 faf4 	bl	80071d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004bf0:	e01b      	b.n	8004c2a <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfa:	d116      	bne.n	8004c2a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004bfc:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <HAL_TIM_Base_MspInit+0xb8>)
 8004bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c02:	4a0d      	ldr	r2, [pc, #52]	; (8004c38 <HAL_TIM_Base_MspInit+0xb8>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <HAL_TIM_Base_MspInit+0xb8>)
 8004c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	60bb      	str	r3, [r7, #8]
 8004c18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2105      	movs	r1, #5
 8004c1e:	201c      	movs	r0, #28
 8004c20:	f002 fac0 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c24:	201c      	movs	r0, #28
 8004c26:	f002 fad7 	bl	80071d8 <HAL_NVIC_EnableIRQ>
}
 8004c2a:	bf00      	nop
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000
 8004c38:	58024400 	.word	0x58024400

08004c3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	; 0x28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c44:	f107 0314 	add.w	r3, r7, #20
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	609a      	str	r2, [r3, #8]
 8004c50:	60da      	str	r2, [r3, #12]
 8004c52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a26      	ldr	r2, [pc, #152]	; (8004cf4 <HAL_TIM_MspPostInit+0xb8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d120      	bne.n	8004ca0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5e:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <HAL_TIM_MspPostInit+0xbc>)
 8004c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c64:	4a24      	ldr	r2, [pc, #144]	; (8004cf8 <HAL_TIM_MspPostInit+0xbc>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c6e:	4b22      	ldr	r3, [pc, #136]	; (8004cf8 <HAL_TIM_MspPostInit+0xbc>)
 8004c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c82:	2302      	movs	r3, #2
 8004c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c92:	f107 0314 	add.w	r3, r7, #20
 8004c96:	4619      	mov	r1, r3
 8004c98:	4818      	ldr	r0, [pc, #96]	; (8004cfc <HAL_TIM_MspPostInit+0xc0>)
 8004c9a:	f006 f859 	bl	800ad50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004c9e:	e024      	b.n	8004cea <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d11f      	bne.n	8004cea <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004caa:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <HAL_TIM_MspPostInit+0xbc>)
 8004cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cb0:	4a11      	ldr	r2, [pc, #68]	; (8004cf8 <HAL_TIM_MspPostInit+0xbc>)
 8004cb2:	f043 0302 	orr.w	r3, r3, #2
 8004cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cba:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <HAL_TIM_MspPostInit+0xbc>)
 8004cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004cc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4806      	ldr	r0, [pc, #24]	; (8004d00 <HAL_TIM_MspPostInit+0xc4>)
 8004ce6:	f006 f833 	bl	800ad50 <HAL_GPIO_Init>
}
 8004cea:	bf00      	nop
 8004cec:	3728      	adds	r7, #40	; 0x28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	58024400 	.word	0x58024400
 8004cfc:	58020000 	.word	0x58020000
 8004d00:	58020400 	.word	0x58020400

08004d04 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004d10:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <get_uptime+0x94>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004d16:	4b21      	ldr	r3, [pc, #132]	; (8004d9c <get_uptime+0x98>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <get_uptime+0x94>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d005      	beq.n	8004d32 <get_uptime+0x2e>
		ms = uptime_millis;
 8004d26:	4b1c      	ldr	r3, [pc, #112]	; (8004d98 <get_uptime+0x94>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <get_uptime+0x98>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d38:	fb03 f202 	mul.w	r2, r3, r2
 8004d3c:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <get_uptime+0x98>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	3301      	adds	r3, #1
 8004d42:	4917      	ldr	r1, [pc, #92]	; (8004da0 <get_uptime+0x9c>)
 8004d44:	fba1 1303 	umull	r1, r3, r1, r3
 8004d48:	099b      	lsrs	r3, r3, #6
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <get_uptime+0x5a>
		uptime = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	0e1b      	lsrs	r3, r3, #24
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	0c1a      	lsrs	r2, r3, #16
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	0a1a      	lsrs	r2, r3, #8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3303      	adds	r3, #3
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	24001a84 	.word	0x24001a84
 8004d9c:	e000e010 	.word	0xe000e010
 8004da0:	10624dd3 	.word	0x10624dd3

08004da4 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004dac:	f107 0310 	add.w	r3, r7, #16
 8004db0:	2200      	movs	r2, #0
 8004db2:	4619      	mov	r1, r3
 8004db4:	4821      	ldr	r0, [pc, #132]	; (8004e3c <get_timestamp+0x98>)
 8004db6:	f00c fbcd 	bl	8011554 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8004dba:	f107 030c 	add.w	r3, r7, #12
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	481e      	ldr	r0, [pc, #120]	; (8004e3c <get_timestamp+0x98>)
 8004dc4:	f00c fcaa 	bl	801171c <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2264      	movs	r2, #100	; 0x64
 8004dcc:	fb03 f202 	mul.w	r2, r3, r2
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <get_timestamp+0x9c>)
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8004dd6:	7bfa      	ldrb	r2, [r7, #15]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3301      	adds	r3, #1
 8004de0:	7b7a      	ldrb	r2, [r7, #13]
 8004de2:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3302      	adds	r3, #2
 8004de8:	7bba      	ldrb	r2, [r7, #14]
 8004dea:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3303      	adds	r3, #3
 8004df0:	7c3a      	ldrb	r2, [r7, #16]
 8004df2:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	7c7a      	ldrb	r2, [r7, #17]
 8004dfa:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3305      	adds	r3, #5
 8004e00:	7cba      	ldrb	r2, [r7, #18]
 8004e02:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	0e1a      	lsrs	r2, r3, #24
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3306      	adds	r3, #6
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	0c1a      	lsrs	r2, r3, #16
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3307      	adds	r3, #7
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	0a1a      	lsrs	r2, r3, #8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3308      	adds	r3, #8
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3309      	adds	r3, #9
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]
}
 8004e32:	bf00      	nop
 8004e34:	3728      	adds	r7, #40	; 0x28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	24001a98 	.word	0x24001a98
 8004e40:	000f4240 	.word	0x000f4240

08004e44 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e48:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e4a:	4a31      	ldr	r2, [pc, #196]	; (8004f10 <MX_USART1_UART_Init+0xcc>)
 8004e4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8004e4e:	4b2f      	ldr	r3, [pc, #188]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e50:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004e54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e56:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e5c:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e62:	4b2a      	ldr	r3, [pc, #168]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e68:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e6a:	220c      	movs	r2, #12
 8004e6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e6e:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e74:	4b25      	ldr	r3, [pc, #148]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e7a:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e80:	4b22      	ldr	r3, [pc, #136]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e86:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e8c:	481f      	ldr	r0, [pc, #124]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004e8e:	f00e ff0b 	bl	8013ca8 <HAL_UART_Init>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004e98:	f7fe fc76 	bl	8003788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	481b      	ldr	r0, [pc, #108]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004ea0:	f011 fc51 	bl	8016746 <HAL_UARTEx_SetTxFifoThreshold>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004eaa:	f7fe fc6d 	bl	8003788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4816      	ldr	r0, [pc, #88]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004eb2:	f011 fc86 	bl	80167c2 <HAL_UARTEx_SetRxFifoThreshold>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004ebc:	f7fe fc64 	bl	8003788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ec0:	4812      	ldr	r0, [pc, #72]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004ec2:	f011 fc07 	bl	80166d4 <HAL_UARTEx_DisableFifoMode>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004ecc:	f7fe fc5c 	bl	8003788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8004ed0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ed4:	480d      	ldr	r0, [pc, #52]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004ed6:	f011 fc74 	bl	80167c2 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8004eda:	480c      	ldr	r0, [pc, #48]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004edc:	f011 fbbf 	bl	801665e <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8004ee0:	480a      	ldr	r0, [pc, #40]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004ee2:	f011 fb89 	bl	80165f8 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ef4:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <MX_USART1_UART_Init+0xc8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004f04:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	24001ddc 	.word	0x24001ddc
 8004f10:	40011000 	.word	0x40011000

08004f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b0ba      	sub	sp, #232	; 0xe8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	609a      	str	r2, [r3, #8]
 8004f28:	60da      	str	r2, [r3, #12]
 8004f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f2c:	f107 0310 	add.w	r3, r7, #16
 8004f30:	22c0      	movs	r2, #192	; 0xc0
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f014 ff31 	bl	8019d9c <memset>
  if(uartHandle->Instance==USART1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a41      	ldr	r2, [pc, #260]	; (8005044 <HAL_UART_MspInit+0x130>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d17b      	bne.n	800503c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004f44:	f04f 0201 	mov.w	r2, #1
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8004f50:	2318      	movs	r3, #24
 8004f52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f56:	f107 0310 	add.w	r3, r7, #16
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f009 fcdc 	bl	800e918 <HAL_RCCEx_PeriphCLKConfig>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004f66:	f7fe fc0f 	bl	8003788 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f6a:	4b37      	ldr	r3, [pc, #220]	; (8005048 <HAL_UART_MspInit+0x134>)
 8004f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f70:	4a35      	ldr	r2, [pc, #212]	; (8005048 <HAL_UART_MspInit+0x134>)
 8004f72:	f043 0310 	orr.w	r3, r3, #16
 8004f76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f7a:	4b33      	ldr	r3, [pc, #204]	; (8005048 <HAL_UART_MspInit+0x134>)
 8004f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f88:	4b2f      	ldr	r3, [pc, #188]	; (8005048 <HAL_UART_MspInit+0x134>)
 8004f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	; (8005048 <HAL_UART_MspInit+0x134>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f98:	4b2b      	ldr	r3, [pc, #172]	; (8005048 <HAL_UART_MspInit+0x134>)
 8004f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004fa6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004faa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fc0:	2307      	movs	r3, #7
 8004fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004fca:	4619      	mov	r1, r3
 8004fcc:	481f      	ldr	r0, [pc, #124]	; (800504c <HAL_UART_MspInit+0x138>)
 8004fce:	f005 febf 	bl	800ad50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8004fd2:	4b1f      	ldr	r3, [pc, #124]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <HAL_UART_MspInit+0x140>)
 8004fd6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8004fda:	222a      	movs	r2, #42	; 0x2a
 8004fdc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fde:	4b1c      	ldr	r3, [pc, #112]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8004fe0:	2240      	movs	r2, #64	; 0x40
 8004fe2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fea:	4b19      	ldr	r3, [pc, #100]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8004fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ff0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ff2:	4b17      	ldr	r3, [pc, #92]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ff8:	4b15      	ldr	r3, [pc, #84]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004ffe:	4b14      	ldr	r3, [pc, #80]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8005000:	2200      	movs	r2, #0
 8005002:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005004:	4b12      	ldr	r3, [pc, #72]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8005006:	2200      	movs	r2, #0
 8005008:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800500a:	4b11      	ldr	r3, [pc, #68]	; (8005050 <HAL_UART_MspInit+0x13c>)
 800500c:	2200      	movs	r2, #0
 800500e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005010:	480f      	ldr	r0, [pc, #60]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8005012:	f002 fd6d 	bl	8007af0 <HAL_DMA_Init>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800501c:	f7fe fbb4 	bl	8003788 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8005024:	67da      	str	r2, [r3, #124]	; 0x7c
 8005026:	4a0a      	ldr	r2, [pc, #40]	; (8005050 <HAL_UART_MspInit+0x13c>)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800502c:	2200      	movs	r2, #0
 800502e:	2105      	movs	r1, #5
 8005030:	2025      	movs	r0, #37	; 0x25
 8005032:	f002 f8b7 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005036:	2025      	movs	r0, #37	; 0x25
 8005038:	f002 f8ce 	bl	80071d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800503c:	bf00      	nop
 800503e:	37e8      	adds	r7, #232	; 0xe8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40011000 	.word	0x40011000
 8005048:	58024400 	.word	0x58024400
 800504c:	58020000 	.word	0x58020000
 8005050:	24001e70 	.word	0x24001e70
 8005054:	40020040 	.word	0x40020040

08005058 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8005062:	4bc2      	ldr	r3, [pc, #776]	; (800536c <voltage_monitor_init+0x314>)
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8005068:	4bc0      	ldr	r3, [pc, #768]	; (800536c <voltage_monitor_init+0x314>)
 800506a:	2200      	movs	r2, #0
 800506c:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 800506e:	4bbf      	ldr	r3, [pc, #764]	; (800536c <voltage_monitor_init+0x314>)
 8005070:	2201      	movs	r2, #1
 8005072:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8005074:	4bbd      	ldr	r3, [pc, #756]	; (800536c <voltage_monitor_init+0x314>)
 8005076:	2200      	movs	r2, #0
 8005078:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 800507a:	4bbc      	ldr	r3, [pc, #752]	; (800536c <voltage_monitor_init+0x314>)
 800507c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005080:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8005082:	4bba      	ldr	r3, [pc, #744]	; (800536c <voltage_monitor_init+0x314>)
 8005084:	2200      	movs	r2, #0
 8005086:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8005088:	4bb8      	ldr	r3, [pc, #736]	; (800536c <voltage_monitor_init+0x314>)
 800508a:	2201      	movs	r2, #1
 800508c:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 800508e:	4bb7      	ldr	r3, [pc, #732]	; (800536c <voltage_monitor_init+0x314>)
 8005090:	2200      	movs	r2, #0
 8005092:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8005094:	4bb5      	ldr	r3, [pc, #724]	; (800536c <voltage_monitor_init+0x314>)
 8005096:	2201      	movs	r2, #1
 8005098:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 800509a:	4bb4      	ldr	r3, [pc, #720]	; (800536c <voltage_monitor_init+0x314>)
 800509c:	2200      	movs	r2, #0
 800509e:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 80050a0:	4bb2      	ldr	r3, [pc, #712]	; (800536c <voltage_monitor_init+0x314>)
 80050a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80050a6:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 80050a8:	4bb0      	ldr	r3, [pc, #704]	; (800536c <voltage_monitor_init+0x314>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80050ae:	4baf      	ldr	r3, [pc, #700]	; (800536c <voltage_monitor_init+0x314>)
 80050b0:	2202      	movs	r2, #2
 80050b2:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 80050b4:	4bad      	ldr	r3, [pc, #692]	; (800536c <voltage_monitor_init+0x314>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80050ba:	4bac      	ldr	r3, [pc, #688]	; (800536c <voltage_monitor_init+0x314>)
 80050bc:	2201      	movs	r2, #1
 80050be:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80050c0:	4baa      	ldr	r3, [pc, #680]	; (800536c <voltage_monitor_init+0x314>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80050c6:	4ba9      	ldr	r3, [pc, #676]	; (800536c <voltage_monitor_init+0x314>)
 80050c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80050cc:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 80050ce:	4ba7      	ldr	r3, [pc, #668]	; (800536c <voltage_monitor_init+0x314>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 80050d4:	4ba5      	ldr	r3, [pc, #660]	; (800536c <voltage_monitor_init+0x314>)
 80050d6:	2203      	movs	r2, #3
 80050d8:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 80050da:	4ba4      	ldr	r3, [pc, #656]	; (800536c <voltage_monitor_init+0x314>)
 80050dc:	2200      	movs	r2, #0
 80050de:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 80050e0:	4ba2      	ldr	r3, [pc, #648]	; (800536c <voltage_monitor_init+0x314>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 80050e8:	4ba0      	ldr	r3, [pc, #640]	; (800536c <voltage_monitor_init+0x314>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 80050ee:	4b9f      	ldr	r3, [pc, #636]	; (800536c <voltage_monitor_init+0x314>)
 80050f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80050f4:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 80050f6:	4b9d      	ldr	r3, [pc, #628]	; (800536c <voltage_monitor_init+0x314>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 80050fc:	4b9b      	ldr	r3, [pc, #620]	; (800536c <voltage_monitor_init+0x314>)
 80050fe:	2204      	movs	r2, #4
 8005100:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005104:	4b99      	ldr	r3, [pc, #612]	; (800536c <voltage_monitor_init+0x314>)
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 800510c:	4b97      	ldr	r3, [pc, #604]	; (800536c <voltage_monitor_init+0x314>)
 800510e:	2201      	movs	r2, #1
 8005110:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005114:	4b95      	ldr	r3, [pc, #596]	; (800536c <voltage_monitor_init+0x314>)
 8005116:	2200      	movs	r2, #0
 8005118:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800511a:	4b94      	ldr	r3, [pc, #592]	; (800536c <voltage_monitor_init+0x314>)
 800511c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005120:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8005122:	4b92      	ldr	r3, [pc, #584]	; (800536c <voltage_monitor_init+0x314>)
 8005124:	2200      	movs	r2, #0
 8005126:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8005128:	4b90      	ldr	r3, [pc, #576]	; (800536c <voltage_monitor_init+0x314>)
 800512a:	2205      	movs	r2, #5
 800512c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8005130:	4b8e      	ldr	r3, [pc, #568]	; (800536c <voltage_monitor_init+0x314>)
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8005138:	4b8c      	ldr	r3, [pc, #560]	; (800536c <voltage_monitor_init+0x314>)
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8005140:	4b8a      	ldr	r3, [pc, #552]	; (800536c <voltage_monitor_init+0x314>)
 8005142:	2200      	movs	r2, #0
 8005144:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005146:	4b89      	ldr	r3, [pc, #548]	; (800536c <voltage_monitor_init+0x314>)
 8005148:	f242 7210 	movw	r2, #10000	; 0x2710
 800514c:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 800514e:	4b87      	ldr	r3, [pc, #540]	; (800536c <voltage_monitor_init+0x314>)
 8005150:	2200      	movs	r2, #0
 8005152:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8005154:	4b85      	ldr	r3, [pc, #532]	; (800536c <voltage_monitor_init+0x314>)
 8005156:	2206      	movs	r2, #6
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 800515c:	4b83      	ldr	r3, [pc, #524]	; (800536c <voltage_monitor_init+0x314>)
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8005164:	4b81      	ldr	r3, [pc, #516]	; (800536c <voltage_monitor_init+0x314>)
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 800516c:	4b7f      	ldr	r3, [pc, #508]	; (800536c <voltage_monitor_init+0x314>)
 800516e:	2200      	movs	r2, #0
 8005170:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005174:	4b7d      	ldr	r3, [pc, #500]	; (800536c <voltage_monitor_init+0x314>)
 8005176:	f242 7210 	movw	r2, #10000	; 0x2710
 800517a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 800517e:	4b7b      	ldr	r3, [pc, #492]	; (800536c <voltage_monitor_init+0x314>)
 8005180:	2200      	movs	r2, #0
 8005182:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8005186:	4b79      	ldr	r3, [pc, #484]	; (800536c <voltage_monitor_init+0x314>)
 8005188:	2207      	movs	r2, #7
 800518a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 800518e:	4b77      	ldr	r3, [pc, #476]	; (800536c <voltage_monitor_init+0x314>)
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8005196:	4b75      	ldr	r3, [pc, #468]	; (800536c <voltage_monitor_init+0x314>)
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 800519e:	4b73      	ldr	r3, [pc, #460]	; (800536c <voltage_monitor_init+0x314>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80051a6:	4b71      	ldr	r3, [pc, #452]	; (800536c <voltage_monitor_init+0x314>)
 80051a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80051ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80051b0:	4b6e      	ldr	r3, [pc, #440]	; (800536c <voltage_monitor_init+0x314>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80051b8:	4b6c      	ldr	r3, [pc, #432]	; (800536c <voltage_monitor_init+0x314>)
 80051ba:	2208      	movs	r2, #8
 80051bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80051c0:	4b6a      	ldr	r3, [pc, #424]	; (800536c <voltage_monitor_init+0x314>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80051c8:	4b68      	ldr	r3, [pc, #416]	; (800536c <voltage_monitor_init+0x314>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 80051d0:	4b66      	ldr	r3, [pc, #408]	; (800536c <voltage_monitor_init+0x314>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 80051d8:	4b64      	ldr	r3, [pc, #400]	; (800536c <voltage_monitor_init+0x314>)
 80051da:	f640 42b9 	movw	r2, #3257	; 0xcb9
 80051de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 80051e2:	4b62      	ldr	r3, [pc, #392]	; (800536c <voltage_monitor_init+0x314>)
 80051e4:	f640 3283 	movw	r2, #2947	; 0xb83
 80051e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80051ec:	4b5f      	ldr	r3, [pc, #380]	; (800536c <voltage_monitor_init+0x314>)
 80051ee:	2209      	movs	r2, #9
 80051f0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 80051f4:	4b5d      	ldr	r3, [pc, #372]	; (800536c <voltage_monitor_init+0x314>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 80051fc:	4b5b      	ldr	r3, [pc, #364]	; (800536c <voltage_monitor_init+0x314>)
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005204:	4b59      	ldr	r3, [pc, #356]	; (800536c <voltage_monitor_init+0x314>)
 8005206:	2200      	movs	r2, #0
 8005208:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 800520c:	4b57      	ldr	r3, [pc, #348]	; (800536c <voltage_monitor_init+0x314>)
 800520e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005212:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005216:	4b55      	ldr	r3, [pc, #340]	; (800536c <voltage_monitor_init+0x314>)
 8005218:	2200      	movs	r2, #0
 800521a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 800521e:	4b53      	ldr	r3, [pc, #332]	; (800536c <voltage_monitor_init+0x314>)
 8005220:	220a      	movs	r2, #10
 8005222:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8005226:	4b51      	ldr	r3, [pc, #324]	; (800536c <voltage_monitor_init+0x314>)
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 800522e:	4b4f      	ldr	r3, [pc, #316]	; (800536c <voltage_monitor_init+0x314>)
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8005236:	4b4d      	ldr	r3, [pc, #308]	; (800536c <voltage_monitor_init+0x314>)
 8005238:	2200      	movs	r2, #0
 800523a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 800523e:	4b4b      	ldr	r3, [pc, #300]	; (800536c <voltage_monitor_init+0x314>)
 8005240:	f640 7245 	movw	r2, #3909	; 0xf45
 8005244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8005248:	4b48      	ldr	r3, [pc, #288]	; (800536c <voltage_monitor_init+0x314>)
 800524a:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800524e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8005252:	4b46      	ldr	r3, [pc, #280]	; (800536c <voltage_monitor_init+0x314>)
 8005254:	220b      	movs	r2, #11
 8005256:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 800525a:	4b44      	ldr	r3, [pc, #272]	; (800536c <voltage_monitor_init+0x314>)
 800525c:	2200      	movs	r2, #0
 800525e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8005262:	4b42      	ldr	r3, [pc, #264]	; (800536c <voltage_monitor_init+0x314>)
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 800526a:	4b40      	ldr	r3, [pc, #256]	; (800536c <voltage_monitor_init+0x314>)
 800526c:	2200      	movs	r2, #0
 800526e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8005272:	4b3e      	ldr	r3, [pc, #248]	; (800536c <voltage_monitor_init+0x314>)
 8005274:	f640 72fb 	movw	r2, #4091	; 0xffb
 8005278:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 800527c:	4b3b      	ldr	r3, [pc, #236]	; (800536c <voltage_monitor_init+0x314>)
 800527e:	f640 6276 	movw	r2, #3702	; 0xe76
 8005282:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8005286:	4b39      	ldr	r3, [pc, #228]	; (800536c <voltage_monitor_init+0x314>)
 8005288:	220c      	movs	r2, #12
 800528a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 800528e:	4b37      	ldr	r3, [pc, #220]	; (800536c <voltage_monitor_init+0x314>)
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8005296:	4b35      	ldr	r3, [pc, #212]	; (800536c <voltage_monitor_init+0x314>)
 8005298:	2200      	movs	r2, #0
 800529a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 800529e:	4b33      	ldr	r3, [pc, #204]	; (800536c <voltage_monitor_init+0x314>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 80052a6:	4b31      	ldr	r3, [pc, #196]	; (800536c <voltage_monitor_init+0x314>)
 80052a8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80052ac:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80052b0:	4b2e      	ldr	r3, [pc, #184]	; (800536c <voltage_monitor_init+0x314>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 80052b8:	4b2c      	ldr	r3, [pc, #176]	; (800536c <voltage_monitor_init+0x314>)
 80052ba:	220d      	movs	r2, #13
 80052bc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80052c0:	4b2a      	ldr	r3, [pc, #168]	; (800536c <voltage_monitor_init+0x314>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80052c8:	4b28      	ldr	r3, [pc, #160]	; (800536c <voltage_monitor_init+0x314>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 80052d0:	4b26      	ldr	r3, [pc, #152]	; (800536c <voltage_monitor_init+0x314>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 80052d8:	4b24      	ldr	r3, [pc, #144]	; (800536c <voltage_monitor_init+0x314>)
 80052da:	f640 7238 	movw	r2, #3896	; 0xf38
 80052de:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 80052e2:	4b22      	ldr	r3, [pc, #136]	; (800536c <voltage_monitor_init+0x314>)
 80052e4:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80052e8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80052ec:	4b1f      	ldr	r3, [pc, #124]	; (800536c <voltage_monitor_init+0x314>)
 80052ee:	220e      	movs	r2, #14
 80052f0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 80052f4:	4b1d      	ldr	r3, [pc, #116]	; (800536c <voltage_monitor_init+0x314>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 80052fc:	4b1b      	ldr	r3, [pc, #108]	; (800536c <voltage_monitor_init+0x314>)
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005304:	4b19      	ldr	r3, [pc, #100]	; (800536c <voltage_monitor_init+0x314>)
 8005306:	2200      	movs	r2, #0
 8005308:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 800530c:	4b17      	ldr	r3, [pc, #92]	; (800536c <voltage_monitor_init+0x314>)
 800530e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005312:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <voltage_monitor_init+0x314>)
 8005318:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800531c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005320:	4b12      	ldr	r3, [pc, #72]	; (800536c <voltage_monitor_init+0x314>)
 8005322:	220f      	movs	r2, #15
 8005324:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8005328:	4b10      	ldr	r3, [pc, #64]	; (800536c <voltage_monitor_init+0x314>)
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <voltage_monitor_init+0x314>)
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <voltage_monitor_init+0x314>)
 800533a:	2200      	movs	r2, #0
 800533c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <voltage_monitor_init+0x314>)
 8005342:	f241 0264 	movw	r2, #4196	; 0x1064
 8005346:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 800534a:	4b08      	ldr	r3, [pc, #32]	; (800536c <voltage_monitor_init+0x314>)
 800534c:	2200      	movs	r2, #0
 800534e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <voltage_monitor_init+0x314>)
 8005354:	2210      	movs	r2, #16
 8005356:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 800535a:	4b04      	ldr	r3, [pc, #16]	; (800536c <voltage_monitor_init+0x314>)
 800535c:	2200      	movs	r2, #0
 800535e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8005362:	4b02      	ldr	r3, [pc, #8]	; (800536c <voltage_monitor_init+0x314>)
 8005364:	2200      	movs	r2, #0
 8005366:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800536a:	e001      	b.n	8005370 <voltage_monitor_init+0x318>
 800536c:	24001ee8 	.word	0x24001ee8
	rail_monitor[RAIL_n800v].data = 0;
 8005370:	4b17      	ldr	r3, [pc, #92]	; (80053d0 <voltage_monitor_init+0x378>)
 8005372:	2200      	movs	r2, #0
 8005374:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8005378:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <voltage_monitor_init+0x378>)
 800537a:	f640 5208 	movw	r2, #3336	; 0xd08
 800537e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8005382:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <voltage_monitor_init+0x378>)
 8005384:	f640 32ca 	movw	r2, #3018	; 0xbca
 8005388:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 800538c:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <voltage_monitor_init+0x378>)
 800538e:	2211      	movs	r2, #17
 8005390:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005394:	4b0e      	ldr	r3, [pc, #56]	; (80053d0 <voltage_monitor_init+0x378>)
 8005396:	2200      	movs	r2, #0
 8005398:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 800539c:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <voltage_monitor_init+0x378>)
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 80053a4:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <voltage_monitor_init+0x378>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80053ac:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <voltage_monitor_init+0x378>)
 80053ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80053b2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <voltage_monitor_init+0x378>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 80053be:	2301      	movs	r3, #1
 80053c0:	71fb      	strb	r3, [r7, #7]

	return status;
 80053c2:	79fb      	ldrb	r3, [r7, #7]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	24001ee8 	.word	0x24001ee8

080053d4 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	460a      	mov	r2, r1
 80053de:	71fb      	strb	r3, [r7, #7]
 80053e0:	4613      	mov	r3, r2
 80053e2:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 80053e8:	79fa      	ldrb	r2, [r7, #7]
 80053ea:	4909      	ldr	r1, [pc, #36]	; (8005410 <set_rail_monitor_enable+0x3c>)
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	440b      	add	r3, r1
 80053f6:	3302      	adds	r3, #2
 80053f8:	79ba      	ldrb	r2, [r7, #6]
 80053fa:	701a      	strb	r2, [r3, #0]
	status = 1;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]

	return status;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	24001ee8 	.word	0x24001ee8

08005414 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005420:	463b      	mov	r3, r7
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fcf6 	bl	8003e14 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005428:	f107 0310 	add.w	r3, r7, #16
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe fd21 	bl	8003e74 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005432:	f107 0308 	add.w	r3, r7, #8
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe fd6e 	bl	8003f18 <sample_hk_adc3>
 800543c:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 800543e:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <set_rail_monitor+0xc0>)
 8005440:	809a      	strh	r2, [r3, #4]
 8005442:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005444:	4b23      	ldr	r3, [pc, #140]	; (80054d4 <set_rail_monitor+0xc0>)
 8005446:	81da      	strh	r2, [r3, #14]
 8005448:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 800544a:	4b22      	ldr	r3, [pc, #136]	; (80054d4 <set_rail_monitor+0xc0>)
 800544c:	831a      	strh	r2, [r3, #24]
 800544e:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8005450:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <set_rail_monitor+0xc0>)
 8005452:	845a      	strh	r2, [r3, #34]	; 0x22
 8005454:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8005456:	4b1f      	ldr	r3, [pc, #124]	; (80054d4 <set_rail_monitor+0xc0>)
 8005458:	859a      	strh	r2, [r3, #44]	; 0x2c
 800545a:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 800545c:	4b1d      	ldr	r3, [pc, #116]	; (80054d4 <set_rail_monitor+0xc0>)
 800545e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005460:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8005462:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <set_rail_monitor+0xc0>)
 8005464:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005468:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 800546a:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <set_rail_monitor+0xc0>)
 800546c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005470:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8005472:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <set_rail_monitor+0xc0>)
 8005474:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005478:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 800547a:	4b16      	ldr	r3, [pc, #88]	; (80054d4 <set_rail_monitor+0xc0>)
 800547c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005480:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8005482:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <set_rail_monitor+0xc0>)
 8005484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005488:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <set_rail_monitor+0xc0>)
 800548c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005490:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8005492:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <set_rail_monitor+0xc0>)
 8005494:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005498:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 800549a:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <set_rail_monitor+0xc0>)
 800549c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80054a0:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 80054a2:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <set_rail_monitor+0xc0>)
 80054a4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80054a8:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <set_rail_monitor+0xc0>)
 80054ac:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80054b0:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 80054b2:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <set_rail_monitor+0xc0>)
 80054b4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80054b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 80054ba:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <set_rail_monitor+0xc0>)
 80054bc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 80054c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3728      	adds	r7, #40	; 0x28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	24001ee8 	.word	0x24001ee8

080054d8 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
	return rail_monitor;
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <get_rail_monitor+0x10>)
}
 80054de:	4618      	mov	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	24001ee8 	.word	0x24001ee8

080054ec <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 80054fa:	89fb      	ldrh	r3, [r7, #14]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	429a      	cmp	r2, r3
 8005500:	db05      	blt.n	800550e <in_range+0x22>
 8005502:	89fb      	ldrh	r3, [r7, #14]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	dc01      	bgt.n	800550e <in_range+0x22>
		return 1;
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <in_range+0x24>
	}
	return 0;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <monitor_rails>:


void monitor_rails() {
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	e062      	b.n	80055ee <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8005528:	4935      	ldr	r1, [pc, #212]	; (8005600 <monitor_rails+0xe4>)
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	440b      	add	r3, r1
 8005536:	3302      	adds	r3, #2
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d054      	beq.n	80055e8 <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 800553e:	4930      	ldr	r1, [pc, #192]	; (8005600 <monitor_rails+0xe4>)
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	440b      	add	r3, r1
 800554c:	3304      	adds	r3, #4
 800554e:	8818      	ldrh	r0, [r3, #0]
 8005550:	492b      	ldr	r1, [pc, #172]	; (8005600 <monitor_rails+0xe4>)
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	440b      	add	r3, r1
 800555e:	3308      	adds	r3, #8
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	461c      	mov	r4, r3
 8005564:	4926      	ldr	r1, [pc, #152]	; (8005600 <monitor_rails+0xe4>)
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	440b      	add	r3, r1
 8005572:	3306      	adds	r3, #6
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	4621      	mov	r1, r4
 800557a:	f7ff ffb7 	bl	80054ec <in_range>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d131      	bne.n	80055e8 <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005584:	491e      	ldr	r1, [pc, #120]	; (8005600 <monitor_rails+0xe4>)
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	440b      	add	r3, r1
 8005592:	3301      	adds	r3, #1
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	3301      	adds	r3, #1
 8005598:	b2d8      	uxtb	r0, r3
 800559a:	4919      	ldr	r1, [pc, #100]	; (8005600 <monitor_rails+0xe4>)
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	440b      	add	r3, r1
 80055a8:	3301      	adds	r3, #1
 80055aa:	4602      	mov	r2, r0
 80055ac:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 80055ae:	4914      	ldr	r1, [pc, #80]	; (8005600 <monitor_rails+0xe4>)
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	440b      	add	r3, r1
 80055bc:	3301      	adds	r3, #1
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d111      	bne.n	80055e8 <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 80055c4:	490e      	ldr	r1, [pc, #56]	; (8005600 <monitor_rails+0xe4>)
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	440b      	add	r3, r1
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 f815 	bl	8005604 <get_rail_name_error_detail>
 80055da:	4603      	mov	r3, r0
 80055dc:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 80055de:	2300      	movs	r3, #0
 80055e0:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 80055e2:	6838      	ldr	r0, [r7, #0]
 80055e4:	f7fc fca4 	bl	8001f30 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3301      	adds	r3, #1
 80055ec:	607b      	str	r3, [r7, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b11      	cmp	r3, #17
 80055f2:	dd99      	ble.n	8005528 <monitor_rails+0xc>
				}
			}
		}
	}
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd90      	pop	{r4, r7, pc}
 80055fe:	bf00      	nop
 8005600:	24001ee8 	.word	0x24001ee8

08005604 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	2b11      	cmp	r3, #17
 8005612:	d84b      	bhi.n	80056ac <get_rail_name_error_detail+0xa8>
 8005614:	a201      	add	r2, pc, #4	; (adr r2, 800561c <get_rail_name_error_detail+0x18>)
 8005616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561a:	bf00      	nop
 800561c:	08005665 	.word	0x08005665
 8005620:	08005669 	.word	0x08005669
 8005624:	0800566d 	.word	0x0800566d
 8005628:	08005671 	.word	0x08005671
 800562c:	08005675 	.word	0x08005675
 8005630:	08005679 	.word	0x08005679
 8005634:	0800567d 	.word	0x0800567d
 8005638:	08005681 	.word	0x08005681
 800563c:	08005685 	.word	0x08005685
 8005640:	08005689 	.word	0x08005689
 8005644:	0800568d 	.word	0x0800568d
 8005648:	08005691 	.word	0x08005691
 800564c:	08005695 	.word	0x08005695
 8005650:	08005699 	.word	0x08005699
 8005654:	0800569d 	.word	0x0800569d
 8005658:	080056a1 	.word	0x080056a1
 800565c:	080056a5 	.word	0x080056a5
 8005660:	080056a9 	.word	0x080056a9
	case RAIL_vsense:
		return ED_vsense;
 8005664:	2300      	movs	r3, #0
 8005666:	e022      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8005668:	2301      	movs	r3, #1
 800566a:	e020      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 800566c:	2302      	movs	r3, #2
 800566e:	e01e      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8005670:	2303      	movs	r3, #3
 8005672:	e01c      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8005674:	2304      	movs	r3, #4
 8005676:	e01a      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8005678:	2305      	movs	r3, #5
 800567a:	e018      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 800567c:	2306      	movs	r3, #6
 800567e:	e016      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8005680:	2307      	movs	r3, #7
 8005682:	e014      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8005684:	2308      	movs	r3, #8
 8005686:	e012      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8005688:	2309      	movs	r3, #9
 800568a:	e010      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 800568c:	230a      	movs	r3, #10
 800568e:	e00e      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8005690:	230b      	movs	r3, #11
 8005692:	e00c      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8005694:	230c      	movs	r3, #12
 8005696:	e00a      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8005698:	230d      	movs	r3, #13
 800569a:	e008      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 800569c:	230e      	movs	r3, #14
 800569e:	e006      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 80056a0:	230f      	movs	r3, #15
 80056a2:	e004      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 80056a4:	2310      	movs	r3, #16
 80056a6:	e002      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 80056a8:	2311      	movs	r3, #17
 80056aa:	e000      	b.n	80056ae <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 80056ac:	2314      	movs	r3, #20
	}
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop

080056bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80056bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80056c0:	f7ff f8b2 	bl	8004828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056c4:	480c      	ldr	r0, [pc, #48]	; (80056f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80056c6:	490d      	ldr	r1, [pc, #52]	; (80056fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80056c8:	4a0d      	ldr	r2, [pc, #52]	; (8005700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80056ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056cc:	e002      	b.n	80056d4 <LoopCopyDataInit>

080056ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056d2:	3304      	adds	r3, #4

080056d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056d8:	d3f9      	bcc.n	80056ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056da:	4a0a      	ldr	r2, [pc, #40]	; (8005704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80056dc:	4c0a      	ldr	r4, [pc, #40]	; (8005708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80056de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056e0:	e001      	b.n	80056e6 <LoopFillZerobss>

080056e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056e4:	3204      	adds	r2, #4

080056e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056e8:	d3fb      	bcc.n	80056e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80056ea:	f014 fb25 	bl	8019d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056ee:	f7fd fd85 	bl	80031fc <main>
  bx  lr
 80056f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80056f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80056f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80056fc:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 8005700:	0801ac68 	.word	0x0801ac68
  ldr r2, =_sbss
 8005704:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8005708:	2400691c 	.word	0x2400691c

0800570c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800570c:	e7fe      	b.n	800570c <ADC3_IRQHandler>
	...

08005710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005716:	2003      	movs	r0, #3
 8005718:	f001 fd39 	bl	800718e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800571c:	f008 fee4 	bl	800e4e8 <HAL_RCC_GetSysClockFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <HAL_Init+0x68>)
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	4913      	ldr	r1, [pc, #76]	; (800577c <HAL_Init+0x6c>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	f003 031f 	and.w	r3, r3, #31
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
 8005738:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800573a:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <HAL_Init+0x68>)
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	4a0e      	ldr	r2, [pc, #56]	; (800577c <HAL_Init+0x6c>)
 8005744:	5cd3      	ldrb	r3, [r2, r3]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
 8005750:	4a0b      	ldr	r2, [pc, #44]	; (8005780 <HAL_Init+0x70>)
 8005752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005754:	4a0b      	ldr	r2, [pc, #44]	; (8005784 <HAL_Init+0x74>)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800575a:	2005      	movs	r0, #5
 800575c:	f7fe fe4e 	bl	80043fc <HAL_InitTick>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e002      	b.n	8005770 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800576a:	f7fe fe29 	bl	80043c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	58024400 	.word	0x58024400
 800577c:	0801abb4 	.word	0x0801abb4
 8005780:	24000094 	.word	0x24000094
 8005784:	24000090 	.word	0x24000090

08005788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800578c:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <HAL_IncTick+0x20>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	4b06      	ldr	r3, [pc, #24]	; (80057ac <HAL_IncTick+0x24>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4413      	add	r3, r2
 8005798:	4a04      	ldr	r2, [pc, #16]	; (80057ac <HAL_IncTick+0x24>)
 800579a:	6013      	str	r3, [r2, #0]
}
 800579c:	bf00      	nop
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	2400009c 	.word	0x2400009c
 80057ac:	24001f9c 	.word	0x24001f9c

080057b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  return uwTick;
 80057b4:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <HAL_GetTick+0x14>)
 80057b6:	681b      	ldr	r3, [r3, #0]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	24001f9c 	.word	0x24001f9c

080057c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80057cc:	4b03      	ldr	r3, [pc, #12]	; (80057dc <HAL_GetREVID+0x14>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	0c1b      	lsrs	r3, r3, #16
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	5c001000 	.word	0x5c001000

080057e0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80057ea:	4b07      	ldr	r3, [pc, #28]	; (8005808 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	43db      	mvns	r3, r3
 80057f2:	401a      	ands	r2, r3
 80057f4:	4904      	ldr	r1, [pc, #16]	; (8005808 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	604b      	str	r3, [r1, #4]
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	58000400 	.word	0x58000400

0800580c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	431a      	orrs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	609a      	str	r2, [r3, #8]
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	609a      	str	r2, [r3, #8]
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3360      	adds	r3, #96	; 0x60
 8005886:	461a      	mov	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	430b      	orrs	r3, r1
 80058a2:	431a      	orrs	r2, r3
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80058a8:	bf00      	nop
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 031f 	and.w	r3, r3, #31
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	fa01 f303 	lsl.w	r3, r1, r3
 80058d4:	431a      	orrs	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	611a      	str	r2, [r3, #16]
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3360      	adds	r3, #96	; 0x60
 80058f6:	461a      	mov	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	431a      	orrs	r2, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	601a      	str	r2, [r3, #0]
  }
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005942:	b480      	push	{r7}
 8005944:	b087      	sub	sp, #28
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3330      	adds	r3, #48	; 0x30
 8005952:	461a      	mov	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	f003 030c 	and.w	r3, r3, #12
 800595e:	4413      	add	r3, r2
 8005960:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	211f      	movs	r1, #31
 800596e:	fa01 f303 	lsl.w	r3, r1, r3
 8005972:	43db      	mvns	r3, r3
 8005974:	401a      	ands	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0e9b      	lsrs	r3, r3, #26
 800597a:	f003 011f 	and.w	r1, r3, #31
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	431a      	orrs	r2, r3
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f023 0203 	bic.w	r2, r3, #3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60da      	str	r2, [r3, #12]
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3314      	adds	r3, #20
 80059d0:	461a      	mov	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	0e5b      	lsrs	r3, r3, #25
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	4413      	add	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	0d1b      	lsrs	r3, r3, #20
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	2107      	movs	r1, #7
 80059ee:	fa01 f303 	lsl.w	r3, r1, r3
 80059f2:	43db      	mvns	r3, r3
 80059f4:	401a      	ands	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	0d1b      	lsrs	r3, r3, #20
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	fa01 f303 	lsl.w	r3, r1, r3
 8005a04:	431a      	orrs	r2, r3
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005a0a:	bf00      	nop
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a30:	43db      	mvns	r3, r3
 8005a32:	401a      	ands	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f003 0318 	and.w	r3, r3, #24
 8005a3a:	4908      	ldr	r1, [pc, #32]	; (8005a5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8005a3c:	40d9      	lsrs	r1, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	400b      	ands	r3, r1
 8005a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a46:	431a      	orrs	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005a4e:	bf00      	nop
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	000fffff 	.word	0x000fffff

08005a60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 031f 	and.w	r3, r3, #31
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <LL_ADC_DisableDeepPowerDown+0x20>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6093      	str	r3, [r2, #8]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	5fffffc0 	.word	0x5fffffc0

08005aa0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab4:	d101      	bne.n	8005aba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	4b05      	ldr	r3, [pc, #20]	; (8005aec <LL_ADC_EnableInternalRegulator+0x24>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	6fffffc0 	.word	0x6fffffc0

08005af0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b04:	d101      	bne.n	8005b0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <LL_ADC_Enable+0x24>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	f043 0201 	orr.w	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	7fffffc0 	.word	0x7fffffc0

08005b40 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <LL_ADC_Disable+0x24>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	f043 0202 	orr.w	r2, r3, #2
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	7fffffc0 	.word	0x7fffffc0

08005b68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <LL_ADC_IsEnabled+0x18>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <LL_ADC_IsEnabled+0x1a>
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d101      	bne.n	8005ba6 <LL_ADC_IsDisableOngoing+0x18>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <LL_ADC_IsDisableOngoing+0x1a>
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <LL_ADC_REG_StartConversion+0x24>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	f043 0204 	orr.w	r2, r3, #4
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	7fffffc0 	.word	0x7fffffc0

08005bdc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d101      	bne.n	8005bf4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d101      	bne.n	8005c1a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c28:	b590      	push	{r4, r7, lr}
 8005c2a:	b089      	sub	sp, #36	; 0x24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e18f      	b.n	8005f62 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d109      	bne.n	8005c64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7fa fe7b 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff ff19 	bl	8005aa0 <LL_ADC_IsDeepPowerDownEnabled>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d004      	beq.n	8005c7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff feff 	bl	8005a7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff ff34 	bl	8005af0 <LL_ADC_IsInternalRegulatorEnabled>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d114      	bne.n	8005cb8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff ff18 	bl	8005ac8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c98:	4b87      	ldr	r3, [pc, #540]	; (8005eb8 <HAL_ADC_Init+0x290>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	099b      	lsrs	r3, r3, #6
 8005c9e:	4a87      	ldr	r2, [pc, #540]	; (8005ebc <HAL_ADC_Init+0x294>)
 8005ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca4:	099b      	lsrs	r3, r3, #6
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005caa:	e002      	b.n	8005cb2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f9      	bne.n	8005cac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff ff17 	bl	8005af0 <LL_ADC_IsInternalRegulatorEnabled>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10d      	bne.n	8005ce4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ccc:	f043 0210 	orr.w	r2, r3, #16
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd8:	f043 0201 	orr.w	r2, r3, #1
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff ff77 	bl	8005bdc <LL_ADC_REG_IsConversionOngoing>
 8005cee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf4:	f003 0310 	and.w	r3, r3, #16
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f040 8129 	bne.w	8005f50 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f040 8125 	bne.w	8005f50 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005d0e:	f043 0202 	orr.w	r2, r3, #2
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff ff24 	bl	8005b68 <LL_ADC_IsEnabled>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d136      	bne.n	8005d94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a65      	ldr	r2, [pc, #404]	; (8005ec0 <HAL_ADC_Init+0x298>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_ADC_Init+0x112>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a63      	ldr	r2, [pc, #396]	; (8005ec4 <HAL_ADC_Init+0x29c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d10e      	bne.n	8005d58 <HAL_ADC_Init+0x130>
 8005d3a:	4861      	ldr	r0, [pc, #388]	; (8005ec0 <HAL_ADC_Init+0x298>)
 8005d3c:	f7ff ff14 	bl	8005b68 <LL_ADC_IsEnabled>
 8005d40:	4604      	mov	r4, r0
 8005d42:	4860      	ldr	r0, [pc, #384]	; (8005ec4 <HAL_ADC_Init+0x29c>)
 8005d44:	f7ff ff10 	bl	8005b68 <LL_ADC_IsEnabled>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4323      	orrs	r3, r4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bf0c      	ite	eq
 8005d50:	2301      	moveq	r3, #1
 8005d52:	2300      	movne	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	e008      	b.n	8005d6a <HAL_ADC_Init+0x142>
 8005d58:	485b      	ldr	r0, [pc, #364]	; (8005ec8 <HAL_ADC_Init+0x2a0>)
 8005d5a:	f7ff ff05 	bl	8005b68 <LL_ADC_IsEnabled>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf0c      	ite	eq
 8005d64:	2301      	moveq	r3, #1
 8005d66:	2300      	movne	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d012      	beq.n	8005d94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a53      	ldr	r2, [pc, #332]	; (8005ec0 <HAL_ADC_Init+0x298>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_ADC_Init+0x15a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a51      	ldr	r2, [pc, #324]	; (8005ec4 <HAL_ADC_Init+0x29c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d101      	bne.n	8005d86 <HAL_ADC_Init+0x15e>
 8005d82:	4a52      	ldr	r2, [pc, #328]	; (8005ecc <HAL_ADC_Init+0x2a4>)
 8005d84:	e000      	b.n	8005d88 <HAL_ADC_Init+0x160>
 8005d86:	4a52      	ldr	r2, [pc, #328]	; (8005ed0 <HAL_ADC_Init+0x2a8>)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f7ff fd3c 	bl	800580c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005d94:	f7ff fd18 	bl	80057c8 <HAL_GetREVID>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d914      	bls.n	8005dcc <HAL_ADC_Init+0x1a4>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d110      	bne.n	8005dcc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	7d5b      	ldrb	r3, [r3, #21]
 8005dae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005db4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005dba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7f1b      	ldrb	r3, [r3, #28]
 8005dc0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005dc2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005dc4:	f043 030c 	orr.w	r3, r3, #12
 8005dc8:	61bb      	str	r3, [r7, #24]
 8005dca:	e00d      	b.n	8005de8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	7d5b      	ldrb	r3, [r3, #21]
 8005dd0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005dd6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005ddc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	7f1b      	ldrb	r3, [r3, #28]
 8005de2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005de4:	4313      	orrs	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	7f1b      	ldrb	r3, [r3, #28]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d106      	bne.n	8005dfe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	045b      	lsls	r3, r3, #17
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	4b2c      	ldr	r3, [pc, #176]	; (8005ed4 <HAL_ADC_Init+0x2ac>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	69b9      	ldr	r1, [r7, #24]
 8005e2a:	430b      	orrs	r3, r1
 8005e2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fed2 	bl	8005bdc <LL_ADC_REG_IsConversionOngoing>
 8005e38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff fedf 	bl	8005c02 <LL_ADC_INJ_IsConversionOngoing>
 8005e44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d15f      	bne.n	8005f0c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d15c      	bne.n	8005f0c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7d1b      	ldrb	r3, [r3, #20]
 8005e56:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	4b1c      	ldr	r3, [pc, #112]	; (8005ed8 <HAL_ADC_Init+0x2b0>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	69b9      	ldr	r1, [r7, #24]
 8005e70:	430b      	orrs	r3, r1
 8005e72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d130      	bne.n	8005ee0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	4b14      	ldr	r3, [pc, #80]	; (8005edc <HAL_ADC_Init+0x2b4>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e92:	3a01      	subs	r2, #1
 8005e94:	0411      	lsls	r1, r2, #16
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e9a:	4311      	orrs	r1, r2
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005ea0:	4311      	orrs	r1, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	611a      	str	r2, [r3, #16]
 8005eb4:	e01c      	b.n	8005ef0 <HAL_ADC_Init+0x2c8>
 8005eb6:	bf00      	nop
 8005eb8:	24000090 	.word	0x24000090
 8005ebc:	053e2d63 	.word	0x053e2d63
 8005ec0:	40022000 	.word	0x40022000
 8005ec4:	40022100 	.word	0x40022100
 8005ec8:	58026000 	.word	0x58026000
 8005ecc:	40022300 	.word	0x40022300
 8005ed0:	58026300 	.word	0x58026300
 8005ed4:	fff0c003 	.word	0xfff0c003
 8005ed8:	ffffbffc 	.word	0xffffbffc
 8005edc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fdec 	bl	8006ae4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d10c      	bne.n	8005f2e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	f023 010f 	bic.w	r1, r3, #15
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	1e5a      	subs	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f2c:	e007      	b.n	8005f3e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 020f 	bic.w	r2, r2, #15
 8005f3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f42:	f023 0303 	bic.w	r3, r3, #3
 8005f46:	f043 0201 	orr.w	r2, r3, #1
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	655a      	str	r2, [r3, #84]	; 0x54
 8005f4e:	e007      	b.n	8005f60 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	f043 0210 	orr.w	r2, r3, #16
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005f60:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3724      	adds	r7, #36	; 0x24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd90      	pop	{r4, r7, pc}
 8005f6a:	bf00      	nop

08005f6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a55      	ldr	r2, [pc, #340]	; (80060d4 <HAL_ADC_Start_DMA+0x168>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d004      	beq.n	8005f8c <HAL_ADC_Start_DMA+0x20>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a54      	ldr	r2, [pc, #336]	; (80060d8 <HAL_ADC_Start_DMA+0x16c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d101      	bne.n	8005f90 <HAL_ADC_Start_DMA+0x24>
 8005f8c:	4b53      	ldr	r3, [pc, #332]	; (80060dc <HAL_ADC_Start_DMA+0x170>)
 8005f8e:	e000      	b.n	8005f92 <HAL_ADC_Start_DMA+0x26>
 8005f90:	4b53      	ldr	r3, [pc, #332]	; (80060e0 <HAL_ADC_Start_DMA+0x174>)
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fd64 	bl	8005a60 <LL_ADC_GetMultimode>
 8005f98:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fe1c 	bl	8005bdc <LL_ADC_REG_IsConversionOngoing>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 808c 	bne.w	80060c4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_ADC_Start_DMA+0x4e>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e087      	b.n	80060ca <HAL_ADC_Start_DMA+0x15e>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b05      	cmp	r3, #5
 8005fcc:	d002      	beq.n	8005fd4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b09      	cmp	r3, #9
 8005fd2:	d170      	bne.n	80060b6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fc07 	bl	80067e8 <ADC_Enable>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d163      	bne.n	80060ac <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe8:	4b3e      	ldr	r3, [pc, #248]	; (80060e4 <HAL_ADC_Start_DMA+0x178>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a37      	ldr	r2, [pc, #220]	; (80060d8 <HAL_ADC_Start_DMA+0x16c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d002      	beq.n	8006004 <HAL_ADC_Start_DMA+0x98>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	e000      	b.n	8006006 <HAL_ADC_Start_DMA+0x9a>
 8006004:	4b33      	ldr	r3, [pc, #204]	; (80060d4 <HAL_ADC_Start_DMA+0x168>)
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	4293      	cmp	r3, r2
 800600c:	d002      	beq.n	8006014 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d105      	bne.n	8006020 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d006      	beq.n	800603a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006030:	f023 0206 	bic.w	r2, r3, #6
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	659a      	str	r2, [r3, #88]	; 0x58
 8006038:	e002      	b.n	8006040 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006044:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <HAL_ADC_Start_DMA+0x17c>)
 8006046:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604c:	4a27      	ldr	r2, [pc, #156]	; (80060ec <HAL_ADC_Start_DMA+0x180>)
 800604e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006054:	4a26      	ldr	r2, [pc, #152]	; (80060f0 <HAL_ADC_Start_DMA+0x184>)
 8006056:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	221c      	movs	r2, #28
 800605e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0210 	orr.w	r2, r2, #16
 8006076:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	4619      	mov	r1, r3
 8006082:	4610      	mov	r0, r2
 8006084:	f7ff fc89 	bl	800599a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3340      	adds	r3, #64	; 0x40
 8006092:	4619      	mov	r1, r3
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f002 f886 	bl	80081a8 <HAL_DMA_Start_IT>
 800609c:	4603      	mov	r3, r0
 800609e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fd85 	bl	8005bb4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80060aa:	e00d      	b.n	80060c8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80060b4:	e008      	b.n	80060c8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80060c2:	e001      	b.n	80060c8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80060c4:	2302      	movs	r3, #2
 80060c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40022000 	.word	0x40022000
 80060d8:	40022100 	.word	0x40022100
 80060dc:	40022300 	.word	0x40022300
 80060e0:	58026300 	.word	0x58026300
 80060e4:	fffff0fe 	.word	0xfffff0fe
 80060e8:	080069bb 	.word	0x080069bb
 80060ec:	08006a93 	.word	0x08006a93
 80060f0:	08006aaf 	.word	0x08006aaf

080060f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006130:	b590      	push	{r4, r7, lr}
 8006132:	b0a1      	sub	sp, #132	; 0x84
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4a65      	ldr	r2, [pc, #404]	; (80062e0 <HAL_ADC_ConfigChannel+0x1b0>)
 800614a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_ADC_ConfigChannel+0x2a>
 8006156:	2302      	movs	r3, #2
 8006158:	e32e      	b.n	80067b8 <HAL_ADC_ConfigChannel+0x688>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fd38 	bl	8005bdc <LL_ADC_REG_IsConversionOngoing>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	f040 8313 	bne.w	800679a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	db2c      	blt.n	80061d6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006184:	2b00      	cmp	r3, #0
 8006186:	d108      	bne.n	800619a <HAL_ADC_ConfigChannel+0x6a>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	0e9b      	lsrs	r3, r3, #26
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	2201      	movs	r2, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	e016      	b.n	80061c8 <HAL_ADC_ConfigChannel+0x98>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a2:	fa93 f3a3 	rbit	r3, r3
 80061a6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061aa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80061b2:	2320      	movs	r3, #32
 80061b4:	e003      	b.n	80061be <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80061b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061b8:	fab3 f383 	clz	r3, r3
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	2201      	movs	r2, #1
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6812      	ldr	r2, [r2, #0]
 80061cc:	69d1      	ldr	r1, [r2, #28]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	430b      	orrs	r3, r1
 80061d4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6859      	ldr	r1, [r3, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f7ff fbad 	bl	8005942 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fcf5 	bl	8005bdc <LL_ADC_REG_IsConversionOngoing>
 80061f2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fd02 	bl	8005c02 <LL_ADC_INJ_IsConversionOngoing>
 80061fe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006202:	2b00      	cmp	r3, #0
 8006204:	f040 80b8 	bne.w	8006378 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 80b4 	bne.w	8006378 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	6819      	ldr	r1, [r3, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	461a      	mov	r2, r3
 800621e:	f7ff fbcf 	bl	80059c0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006222:	4b30      	ldr	r3, [pc, #192]	; (80062e4 <HAL_ADC_ConfigChannel+0x1b4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800622a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800622e:	d10b      	bne.n	8006248 <HAL_ADC_ConfigChannel+0x118>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	695a      	ldr	r2, [r3, #20]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	089b      	lsrs	r3, r3, #2
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	e01d      	b.n	8006284 <HAL_ADC_ConfigChannel+0x154>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0310 	and.w	r3, r3, #16
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <HAL_ADC_ConfigChannel+0x13e>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	695a      	ldr	r2, [r3, #20]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	089b      	lsrs	r3, r3, #2
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	e00a      	b.n	8006284 <HAL_ADC_ConfigChannel+0x154>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	695a      	ldr	r2, [r3, #20]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	089b      	lsrs	r3, r3, #2
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b04      	cmp	r3, #4
 800628c:	d02c      	beq.n	80062e8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	6919      	ldr	r1, [r3, #16]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800629c:	f7ff faea 	bl	8005874 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	6919      	ldr	r1, [r3, #16]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	7e5b      	ldrb	r3, [r3, #25]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d102      	bne.n	80062b6 <HAL_ADC_ConfigChannel+0x186>
 80062b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062b4:	e000      	b.n	80062b8 <HAL_ADC_ConfigChannel+0x188>
 80062b6:	2300      	movs	r3, #0
 80062b8:	461a      	mov	r2, r3
 80062ba:	f7ff fb14 	bl	80058e6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	6919      	ldr	r1, [r3, #16]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	7e1b      	ldrb	r3, [r3, #24]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d102      	bne.n	80062d4 <HAL_ADC_ConfigChannel+0x1a4>
 80062ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062d2:	e000      	b.n	80062d6 <HAL_ADC_ConfigChannel+0x1a6>
 80062d4:	2300      	movs	r3, #0
 80062d6:	461a      	mov	r2, r3
 80062d8:	f7ff faec 	bl	80058b4 <LL_ADC_SetDataRightShift>
 80062dc:	e04c      	b.n	8006378 <HAL_ADC_ConfigChannel+0x248>
 80062de:	bf00      	nop
 80062e0:	47ff0000 	.word	0x47ff0000
 80062e4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	069b      	lsls	r3, r3, #26
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d107      	bne.n	800630c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800630a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	069b      	lsls	r3, r3, #26
 800631c:	429a      	cmp	r2, r3
 800631e:	d107      	bne.n	8006330 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800632e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006336:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	069b      	lsls	r3, r3, #26
 8006340:	429a      	cmp	r2, r3
 8006342:	d107      	bne.n	8006354 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006352:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800635a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	069b      	lsls	r3, r3, #26
 8006364:	429a      	cmp	r2, r3
 8006366:	d107      	bne.n	8006378 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006376:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fbf3 	bl	8005b68 <LL_ADC_IsEnabled>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	f040 8211 	bne.w	80067ac <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6819      	ldr	r1, [r3, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	461a      	mov	r2, r3
 8006398:	f7ff fb3e 	bl	8005a18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	4aa1      	ldr	r2, [pc, #644]	; (8006628 <HAL_ADC_ConfigChannel+0x4f8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	f040 812e 	bne.w	8006604 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10b      	bne.n	80063d0 <HAL_ADC_ConfigChannel+0x2a0>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	0e9b      	lsrs	r3, r3, #26
 80063be:	3301      	adds	r3, #1
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2b09      	cmp	r3, #9
 80063c6:	bf94      	ite	ls
 80063c8:	2301      	movls	r3, #1
 80063ca:	2300      	movhi	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	e019      	b.n	8006404 <HAL_ADC_ConfigChannel+0x2d4>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063d8:	fa93 f3a3 	rbit	r3, r3
 80063dc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80063de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80063e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80063e8:	2320      	movs	r3, #32
 80063ea:	e003      	b.n	80063f4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80063ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ee:	fab3 f383 	clz	r3, r3
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	3301      	adds	r3, #1
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2b09      	cmp	r3, #9
 80063fc:	bf94      	ite	ls
 80063fe:	2301      	movls	r3, #1
 8006400:	2300      	movhi	r3, #0
 8006402:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006404:	2b00      	cmp	r3, #0
 8006406:	d079      	beq.n	80064fc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006410:	2b00      	cmp	r3, #0
 8006412:	d107      	bne.n	8006424 <HAL_ADC_ConfigChannel+0x2f4>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	0e9b      	lsrs	r3, r3, #26
 800641a:	3301      	adds	r3, #1
 800641c:	069b      	lsls	r3, r3, #26
 800641e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006422:	e015      	b.n	8006450 <HAL_ADC_ConfigChannel+0x320>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642c:	fa93 f3a3 	rbit	r3, r3
 8006430:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006434:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800643c:	2320      	movs	r3, #32
 800643e:	e003      	b.n	8006448 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006442:	fab3 f383 	clz	r3, r3
 8006446:	b2db      	uxtb	r3, r3
 8006448:	3301      	adds	r3, #1
 800644a:	069b      	lsls	r3, r3, #26
 800644c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006458:	2b00      	cmp	r3, #0
 800645a:	d109      	bne.n	8006470 <HAL_ADC_ConfigChannel+0x340>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	0e9b      	lsrs	r3, r3, #26
 8006462:	3301      	adds	r3, #1
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	2101      	movs	r1, #1
 800646a:	fa01 f303 	lsl.w	r3, r1, r3
 800646e:	e017      	b.n	80064a0 <HAL_ADC_ConfigChannel+0x370>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006478:	fa93 f3a3 	rbit	r3, r3
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800647e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006480:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8006488:	2320      	movs	r3, #32
 800648a:	e003      	b.n	8006494 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800648c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648e:	fab3 f383 	clz	r3, r3
 8006492:	b2db      	uxtb	r3, r3
 8006494:	3301      	adds	r3, #1
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	2101      	movs	r1, #1
 800649c:	fa01 f303 	lsl.w	r3, r1, r3
 80064a0:	ea42 0103 	orr.w	r1, r2, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <HAL_ADC_ConfigChannel+0x396>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	0e9b      	lsrs	r3, r3, #26
 80064b6:	3301      	adds	r3, #1
 80064b8:	f003 021f 	and.w	r2, r3, #31
 80064bc:	4613      	mov	r3, r2
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	4413      	add	r3, r2
 80064c2:	051b      	lsls	r3, r3, #20
 80064c4:	e018      	b.n	80064f8 <HAL_ADC_ConfigChannel+0x3c8>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ce:	fa93 f3a3 	rbit	r3, r3
 80064d2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80064d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80064de:	2320      	movs	r3, #32
 80064e0:	e003      	b.n	80064ea <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	fab3 f383 	clz	r3, r3
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	3301      	adds	r3, #1
 80064ec:	f003 021f 	and.w	r2, r3, #31
 80064f0:	4613      	mov	r3, r2
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4413      	add	r3, r2
 80064f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064f8:	430b      	orrs	r3, r1
 80064fa:	e07e      	b.n	80065fa <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006504:	2b00      	cmp	r3, #0
 8006506:	d107      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x3e8>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	0e9b      	lsrs	r3, r3, #26
 800650e:	3301      	adds	r3, #1
 8006510:	069b      	lsls	r3, r3, #26
 8006512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006516:	e015      	b.n	8006544 <HAL_ADC_ConfigChannel+0x414>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	fa93 f3a3 	rbit	r3, r3
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8006530:	2320      	movs	r3, #32
 8006532:	e003      	b.n	800653c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	fab3 f383 	clz	r3, r3
 800653a:	b2db      	uxtb	r3, r3
 800653c:	3301      	adds	r3, #1
 800653e:	069b      	lsls	r3, r3, #26
 8006540:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <HAL_ADC_ConfigChannel+0x434>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	0e9b      	lsrs	r3, r3, #26
 8006556:	3301      	adds	r3, #1
 8006558:	f003 031f 	and.w	r3, r3, #31
 800655c:	2101      	movs	r1, #1
 800655e:	fa01 f303 	lsl.w	r3, r1, r3
 8006562:	e017      	b.n	8006594 <HAL_ADC_ConfigChannel+0x464>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	fa93 f3a3 	rbit	r3, r3
 8006570:	61bb      	str	r3, [r7, #24]
  return result;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800657c:	2320      	movs	r3, #32
 800657e:	e003      	b.n	8006588 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	fab3 f383 	clz	r3, r3
 8006586:	b2db      	uxtb	r3, r3
 8006588:	3301      	adds	r3, #1
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2101      	movs	r1, #1
 8006590:	fa01 f303 	lsl.w	r3, r1, r3
 8006594:	ea42 0103 	orr.w	r1, r2, r3
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10d      	bne.n	80065c0 <HAL_ADC_ConfigChannel+0x490>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	0e9b      	lsrs	r3, r3, #26
 80065aa:	3301      	adds	r3, #1
 80065ac:	f003 021f 	and.w	r2, r3, #31
 80065b0:	4613      	mov	r3, r2
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	4413      	add	r3, r2
 80065b6:	3b1e      	subs	r3, #30
 80065b8:	051b      	lsls	r3, r3, #20
 80065ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065be:	e01b      	b.n	80065f8 <HAL_ADC_ConfigChannel+0x4c8>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	fa93 f3a3 	rbit	r3, r3
 80065cc:	60fb      	str	r3, [r7, #12]
  return result;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80065d8:	2320      	movs	r3, #32
 80065da:	e003      	b.n	80065e4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	fab3 f383 	clz	r3, r3
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	3301      	adds	r3, #1
 80065e6:	f003 021f 	and.w	r2, r3, #31
 80065ea:	4613      	mov	r3, r2
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	4413      	add	r3, r2
 80065f0:	3b1e      	subs	r3, #30
 80065f2:	051b      	lsls	r3, r3, #20
 80065f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065f8:	430b      	orrs	r3, r1
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	6892      	ldr	r2, [r2, #8]
 80065fe:	4619      	mov	r1, r3
 8006600:	f7ff f9de 	bl	80059c0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	f280 80cf 	bge.w	80067ac <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a06      	ldr	r2, [pc, #24]	; (800662c <HAL_ADC_ConfigChannel+0x4fc>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d004      	beq.n	8006622 <HAL_ADC_ConfigChannel+0x4f2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a04      	ldr	r2, [pc, #16]	; (8006630 <HAL_ADC_ConfigChannel+0x500>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d10a      	bne.n	8006638 <HAL_ADC_ConfigChannel+0x508>
 8006622:	4b04      	ldr	r3, [pc, #16]	; (8006634 <HAL_ADC_ConfigChannel+0x504>)
 8006624:	e009      	b.n	800663a <HAL_ADC_ConfigChannel+0x50a>
 8006626:	bf00      	nop
 8006628:	47ff0000 	.word	0x47ff0000
 800662c:	40022000 	.word	0x40022000
 8006630:	40022100 	.word	0x40022100
 8006634:	40022300 	.word	0x40022300
 8006638:	4b61      	ldr	r3, [pc, #388]	; (80067c0 <HAL_ADC_ConfigChannel+0x690>)
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff f90c 	bl	8005858 <LL_ADC_GetCommonPathInternalCh>
 8006640:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a5f      	ldr	r2, [pc, #380]	; (80067c4 <HAL_ADC_ConfigChannel+0x694>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d004      	beq.n	8006656 <HAL_ADC_ConfigChannel+0x526>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a5d      	ldr	r2, [pc, #372]	; (80067c8 <HAL_ADC_ConfigChannel+0x698>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d10e      	bne.n	8006674 <HAL_ADC_ConfigChannel+0x544>
 8006656:	485b      	ldr	r0, [pc, #364]	; (80067c4 <HAL_ADC_ConfigChannel+0x694>)
 8006658:	f7ff fa86 	bl	8005b68 <LL_ADC_IsEnabled>
 800665c:	4604      	mov	r4, r0
 800665e:	485a      	ldr	r0, [pc, #360]	; (80067c8 <HAL_ADC_ConfigChannel+0x698>)
 8006660:	f7ff fa82 	bl	8005b68 <LL_ADC_IsEnabled>
 8006664:	4603      	mov	r3, r0
 8006666:	4323      	orrs	r3, r4
 8006668:	2b00      	cmp	r3, #0
 800666a:	bf0c      	ite	eq
 800666c:	2301      	moveq	r3, #1
 800666e:	2300      	movne	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	e008      	b.n	8006686 <HAL_ADC_ConfigChannel+0x556>
 8006674:	4855      	ldr	r0, [pc, #340]	; (80067cc <HAL_ADC_ConfigChannel+0x69c>)
 8006676:	f7ff fa77 	bl	8005b68 <LL_ADC_IsEnabled>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	bf0c      	ite	eq
 8006680:	2301      	moveq	r3, #1
 8006682:	2300      	movne	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d07d      	beq.n	8006786 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a50      	ldr	r2, [pc, #320]	; (80067d0 <HAL_ADC_ConfigChannel+0x6a0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d130      	bne.n	80066f6 <HAL_ADC_ConfigChannel+0x5c6>
 8006694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d12b      	bne.n	80066f6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a4a      	ldr	r2, [pc, #296]	; (80067cc <HAL_ADC_ConfigChannel+0x69c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	f040 8081 	bne.w	80067ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a45      	ldr	r2, [pc, #276]	; (80067c4 <HAL_ADC_ConfigChannel+0x694>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d004      	beq.n	80066be <HAL_ADC_ConfigChannel+0x58e>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a43      	ldr	r2, [pc, #268]	; (80067c8 <HAL_ADC_ConfigChannel+0x698>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d101      	bne.n	80066c2 <HAL_ADC_ConfigChannel+0x592>
 80066be:	4a45      	ldr	r2, [pc, #276]	; (80067d4 <HAL_ADC_ConfigChannel+0x6a4>)
 80066c0:	e000      	b.n	80066c4 <HAL_ADC_ConfigChannel+0x594>
 80066c2:	4a3f      	ldr	r2, [pc, #252]	; (80067c0 <HAL_ADC_ConfigChannel+0x690>)
 80066c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f7ff f8b0 	bl	8005832 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066d2:	4b41      	ldr	r3, [pc, #260]	; (80067d8 <HAL_ADC_ConfigChannel+0x6a8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	099b      	lsrs	r3, r3, #6
 80066d8:	4a40      	ldr	r2, [pc, #256]	; (80067dc <HAL_ADC_ConfigChannel+0x6ac>)
 80066da:	fba2 2303 	umull	r2, r3, r2, r3
 80066de:	099b      	lsrs	r3, r3, #6
 80066e0:	3301      	adds	r3, #1
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80066e6:	e002      	b.n	80066ee <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1f9      	bne.n	80066e8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066f4:	e05a      	b.n	80067ac <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a39      	ldr	r2, [pc, #228]	; (80067e0 <HAL_ADC_ConfigChannel+0x6b0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d11e      	bne.n	800673e <HAL_ADC_ConfigChannel+0x60e>
 8006700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d119      	bne.n	800673e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2f      	ldr	r2, [pc, #188]	; (80067cc <HAL_ADC_ConfigChannel+0x69c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d14b      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a2a      	ldr	r2, [pc, #168]	; (80067c4 <HAL_ADC_ConfigChannel+0x694>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d004      	beq.n	8006728 <HAL_ADC_ConfigChannel+0x5f8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <HAL_ADC_ConfigChannel+0x698>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d101      	bne.n	800672c <HAL_ADC_ConfigChannel+0x5fc>
 8006728:	4a2a      	ldr	r2, [pc, #168]	; (80067d4 <HAL_ADC_ConfigChannel+0x6a4>)
 800672a:	e000      	b.n	800672e <HAL_ADC_ConfigChannel+0x5fe>
 800672c:	4a24      	ldr	r2, [pc, #144]	; (80067c0 <HAL_ADC_ConfigChannel+0x690>)
 800672e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006734:	4619      	mov	r1, r3
 8006736:	4610      	mov	r0, r2
 8006738:	f7ff f87b 	bl	8005832 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800673c:	e036      	b.n	80067ac <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a28      	ldr	r2, [pc, #160]	; (80067e4 <HAL_ADC_ConfigChannel+0x6b4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d131      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x67c>
 8006748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d12c      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1d      	ldr	r2, [pc, #116]	; (80067cc <HAL_ADC_ConfigChannel+0x69c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d127      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a18      	ldr	r2, [pc, #96]	; (80067c4 <HAL_ADC_ConfigChannel+0x694>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d004      	beq.n	8006770 <HAL_ADC_ConfigChannel+0x640>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a17      	ldr	r2, [pc, #92]	; (80067c8 <HAL_ADC_ConfigChannel+0x698>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d101      	bne.n	8006774 <HAL_ADC_ConfigChannel+0x644>
 8006770:	4a18      	ldr	r2, [pc, #96]	; (80067d4 <HAL_ADC_ConfigChannel+0x6a4>)
 8006772:	e000      	b.n	8006776 <HAL_ADC_ConfigChannel+0x646>
 8006774:	4a12      	ldr	r2, [pc, #72]	; (80067c0 <HAL_ADC_ConfigChannel+0x690>)
 8006776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f7ff f857 	bl	8005832 <LL_ADC_SetCommonPathInternalCh>
 8006784:	e012      	b.n	80067ac <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678a:	f043 0220 	orr.w	r2, r3, #32
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006798:	e008      	b.n	80067ac <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	f043 0220 	orr.w	r2, r3, #32
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80067b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3784      	adds	r7, #132	; 0x84
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd90      	pop	{r4, r7, pc}
 80067c0:	58026300 	.word	0x58026300
 80067c4:	40022000 	.word	0x40022000
 80067c8:	40022100 	.word	0x40022100
 80067cc:	58026000 	.word	0x58026000
 80067d0:	cb840000 	.word	0xcb840000
 80067d4:	40022300 	.word	0x40022300
 80067d8:	24000090 	.word	0x24000090
 80067dc:	053e2d63 	.word	0x053e2d63
 80067e0:	c7520000 	.word	0xc7520000
 80067e4:	cfb80000 	.word	0xcfb80000

080067e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff f9b7 	bl	8005b68 <LL_ADC_IsEnabled>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d16e      	bne.n	80068de <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	4b38      	ldr	r3, [pc, #224]	; (80068e8 <ADC_Enable+0x100>)
 8006808:	4013      	ands	r3, r2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00d      	beq.n	800682a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006812:	f043 0210 	orr.w	r2, r3, #16
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681e:	f043 0201 	orr.w	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e05a      	b.n	80068e0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff f972 	bl	8005b18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006834:	f7fe ffbc 	bl	80057b0 <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a2b      	ldr	r2, [pc, #172]	; (80068ec <ADC_Enable+0x104>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d004      	beq.n	800684e <ADC_Enable+0x66>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a29      	ldr	r2, [pc, #164]	; (80068f0 <ADC_Enable+0x108>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d101      	bne.n	8006852 <ADC_Enable+0x6a>
 800684e:	4b29      	ldr	r3, [pc, #164]	; (80068f4 <ADC_Enable+0x10c>)
 8006850:	e000      	b.n	8006854 <ADC_Enable+0x6c>
 8006852:	4b29      	ldr	r3, [pc, #164]	; (80068f8 <ADC_Enable+0x110>)
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff f903 	bl	8005a60 <LL_ADC_GetMultimode>
 800685a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a23      	ldr	r2, [pc, #140]	; (80068f0 <ADC_Enable+0x108>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d002      	beq.n	800686c <ADC_Enable+0x84>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	e000      	b.n	800686e <ADC_Enable+0x86>
 800686c:	4b1f      	ldr	r3, [pc, #124]	; (80068ec <ADC_Enable+0x104>)
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	4293      	cmp	r3, r2
 8006874:	d02c      	beq.n	80068d0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d130      	bne.n	80068de <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800687c:	e028      	b.n	80068d0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff f970 	bl	8005b68 <LL_ADC_IsEnabled>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff f940 	bl	8005b18 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006898:	f7fe ff8a 	bl	80057b0 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d914      	bls.n	80068d0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d00d      	beq.n	80068d0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b8:	f043 0210 	orr.w	r2, r3, #16
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c4:	f043 0201 	orr.w	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e007      	b.n	80068e0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d1cf      	bne.n	800687e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	8000003f 	.word	0x8000003f
 80068ec:	40022000 	.word	0x40022000
 80068f0:	40022100 	.word	0x40022100
 80068f4:	40022300 	.word	0x40022300
 80068f8:	58026300 	.word	0x58026300

080068fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff f940 	bl	8005b8e <LL_ADC_IsDisableOngoing>
 800690e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff f927 	bl	8005b68 <LL_ADC_IsEnabled>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d047      	beq.n	80069b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d144      	bne.n	80069b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 030d 	and.w	r3, r3, #13
 8006930:	2b01      	cmp	r3, #1
 8006932:	d10c      	bne.n	800694e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff f901 	bl	8005b40 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2203      	movs	r2, #3
 8006944:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006946:	f7fe ff33 	bl	80057b0 <HAL_GetTick>
 800694a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800694c:	e029      	b.n	80069a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	f043 0210 	orr.w	r2, r3, #16
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695e:	f043 0201 	orr.w	r2, r3, #1
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e023      	b.n	80069b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800696a:	f7fe ff21 	bl	80057b0 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d914      	bls.n	80069a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00d      	beq.n	80069a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698a:	f043 0210 	orr.w	r2, r3, #16
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006996:	f043 0201 	orr.w	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e007      	b.n	80069b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1dc      	bne.n	800696a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d14b      	bne.n	8006a6c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d021      	beq.n	8006a32 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe ff92 	bl	800591c <LL_ADC_REG_IsTriggerSourceSWStart>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d032      	beq.n	8006a64 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d12b      	bne.n	8006a64 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d11f      	bne.n	8006a64 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a28:	f043 0201 	orr.w	r2, r3, #1
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	655a      	str	r2, [r3, #84]	; 0x54
 8006a30:	e018      	b.n	8006a64 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d111      	bne.n	8006a64 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d105      	bne.n	8006a64 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5c:	f043 0201 	orr.w	r2, r3, #1
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7ff fb45 	bl	80060f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006a6a:	e00e      	b.n	8006a8a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7ff fb4f 	bl	800611c <HAL_ADC_ErrorCallback>
}
 8006a7e:	e004      	b.n	8006a8a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
}
 8006a8a:	bf00      	nop
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f7ff fb31 	bl	8006108 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006acc:	f043 0204 	orr.w	r2, r3, #4
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7ff fb21 	bl	800611c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ada:	bf00      	nop
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a7a      	ldr	r2, [pc, #488]	; (8006cdc <ADC_ConfigureBoostMode+0x1f8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d004      	beq.n	8006b00 <ADC_ConfigureBoostMode+0x1c>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a79      	ldr	r2, [pc, #484]	; (8006ce0 <ADC_ConfigureBoostMode+0x1fc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d109      	bne.n	8006b14 <ADC_ConfigureBoostMode+0x30>
 8006b00:	4b78      	ldr	r3, [pc, #480]	; (8006ce4 <ADC_ConfigureBoostMode+0x200>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bf14      	ite	ne
 8006b0c:	2301      	movne	r3, #1
 8006b0e:	2300      	moveq	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	e008      	b.n	8006b26 <ADC_ConfigureBoostMode+0x42>
 8006b14:	4b74      	ldr	r3, [pc, #464]	; (8006ce8 <ADC_ConfigureBoostMode+0x204>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bf14      	ite	ne
 8006b20:	2301      	movne	r3, #1
 8006b22:	2300      	moveq	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d01c      	beq.n	8006b64 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006b2a:	f007 fe57 	bl	800e7dc <HAL_RCC_GetHCLKFreq>
 8006b2e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b38:	d010      	beq.n	8006b5c <ADC_ConfigureBoostMode+0x78>
 8006b3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b3e:	d873      	bhi.n	8006c28 <ADC_ConfigureBoostMode+0x144>
 8006b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b44:	d002      	beq.n	8006b4c <ADC_ConfigureBoostMode+0x68>
 8006b46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b4a:	d16d      	bne.n	8006c28 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	0c1b      	lsrs	r3, r3, #16
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b58:	60fb      	str	r3, [r7, #12]
        break;
 8006b5a:	e068      	b.n	8006c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	089b      	lsrs	r3, r3, #2
 8006b60:	60fb      	str	r3, [r7, #12]
        break;
 8006b62:	e064      	b.n	8006c2e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006b64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006b68:	f04f 0100 	mov.w	r1, #0
 8006b6c:	f009 f8de 	bl	800fd2c <HAL_RCCEx_GetPeriphCLKFreq>
 8006b70:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006b7a:	d051      	beq.n	8006c20 <ADC_ConfigureBoostMode+0x13c>
 8006b7c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006b80:	d854      	bhi.n	8006c2c <ADC_ConfigureBoostMode+0x148>
 8006b82:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006b86:	d047      	beq.n	8006c18 <ADC_ConfigureBoostMode+0x134>
 8006b88:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006b8c:	d84e      	bhi.n	8006c2c <ADC_ConfigureBoostMode+0x148>
 8006b8e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006b92:	d03d      	beq.n	8006c10 <ADC_ConfigureBoostMode+0x12c>
 8006b94:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006b98:	d848      	bhi.n	8006c2c <ADC_ConfigureBoostMode+0x148>
 8006b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b9e:	d033      	beq.n	8006c08 <ADC_ConfigureBoostMode+0x124>
 8006ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ba4:	d842      	bhi.n	8006c2c <ADC_ConfigureBoostMode+0x148>
 8006ba6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006baa:	d029      	beq.n	8006c00 <ADC_ConfigureBoostMode+0x11c>
 8006bac:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006bb0:	d83c      	bhi.n	8006c2c <ADC_ConfigureBoostMode+0x148>
 8006bb2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006bb6:	d01a      	beq.n	8006bee <ADC_ConfigureBoostMode+0x10a>
 8006bb8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006bbc:	d836      	bhi.n	8006c2c <ADC_ConfigureBoostMode+0x148>
 8006bbe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006bc2:	d014      	beq.n	8006bee <ADC_ConfigureBoostMode+0x10a>
 8006bc4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006bc8:	d830      	bhi.n	8006c2c <ADC_ConfigureBoostMode+0x148>
 8006bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bce:	d00e      	beq.n	8006bee <ADC_ConfigureBoostMode+0x10a>
 8006bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd4:	d82a      	bhi.n	8006c2c <ADC_ConfigureBoostMode+0x148>
 8006bd6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006bda:	d008      	beq.n	8006bee <ADC_ConfigureBoostMode+0x10a>
 8006bdc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006be0:	d824      	bhi.n	8006c2c <ADC_ConfigureBoostMode+0x148>
 8006be2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006be6:	d002      	beq.n	8006bee <ADC_ConfigureBoostMode+0x10a>
 8006be8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bec:	d11e      	bne.n	8006c2c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	0c9b      	lsrs	r3, r3, #18
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfc:	60fb      	str	r3, [r7, #12]
        break;
 8006bfe:	e016      	b.n	8006c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	091b      	lsrs	r3, r3, #4
 8006c04:	60fb      	str	r3, [r7, #12]
        break;
 8006c06:	e012      	b.n	8006c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	60fb      	str	r3, [r7, #12]
        break;
 8006c0e:	e00e      	b.n	8006c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	099b      	lsrs	r3, r3, #6
 8006c14:	60fb      	str	r3, [r7, #12]
        break;
 8006c16:	e00a      	b.n	8006c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	09db      	lsrs	r3, r3, #7
 8006c1c:	60fb      	str	r3, [r7, #12]
        break;
 8006c1e:	e006      	b.n	8006c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	60fb      	str	r3, [r7, #12]
        break;
 8006c26:	e002      	b.n	8006c2e <ADC_ConfigureBoostMode+0x14a>
        break;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006c2c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006c2e:	f7fe fdcb 	bl	80057c8 <HAL_GetREVID>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d815      	bhi.n	8006c68 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4a2b      	ldr	r2, [pc, #172]	; (8006cec <ADC_ConfigureBoostMode+0x208>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d908      	bls.n	8006c56 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c52:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006c54:	e03e      	b.n	8006cd4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c64:	609a      	str	r2, [r3, #8]
}
 8006c66:	e035      	b.n	8006cd4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a1f      	ldr	r2, [pc, #124]	; (8006cf0 <ADC_ConfigureBoostMode+0x20c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d808      	bhi.n	8006c88 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c84:	609a      	str	r2, [r3, #8]
}
 8006c86:	e025      	b.n	8006cd4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4a1a      	ldr	r2, [pc, #104]	; (8006cf4 <ADC_ConfigureBoostMode+0x210>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d80a      	bhi.n	8006ca6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ca2:	609a      	str	r2, [r3, #8]
}
 8006ca4:	e016      	b.n	8006cd4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4a13      	ldr	r2, [pc, #76]	; (8006cf8 <ADC_ConfigureBoostMode+0x214>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d80a      	bhi.n	8006cc4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc0:	609a      	str	r2, [r3, #8]
}
 8006cc2:	e007      	b.n	8006cd4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006cd2:	609a      	str	r2, [r3, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40022000 	.word	0x40022000
 8006ce0:	40022100 	.word	0x40022100
 8006ce4:	40022300 	.word	0x40022300
 8006ce8:	58026300 	.word	0x58026300
 8006cec:	01312d00 	.word	0x01312d00
 8006cf0:	005f5e10 	.word	0x005f5e10
 8006cf4:	00bebc20 	.word	0x00bebc20
 8006cf8:	017d7840 	.word	0x017d7840

08006cfc <LL_ADC_IsEnabled>:
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <LL_ADC_IsEnabled+0x18>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <LL_ADC_IsEnabled+0x1a>
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
	...

08006d24 <LL_ADC_StartCalibration>:
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <LL_ADC_StartCalibration+0x38>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006d44:	430a      	orrs	r2, r1
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	609a      	str	r2, [r3, #8]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	3ffeffc0 	.word	0x3ffeffc0

08006d60 <LL_ADC_IsCalibrationOnGoing>:
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d74:	d101      	bne.n	8006d7a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e000      	b.n	8006d7c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <LL_ADC_REG_IsConversionOngoing>:
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d101      	bne.n	8006da0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_ADCEx_Calibration_Start+0x1e>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e04c      	b.n	8006e68 <HAL_ADCEx_Calibration_Start+0xb8>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff fd90 	bl	80068fc <ADC_Disable>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d135      	bne.n	8006e52 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dea:	4b21      	ldr	r3, [pc, #132]	; (8006e70 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	f043 0202 	orr.w	r2, r3, #2
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	68b9      	ldr	r1, [r7, #8]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff ff90 	bl	8006d24 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006e04:	e014      	b.n	8006e30 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4a19      	ldr	r2, [pc, #100]	; (8006e74 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d30d      	bcc.n	8006e30 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e18:	f023 0312 	bic.w	r3, r3, #18
 8006e1c:	f043 0210 	orr.w	r2, r3, #16
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e01b      	b.n	8006e68 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff ff93 	bl	8006d60 <LL_ADC_IsCalibrationOnGoing>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e2      	bne.n	8006e06 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	f023 0303 	bic.w	r3, r3, #3
 8006e48:	f043 0201 	orr.w	r2, r3, #1
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	655a      	str	r2, [r3, #84]	; 0x54
 8006e50:	e005      	b.n	8006e5e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	f043 0210 	orr.w	r2, r3, #16
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	ffffeefd 	.word	0xffffeefd
 8006e74:	25c3f800 	.word	0x25c3f800

08006e78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006e78:	b590      	push	{r4, r7, lr}
 8006e7a:	b09f      	sub	sp, #124	; 0x7c
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d101      	bne.n	8006e96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006e92:	2302      	movs	r3, #2
 8006e94:	e0be      	b.n	8007014 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a5c      	ldr	r2, [pc, #368]	; (800701c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d102      	bne.n	8006eb6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006eb0:	4b5b      	ldr	r3, [pc, #364]	; (8007020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006eb2:	60bb      	str	r3, [r7, #8]
 8006eb4:	e001      	b.n	8006eba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec4:	f043 0220 	orr.w	r2, r3, #32
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e09d      	b.n	8007014 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff ff54 	bl	8006d88 <LL_ADC_REG_IsConversionOngoing>
 8006ee0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff ff4e 	bl	8006d88 <LL_ADC_REG_IsConversionOngoing>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d17f      	bne.n	8006ff2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d17c      	bne.n	8006ff2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a47      	ldr	r2, [pc, #284]	; (800701c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d004      	beq.n	8006f0c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a46      	ldr	r2, [pc, #280]	; (8007020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d101      	bne.n	8006f10 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006f0c:	4b45      	ldr	r3, [pc, #276]	; (8007024 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f0e:	e000      	b.n	8006f12 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006f10:	4b45      	ldr	r3, [pc, #276]	; (8007028 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006f12:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d039      	beq.n	8006f90 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a3a      	ldr	r2, [pc, #232]	; (800701c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d004      	beq.n	8006f42 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a38      	ldr	r2, [pc, #224]	; (8007020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d10e      	bne.n	8006f60 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006f42:	4836      	ldr	r0, [pc, #216]	; (800701c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f44:	f7ff feda 	bl	8006cfc <LL_ADC_IsEnabled>
 8006f48:	4604      	mov	r4, r0
 8006f4a:	4835      	ldr	r0, [pc, #212]	; (8007020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f4c:	f7ff fed6 	bl	8006cfc <LL_ADC_IsEnabled>
 8006f50:	4603      	mov	r3, r0
 8006f52:	4323      	orrs	r3, r4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	bf0c      	ite	eq
 8006f58:	2301      	moveq	r3, #1
 8006f5a:	2300      	movne	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	e008      	b.n	8006f72 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006f60:	4832      	ldr	r0, [pc, #200]	; (800702c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006f62:	f7ff fecb 	bl	8006cfc <LL_ADC_IsEnabled>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf0c      	ite	eq
 8006f6c:	2301      	moveq	r3, #1
 8006f6e:	2300      	movne	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d047      	beq.n	8007006 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	4b2d      	ldr	r3, [pc, #180]	; (8007030 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	6811      	ldr	r1, [r2, #0]
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	6892      	ldr	r2, [r2, #8]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f8e:	e03a      	b.n	8007006 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1e      	ldr	r2, [pc, #120]	; (800701c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d10e      	bne.n	8006fce <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006fb0:	481a      	ldr	r0, [pc, #104]	; (800701c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006fb2:	f7ff fea3 	bl	8006cfc <LL_ADC_IsEnabled>
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4819      	ldr	r0, [pc, #100]	; (8007020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006fba:	f7ff fe9f 	bl	8006cfc <LL_ADC_IsEnabled>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4323      	orrs	r3, r4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bf0c      	ite	eq
 8006fc6:	2301      	moveq	r3, #1
 8006fc8:	2300      	movne	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	e008      	b.n	8006fe0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006fce:	4817      	ldr	r0, [pc, #92]	; (800702c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006fd0:	f7ff fe94 	bl	8006cfc <LL_ADC_IsEnabled>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bf0c      	ite	eq
 8006fda:	2301      	moveq	r3, #1
 8006fdc:	2300      	movne	r3, #0
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d010      	beq.n	8007006 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	4b11      	ldr	r3, [pc, #68]	; (8007030 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006fea:	4013      	ands	r3, r2
 8006fec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ff0:	e009      	b.n	8007006 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	f043 0220 	orr.w	r2, r3, #32
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007004:	e000      	b.n	8007008 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007006:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007010:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007014:	4618      	mov	r0, r3
 8007016:	377c      	adds	r7, #124	; 0x7c
 8007018:	46bd      	mov	sp, r7
 800701a:	bd90      	pop	{r4, r7, pc}
 800701c:	40022000 	.word	0x40022000
 8007020:	40022100 	.word	0x40022100
 8007024:	40022300 	.word	0x40022300
 8007028:	58026300 	.word	0x58026300
 800702c:	58026000 	.word	0x58026000
 8007030:	fffff0e0 	.word	0xfffff0e0

08007034 <__NVIC_SetPriorityGrouping>:
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <__NVIC_SetPriorityGrouping+0x40>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007050:	4013      	ands	r3, r2
 8007052:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800705c:	4b06      	ldr	r3, [pc, #24]	; (8007078 <__NVIC_SetPriorityGrouping+0x44>)
 800705e:	4313      	orrs	r3, r2
 8007060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007062:	4a04      	ldr	r2, [pc, #16]	; (8007074 <__NVIC_SetPriorityGrouping+0x40>)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	60d3      	str	r3, [r2, #12]
}
 8007068:	bf00      	nop
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	e000ed00 	.word	0xe000ed00
 8007078:	05fa0000 	.word	0x05fa0000

0800707c <__NVIC_GetPriorityGrouping>:
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007080:	4b04      	ldr	r3, [pc, #16]	; (8007094 <__NVIC_GetPriorityGrouping+0x18>)
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	0a1b      	lsrs	r3, r3, #8
 8007086:	f003 0307 	and.w	r3, r3, #7
}
 800708a:	4618      	mov	r0, r3
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	e000ed00 	.word	0xe000ed00

08007098 <__NVIC_EnableIRQ>:
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	db0b      	blt.n	80070c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	f003 021f 	and.w	r2, r3, #31
 80070b0:	4907      	ldr	r1, [pc, #28]	; (80070d0 <__NVIC_EnableIRQ+0x38>)
 80070b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	2001      	movs	r0, #1
 80070ba:	fa00 f202 	lsl.w	r2, r0, r2
 80070be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	e000e100 	.word	0xe000e100

080070d4 <__NVIC_SetPriority>:
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	6039      	str	r1, [r7, #0]
 80070de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	db0a      	blt.n	80070fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	490c      	ldr	r1, [pc, #48]	; (8007120 <__NVIC_SetPriority+0x4c>)
 80070ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070f2:	0112      	lsls	r2, r2, #4
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	440b      	add	r3, r1
 80070f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070fc:	e00a      	b.n	8007114 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	b2da      	uxtb	r2, r3
 8007102:	4908      	ldr	r1, [pc, #32]	; (8007124 <__NVIC_SetPriority+0x50>)
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	3b04      	subs	r3, #4
 800710c:	0112      	lsls	r2, r2, #4
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	440b      	add	r3, r1
 8007112:	761a      	strb	r2, [r3, #24]
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	e000e100 	.word	0xe000e100
 8007124:	e000ed00 	.word	0xe000ed00

08007128 <NVIC_EncodePriority>:
{
 8007128:	b480      	push	{r7}
 800712a:	b089      	sub	sp, #36	; 0x24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f1c3 0307 	rsb	r3, r3, #7
 8007142:	2b04      	cmp	r3, #4
 8007144:	bf28      	it	cs
 8007146:	2304      	movcs	r3, #4
 8007148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	3304      	adds	r3, #4
 800714e:	2b06      	cmp	r3, #6
 8007150:	d902      	bls.n	8007158 <NVIC_EncodePriority+0x30>
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	3b03      	subs	r3, #3
 8007156:	e000      	b.n	800715a <NVIC_EncodePriority+0x32>
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800715c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	43da      	mvns	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	401a      	ands	r2, r3
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	fa01 f303 	lsl.w	r3, r1, r3
 800717a:	43d9      	mvns	r1, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007180:	4313      	orrs	r3, r2
}
 8007182:	4618      	mov	r0, r3
 8007184:	3724      	adds	r7, #36	; 0x24
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff ff4c 	bl	8007034 <__NVIC_SetPriorityGrouping>
}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80071b2:	f7ff ff63 	bl	800707c <__NVIC_GetPriorityGrouping>
 80071b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	68b9      	ldr	r1, [r7, #8]
 80071bc:	6978      	ldr	r0, [r7, #20]
 80071be:	f7ff ffb3 	bl	8007128 <NVIC_EncodePriority>
 80071c2:	4602      	mov	r2, r0
 80071c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80071c8:	4611      	mov	r1, r2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff ff82 	bl	80070d4 <__NVIC_SetPriority>
}
 80071d0:	bf00      	nop
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4603      	mov	r3, r0
 80071e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff ff56 	bl	8007098 <__NVIC_EnableIRQ>
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80071f8:	f3bf 8f5f 	dmb	sy
}
 80071fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80071fe:	4b07      	ldr	r3, [pc, #28]	; (800721c <HAL_MPU_Disable+0x28>)
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	4a06      	ldr	r2, [pc, #24]	; (800721c <HAL_MPU_Disable+0x28>)
 8007204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007208:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800720a:	4b05      	ldr	r3, [pc, #20]	; (8007220 <HAL_MPU_Disable+0x2c>)
 800720c:	2200      	movs	r2, #0
 800720e:	605a      	str	r2, [r3, #4]
}
 8007210:	bf00      	nop
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	e000ed00 	.word	0xe000ed00
 8007220:	e000ed90 	.word	0xe000ed90

08007224 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800722c:	4a0b      	ldr	r2, [pc, #44]	; (800725c <HAL_MPU_Enable+0x38>)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f043 0301 	orr.w	r3, r3, #1
 8007234:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007236:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <HAL_MPU_Enable+0x3c>)
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	4a09      	ldr	r2, [pc, #36]	; (8007260 <HAL_MPU_Enable+0x3c>)
 800723c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007240:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007242:	f3bf 8f4f 	dsb	sy
}
 8007246:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007248:	f3bf 8f6f 	isb	sy
}
 800724c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	e000ed90 	.word	0xe000ed90
 8007260:	e000ed00 	.word	0xe000ed00

08007264 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	785a      	ldrb	r2, [r3, #1]
 8007270:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <HAL_MPU_ConfigRegion+0x7c>)
 8007272:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007274:	4b1a      	ldr	r3, [pc, #104]	; (80072e0 <HAL_MPU_ConfigRegion+0x7c>)
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	4a19      	ldr	r2, [pc, #100]	; (80072e0 <HAL_MPU_ConfigRegion+0x7c>)
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007280:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <HAL_MPU_ConfigRegion+0x7c>)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	7b1b      	ldrb	r3, [r3, #12]
 800728c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	7adb      	ldrb	r3, [r3, #11]
 8007292:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007294:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	7a9b      	ldrb	r3, [r3, #10]
 800729a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800729c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	7b5b      	ldrb	r3, [r3, #13]
 80072a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80072a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	7b9b      	ldrb	r3, [r3, #14]
 80072aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80072ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7bdb      	ldrb	r3, [r3, #15]
 80072b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80072b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	7a5b      	ldrb	r3, [r3, #9]
 80072ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80072bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	7a1b      	ldrb	r3, [r3, #8]
 80072c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80072c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	7812      	ldrb	r2, [r2, #0]
 80072ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80072cc:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80072ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80072d0:	6113      	str	r3, [r2, #16]
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	e000ed90 	.word	0xe000ed90

080072e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e014      	b.n	8007320 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	791b      	ldrb	r3, [r3, #4]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d105      	bne.n	800730c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7f9 fc6c 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e046      	b.n	80073ca <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	795b      	ldrb	r3, [r3, #5]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_DAC_Start+0x20>
 8007344:	2302      	movs	r3, #2
 8007346:	e040      	b.n	80073ca <HAL_DAC_Start+0xa2>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6819      	ldr	r1, [r3, #0]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2201      	movs	r2, #1
 8007362:	409a      	lsls	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10f      	bne.n	8007392 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800737c:	2b02      	cmp	r3, #2
 800737e:	d11d      	bne.n	80073bc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	605a      	str	r2, [r3, #4]
 8007390:	e014      	b.n	80073bc <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	f003 0310 	and.w	r3, r3, #16
 80073a2:	2102      	movs	r1, #2
 80073a4:	fa01 f303 	lsl.w	r3, r1, r3
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d107      	bne.n	80073bc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0202 	orr.w	r2, r2, #2
 80073ba:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e0a2      	b.n	8007536 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	795b      	ldrb	r3, [r3, #5]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_DAC_Start_DMA+0x24>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e09c      	b.n	8007536 <HAL_DAC_Start_DMA+0x15e>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2202      	movs	r2, #2
 8007406:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d129      	bne.n	8007462 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	4a4b      	ldr	r2, [pc, #300]	; (8007540 <HAL_DAC_Start_DMA+0x168>)
 8007414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	4a4a      	ldr	r2, [pc, #296]	; (8007544 <HAL_DAC_Start_DMA+0x16c>)
 800741c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	4a49      	ldr	r2, [pc, #292]	; (8007548 <HAL_DAC_Start_DMA+0x170>)
 8007424:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007434:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <HAL_DAC_Start_DMA+0x6c>
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	2b04      	cmp	r3, #4
 8007440:	d005      	beq.n	800744e <HAL_DAC_Start_DMA+0x76>
 8007442:	e009      	b.n	8007458 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3308      	adds	r3, #8
 800744a:	613b      	str	r3, [r7, #16]
        break;
 800744c:	e033      	b.n	80074b6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	330c      	adds	r3, #12
 8007454:	613b      	str	r3, [r7, #16]
        break;
 8007456:	e02e      	b.n	80074b6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3310      	adds	r3, #16
 800745e:	613b      	str	r3, [r7, #16]
        break;
 8007460:	e029      	b.n	80074b6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	4a39      	ldr	r2, [pc, #228]	; (800754c <HAL_DAC_Start_DMA+0x174>)
 8007468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	4a38      	ldr	r2, [pc, #224]	; (8007550 <HAL_DAC_Start_DMA+0x178>)
 8007470:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	4a37      	ldr	r2, [pc, #220]	; (8007554 <HAL_DAC_Start_DMA+0x17c>)
 8007478:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007488:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_DAC_Start_DMA+0xc0>
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	2b04      	cmp	r3, #4
 8007494:	d005      	beq.n	80074a2 <HAL_DAC_Start_DMA+0xca>
 8007496:	e009      	b.n	80074ac <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3314      	adds	r3, #20
 800749e:	613b      	str	r3, [r7, #16]
        break;
 80074a0:	e009      	b.n	80074b6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3318      	adds	r3, #24
 80074a8:	613b      	str	r3, [r7, #16]
        break;
 80074aa:	e004      	b.n	80074b6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	331c      	adds	r3, #28
 80074b2:	613b      	str	r3, [r7, #16]
        break;
 80074b4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d111      	bne.n	80074e0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6898      	ldr	r0, [r3, #8]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	f000 fe67 	bl	80081a8 <HAL_DMA_Start_IT>
 80074da:	4603      	mov	r3, r0
 80074dc:	75fb      	strb	r3, [r7, #23]
 80074de:	e010      	b.n	8007502 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80074ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	68d8      	ldr	r0, [r3, #12]
 80074f4:	6879      	ldr	r1, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	f000 fe55 	bl	80081a8 <HAL_DMA_Start_IT>
 80074fe:	4603      	mov	r3, r0
 8007500:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10c      	bne.n	8007528 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6819      	ldr	r1, [r3, #0]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2201      	movs	r2, #1
 800751c:	409a      	lsls	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	e005      	b.n	8007534 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f043 0204 	orr.w	r2, r3, #4
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	080079c9 	.word	0x080079c9
 8007544:	080079eb 	.word	0x080079eb
 8007548:	08007a07 	.word	0x08007a07
 800754c:	08007a85 	.word	0x08007a85
 8007550:	08007aa7 	.word	0x08007aa7
 8007554:	08007ac3 	.word	0x08007ac3

08007558 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e03e      	b.n	80075ea <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6819      	ldr	r1, [r3, #0]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800757c:	fa02 f303 	lsl.w	r3, r2, r3
 8007580:	43da      	mvns	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	400a      	ands	r2, r1
 8007588:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6819      	ldr	r1, [r3, #0]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	f003 0310 	and.w	r3, r3, #16
 8007596:	2201      	movs	r2, #1
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	43da      	mvns	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	400a      	ands	r2, r1
 80075a4:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10d      	bne.n	80075c8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 f863 	bl	800867c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	e00c      	b.n	80075e2 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 f855 	bl	800867c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80075e0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007608:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01d      	beq.n	8007650 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d018      	beq.n	8007650 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2204      	movs	r2, #4
 8007622:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f043 0201 	orr.w	r2, r3, #1
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007638:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007648:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f86f 	bl	800772e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01d      	beq.n	8007696 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d018      	beq.n	8007696 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2204      	movs	r2, #4
 8007668:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f043 0202 	orr.w	r2, r3, #2
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800767e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800768e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f9ed 	bl	8007a70 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800769e:	b480      	push	{r7}
 80076a0:	b087      	sub	sp, #28
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	607a      	str	r2, [r7, #4]
 80076aa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e015      	b.n	80076e6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d105      	bne.n	80076d2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4413      	add	r3, r2
 80076cc:	3308      	adds	r3, #8
 80076ce:	617b      	str	r3, [r7, #20]
 80076d0:	e004      	b.n	80076dc <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4413      	add	r3, r2
 80076d8:	3314      	adds	r3, #20
 80076da:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	461a      	mov	r2, r3
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
	...

08007744 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <HAL_DAC_ConfigChannel+0x1e>
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e12a      	b.n	80079bc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	795b      	ldrb	r3, [r3, #5]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <HAL_DAC_ConfigChannel+0x2e>
 800776e:	2302      	movs	r3, #2
 8007770:	e124      	b.n	80079bc <HAL_DAC_ConfigChannel+0x278>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2202      	movs	r2, #2
 800777c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b04      	cmp	r3, #4
 8007784:	d17a      	bne.n	800787c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007786:	f7fe f813 	bl	80057b0 <HAL_GetTick>
 800778a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d13d      	bne.n	800780e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007792:	e018      	b.n	80077c6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007794:	f7fe f80c 	bl	80057b0 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d911      	bls.n	80077c6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a8:	4b86      	ldr	r3, [pc, #536]	; (80079c4 <HAL_DAC_ConfigChannel+0x280>)
 80077aa:	4013      	ands	r3, r2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00a      	beq.n	80077c6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f043 0208 	orr.w	r2, r3, #8
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2203      	movs	r2, #3
 80077c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e0fa      	b.n	80079bc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077cc:	4b7d      	ldr	r3, [pc, #500]	; (80079c4 <HAL_DAC_ConfigChannel+0x280>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1df      	bne.n	8007794 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	6992      	ldr	r2, [r2, #24]
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
 80077de:	e020      	b.n	8007822 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80077e0:	f7fd ffe6 	bl	80057b0 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d90f      	bls.n	800780e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da0a      	bge.n	800780e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f043 0208 	orr.w	r2, r3, #8
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2203      	movs	r2, #3
 8007808:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e0d6      	b.n	80079bc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007814:	2b00      	cmp	r3, #0
 8007816:	dbe3      	blt.n	80077e0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	6992      	ldr	r2, [r2, #24]
 8007820:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f003 0310 	and.w	r3, r3, #16
 800782e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007832:	fa01 f303 	lsl.w	r3, r1, r3
 8007836:	43db      	mvns	r3, r3
 8007838:	ea02 0103 	and.w	r1, r2, r3
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f003 0310 	and.w	r3, r3, #16
 8007846:	409a      	lsls	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f003 0310 	and.w	r3, r3, #16
 800785c:	21ff      	movs	r1, #255	; 0xff
 800785e:	fa01 f303 	lsl.w	r3, r1, r3
 8007862:	43db      	mvns	r3, r3
 8007864:	ea02 0103 	and.w	r1, r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	6a1a      	ldr	r2, [r3, #32]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f003 0310 	and.w	r3, r3, #16
 8007872:	409a      	lsls	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d11d      	bne.n	80078c0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f003 0310 	and.w	r3, r3, #16
 8007892:	221f      	movs	r2, #31
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	43db      	mvns	r3, r3
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	4013      	ands	r3, r2
 800789e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f003 0310 	and.w	r3, r3, #16
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	fa02 f303 	lsl.w	r3, r2, r3
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2207      	movs	r2, #7
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	43db      	mvns	r3, r3
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	4013      	ands	r3, r2
 80078da:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d102      	bne.n	80078ea <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80078e4:	2300      	movs	r3, #0
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
 80078e8:	e00f      	b.n	800790a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d102      	bne.n	80078f8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80078f2:	2301      	movs	r3, #1
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
 80078f6:	e008      	b.n	800790a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007900:	2301      	movs	r3, #1
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
 8007904:	e001      	b.n	800790a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007906:	2300      	movs	r3, #0
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	4313      	orrs	r3, r2
 8007914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	fa02 f303 	lsl.w	r3, r2, r3
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	4313      	orrs	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6819      	ldr	r1, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007944:	fa02 f303 	lsl.w	r3, r2, r3
 8007948:	43da      	mvns	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	400a      	ands	r2, r1
 8007950:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f003 0310 	and.w	r3, r3, #16
 8007960:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	43db      	mvns	r3, r3
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	4013      	ands	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	fa02 f303 	lsl.w	r3, r2, r3
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	4313      	orrs	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6819      	ldr	r1, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	22c0      	movs	r2, #192	; 0xc0
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	43da      	mvns	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	400a      	ands	r2, r1
 80079aa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80079b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3728      	adds	r7, #40	; 0x28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	20008000 	.word	0x20008000

080079c8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7ff fe8b 	bl	80076f2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	711a      	strb	r2, [r3, #4]
}
 80079e2:	bf00      	nop
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b084      	sub	sp, #16
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f7ff fe84 	bl	8007706 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	f043 0204 	orr.w	r2, r3, #4
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f7ff fe7a 	bl	800771a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	711a      	strb	r2, [r3, #4]
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f7ff ffce 	bl	8007a34 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	711a      	strb	r2, [r3, #4]
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f7ff ffc7 	bl	8007a48 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007aba:	bf00      	nop
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f043 0204 	orr.w	r2, r3, #4
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f7ff ffbd 	bl	8007a5c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	711a      	strb	r2, [r3, #4]
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007af8:	f7fd fe5a 	bl	80057b0 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e316      	b.n	8008136 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a66      	ldr	r2, [pc, #408]	; (8007ca8 <HAL_DMA_Init+0x1b8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d04a      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a65      	ldr	r2, [pc, #404]	; (8007cac <HAL_DMA_Init+0x1bc>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d045      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a63      	ldr	r2, [pc, #396]	; (8007cb0 <HAL_DMA_Init+0x1c0>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d040      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a62      	ldr	r2, [pc, #392]	; (8007cb4 <HAL_DMA_Init+0x1c4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d03b      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a60      	ldr	r2, [pc, #384]	; (8007cb8 <HAL_DMA_Init+0x1c8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d036      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a5f      	ldr	r2, [pc, #380]	; (8007cbc <HAL_DMA_Init+0x1cc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d031      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a5d      	ldr	r2, [pc, #372]	; (8007cc0 <HAL_DMA_Init+0x1d0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d02c      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a5c      	ldr	r2, [pc, #368]	; (8007cc4 <HAL_DMA_Init+0x1d4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d027      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a5a      	ldr	r2, [pc, #360]	; (8007cc8 <HAL_DMA_Init+0x1d8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d022      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a59      	ldr	r2, [pc, #356]	; (8007ccc <HAL_DMA_Init+0x1dc>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d01d      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a57      	ldr	r2, [pc, #348]	; (8007cd0 <HAL_DMA_Init+0x1e0>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d018      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a56      	ldr	r2, [pc, #344]	; (8007cd4 <HAL_DMA_Init+0x1e4>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d013      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a54      	ldr	r2, [pc, #336]	; (8007cd8 <HAL_DMA_Init+0x1e8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d00e      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a53      	ldr	r2, [pc, #332]	; (8007cdc <HAL_DMA_Init+0x1ec>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d009      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a51      	ldr	r2, [pc, #324]	; (8007ce0 <HAL_DMA_Init+0x1f0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d004      	beq.n	8007ba8 <HAL_DMA_Init+0xb8>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a50      	ldr	r2, [pc, #320]	; (8007ce4 <HAL_DMA_Init+0x1f4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d101      	bne.n	8007bac <HAL_DMA_Init+0xbc>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <HAL_DMA_Init+0xbe>
 8007bac:	2300      	movs	r3, #0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 813b 	beq.w	8007e2a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a37      	ldr	r2, [pc, #220]	; (8007ca8 <HAL_DMA_Init+0x1b8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d04a      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a36      	ldr	r2, [pc, #216]	; (8007cac <HAL_DMA_Init+0x1bc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d045      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a34      	ldr	r2, [pc, #208]	; (8007cb0 <HAL_DMA_Init+0x1c0>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d040      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a33      	ldr	r2, [pc, #204]	; (8007cb4 <HAL_DMA_Init+0x1c4>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d03b      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a31      	ldr	r2, [pc, #196]	; (8007cb8 <HAL_DMA_Init+0x1c8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d036      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a30      	ldr	r2, [pc, #192]	; (8007cbc <HAL_DMA_Init+0x1cc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d031      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a2e      	ldr	r2, [pc, #184]	; (8007cc0 <HAL_DMA_Init+0x1d0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d02c      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a2d      	ldr	r2, [pc, #180]	; (8007cc4 <HAL_DMA_Init+0x1d4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d027      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a2b      	ldr	r2, [pc, #172]	; (8007cc8 <HAL_DMA_Init+0x1d8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d022      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a2a      	ldr	r2, [pc, #168]	; (8007ccc <HAL_DMA_Init+0x1dc>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d01d      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a28      	ldr	r2, [pc, #160]	; (8007cd0 <HAL_DMA_Init+0x1e0>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d018      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a27      	ldr	r2, [pc, #156]	; (8007cd4 <HAL_DMA_Init+0x1e4>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d013      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a25      	ldr	r2, [pc, #148]	; (8007cd8 <HAL_DMA_Init+0x1e8>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00e      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a24      	ldr	r2, [pc, #144]	; (8007cdc <HAL_DMA_Init+0x1ec>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d009      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a22      	ldr	r2, [pc, #136]	; (8007ce0 <HAL_DMA_Init+0x1f0>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d004      	beq.n	8007c64 <HAL_DMA_Init+0x174>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a21      	ldr	r2, [pc, #132]	; (8007ce4 <HAL_DMA_Init+0x1f4>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d108      	bne.n	8007c76 <HAL_DMA_Init+0x186>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0201 	bic.w	r2, r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	e007      	b.n	8007c86 <HAL_DMA_Init+0x196>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0201 	bic.w	r2, r2, #1
 8007c84:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c86:	e02f      	b.n	8007ce8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c88:	f7fd fd92 	bl	80057b0 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	2b05      	cmp	r3, #5
 8007c94:	d928      	bls.n	8007ce8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e246      	b.n	8008136 <HAL_DMA_Init+0x646>
 8007ca8:	40020010 	.word	0x40020010
 8007cac:	40020028 	.word	0x40020028
 8007cb0:	40020040 	.word	0x40020040
 8007cb4:	40020058 	.word	0x40020058
 8007cb8:	40020070 	.word	0x40020070
 8007cbc:	40020088 	.word	0x40020088
 8007cc0:	400200a0 	.word	0x400200a0
 8007cc4:	400200b8 	.word	0x400200b8
 8007cc8:	40020410 	.word	0x40020410
 8007ccc:	40020428 	.word	0x40020428
 8007cd0:	40020440 	.word	0x40020440
 8007cd4:	40020458 	.word	0x40020458
 8007cd8:	40020470 	.word	0x40020470
 8007cdc:	40020488 	.word	0x40020488
 8007ce0:	400204a0 	.word	0x400204a0
 8007ce4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1c8      	bne.n	8007c88 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	4b83      	ldr	r3, [pc, #524]	; (8007f10 <HAL_DMA_Init+0x420>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007d0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d26:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d107      	bne.n	8007d4c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d44:	4313      	orrs	r3, r2
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007d4c:	4b71      	ldr	r3, [pc, #452]	; (8007f14 <HAL_DMA_Init+0x424>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	4b71      	ldr	r3, [pc, #452]	; (8007f18 <HAL_DMA_Init+0x428>)
 8007d52:	4013      	ands	r3, r2
 8007d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d58:	d328      	bcc.n	8007dac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b28      	cmp	r3, #40	; 0x28
 8007d60:	d903      	bls.n	8007d6a <HAL_DMA_Init+0x27a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2b2e      	cmp	r3, #46	; 0x2e
 8007d68:	d917      	bls.n	8007d9a <HAL_DMA_Init+0x2aa>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d70:	d903      	bls.n	8007d7a <HAL_DMA_Init+0x28a>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b42      	cmp	r3, #66	; 0x42
 8007d78:	d90f      	bls.n	8007d9a <HAL_DMA_Init+0x2aa>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	2b46      	cmp	r3, #70	; 0x46
 8007d80:	d903      	bls.n	8007d8a <HAL_DMA_Init+0x29a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	2b48      	cmp	r3, #72	; 0x48
 8007d88:	d907      	bls.n	8007d9a <HAL_DMA_Init+0x2aa>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	2b4e      	cmp	r3, #78	; 0x4e
 8007d90:	d905      	bls.n	8007d9e <HAL_DMA_Init+0x2ae>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b52      	cmp	r3, #82	; 0x52
 8007d98:	d801      	bhi.n	8007d9e <HAL_DMA_Init+0x2ae>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <HAL_DMA_Init+0x2b0>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007daa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f023 0307 	bic.w	r3, r3, #7
 8007dc2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d117      	bne.n	8007e06 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00e      	beq.n	8007e06 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f002 fb4d 	bl	800a488 <DMA_CheckFifoParam>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d008      	beq.n	8007e06 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2240      	movs	r2, #64	; 0x40
 8007df8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e197      	b.n	8008136 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f002 fa88 	bl	800a324 <DMA_CalcBaseAndBitshift>
 8007e14:	4603      	mov	r3, r0
 8007e16:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e1c:	f003 031f 	and.w	r3, r3, #31
 8007e20:	223f      	movs	r2, #63	; 0x3f
 8007e22:	409a      	lsls	r2, r3
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	609a      	str	r2, [r3, #8]
 8007e28:	e0cd      	b.n	8007fc6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a3b      	ldr	r2, [pc, #236]	; (8007f1c <HAL_DMA_Init+0x42c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d022      	beq.n	8007e7a <HAL_DMA_Init+0x38a>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a39      	ldr	r2, [pc, #228]	; (8007f20 <HAL_DMA_Init+0x430>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d01d      	beq.n	8007e7a <HAL_DMA_Init+0x38a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a38      	ldr	r2, [pc, #224]	; (8007f24 <HAL_DMA_Init+0x434>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d018      	beq.n	8007e7a <HAL_DMA_Init+0x38a>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a36      	ldr	r2, [pc, #216]	; (8007f28 <HAL_DMA_Init+0x438>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d013      	beq.n	8007e7a <HAL_DMA_Init+0x38a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a35      	ldr	r2, [pc, #212]	; (8007f2c <HAL_DMA_Init+0x43c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00e      	beq.n	8007e7a <HAL_DMA_Init+0x38a>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a33      	ldr	r2, [pc, #204]	; (8007f30 <HAL_DMA_Init+0x440>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d009      	beq.n	8007e7a <HAL_DMA_Init+0x38a>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a32      	ldr	r2, [pc, #200]	; (8007f34 <HAL_DMA_Init+0x444>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d004      	beq.n	8007e7a <HAL_DMA_Init+0x38a>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a30      	ldr	r2, [pc, #192]	; (8007f38 <HAL_DMA_Init+0x448>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d101      	bne.n	8007e7e <HAL_DMA_Init+0x38e>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e000      	b.n	8007e80 <HAL_DMA_Init+0x390>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 8097 	beq.w	8007fb4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a24      	ldr	r2, [pc, #144]	; (8007f1c <HAL_DMA_Init+0x42c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d021      	beq.n	8007ed4 <HAL_DMA_Init+0x3e4>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a22      	ldr	r2, [pc, #136]	; (8007f20 <HAL_DMA_Init+0x430>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d01c      	beq.n	8007ed4 <HAL_DMA_Init+0x3e4>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a21      	ldr	r2, [pc, #132]	; (8007f24 <HAL_DMA_Init+0x434>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d017      	beq.n	8007ed4 <HAL_DMA_Init+0x3e4>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a1f      	ldr	r2, [pc, #124]	; (8007f28 <HAL_DMA_Init+0x438>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d012      	beq.n	8007ed4 <HAL_DMA_Init+0x3e4>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a1e      	ldr	r2, [pc, #120]	; (8007f2c <HAL_DMA_Init+0x43c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00d      	beq.n	8007ed4 <HAL_DMA_Init+0x3e4>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a1c      	ldr	r2, [pc, #112]	; (8007f30 <HAL_DMA_Init+0x440>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d008      	beq.n	8007ed4 <HAL_DMA_Init+0x3e4>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a1b      	ldr	r2, [pc, #108]	; (8007f34 <HAL_DMA_Init+0x444>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d003      	beq.n	8007ed4 <HAL_DMA_Init+0x3e4>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a19      	ldr	r2, [pc, #100]	; (8007f38 <HAL_DMA_Init+0x448>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	4b12      	ldr	r3, [pc, #72]	; (8007f3c <HAL_DMA_Init+0x44c>)
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	d020      	beq.n	8007f40 <HAL_DMA_Init+0x450>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d102      	bne.n	8007f0c <HAL_DMA_Init+0x41c>
 8007f06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f0a:	e01a      	b.n	8007f42 <HAL_DMA_Init+0x452>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e018      	b.n	8007f42 <HAL_DMA_Init+0x452>
 8007f10:	fe10803f 	.word	0xfe10803f
 8007f14:	5c001000 	.word	0x5c001000
 8007f18:	ffff0000 	.word	0xffff0000
 8007f1c:	58025408 	.word	0x58025408
 8007f20:	5802541c 	.word	0x5802541c
 8007f24:	58025430 	.word	0x58025430
 8007f28:	58025444 	.word	0x58025444
 8007f2c:	58025458 	.word	0x58025458
 8007f30:	5802546c 	.word	0x5802546c
 8007f34:	58025480 	.word	0x58025480
 8007f38:	58025494 	.word	0x58025494
 8007f3c:	fffe000f 	.word	0xfffe000f
 8007f40:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	68d2      	ldr	r2, [r2, #12]
 8007f46:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007f48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007f50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007f58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007f60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007f68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007f70:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	4b6e      	ldr	r3, [pc, #440]	; (8008140 <HAL_DMA_Init+0x650>)
 8007f88:	4413      	add	r3, r2
 8007f8a:	4a6e      	ldr	r2, [pc, #440]	; (8008144 <HAL_DMA_Init+0x654>)
 8007f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f90:	091b      	lsrs	r3, r3, #4
 8007f92:	009a      	lsls	r2, r3, #2
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f002 f9c3 	bl	800a324 <DMA_CalcBaseAndBitshift>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa6:	f003 031f 	and.w	r3, r3, #31
 8007faa:	2201      	movs	r2, #1
 8007fac:	409a      	lsls	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	605a      	str	r2, [r3, #4]
 8007fb2:	e008      	b.n	8007fc6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2240      	movs	r2, #64	; 0x40
 8007fb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e0b7      	b.n	8008136 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a5f      	ldr	r2, [pc, #380]	; (8008148 <HAL_DMA_Init+0x658>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d072      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a5d      	ldr	r2, [pc, #372]	; (800814c <HAL_DMA_Init+0x65c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d06d      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a5c      	ldr	r2, [pc, #368]	; (8008150 <HAL_DMA_Init+0x660>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d068      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a5a      	ldr	r2, [pc, #360]	; (8008154 <HAL_DMA_Init+0x664>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d063      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a59      	ldr	r2, [pc, #356]	; (8008158 <HAL_DMA_Init+0x668>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d05e      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a57      	ldr	r2, [pc, #348]	; (800815c <HAL_DMA_Init+0x66c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d059      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a56      	ldr	r2, [pc, #344]	; (8008160 <HAL_DMA_Init+0x670>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d054      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a54      	ldr	r2, [pc, #336]	; (8008164 <HAL_DMA_Init+0x674>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d04f      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a53      	ldr	r2, [pc, #332]	; (8008168 <HAL_DMA_Init+0x678>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d04a      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a51      	ldr	r2, [pc, #324]	; (800816c <HAL_DMA_Init+0x67c>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d045      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a50      	ldr	r2, [pc, #320]	; (8008170 <HAL_DMA_Init+0x680>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d040      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a4e      	ldr	r2, [pc, #312]	; (8008174 <HAL_DMA_Init+0x684>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d03b      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a4d      	ldr	r2, [pc, #308]	; (8008178 <HAL_DMA_Init+0x688>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d036      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a4b      	ldr	r2, [pc, #300]	; (800817c <HAL_DMA_Init+0x68c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d031      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a4a      	ldr	r2, [pc, #296]	; (8008180 <HAL_DMA_Init+0x690>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d02c      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a48      	ldr	r2, [pc, #288]	; (8008184 <HAL_DMA_Init+0x694>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d027      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a47      	ldr	r2, [pc, #284]	; (8008188 <HAL_DMA_Init+0x698>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d022      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a45      	ldr	r2, [pc, #276]	; (800818c <HAL_DMA_Init+0x69c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d01d      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a44      	ldr	r2, [pc, #272]	; (8008190 <HAL_DMA_Init+0x6a0>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d018      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a42      	ldr	r2, [pc, #264]	; (8008194 <HAL_DMA_Init+0x6a4>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d013      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a41      	ldr	r2, [pc, #260]	; (8008198 <HAL_DMA_Init+0x6a8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d00e      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a3f      	ldr	r2, [pc, #252]	; (800819c <HAL_DMA_Init+0x6ac>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d009      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a3e      	ldr	r2, [pc, #248]	; (80081a0 <HAL_DMA_Init+0x6b0>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d004      	beq.n	80080b6 <HAL_DMA_Init+0x5c6>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a3c      	ldr	r2, [pc, #240]	; (80081a4 <HAL_DMA_Init+0x6b4>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d101      	bne.n	80080ba <HAL_DMA_Init+0x5ca>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e000      	b.n	80080bc <HAL_DMA_Init+0x5cc>
 80080ba:	2300      	movs	r3, #0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d032      	beq.n	8008126 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f002 fa5d 	bl	800a580 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	2b80      	cmp	r3, #128	; 0x80
 80080cc:	d102      	bne.n	80080d4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080dc:	b2d2      	uxtb	r2, r2
 80080de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80080e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d010      	beq.n	8008114 <HAL_DMA_Init+0x624>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	2b08      	cmp	r3, #8
 80080f8:	d80c      	bhi.n	8008114 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f002 fada 	bl	800a6b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008104:	2200      	movs	r2, #0
 8008106:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008110:	605a      	str	r2, [r3, #4]
 8008112:	e008      	b.n	8008126 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	a7fdabf8 	.word	0xa7fdabf8
 8008144:	cccccccd 	.word	0xcccccccd
 8008148:	40020010 	.word	0x40020010
 800814c:	40020028 	.word	0x40020028
 8008150:	40020040 	.word	0x40020040
 8008154:	40020058 	.word	0x40020058
 8008158:	40020070 	.word	0x40020070
 800815c:	40020088 	.word	0x40020088
 8008160:	400200a0 	.word	0x400200a0
 8008164:	400200b8 	.word	0x400200b8
 8008168:	40020410 	.word	0x40020410
 800816c:	40020428 	.word	0x40020428
 8008170:	40020440 	.word	0x40020440
 8008174:	40020458 	.word	0x40020458
 8008178:	40020470 	.word	0x40020470
 800817c:	40020488 	.word	0x40020488
 8008180:	400204a0 	.word	0x400204a0
 8008184:	400204b8 	.word	0x400204b8
 8008188:	58025408 	.word	0x58025408
 800818c:	5802541c 	.word	0x5802541c
 8008190:	58025430 	.word	0x58025430
 8008194:	58025444 	.word	0x58025444
 8008198:	58025458 	.word	0x58025458
 800819c:	5802546c 	.word	0x5802546c
 80081a0:	58025480 	.word	0x58025480
 80081a4:	58025494 	.word	0x58025494

080081a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e226      	b.n	8008612 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <HAL_DMA_Start_IT+0x2a>
 80081ce:	2302      	movs	r3, #2
 80081d0:	e21f      	b.n	8008612 <HAL_DMA_Start_IT+0x46a>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	f040 820a 	bne.w	80085fc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a68      	ldr	r2, [pc, #416]	; (800839c <HAL_DMA_Start_IT+0x1f4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d04a      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a66      	ldr	r2, [pc, #408]	; (80083a0 <HAL_DMA_Start_IT+0x1f8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d045      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a65      	ldr	r2, [pc, #404]	; (80083a4 <HAL_DMA_Start_IT+0x1fc>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d040      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a63      	ldr	r2, [pc, #396]	; (80083a8 <HAL_DMA_Start_IT+0x200>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d03b      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a62      	ldr	r2, [pc, #392]	; (80083ac <HAL_DMA_Start_IT+0x204>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d036      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a60      	ldr	r2, [pc, #384]	; (80083b0 <HAL_DMA_Start_IT+0x208>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d031      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a5f      	ldr	r2, [pc, #380]	; (80083b4 <HAL_DMA_Start_IT+0x20c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d02c      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a5d      	ldr	r2, [pc, #372]	; (80083b8 <HAL_DMA_Start_IT+0x210>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d027      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a5c      	ldr	r2, [pc, #368]	; (80083bc <HAL_DMA_Start_IT+0x214>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d022      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a5a      	ldr	r2, [pc, #360]	; (80083c0 <HAL_DMA_Start_IT+0x218>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d01d      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a59      	ldr	r2, [pc, #356]	; (80083c4 <HAL_DMA_Start_IT+0x21c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d018      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a57      	ldr	r2, [pc, #348]	; (80083c8 <HAL_DMA_Start_IT+0x220>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d013      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a56      	ldr	r2, [pc, #344]	; (80083cc <HAL_DMA_Start_IT+0x224>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00e      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a54      	ldr	r2, [pc, #336]	; (80083d0 <HAL_DMA_Start_IT+0x228>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d009      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a53      	ldr	r2, [pc, #332]	; (80083d4 <HAL_DMA_Start_IT+0x22c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d004      	beq.n	8008296 <HAL_DMA_Start_IT+0xee>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a51      	ldr	r2, [pc, #324]	; (80083d8 <HAL_DMA_Start_IT+0x230>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d108      	bne.n	80082a8 <HAL_DMA_Start_IT+0x100>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0201 	bic.w	r2, r2, #1
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	e007      	b.n	80082b8 <HAL_DMA_Start_IT+0x110>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0201 	bic.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	68b9      	ldr	r1, [r7, #8]
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f001 fe84 	bl	8009fcc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a34      	ldr	r2, [pc, #208]	; (800839c <HAL_DMA_Start_IT+0x1f4>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d04a      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a33      	ldr	r2, [pc, #204]	; (80083a0 <HAL_DMA_Start_IT+0x1f8>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d045      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a31      	ldr	r2, [pc, #196]	; (80083a4 <HAL_DMA_Start_IT+0x1fc>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d040      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a30      	ldr	r2, [pc, #192]	; (80083a8 <HAL_DMA_Start_IT+0x200>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d03b      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a2e      	ldr	r2, [pc, #184]	; (80083ac <HAL_DMA_Start_IT+0x204>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d036      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a2d      	ldr	r2, [pc, #180]	; (80083b0 <HAL_DMA_Start_IT+0x208>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d031      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a2b      	ldr	r2, [pc, #172]	; (80083b4 <HAL_DMA_Start_IT+0x20c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d02c      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a2a      	ldr	r2, [pc, #168]	; (80083b8 <HAL_DMA_Start_IT+0x210>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d027      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a28      	ldr	r2, [pc, #160]	; (80083bc <HAL_DMA_Start_IT+0x214>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d022      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a27      	ldr	r2, [pc, #156]	; (80083c0 <HAL_DMA_Start_IT+0x218>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d01d      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a25      	ldr	r2, [pc, #148]	; (80083c4 <HAL_DMA_Start_IT+0x21c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d018      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a24      	ldr	r2, [pc, #144]	; (80083c8 <HAL_DMA_Start_IT+0x220>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d013      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a22      	ldr	r2, [pc, #136]	; (80083cc <HAL_DMA_Start_IT+0x224>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00e      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a21      	ldr	r2, [pc, #132]	; (80083d0 <HAL_DMA_Start_IT+0x228>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d009      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1f      	ldr	r2, [pc, #124]	; (80083d4 <HAL_DMA_Start_IT+0x22c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d004      	beq.n	8008364 <HAL_DMA_Start_IT+0x1bc>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1e      	ldr	r2, [pc, #120]	; (80083d8 <HAL_DMA_Start_IT+0x230>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d101      	bne.n	8008368 <HAL_DMA_Start_IT+0x1c0>
 8008364:	2301      	movs	r3, #1
 8008366:	e000      	b.n	800836a <HAL_DMA_Start_IT+0x1c2>
 8008368:	2300      	movs	r3, #0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d036      	beq.n	80083dc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f023 021e 	bic.w	r2, r3, #30
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f042 0216 	orr.w	r2, r2, #22
 8008380:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	d03e      	beq.n	8008408 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f042 0208 	orr.w	r2, r2, #8
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	e035      	b.n	8008408 <HAL_DMA_Start_IT+0x260>
 800839c:	40020010 	.word	0x40020010
 80083a0:	40020028 	.word	0x40020028
 80083a4:	40020040 	.word	0x40020040
 80083a8:	40020058 	.word	0x40020058
 80083ac:	40020070 	.word	0x40020070
 80083b0:	40020088 	.word	0x40020088
 80083b4:	400200a0 	.word	0x400200a0
 80083b8:	400200b8 	.word	0x400200b8
 80083bc:	40020410 	.word	0x40020410
 80083c0:	40020428 	.word	0x40020428
 80083c4:	40020440 	.word	0x40020440
 80083c8:	40020458 	.word	0x40020458
 80083cc:	40020470 	.word	0x40020470
 80083d0:	40020488 	.word	0x40020488
 80083d4:	400204a0 	.word	0x400204a0
 80083d8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f023 020e 	bic.w	r2, r3, #14
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 020a 	orr.w	r2, r2, #10
 80083ee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d007      	beq.n	8008408 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0204 	orr.w	r2, r2, #4
 8008406:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a83      	ldr	r2, [pc, #524]	; (800861c <HAL_DMA_Start_IT+0x474>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d072      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a82      	ldr	r2, [pc, #520]	; (8008620 <HAL_DMA_Start_IT+0x478>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d06d      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a80      	ldr	r2, [pc, #512]	; (8008624 <HAL_DMA_Start_IT+0x47c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d068      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a7f      	ldr	r2, [pc, #508]	; (8008628 <HAL_DMA_Start_IT+0x480>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d063      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a7d      	ldr	r2, [pc, #500]	; (800862c <HAL_DMA_Start_IT+0x484>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d05e      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a7c      	ldr	r2, [pc, #496]	; (8008630 <HAL_DMA_Start_IT+0x488>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d059      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a7a      	ldr	r2, [pc, #488]	; (8008634 <HAL_DMA_Start_IT+0x48c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d054      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a79      	ldr	r2, [pc, #484]	; (8008638 <HAL_DMA_Start_IT+0x490>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d04f      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a77      	ldr	r2, [pc, #476]	; (800863c <HAL_DMA_Start_IT+0x494>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d04a      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a76      	ldr	r2, [pc, #472]	; (8008640 <HAL_DMA_Start_IT+0x498>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d045      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a74      	ldr	r2, [pc, #464]	; (8008644 <HAL_DMA_Start_IT+0x49c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d040      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a73      	ldr	r2, [pc, #460]	; (8008648 <HAL_DMA_Start_IT+0x4a0>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d03b      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a71      	ldr	r2, [pc, #452]	; (800864c <HAL_DMA_Start_IT+0x4a4>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d036      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a70      	ldr	r2, [pc, #448]	; (8008650 <HAL_DMA_Start_IT+0x4a8>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d031      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a6e      	ldr	r2, [pc, #440]	; (8008654 <HAL_DMA_Start_IT+0x4ac>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d02c      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a6d      	ldr	r2, [pc, #436]	; (8008658 <HAL_DMA_Start_IT+0x4b0>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d027      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a6b      	ldr	r2, [pc, #428]	; (800865c <HAL_DMA_Start_IT+0x4b4>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d022      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a6a      	ldr	r2, [pc, #424]	; (8008660 <HAL_DMA_Start_IT+0x4b8>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d01d      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a68      	ldr	r2, [pc, #416]	; (8008664 <HAL_DMA_Start_IT+0x4bc>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d018      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a67      	ldr	r2, [pc, #412]	; (8008668 <HAL_DMA_Start_IT+0x4c0>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d013      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a65      	ldr	r2, [pc, #404]	; (800866c <HAL_DMA_Start_IT+0x4c4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00e      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a64      	ldr	r2, [pc, #400]	; (8008670 <HAL_DMA_Start_IT+0x4c8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d009      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a62      	ldr	r2, [pc, #392]	; (8008674 <HAL_DMA_Start_IT+0x4cc>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d004      	beq.n	80084f8 <HAL_DMA_Start_IT+0x350>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a61      	ldr	r2, [pc, #388]	; (8008678 <HAL_DMA_Start_IT+0x4d0>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d101      	bne.n	80084fc <HAL_DMA_Start_IT+0x354>
 80084f8:	2301      	movs	r3, #1
 80084fa:	e000      	b.n	80084fe <HAL_DMA_Start_IT+0x356>
 80084fc:	2300      	movs	r3, #0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d01a      	beq.n	8008538 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d007      	beq.n	8008520 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800851a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800851e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008536:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a37      	ldr	r2, [pc, #220]	; (800861c <HAL_DMA_Start_IT+0x474>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d04a      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a36      	ldr	r2, [pc, #216]	; (8008620 <HAL_DMA_Start_IT+0x478>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d045      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a34      	ldr	r2, [pc, #208]	; (8008624 <HAL_DMA_Start_IT+0x47c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d040      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a33      	ldr	r2, [pc, #204]	; (8008628 <HAL_DMA_Start_IT+0x480>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d03b      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a31      	ldr	r2, [pc, #196]	; (800862c <HAL_DMA_Start_IT+0x484>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d036      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a30      	ldr	r2, [pc, #192]	; (8008630 <HAL_DMA_Start_IT+0x488>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d031      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a2e      	ldr	r2, [pc, #184]	; (8008634 <HAL_DMA_Start_IT+0x48c>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d02c      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a2d      	ldr	r2, [pc, #180]	; (8008638 <HAL_DMA_Start_IT+0x490>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d027      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a2b      	ldr	r2, [pc, #172]	; (800863c <HAL_DMA_Start_IT+0x494>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d022      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a2a      	ldr	r2, [pc, #168]	; (8008640 <HAL_DMA_Start_IT+0x498>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d01d      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a28      	ldr	r2, [pc, #160]	; (8008644 <HAL_DMA_Start_IT+0x49c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d018      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a27      	ldr	r2, [pc, #156]	; (8008648 <HAL_DMA_Start_IT+0x4a0>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d013      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a25      	ldr	r2, [pc, #148]	; (800864c <HAL_DMA_Start_IT+0x4a4>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d00e      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a24      	ldr	r2, [pc, #144]	; (8008650 <HAL_DMA_Start_IT+0x4a8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d009      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a22      	ldr	r2, [pc, #136]	; (8008654 <HAL_DMA_Start_IT+0x4ac>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d004      	beq.n	80085d8 <HAL_DMA_Start_IT+0x430>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a21      	ldr	r2, [pc, #132]	; (8008658 <HAL_DMA_Start_IT+0x4b0>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d108      	bne.n	80085ea <HAL_DMA_Start_IT+0x442>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f042 0201 	orr.w	r2, r2, #1
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	e012      	b.n	8008610 <HAL_DMA_Start_IT+0x468>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f042 0201 	orr.w	r2, r2, #1
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	e009      	b.n	8008610 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008602:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008610:	7dfb      	ldrb	r3, [r7, #23]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	40020010 	.word	0x40020010
 8008620:	40020028 	.word	0x40020028
 8008624:	40020040 	.word	0x40020040
 8008628:	40020058 	.word	0x40020058
 800862c:	40020070 	.word	0x40020070
 8008630:	40020088 	.word	0x40020088
 8008634:	400200a0 	.word	0x400200a0
 8008638:	400200b8 	.word	0x400200b8
 800863c:	40020410 	.word	0x40020410
 8008640:	40020428 	.word	0x40020428
 8008644:	40020440 	.word	0x40020440
 8008648:	40020458 	.word	0x40020458
 800864c:	40020470 	.word	0x40020470
 8008650:	40020488 	.word	0x40020488
 8008654:	400204a0 	.word	0x400204a0
 8008658:	400204b8 	.word	0x400204b8
 800865c:	58025408 	.word	0x58025408
 8008660:	5802541c 	.word	0x5802541c
 8008664:	58025430 	.word	0x58025430
 8008668:	58025444 	.word	0x58025444
 800866c:	58025458 	.word	0x58025458
 8008670:	5802546c 	.word	0x5802546c
 8008674:	58025480 	.word	0x58025480
 8008678:	58025494 	.word	0x58025494

0800867c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008684:	f7fd f894 	bl	80057b0 <HAL_GetTick>
 8008688:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e2dc      	b.n	8008c4e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d008      	beq.n	80086b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2280      	movs	r2, #128	; 0x80
 80086a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e2cd      	b.n	8008c4e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a76      	ldr	r2, [pc, #472]	; (8008890 <HAL_DMA_Abort+0x214>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d04a      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a74      	ldr	r2, [pc, #464]	; (8008894 <HAL_DMA_Abort+0x218>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d045      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a73      	ldr	r2, [pc, #460]	; (8008898 <HAL_DMA_Abort+0x21c>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d040      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a71      	ldr	r2, [pc, #452]	; (800889c <HAL_DMA_Abort+0x220>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d03b      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a70      	ldr	r2, [pc, #448]	; (80088a0 <HAL_DMA_Abort+0x224>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d036      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a6e      	ldr	r2, [pc, #440]	; (80088a4 <HAL_DMA_Abort+0x228>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d031      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a6d      	ldr	r2, [pc, #436]	; (80088a8 <HAL_DMA_Abort+0x22c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d02c      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a6b      	ldr	r2, [pc, #428]	; (80088ac <HAL_DMA_Abort+0x230>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d027      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a6a      	ldr	r2, [pc, #424]	; (80088b0 <HAL_DMA_Abort+0x234>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d022      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a68      	ldr	r2, [pc, #416]	; (80088b4 <HAL_DMA_Abort+0x238>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d01d      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a67      	ldr	r2, [pc, #412]	; (80088b8 <HAL_DMA_Abort+0x23c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d018      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a65      	ldr	r2, [pc, #404]	; (80088bc <HAL_DMA_Abort+0x240>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d013      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a64      	ldr	r2, [pc, #400]	; (80088c0 <HAL_DMA_Abort+0x244>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00e      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a62      	ldr	r2, [pc, #392]	; (80088c4 <HAL_DMA_Abort+0x248>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d009      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a61      	ldr	r2, [pc, #388]	; (80088c8 <HAL_DMA_Abort+0x24c>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d004      	beq.n	8008752 <HAL_DMA_Abort+0xd6>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a5f      	ldr	r2, [pc, #380]	; (80088cc <HAL_DMA_Abort+0x250>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d101      	bne.n	8008756 <HAL_DMA_Abort+0xda>
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <HAL_DMA_Abort+0xdc>
 8008756:	2300      	movs	r3, #0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d013      	beq.n	8008784 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 021e 	bic.w	r2, r2, #30
 800876a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	695a      	ldr	r2, [r3, #20]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800877a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	617b      	str	r3, [r7, #20]
 8008782:	e00a      	b.n	800879a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 020e 	bic.w	r2, r2, #14
 8008792:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a3c      	ldr	r2, [pc, #240]	; (8008890 <HAL_DMA_Abort+0x214>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d072      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a3a      	ldr	r2, [pc, #232]	; (8008894 <HAL_DMA_Abort+0x218>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d06d      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a39      	ldr	r2, [pc, #228]	; (8008898 <HAL_DMA_Abort+0x21c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d068      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a37      	ldr	r2, [pc, #220]	; (800889c <HAL_DMA_Abort+0x220>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d063      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a36      	ldr	r2, [pc, #216]	; (80088a0 <HAL_DMA_Abort+0x224>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d05e      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a34      	ldr	r2, [pc, #208]	; (80088a4 <HAL_DMA_Abort+0x228>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d059      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a33      	ldr	r2, [pc, #204]	; (80088a8 <HAL_DMA_Abort+0x22c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d054      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a31      	ldr	r2, [pc, #196]	; (80088ac <HAL_DMA_Abort+0x230>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d04f      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a30      	ldr	r2, [pc, #192]	; (80088b0 <HAL_DMA_Abort+0x234>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d04a      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a2e      	ldr	r2, [pc, #184]	; (80088b4 <HAL_DMA_Abort+0x238>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d045      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a2d      	ldr	r2, [pc, #180]	; (80088b8 <HAL_DMA_Abort+0x23c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d040      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a2b      	ldr	r2, [pc, #172]	; (80088bc <HAL_DMA_Abort+0x240>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d03b      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <HAL_DMA_Abort+0x244>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d036      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a28      	ldr	r2, [pc, #160]	; (80088c4 <HAL_DMA_Abort+0x248>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d031      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a27      	ldr	r2, [pc, #156]	; (80088c8 <HAL_DMA_Abort+0x24c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d02c      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a25      	ldr	r2, [pc, #148]	; (80088cc <HAL_DMA_Abort+0x250>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d027      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a24      	ldr	r2, [pc, #144]	; (80088d0 <HAL_DMA_Abort+0x254>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d022      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a22      	ldr	r2, [pc, #136]	; (80088d4 <HAL_DMA_Abort+0x258>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d01d      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a21      	ldr	r2, [pc, #132]	; (80088d8 <HAL_DMA_Abort+0x25c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d018      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a1f      	ldr	r2, [pc, #124]	; (80088dc <HAL_DMA_Abort+0x260>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d013      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a1e      	ldr	r2, [pc, #120]	; (80088e0 <HAL_DMA_Abort+0x264>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d00e      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a1c      	ldr	r2, [pc, #112]	; (80088e4 <HAL_DMA_Abort+0x268>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d009      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a1b      	ldr	r2, [pc, #108]	; (80088e8 <HAL_DMA_Abort+0x26c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d004      	beq.n	800888a <HAL_DMA_Abort+0x20e>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a19      	ldr	r2, [pc, #100]	; (80088ec <HAL_DMA_Abort+0x270>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d132      	bne.n	80088f0 <HAL_DMA_Abort+0x274>
 800888a:	2301      	movs	r3, #1
 800888c:	e031      	b.n	80088f2 <HAL_DMA_Abort+0x276>
 800888e:	bf00      	nop
 8008890:	40020010 	.word	0x40020010
 8008894:	40020028 	.word	0x40020028
 8008898:	40020040 	.word	0x40020040
 800889c:	40020058 	.word	0x40020058
 80088a0:	40020070 	.word	0x40020070
 80088a4:	40020088 	.word	0x40020088
 80088a8:	400200a0 	.word	0x400200a0
 80088ac:	400200b8 	.word	0x400200b8
 80088b0:	40020410 	.word	0x40020410
 80088b4:	40020428 	.word	0x40020428
 80088b8:	40020440 	.word	0x40020440
 80088bc:	40020458 	.word	0x40020458
 80088c0:	40020470 	.word	0x40020470
 80088c4:	40020488 	.word	0x40020488
 80088c8:	400204a0 	.word	0x400204a0
 80088cc:	400204b8 	.word	0x400204b8
 80088d0:	58025408 	.word	0x58025408
 80088d4:	5802541c 	.word	0x5802541c
 80088d8:	58025430 	.word	0x58025430
 80088dc:	58025444 	.word	0x58025444
 80088e0:	58025458 	.word	0x58025458
 80088e4:	5802546c 	.word	0x5802546c
 80088e8:	58025480 	.word	0x58025480
 80088ec:	58025494 	.word	0x58025494
 80088f0:	2300      	movs	r3, #0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008904:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a6d      	ldr	r2, [pc, #436]	; (8008ac0 <HAL_DMA_Abort+0x444>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d04a      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a6b      	ldr	r2, [pc, #428]	; (8008ac4 <HAL_DMA_Abort+0x448>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d045      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a6a      	ldr	r2, [pc, #424]	; (8008ac8 <HAL_DMA_Abort+0x44c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d040      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a68      	ldr	r2, [pc, #416]	; (8008acc <HAL_DMA_Abort+0x450>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d03b      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a67      	ldr	r2, [pc, #412]	; (8008ad0 <HAL_DMA_Abort+0x454>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d036      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a65      	ldr	r2, [pc, #404]	; (8008ad4 <HAL_DMA_Abort+0x458>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d031      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a64      	ldr	r2, [pc, #400]	; (8008ad8 <HAL_DMA_Abort+0x45c>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d02c      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a62      	ldr	r2, [pc, #392]	; (8008adc <HAL_DMA_Abort+0x460>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d027      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a61      	ldr	r2, [pc, #388]	; (8008ae0 <HAL_DMA_Abort+0x464>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d022      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a5f      	ldr	r2, [pc, #380]	; (8008ae4 <HAL_DMA_Abort+0x468>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d01d      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a5e      	ldr	r2, [pc, #376]	; (8008ae8 <HAL_DMA_Abort+0x46c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d018      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a5c      	ldr	r2, [pc, #368]	; (8008aec <HAL_DMA_Abort+0x470>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a5b      	ldr	r2, [pc, #364]	; (8008af0 <HAL_DMA_Abort+0x474>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00e      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a59      	ldr	r2, [pc, #356]	; (8008af4 <HAL_DMA_Abort+0x478>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d009      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a58      	ldr	r2, [pc, #352]	; (8008af8 <HAL_DMA_Abort+0x47c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d004      	beq.n	80089a6 <HAL_DMA_Abort+0x32a>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a56      	ldr	r2, [pc, #344]	; (8008afc <HAL_DMA_Abort+0x480>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d108      	bne.n	80089b8 <HAL_DMA_Abort+0x33c>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f022 0201 	bic.w	r2, r2, #1
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	e007      	b.n	80089c8 <HAL_DMA_Abort+0x34c>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 0201 	bic.w	r2, r2, #1
 80089c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80089c8:	e013      	b.n	80089f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80089ca:	f7fc fef1 	bl	80057b0 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b05      	cmp	r3, #5
 80089d6:	d90c      	bls.n	80089f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2220      	movs	r2, #32
 80089dc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2203      	movs	r2, #3
 80089e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e12d      	b.n	8008c4e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e5      	bne.n	80089ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a2f      	ldr	r2, [pc, #188]	; (8008ac0 <HAL_DMA_Abort+0x444>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d04a      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a2d      	ldr	r2, [pc, #180]	; (8008ac4 <HAL_DMA_Abort+0x448>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d045      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a2c      	ldr	r2, [pc, #176]	; (8008ac8 <HAL_DMA_Abort+0x44c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d040      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a2a      	ldr	r2, [pc, #168]	; (8008acc <HAL_DMA_Abort+0x450>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d03b      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a29      	ldr	r2, [pc, #164]	; (8008ad0 <HAL_DMA_Abort+0x454>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d036      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a27      	ldr	r2, [pc, #156]	; (8008ad4 <HAL_DMA_Abort+0x458>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d031      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a26      	ldr	r2, [pc, #152]	; (8008ad8 <HAL_DMA_Abort+0x45c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d02c      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a24      	ldr	r2, [pc, #144]	; (8008adc <HAL_DMA_Abort+0x460>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d027      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a23      	ldr	r2, [pc, #140]	; (8008ae0 <HAL_DMA_Abort+0x464>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d022      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a21      	ldr	r2, [pc, #132]	; (8008ae4 <HAL_DMA_Abort+0x468>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d01d      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a20      	ldr	r2, [pc, #128]	; (8008ae8 <HAL_DMA_Abort+0x46c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d018      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a1e      	ldr	r2, [pc, #120]	; (8008aec <HAL_DMA_Abort+0x470>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d013      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a1d      	ldr	r2, [pc, #116]	; (8008af0 <HAL_DMA_Abort+0x474>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d00e      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a1b      	ldr	r2, [pc, #108]	; (8008af4 <HAL_DMA_Abort+0x478>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d009      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a1a      	ldr	r2, [pc, #104]	; (8008af8 <HAL_DMA_Abort+0x47c>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d004      	beq.n	8008a9e <HAL_DMA_Abort+0x422>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a18      	ldr	r2, [pc, #96]	; (8008afc <HAL_DMA_Abort+0x480>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d101      	bne.n	8008aa2 <HAL_DMA_Abort+0x426>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e000      	b.n	8008aa4 <HAL_DMA_Abort+0x428>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d02b      	beq.n	8008b00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab2:	f003 031f 	and.w	r3, r3, #31
 8008ab6:	223f      	movs	r2, #63	; 0x3f
 8008ab8:	409a      	lsls	r2, r3
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	609a      	str	r2, [r3, #8]
 8008abe:	e02a      	b.n	8008b16 <HAL_DMA_Abort+0x49a>
 8008ac0:	40020010 	.word	0x40020010
 8008ac4:	40020028 	.word	0x40020028
 8008ac8:	40020040 	.word	0x40020040
 8008acc:	40020058 	.word	0x40020058
 8008ad0:	40020070 	.word	0x40020070
 8008ad4:	40020088 	.word	0x40020088
 8008ad8:	400200a0 	.word	0x400200a0
 8008adc:	400200b8 	.word	0x400200b8
 8008ae0:	40020410 	.word	0x40020410
 8008ae4:	40020428 	.word	0x40020428
 8008ae8:	40020440 	.word	0x40020440
 8008aec:	40020458 	.word	0x40020458
 8008af0:	40020470 	.word	0x40020470
 8008af4:	40020488 	.word	0x40020488
 8008af8:	400204a0 	.word	0x400204a0
 8008afc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0a:	f003 031f 	and.w	r3, r3, #31
 8008b0e:	2201      	movs	r2, #1
 8008b10:	409a      	lsls	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a4f      	ldr	r2, [pc, #316]	; (8008c58 <HAL_DMA_Abort+0x5dc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d072      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a4d      	ldr	r2, [pc, #308]	; (8008c5c <HAL_DMA_Abort+0x5e0>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d06d      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a4c      	ldr	r2, [pc, #304]	; (8008c60 <HAL_DMA_Abort+0x5e4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d068      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a4a      	ldr	r2, [pc, #296]	; (8008c64 <HAL_DMA_Abort+0x5e8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d063      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a49      	ldr	r2, [pc, #292]	; (8008c68 <HAL_DMA_Abort+0x5ec>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d05e      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a47      	ldr	r2, [pc, #284]	; (8008c6c <HAL_DMA_Abort+0x5f0>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d059      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a46      	ldr	r2, [pc, #280]	; (8008c70 <HAL_DMA_Abort+0x5f4>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d054      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a44      	ldr	r2, [pc, #272]	; (8008c74 <HAL_DMA_Abort+0x5f8>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d04f      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a43      	ldr	r2, [pc, #268]	; (8008c78 <HAL_DMA_Abort+0x5fc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d04a      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a41      	ldr	r2, [pc, #260]	; (8008c7c <HAL_DMA_Abort+0x600>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d045      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a40      	ldr	r2, [pc, #256]	; (8008c80 <HAL_DMA_Abort+0x604>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d040      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a3e      	ldr	r2, [pc, #248]	; (8008c84 <HAL_DMA_Abort+0x608>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d03b      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a3d      	ldr	r2, [pc, #244]	; (8008c88 <HAL_DMA_Abort+0x60c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d036      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a3b      	ldr	r2, [pc, #236]	; (8008c8c <HAL_DMA_Abort+0x610>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d031      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a3a      	ldr	r2, [pc, #232]	; (8008c90 <HAL_DMA_Abort+0x614>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d02c      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a38      	ldr	r2, [pc, #224]	; (8008c94 <HAL_DMA_Abort+0x618>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d027      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a37      	ldr	r2, [pc, #220]	; (8008c98 <HAL_DMA_Abort+0x61c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d022      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a35      	ldr	r2, [pc, #212]	; (8008c9c <HAL_DMA_Abort+0x620>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d01d      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a34      	ldr	r2, [pc, #208]	; (8008ca0 <HAL_DMA_Abort+0x624>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d018      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a32      	ldr	r2, [pc, #200]	; (8008ca4 <HAL_DMA_Abort+0x628>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d013      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a31      	ldr	r2, [pc, #196]	; (8008ca8 <HAL_DMA_Abort+0x62c>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d00e      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a2f      	ldr	r2, [pc, #188]	; (8008cac <HAL_DMA_Abort+0x630>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d009      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a2e      	ldr	r2, [pc, #184]	; (8008cb0 <HAL_DMA_Abort+0x634>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d004      	beq.n	8008c06 <HAL_DMA_Abort+0x58a>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a2c      	ldr	r2, [pc, #176]	; (8008cb4 <HAL_DMA_Abort+0x638>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d101      	bne.n	8008c0a <HAL_DMA_Abort+0x58e>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e000      	b.n	8008c0c <HAL_DMA_Abort+0x590>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d015      	beq.n	8008c3c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008c18:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00c      	beq.n	8008c3c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c30:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008c3a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	40020010 	.word	0x40020010
 8008c5c:	40020028 	.word	0x40020028
 8008c60:	40020040 	.word	0x40020040
 8008c64:	40020058 	.word	0x40020058
 8008c68:	40020070 	.word	0x40020070
 8008c6c:	40020088 	.word	0x40020088
 8008c70:	400200a0 	.word	0x400200a0
 8008c74:	400200b8 	.word	0x400200b8
 8008c78:	40020410 	.word	0x40020410
 8008c7c:	40020428 	.word	0x40020428
 8008c80:	40020440 	.word	0x40020440
 8008c84:	40020458 	.word	0x40020458
 8008c88:	40020470 	.word	0x40020470
 8008c8c:	40020488 	.word	0x40020488
 8008c90:	400204a0 	.word	0x400204a0
 8008c94:	400204b8 	.word	0x400204b8
 8008c98:	58025408 	.word	0x58025408
 8008c9c:	5802541c 	.word	0x5802541c
 8008ca0:	58025430 	.word	0x58025430
 8008ca4:	58025444 	.word	0x58025444
 8008ca8:	58025458 	.word	0x58025458
 8008cac:	5802546c 	.word	0x5802546c
 8008cb0:	58025480 	.word	0x58025480
 8008cb4:	58025494 	.word	0x58025494

08008cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e237      	b.n	800913a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d004      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2280      	movs	r2, #128	; 0x80
 8008cda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e22c      	b.n	800913a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a5c      	ldr	r2, [pc, #368]	; (8008e58 <HAL_DMA_Abort_IT+0x1a0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d04a      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a5b      	ldr	r2, [pc, #364]	; (8008e5c <HAL_DMA_Abort_IT+0x1a4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d045      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a59      	ldr	r2, [pc, #356]	; (8008e60 <HAL_DMA_Abort_IT+0x1a8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d040      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a58      	ldr	r2, [pc, #352]	; (8008e64 <HAL_DMA_Abort_IT+0x1ac>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d03b      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a56      	ldr	r2, [pc, #344]	; (8008e68 <HAL_DMA_Abort_IT+0x1b0>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d036      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a55      	ldr	r2, [pc, #340]	; (8008e6c <HAL_DMA_Abort_IT+0x1b4>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d031      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a53      	ldr	r2, [pc, #332]	; (8008e70 <HAL_DMA_Abort_IT+0x1b8>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d02c      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a52      	ldr	r2, [pc, #328]	; (8008e74 <HAL_DMA_Abort_IT+0x1bc>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d027      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a50      	ldr	r2, [pc, #320]	; (8008e78 <HAL_DMA_Abort_IT+0x1c0>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d022      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a4f      	ldr	r2, [pc, #316]	; (8008e7c <HAL_DMA_Abort_IT+0x1c4>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d01d      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a4d      	ldr	r2, [pc, #308]	; (8008e80 <HAL_DMA_Abort_IT+0x1c8>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d018      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a4c      	ldr	r2, [pc, #304]	; (8008e84 <HAL_DMA_Abort_IT+0x1cc>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d013      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a4a      	ldr	r2, [pc, #296]	; (8008e88 <HAL_DMA_Abort_IT+0x1d0>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00e      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a49      	ldr	r2, [pc, #292]	; (8008e8c <HAL_DMA_Abort_IT+0x1d4>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d009      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a47      	ldr	r2, [pc, #284]	; (8008e90 <HAL_DMA_Abort_IT+0x1d8>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d004      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xc8>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a46      	ldr	r2, [pc, #280]	; (8008e94 <HAL_DMA_Abort_IT+0x1dc>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d101      	bne.n	8008d84 <HAL_DMA_Abort_IT+0xcc>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e000      	b.n	8008d86 <HAL_DMA_Abort_IT+0xce>
 8008d84:	2300      	movs	r3, #0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 8086 	beq.w	8008e98 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2204      	movs	r2, #4
 8008d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a2f      	ldr	r2, [pc, #188]	; (8008e58 <HAL_DMA_Abort_IT+0x1a0>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d04a      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a2e      	ldr	r2, [pc, #184]	; (8008e5c <HAL_DMA_Abort_IT+0x1a4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d045      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a2c      	ldr	r2, [pc, #176]	; (8008e60 <HAL_DMA_Abort_IT+0x1a8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d040      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a2b      	ldr	r2, [pc, #172]	; (8008e64 <HAL_DMA_Abort_IT+0x1ac>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d03b      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a29      	ldr	r2, [pc, #164]	; (8008e68 <HAL_DMA_Abort_IT+0x1b0>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d036      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a28      	ldr	r2, [pc, #160]	; (8008e6c <HAL_DMA_Abort_IT+0x1b4>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d031      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a26      	ldr	r2, [pc, #152]	; (8008e70 <HAL_DMA_Abort_IT+0x1b8>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d02c      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a25      	ldr	r2, [pc, #148]	; (8008e74 <HAL_DMA_Abort_IT+0x1bc>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d027      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a23      	ldr	r2, [pc, #140]	; (8008e78 <HAL_DMA_Abort_IT+0x1c0>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d022      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a22      	ldr	r2, [pc, #136]	; (8008e7c <HAL_DMA_Abort_IT+0x1c4>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d01d      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a20      	ldr	r2, [pc, #128]	; (8008e80 <HAL_DMA_Abort_IT+0x1c8>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d018      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a1f      	ldr	r2, [pc, #124]	; (8008e84 <HAL_DMA_Abort_IT+0x1cc>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d013      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a1d      	ldr	r2, [pc, #116]	; (8008e88 <HAL_DMA_Abort_IT+0x1d0>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d00e      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a1c      	ldr	r2, [pc, #112]	; (8008e8c <HAL_DMA_Abort_IT+0x1d4>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d009      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a1a      	ldr	r2, [pc, #104]	; (8008e90 <HAL_DMA_Abort_IT+0x1d8>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d004      	beq.n	8008e34 <HAL_DMA_Abort_IT+0x17c>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a19      	ldr	r2, [pc, #100]	; (8008e94 <HAL_DMA_Abort_IT+0x1dc>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d108      	bne.n	8008e46 <HAL_DMA_Abort_IT+0x18e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0201 	bic.w	r2, r2, #1
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	e178      	b.n	8009138 <HAL_DMA_Abort_IT+0x480>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 0201 	bic.w	r2, r2, #1
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	e16f      	b.n	8009138 <HAL_DMA_Abort_IT+0x480>
 8008e58:	40020010 	.word	0x40020010
 8008e5c:	40020028 	.word	0x40020028
 8008e60:	40020040 	.word	0x40020040
 8008e64:	40020058 	.word	0x40020058
 8008e68:	40020070 	.word	0x40020070
 8008e6c:	40020088 	.word	0x40020088
 8008e70:	400200a0 	.word	0x400200a0
 8008e74:	400200b8 	.word	0x400200b8
 8008e78:	40020410 	.word	0x40020410
 8008e7c:	40020428 	.word	0x40020428
 8008e80:	40020440 	.word	0x40020440
 8008e84:	40020458 	.word	0x40020458
 8008e88:	40020470 	.word	0x40020470
 8008e8c:	40020488 	.word	0x40020488
 8008e90:	400204a0 	.word	0x400204a0
 8008e94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 020e 	bic.w	r2, r2, #14
 8008ea6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a6c      	ldr	r2, [pc, #432]	; (8009060 <HAL_DMA_Abort_IT+0x3a8>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d04a      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a6b      	ldr	r2, [pc, #428]	; (8009064 <HAL_DMA_Abort_IT+0x3ac>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d045      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a69      	ldr	r2, [pc, #420]	; (8009068 <HAL_DMA_Abort_IT+0x3b0>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d040      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a68      	ldr	r2, [pc, #416]	; (800906c <HAL_DMA_Abort_IT+0x3b4>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d03b      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a66      	ldr	r2, [pc, #408]	; (8009070 <HAL_DMA_Abort_IT+0x3b8>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d036      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a65      	ldr	r2, [pc, #404]	; (8009074 <HAL_DMA_Abort_IT+0x3bc>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d031      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a63      	ldr	r2, [pc, #396]	; (8009078 <HAL_DMA_Abort_IT+0x3c0>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d02c      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a62      	ldr	r2, [pc, #392]	; (800907c <HAL_DMA_Abort_IT+0x3c4>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d027      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a60      	ldr	r2, [pc, #384]	; (8009080 <HAL_DMA_Abort_IT+0x3c8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d022      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a5f      	ldr	r2, [pc, #380]	; (8009084 <HAL_DMA_Abort_IT+0x3cc>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d01d      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a5d      	ldr	r2, [pc, #372]	; (8009088 <HAL_DMA_Abort_IT+0x3d0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d018      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a5c      	ldr	r2, [pc, #368]	; (800908c <HAL_DMA_Abort_IT+0x3d4>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d013      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a5a      	ldr	r2, [pc, #360]	; (8009090 <HAL_DMA_Abort_IT+0x3d8>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00e      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a59      	ldr	r2, [pc, #356]	; (8009094 <HAL_DMA_Abort_IT+0x3dc>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d009      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a57      	ldr	r2, [pc, #348]	; (8009098 <HAL_DMA_Abort_IT+0x3e0>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <HAL_DMA_Abort_IT+0x290>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a56      	ldr	r2, [pc, #344]	; (800909c <HAL_DMA_Abort_IT+0x3e4>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d108      	bne.n	8008f5a <HAL_DMA_Abort_IT+0x2a2>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0201 	bic.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	e007      	b.n	8008f6a <HAL_DMA_Abort_IT+0x2b2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0201 	bic.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a3c      	ldr	r2, [pc, #240]	; (8009060 <HAL_DMA_Abort_IT+0x3a8>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d072      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a3a      	ldr	r2, [pc, #232]	; (8009064 <HAL_DMA_Abort_IT+0x3ac>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d06d      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a39      	ldr	r2, [pc, #228]	; (8009068 <HAL_DMA_Abort_IT+0x3b0>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d068      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a37      	ldr	r2, [pc, #220]	; (800906c <HAL_DMA_Abort_IT+0x3b4>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d063      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a36      	ldr	r2, [pc, #216]	; (8009070 <HAL_DMA_Abort_IT+0x3b8>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d05e      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a34      	ldr	r2, [pc, #208]	; (8009074 <HAL_DMA_Abort_IT+0x3bc>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d059      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a33      	ldr	r2, [pc, #204]	; (8009078 <HAL_DMA_Abort_IT+0x3c0>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d054      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a31      	ldr	r2, [pc, #196]	; (800907c <HAL_DMA_Abort_IT+0x3c4>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d04f      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a30      	ldr	r2, [pc, #192]	; (8009080 <HAL_DMA_Abort_IT+0x3c8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d04a      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a2e      	ldr	r2, [pc, #184]	; (8009084 <HAL_DMA_Abort_IT+0x3cc>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d045      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a2d      	ldr	r2, [pc, #180]	; (8009088 <HAL_DMA_Abort_IT+0x3d0>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d040      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a2b      	ldr	r2, [pc, #172]	; (800908c <HAL_DMA_Abort_IT+0x3d4>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d03b      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a2a      	ldr	r2, [pc, #168]	; (8009090 <HAL_DMA_Abort_IT+0x3d8>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d036      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a28      	ldr	r2, [pc, #160]	; (8009094 <HAL_DMA_Abort_IT+0x3dc>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d031      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a27      	ldr	r2, [pc, #156]	; (8009098 <HAL_DMA_Abort_IT+0x3e0>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d02c      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a25      	ldr	r2, [pc, #148]	; (800909c <HAL_DMA_Abort_IT+0x3e4>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d027      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a24      	ldr	r2, [pc, #144]	; (80090a0 <HAL_DMA_Abort_IT+0x3e8>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d022      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a22      	ldr	r2, [pc, #136]	; (80090a4 <HAL_DMA_Abort_IT+0x3ec>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d01d      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a21      	ldr	r2, [pc, #132]	; (80090a8 <HAL_DMA_Abort_IT+0x3f0>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d018      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a1f      	ldr	r2, [pc, #124]	; (80090ac <HAL_DMA_Abort_IT+0x3f4>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d013      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a1e      	ldr	r2, [pc, #120]	; (80090b0 <HAL_DMA_Abort_IT+0x3f8>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d00e      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a1c      	ldr	r2, [pc, #112]	; (80090b4 <HAL_DMA_Abort_IT+0x3fc>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d009      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a1b      	ldr	r2, [pc, #108]	; (80090b8 <HAL_DMA_Abort_IT+0x400>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d004      	beq.n	800905a <HAL_DMA_Abort_IT+0x3a2>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a19      	ldr	r2, [pc, #100]	; (80090bc <HAL_DMA_Abort_IT+0x404>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d132      	bne.n	80090c0 <HAL_DMA_Abort_IT+0x408>
 800905a:	2301      	movs	r3, #1
 800905c:	e031      	b.n	80090c2 <HAL_DMA_Abort_IT+0x40a>
 800905e:	bf00      	nop
 8009060:	40020010 	.word	0x40020010
 8009064:	40020028 	.word	0x40020028
 8009068:	40020040 	.word	0x40020040
 800906c:	40020058 	.word	0x40020058
 8009070:	40020070 	.word	0x40020070
 8009074:	40020088 	.word	0x40020088
 8009078:	400200a0 	.word	0x400200a0
 800907c:	400200b8 	.word	0x400200b8
 8009080:	40020410 	.word	0x40020410
 8009084:	40020428 	.word	0x40020428
 8009088:	40020440 	.word	0x40020440
 800908c:	40020458 	.word	0x40020458
 8009090:	40020470 	.word	0x40020470
 8009094:	40020488 	.word	0x40020488
 8009098:	400204a0 	.word	0x400204a0
 800909c:	400204b8 	.word	0x400204b8
 80090a0:	58025408 	.word	0x58025408
 80090a4:	5802541c 	.word	0x5802541c
 80090a8:	58025430 	.word	0x58025430
 80090ac:	58025444 	.word	0x58025444
 80090b0:	58025458 	.word	0x58025458
 80090b4:	5802546c 	.word	0x5802546c
 80090b8:	58025480 	.word	0x58025480
 80090bc:	58025494 	.word	0x58025494
 80090c0:	2300      	movs	r3, #0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d028      	beq.n	8009118 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090e0:	f003 031f 	and.w	r3, r3, #31
 80090e4:	2201      	movs	r2, #1
 80090e6:	409a      	lsls	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80090f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00c      	beq.n	8009118 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800910c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009116:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912c:	2b00      	cmp	r3, #0
 800912e:	d003      	beq.n	8009138 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop

08009144 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08a      	sub	sp, #40	; 0x28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009150:	4b67      	ldr	r3, [pc, #412]	; (80092f0 <HAL_DMA_IRQHandler+0x1ac>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a67      	ldr	r2, [pc, #412]	; (80092f4 <HAL_DMA_IRQHandler+0x1b0>)
 8009156:	fba2 2303 	umull	r2, r3, r2, r3
 800915a:	0a9b      	lsrs	r3, r3, #10
 800915c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009162:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009168:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a5f      	ldr	r2, [pc, #380]	; (80092f8 <HAL_DMA_IRQHandler+0x1b4>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d04a      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a5d      	ldr	r2, [pc, #372]	; (80092fc <HAL_DMA_IRQHandler+0x1b8>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d045      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a5c      	ldr	r2, [pc, #368]	; (8009300 <HAL_DMA_IRQHandler+0x1bc>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d040      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a5a      	ldr	r2, [pc, #360]	; (8009304 <HAL_DMA_IRQHandler+0x1c0>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d03b      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a59      	ldr	r2, [pc, #356]	; (8009308 <HAL_DMA_IRQHandler+0x1c4>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d036      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a57      	ldr	r2, [pc, #348]	; (800930c <HAL_DMA_IRQHandler+0x1c8>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d031      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a56      	ldr	r2, [pc, #344]	; (8009310 <HAL_DMA_IRQHandler+0x1cc>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d02c      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a54      	ldr	r2, [pc, #336]	; (8009314 <HAL_DMA_IRQHandler+0x1d0>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d027      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a53      	ldr	r2, [pc, #332]	; (8009318 <HAL_DMA_IRQHandler+0x1d4>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d022      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a51      	ldr	r2, [pc, #324]	; (800931c <HAL_DMA_IRQHandler+0x1d8>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d01d      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a50      	ldr	r2, [pc, #320]	; (8009320 <HAL_DMA_IRQHandler+0x1dc>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d018      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a4e      	ldr	r2, [pc, #312]	; (8009324 <HAL_DMA_IRQHandler+0x1e0>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d013      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a4d      	ldr	r2, [pc, #308]	; (8009328 <HAL_DMA_IRQHandler+0x1e4>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00e      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a4b      	ldr	r2, [pc, #300]	; (800932c <HAL_DMA_IRQHandler+0x1e8>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d009      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a4a      	ldr	r2, [pc, #296]	; (8009330 <HAL_DMA_IRQHandler+0x1ec>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d004      	beq.n	8009216 <HAL_DMA_IRQHandler+0xd2>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a48      	ldr	r2, [pc, #288]	; (8009334 <HAL_DMA_IRQHandler+0x1f0>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d101      	bne.n	800921a <HAL_DMA_IRQHandler+0xd6>
 8009216:	2301      	movs	r3, #1
 8009218:	e000      	b.n	800921c <HAL_DMA_IRQHandler+0xd8>
 800921a:	2300      	movs	r3, #0
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 842b 	beq.w	8009a78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009226:	f003 031f 	and.w	r3, r3, #31
 800922a:	2208      	movs	r2, #8
 800922c:	409a      	lsls	r2, r3
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	4013      	ands	r3, r2
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 80a2 	beq.w	800937c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a2e      	ldr	r2, [pc, #184]	; (80092f8 <HAL_DMA_IRQHandler+0x1b4>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d04a      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a2d      	ldr	r2, [pc, #180]	; (80092fc <HAL_DMA_IRQHandler+0x1b8>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d045      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a2b      	ldr	r2, [pc, #172]	; (8009300 <HAL_DMA_IRQHandler+0x1bc>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d040      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a2a      	ldr	r2, [pc, #168]	; (8009304 <HAL_DMA_IRQHandler+0x1c0>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d03b      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a28      	ldr	r2, [pc, #160]	; (8009308 <HAL_DMA_IRQHandler+0x1c4>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d036      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a27      	ldr	r2, [pc, #156]	; (800930c <HAL_DMA_IRQHandler+0x1c8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d031      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a25      	ldr	r2, [pc, #148]	; (8009310 <HAL_DMA_IRQHandler+0x1cc>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d02c      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a24      	ldr	r2, [pc, #144]	; (8009314 <HAL_DMA_IRQHandler+0x1d0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d027      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a22      	ldr	r2, [pc, #136]	; (8009318 <HAL_DMA_IRQHandler+0x1d4>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d022      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a21      	ldr	r2, [pc, #132]	; (800931c <HAL_DMA_IRQHandler+0x1d8>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d01d      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a1f      	ldr	r2, [pc, #124]	; (8009320 <HAL_DMA_IRQHandler+0x1dc>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d018      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a1e      	ldr	r2, [pc, #120]	; (8009324 <HAL_DMA_IRQHandler+0x1e0>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d013      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a1c      	ldr	r2, [pc, #112]	; (8009328 <HAL_DMA_IRQHandler+0x1e4>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d00e      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a1b      	ldr	r2, [pc, #108]	; (800932c <HAL_DMA_IRQHandler+0x1e8>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d009      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a19      	ldr	r2, [pc, #100]	; (8009330 <HAL_DMA_IRQHandler+0x1ec>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d004      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x194>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a18      	ldr	r2, [pc, #96]	; (8009334 <HAL_DMA_IRQHandler+0x1f0>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d12f      	bne.n	8009338 <HAL_DMA_IRQHandler+0x1f4>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0304 	and.w	r3, r3, #4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bf14      	ite	ne
 80092e6:	2301      	movne	r3, #1
 80092e8:	2300      	moveq	r3, #0
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	e02e      	b.n	800934c <HAL_DMA_IRQHandler+0x208>
 80092ee:	bf00      	nop
 80092f0:	24000090 	.word	0x24000090
 80092f4:	1b4e81b5 	.word	0x1b4e81b5
 80092f8:	40020010 	.word	0x40020010
 80092fc:	40020028 	.word	0x40020028
 8009300:	40020040 	.word	0x40020040
 8009304:	40020058 	.word	0x40020058
 8009308:	40020070 	.word	0x40020070
 800930c:	40020088 	.word	0x40020088
 8009310:	400200a0 	.word	0x400200a0
 8009314:	400200b8 	.word	0x400200b8
 8009318:	40020410 	.word	0x40020410
 800931c:	40020428 	.word	0x40020428
 8009320:	40020440 	.word	0x40020440
 8009324:	40020458 	.word	0x40020458
 8009328:	40020470 	.word	0x40020470
 800932c:	40020488 	.word	0x40020488
 8009330:	400204a0 	.word	0x400204a0
 8009334:	400204b8 	.word	0x400204b8
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	bf14      	ite	ne
 8009346:	2301      	movne	r3, #1
 8009348:	2300      	moveq	r3, #0
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b00      	cmp	r3, #0
 800934e:	d015      	beq.n	800937c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 0204 	bic.w	r2, r2, #4
 800935e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009364:	f003 031f 	and.w	r3, r3, #31
 8009368:	2208      	movs	r2, #8
 800936a:	409a      	lsls	r2, r3
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009374:	f043 0201 	orr.w	r2, r3, #1
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009380:	f003 031f 	and.w	r3, r3, #31
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	fa22 f303 	lsr.w	r3, r2, r3
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d06e      	beq.n	8009470 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a69      	ldr	r2, [pc, #420]	; (800953c <HAL_DMA_IRQHandler+0x3f8>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d04a      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a67      	ldr	r2, [pc, #412]	; (8009540 <HAL_DMA_IRQHandler+0x3fc>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d045      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a66      	ldr	r2, [pc, #408]	; (8009544 <HAL_DMA_IRQHandler+0x400>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d040      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a64      	ldr	r2, [pc, #400]	; (8009548 <HAL_DMA_IRQHandler+0x404>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d03b      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a63      	ldr	r2, [pc, #396]	; (800954c <HAL_DMA_IRQHandler+0x408>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d036      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a61      	ldr	r2, [pc, #388]	; (8009550 <HAL_DMA_IRQHandler+0x40c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d031      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a60      	ldr	r2, [pc, #384]	; (8009554 <HAL_DMA_IRQHandler+0x410>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d02c      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a5e      	ldr	r2, [pc, #376]	; (8009558 <HAL_DMA_IRQHandler+0x414>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d027      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a5d      	ldr	r2, [pc, #372]	; (800955c <HAL_DMA_IRQHandler+0x418>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d022      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a5b      	ldr	r2, [pc, #364]	; (8009560 <HAL_DMA_IRQHandler+0x41c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d01d      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a5a      	ldr	r2, [pc, #360]	; (8009564 <HAL_DMA_IRQHandler+0x420>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d018      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a58      	ldr	r2, [pc, #352]	; (8009568 <HAL_DMA_IRQHandler+0x424>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d013      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a57      	ldr	r2, [pc, #348]	; (800956c <HAL_DMA_IRQHandler+0x428>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d00e      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a55      	ldr	r2, [pc, #340]	; (8009570 <HAL_DMA_IRQHandler+0x42c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d009      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a54      	ldr	r2, [pc, #336]	; (8009574 <HAL_DMA_IRQHandler+0x430>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d004      	beq.n	8009432 <HAL_DMA_IRQHandler+0x2ee>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a52      	ldr	r2, [pc, #328]	; (8009578 <HAL_DMA_IRQHandler+0x434>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d10a      	bne.n	8009448 <HAL_DMA_IRQHandler+0x304>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800943c:	2b00      	cmp	r3, #0
 800943e:	bf14      	ite	ne
 8009440:	2301      	movne	r3, #1
 8009442:	2300      	moveq	r3, #0
 8009444:	b2db      	uxtb	r3, r3
 8009446:	e003      	b.n	8009450 <HAL_DMA_IRQHandler+0x30c>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2300      	movs	r3, #0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00d      	beq.n	8009470 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009458:	f003 031f 	and.w	r3, r3, #31
 800945c:	2201      	movs	r2, #1
 800945e:	409a      	lsls	r2, r3
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009468:	f043 0202 	orr.w	r2, r3, #2
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009474:	f003 031f 	and.w	r3, r3, #31
 8009478:	2204      	movs	r2, #4
 800947a:	409a      	lsls	r2, r3
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	4013      	ands	r3, r2
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 808f 	beq.w	80095a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a2c      	ldr	r2, [pc, #176]	; (800953c <HAL_DMA_IRQHandler+0x3f8>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d04a      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a2a      	ldr	r2, [pc, #168]	; (8009540 <HAL_DMA_IRQHandler+0x3fc>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d045      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a29      	ldr	r2, [pc, #164]	; (8009544 <HAL_DMA_IRQHandler+0x400>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d040      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a27      	ldr	r2, [pc, #156]	; (8009548 <HAL_DMA_IRQHandler+0x404>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d03b      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a26      	ldr	r2, [pc, #152]	; (800954c <HAL_DMA_IRQHandler+0x408>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d036      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a24      	ldr	r2, [pc, #144]	; (8009550 <HAL_DMA_IRQHandler+0x40c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d031      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a23      	ldr	r2, [pc, #140]	; (8009554 <HAL_DMA_IRQHandler+0x410>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d02c      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a21      	ldr	r2, [pc, #132]	; (8009558 <HAL_DMA_IRQHandler+0x414>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d027      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a20      	ldr	r2, [pc, #128]	; (800955c <HAL_DMA_IRQHandler+0x418>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d022      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a1e      	ldr	r2, [pc, #120]	; (8009560 <HAL_DMA_IRQHandler+0x41c>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d01d      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a1d      	ldr	r2, [pc, #116]	; (8009564 <HAL_DMA_IRQHandler+0x420>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d018      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a1b      	ldr	r2, [pc, #108]	; (8009568 <HAL_DMA_IRQHandler+0x424>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d013      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a1a      	ldr	r2, [pc, #104]	; (800956c <HAL_DMA_IRQHandler+0x428>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d00e      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a18      	ldr	r2, [pc, #96]	; (8009570 <HAL_DMA_IRQHandler+0x42c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d009      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a17      	ldr	r2, [pc, #92]	; (8009574 <HAL_DMA_IRQHandler+0x430>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d004      	beq.n	8009526 <HAL_DMA_IRQHandler+0x3e2>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a15      	ldr	r2, [pc, #84]	; (8009578 <HAL_DMA_IRQHandler+0x434>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d12a      	bne.n	800957c <HAL_DMA_IRQHandler+0x438>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0302 	and.w	r3, r3, #2
 8009530:	2b00      	cmp	r3, #0
 8009532:	bf14      	ite	ne
 8009534:	2301      	movne	r3, #1
 8009536:	2300      	moveq	r3, #0
 8009538:	b2db      	uxtb	r3, r3
 800953a:	e023      	b.n	8009584 <HAL_DMA_IRQHandler+0x440>
 800953c:	40020010 	.word	0x40020010
 8009540:	40020028 	.word	0x40020028
 8009544:	40020040 	.word	0x40020040
 8009548:	40020058 	.word	0x40020058
 800954c:	40020070 	.word	0x40020070
 8009550:	40020088 	.word	0x40020088
 8009554:	400200a0 	.word	0x400200a0
 8009558:	400200b8 	.word	0x400200b8
 800955c:	40020410 	.word	0x40020410
 8009560:	40020428 	.word	0x40020428
 8009564:	40020440 	.word	0x40020440
 8009568:	40020458 	.word	0x40020458
 800956c:	40020470 	.word	0x40020470
 8009570:	40020488 	.word	0x40020488
 8009574:	400204a0 	.word	0x400204a0
 8009578:	400204b8 	.word	0x400204b8
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2300      	movs	r3, #0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00d      	beq.n	80095a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800958c:	f003 031f 	and.w	r3, r3, #31
 8009590:	2204      	movs	r2, #4
 8009592:	409a      	lsls	r2, r3
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800959c:	f043 0204 	orr.w	r2, r3, #4
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a8:	f003 031f 	and.w	r3, r3, #31
 80095ac:	2210      	movs	r2, #16
 80095ae:	409a      	lsls	r2, r3
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	4013      	ands	r3, r2
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 80a6 	beq.w	8009706 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a85      	ldr	r2, [pc, #532]	; (80097d4 <HAL_DMA_IRQHandler+0x690>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d04a      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a83      	ldr	r2, [pc, #524]	; (80097d8 <HAL_DMA_IRQHandler+0x694>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d045      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a82      	ldr	r2, [pc, #520]	; (80097dc <HAL_DMA_IRQHandler+0x698>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d040      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a80      	ldr	r2, [pc, #512]	; (80097e0 <HAL_DMA_IRQHandler+0x69c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d03b      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a7f      	ldr	r2, [pc, #508]	; (80097e4 <HAL_DMA_IRQHandler+0x6a0>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d036      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a7d      	ldr	r2, [pc, #500]	; (80097e8 <HAL_DMA_IRQHandler+0x6a4>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d031      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a7c      	ldr	r2, [pc, #496]	; (80097ec <HAL_DMA_IRQHandler+0x6a8>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d02c      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a7a      	ldr	r2, [pc, #488]	; (80097f0 <HAL_DMA_IRQHandler+0x6ac>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d027      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a79      	ldr	r2, [pc, #484]	; (80097f4 <HAL_DMA_IRQHandler+0x6b0>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d022      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a77      	ldr	r2, [pc, #476]	; (80097f8 <HAL_DMA_IRQHandler+0x6b4>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d01d      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a76      	ldr	r2, [pc, #472]	; (80097fc <HAL_DMA_IRQHandler+0x6b8>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d018      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a74      	ldr	r2, [pc, #464]	; (8009800 <HAL_DMA_IRQHandler+0x6bc>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d013      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a73      	ldr	r2, [pc, #460]	; (8009804 <HAL_DMA_IRQHandler+0x6c0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d00e      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a71      	ldr	r2, [pc, #452]	; (8009808 <HAL_DMA_IRQHandler+0x6c4>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d009      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a70      	ldr	r2, [pc, #448]	; (800980c <HAL_DMA_IRQHandler+0x6c8>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d004      	beq.n	800965a <HAL_DMA_IRQHandler+0x516>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a6e      	ldr	r2, [pc, #440]	; (8009810 <HAL_DMA_IRQHandler+0x6cc>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d10a      	bne.n	8009670 <HAL_DMA_IRQHandler+0x52c>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0308 	and.w	r3, r3, #8
 8009664:	2b00      	cmp	r3, #0
 8009666:	bf14      	ite	ne
 8009668:	2301      	movne	r3, #1
 800966a:	2300      	moveq	r3, #0
 800966c:	b2db      	uxtb	r3, r3
 800966e:	e009      	b.n	8009684 <HAL_DMA_IRQHandler+0x540>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 0304 	and.w	r3, r3, #4
 800967a:	2b00      	cmp	r3, #0
 800967c:	bf14      	ite	ne
 800967e:	2301      	movne	r3, #1
 8009680:	2300      	moveq	r3, #0
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d03e      	beq.n	8009706 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800968c:	f003 031f 	and.w	r3, r3, #31
 8009690:	2210      	movs	r2, #16
 8009692:	409a      	lsls	r2, r3
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d018      	beq.n	80096d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d108      	bne.n	80096c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d024      	beq.n	8009706 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	4798      	blx	r3
 80096c4:	e01f      	b.n	8009706 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d01b      	beq.n	8009706 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
 80096d6:	e016      	b.n	8009706 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d107      	bne.n	80096f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 0208 	bic.w	r2, r2, #8
 80096f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800970a:	f003 031f 	and.w	r3, r3, #31
 800970e:	2220      	movs	r2, #32
 8009710:	409a      	lsls	r2, r3
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	4013      	ands	r3, r2
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 8110 	beq.w	800993c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a2c      	ldr	r2, [pc, #176]	; (80097d4 <HAL_DMA_IRQHandler+0x690>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d04a      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a2b      	ldr	r2, [pc, #172]	; (80097d8 <HAL_DMA_IRQHandler+0x694>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d045      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a29      	ldr	r2, [pc, #164]	; (80097dc <HAL_DMA_IRQHandler+0x698>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d040      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a28      	ldr	r2, [pc, #160]	; (80097e0 <HAL_DMA_IRQHandler+0x69c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d03b      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a26      	ldr	r2, [pc, #152]	; (80097e4 <HAL_DMA_IRQHandler+0x6a0>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d036      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a25      	ldr	r2, [pc, #148]	; (80097e8 <HAL_DMA_IRQHandler+0x6a4>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d031      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a23      	ldr	r2, [pc, #140]	; (80097ec <HAL_DMA_IRQHandler+0x6a8>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d02c      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a22      	ldr	r2, [pc, #136]	; (80097f0 <HAL_DMA_IRQHandler+0x6ac>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d027      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a20      	ldr	r2, [pc, #128]	; (80097f4 <HAL_DMA_IRQHandler+0x6b0>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d022      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a1f      	ldr	r2, [pc, #124]	; (80097f8 <HAL_DMA_IRQHandler+0x6b4>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d01d      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a1d      	ldr	r2, [pc, #116]	; (80097fc <HAL_DMA_IRQHandler+0x6b8>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d018      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a1c      	ldr	r2, [pc, #112]	; (8009800 <HAL_DMA_IRQHandler+0x6bc>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d013      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a1a      	ldr	r2, [pc, #104]	; (8009804 <HAL_DMA_IRQHandler+0x6c0>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d00e      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a19      	ldr	r2, [pc, #100]	; (8009808 <HAL_DMA_IRQHandler+0x6c4>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d009      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a17      	ldr	r2, [pc, #92]	; (800980c <HAL_DMA_IRQHandler+0x6c8>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d004      	beq.n	80097bc <HAL_DMA_IRQHandler+0x678>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a16      	ldr	r2, [pc, #88]	; (8009810 <HAL_DMA_IRQHandler+0x6cc>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d12b      	bne.n	8009814 <HAL_DMA_IRQHandler+0x6d0>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 0310 	and.w	r3, r3, #16
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	bf14      	ite	ne
 80097ca:	2301      	movne	r3, #1
 80097cc:	2300      	moveq	r3, #0
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	e02a      	b.n	8009828 <HAL_DMA_IRQHandler+0x6e4>
 80097d2:	bf00      	nop
 80097d4:	40020010 	.word	0x40020010
 80097d8:	40020028 	.word	0x40020028
 80097dc:	40020040 	.word	0x40020040
 80097e0:	40020058 	.word	0x40020058
 80097e4:	40020070 	.word	0x40020070
 80097e8:	40020088 	.word	0x40020088
 80097ec:	400200a0 	.word	0x400200a0
 80097f0:	400200b8 	.word	0x400200b8
 80097f4:	40020410 	.word	0x40020410
 80097f8:	40020428 	.word	0x40020428
 80097fc:	40020440 	.word	0x40020440
 8009800:	40020458 	.word	0x40020458
 8009804:	40020470 	.word	0x40020470
 8009808:	40020488 	.word	0x40020488
 800980c:	400204a0 	.word	0x400204a0
 8009810:	400204b8 	.word	0x400204b8
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	bf14      	ite	ne
 8009822:	2301      	movne	r3, #1
 8009824:	2300      	moveq	r3, #0
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 8087 	beq.w	800993c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009832:	f003 031f 	and.w	r3, r3, #31
 8009836:	2220      	movs	r2, #32
 8009838:	409a      	lsls	r2, r3
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b04      	cmp	r3, #4
 8009848:	d139      	bne.n	80098be <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f022 0216 	bic.w	r2, r2, #22
 8009858:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	695a      	ldr	r2, [r3, #20]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009868:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986e:	2b00      	cmp	r3, #0
 8009870:	d103      	bne.n	800987a <HAL_DMA_IRQHandler+0x736>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009876:	2b00      	cmp	r3, #0
 8009878:	d007      	beq.n	800988a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f022 0208 	bic.w	r2, r2, #8
 8009888:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800988e:	f003 031f 	and.w	r3, r3, #31
 8009892:	223f      	movs	r2, #63	; 0x3f
 8009894:	409a      	lsls	r2, r3
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 834a 	beq.w	8009f48 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	4798      	blx	r3
          }
          return;
 80098bc:	e344      	b.n	8009f48 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d018      	beq.n	80098fe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d108      	bne.n	80098ec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d02c      	beq.n	800993c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	4798      	blx	r3
 80098ea:	e027      	b.n	800993c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d023      	beq.n	800993c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	4798      	blx	r3
 80098fc:	e01e      	b.n	800993c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10f      	bne.n	800992c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f022 0210 	bic.w	r2, r2, #16
 800991a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 8306 	beq.w	8009f52 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	f000 8088 	beq.w	8009a64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2204      	movs	r2, #4
 8009958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a7a      	ldr	r2, [pc, #488]	; (8009b4c <HAL_DMA_IRQHandler+0xa08>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d04a      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a79      	ldr	r2, [pc, #484]	; (8009b50 <HAL_DMA_IRQHandler+0xa0c>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d045      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a77      	ldr	r2, [pc, #476]	; (8009b54 <HAL_DMA_IRQHandler+0xa10>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d040      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a76      	ldr	r2, [pc, #472]	; (8009b58 <HAL_DMA_IRQHandler+0xa14>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d03b      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a74      	ldr	r2, [pc, #464]	; (8009b5c <HAL_DMA_IRQHandler+0xa18>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d036      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a73      	ldr	r2, [pc, #460]	; (8009b60 <HAL_DMA_IRQHandler+0xa1c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d031      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a71      	ldr	r2, [pc, #452]	; (8009b64 <HAL_DMA_IRQHandler+0xa20>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d02c      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a70      	ldr	r2, [pc, #448]	; (8009b68 <HAL_DMA_IRQHandler+0xa24>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d027      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a6e      	ldr	r2, [pc, #440]	; (8009b6c <HAL_DMA_IRQHandler+0xa28>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d022      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a6d      	ldr	r2, [pc, #436]	; (8009b70 <HAL_DMA_IRQHandler+0xa2c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d01d      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a6b      	ldr	r2, [pc, #428]	; (8009b74 <HAL_DMA_IRQHandler+0xa30>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d018      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a6a      	ldr	r2, [pc, #424]	; (8009b78 <HAL_DMA_IRQHandler+0xa34>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d013      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a68      	ldr	r2, [pc, #416]	; (8009b7c <HAL_DMA_IRQHandler+0xa38>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d00e      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a67      	ldr	r2, [pc, #412]	; (8009b80 <HAL_DMA_IRQHandler+0xa3c>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d009      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a65      	ldr	r2, [pc, #404]	; (8009b84 <HAL_DMA_IRQHandler+0xa40>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d004      	beq.n	80099fc <HAL_DMA_IRQHandler+0x8b8>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a64      	ldr	r2, [pc, #400]	; (8009b88 <HAL_DMA_IRQHandler+0xa44>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d108      	bne.n	8009a0e <HAL_DMA_IRQHandler+0x8ca>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 0201 	bic.w	r2, r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	e007      	b.n	8009a1e <HAL_DMA_IRQHandler+0x8da>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f022 0201 	bic.w	r2, r2, #1
 8009a1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3301      	adds	r3, #1
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d307      	bcc.n	8009a3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1f2      	bne.n	8009a1e <HAL_DMA_IRQHandler+0x8da>
 8009a38:	e000      	b.n	8009a3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009a3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d004      	beq.n	8009a54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2203      	movs	r2, #3
 8009a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009a52:	e003      	b.n	8009a5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 8272 	beq.w	8009f52 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	4798      	blx	r3
 8009a76:	e26c      	b.n	8009f52 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a43      	ldr	r2, [pc, #268]	; (8009b8c <HAL_DMA_IRQHandler+0xa48>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d022      	beq.n	8009ac8 <HAL_DMA_IRQHandler+0x984>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a42      	ldr	r2, [pc, #264]	; (8009b90 <HAL_DMA_IRQHandler+0xa4c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d01d      	beq.n	8009ac8 <HAL_DMA_IRQHandler+0x984>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a40      	ldr	r2, [pc, #256]	; (8009b94 <HAL_DMA_IRQHandler+0xa50>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d018      	beq.n	8009ac8 <HAL_DMA_IRQHandler+0x984>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a3f      	ldr	r2, [pc, #252]	; (8009b98 <HAL_DMA_IRQHandler+0xa54>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d013      	beq.n	8009ac8 <HAL_DMA_IRQHandler+0x984>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a3d      	ldr	r2, [pc, #244]	; (8009b9c <HAL_DMA_IRQHandler+0xa58>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d00e      	beq.n	8009ac8 <HAL_DMA_IRQHandler+0x984>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a3c      	ldr	r2, [pc, #240]	; (8009ba0 <HAL_DMA_IRQHandler+0xa5c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d009      	beq.n	8009ac8 <HAL_DMA_IRQHandler+0x984>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a3a      	ldr	r2, [pc, #232]	; (8009ba4 <HAL_DMA_IRQHandler+0xa60>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d004      	beq.n	8009ac8 <HAL_DMA_IRQHandler+0x984>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a39      	ldr	r2, [pc, #228]	; (8009ba8 <HAL_DMA_IRQHandler+0xa64>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d101      	bne.n	8009acc <HAL_DMA_IRQHandler+0x988>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e000      	b.n	8009ace <HAL_DMA_IRQHandler+0x98a>
 8009acc:	2300      	movs	r3, #0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f000 823f 	beq.w	8009f52 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ae0:	f003 031f 	and.w	r3, r3, #31
 8009ae4:	2204      	movs	r2, #4
 8009ae6:	409a      	lsls	r2, r3
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	4013      	ands	r3, r2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 80cd 	beq.w	8009c8c <HAL_DMA_IRQHandler+0xb48>
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 80c7 	beq.w	8009c8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b02:	f003 031f 	and.w	r3, r3, #31
 8009b06:	2204      	movs	r2, #4
 8009b08:	409a      	lsls	r2, r3
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d049      	beq.n	8009bac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d109      	bne.n	8009b36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 8210 	beq.w	8009f4c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b34:	e20a      	b.n	8009f4c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f000 8206 	beq.w	8009f4c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b48:	e200      	b.n	8009f4c <HAL_DMA_IRQHandler+0xe08>
 8009b4a:	bf00      	nop
 8009b4c:	40020010 	.word	0x40020010
 8009b50:	40020028 	.word	0x40020028
 8009b54:	40020040 	.word	0x40020040
 8009b58:	40020058 	.word	0x40020058
 8009b5c:	40020070 	.word	0x40020070
 8009b60:	40020088 	.word	0x40020088
 8009b64:	400200a0 	.word	0x400200a0
 8009b68:	400200b8 	.word	0x400200b8
 8009b6c:	40020410 	.word	0x40020410
 8009b70:	40020428 	.word	0x40020428
 8009b74:	40020440 	.word	0x40020440
 8009b78:	40020458 	.word	0x40020458
 8009b7c:	40020470 	.word	0x40020470
 8009b80:	40020488 	.word	0x40020488
 8009b84:	400204a0 	.word	0x400204a0
 8009b88:	400204b8 	.word	0x400204b8
 8009b8c:	58025408 	.word	0x58025408
 8009b90:	5802541c 	.word	0x5802541c
 8009b94:	58025430 	.word	0x58025430
 8009b98:	58025444 	.word	0x58025444
 8009b9c:	58025458 	.word	0x58025458
 8009ba0:	5802546c 	.word	0x5802546c
 8009ba4:	58025480 	.word	0x58025480
 8009ba8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f003 0320 	and.w	r3, r3, #32
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d160      	bne.n	8009c78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a7f      	ldr	r2, [pc, #508]	; (8009db8 <HAL_DMA_IRQHandler+0xc74>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d04a      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a7d      	ldr	r2, [pc, #500]	; (8009dbc <HAL_DMA_IRQHandler+0xc78>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d045      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a7c      	ldr	r2, [pc, #496]	; (8009dc0 <HAL_DMA_IRQHandler+0xc7c>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d040      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a7a      	ldr	r2, [pc, #488]	; (8009dc4 <HAL_DMA_IRQHandler+0xc80>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d03b      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a79      	ldr	r2, [pc, #484]	; (8009dc8 <HAL_DMA_IRQHandler+0xc84>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d036      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a77      	ldr	r2, [pc, #476]	; (8009dcc <HAL_DMA_IRQHandler+0xc88>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d031      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a76      	ldr	r2, [pc, #472]	; (8009dd0 <HAL_DMA_IRQHandler+0xc8c>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d02c      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a74      	ldr	r2, [pc, #464]	; (8009dd4 <HAL_DMA_IRQHandler+0xc90>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d027      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a73      	ldr	r2, [pc, #460]	; (8009dd8 <HAL_DMA_IRQHandler+0xc94>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d022      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a71      	ldr	r2, [pc, #452]	; (8009ddc <HAL_DMA_IRQHandler+0xc98>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d01d      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a70      	ldr	r2, [pc, #448]	; (8009de0 <HAL_DMA_IRQHandler+0xc9c>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d018      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a6e      	ldr	r2, [pc, #440]	; (8009de4 <HAL_DMA_IRQHandler+0xca0>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d013      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a6d      	ldr	r2, [pc, #436]	; (8009de8 <HAL_DMA_IRQHandler+0xca4>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d00e      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a6b      	ldr	r2, [pc, #428]	; (8009dec <HAL_DMA_IRQHandler+0xca8>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d009      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a6a      	ldr	r2, [pc, #424]	; (8009df0 <HAL_DMA_IRQHandler+0xcac>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d004      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xb12>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a68      	ldr	r2, [pc, #416]	; (8009df4 <HAL_DMA_IRQHandler+0xcb0>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d108      	bne.n	8009c68 <HAL_DMA_IRQHandler+0xb24>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0208 	bic.w	r2, r2, #8
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	e007      	b.n	8009c78 <HAL_DMA_IRQHandler+0xb34>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 0204 	bic.w	r2, r2, #4
 8009c76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 8165 	beq.w	8009f4c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c8a:	e15f      	b.n	8009f4c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c90:	f003 031f 	and.w	r3, r3, #31
 8009c94:	2202      	movs	r2, #2
 8009c96:	409a      	lsls	r2, r3
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 80c5 	beq.w	8009e2c <HAL_DMA_IRQHandler+0xce8>
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 80bf 	beq.w	8009e2c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb2:	f003 031f 	and.w	r3, r3, #31
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	409a      	lsls	r2, r3
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d018      	beq.n	8009cfa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d109      	bne.n	8009ce6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 813a 	beq.w	8009f50 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009ce4:	e134      	b.n	8009f50 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 8130 	beq.w	8009f50 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009cf8:	e12a      	b.n	8009f50 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f003 0320 	and.w	r3, r3, #32
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f040 8089 	bne.w	8009e18 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a2b      	ldr	r2, [pc, #172]	; (8009db8 <HAL_DMA_IRQHandler+0xc74>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d04a      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a29      	ldr	r2, [pc, #164]	; (8009dbc <HAL_DMA_IRQHandler+0xc78>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d045      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a28      	ldr	r2, [pc, #160]	; (8009dc0 <HAL_DMA_IRQHandler+0xc7c>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d040      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a26      	ldr	r2, [pc, #152]	; (8009dc4 <HAL_DMA_IRQHandler+0xc80>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d03b      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a25      	ldr	r2, [pc, #148]	; (8009dc8 <HAL_DMA_IRQHandler+0xc84>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d036      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a23      	ldr	r2, [pc, #140]	; (8009dcc <HAL_DMA_IRQHandler+0xc88>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d031      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a22      	ldr	r2, [pc, #136]	; (8009dd0 <HAL_DMA_IRQHandler+0xc8c>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d02c      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a20      	ldr	r2, [pc, #128]	; (8009dd4 <HAL_DMA_IRQHandler+0xc90>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d027      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a1f      	ldr	r2, [pc, #124]	; (8009dd8 <HAL_DMA_IRQHandler+0xc94>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d022      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a1d      	ldr	r2, [pc, #116]	; (8009ddc <HAL_DMA_IRQHandler+0xc98>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d01d      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a1c      	ldr	r2, [pc, #112]	; (8009de0 <HAL_DMA_IRQHandler+0xc9c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d018      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a1a      	ldr	r2, [pc, #104]	; (8009de4 <HAL_DMA_IRQHandler+0xca0>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d013      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a19      	ldr	r2, [pc, #100]	; (8009de8 <HAL_DMA_IRQHandler+0xca4>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d00e      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a17      	ldr	r2, [pc, #92]	; (8009dec <HAL_DMA_IRQHandler+0xca8>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d009      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a16      	ldr	r2, [pc, #88]	; (8009df0 <HAL_DMA_IRQHandler+0xcac>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d004      	beq.n	8009da6 <HAL_DMA_IRQHandler+0xc62>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a14      	ldr	r2, [pc, #80]	; (8009df4 <HAL_DMA_IRQHandler+0xcb0>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d128      	bne.n	8009df8 <HAL_DMA_IRQHandler+0xcb4>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f022 0214 	bic.w	r2, r2, #20
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	e027      	b.n	8009e08 <HAL_DMA_IRQHandler+0xcc4>
 8009db8:	40020010 	.word	0x40020010
 8009dbc:	40020028 	.word	0x40020028
 8009dc0:	40020040 	.word	0x40020040
 8009dc4:	40020058 	.word	0x40020058
 8009dc8:	40020070 	.word	0x40020070
 8009dcc:	40020088 	.word	0x40020088
 8009dd0:	400200a0 	.word	0x400200a0
 8009dd4:	400200b8 	.word	0x400200b8
 8009dd8:	40020410 	.word	0x40020410
 8009ddc:	40020428 	.word	0x40020428
 8009de0:	40020440 	.word	0x40020440
 8009de4:	40020458 	.word	0x40020458
 8009de8:	40020470 	.word	0x40020470
 8009dec:	40020488 	.word	0x40020488
 8009df0:	400204a0 	.word	0x400204a0
 8009df4:	400204b8 	.word	0x400204b8
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f022 020a 	bic.w	r2, r2, #10
 8009e06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 8097 	beq.w	8009f50 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e2a:	e091      	b.n	8009f50 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e30:	f003 031f 	and.w	r3, r3, #31
 8009e34:	2208      	movs	r2, #8
 8009e36:	409a      	lsls	r2, r3
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 8088 	beq.w	8009f52 <HAL_DMA_IRQHandler+0xe0e>
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	f003 0308 	and.w	r3, r3, #8
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 8082 	beq.w	8009f52 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a41      	ldr	r2, [pc, #260]	; (8009f58 <HAL_DMA_IRQHandler+0xe14>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d04a      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a3f      	ldr	r2, [pc, #252]	; (8009f5c <HAL_DMA_IRQHandler+0xe18>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d045      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a3e      	ldr	r2, [pc, #248]	; (8009f60 <HAL_DMA_IRQHandler+0xe1c>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d040      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a3c      	ldr	r2, [pc, #240]	; (8009f64 <HAL_DMA_IRQHandler+0xe20>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d03b      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a3b      	ldr	r2, [pc, #236]	; (8009f68 <HAL_DMA_IRQHandler+0xe24>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d036      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a39      	ldr	r2, [pc, #228]	; (8009f6c <HAL_DMA_IRQHandler+0xe28>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d031      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a38      	ldr	r2, [pc, #224]	; (8009f70 <HAL_DMA_IRQHandler+0xe2c>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d02c      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a36      	ldr	r2, [pc, #216]	; (8009f74 <HAL_DMA_IRQHandler+0xe30>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d027      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a35      	ldr	r2, [pc, #212]	; (8009f78 <HAL_DMA_IRQHandler+0xe34>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d022      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a33      	ldr	r2, [pc, #204]	; (8009f7c <HAL_DMA_IRQHandler+0xe38>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d01d      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a32      	ldr	r2, [pc, #200]	; (8009f80 <HAL_DMA_IRQHandler+0xe3c>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d018      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a30      	ldr	r2, [pc, #192]	; (8009f84 <HAL_DMA_IRQHandler+0xe40>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d013      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a2f      	ldr	r2, [pc, #188]	; (8009f88 <HAL_DMA_IRQHandler+0xe44>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d00e      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a2d      	ldr	r2, [pc, #180]	; (8009f8c <HAL_DMA_IRQHandler+0xe48>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d009      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a2c      	ldr	r2, [pc, #176]	; (8009f90 <HAL_DMA_IRQHandler+0xe4c>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d004      	beq.n	8009eee <HAL_DMA_IRQHandler+0xdaa>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a2a      	ldr	r2, [pc, #168]	; (8009f94 <HAL_DMA_IRQHandler+0xe50>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d108      	bne.n	8009f00 <HAL_DMA_IRQHandler+0xdbc>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f022 021c 	bic.w	r2, r2, #28
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	e007      	b.n	8009f10 <HAL_DMA_IRQHandler+0xdcc>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f022 020e 	bic.w	r2, r2, #14
 8009f0e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f14:	f003 031f 	and.w	r3, r3, #31
 8009f18:	2201      	movs	r2, #1
 8009f1a:	409a      	lsls	r2, r3
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d009      	beq.n	8009f52 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
 8009f46:	e004      	b.n	8009f52 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009f48:	bf00      	nop
 8009f4a:	e002      	b.n	8009f52 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f4c:	bf00      	nop
 8009f4e:	e000      	b.n	8009f52 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f50:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009f52:	3728      	adds	r7, #40	; 0x28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	40020010 	.word	0x40020010
 8009f5c:	40020028 	.word	0x40020028
 8009f60:	40020040 	.word	0x40020040
 8009f64:	40020058 	.word	0x40020058
 8009f68:	40020070 	.word	0x40020070
 8009f6c:	40020088 	.word	0x40020088
 8009f70:	400200a0 	.word	0x400200a0
 8009f74:	400200b8 	.word	0x400200b8
 8009f78:	40020410 	.word	0x40020410
 8009f7c:	40020428 	.word	0x40020428
 8009f80:	40020440 	.word	0x40020440
 8009f84:	40020458 	.word	0x40020458
 8009f88:	40020470 	.word	0x40020470
 8009f8c:	40020488 	.word	0x40020488
 8009f90:	400204a0 	.word	0x400204a0
 8009f94:	400204b8 	.word	0x400204b8

08009f98 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fa6:	b2db      	uxtb	r3, r3
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b087      	sub	sp, #28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fde:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a7f      	ldr	r2, [pc, #508]	; (800a1e8 <DMA_SetConfig+0x21c>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d072      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a7d      	ldr	r2, [pc, #500]	; (800a1ec <DMA_SetConfig+0x220>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d06d      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a7c      	ldr	r2, [pc, #496]	; (800a1f0 <DMA_SetConfig+0x224>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d068      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a7a      	ldr	r2, [pc, #488]	; (800a1f4 <DMA_SetConfig+0x228>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d063      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a79      	ldr	r2, [pc, #484]	; (800a1f8 <DMA_SetConfig+0x22c>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d05e      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a77      	ldr	r2, [pc, #476]	; (800a1fc <DMA_SetConfig+0x230>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d059      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a76      	ldr	r2, [pc, #472]	; (800a200 <DMA_SetConfig+0x234>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d054      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a74      	ldr	r2, [pc, #464]	; (800a204 <DMA_SetConfig+0x238>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d04f      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a73      	ldr	r2, [pc, #460]	; (800a208 <DMA_SetConfig+0x23c>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d04a      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a71      	ldr	r2, [pc, #452]	; (800a20c <DMA_SetConfig+0x240>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d045      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a70      	ldr	r2, [pc, #448]	; (800a210 <DMA_SetConfig+0x244>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d040      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a6e      	ldr	r2, [pc, #440]	; (800a214 <DMA_SetConfig+0x248>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d03b      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a6d      	ldr	r2, [pc, #436]	; (800a218 <DMA_SetConfig+0x24c>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d036      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a6b      	ldr	r2, [pc, #428]	; (800a21c <DMA_SetConfig+0x250>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d031      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a6a      	ldr	r2, [pc, #424]	; (800a220 <DMA_SetConfig+0x254>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d02c      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a68      	ldr	r2, [pc, #416]	; (800a224 <DMA_SetConfig+0x258>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d027      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a67      	ldr	r2, [pc, #412]	; (800a228 <DMA_SetConfig+0x25c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d022      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a65      	ldr	r2, [pc, #404]	; (800a22c <DMA_SetConfig+0x260>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d01d      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a64      	ldr	r2, [pc, #400]	; (800a230 <DMA_SetConfig+0x264>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d018      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a62      	ldr	r2, [pc, #392]	; (800a234 <DMA_SetConfig+0x268>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d013      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a61      	ldr	r2, [pc, #388]	; (800a238 <DMA_SetConfig+0x26c>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d00e      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a5f      	ldr	r2, [pc, #380]	; (800a23c <DMA_SetConfig+0x270>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d009      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a5e      	ldr	r2, [pc, #376]	; (800a240 <DMA_SetConfig+0x274>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d004      	beq.n	800a0d6 <DMA_SetConfig+0x10a>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a5c      	ldr	r2, [pc, #368]	; (800a244 <DMA_SetConfig+0x278>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d101      	bne.n	800a0da <DMA_SetConfig+0x10e>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e000      	b.n	800a0dc <DMA_SetConfig+0x110>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00d      	beq.n	800a0fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a0e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a0fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a39      	ldr	r2, [pc, #228]	; (800a1e8 <DMA_SetConfig+0x21c>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d04a      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a38      	ldr	r2, [pc, #224]	; (800a1ec <DMA_SetConfig+0x220>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d045      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a36      	ldr	r2, [pc, #216]	; (800a1f0 <DMA_SetConfig+0x224>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d040      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a35      	ldr	r2, [pc, #212]	; (800a1f4 <DMA_SetConfig+0x228>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d03b      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a33      	ldr	r2, [pc, #204]	; (800a1f8 <DMA_SetConfig+0x22c>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d036      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a32      	ldr	r2, [pc, #200]	; (800a1fc <DMA_SetConfig+0x230>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d031      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a30      	ldr	r2, [pc, #192]	; (800a200 <DMA_SetConfig+0x234>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d02c      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a2f      	ldr	r2, [pc, #188]	; (800a204 <DMA_SetConfig+0x238>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d027      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a2d      	ldr	r2, [pc, #180]	; (800a208 <DMA_SetConfig+0x23c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d022      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a2c      	ldr	r2, [pc, #176]	; (800a20c <DMA_SetConfig+0x240>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d01d      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a2a      	ldr	r2, [pc, #168]	; (800a210 <DMA_SetConfig+0x244>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d018      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a29      	ldr	r2, [pc, #164]	; (800a214 <DMA_SetConfig+0x248>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d013      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a27      	ldr	r2, [pc, #156]	; (800a218 <DMA_SetConfig+0x24c>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d00e      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a26      	ldr	r2, [pc, #152]	; (800a21c <DMA_SetConfig+0x250>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d009      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a24      	ldr	r2, [pc, #144]	; (800a220 <DMA_SetConfig+0x254>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d004      	beq.n	800a19c <DMA_SetConfig+0x1d0>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a23      	ldr	r2, [pc, #140]	; (800a224 <DMA_SetConfig+0x258>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d101      	bne.n	800a1a0 <DMA_SetConfig+0x1d4>
 800a19c:	2301      	movs	r3, #1
 800a19e:	e000      	b.n	800a1a2 <DMA_SetConfig+0x1d6>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d059      	beq.n	800a25a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1aa:	f003 031f 	and.w	r3, r3, #31
 800a1ae:	223f      	movs	r2, #63	; 0x3f
 800a1b0:	409a      	lsls	r2, r3
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a1c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	2b40      	cmp	r3, #64	; 0x40
 800a1d4:	d138      	bne.n	800a248 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a1e6:	e086      	b.n	800a2f6 <DMA_SetConfig+0x32a>
 800a1e8:	40020010 	.word	0x40020010
 800a1ec:	40020028 	.word	0x40020028
 800a1f0:	40020040 	.word	0x40020040
 800a1f4:	40020058 	.word	0x40020058
 800a1f8:	40020070 	.word	0x40020070
 800a1fc:	40020088 	.word	0x40020088
 800a200:	400200a0 	.word	0x400200a0
 800a204:	400200b8 	.word	0x400200b8
 800a208:	40020410 	.word	0x40020410
 800a20c:	40020428 	.word	0x40020428
 800a210:	40020440 	.word	0x40020440
 800a214:	40020458 	.word	0x40020458
 800a218:	40020470 	.word	0x40020470
 800a21c:	40020488 	.word	0x40020488
 800a220:	400204a0 	.word	0x400204a0
 800a224:	400204b8 	.word	0x400204b8
 800a228:	58025408 	.word	0x58025408
 800a22c:	5802541c 	.word	0x5802541c
 800a230:	58025430 	.word	0x58025430
 800a234:	58025444 	.word	0x58025444
 800a238:	58025458 	.word	0x58025458
 800a23c:	5802546c 	.word	0x5802546c
 800a240:	58025480 	.word	0x58025480
 800a244:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	60da      	str	r2, [r3, #12]
}
 800a258:	e04d      	b.n	800a2f6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a29      	ldr	r2, [pc, #164]	; (800a304 <DMA_SetConfig+0x338>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d022      	beq.n	800a2aa <DMA_SetConfig+0x2de>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a27      	ldr	r2, [pc, #156]	; (800a308 <DMA_SetConfig+0x33c>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d01d      	beq.n	800a2aa <DMA_SetConfig+0x2de>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a26      	ldr	r2, [pc, #152]	; (800a30c <DMA_SetConfig+0x340>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d018      	beq.n	800a2aa <DMA_SetConfig+0x2de>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a24      	ldr	r2, [pc, #144]	; (800a310 <DMA_SetConfig+0x344>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d013      	beq.n	800a2aa <DMA_SetConfig+0x2de>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a23      	ldr	r2, [pc, #140]	; (800a314 <DMA_SetConfig+0x348>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d00e      	beq.n	800a2aa <DMA_SetConfig+0x2de>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a21      	ldr	r2, [pc, #132]	; (800a318 <DMA_SetConfig+0x34c>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d009      	beq.n	800a2aa <DMA_SetConfig+0x2de>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a20      	ldr	r2, [pc, #128]	; (800a31c <DMA_SetConfig+0x350>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d004      	beq.n	800a2aa <DMA_SetConfig+0x2de>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a1e      	ldr	r2, [pc, #120]	; (800a320 <DMA_SetConfig+0x354>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d101      	bne.n	800a2ae <DMA_SetConfig+0x2e2>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e000      	b.n	800a2b0 <DMA_SetConfig+0x2e4>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d020      	beq.n	800a2f6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2b8:	f003 031f 	and.w	r3, r3, #31
 800a2bc:	2201      	movs	r2, #1
 800a2be:	409a      	lsls	r2, r3
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	2b40      	cmp	r3, #64	; 0x40
 800a2d2:	d108      	bne.n	800a2e6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	60da      	str	r2, [r3, #12]
}
 800a2e4:	e007      	b.n	800a2f6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	60da      	str	r2, [r3, #12]
}
 800a2f6:	bf00      	nop
 800a2f8:	371c      	adds	r7, #28
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	58025408 	.word	0x58025408
 800a308:	5802541c 	.word	0x5802541c
 800a30c:	58025430 	.word	0x58025430
 800a310:	58025444 	.word	0x58025444
 800a314:	58025458 	.word	0x58025458
 800a318:	5802546c 	.word	0x5802546c
 800a31c:	58025480 	.word	0x58025480
 800a320:	58025494 	.word	0x58025494

0800a324 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a42      	ldr	r2, [pc, #264]	; (800a43c <DMA_CalcBaseAndBitshift+0x118>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d04a      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a41      	ldr	r2, [pc, #260]	; (800a440 <DMA_CalcBaseAndBitshift+0x11c>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d045      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a3f      	ldr	r2, [pc, #252]	; (800a444 <DMA_CalcBaseAndBitshift+0x120>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d040      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a3e      	ldr	r2, [pc, #248]	; (800a448 <DMA_CalcBaseAndBitshift+0x124>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d03b      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a3c      	ldr	r2, [pc, #240]	; (800a44c <DMA_CalcBaseAndBitshift+0x128>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d036      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a3b      	ldr	r2, [pc, #236]	; (800a450 <DMA_CalcBaseAndBitshift+0x12c>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d031      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a39      	ldr	r2, [pc, #228]	; (800a454 <DMA_CalcBaseAndBitshift+0x130>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d02c      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a38      	ldr	r2, [pc, #224]	; (800a458 <DMA_CalcBaseAndBitshift+0x134>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d027      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a36      	ldr	r2, [pc, #216]	; (800a45c <DMA_CalcBaseAndBitshift+0x138>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d022      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a35      	ldr	r2, [pc, #212]	; (800a460 <DMA_CalcBaseAndBitshift+0x13c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d01d      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a33      	ldr	r2, [pc, #204]	; (800a464 <DMA_CalcBaseAndBitshift+0x140>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d018      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a32      	ldr	r2, [pc, #200]	; (800a468 <DMA_CalcBaseAndBitshift+0x144>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d013      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a30      	ldr	r2, [pc, #192]	; (800a46c <DMA_CalcBaseAndBitshift+0x148>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d00e      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a2f      	ldr	r2, [pc, #188]	; (800a470 <DMA_CalcBaseAndBitshift+0x14c>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d009      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a2d      	ldr	r2, [pc, #180]	; (800a474 <DMA_CalcBaseAndBitshift+0x150>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d004      	beq.n	800a3cc <DMA_CalcBaseAndBitshift+0xa8>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a2c      	ldr	r2, [pc, #176]	; (800a478 <DMA_CalcBaseAndBitshift+0x154>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d101      	bne.n	800a3d0 <DMA_CalcBaseAndBitshift+0xac>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e000      	b.n	800a3d2 <DMA_CalcBaseAndBitshift+0xae>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d024      	beq.n	800a420 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	3b10      	subs	r3, #16
 800a3de:	4a27      	ldr	r2, [pc, #156]	; (800a47c <DMA_CalcBaseAndBitshift+0x158>)
 800a3e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e4:	091b      	lsrs	r3, r3, #4
 800a3e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f003 0307 	and.w	r3, r3, #7
 800a3ee:	4a24      	ldr	r2, [pc, #144]	; (800a480 <DMA_CalcBaseAndBitshift+0x15c>)
 800a3f0:	5cd3      	ldrb	r3, [r2, r3]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d908      	bls.n	800a410 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	4b1f      	ldr	r3, [pc, #124]	; (800a484 <DMA_CalcBaseAndBitshift+0x160>)
 800a406:	4013      	ands	r3, r2
 800a408:	1d1a      	adds	r2, r3, #4
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	659a      	str	r2, [r3, #88]	; 0x58
 800a40e:	e00d      	b.n	800a42c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	461a      	mov	r2, r3
 800a416:	4b1b      	ldr	r3, [pc, #108]	; (800a484 <DMA_CalcBaseAndBitshift+0x160>)
 800a418:	4013      	ands	r3, r2
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	6593      	str	r3, [r2, #88]	; 0x58
 800a41e:	e005      	b.n	800a42c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	40020010 	.word	0x40020010
 800a440:	40020028 	.word	0x40020028
 800a444:	40020040 	.word	0x40020040
 800a448:	40020058 	.word	0x40020058
 800a44c:	40020070 	.word	0x40020070
 800a450:	40020088 	.word	0x40020088
 800a454:	400200a0 	.word	0x400200a0
 800a458:	400200b8 	.word	0x400200b8
 800a45c:	40020410 	.word	0x40020410
 800a460:	40020428 	.word	0x40020428
 800a464:	40020440 	.word	0x40020440
 800a468:	40020458 	.word	0x40020458
 800a46c:	40020470 	.word	0x40020470
 800a470:	40020488 	.word	0x40020488
 800a474:	400204a0 	.word	0x400204a0
 800a478:	400204b8 	.word	0x400204b8
 800a47c:	aaaaaaab 	.word	0xaaaaaaab
 800a480:	0801abc4 	.word	0x0801abc4
 800a484:	fffffc00 	.word	0xfffffc00

0800a488 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d120      	bne.n	800a4de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d858      	bhi.n	800a556 <DMA_CheckFifoParam+0xce>
 800a4a4:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <DMA_CheckFifoParam+0x24>)
 800a4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4aa:	bf00      	nop
 800a4ac:	0800a4bd 	.word	0x0800a4bd
 800a4b0:	0800a4cf 	.word	0x0800a4cf
 800a4b4:	0800a4bd 	.word	0x0800a4bd
 800a4b8:	0800a557 	.word	0x0800a557
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d048      	beq.n	800a55a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a4cc:	e045      	b.n	800a55a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a4d6:	d142      	bne.n	800a55e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a4dc:	e03f      	b.n	800a55e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4e6:	d123      	bne.n	800a530 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ec:	2b03      	cmp	r3, #3
 800a4ee:	d838      	bhi.n	800a562 <DMA_CheckFifoParam+0xda>
 800a4f0:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <DMA_CheckFifoParam+0x70>)
 800a4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f6:	bf00      	nop
 800a4f8:	0800a509 	.word	0x0800a509
 800a4fc:	0800a50f 	.word	0x0800a50f
 800a500:	0800a509 	.word	0x0800a509
 800a504:	0800a521 	.word	0x0800a521
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	73fb      	strb	r3, [r7, #15]
        break;
 800a50c:	e030      	b.n	800a570 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d025      	beq.n	800a566 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a51e:	e022      	b.n	800a566 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a528:	d11f      	bne.n	800a56a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a52e:	e01c      	b.n	800a56a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a534:	2b02      	cmp	r3, #2
 800a536:	d902      	bls.n	800a53e <DMA_CheckFifoParam+0xb6>
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d003      	beq.n	800a544 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a53c:	e018      	b.n	800a570 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	73fb      	strb	r3, [r7, #15]
        break;
 800a542:	e015      	b.n	800a570 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00e      	beq.n	800a56e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	73fb      	strb	r3, [r7, #15]
    break;
 800a554:	e00b      	b.n	800a56e <DMA_CheckFifoParam+0xe6>
        break;
 800a556:	bf00      	nop
 800a558:	e00a      	b.n	800a570 <DMA_CheckFifoParam+0xe8>
        break;
 800a55a:	bf00      	nop
 800a55c:	e008      	b.n	800a570 <DMA_CheckFifoParam+0xe8>
        break;
 800a55e:	bf00      	nop
 800a560:	e006      	b.n	800a570 <DMA_CheckFifoParam+0xe8>
        break;
 800a562:	bf00      	nop
 800a564:	e004      	b.n	800a570 <DMA_CheckFifoParam+0xe8>
        break;
 800a566:	bf00      	nop
 800a568:	e002      	b.n	800a570 <DMA_CheckFifoParam+0xe8>
        break;
 800a56a:	bf00      	nop
 800a56c:	e000      	b.n	800a570 <DMA_CheckFifoParam+0xe8>
    break;
 800a56e:	bf00      	nop
    }
  }

  return status;
 800a570:	7bfb      	ldrb	r3, [r7, #15]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop

0800a580 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a38      	ldr	r2, [pc, #224]	; (800a674 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d022      	beq.n	800a5de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a36      	ldr	r2, [pc, #216]	; (800a678 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d01d      	beq.n	800a5de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a35      	ldr	r2, [pc, #212]	; (800a67c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d018      	beq.n	800a5de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a33      	ldr	r2, [pc, #204]	; (800a680 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d013      	beq.n	800a5de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a32      	ldr	r2, [pc, #200]	; (800a684 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d00e      	beq.n	800a5de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a30      	ldr	r2, [pc, #192]	; (800a688 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d009      	beq.n	800a5de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a2f      	ldr	r2, [pc, #188]	; (800a68c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d004      	beq.n	800a5de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a2d      	ldr	r2, [pc, #180]	; (800a690 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d101      	bne.n	800a5e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e000      	b.n	800a5e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d01a      	beq.n	800a61e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	3b08      	subs	r3, #8
 800a5f0:	4a28      	ldr	r2, [pc, #160]	; (800a694 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f6:	091b      	lsrs	r3, r3, #4
 800a5f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	4b26      	ldr	r3, [pc, #152]	; (800a698 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a5fe:	4413      	add	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	461a      	mov	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a24      	ldr	r2, [pc, #144]	; (800a69c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a60c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f003 031f 	and.w	r3, r3, #31
 800a614:	2201      	movs	r2, #1
 800a616:	409a      	lsls	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a61c:	e024      	b.n	800a668 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	3b10      	subs	r3, #16
 800a626:	4a1e      	ldr	r2, [pc, #120]	; (800a6a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a628:	fba2 2303 	umull	r2, r3, r2, r3
 800a62c:	091b      	lsrs	r3, r3, #4
 800a62e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	4a1c      	ldr	r2, [pc, #112]	; (800a6a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d806      	bhi.n	800a646 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	4a1b      	ldr	r2, [pc, #108]	; (800a6a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d902      	bls.n	800a646 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3308      	adds	r3, #8
 800a644:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	4b18      	ldr	r3, [pc, #96]	; (800a6ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	461a      	mov	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a16      	ldr	r2, [pc, #88]	; (800a6b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a658:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f003 031f 	and.w	r3, r3, #31
 800a660:	2201      	movs	r2, #1
 800a662:	409a      	lsls	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a668:	bf00      	nop
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	58025408 	.word	0x58025408
 800a678:	5802541c 	.word	0x5802541c
 800a67c:	58025430 	.word	0x58025430
 800a680:	58025444 	.word	0x58025444
 800a684:	58025458 	.word	0x58025458
 800a688:	5802546c 	.word	0x5802546c
 800a68c:	58025480 	.word	0x58025480
 800a690:	58025494 	.word	0x58025494
 800a694:	cccccccd 	.word	0xcccccccd
 800a698:	16009600 	.word	0x16009600
 800a69c:	58025880 	.word	0x58025880
 800a6a0:	aaaaaaab 	.word	0xaaaaaaab
 800a6a4:	400204b8 	.word	0x400204b8
 800a6a8:	4002040f 	.word	0x4002040f
 800a6ac:	10008200 	.word	0x10008200
 800a6b0:	40020880 	.word	0x40020880

0800a6b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d04a      	beq.n	800a760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d847      	bhi.n	800a760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a25      	ldr	r2, [pc, #148]	; (800a76c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d022      	beq.n	800a720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a24      	ldr	r2, [pc, #144]	; (800a770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d01d      	beq.n	800a720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a22      	ldr	r2, [pc, #136]	; (800a774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d018      	beq.n	800a720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a21      	ldr	r2, [pc, #132]	; (800a778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d013      	beq.n	800a720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a1f      	ldr	r2, [pc, #124]	; (800a77c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d00e      	beq.n	800a720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a1e      	ldr	r2, [pc, #120]	; (800a780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d009      	beq.n	800a720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a1c      	ldr	r2, [pc, #112]	; (800a784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d004      	beq.n	800a720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a1b      	ldr	r2, [pc, #108]	; (800a788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d101      	bne.n	800a724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a720:	2301      	movs	r3, #1
 800a722:	e000      	b.n	800a726 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a724:	2300      	movs	r3, #0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00a      	beq.n	800a740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	4b17      	ldr	r3, [pc, #92]	; (800a78c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a72e:	4413      	add	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	461a      	mov	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a15      	ldr	r2, [pc, #84]	; (800a790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a73c:	671a      	str	r2, [r3, #112]	; 0x70
 800a73e:	e009      	b.n	800a754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	4b14      	ldr	r3, [pc, #80]	; (800a794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a744:	4413      	add	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	461a      	mov	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a11      	ldr	r2, [pc, #68]	; (800a798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a752:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	3b01      	subs	r3, #1
 800a758:	2201      	movs	r2, #1
 800a75a:	409a      	lsls	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a760:	bf00      	nop
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	58025408 	.word	0x58025408
 800a770:	5802541c 	.word	0x5802541c
 800a774:	58025430 	.word	0x58025430
 800a778:	58025444 	.word	0x58025444
 800a77c:	58025458 	.word	0x58025458
 800a780:	5802546c 	.word	0x5802546c
 800a784:	58025480 	.word	0x58025480
 800a788:	58025494 	.word	0x58025494
 800a78c:	1600963f 	.word	0x1600963f
 800a790:	58025940 	.word	0x58025940
 800a794:	1000823f 	.word	0x1000823f
 800a798:	40020940 	.word	0x40020940

0800a79c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b08a      	sub	sp, #40	; 0x28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a7b0:	2308      	movs	r3, #8
 800a7b2:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a7b4:	4b40      	ldr	r3, [pc, #256]	; (800a8b8 <HAL_FLASH_Program+0x11c>)
 800a7b6:	7d1b      	ldrb	r3, [r3, #20]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d101      	bne.n	800a7c0 <HAL_FLASH_Program+0x24>
 800a7bc:	2302      	movs	r3, #2
 800a7be:	e076      	b.n	800a8ae <HAL_FLASH_Program+0x112>
 800a7c0:	4b3d      	ldr	r3, [pc, #244]	; (800a8b8 <HAL_FLASH_Program+0x11c>)
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7cc:	d306      	bcc.n	800a7dc <HAL_FLASH_Program+0x40>
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a7d4:	d202      	bcs.n	800a7dc <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800a7da:	e00c      	b.n	800a7f6 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a7e2:	d306      	bcc.n	800a7f2 <HAL_FLASH_Program+0x56>
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800a7ea:	d202      	bcs.n	800a7f2 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	61bb      	str	r3, [r7, #24]
 800a7f0:	e001      	b.n	800a7f6 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e05b      	b.n	800a8ae <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a7f6:	4b30      	ldr	r3, [pc, #192]	; (800a8b8 <HAL_FLASH_Program+0x11c>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a7fc:	69b9      	ldr	r1, [r7, #24]
 800a7fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a802:	f000 f897 	bl	800a934 <FLASH_WaitForLastOperation>
 800a806:	4603      	mov	r3, r0
 800a808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800a80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a810:	2b00      	cmp	r3, #0
 800a812:	d147      	bne.n	800a8a4 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d106      	bne.n	800a828 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a81a:	4b28      	ldr	r3, [pc, #160]	; (800a8bc <HAL_FLASH_Program+0x120>)
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	4a27      	ldr	r2, [pc, #156]	; (800a8bc <HAL_FLASH_Program+0x120>)
 800a820:	f043 0302 	orr.w	r3, r3, #2
 800a824:	60d3      	str	r3, [r2, #12]
 800a826:	e007      	b.n	800a838 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800a828:	4b24      	ldr	r3, [pc, #144]	; (800a8bc <HAL_FLASH_Program+0x120>)
 800a82a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a82e:	4a23      	ldr	r2, [pc, #140]	; (800a8bc <HAL_FLASH_Program+0x120>)
 800a830:	f043 0302 	orr.w	r3, r3, #2
 800a834:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800a838:	f3bf 8f6f 	isb	sy
}
 800a83c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a83e:	f3bf 8f4f 	dsb	sy
}
 800a842:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	3304      	adds	r3, #4
 800a850:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	3304      	adds	r3, #4
 800a856:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1ef      	bne.n	800a844 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800a864:	f3bf 8f6f 	isb	sy
}
 800a868:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a86a:	f3bf 8f4f 	dsb	sy
}
 800a86e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a870:	69b9      	ldr	r1, [r7, #24]
 800a872:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a876:	f000 f85d 	bl	800a934 <FLASH_WaitForLastOperation>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d106      	bne.n	800a894 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a886:	4b0d      	ldr	r3, [pc, #52]	; (800a8bc <HAL_FLASH_Program+0x120>)
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	4a0c      	ldr	r2, [pc, #48]	; (800a8bc <HAL_FLASH_Program+0x120>)
 800a88c:	f023 0302 	bic.w	r3, r3, #2
 800a890:	60d3      	str	r3, [r2, #12]
 800a892:	e007      	b.n	800a8a4 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800a894:	4b09      	ldr	r3, [pc, #36]	; (800a8bc <HAL_FLASH_Program+0x120>)
 800a896:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a89a:	4a08      	ldr	r2, [pc, #32]	; (800a8bc <HAL_FLASH_Program+0x120>)
 800a89c:	f023 0302 	bic.w	r3, r3, #2
 800a8a0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a8a4:	4b04      	ldr	r3, [pc, #16]	; (800a8b8 <HAL_FLASH_Program+0x11c>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	751a      	strb	r2, [r3, #20]

  return status;
 800a8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3728      	adds	r7, #40	; 0x28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	24001fa0 	.word	0x24001fa0
 800a8bc:	52002000 	.word	0x52002000

0800a8c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a8c4:	4b18      	ldr	r3, [pc, #96]	; (800a928 <HAL_FLASH_Unlock+0x68>)
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00d      	beq.n	800a8ec <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800a8d0:	4b15      	ldr	r3, [pc, #84]	; (800a928 <HAL_FLASH_Unlock+0x68>)
 800a8d2:	4a16      	ldr	r2, [pc, #88]	; (800a92c <HAL_FLASH_Unlock+0x6c>)
 800a8d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800a8d6:	4b14      	ldr	r3, [pc, #80]	; (800a928 <HAL_FLASH_Unlock+0x68>)
 800a8d8:	4a15      	ldr	r2, [pc, #84]	; (800a930 <HAL_FLASH_Unlock+0x70>)
 800a8da:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a8dc:	4b12      	ldr	r3, [pc, #72]	; (800a928 <HAL_FLASH_Unlock+0x68>)
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f003 0301 	and.w	r3, r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e018      	b.n	800a91e <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800a8ec:	4b0e      	ldr	r3, [pc, #56]	; (800a928 <HAL_FLASH_Unlock+0x68>)
 800a8ee:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d010      	beq.n	800a91c <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800a8fa:	4b0b      	ldr	r3, [pc, #44]	; (800a928 <HAL_FLASH_Unlock+0x68>)
 800a8fc:	4a0b      	ldr	r2, [pc, #44]	; (800a92c <HAL_FLASH_Unlock+0x6c>)
 800a8fe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800a902:	4b09      	ldr	r3, [pc, #36]	; (800a928 <HAL_FLASH_Unlock+0x68>)
 800a904:	4a0a      	ldr	r2, [pc, #40]	; (800a930 <HAL_FLASH_Unlock+0x70>)
 800a906:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800a90a:	4b07      	ldr	r3, [pc, #28]	; (800a928 <HAL_FLASH_Unlock+0x68>)
 800a90c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e000      	b.n	800a91e <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr
 800a928:	52002000 	.word	0x52002000
 800a92c:	45670123 	.word	0x45670123
 800a930:	cdef89ab 	.word	0xcdef89ab

0800a934 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800a93e:	2304      	movs	r3, #4
 800a940:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800a946:	f7fa ff33 	bl	80057b0 <HAL_GetTick>
 800a94a:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d113      	bne.n	800a97a <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800a952:	4b41      	ldr	r3, [pc, #260]	; (800aa58 <FLASH_WaitForLastOperation+0x124>)
 800a954:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a956:	e010      	b.n	800a97a <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a95e:	d00c      	beq.n	800a97a <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a960:	f7fa ff26 	bl	80057b0 <HAL_GetTick>
 800a964:	4602      	mov	r2, r0
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d302      	bcc.n	800a976 <FLASH_WaitForLastOperation+0x42>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800a976:	2303      	movs	r3, #3
 800a978:	e06a      	b.n	800aa50 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	4b37      	ldr	r3, [pc, #220]	; (800aa5c <FLASH_WaitForLastOperation+0x128>)
 800a97e:	4013      	ands	r3, r2
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	429a      	cmp	r2, r3
 800a984:	d10a      	bne.n	800a99c <FLASH_WaitForLastOperation+0x68>
 800a986:	4b36      	ldr	r3, [pc, #216]	; (800aa60 <FLASH_WaitForLastOperation+0x12c>)
 800a988:	691a      	ldr	r2, [r3, #16]
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	4013      	ands	r3, r2
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	429a      	cmp	r2, r3
 800a992:	bf0c      	ite	eq
 800a994:	2301      	moveq	r3, #1
 800a996:	2300      	movne	r3, #0
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	e00c      	b.n	800a9b6 <FLASH_WaitForLastOperation+0x82>
 800a99c:	4b30      	ldr	r3, [pc, #192]	; (800aa60 <FLASH_WaitForLastOperation+0x12c>)
 800a99e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a9a2:	43da      	mvns	r2, r3
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	bf0c      	ite	eq
 800a9b0:	2301      	moveq	r3, #1
 800a9b2:	2300      	movne	r3, #0
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1ce      	bne.n	800a958 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d105      	bne.n	800a9cc <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a9c0:	4b27      	ldr	r3, [pc, #156]	; (800aa60 <FLASH_WaitForLastOperation+0x12c>)
 800a9c2:	691a      	ldr	r2, [r3, #16]
 800a9c4:	4b27      	ldr	r3, [pc, #156]	; (800aa64 <FLASH_WaitForLastOperation+0x130>)
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	613b      	str	r3, [r7, #16]
 800a9ca:	e007      	b.n	800a9dc <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800a9cc:	4b24      	ldr	r3, [pc, #144]	; (800aa60 <FLASH_WaitForLastOperation+0x12c>)
 800a9ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800a9d2:	4b24      	ldr	r3, [pc, #144]	; (800aa64 <FLASH_WaitForLastOperation+0x130>)
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a9da:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d017      	beq.n	800aa16 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a9e6:	4b20      	ldr	r3, [pc, #128]	; (800aa68 <FLASH_WaitForLastOperation+0x134>)
 800a9e8:	699a      	ldr	r2, [r3, #24]
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	4a1e      	ldr	r2, [pc, #120]	; (800aa68 <FLASH_WaitForLastOperation+0x134>)
 800a9f0:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	4b19      	ldr	r3, [pc, #100]	; (800aa5c <FLASH_WaitForLastOperation+0x128>)
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d103      	bne.n	800aa06 <FLASH_WaitForLastOperation+0xd2>
 800a9fe:	4a18      	ldr	r2, [pc, #96]	; (800aa60 <FLASH_WaitForLastOperation+0x12c>)
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	6153      	str	r3, [r2, #20]
 800aa04:	e005      	b.n	800aa12 <FLASH_WaitForLastOperation+0xde>
 800aa06:	4a16      	ldr	r2, [pc, #88]	; (800aa60 <FLASH_WaitForLastOperation+0x12c>)
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa0e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e01c      	b.n	800aa50 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d10b      	bne.n	800aa34 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800aa1c:	4b10      	ldr	r3, [pc, #64]	; (800aa60 <FLASH_WaitForLastOperation+0x12c>)
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa28:	d111      	bne.n	800aa4e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800aa2a:	4b0d      	ldr	r3, [pc, #52]	; (800aa60 <FLASH_WaitForLastOperation+0x12c>)
 800aa2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aa30:	615a      	str	r2, [r3, #20]
 800aa32:	e00c      	b.n	800aa4e <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800aa34:	4b0a      	ldr	r3, [pc, #40]	; (800aa60 <FLASH_WaitForLastOperation+0x12c>)
 800aa36:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800aa3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa42:	d104      	bne.n	800aa4e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800aa44:	4b06      	ldr	r3, [pc, #24]	; (800aa60 <FLASH_WaitForLastOperation+0x12c>)
 800aa46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aa4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3718      	adds	r7, #24
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	80000004 	.word	0x80000004
 800aa5c:	1fef000f 	.word	0x1fef000f
 800aa60:	52002000 	.word	0x52002000
 800aa64:	17ee0000 	.word	0x17ee0000
 800aa68:	24001fa0 	.word	0x24001fa0

0800aa6c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aa7a:	4b5e      	ldr	r3, [pc, #376]	; (800abf4 <HAL_FLASHEx_Erase+0x188>)
 800aa7c:	7d1b      	ldrb	r3, [r3, #20]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d101      	bne.n	800aa86 <HAL_FLASHEx_Erase+0x1a>
 800aa82:	2302      	movs	r3, #2
 800aa84:	e0b2      	b.n	800abec <HAL_FLASHEx_Erase+0x180>
 800aa86:	4b5b      	ldr	r3, [pc, #364]	; (800abf4 <HAL_FLASHEx_Erase+0x188>)
 800aa88:	2201      	movs	r2, #1
 800aa8a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aa8c:	4b59      	ldr	r3, [pc, #356]	; (800abf4 <HAL_FLASHEx_Erase+0x188>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d009      	beq.n	800aab2 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aaa4:	f7ff ff46 	bl	800a934 <FLASH_WaitForLastOperation>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	f003 0302 	and.w	r3, r3, #2
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d009      	beq.n	800aad2 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800aabe:	2102      	movs	r1, #2
 800aac0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aac4:	f7ff ff36 	bl	800a934 <FLASH_WaitForLastOperation>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d001      	beq.n	800aad2 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f040 8085 	bne.w	800abe4 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d136      	bne.n	800ab50 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	691a      	ldr	r2, [r3, #16]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	4619      	mov	r1, r3
 800aaec:	4610      	mov	r0, r2
 800aaee:	f000 f887 	bl	800ac00 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00f      	beq.n	800ab1e <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800aafe:	2101      	movs	r1, #1
 800ab00:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab04:	f7ff ff16 	bl	800a934 <FLASH_WaitForLastOperation>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800ab12:	4b39      	ldr	r3, [pc, #228]	; (800abf8 <HAL_FLASHEx_Erase+0x18c>)
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	4a38      	ldr	r2, [pc, #224]	; (800abf8 <HAL_FLASHEx_Erase+0x18c>)
 800ab18:	f023 0308 	bic.w	r3, r3, #8
 800ab1c:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	f003 0302 	and.w	r3, r3, #2
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d05c      	beq.n	800abe4 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800ab2a:	2102      	movs	r1, #2
 800ab2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab30:	f7ff ff00 	bl	800a934 <FLASH_WaitForLastOperation>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800ab3e:	4b2e      	ldr	r3, [pc, #184]	; (800abf8 <HAL_FLASHEx_Erase+0x18c>)
 800ab40:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ab44:	4a2c      	ldr	r2, [pc, #176]	; (800abf8 <HAL_FLASHEx_Erase+0x18c>)
 800ab46:	f023 0308 	bic.w	r3, r3, #8
 800ab4a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800ab4e:	e049      	b.n	800abe4 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab56:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	60bb      	str	r3, [r7, #8]
 800ab5e:	e039      	b.n	800abd4 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6859      	ldr	r1, [r3, #4]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	68b8      	ldr	r0, [r7, #8]
 800ab6c:	f000 f8b2 	bl	800acd4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00c      	beq.n	800ab96 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab82:	f7ff fed7 	bl	800a934 <FLASH_WaitForLastOperation>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800ab8a:	4b1b      	ldr	r3, [pc, #108]	; (800abf8 <HAL_FLASHEx_Erase+0x18c>)
 800ab8c:	68da      	ldr	r2, [r3, #12]
 800ab8e:	491a      	ldr	r1, [pc, #104]	; (800abf8 <HAL_FLASHEx_Erase+0x18c>)
 800ab90:	4b1a      	ldr	r3, [pc, #104]	; (800abfc <HAL_FLASHEx_Erase+0x190>)
 800ab92:	4013      	ands	r3, r2
 800ab94:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f003 0302 	and.w	r3, r3, #2
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00e      	beq.n	800abc0 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800aba2:	2102      	movs	r1, #2
 800aba4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aba8:	f7ff fec4 	bl	800a934 <FLASH_WaitForLastOperation>
 800abac:	4603      	mov	r3, r0
 800abae:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800abb0:	4b11      	ldr	r3, [pc, #68]	; (800abf8 <HAL_FLASHEx_Erase+0x18c>)
 800abb2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800abb6:	4910      	ldr	r1, [pc, #64]	; (800abf8 <HAL_FLASHEx_Erase+0x18c>)
 800abb8:	4b10      	ldr	r3, [pc, #64]	; (800abfc <HAL_FLASHEx_Erase+0x190>)
 800abba:	4013      	ands	r3, r2
 800abbc:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d003      	beq.n	800abce <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	601a      	str	r2, [r3, #0]
          break;
 800abcc:	e00a      	b.n	800abe4 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	3301      	adds	r3, #1
 800abd2:	60bb      	str	r3, [r7, #8]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	4413      	add	r3, r2
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d3bd      	bcc.n	800ab60 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800abe4:	4b03      	ldr	r3, [pc, #12]	; (800abf4 <HAL_FLASHEx_Erase+0x188>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	751a      	strb	r2, [r3, #20]

  return status;
 800abea:	7bfb      	ldrb	r3, [r7, #15]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	24001fa0 	.word	0x24001fa0
 800abf8:	52002000 	.word	0x52002000
 800abfc:	fffff8fb 	.word	0xfffff8fb

0800ac00 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	f003 0303 	and.w	r3, r3, #3
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d122      	bne.n	800ac5a <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ac14:	4b2e      	ldr	r3, [pc, #184]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	4a2d      	ldr	r2, [pc, #180]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ac1e:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800ac20:	4b2b      	ldr	r3, [pc, #172]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac22:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac26:	4a2a      	ldr	r2, [pc, #168]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac28:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ac2c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800ac30:	4b27      	ldr	r3, [pc, #156]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac32:	68da      	ldr	r2, [r3, #12]
 800ac34:	4926      	ldr	r1, [pc, #152]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800ac3c:	4b24      	ldr	r3, [pc, #144]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac3e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ac42:	4923      	ldr	r1, [pc, #140]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800ac4c:	4b20      	ldr	r3, [pc, #128]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac4e:	699b      	ldr	r3, [r3, #24]
 800ac50:	4a1f      	ldr	r2, [pc, #124]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac52:	f043 0310 	orr.w	r3, r3, #16
 800ac56:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800ac58:	e033      	b.n	800acc2 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	f003 0301 	and.w	r3, r3, #1
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d011      	beq.n	800ac88 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ac64:	4b1a      	ldr	r3, [pc, #104]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	4a19      	ldr	r2, [pc, #100]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ac6e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800ac70:	4b17      	ldr	r3, [pc, #92]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac72:	68da      	ldr	r2, [r3, #12]
 800ac74:	4916      	ldr	r1, [pc, #88]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800ac7c:	4b14      	ldr	r3, [pc, #80]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	4a13      	ldr	r2, [pc, #76]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac82:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800ac86:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	f003 0302 	and.w	r3, r3, #2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d017      	beq.n	800acc2 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800ac92:	4b0f      	ldr	r3, [pc, #60]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac94:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac98:	4a0d      	ldr	r2, [pc, #52]	; (800acd0 <FLASH_MassErase+0xd0>)
 800ac9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ac9e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800aca2:	4b0b      	ldr	r3, [pc, #44]	; (800acd0 <FLASH_MassErase+0xd0>)
 800aca4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800aca8:	4909      	ldr	r1, [pc, #36]	; (800acd0 <FLASH_MassErase+0xd0>)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4313      	orrs	r3, r2
 800acae:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800acb2:	4b07      	ldr	r3, [pc, #28]	; (800acd0 <FLASH_MassErase+0xd0>)
 800acb4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800acb8:	4a05      	ldr	r2, [pc, #20]	; (800acd0 <FLASH_MassErase+0xd0>)
 800acba:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800acbe:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	52002000 	.word	0x52002000

0800acd4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f003 0301 	and.w	r3, r3, #1
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d010      	beq.n	800ad0c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800acea:	4b18      	ldr	r3, [pc, #96]	; (800ad4c <FLASH_Erase_Sector+0x78>)
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	4a17      	ldr	r2, [pc, #92]	; (800ad4c <FLASH_Erase_Sector+0x78>)
 800acf0:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800acf4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800acf6:	4b15      	ldr	r3, [pc, #84]	; (800ad4c <FLASH_Erase_Sector+0x78>)
 800acf8:	68da      	ldr	r2, [r3, #12]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	0219      	lsls	r1, r3, #8
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	430b      	orrs	r3, r1
 800ad02:	4313      	orrs	r3, r2
 800ad04:	4a11      	ldr	r2, [pc, #68]	; (800ad4c <FLASH_Erase_Sector+0x78>)
 800ad06:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ad0a:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d014      	beq.n	800ad40 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ad16:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <FLASH_Erase_Sector+0x78>)
 800ad18:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ad1c:	4a0b      	ldr	r2, [pc, #44]	; (800ad4c <FLASH_Erase_Sector+0x78>)
 800ad1e:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ad22:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ad26:	4b09      	ldr	r3, [pc, #36]	; (800ad4c <FLASH_Erase_Sector+0x78>)
 800ad28:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	0219      	lsls	r1, r3, #8
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	430b      	orrs	r3, r1
 800ad34:	4313      	orrs	r3, r2
 800ad36:	4a05      	ldr	r2, [pc, #20]	; (800ad4c <FLASH_Erase_Sector+0x78>)
 800ad38:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ad3c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800ad40:	bf00      	nop
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	52002000 	.word	0x52002000

0800ad50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b089      	sub	sp, #36	; 0x24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ad5e:	4b89      	ldr	r3, [pc, #548]	; (800af84 <HAL_GPIO_Init+0x234>)
 800ad60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ad62:	e194      	b.n	800b08e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	2101      	movs	r1, #1
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad70:	4013      	ands	r3, r2
 800ad72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 8186 	beq.w	800b088 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	f003 0303 	and.w	r3, r3, #3
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d005      	beq.n	800ad94 <HAL_GPIO_Init+0x44>
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	f003 0303 	and.w	r3, r3, #3
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d130      	bne.n	800adf6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	2203      	movs	r2, #3
 800ada0:	fa02 f303 	lsl.w	r3, r2, r3
 800ada4:	43db      	mvns	r3, r3
 800ada6:	69ba      	ldr	r2, [r7, #24]
 800ada8:	4013      	ands	r3, r2
 800adaa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68da      	ldr	r2, [r3, #12]
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	005b      	lsls	r3, r3, #1
 800adb4:	fa02 f303 	lsl.w	r3, r2, r3
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	4313      	orrs	r3, r2
 800adbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	69ba      	ldr	r2, [r7, #24]
 800adc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800adca:	2201      	movs	r2, #1
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	fa02 f303 	lsl.w	r3, r2, r3
 800add2:	43db      	mvns	r3, r3
 800add4:	69ba      	ldr	r2, [r7, #24]
 800add6:	4013      	ands	r3, r2
 800add8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	091b      	lsrs	r3, r3, #4
 800ade0:	f003 0201 	and.w	r2, r3, #1
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	fa02 f303 	lsl.w	r3, r2, r3
 800adea:	69ba      	ldr	r2, [r7, #24]
 800adec:	4313      	orrs	r3, r2
 800adee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f003 0303 	and.w	r3, r3, #3
 800adfe:	2b03      	cmp	r3, #3
 800ae00:	d017      	beq.n	800ae32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	005b      	lsls	r3, r3, #1
 800ae0c:	2203      	movs	r2, #3
 800ae0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae12:	43db      	mvns	r3, r3
 800ae14:	69ba      	ldr	r2, [r7, #24]
 800ae16:	4013      	ands	r3, r2
 800ae18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	689a      	ldr	r2, [r3, #8]
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	005b      	lsls	r3, r3, #1
 800ae22:	fa02 f303 	lsl.w	r3, r2, r3
 800ae26:	69ba      	ldr	r2, [r7, #24]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	f003 0303 	and.w	r3, r3, #3
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d123      	bne.n	800ae86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	08da      	lsrs	r2, r3, #3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	3208      	adds	r2, #8
 800ae46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	f003 0307 	and.w	r3, r3, #7
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	220f      	movs	r2, #15
 800ae56:	fa02 f303 	lsl.w	r3, r2, r3
 800ae5a:	43db      	mvns	r3, r3
 800ae5c:	69ba      	ldr	r2, [r7, #24]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	691a      	ldr	r2, [r3, #16]
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	f003 0307 	and.w	r3, r3, #7
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae72:	69ba      	ldr	r2, [r7, #24]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	08da      	lsrs	r2, r3, #3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	3208      	adds	r2, #8
 800ae80:	69b9      	ldr	r1, [r7, #24]
 800ae82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	2203      	movs	r2, #3
 800ae92:	fa02 f303 	lsl.w	r3, r2, r3
 800ae96:	43db      	mvns	r3, r3
 800ae98:	69ba      	ldr	r2, [r7, #24]
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f003 0203 	and.w	r2, r3, #3
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	005b      	lsls	r3, r3, #1
 800aeaa:	fa02 f303 	lsl.w	r3, r2, r3
 800aeae:	69ba      	ldr	r2, [r7, #24]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	69ba      	ldr	r2, [r7, #24]
 800aeb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 80e0 	beq.w	800b088 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aec8:	4b2f      	ldr	r3, [pc, #188]	; (800af88 <HAL_GPIO_Init+0x238>)
 800aeca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aece:	4a2e      	ldr	r2, [pc, #184]	; (800af88 <HAL_GPIO_Init+0x238>)
 800aed0:	f043 0302 	orr.w	r3, r3, #2
 800aed4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800aed8:	4b2b      	ldr	r3, [pc, #172]	; (800af88 <HAL_GPIO_Init+0x238>)
 800aeda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aede:	f003 0302 	and.w	r3, r3, #2
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aee6:	4a29      	ldr	r2, [pc, #164]	; (800af8c <HAL_GPIO_Init+0x23c>)
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	089b      	lsrs	r3, r3, #2
 800aeec:	3302      	adds	r3, #2
 800aeee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	f003 0303 	and.w	r3, r3, #3
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	220f      	movs	r2, #15
 800aefe:	fa02 f303 	lsl.w	r3, r2, r3
 800af02:	43db      	mvns	r3, r3
 800af04:	69ba      	ldr	r2, [r7, #24]
 800af06:	4013      	ands	r3, r2
 800af08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a20      	ldr	r2, [pc, #128]	; (800af90 <HAL_GPIO_Init+0x240>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d052      	beq.n	800afb8 <HAL_GPIO_Init+0x268>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a1f      	ldr	r2, [pc, #124]	; (800af94 <HAL_GPIO_Init+0x244>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d031      	beq.n	800af7e <HAL_GPIO_Init+0x22e>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a1e      	ldr	r2, [pc, #120]	; (800af98 <HAL_GPIO_Init+0x248>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d02b      	beq.n	800af7a <HAL_GPIO_Init+0x22a>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a1d      	ldr	r2, [pc, #116]	; (800af9c <HAL_GPIO_Init+0x24c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d025      	beq.n	800af76 <HAL_GPIO_Init+0x226>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a1c      	ldr	r2, [pc, #112]	; (800afa0 <HAL_GPIO_Init+0x250>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d01f      	beq.n	800af72 <HAL_GPIO_Init+0x222>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a1b      	ldr	r2, [pc, #108]	; (800afa4 <HAL_GPIO_Init+0x254>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d019      	beq.n	800af6e <HAL_GPIO_Init+0x21e>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a1a      	ldr	r2, [pc, #104]	; (800afa8 <HAL_GPIO_Init+0x258>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d013      	beq.n	800af6a <HAL_GPIO_Init+0x21a>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4a19      	ldr	r2, [pc, #100]	; (800afac <HAL_GPIO_Init+0x25c>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d00d      	beq.n	800af66 <HAL_GPIO_Init+0x216>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4a18      	ldr	r2, [pc, #96]	; (800afb0 <HAL_GPIO_Init+0x260>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d007      	beq.n	800af62 <HAL_GPIO_Init+0x212>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a17      	ldr	r2, [pc, #92]	; (800afb4 <HAL_GPIO_Init+0x264>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d101      	bne.n	800af5e <HAL_GPIO_Init+0x20e>
 800af5a:	2309      	movs	r3, #9
 800af5c:	e02d      	b.n	800afba <HAL_GPIO_Init+0x26a>
 800af5e:	230a      	movs	r3, #10
 800af60:	e02b      	b.n	800afba <HAL_GPIO_Init+0x26a>
 800af62:	2308      	movs	r3, #8
 800af64:	e029      	b.n	800afba <HAL_GPIO_Init+0x26a>
 800af66:	2307      	movs	r3, #7
 800af68:	e027      	b.n	800afba <HAL_GPIO_Init+0x26a>
 800af6a:	2306      	movs	r3, #6
 800af6c:	e025      	b.n	800afba <HAL_GPIO_Init+0x26a>
 800af6e:	2305      	movs	r3, #5
 800af70:	e023      	b.n	800afba <HAL_GPIO_Init+0x26a>
 800af72:	2304      	movs	r3, #4
 800af74:	e021      	b.n	800afba <HAL_GPIO_Init+0x26a>
 800af76:	2303      	movs	r3, #3
 800af78:	e01f      	b.n	800afba <HAL_GPIO_Init+0x26a>
 800af7a:	2302      	movs	r3, #2
 800af7c:	e01d      	b.n	800afba <HAL_GPIO_Init+0x26a>
 800af7e:	2301      	movs	r3, #1
 800af80:	e01b      	b.n	800afba <HAL_GPIO_Init+0x26a>
 800af82:	bf00      	nop
 800af84:	58000080 	.word	0x58000080
 800af88:	58024400 	.word	0x58024400
 800af8c:	58000400 	.word	0x58000400
 800af90:	58020000 	.word	0x58020000
 800af94:	58020400 	.word	0x58020400
 800af98:	58020800 	.word	0x58020800
 800af9c:	58020c00 	.word	0x58020c00
 800afa0:	58021000 	.word	0x58021000
 800afa4:	58021400 	.word	0x58021400
 800afa8:	58021800 	.word	0x58021800
 800afac:	58021c00 	.word	0x58021c00
 800afb0:	58022000 	.word	0x58022000
 800afb4:	58022400 	.word	0x58022400
 800afb8:	2300      	movs	r3, #0
 800afba:	69fa      	ldr	r2, [r7, #28]
 800afbc:	f002 0203 	and.w	r2, r2, #3
 800afc0:	0092      	lsls	r2, r2, #2
 800afc2:	4093      	lsls	r3, r2
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800afca:	4938      	ldr	r1, [pc, #224]	; (800b0ac <HAL_GPIO_Init+0x35c>)
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	089b      	lsrs	r3, r3, #2
 800afd0:	3302      	adds	r3, #2
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800afd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	43db      	mvns	r3, r3
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	4013      	ands	r3, r2
 800afe8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	4313      	orrs	r3, r2
 800affc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800affe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	43db      	mvns	r3, r3
 800b012:	69ba      	ldr	r2, [r7, #24]
 800b014:	4013      	ands	r3, r2
 800b016:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d003      	beq.n	800b02c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	4313      	orrs	r3, r2
 800b02a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b02c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	43db      	mvns	r3, r3
 800b03e:	69ba      	ldr	r2, [r7, #24]
 800b040:	4013      	ands	r3, r2
 800b042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b050:	69ba      	ldr	r2, [r7, #24]
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	4313      	orrs	r3, r2
 800b056:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	43db      	mvns	r3, r3
 800b068:	69ba      	ldr	r2, [r7, #24]
 800b06a:	4013      	ands	r3, r2
 800b06c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b07a:	69ba      	ldr	r2, [r7, #24]
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	4313      	orrs	r3, r2
 800b080:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	69ba      	ldr	r2, [r7, #24]
 800b086:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	3301      	adds	r3, #1
 800b08c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	fa22 f303 	lsr.w	r3, r2, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f47f ae63 	bne.w	800ad64 <HAL_GPIO_Init+0x14>
  }
}
 800b09e:	bf00      	nop
 800b0a0:	bf00      	nop
 800b0a2:	3724      	adds	r7, #36	; 0x24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	58000400 	.word	0x58000400

0800b0b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	691a      	ldr	r2, [r3, #16]
 800b0c0:	887b      	ldrh	r3, [r7, #2]
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	73fb      	strb	r3, [r7, #15]
 800b0cc:	e001      	b.n	800b0d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	807b      	strh	r3, [r7, #2]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b0f0:	787b      	ldrb	r3, [r7, #1]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b0f6:	887a      	ldrh	r2, [r7, #2]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b0fc:	e003      	b.n	800b106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b0fe:	887b      	ldrh	r3, [r7, #2]
 800b100:	041a      	lsls	r2, r3, #16
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	619a      	str	r2, [r3, #24]
}
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
	...

0800b114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d101      	bne.n	800b126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e08b      	b.n	800b23e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d106      	bne.n	800b140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7f7 fab6 	bl	80026ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2224      	movs	r2, #36	; 0x24
 800b144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f022 0201 	bic.w	r2, r2, #1
 800b156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b164:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	689a      	ldr	r2, [r3, #8]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b174:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d107      	bne.n	800b18e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689a      	ldr	r2, [r3, #8]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b18a:	609a      	str	r2, [r3, #8]
 800b18c:	e006      	b.n	800b19c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	689a      	ldr	r2, [r3, #8]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b19a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d108      	bne.n	800b1b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	685a      	ldr	r2, [r3, #4]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1b2:	605a      	str	r2, [r3, #4]
 800b1b4:	e007      	b.n	800b1c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	6859      	ldr	r1, [r3, #4]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	4b1d      	ldr	r3, [pc, #116]	; (800b248 <HAL_I2C_Init+0x134>)
 800b1d2:	430b      	orrs	r3, r1
 800b1d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68da      	ldr	r2, [r3, #12]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	691a      	ldr	r2, [r3, #16]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	69d9      	ldr	r1, [r3, #28]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a1a      	ldr	r2, [r3, #32]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	430a      	orrs	r2, r1
 800b20e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f042 0201 	orr.w	r2, r2, #1
 800b21e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2220      	movs	r2, #32
 800b22a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	02008000 	.word	0x02008000

0800b24c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08a      	sub	sp, #40	; 0x28
 800b250:	af02      	add	r7, sp, #8
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	607a      	str	r2, [r7, #4]
 800b256:	461a      	mov	r2, r3
 800b258:	460b      	mov	r3, r1
 800b25a:	817b      	strh	r3, [r7, #10]
 800b25c:	4613      	mov	r3, r2
 800b25e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b260:	2300      	movs	r3, #0
 800b262:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	2b20      	cmp	r3, #32
 800b26e:	f040 80ef 	bne.w	800b450 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b27c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b280:	d101      	bne.n	800b286 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b282:	2302      	movs	r3, #2
 800b284:	e0e5      	b.n	800b452 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d101      	bne.n	800b294 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b290:	2302      	movs	r3, #2
 800b292:	e0de      	b.n	800b452 <HAL_I2C_Master_Transmit_DMA+0x206>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2221      	movs	r2, #33	; 0x21
 800b2a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2210      	movs	r2, #16
 800b2a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	893a      	ldrh	r2, [r7, #8]
 800b2bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	4a66      	ldr	r2, [pc, #408]	; (800b45c <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b2c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	4a66      	ldr	r2, [pc, #408]	; (800b460 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b2c8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	2bff      	cmp	r3, #255	; 0xff
 800b2d2:	d906      	bls.n	800b2e2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	22ff      	movs	r2, #255	; 0xff
 800b2d8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b2da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2de:	61fb      	str	r3, [r7, #28]
 800b2e0:	e007      	b.n	800b2f2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b2ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2f0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d01a      	beq.n	800b330 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fe:	781a      	ldrb	r2, [r3, #0]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b314:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	3b01      	subs	r3, #1
 800b31e:	b29a      	uxth	r2, r3
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b328:	3b01      	subs	r3, #1
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b334:	2b00      	cmp	r3, #0
 800b336:	d074      	beq.n	800b422 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d022      	beq.n	800b386 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b344:	4a47      	ldr	r2, [pc, #284]	; (800b464 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b346:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34c:	4a46      	ldr	r2, [pc, #280]	; (800b468 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b34e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b354:	2200      	movs	r2, #0
 800b356:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35c:	2200      	movs	r2, #0
 800b35e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b368:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b370:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b376:	f7fc ff17 	bl	80081a8 <HAL_DMA_Start_IT>
 800b37a:	4603      	mov	r3, r0
 800b37c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d13a      	bne.n	800b3fa <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b384:	e013      	b.n	800b3ae <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2220      	movs	r2, #32
 800b38a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b39a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e051      	b.n	800b452 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	8979      	ldrh	r1, [r7, #10]
 800b3ba:	4b2c      	ldr	r3, [pc, #176]	; (800b46c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f002 f83b 	bl	800d43c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b3e0:	2110      	movs	r1, #16
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f002 f85c 	bl	800d4a0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3f6:	601a      	str	r2, [r3, #0]
 800b3f8:	e028      	b.n	800b44c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2220      	movs	r2, #32
 800b3fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b40e:	f043 0210 	orr.w	r2, r3, #16
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	e017      	b.n	800b452 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	4a12      	ldr	r2, [pc, #72]	; (800b470 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b426:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	8979      	ldrh	r1, [r7, #10]
 800b42e:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f002 f800 	bl	800d43c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b444:	2101      	movs	r1, #1
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f002 f82a 	bl	800d4a0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	e000      	b.n	800b452 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b450:	2302      	movs	r3, #2
  }
}
 800b452:	4618      	mov	r0, r3
 800b454:	3720      	adds	r7, #32
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	ffff0000 	.word	0xffff0000
 800b460:	0800bca7 	.word	0x0800bca7
 800b464:	0800d05f 	.word	0x0800d05f
 800b468:	0800d18d 	.word	0x0800d18d
 800b46c:	80002000 	.word	0x80002000
 800b470:	0800b837 	.word	0x0800b837

0800b474 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af02      	add	r7, sp, #8
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	607a      	str	r2, [r7, #4]
 800b47e:	461a      	mov	r2, r3
 800b480:	460b      	mov	r3, r1
 800b482:	817b      	strh	r3, [r7, #10]
 800b484:	4613      	mov	r3, r2
 800b486:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	2b20      	cmp	r3, #32
 800b492:	f040 80cd 	bne.w	800b630 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	699b      	ldr	r3, [r3, #24]
 800b49c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4a4:	d101      	bne.n	800b4aa <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	e0c3      	b.n	800b632 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d101      	bne.n	800b4b8 <HAL_I2C_Master_Receive_DMA+0x44>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	e0bc      	b.n	800b632 <HAL_I2C_Master_Receive_DMA+0x1be>
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2222      	movs	r2, #34	; 0x22
 800b4c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2210      	movs	r2, #16
 800b4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	893a      	ldrh	r2, [r7, #8]
 800b4e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	4a55      	ldr	r2, [pc, #340]	; (800b63c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800b4e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	4a55      	ldr	r2, [pc, #340]	; (800b640 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800b4ec:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	2bff      	cmp	r3, #255	; 0xff
 800b4f6:	d906      	bls.n	800b506 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	22ff      	movs	r2, #255	; 0xff
 800b4fc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b4fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b502:	617b      	str	r3, [r7, #20]
 800b504:	e007      	b.n	800b516 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b510:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b514:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d070      	beq.n	800b600 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b522:	2b00      	cmp	r3, #0
 800b524:	d020      	beq.n	800b568 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b52a:	4a46      	ldr	r2, [pc, #280]	; (800b644 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800b52c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b532:	4a45      	ldr	r2, [pc, #276]	; (800b648 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800b534:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b53a:	2200      	movs	r2, #0
 800b53c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b542:	2200      	movs	r2, #0
 800b544:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3324      	adds	r3, #36	; 0x24
 800b550:	4619      	mov	r1, r3
 800b552:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b558:	f7fc fe26 	bl	80081a8 <HAL_DMA_Start_IT>
 800b55c:	4603      	mov	r3, r0
 800b55e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b560:	7cfb      	ldrb	r3, [r7, #19]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d138      	bne.n	800b5d8 <HAL_I2C_Master_Receive_DMA+0x164>
 800b566:	e013      	b.n	800b590 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2220      	movs	r2, #32
 800b56c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b57c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2200      	movs	r2, #0
 800b588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e050      	b.n	800b632 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b594:	b2da      	uxtb	r2, r3
 800b596:	8979      	ldrh	r1, [r7, #10]
 800b598:	4b2c      	ldr	r3, [pc, #176]	; (800b64c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f001 ff4c 	bl	800d43c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b5be:	2110      	movs	r1, #16
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f001 ff6d 	bl	800d4a0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	e029      	b.n	800b62c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ec:	f043 0210 	orr.w	r2, r3, #16
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e018      	b.n	800b632 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	4a13      	ldr	r2, [pc, #76]	; (800b650 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800b604:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	8979      	ldrh	r1, [r7, #10]
 800b60e:	4b0f      	ldr	r3, [pc, #60]	; (800b64c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f001 ff10 	bl	800d43c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b624:	2102      	movs	r1, #2
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f001 ff3a 	bl	800d4a0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	e000      	b.n	800b632 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800b630:	2302      	movs	r3, #2
  }
}
 800b632:	4618      	mov	r0, r3
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	ffff0000 	.word	0xffff0000
 800b640:	0800bca7 	.word	0x0800bca7
 800b644:	0800d0f5 	.word	0x0800d0f5
 800b648:	0800d18d 	.word	0x0800d18d
 800b64c:	80002400 	.word	0x80002400
 800b650:	0800b837 	.word	0x0800b837

0800b654 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b670:	2b00      	cmp	r3, #0
 800b672:	d005      	beq.n	800b680 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	68f9      	ldr	r1, [r7, #12]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	4798      	blx	r3
  }
}
 800b680:	bf00      	nop
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	0a1b      	lsrs	r3, r3, #8
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d010      	beq.n	800b6ce <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	09db      	lsrs	r3, r3, #7
 800b6b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00a      	beq.n	800b6ce <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6bc:	f043 0201 	orr.w	r2, r3, #1
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b6cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	0a9b      	lsrs	r3, r3, #10
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d010      	beq.n	800b6fc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	09db      	lsrs	r3, r3, #7
 800b6de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00a      	beq.n	800b6fc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ea:	f043 0208 	orr.w	r2, r3, #8
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	0a5b      	lsrs	r3, r3, #9
 800b700:	f003 0301 	and.w	r3, r3, #1
 800b704:	2b00      	cmp	r3, #0
 800b706:	d010      	beq.n	800b72a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	09db      	lsrs	r3, r3, #7
 800b70c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00a      	beq.n	800b72a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b718:	f043 0202 	orr.w	r2, r3, #2
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b728:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b72e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f003 030b 	and.w	r3, r3, #11
 800b736:	2b00      	cmp	r3, #0
 800b738:	d003      	beq.n	800b742 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b73a:	68f9      	ldr	r1, [r7, #12]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f001 fb53 	bl	800cde8 <I2C_ITError>
  }
}
 800b742:	bf00      	nop
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b752:	bf00      	nop
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b75e:	b480      	push	{r7}
 800b760:	b083      	sub	sp, #12
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b766:	bf00      	nop
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b772:	b480      	push	{r7}
 800b774:	b083      	sub	sp, #12
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b77a:	bf00      	nop
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b78e:	bf00      	nop
 800b790:	370c      	adds	r7, #12
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b79a:	b480      	push	{r7}
 800b79c:	b083      	sub	sp, #12
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	70fb      	strb	r3, [r7, #3]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b7aa:	bf00      	nop
 800b7ac:	370c      	adds	r7, #12
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b083      	sub	sp, #12
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b7be:	bf00      	nop
 800b7c0:	370c      	adds	r7, #12
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b7d2:	bf00      	nop
 800b7d4:	370c      	adds	r7, #12
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b083      	sub	sp, #12
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b7e6:	bf00      	nop
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b083      	sub	sp, #12
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b7fa:	bf00      	nop
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b81a:	b480      	push	{r7}
 800b81c:	b083      	sub	sp, #12
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b828:	b2db      	uxtb	r3, r3
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b088      	sub	sp, #32
 800b83a:	af02      	add	r7, sp, #8
 800b83c:	60f8      	str	r0, [r7, #12]
 800b83e:	60b9      	str	r1, [r7, #8]
 800b840:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d101      	bne.n	800b854 <I2C_Master_ISR_IT+0x1e>
 800b850:	2302      	movs	r3, #2
 800b852:	e120      	b.n	800ba96 <I2C_Master_ISR_IT+0x260>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	091b      	lsrs	r3, r3, #4
 800b860:	f003 0301 	and.w	r3, r3, #1
 800b864:	2b00      	cmp	r3, #0
 800b866:	d013      	beq.n	800b890 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	091b      	lsrs	r3, r3, #4
 800b86c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00d      	beq.n	800b890 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2210      	movs	r2, #16
 800b87a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b880:	f043 0204 	orr.w	r2, r3, #4
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f001 fbc4 	bl	800d016 <I2C_Flush_TXDR>
 800b88e:	e0ed      	b.n	800ba6c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	089b      	lsrs	r3, r3, #2
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d023      	beq.n	800b8e4 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	089b      	lsrs	r3, r3, #2
 800b8a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d01d      	beq.n	800b8e4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f023 0304 	bic.w	r3, r3, #4
 800b8ae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	b2d2      	uxtb	r2, r2
 800b8bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	1c5a      	adds	r2, r3, #1
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8e2:	e0c3      	b.n	800ba6c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	099b      	lsrs	r3, r3, #6
 800b8e8:	f003 0301 	and.w	r3, r3, #1
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d12a      	bne.n	800b946 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	085b      	lsrs	r3, r3, #1
 800b8f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d024      	beq.n	800b946 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	085b      	lsrs	r3, r3, #1
 800b900:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b904:	2b00      	cmp	r3, #0
 800b906:	d01e      	beq.n	800b946 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f000 80ac 	beq.w	800ba6c <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b918:	781a      	ldrb	r2, [r3, #0]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b924:	1c5a      	adds	r2, r3, #1
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b92e:	3b01      	subs	r3, #1
 800b930:	b29a      	uxth	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	3b01      	subs	r3, #1
 800b93e:	b29a      	uxth	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800b944:	e092      	b.n	800ba6c <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	09db      	lsrs	r3, r3, #7
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d05d      	beq.n	800ba0e <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	099b      	lsrs	r3, r3, #6
 800b956:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d057      	beq.n	800ba0e <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b962:	b29b      	uxth	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	d040      	beq.n	800b9ea <I2C_Master_ISR_IT+0x1b4>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d13c      	bne.n	800b9ea <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	b29b      	uxth	r3, r3
 800b978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b97c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b982:	b29b      	uxth	r3, r3
 800b984:	2bff      	cmp	r3, #255	; 0xff
 800b986:	d90e      	bls.n	800b9a6 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	22ff      	movs	r2, #255	; 0xff
 800b98c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b992:	b2da      	uxtb	r2, r3
 800b994:	8a79      	ldrh	r1, [r7, #18]
 800b996:	2300      	movs	r3, #0
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f001 fd4c 	bl	800d43c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9a4:	e032      	b.n	800ba0c <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b9b8:	d00b      	beq.n	800b9d2 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c4:	8a79      	ldrh	r1, [r7, #18]
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	9000      	str	r0, [sp, #0]
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f001 fd36 	bl	800d43c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9d0:	e01c      	b.n	800ba0c <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	8a79      	ldrh	r1, [r7, #18]
 800b9da:	2300      	movs	r3, #0
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f001 fd2a 	bl	800d43c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9e8:	e010      	b.n	800ba0c <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9f8:	d003      	beq.n	800ba02 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f000 fdde 	bl	800c5bc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ba00:	e034      	b.n	800ba6c <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ba02:	2140      	movs	r1, #64	; 0x40
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f001 f9ef 	bl	800cde8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ba0a:	e02f      	b.n	800ba6c <I2C_Master_ISR_IT+0x236>
 800ba0c:	e02e      	b.n	800ba6c <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	099b      	lsrs	r3, r3, #6
 800ba12:	f003 0301 	and.w	r3, r3, #1
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d028      	beq.n	800ba6c <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	099b      	lsrs	r3, r3, #6
 800ba1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d022      	beq.n	800ba6c <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d119      	bne.n	800ba64 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba3e:	d015      	beq.n	800ba6c <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba48:	d108      	bne.n	800ba5c <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	685a      	ldr	r2, [r3, #4]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba58:	605a      	str	r2, [r3, #4]
 800ba5a:	e007      	b.n	800ba6c <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f000 fdad 	bl	800c5bc <I2C_ITMasterSeqCplt>
 800ba62:	e003      	b.n	800ba6c <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ba64:	2140      	movs	r1, #64	; 0x40
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f001 f9be 	bl	800cde8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	095b      	lsrs	r3, r3, #5
 800ba70:	f003 0301 	and.w	r3, r3, #1
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d009      	beq.n	800ba8c <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	095b      	lsrs	r3, r3, #5
 800ba7c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d003      	beq.n	800ba8c <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800ba84:	6979      	ldr	r1, [r7, #20]
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f000 fe34 	bl	800c6f4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b086      	sub	sp, #24
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	60f8      	str	r0, [r7, #12]
 800baa6:	60b9      	str	r1, [r7, #8]
 800baa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baae:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800baba:	2b01      	cmp	r3, #1
 800babc:	d101      	bne.n	800bac2 <I2C_Slave_ISR_IT+0x24>
 800babe:	2302      	movs	r3, #2
 800bac0:	e0ed      	b.n	800bc9e <I2C_Slave_ISR_IT+0x200>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	095b      	lsrs	r3, r3, #5
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00a      	beq.n	800baec <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	095b      	lsrs	r3, r3, #5
 800bada:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d004      	beq.n	800baec <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bae2:	6939      	ldr	r1, [r7, #16]
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f000 fecf 	bl	800c888 <I2C_ITSlaveCplt>
 800baea:	e0d3      	b.n	800bc94 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	091b      	lsrs	r3, r3, #4
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d04d      	beq.n	800bb94 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	091b      	lsrs	r3, r3, #4
 800bafc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d047      	beq.n	800bb94 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d128      	bne.n	800bb60 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b28      	cmp	r3, #40	; 0x28
 800bb18:	d108      	bne.n	800bb2c <I2C_Slave_ISR_IT+0x8e>
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb20:	d104      	bne.n	800bb2c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bb22:	6939      	ldr	r1, [r7, #16]
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f001 f909 	bl	800cd3c <I2C_ITListenCplt>
 800bb2a:	e032      	b.n	800bb92 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b29      	cmp	r3, #41	; 0x29
 800bb36:	d10e      	bne.n	800bb56 <I2C_Slave_ISR_IT+0xb8>
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb3e:	d00a      	beq.n	800bb56 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2210      	movs	r2, #16
 800bb46:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f001 fa64 	bl	800d016 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f000 fd71 	bl	800c636 <I2C_ITSlaveSeqCplt>
 800bb54:	e01d      	b.n	800bb92 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2210      	movs	r2, #16
 800bb5c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bb5e:	e096      	b.n	800bc8e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2210      	movs	r2, #16
 800bb66:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb6c:	f043 0204 	orr.w	r2, r3, #4
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d004      	beq.n	800bb84 <I2C_Slave_ISR_IT+0xe6>
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bb80:	f040 8085 	bne.w	800bc8e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb88:	4619      	mov	r1, r3
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f001 f92c 	bl	800cde8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bb90:	e07d      	b.n	800bc8e <I2C_Slave_ISR_IT+0x1f0>
 800bb92:	e07c      	b.n	800bc8e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	089b      	lsrs	r3, r3, #2
 800bb98:	f003 0301 	and.w	r3, r3, #1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d030      	beq.n	800bc02 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	089b      	lsrs	r3, r3, #2
 800bba4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d02a      	beq.n	800bc02 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d018      	beq.n	800bbe8 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc0:	b2d2      	uxtb	r2, r2
 800bbc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc8:	1c5a      	adds	r2, r3, #1
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d14f      	bne.n	800bc92 <I2C_Slave_ISR_IT+0x1f4>
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bbf8:	d04b      	beq.n	800bc92 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f000 fd1b 	bl	800c636 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bc00:	e047      	b.n	800bc92 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	08db      	lsrs	r3, r3, #3
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00a      	beq.n	800bc24 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	08db      	lsrs	r3, r3, #3
 800bc12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d004      	beq.n	800bc24 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bc1a:	6939      	ldr	r1, [r7, #16]
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f000 fc49 	bl	800c4b4 <I2C_ITAddrCplt>
 800bc22:	e037      	b.n	800bc94 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	085b      	lsrs	r3, r3, #1
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d031      	beq.n	800bc94 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	085b      	lsrs	r3, r3, #1
 800bc34:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d02b      	beq.n	800bc94 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d018      	beq.n	800bc78 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4a:	781a      	ldrb	r2, [r3, #0]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc56:	1c5a      	adds	r2, r3, #1
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	3b01      	subs	r3, #1
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	851a      	strh	r2, [r3, #40]	; 0x28
 800bc76:	e00d      	b.n	800bc94 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc7e:	d002      	beq.n	800bc86 <I2C_Slave_ISR_IT+0x1e8>
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d106      	bne.n	800bc94 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f000 fcd5 	bl	800c636 <I2C_ITSlaveSeqCplt>
 800bc8c:	e002      	b.n	800bc94 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800bc8e:	bf00      	nop
 800bc90:	e000      	b.n	800bc94 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800bc92:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b088      	sub	sp, #32
 800bcaa:	af02      	add	r7, sp, #8
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	60b9      	str	r1, [r7, #8]
 800bcb0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d101      	bne.n	800bcc0 <I2C_Master_ISR_DMA+0x1a>
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	e0e1      	b.n	800be84 <I2C_Master_ISR_DMA+0x1de>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	091b      	lsrs	r3, r3, #4
 800bccc:	f003 0301 	and.w	r3, r3, #1
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d017      	beq.n	800bd04 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	091b      	lsrs	r3, r3, #4
 800bcd8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d011      	beq.n	800bd04 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2210      	movs	r2, #16
 800bce6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcec:	f043 0204 	orr.w	r2, r3, #4
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bcf4:	2120      	movs	r1, #32
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f001 fbd2 	bl	800d4a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f001 f98a 	bl	800d016 <I2C_Flush_TXDR>
 800bd02:	e0ba      	b.n	800be7a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	09db      	lsrs	r3, r3, #7
 800bd08:	f003 0301 	and.w	r3, r3, #1
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d072      	beq.n	800bdf6 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	099b      	lsrs	r3, r3, #6
 800bd14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d06c      	beq.n	800bdf6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd2a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d04e      	beq.n	800bdd4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd42:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	2bff      	cmp	r3, #255	; 0xff
 800bd4c:	d906      	bls.n	800bd5c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	22ff      	movs	r2, #255	; 0xff
 800bd52:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800bd54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd58:	617b      	str	r3, [r7, #20]
 800bd5a:	e010      	b.n	800bd7e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd6e:	d003      	beq.n	800bd78 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd74:	617b      	str	r3, [r7, #20]
 800bd76:	e002      	b.n	800bd7e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800bd78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd7c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	8a79      	ldrh	r1, [r7, #18]
 800bd86:	2300      	movs	r3, #0
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f001 fb55 	bl	800d43c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b22      	cmp	r3, #34	; 0x22
 800bdae:	d108      	bne.n	800bdc2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bdbe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bdc0:	e05b      	b.n	800be7a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdd0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bdd2:	e052      	b.n	800be7a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bde2:	d003      	beq.n	800bdec <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f000 fbe9 	bl	800c5bc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800bdea:	e046      	b.n	800be7a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bdec:	2140      	movs	r1, #64	; 0x40
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f000 fffa 	bl	800cde8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800bdf4:	e041      	b.n	800be7a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	099b      	lsrs	r3, r3, #6
 800bdfa:	f003 0301 	and.w	r3, r3, #1
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d029      	beq.n	800be56 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	099b      	lsrs	r3, r3, #6
 800be06:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d023      	beq.n	800be56 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be12:	b29b      	uxth	r3, r3
 800be14:	2b00      	cmp	r3, #0
 800be16:	d119      	bne.n	800be4c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be26:	d027      	beq.n	800be78 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be30:	d108      	bne.n	800be44 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	685a      	ldr	r2, [r3, #4]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be40:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800be42:	e019      	b.n	800be78 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f000 fbb9 	bl	800c5bc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800be4a:	e015      	b.n	800be78 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800be4c:	2140      	movs	r1, #64	; 0x40
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f000 ffca 	bl	800cde8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800be54:	e010      	b.n	800be78 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	095b      	lsrs	r3, r3, #5
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00b      	beq.n	800be7a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	095b      	lsrs	r3, r3, #5
 800be66:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d005      	beq.n	800be7a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800be6e:	68b9      	ldr	r1, [r7, #8]
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f000 fc3f 	bl	800c6f4 <I2C_ITMasterCplt>
 800be76:	e000      	b.n	800be7a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800be78:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3718      	adds	r7, #24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af02      	add	r7, sp, #8
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800be98:	4b92      	ldr	r3, [pc, #584]	; (800c0e4 <I2C_Mem_ISR_DMA+0x258>)
 800be9a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d101      	bne.n	800beaa <I2C_Mem_ISR_DMA+0x1e>
 800bea6:	2302      	movs	r3, #2
 800bea8:	e118      	b.n	800c0dc <I2C_Mem_ISR_DMA+0x250>
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2201      	movs	r2, #1
 800beae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	091b      	lsrs	r3, r3, #4
 800beb6:	f003 0301 	and.w	r3, r3, #1
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d017      	beq.n	800beee <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	091b      	lsrs	r3, r3, #4
 800bec2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d011      	beq.n	800beee <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2210      	movs	r2, #16
 800bed0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bed6:	f043 0204 	orr.w	r2, r3, #4
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bede:	2120      	movs	r1, #32
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f001 fadd 	bl	800d4a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f001 f895 	bl	800d016 <I2C_Flush_TXDR>
 800beec:	e0f1      	b.n	800c0d2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	085b      	lsrs	r3, r3, #1
 800bef2:	f003 0301 	and.w	r3, r3, #1
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00f      	beq.n	800bf1a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	085b      	lsrs	r3, r3, #1
 800befe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d009      	beq.n	800bf1a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bf0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf16:	651a      	str	r2, [r3, #80]	; 0x50
 800bf18:	e0db      	b.n	800c0d2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	09db      	lsrs	r3, r3, #7
 800bf1e:	f003 0301 	and.w	r3, r3, #1
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d060      	beq.n	800bfe8 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	099b      	lsrs	r3, r3, #6
 800bf2a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d05a      	beq.n	800bfe8 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bf32:	2101      	movs	r1, #1
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f001 fb37 	bl	800d5a8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bf3a:	2110      	movs	r1, #16
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f001 faaf 	bl	800d4a0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d048      	beq.n	800bfde <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	2bff      	cmp	r3, #255	; 0xff
 800bf54:	d910      	bls.n	800bf78 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	22ff      	movs	r2, #255	; 0xff
 800bf5a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf60:	b299      	uxth	r1, r3
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	2300      	movs	r3, #0
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f001 fa63 	bl	800d43c <I2C_TransferConfig>
 800bf76:	e011      	b.n	800bf9c <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf86:	b299      	uxth	r1, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	2300      	movs	r3, #0
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f001 fa50 	bl	800d43c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa0:	b29a      	uxth	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b22      	cmp	r3, #34	; 0x22
 800bfb8:	d108      	bne.n	800bfcc <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bfc8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bfca:	e082      	b.n	800c0d2 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfda:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bfdc:	e079      	b.n	800c0d2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bfde:	2140      	movs	r1, #64	; 0x40
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f000 ff01 	bl	800cde8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800bfe6:	e074      	b.n	800c0d2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	099b      	lsrs	r3, r3, #6
 800bfec:	f003 0301 	and.w	r3, r3, #1
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d05e      	beq.n	800c0b2 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	099b      	lsrs	r3, r3, #6
 800bff8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d058      	beq.n	800c0b2 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c000:	2101      	movs	r1, #1
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f001 fad0 	bl	800d5a8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c008:	2110      	movs	r1, #16
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f001 fa48 	bl	800d4a0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c016:	b2db      	uxtb	r3, r3
 800c018:	2b22      	cmp	r3, #34	; 0x22
 800c01a:	d101      	bne.n	800c020 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c01c:	4b32      	ldr	r3, [pc, #200]	; (800c0e8 <I2C_Mem_ISR_DMA+0x25c>)
 800c01e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c024:	b29b      	uxth	r3, r3
 800c026:	2bff      	cmp	r3, #255	; 0xff
 800c028:	d910      	bls.n	800c04c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	22ff      	movs	r2, #255	; 0xff
 800c02e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c034:	b299      	uxth	r1, r3
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f001 f9f9 	bl	800d43c <I2C_TransferConfig>
 800c04a:	e011      	b.n	800c070 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c050:	b29a      	uxth	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c05a:	b299      	uxth	r1, r3
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c060:	b2da      	uxtb	r2, r3
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f001 f9e6 	bl	800d43c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c074:	b29a      	uxth	r2, r3
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b22      	cmp	r3, #34	; 0x22
 800c08c:	d108      	bne.n	800c0a0 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c09c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c09e:	e018      	b.n	800c0d2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0ae:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c0b0:	e00f      	b.n	800c0d2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	095b      	lsrs	r3, r3, #5
 800c0b6:	f003 0301 	and.w	r3, r3, #1
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d009      	beq.n	800c0d2 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	095b      	lsrs	r3, r3, #5
 800c0c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d003      	beq.n	800c0d2 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c0ca:	68b9      	ldr	r1, [r7, #8]
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f000 fb11 	bl	800c6f4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	80002000 	.word	0x80002000
 800c0e8:	80002400 	.word	0x80002400

0800c0ec <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b088      	sub	sp, #32
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c0fe:	2300      	movs	r3, #0
 800c100:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d101      	bne.n	800c110 <I2C_Slave_ISR_DMA+0x24>
 800c10c:	2302      	movs	r3, #2
 800c10e:	e1cc      	b.n	800c4aa <I2C_Slave_ISR_DMA+0x3be>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2201      	movs	r2, #1
 800c114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	095b      	lsrs	r3, r3, #5
 800c11c:	f003 0301 	and.w	r3, r3, #1
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00a      	beq.n	800c13a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	095b      	lsrs	r3, r3, #5
 800c128:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d004      	beq.n	800c13a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c130:	68b9      	ldr	r1, [r7, #8]
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f000 fba8 	bl	800c888 <I2C_ITSlaveCplt>
 800c138:	e1b2      	b.n	800c4a0 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	091b      	lsrs	r3, r3, #4
 800c13e:	f003 0301 	and.w	r3, r3, #1
 800c142:	2b00      	cmp	r3, #0
 800c144:	f000 819c 	beq.w	800c480 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	091b      	lsrs	r3, r3, #4
 800c14c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 8195 	beq.w	800c480 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	0b9b      	lsrs	r3, r3, #14
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d106      	bne.n	800c170 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	0bdb      	lsrs	r3, r3, #15
 800c166:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f000 8181 	beq.w	800c472 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c174:	2b00      	cmp	r3, #0
 800c176:	d07c      	beq.n	800c272 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	0bdb      	lsrs	r3, r3, #15
 800c17c:	f003 0301 	and.w	r3, r3, #1
 800c180:	2b00      	cmp	r3, #0
 800c182:	d076      	beq.n	800c272 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a75      	ldr	r2, [pc, #468]	; (800c360 <I2C_Slave_ISR_DMA+0x274>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d059      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a73      	ldr	r2, [pc, #460]	; (800c364 <I2C_Slave_ISR_DMA+0x278>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d053      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a71      	ldr	r2, [pc, #452]	; (800c368 <I2C_Slave_ISR_DMA+0x27c>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d04d      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a6f      	ldr	r2, [pc, #444]	; (800c36c <I2C_Slave_ISR_DMA+0x280>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d047      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a6d      	ldr	r2, [pc, #436]	; (800c370 <I2C_Slave_ISR_DMA+0x284>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d041      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a6b      	ldr	r2, [pc, #428]	; (800c374 <I2C_Slave_ISR_DMA+0x288>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d03b      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a69      	ldr	r2, [pc, #420]	; (800c378 <I2C_Slave_ISR_DMA+0x28c>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d035      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a67      	ldr	r2, [pc, #412]	; (800c37c <I2C_Slave_ISR_DMA+0x290>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d02f      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a65      	ldr	r2, [pc, #404]	; (800c380 <I2C_Slave_ISR_DMA+0x294>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d029      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a63      	ldr	r2, [pc, #396]	; (800c384 <I2C_Slave_ISR_DMA+0x298>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d023      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a61      	ldr	r2, [pc, #388]	; (800c388 <I2C_Slave_ISR_DMA+0x29c>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d01d      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a5f      	ldr	r2, [pc, #380]	; (800c38c <I2C_Slave_ISR_DMA+0x2a0>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d017      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a5d      	ldr	r2, [pc, #372]	; (800c390 <I2C_Slave_ISR_DMA+0x2a4>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d011      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a5b      	ldr	r2, [pc, #364]	; (800c394 <I2C_Slave_ISR_DMA+0x2a8>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d00b      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a59      	ldr	r2, [pc, #356]	; (800c398 <I2C_Slave_ISR_DMA+0x2ac>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d005      	beq.n	800c244 <I2C_Slave_ISR_DMA+0x158>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a57      	ldr	r2, [pc, #348]	; (800c39c <I2C_Slave_ISR_DMA+0x2b0>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d109      	bne.n	800c258 <I2C_Slave_ISR_DMA+0x16c>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	bf0c      	ite	eq
 800c250:	2301      	moveq	r3, #1
 800c252:	2300      	movne	r3, #0
 800c254:	b2db      	uxtb	r3, r3
 800c256:	e008      	b.n	800c26a <I2C_Slave_ISR_DMA+0x17e>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	bf0c      	ite	eq
 800c264:	2301      	moveq	r3, #1
 800c266:	2300      	movne	r3, #0
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c26e:	2301      	movs	r3, #1
 800c270:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c276:	2b00      	cmp	r3, #0
 800c278:	f000 809f 	beq.w	800c3ba <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	0b9b      	lsrs	r3, r3, #14
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	2b00      	cmp	r3, #0
 800c286:	f000 8098 	beq.w	800c3ba <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a33      	ldr	r2, [pc, #204]	; (800c360 <I2C_Slave_ISR_DMA+0x274>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d059      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a31      	ldr	r2, [pc, #196]	; (800c364 <I2C_Slave_ISR_DMA+0x278>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d053      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a2f      	ldr	r2, [pc, #188]	; (800c368 <I2C_Slave_ISR_DMA+0x27c>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d04d      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a2d      	ldr	r2, [pc, #180]	; (800c36c <I2C_Slave_ISR_DMA+0x280>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d047      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a2b      	ldr	r2, [pc, #172]	; (800c370 <I2C_Slave_ISR_DMA+0x284>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d041      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a29      	ldr	r2, [pc, #164]	; (800c374 <I2C_Slave_ISR_DMA+0x288>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d03b      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a27      	ldr	r2, [pc, #156]	; (800c378 <I2C_Slave_ISR_DMA+0x28c>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d035      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a25      	ldr	r2, [pc, #148]	; (800c37c <I2C_Slave_ISR_DMA+0x290>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d02f      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a23      	ldr	r2, [pc, #140]	; (800c380 <I2C_Slave_ISR_DMA+0x294>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d029      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a21      	ldr	r2, [pc, #132]	; (800c384 <I2C_Slave_ISR_DMA+0x298>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d023      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a1f      	ldr	r2, [pc, #124]	; (800c388 <I2C_Slave_ISR_DMA+0x29c>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d01d      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a1d      	ldr	r2, [pc, #116]	; (800c38c <I2C_Slave_ISR_DMA+0x2a0>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d017      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a1b      	ldr	r2, [pc, #108]	; (800c390 <I2C_Slave_ISR_DMA+0x2a4>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d011      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a19      	ldr	r2, [pc, #100]	; (800c394 <I2C_Slave_ISR_DMA+0x2a8>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d00b      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a17      	ldr	r2, [pc, #92]	; (800c398 <I2C_Slave_ISR_DMA+0x2ac>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d005      	beq.n	800c34a <I2C_Slave_ISR_DMA+0x25e>
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a15      	ldr	r2, [pc, #84]	; (800c39c <I2C_Slave_ISR_DMA+0x2b0>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d12a      	bne.n	800c3a0 <I2C_Slave_ISR_DMA+0x2b4>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	bf0c      	ite	eq
 800c356:	2301      	moveq	r3, #1
 800c358:	2300      	movne	r3, #0
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	e029      	b.n	800c3b2 <I2C_Slave_ISR_DMA+0x2c6>
 800c35e:	bf00      	nop
 800c360:	40020010 	.word	0x40020010
 800c364:	40020028 	.word	0x40020028
 800c368:	40020040 	.word	0x40020040
 800c36c:	40020058 	.word	0x40020058
 800c370:	40020070 	.word	0x40020070
 800c374:	40020088 	.word	0x40020088
 800c378:	400200a0 	.word	0x400200a0
 800c37c:	400200b8 	.word	0x400200b8
 800c380:	40020410 	.word	0x40020410
 800c384:	40020428 	.word	0x40020428
 800c388:	40020440 	.word	0x40020440
 800c38c:	40020458 	.word	0x40020458
 800c390:	40020470 	.word	0x40020470
 800c394:	40020488 	.word	0x40020488
 800c398:	400204a0 	.word	0x400204a0
 800c39c:	400204b8 	.word	0x400204b8
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	bf0c      	ite	eq
 800c3ac:	2301      	moveq	r3, #1
 800c3ae:	2300      	movne	r3, #0
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d128      	bne.n	800c412 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	2b28      	cmp	r3, #40	; 0x28
 800c3ca:	d108      	bne.n	800c3de <I2C_Slave_ISR_DMA+0x2f2>
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3d2:	d104      	bne.n	800c3de <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c3d4:	68b9      	ldr	r1, [r7, #8]
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f000 fcb0 	bl	800cd3c <I2C_ITListenCplt>
 800c3dc:	e048      	b.n	800c470 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b29      	cmp	r3, #41	; 0x29
 800c3e8:	d10e      	bne.n	800c408 <I2C_Slave_ISR_DMA+0x31c>
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c3f0:	d00a      	beq.n	800c408 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2210      	movs	r2, #16
 800c3f8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f000 fe0b 	bl	800d016 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 f918 	bl	800c636 <I2C_ITSlaveSeqCplt>
 800c406:	e033      	b.n	800c470 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2210      	movs	r2, #16
 800c40e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c410:	e034      	b.n	800c47c <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2210      	movs	r2, #16
 800c418:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c41e:	f043 0204 	orr.w	r2, r3, #4
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c42c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d003      	beq.n	800c43c <I2C_Slave_ISR_DMA+0x350>
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c43a:	d11f      	bne.n	800c47c <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c43c:	7dfb      	ldrb	r3, [r7, #23]
 800c43e:	2b21      	cmp	r3, #33	; 0x21
 800c440:	d002      	beq.n	800c448 <I2C_Slave_ISR_DMA+0x35c>
 800c442:	7dfb      	ldrb	r3, [r7, #23]
 800c444:	2b29      	cmp	r3, #41	; 0x29
 800c446:	d103      	bne.n	800c450 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2221      	movs	r2, #33	; 0x21
 800c44c:	631a      	str	r2, [r3, #48]	; 0x30
 800c44e:	e008      	b.n	800c462 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	2b22      	cmp	r3, #34	; 0x22
 800c454:	d002      	beq.n	800c45c <I2C_Slave_ISR_DMA+0x370>
 800c456:	7dfb      	ldrb	r3, [r7, #23]
 800c458:	2b2a      	cmp	r3, #42	; 0x2a
 800c45a:	d102      	bne.n	800c462 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2222      	movs	r2, #34	; 0x22
 800c460:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c466:	4619      	mov	r1, r3
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f000 fcbd 	bl	800cde8 <I2C_ITError>
      if (treatdmanack == 1U)
 800c46e:	e005      	b.n	800c47c <I2C_Slave_ISR_DMA+0x390>
 800c470:	e004      	b.n	800c47c <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2210      	movs	r2, #16
 800c478:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c47a:	e011      	b.n	800c4a0 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800c47c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c47e:	e00f      	b.n	800c4a0 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	08db      	lsrs	r3, r3, #3
 800c484:	f003 0301 	and.w	r3, r3, #1
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d009      	beq.n	800c4a0 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	08db      	lsrs	r3, r3, #3
 800c490:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c498:	68b9      	ldr	r1, [r7, #8]
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f000 f80a 	bl	800c4b4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3720      	adds	r7, #32
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop

0800c4b4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c4ca:	2b28      	cmp	r3, #40	; 0x28
 800c4cc:	d16a      	bne.n	800c5a4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	0c1b      	lsrs	r3, r3, #16
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	0c1b      	lsrs	r3, r3, #16
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c4ec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4fa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	b29b      	uxth	r3, r3
 800c504:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c508:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d138      	bne.n	800c584 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c512:	897b      	ldrh	r3, [r7, #10]
 800c514:	09db      	lsrs	r3, r3, #7
 800c516:	b29a      	uxth	r2, r3
 800c518:	89bb      	ldrh	r3, [r7, #12]
 800c51a:	4053      	eors	r3, r2
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	f003 0306 	and.w	r3, r3, #6
 800c522:	2b00      	cmp	r3, #0
 800c524:	d11c      	bne.n	800c560 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c526:	897b      	ldrh	r3, [r7, #10]
 800c528:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c52e:	1c5a      	adds	r2, r3, #1
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d13b      	bne.n	800c5b4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2208      	movs	r2, #8
 800c548:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c552:	89ba      	ldrh	r2, [r7, #12]
 800c554:	7bfb      	ldrb	r3, [r7, #15]
 800c556:	4619      	mov	r1, r3
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7ff f91e 	bl	800b79a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c55e:	e029      	b.n	800c5b4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c560:	893b      	ldrh	r3, [r7, #8]
 800c562:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f001 f81d 	bl	800d5a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c576:	89ba      	ldrh	r2, [r7, #12]
 800c578:	7bfb      	ldrb	r3, [r7, #15]
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff f90c 	bl	800b79a <HAL_I2C_AddrCallback>
}
 800c582:	e017      	b.n	800c5b4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f001 f80d 	bl	800d5a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c596:	89ba      	ldrh	r2, [r7, #12]
 800c598:	7bfb      	ldrb	r3, [r7, #15]
 800c59a:	4619      	mov	r1, r3
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7ff f8fc 	bl	800b79a <HAL_I2C_AddrCallback>
}
 800c5a2:	e007      	b.n	800c5b4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2208      	movs	r2, #8
 800c5aa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c5b4:	bf00      	nop
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	2b21      	cmp	r3, #33	; 0x21
 800c5d6:	d115      	bne.n	800c604 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2220      	movs	r2, #32
 800c5dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2211      	movs	r2, #17
 800c5e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c5ec:	2101      	movs	r1, #1
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 ffda 	bl	800d5a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f7ff f8a4 	bl	800b74a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c602:	e014      	b.n	800c62e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2220      	movs	r2, #32
 800c608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2212      	movs	r2, #18
 800c610:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c618:	2102      	movs	r1, #2
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 ffc4 	bl	800d5a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff f898 	bl	800b75e <HAL_I2C_MasterRxCpltCallback>
}
 800c62e:	bf00      	nop
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	0b9b      	lsrs	r3, r3, #14
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	2b00      	cmp	r3, #0
 800c658:	d008      	beq.n	800c66c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	e00d      	b.n	800c688 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	0bdb      	lsrs	r3, r3, #15
 800c670:	f003 0301 	and.w	r3, r3, #1
 800c674:	2b00      	cmp	r3, #0
 800c676:	d007      	beq.n	800c688 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c686:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b29      	cmp	r3, #41	; 0x29
 800c692:	d112      	bne.n	800c6ba <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2228      	movs	r2, #40	; 0x28
 800c698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2221      	movs	r2, #33	; 0x21
 800c6a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c6a2:	2101      	movs	r1, #1
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 ff7f 	bl	800d5a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7ff f85d 	bl	800b772 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c6b8:	e017      	b.n	800c6ea <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c6c4:	d111      	bne.n	800c6ea <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2228      	movs	r2, #40	; 0x28
 800c6ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2222      	movs	r2, #34	; 0x22
 800c6d2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c6d4:	2102      	movs	r1, #2
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 ff66 	bl	800d5a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff f84e 	bl	800b786 <HAL_I2C_SlaveRxCpltCallback>
}
 800c6ea:	bf00      	nop
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
	...

0800c6f4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2220      	movs	r2, #32
 800c708:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c710:	b2db      	uxtb	r3, r3
 800c712:	2b21      	cmp	r3, #33	; 0x21
 800c714:	d107      	bne.n	800c726 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c716:	2101      	movs	r1, #1
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 ff45 	bl	800d5a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2211      	movs	r2, #17
 800c722:	631a      	str	r2, [r3, #48]	; 0x30
 800c724:	e00c      	b.n	800c740 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	2b22      	cmp	r3, #34	; 0x22
 800c730:	d106      	bne.n	800c740 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c732:	2102      	movs	r1, #2
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 ff37 	bl	800d5a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2212      	movs	r2, #18
 800c73e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6859      	ldr	r1, [r3, #4]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	4b4d      	ldr	r3, [pc, #308]	; (800c880 <I2C_ITMasterCplt+0x18c>)
 800c74c:	400b      	ands	r3, r1
 800c74e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4a4a      	ldr	r2, [pc, #296]	; (800c884 <I2C_ITMasterCplt+0x190>)
 800c75a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	091b      	lsrs	r3, r3, #4
 800c760:	f003 0301 	and.w	r3, r3, #1
 800c764:	2b00      	cmp	r3, #0
 800c766:	d009      	beq.n	800c77c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2210      	movs	r2, #16
 800c76e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c774:	f043 0204 	orr.w	r2, r3, #4
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c782:	b2db      	uxtb	r3, r3
 800c784:	2b60      	cmp	r3, #96	; 0x60
 800c786:	d10b      	bne.n	800c7a0 <I2C_ITMasterCplt+0xac>
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	089b      	lsrs	r3, r3, #2
 800c78c:	f003 0301 	and.w	r3, r3, #1
 800c790:	2b00      	cmp	r3, #0
 800c792:	d005      	beq.n	800c7a0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c79e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 fc38 	bl	800d016 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7aa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	2b60      	cmp	r3, #96	; 0x60
 800c7b6:	d002      	beq.n	800c7be <I2C_ITMasterCplt+0xca>
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d006      	beq.n	800c7cc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 fb0f 	bl	800cde8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c7ca:	e054      	b.n	800c876 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	2b21      	cmp	r3, #33	; 0x21
 800c7d6:	d124      	bne.n	800c822 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2220      	movs	r2, #32
 800c7dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	2b40      	cmp	r3, #64	; 0x40
 800c7f0:	d10b      	bne.n	800c80a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7fe ffe1 	bl	800b7ca <HAL_I2C_MemTxCpltCallback>
}
 800c808:	e035      	b.n	800c876 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7fe ff95 	bl	800b74a <HAL_I2C_MasterTxCpltCallback>
}
 800c820:	e029      	b.n	800c876 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	2b22      	cmp	r3, #34	; 0x22
 800c82c:	d123      	bne.n	800c876 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2220      	movs	r2, #32
 800c832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c842:	b2db      	uxtb	r3, r3
 800c844:	2b40      	cmp	r3, #64	; 0x40
 800c846:	d10b      	bne.n	800c860 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7fe ffc0 	bl	800b7de <HAL_I2C_MemRxCpltCallback>
}
 800c85e:	e00a      	b.n	800c876 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7fe ff74 	bl	800b75e <HAL_I2C_MasterRxCpltCallback>
}
 800c876:	bf00      	nop
 800c878:	3718      	adds	r7, #24
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	fe00e800 	.word	0xfe00e800
 800c884:	ffff0000 	.word	0xffff0000

0800c888 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8aa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2220      	movs	r2, #32
 800c8b2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c8b4:	7afb      	ldrb	r3, [r7, #11]
 800c8b6:	2b21      	cmp	r3, #33	; 0x21
 800c8b8:	d002      	beq.n	800c8c0 <I2C_ITSlaveCplt+0x38>
 800c8ba:	7afb      	ldrb	r3, [r7, #11]
 800c8bc:	2b29      	cmp	r3, #41	; 0x29
 800c8be:	d108      	bne.n	800c8d2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c8c0:	f248 0101 	movw	r1, #32769	; 0x8001
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fe6f 	bl	800d5a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2221      	movs	r2, #33	; 0x21
 800c8ce:	631a      	str	r2, [r3, #48]	; 0x30
 800c8d0:	e019      	b.n	800c906 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c8d2:	7afb      	ldrb	r3, [r7, #11]
 800c8d4:	2b22      	cmp	r3, #34	; 0x22
 800c8d6:	d002      	beq.n	800c8de <I2C_ITSlaveCplt+0x56>
 800c8d8:	7afb      	ldrb	r3, [r7, #11]
 800c8da:	2b2a      	cmp	r3, #42	; 0x2a
 800c8dc:	d108      	bne.n	800c8f0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c8de:	f248 0102 	movw	r1, #32770	; 0x8002
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fe60 	bl	800d5a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2222      	movs	r2, #34	; 0x22
 800c8ec:	631a      	str	r2, [r3, #48]	; 0x30
 800c8ee:	e00a      	b.n	800c906 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800c8f0:	7afb      	ldrb	r3, [r7, #11]
 800c8f2:	2b28      	cmp	r3, #40	; 0x28
 800c8f4:	d107      	bne.n	800c906 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800c8f6:	f248 0103 	movw	r1, #32771	; 0x8003
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fe54 	bl	800d5a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c914:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	6859      	ldr	r1, [r3, #4]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	4b80      	ldr	r3, [pc, #512]	; (800cb24 <I2C_ITSlaveCplt+0x29c>)
 800c922:	400b      	ands	r3, r1
 800c924:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fb75 	bl	800d016 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	0b9b      	lsrs	r3, r3, #14
 800c930:	f003 0301 	and.w	r3, r3, #1
 800c934:	2b00      	cmp	r3, #0
 800c936:	d07a      	beq.n	800ca2e <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c946:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 8112 	beq.w	800cb76 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a73      	ldr	r2, [pc, #460]	; (800cb28 <I2C_ITSlaveCplt+0x2a0>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d059      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a71      	ldr	r2, [pc, #452]	; (800cb2c <I2C_ITSlaveCplt+0x2a4>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d053      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a6f      	ldr	r2, [pc, #444]	; (800cb30 <I2C_ITSlaveCplt+0x2a8>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d04d      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a6d      	ldr	r2, [pc, #436]	; (800cb34 <I2C_ITSlaveCplt+0x2ac>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d047      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a6b      	ldr	r2, [pc, #428]	; (800cb38 <I2C_ITSlaveCplt+0x2b0>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d041      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a69      	ldr	r2, [pc, #420]	; (800cb3c <I2C_ITSlaveCplt+0x2b4>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d03b      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a67      	ldr	r2, [pc, #412]	; (800cb40 <I2C_ITSlaveCplt+0x2b8>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d035      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a65      	ldr	r2, [pc, #404]	; (800cb44 <I2C_ITSlaveCplt+0x2bc>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d02f      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a63      	ldr	r2, [pc, #396]	; (800cb48 <I2C_ITSlaveCplt+0x2c0>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d029      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a61      	ldr	r2, [pc, #388]	; (800cb4c <I2C_ITSlaveCplt+0x2c4>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d023      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a5f      	ldr	r2, [pc, #380]	; (800cb50 <I2C_ITSlaveCplt+0x2c8>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d01d      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a5d      	ldr	r2, [pc, #372]	; (800cb54 <I2C_ITSlaveCplt+0x2cc>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d017      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a5b      	ldr	r2, [pc, #364]	; (800cb58 <I2C_ITSlaveCplt+0x2d0>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d011      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a59      	ldr	r2, [pc, #356]	; (800cb5c <I2C_ITSlaveCplt+0x2d4>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d00b      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a57      	ldr	r2, [pc, #348]	; (800cb60 <I2C_ITSlaveCplt+0x2d8>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d005      	beq.n	800ca12 <I2C_ITSlaveCplt+0x18a>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a55      	ldr	r2, [pc, #340]	; (800cb64 <I2C_ITSlaveCplt+0x2dc>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d105      	bne.n	800ca1e <I2C_ITSlaveCplt+0x196>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	e004      	b.n	800ca28 <I2C_ITSlaveCplt+0x1a0>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	8553      	strh	r3, [r2, #42]	; 0x2a
 800ca2c:	e0a3      	b.n	800cb76 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	0bdb      	lsrs	r3, r3, #15
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f000 809d 	beq.w	800cb76 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ca4a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 8090 	beq.w	800cb76 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a32      	ldr	r2, [pc, #200]	; (800cb28 <I2C_ITSlaveCplt+0x2a0>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d059      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a30      	ldr	r2, [pc, #192]	; (800cb2c <I2C_ITSlaveCplt+0x2a4>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d053      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a2e      	ldr	r2, [pc, #184]	; (800cb30 <I2C_ITSlaveCplt+0x2a8>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d04d      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a2c      	ldr	r2, [pc, #176]	; (800cb34 <I2C_ITSlaveCplt+0x2ac>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d047      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a2a      	ldr	r2, [pc, #168]	; (800cb38 <I2C_ITSlaveCplt+0x2b0>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d041      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a28      	ldr	r2, [pc, #160]	; (800cb3c <I2C_ITSlaveCplt+0x2b4>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d03b      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a26      	ldr	r2, [pc, #152]	; (800cb40 <I2C_ITSlaveCplt+0x2b8>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d035      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a24      	ldr	r2, [pc, #144]	; (800cb44 <I2C_ITSlaveCplt+0x2bc>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d02f      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a22      	ldr	r2, [pc, #136]	; (800cb48 <I2C_ITSlaveCplt+0x2c0>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d029      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a20      	ldr	r2, [pc, #128]	; (800cb4c <I2C_ITSlaveCplt+0x2c4>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d023      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a1e      	ldr	r2, [pc, #120]	; (800cb50 <I2C_ITSlaveCplt+0x2c8>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d01d      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a1c      	ldr	r2, [pc, #112]	; (800cb54 <I2C_ITSlaveCplt+0x2cc>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d017      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a1a      	ldr	r2, [pc, #104]	; (800cb58 <I2C_ITSlaveCplt+0x2d0>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d011      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a18      	ldr	r2, [pc, #96]	; (800cb5c <I2C_ITSlaveCplt+0x2d4>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d00b      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a16      	ldr	r2, [pc, #88]	; (800cb60 <I2C_ITSlaveCplt+0x2d8>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d005      	beq.n	800cb16 <I2C_ITSlaveCplt+0x28e>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a14      	ldr	r2, [pc, #80]	; (800cb64 <I2C_ITSlaveCplt+0x2dc>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d128      	bne.n	800cb68 <I2C_ITSlaveCplt+0x2e0>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	e027      	b.n	800cb72 <I2C_ITSlaveCplt+0x2ea>
 800cb22:	bf00      	nop
 800cb24:	fe00e800 	.word	0xfe00e800
 800cb28:	40020010 	.word	0x40020010
 800cb2c:	40020028 	.word	0x40020028
 800cb30:	40020040 	.word	0x40020040
 800cb34:	40020058 	.word	0x40020058
 800cb38:	40020070 	.word	0x40020070
 800cb3c:	40020088 	.word	0x40020088
 800cb40:	400200a0 	.word	0x400200a0
 800cb44:	400200b8 	.word	0x400200b8
 800cb48:	40020410 	.word	0x40020410
 800cb4c:	40020428 	.word	0x40020428
 800cb50:	40020440 	.word	0x40020440
 800cb54:	40020458 	.word	0x40020458
 800cb58:	40020470 	.word	0x40020470
 800cb5c:	40020488 	.word	0x40020488
 800cb60:	400204a0 	.word	0x400204a0
 800cb64:	400204b8 	.word	0x400204b8
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	089b      	lsrs	r3, r3, #2
 800cb7a:	f003 0301 	and.w	r3, r3, #1
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d020      	beq.n	800cbc4 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f023 0304 	bic.w	r3, r3, #4
 800cb88:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb94:	b2d2      	uxtb	r2, r2
 800cb96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00c      	beq.n	800cbc4 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	b29a      	uxth	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d005      	beq.n	800cbda <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbd2:	f043 0204 	orr.w	r2, r3, #4
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	091b      	lsrs	r3, r3, #4
 800cbde:	f003 0301 	and.w	r3, r3, #1
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d04a      	beq.n	800cc7c <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	091b      	lsrs	r3, r3, #4
 800cbea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d044      	beq.n	800cc7c <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d128      	bne.n	800cc4e <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b28      	cmp	r3, #40	; 0x28
 800cc06:	d108      	bne.n	800cc1a <I2C_ITSlaveCplt+0x392>
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc0e:	d104      	bne.n	800cc1a <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800cc10:	6979      	ldr	r1, [r7, #20]
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 f892 	bl	800cd3c <I2C_ITListenCplt>
 800cc18:	e030      	b.n	800cc7c <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b29      	cmp	r3, #41	; 0x29
 800cc24:	d10e      	bne.n	800cc44 <I2C_ITSlaveCplt+0x3bc>
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cc2c:	d00a      	beq.n	800cc44 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2210      	movs	r2, #16
 800cc34:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f9ed 	bl	800d016 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7ff fcfa 	bl	800c636 <I2C_ITSlaveSeqCplt>
 800cc42:	e01b      	b.n	800cc7c <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2210      	movs	r2, #16
 800cc4a:	61da      	str	r2, [r3, #28]
 800cc4c:	e016      	b.n	800cc7c <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2210      	movs	r2, #16
 800cc54:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc5a:	f043 0204 	orr.w	r2, r3, #4
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d003      	beq.n	800cc70 <I2C_ITSlaveCplt+0x3e8>
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc6e:	d105      	bne.n	800cc7c <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc74:	4619      	mov	r1, r3
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 f8b6 	bl	800cde8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d010      	beq.n	800ccb4 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc96:	4619      	mov	r1, r3
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 f8a5 	bl	800cde8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	2b28      	cmp	r3, #40	; 0x28
 800cca8:	d141      	bne.n	800cd2e <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ccaa:	6979      	ldr	r1, [r7, #20]
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 f845 	bl	800cd3c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ccb2:	e03c      	b.n	800cd2e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ccbc:	d014      	beq.n	800cce8 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff fcb9 	bl	800c636 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4a1c      	ldr	r2, [pc, #112]	; (800cd38 <I2C_ITSlaveCplt+0x4b0>)
 800ccc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2220      	movs	r2, #32
 800ccce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7fe fd68 	bl	800b7b6 <HAL_I2C_ListenCpltCallback>
}
 800cce6:	e022      	b.n	800cd2e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b22      	cmp	r3, #34	; 0x22
 800ccf2:	d10e      	bne.n	800cd12 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2220      	movs	r2, #32
 800ccf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7fe fd3b 	bl	800b786 <HAL_I2C_SlaveRxCpltCallback>
}
 800cd10:	e00d      	b.n	800cd2e <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2220      	movs	r2, #32
 800cd16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7fe fd22 	bl	800b772 <HAL_I2C_SlaveTxCpltCallback>
}
 800cd2e:	bf00      	nop
 800cd30:	3718      	adds	r7, #24
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	ffff0000 	.word	0xffff0000

0800cd3c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a26      	ldr	r2, [pc, #152]	; (800cde4 <I2C_ITListenCplt+0xa8>)
 800cd4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2220      	movs	r2, #32
 800cd56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	089b      	lsrs	r3, r3, #2
 800cd6c:	f003 0301 	and.w	r3, r3, #1
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d022      	beq.n	800cdba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd7e:	b2d2      	uxtb	r2, r2
 800cd80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d012      	beq.n	800cdba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	3b01      	subs	r3, #1
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdb2:	f043 0204 	orr.w	r2, r3, #4
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cdba:	f248 0103 	movw	r1, #32771	; 0x8003
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fbf2 	bl	800d5a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2210      	movs	r2, #16
 800cdca:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7fe fcee 	bl	800b7b6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cdda:	bf00      	nop
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	ffff0000 	.word	0xffff0000

0800cde8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdf8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a6d      	ldr	r2, [pc, #436]	; (800cfbc <I2C_ITError+0x1d4>)
 800ce06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	431a      	orrs	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ce1a:	7bfb      	ldrb	r3, [r7, #15]
 800ce1c:	2b28      	cmp	r3, #40	; 0x28
 800ce1e:	d005      	beq.n	800ce2c <I2C_ITError+0x44>
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	2b29      	cmp	r3, #41	; 0x29
 800ce24:	d002      	beq.n	800ce2c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
 800ce28:	2b2a      	cmp	r3, #42	; 0x2a
 800ce2a:	d10b      	bne.n	800ce44 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ce2c:	2103      	movs	r1, #3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 fbba 	bl	800d5a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2228      	movs	r2, #40	; 0x28
 800ce38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a60      	ldr	r2, [pc, #384]	; (800cfc0 <I2C_ITError+0x1d8>)
 800ce40:	635a      	str	r2, [r3, #52]	; 0x34
 800ce42:	e030      	b.n	800cea6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ce44:	f248 0103 	movw	r1, #32771	; 0x8003
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 fbad 	bl	800d5a8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f8e1 	bl	800d016 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	2b60      	cmp	r3, #96	; 0x60
 800ce5e:	d01f      	beq.n	800cea0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2220      	movs	r2, #32
 800ce64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	699b      	ldr	r3, [r3, #24]
 800ce6e:	f003 0320 	and.w	r3, r3, #32
 800ce72:	2b20      	cmp	r3, #32
 800ce74:	d114      	bne.n	800cea0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	699b      	ldr	r3, [r3, #24]
 800ce7c:	f003 0310 	and.w	r3, r3, #16
 800ce80:	2b10      	cmp	r3, #16
 800ce82:	d109      	bne.n	800ce98 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2210      	movs	r2, #16
 800ce8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce90:	f043 0204 	orr.w	r2, r3, #4
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2220      	movs	r2, #32
 800ce9e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceaa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d039      	beq.n	800cf28 <I2C_ITError+0x140>
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	2b11      	cmp	r3, #17
 800ceb8:	d002      	beq.n	800cec0 <I2C_ITError+0xd8>
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	2b21      	cmp	r3, #33	; 0x21
 800cebe:	d133      	bne.n	800cf28 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ceca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cece:	d107      	bne.n	800cee0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cede:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fd f857 	bl	8009f98 <HAL_DMA_GetState>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d017      	beq.n	800cf20 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef4:	4a33      	ldr	r2, [pc, #204]	; (800cfc4 <I2C_ITError+0x1dc>)
 800cef6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7fb fed7 	bl	8008cb8 <HAL_DMA_Abort_IT>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d04d      	beq.n	800cfac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cf1e:	e045      	b.n	800cfac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f851 	bl	800cfc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cf26:	e041      	b.n	800cfac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d039      	beq.n	800cfa4 <I2C_ITError+0x1bc>
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2b12      	cmp	r3, #18
 800cf34:	d002      	beq.n	800cf3c <I2C_ITError+0x154>
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2b22      	cmp	r3, #34	; 0x22
 800cf3a:	d133      	bne.n	800cfa4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf4a:	d107      	bne.n	800cf5c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7fd f819 	bl	8009f98 <HAL_DMA_GetState>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d017      	beq.n	800cf9c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf70:	4a14      	ldr	r2, [pc, #80]	; (800cfc4 <I2C_ITError+0x1dc>)
 800cf72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fb fe99 	bl	8008cb8 <HAL_DMA_Abort_IT>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d011      	beq.n	800cfb0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cf96:	4610      	mov	r0, r2
 800cf98:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf9a:	e009      	b.n	800cfb0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f813 	bl	800cfc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cfa2:	e005      	b.n	800cfb0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 f80f 	bl	800cfc8 <I2C_TreatErrorCallback>
  }
}
 800cfaa:	e002      	b.n	800cfb2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cfac:	bf00      	nop
 800cfae:	e000      	b.n	800cfb2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cfb0:	bf00      	nop
}
 800cfb2:	bf00      	nop
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	ffff0000 	.word	0xffff0000
 800cfc0:	0800ba9f 	.word	0x0800ba9f
 800cfc4:	0800d401 	.word	0x0800d401

0800cfc8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	2b60      	cmp	r3, #96	; 0x60
 800cfda:	d10e      	bne.n	800cffa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2220      	movs	r2, #32
 800cfe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7fe fc07 	bl	800b806 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cff8:	e009      	b.n	800d00e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7fe fbf2 	bl	800b7f2 <HAL_I2C_ErrorCallback>
}
 800d00e:	bf00      	nop
 800d010:	3708      	adds	r7, #8
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d016:	b480      	push	{r7}
 800d018:	b083      	sub	sp, #12
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	699b      	ldr	r3, [r3, #24]
 800d024:	f003 0302 	and.w	r3, r3, #2
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d103      	bne.n	800d034 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2200      	movs	r2, #0
 800d032:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	699b      	ldr	r3, [r3, #24]
 800d03a:	f003 0301 	and.w	r3, r3, #1
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d007      	beq.n	800d052 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	699a      	ldr	r2, [r3, #24]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f042 0201 	orr.w	r2, r2, #1
 800d050:	619a      	str	r2, [r3, #24]
  }
}
 800d052:	bf00      	nop
 800d054:	370c      	adds	r7, #12
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr

0800d05e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b084      	sub	sp, #16
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d07a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d080:	b29b      	uxth	r3, r3
 800d082:	2b00      	cmp	r3, #0
 800d084:	d104      	bne.n	800d090 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d086:	2120      	movs	r1, #32
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f000 fa09 	bl	800d4a0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d08e:	e02d      	b.n	800d0ec <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d098:	441a      	add	r2, r3
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	2bff      	cmp	r3, #255	; 0xff
 800d0a6:	d903      	bls.n	800d0b0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	22ff      	movs	r2, #255	; 0xff
 800d0ac:	851a      	strh	r2, [r3, #40]	; 0x28
 800d0ae:	e004      	b.n	800d0ba <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	3328      	adds	r3, #40	; 0x28
 800d0ca:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d0d0:	f7fb f86a 	bl	80081a8 <HAL_DMA_Start_IT>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d004      	beq.n	800d0e4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d0da:	2110      	movs	r1, #16
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	f7ff fe83 	bl	800cde8 <I2C_ITError>
}
 800d0e2:	e003      	b.n	800d0ec <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d0e4:	2140      	movs	r1, #64	; 0x40
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f000 f9da 	bl	800d4a0 <I2C_Enable_IRQ>
}
 800d0ec:	bf00      	nop
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d100:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d110:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d116:	b29b      	uxth	r3, r3
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d104      	bne.n	800d126 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d11c:	2120      	movs	r1, #32
 800d11e:	68f8      	ldr	r0, [r7, #12]
 800d120:	f000 f9be 	bl	800d4a0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d124:	e02d      	b.n	800d182 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d12e:	441a      	add	r2, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d138:	b29b      	uxth	r3, r3
 800d13a:	2bff      	cmp	r3, #255	; 0xff
 800d13c:	d903      	bls.n	800d146 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	22ff      	movs	r2, #255	; 0xff
 800d142:	851a      	strh	r2, [r3, #40]	; 0x28
 800d144:	e004      	b.n	800d150 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	3324      	adds	r3, #36	; 0x24
 800d15a:	4619      	mov	r1, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d160:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d166:	f7fb f81f 	bl	80081a8 <HAL_DMA_Start_IT>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d004      	beq.n	800d17a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d170:	2110      	movs	r1, #16
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f7ff fe38 	bl	800cde8 <I2C_ITError>
}
 800d178:	e003      	b.n	800d182 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d17a:	2140      	movs	r1, #64	; 0x40
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f000 f98f 	bl	800d4a0 <I2C_Enable_IRQ>
}
 800d182:	bf00      	nop
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
	...

0800d18c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d194:	2300      	movs	r3, #0
 800d196:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d076      	beq.n	800d294 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a71      	ldr	r2, [pc, #452]	; (800d374 <I2C_DMAError+0x1e8>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d059      	beq.n	800d266 <I2C_DMAError+0xda>
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a6f      	ldr	r2, [pc, #444]	; (800d378 <I2C_DMAError+0x1ec>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d053      	beq.n	800d266 <I2C_DMAError+0xda>
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a6d      	ldr	r2, [pc, #436]	; (800d37c <I2C_DMAError+0x1f0>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d04d      	beq.n	800d266 <I2C_DMAError+0xda>
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a6b      	ldr	r2, [pc, #428]	; (800d380 <I2C_DMAError+0x1f4>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d047      	beq.n	800d266 <I2C_DMAError+0xda>
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a69      	ldr	r2, [pc, #420]	; (800d384 <I2C_DMAError+0x1f8>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d041      	beq.n	800d266 <I2C_DMAError+0xda>
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a67      	ldr	r2, [pc, #412]	; (800d388 <I2C_DMAError+0x1fc>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d03b      	beq.n	800d266 <I2C_DMAError+0xda>
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a65      	ldr	r2, [pc, #404]	; (800d38c <I2C_DMAError+0x200>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d035      	beq.n	800d266 <I2C_DMAError+0xda>
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a63      	ldr	r2, [pc, #396]	; (800d390 <I2C_DMAError+0x204>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d02f      	beq.n	800d266 <I2C_DMAError+0xda>
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a61      	ldr	r2, [pc, #388]	; (800d394 <I2C_DMAError+0x208>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d029      	beq.n	800d266 <I2C_DMAError+0xda>
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a5f      	ldr	r2, [pc, #380]	; (800d398 <I2C_DMAError+0x20c>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d023      	beq.n	800d266 <I2C_DMAError+0xda>
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a5d      	ldr	r2, [pc, #372]	; (800d39c <I2C_DMAError+0x210>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d01d      	beq.n	800d266 <I2C_DMAError+0xda>
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a5b      	ldr	r2, [pc, #364]	; (800d3a0 <I2C_DMAError+0x214>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d017      	beq.n	800d266 <I2C_DMAError+0xda>
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a59      	ldr	r2, [pc, #356]	; (800d3a4 <I2C_DMAError+0x218>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d011      	beq.n	800d266 <I2C_DMAError+0xda>
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a57      	ldr	r2, [pc, #348]	; (800d3a8 <I2C_DMAError+0x21c>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d00b      	beq.n	800d266 <I2C_DMAError+0xda>
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a55      	ldr	r2, [pc, #340]	; (800d3ac <I2C_DMAError+0x220>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d005      	beq.n	800d266 <I2C_DMAError+0xda>
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a53      	ldr	r2, [pc, #332]	; (800d3b0 <I2C_DMAError+0x224>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d109      	bne.n	800d27a <I2C_DMAError+0xee>
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	bf0c      	ite	eq
 800d272:	2301      	moveq	r3, #1
 800d274:	2300      	movne	r3, #0
 800d276:	b2db      	uxtb	r3, r3
 800d278:	e008      	b.n	800d28c <I2C_DMAError+0x100>
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	bf0c      	ite	eq
 800d286:	2301      	moveq	r3, #1
 800d288:	2300      	movne	r3, #0
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d001      	beq.n	800d294 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d290:	2301      	movs	r3, #1
 800d292:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 8098 	beq.w	800d3ce <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a33      	ldr	r2, [pc, #204]	; (800d374 <I2C_DMAError+0x1e8>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d059      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a31      	ldr	r2, [pc, #196]	; (800d378 <I2C_DMAError+0x1ec>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d053      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a2f      	ldr	r2, [pc, #188]	; (800d37c <I2C_DMAError+0x1f0>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d04d      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a2d      	ldr	r2, [pc, #180]	; (800d380 <I2C_DMAError+0x1f4>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d047      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a2b      	ldr	r2, [pc, #172]	; (800d384 <I2C_DMAError+0x1f8>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d041      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a29      	ldr	r2, [pc, #164]	; (800d388 <I2C_DMAError+0x1fc>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d03b      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a27      	ldr	r2, [pc, #156]	; (800d38c <I2C_DMAError+0x200>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d035      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a25      	ldr	r2, [pc, #148]	; (800d390 <I2C_DMAError+0x204>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d02f      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a23      	ldr	r2, [pc, #140]	; (800d394 <I2C_DMAError+0x208>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d029      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a21      	ldr	r2, [pc, #132]	; (800d398 <I2C_DMAError+0x20c>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d023      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a1f      	ldr	r2, [pc, #124]	; (800d39c <I2C_DMAError+0x210>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d01d      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a1d      	ldr	r2, [pc, #116]	; (800d3a0 <I2C_DMAError+0x214>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d017      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a1b      	ldr	r2, [pc, #108]	; (800d3a4 <I2C_DMAError+0x218>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d011      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a19      	ldr	r2, [pc, #100]	; (800d3a8 <I2C_DMAError+0x21c>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d00b      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a17      	ldr	r2, [pc, #92]	; (800d3ac <I2C_DMAError+0x220>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d005      	beq.n	800d35e <I2C_DMAError+0x1d2>
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a15      	ldr	r2, [pc, #84]	; (800d3b0 <I2C_DMAError+0x224>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d12a      	bne.n	800d3b4 <I2C_DMAError+0x228>
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	bf0c      	ite	eq
 800d36a:	2301      	moveq	r3, #1
 800d36c:	2300      	movne	r3, #0
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	e029      	b.n	800d3c6 <I2C_DMAError+0x23a>
 800d372:	bf00      	nop
 800d374:	40020010 	.word	0x40020010
 800d378:	40020028 	.word	0x40020028
 800d37c:	40020040 	.word	0x40020040
 800d380:	40020058 	.word	0x40020058
 800d384:	40020070 	.word	0x40020070
 800d388:	40020088 	.word	0x40020088
 800d38c:	400200a0 	.word	0x400200a0
 800d390:	400200b8 	.word	0x400200b8
 800d394:	40020410 	.word	0x40020410
 800d398:	40020428 	.word	0x40020428
 800d39c:	40020440 	.word	0x40020440
 800d3a0:	40020458 	.word	0x40020458
 800d3a4:	40020470 	.word	0x40020470
 800d3a8:	40020488 	.word	0x40020488
 800d3ac:	400204a0 	.word	0x400204a0
 800d3b0:	400204b8 	.word	0x400204b8
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	bf0c      	ite	eq
 800d3c0:	2301      	moveq	r3, #1
 800d3c2:	2300      	movne	r3, #0
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d001      	beq.n	800d3ce <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7fc fdf0 	bl	8009fb4 <HAL_DMA_GetError>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	d00e      	beq.n	800d3f8 <I2C_DMAError+0x26c>
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00b      	beq.n	800d3f8 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	685a      	ldr	r2, [r3, #4]
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3ee:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d3f0:	2110      	movs	r1, #16
 800d3f2:	68b8      	ldr	r0, [r7, #8]
 800d3f4:	f7ff fcf8 	bl	800cde8 <I2C_ITError>
  }
}
 800d3f8:	bf00      	nop
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d412:	2b00      	cmp	r3, #0
 800d414:	d003      	beq.n	800d41e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41a:	2200      	movs	r2, #0
 800d41c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d422:	2b00      	cmp	r3, #0
 800d424:	d003      	beq.n	800d42e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d42a:	2200      	movs	r2, #0
 800d42c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	f7ff fdca 	bl	800cfc8 <I2C_TreatErrorCallback>
}
 800d434:	bf00      	nop
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b087      	sub	sp, #28
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	607b      	str	r3, [r7, #4]
 800d446:	460b      	mov	r3, r1
 800d448:	817b      	strh	r3, [r7, #10]
 800d44a:	4613      	mov	r3, r2
 800d44c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d44e:	897b      	ldrh	r3, [r7, #10]
 800d450:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d454:	7a7b      	ldrb	r3, [r7, #9]
 800d456:	041b      	lsls	r3, r3, #16
 800d458:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d45c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d462:	6a3b      	ldr	r3, [r7, #32]
 800d464:	4313      	orrs	r3, r2
 800d466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d46a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	685a      	ldr	r2, [r3, #4]
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	0d5b      	lsrs	r3, r3, #21
 800d476:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d47a:	4b08      	ldr	r3, [pc, #32]	; (800d49c <I2C_TransferConfig+0x60>)
 800d47c:	430b      	orrs	r3, r1
 800d47e:	43db      	mvns	r3, r3
 800d480:	ea02 0103 	and.w	r1, r2, r3
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	697a      	ldr	r2, [r7, #20]
 800d48a:	430a      	orrs	r2, r1
 800d48c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d48e:	bf00      	nop
 800d490:	371c      	adds	r7, #28
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	03ff63ff 	.word	0x03ff63ff

0800d4a0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4b4:	4a39      	ldr	r2, [pc, #228]	; (800d59c <I2C_Enable_IRQ+0xfc>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d032      	beq.n	800d520 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d4be:	4a38      	ldr	r2, [pc, #224]	; (800d5a0 <I2C_Enable_IRQ+0x100>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d02d      	beq.n	800d520 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d4c8:	4a36      	ldr	r2, [pc, #216]	; (800d5a4 <I2C_Enable_IRQ+0x104>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d028      	beq.n	800d520 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d4ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	da03      	bge.n	800d4de <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d4dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d4de:	887b      	ldrh	r3, [r7, #2]
 800d4e0:	f003 0301 	and.w	r3, r3, #1
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d003      	beq.n	800d4f0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d4ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d4f0:	887b      	ldrh	r3, [r7, #2]
 800d4f2:	f003 0302 	and.w	r3, r3, #2
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d003      	beq.n	800d502 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d500:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d502:	887b      	ldrh	r3, [r7, #2]
 800d504:	2b10      	cmp	r3, #16
 800d506:	d103      	bne.n	800d510 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d50e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d510:	887b      	ldrh	r3, [r7, #2]
 800d512:	2b20      	cmp	r3, #32
 800d514:	d133      	bne.n	800d57e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f043 0320 	orr.w	r3, r3, #32
 800d51c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d51e:	e02e      	b.n	800d57e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d520:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d524:	2b00      	cmp	r3, #0
 800d526:	da03      	bge.n	800d530 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d52e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d530:	887b      	ldrh	r3, [r7, #2]
 800d532:	f003 0301 	and.w	r3, r3, #1
 800d536:	2b00      	cmp	r3, #0
 800d538:	d003      	beq.n	800d542 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d540:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d542:	887b      	ldrh	r3, [r7, #2]
 800d544:	f003 0302 	and.w	r3, r3, #2
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d003      	beq.n	800d554 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d552:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d554:	887b      	ldrh	r3, [r7, #2]
 800d556:	2b10      	cmp	r3, #16
 800d558:	d103      	bne.n	800d562 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d560:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d562:	887b      	ldrh	r3, [r7, #2]
 800d564:	2b20      	cmp	r3, #32
 800d566:	d103      	bne.n	800d570 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d56e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d570:	887b      	ldrh	r3, [r7, #2]
 800d572:	2b40      	cmp	r3, #64	; 0x40
 800d574:	d103      	bne.n	800d57e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d57c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6819      	ldr	r1, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	430a      	orrs	r2, r1
 800d58c:	601a      	str	r2, [r3, #0]
}
 800d58e:	bf00      	nop
 800d590:	3714      	adds	r7, #20
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	0800bca7 	.word	0x0800bca7
 800d5a0:	0800c0ed 	.word	0x0800c0ed
 800d5a4:	0800be8d 	.word	0x0800be8d

0800d5a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d5b8:	887b      	ldrh	r3, [r7, #2]
 800d5ba:	f003 0301 	and.w	r3, r3, #1
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00f      	beq.n	800d5e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d5c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d5d6:	2b28      	cmp	r3, #40	; 0x28
 800d5d8:	d003      	beq.n	800d5e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d5e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d5e2:	887b      	ldrh	r3, [r7, #2]
 800d5e4:	f003 0302 	and.w	r3, r3, #2
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00f      	beq.n	800d60c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d5f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d600:	2b28      	cmp	r3, #40	; 0x28
 800d602:	d003      	beq.n	800d60c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d60a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d60c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d610:	2b00      	cmp	r3, #0
 800d612:	da03      	bge.n	800d61c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d61a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d61c:	887b      	ldrh	r3, [r7, #2]
 800d61e:	2b10      	cmp	r3, #16
 800d620:	d103      	bne.n	800d62a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d628:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d62a:	887b      	ldrh	r3, [r7, #2]
 800d62c:	2b20      	cmp	r3, #32
 800d62e:	d103      	bne.n	800d638 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f043 0320 	orr.w	r3, r3, #32
 800d636:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d638:	887b      	ldrh	r3, [r7, #2]
 800d63a:	2b40      	cmp	r3, #64	; 0x40
 800d63c:	d103      	bne.n	800d646 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d644:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6819      	ldr	r1, [r3, #0]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	43da      	mvns	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	400a      	ands	r2, r1
 800d656:	601a      	str	r2, [r3, #0]
}
 800d658:	bf00      	nop
 800d65a:	3714      	adds	r7, #20
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d674:	b2db      	uxtb	r3, r3
 800d676:	2b20      	cmp	r3, #32
 800d678:	d138      	bne.n	800d6ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d680:	2b01      	cmp	r3, #1
 800d682:	d101      	bne.n	800d688 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d684:	2302      	movs	r3, #2
 800d686:	e032      	b.n	800d6ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2201      	movs	r2, #1
 800d68c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2224      	movs	r2, #36	; 0x24
 800d694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f022 0201 	bic.w	r2, r2, #1
 800d6a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d6b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	6819      	ldr	r1, [r3, #0]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	430a      	orrs	r2, r1
 800d6c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f042 0201 	orr.w	r2, r2, #1
 800d6d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2220      	movs	r2, #32
 800d6dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	e000      	b.n	800d6ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d6ec:	2302      	movs	r3, #2
  }
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	370c      	adds	r7, #12
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	b085      	sub	sp, #20
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
 800d702:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	2b20      	cmp	r3, #32
 800d70e:	d139      	bne.n	800d784 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d716:	2b01      	cmp	r3, #1
 800d718:	d101      	bne.n	800d71e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d71a:	2302      	movs	r3, #2
 800d71c:	e033      	b.n	800d786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2201      	movs	r2, #1
 800d722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2224      	movs	r2, #36	; 0x24
 800d72a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f022 0201 	bic.w	r2, r2, #1
 800d73c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d74c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	021b      	lsls	r3, r3, #8
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	4313      	orrs	r3, r2
 800d756:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f042 0201 	orr.w	r2, r2, #1
 800d76e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2220      	movs	r2, #32
 800d774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	e000      	b.n	800d786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d784:	2302      	movs	r3, #2
  }
}
 800d786:	4618      	mov	r0, r3
 800d788:	3714      	adds	r7, #20
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
	...

0800d794 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800d794:	b480      	push	{r7}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d79c:	4b0d      	ldr	r3, [pc, #52]	; (800d7d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d79e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d7a2:	4a0c      	ldr	r2, [pc, #48]	; (800d7d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d7a4:	f043 0302 	orr.w	r3, r3, #2
 800d7a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d7ac:	4b09      	ldr	r3, [pc, #36]	; (800d7d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d7ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d7b2:	f003 0302 	and.w	r3, r3, #2
 800d7b6:	60fb      	str	r3, [r7, #12]
 800d7b8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800d7ba:	4b07      	ldr	r3, [pc, #28]	; (800d7d8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d7bc:	685a      	ldr	r2, [r3, #4]
 800d7be:	4906      	ldr	r1, [pc, #24]	; (800d7d8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	604b      	str	r3, [r1, #4]
}
 800d7c6:	bf00      	nop
 800d7c8:	3714      	adds	r7, #20
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	58024400 	.word	0x58024400
 800d7d8:	58000400 	.word	0x58000400

0800d7dc <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800d7e8:	4b18      	ldr	r3, [pc, #96]	; (800d84c <HAL_PWR_EnterSTOPMode+0x70>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f023 0201 	bic.w	r2, r3, #1
 800d7f0:	4916      	ldr	r1, [pc, #88]	; (800d84c <HAL_PWR_EnterSTOPMode+0x70>)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800d7f8:	4b14      	ldr	r3, [pc, #80]	; (800d84c <HAL_PWR_EnterSTOPMode+0x70>)
 800d7fa:	691b      	ldr	r3, [r3, #16]
 800d7fc:	4a13      	ldr	r2, [pc, #76]	; (800d84c <HAL_PWR_EnterSTOPMode+0x70>)
 800d7fe:	f023 0305 	bic.w	r3, r3, #5
 800d802:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800d804:	4b11      	ldr	r3, [pc, #68]	; (800d84c <HAL_PWR_EnterSTOPMode+0x70>)
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	4a10      	ldr	r2, [pc, #64]	; (800d84c <HAL_PWR_EnterSTOPMode+0x70>)
 800d80a:	f023 0302 	bic.w	r3, r3, #2
 800d80e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d810:	4b0f      	ldr	r3, [pc, #60]	; (800d850 <HAL_PWR_EnterSTOPMode+0x74>)
 800d812:	691b      	ldr	r3, [r3, #16]
 800d814:	4a0e      	ldr	r2, [pc, #56]	; (800d850 <HAL_PWR_EnterSTOPMode+0x74>)
 800d816:	f043 0304 	orr.w	r3, r3, #4
 800d81a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800d81c:	f3bf 8f4f 	dsb	sy
}
 800d820:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d822:	f3bf 8f6f 	isb	sy
}
 800d826:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800d828:	78fb      	ldrb	r3, [r7, #3]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d101      	bne.n	800d832 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800d82e:	bf30      	wfi
 800d830:	e000      	b.n	800d834 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800d832:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d834:	4b06      	ldr	r3, [pc, #24]	; (800d850 <HAL_PWR_EnterSTOPMode+0x74>)
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	4a05      	ldr	r2, [pc, #20]	; (800d850 <HAL_PWR_EnterSTOPMode+0x74>)
 800d83a:	f023 0304 	bic.w	r3, r3, #4
 800d83e:	6113      	str	r3, [r2, #16]
}
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	58024800 	.word	0x58024800
 800d850:	e000ed00 	.word	0xe000ed00

0800d854 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d85c:	4b19      	ldr	r3, [pc, #100]	; (800d8c4 <HAL_PWREx_ConfigSupply+0x70>)
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	f003 0304 	and.w	r3, r3, #4
 800d864:	2b04      	cmp	r3, #4
 800d866:	d00a      	beq.n	800d87e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d868:	4b16      	ldr	r3, [pc, #88]	; (800d8c4 <HAL_PWREx_ConfigSupply+0x70>)
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	f003 0307 	and.w	r3, r3, #7
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	429a      	cmp	r2, r3
 800d874:	d001      	beq.n	800d87a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e01f      	b.n	800d8ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d87a:	2300      	movs	r3, #0
 800d87c:	e01d      	b.n	800d8ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d87e:	4b11      	ldr	r3, [pc, #68]	; (800d8c4 <HAL_PWREx_ConfigSupply+0x70>)
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	f023 0207 	bic.w	r2, r3, #7
 800d886:	490f      	ldr	r1, [pc, #60]	; (800d8c4 <HAL_PWREx_ConfigSupply+0x70>)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4313      	orrs	r3, r2
 800d88c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d88e:	f7f7 ff8f 	bl	80057b0 <HAL_GetTick>
 800d892:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d894:	e009      	b.n	800d8aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d896:	f7f7 ff8b 	bl	80057b0 <HAL_GetTick>
 800d89a:	4602      	mov	r2, r0
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8a4:	d901      	bls.n	800d8aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e007      	b.n	800d8ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d8aa:	4b06      	ldr	r3, [pc, #24]	; (800d8c4 <HAL_PWREx_ConfigSupply+0x70>)
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d8b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8b6:	d1ee      	bne.n	800d896 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d8b8:	2300      	movs	r3, #0
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	58024800 	.word	0x58024800

0800d8c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b08c      	sub	sp, #48	; 0x30
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d102      	bne.n	800d8dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	f000 bc48 	b.w	800e16c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f003 0301 	and.w	r3, r3, #1
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f000 8088 	beq.w	800d9fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d8ea:	4b99      	ldr	r3, [pc, #612]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d8ec:	691b      	ldr	r3, [r3, #16]
 800d8ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d8f4:	4b96      	ldr	r3, [pc, #600]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fc:	2b10      	cmp	r3, #16
 800d8fe:	d007      	beq.n	800d910 <HAL_RCC_OscConfig+0x48>
 800d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d902:	2b18      	cmp	r3, #24
 800d904:	d111      	bne.n	800d92a <HAL_RCC_OscConfig+0x62>
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	f003 0303 	and.w	r3, r3, #3
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	d10c      	bne.n	800d92a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d910:	4b8f      	ldr	r3, [pc, #572]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d06d      	beq.n	800d9f8 <HAL_RCC_OscConfig+0x130>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d169      	bne.n	800d9f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d924:	2301      	movs	r3, #1
 800d926:	f000 bc21 	b.w	800e16c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d932:	d106      	bne.n	800d942 <HAL_RCC_OscConfig+0x7a>
 800d934:	4b86      	ldr	r3, [pc, #536]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a85      	ldr	r2, [pc, #532]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d93a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d93e:	6013      	str	r3, [r2, #0]
 800d940:	e02e      	b.n	800d9a0 <HAL_RCC_OscConfig+0xd8>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d10c      	bne.n	800d964 <HAL_RCC_OscConfig+0x9c>
 800d94a:	4b81      	ldr	r3, [pc, #516]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a80      	ldr	r2, [pc, #512]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d954:	6013      	str	r3, [r2, #0]
 800d956:	4b7e      	ldr	r3, [pc, #504]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a7d      	ldr	r2, [pc, #500]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d95c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d960:	6013      	str	r3, [r2, #0]
 800d962:	e01d      	b.n	800d9a0 <HAL_RCC_OscConfig+0xd8>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d96c:	d10c      	bne.n	800d988 <HAL_RCC_OscConfig+0xc0>
 800d96e:	4b78      	ldr	r3, [pc, #480]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a77      	ldr	r2, [pc, #476]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d978:	6013      	str	r3, [r2, #0]
 800d97a:	4b75      	ldr	r3, [pc, #468]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a74      	ldr	r2, [pc, #464]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d984:	6013      	str	r3, [r2, #0]
 800d986:	e00b      	b.n	800d9a0 <HAL_RCC_OscConfig+0xd8>
 800d988:	4b71      	ldr	r3, [pc, #452]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a70      	ldr	r2, [pc, #448]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d98e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d992:	6013      	str	r3, [r2, #0]
 800d994:	4b6e      	ldr	r3, [pc, #440]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a6d      	ldr	r2, [pc, #436]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d99a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d99e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d013      	beq.n	800d9d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9a8:	f7f7 ff02 	bl	80057b0 <HAL_GetTick>
 800d9ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d9ae:	e008      	b.n	800d9c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d9b0:	f7f7 fefe 	bl	80057b0 <HAL_GetTick>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	2b64      	cmp	r3, #100	; 0x64
 800d9bc:	d901      	bls.n	800d9c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d9be:	2303      	movs	r3, #3
 800d9c0:	e3d4      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d9c2:	4b63      	ldr	r3, [pc, #396]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d0f0      	beq.n	800d9b0 <HAL_RCC_OscConfig+0xe8>
 800d9ce:	e014      	b.n	800d9fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9d0:	f7f7 feee 	bl	80057b0 <HAL_GetTick>
 800d9d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d9d6:	e008      	b.n	800d9ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d9d8:	f7f7 feea 	bl	80057b0 <HAL_GetTick>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	1ad3      	subs	r3, r2, r3
 800d9e2:	2b64      	cmp	r3, #100	; 0x64
 800d9e4:	d901      	bls.n	800d9ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d9e6:	2303      	movs	r3, #3
 800d9e8:	e3c0      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d9ea:	4b59      	ldr	r3, [pc, #356]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1f0      	bne.n	800d9d8 <HAL_RCC_OscConfig+0x110>
 800d9f6:	e000      	b.n	800d9fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d9f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f003 0302 	and.w	r3, r3, #2
 800da02:	2b00      	cmp	r3, #0
 800da04:	f000 80ca 	beq.w	800db9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da08:	4b51      	ldr	r3, [pc, #324]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800da0a:	691b      	ldr	r3, [r3, #16]
 800da0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800da12:	4b4f      	ldr	r3, [pc, #316]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800da14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800da18:	6a3b      	ldr	r3, [r7, #32]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d007      	beq.n	800da2e <HAL_RCC_OscConfig+0x166>
 800da1e:	6a3b      	ldr	r3, [r7, #32]
 800da20:	2b18      	cmp	r3, #24
 800da22:	d156      	bne.n	800dad2 <HAL_RCC_OscConfig+0x20a>
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	f003 0303 	and.w	r3, r3, #3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d151      	bne.n	800dad2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800da2e:	4b48      	ldr	r3, [pc, #288]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f003 0304 	and.w	r3, r3, #4
 800da36:	2b00      	cmp	r3, #0
 800da38:	d005      	beq.n	800da46 <HAL_RCC_OscConfig+0x17e>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d101      	bne.n	800da46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800da42:	2301      	movs	r3, #1
 800da44:	e392      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800da46:	4b42      	ldr	r3, [pc, #264]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f023 0219 	bic.w	r2, r3, #25
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	493f      	ldr	r1, [pc, #252]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800da54:	4313      	orrs	r3, r2
 800da56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da58:	f7f7 feaa 	bl	80057b0 <HAL_GetTick>
 800da5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da5e:	e008      	b.n	800da72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da60:	f7f7 fea6 	bl	80057b0 <HAL_GetTick>
 800da64:	4602      	mov	r2, r0
 800da66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da68:	1ad3      	subs	r3, r2, r3
 800da6a:	2b02      	cmp	r3, #2
 800da6c:	d901      	bls.n	800da72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800da6e:	2303      	movs	r3, #3
 800da70:	e37c      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da72:	4b37      	ldr	r3, [pc, #220]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f003 0304 	and.w	r3, r3, #4
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d0f0      	beq.n	800da60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da7e:	f7f7 fea3 	bl	80057c8 <HAL_GetREVID>
 800da82:	4603      	mov	r3, r0
 800da84:	f241 0203 	movw	r2, #4099	; 0x1003
 800da88:	4293      	cmp	r3, r2
 800da8a:	d817      	bhi.n	800dabc <HAL_RCC_OscConfig+0x1f4>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	2b40      	cmp	r3, #64	; 0x40
 800da92:	d108      	bne.n	800daa6 <HAL_RCC_OscConfig+0x1de>
 800da94:	4b2e      	ldr	r3, [pc, #184]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800da9c:	4a2c      	ldr	r2, [pc, #176]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800da9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800daa2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800daa4:	e07a      	b.n	800db9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800daa6:	4b2a      	ldr	r3, [pc, #168]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	031b      	lsls	r3, r3, #12
 800dab4:	4926      	ldr	r1, [pc, #152]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800dab6:	4313      	orrs	r3, r2
 800dab8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800daba:	e06f      	b.n	800db9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dabc:	4b24      	ldr	r3, [pc, #144]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	691b      	ldr	r3, [r3, #16]
 800dac8:	061b      	lsls	r3, r3, #24
 800daca:	4921      	ldr	r1, [pc, #132]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800dacc:	4313      	orrs	r3, r2
 800dace:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dad0:	e064      	b.n	800db9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d047      	beq.n	800db6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dada:	4b1d      	ldr	r3, [pc, #116]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f023 0219 	bic.w	r2, r3, #25
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	491a      	ldr	r1, [pc, #104]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800dae8:	4313      	orrs	r3, r2
 800daea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800daec:	f7f7 fe60 	bl	80057b0 <HAL_GetTick>
 800daf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800daf2:	e008      	b.n	800db06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800daf4:	f7f7 fe5c 	bl	80057b0 <HAL_GetTick>
 800daf8:	4602      	mov	r2, r0
 800dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafc:	1ad3      	subs	r3, r2, r3
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d901      	bls.n	800db06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800db02:	2303      	movs	r3, #3
 800db04:	e332      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db06:	4b12      	ldr	r3, [pc, #72]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f003 0304 	and.w	r3, r3, #4
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d0f0      	beq.n	800daf4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db12:	f7f7 fe59 	bl	80057c8 <HAL_GetREVID>
 800db16:	4603      	mov	r3, r0
 800db18:	f241 0203 	movw	r2, #4099	; 0x1003
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d819      	bhi.n	800db54 <HAL_RCC_OscConfig+0x28c>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	691b      	ldr	r3, [r3, #16]
 800db24:	2b40      	cmp	r3, #64	; 0x40
 800db26:	d108      	bne.n	800db3a <HAL_RCC_OscConfig+0x272>
 800db28:	4b09      	ldr	r3, [pc, #36]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800db30:	4a07      	ldr	r2, [pc, #28]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800db32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db36:	6053      	str	r3, [r2, #4]
 800db38:	e030      	b.n	800db9c <HAL_RCC_OscConfig+0x2d4>
 800db3a:	4b05      	ldr	r3, [pc, #20]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	691b      	ldr	r3, [r3, #16]
 800db46:	031b      	lsls	r3, r3, #12
 800db48:	4901      	ldr	r1, [pc, #4]	; (800db50 <HAL_RCC_OscConfig+0x288>)
 800db4a:	4313      	orrs	r3, r2
 800db4c:	604b      	str	r3, [r1, #4]
 800db4e:	e025      	b.n	800db9c <HAL_RCC_OscConfig+0x2d4>
 800db50:	58024400 	.word	0x58024400
 800db54:	4b9a      	ldr	r3, [pc, #616]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	691b      	ldr	r3, [r3, #16]
 800db60:	061b      	lsls	r3, r3, #24
 800db62:	4997      	ldr	r1, [pc, #604]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800db64:	4313      	orrs	r3, r2
 800db66:	604b      	str	r3, [r1, #4]
 800db68:	e018      	b.n	800db9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800db6a:	4b95      	ldr	r3, [pc, #596]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4a94      	ldr	r2, [pc, #592]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800db70:	f023 0301 	bic.w	r3, r3, #1
 800db74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db76:	f7f7 fe1b 	bl	80057b0 <HAL_GetTick>
 800db7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800db7c:	e008      	b.n	800db90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800db7e:	f7f7 fe17 	bl	80057b0 <HAL_GetTick>
 800db82:	4602      	mov	r2, r0
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	1ad3      	subs	r3, r2, r3
 800db88:	2b02      	cmp	r3, #2
 800db8a:	d901      	bls.n	800db90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800db8c:	2303      	movs	r3, #3
 800db8e:	e2ed      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800db90:	4b8b      	ldr	r3, [pc, #556]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f003 0304 	and.w	r3, r3, #4
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1f0      	bne.n	800db7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f003 0310 	and.w	r3, r3, #16
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f000 80a9 	beq.w	800dcfc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dbaa:	4b85      	ldr	r3, [pc, #532]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dbb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dbb4:	4b82      	ldr	r3, [pc, #520]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	2b08      	cmp	r3, #8
 800dbbe:	d007      	beq.n	800dbd0 <HAL_RCC_OscConfig+0x308>
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	2b18      	cmp	r3, #24
 800dbc4:	d13a      	bne.n	800dc3c <HAL_RCC_OscConfig+0x374>
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f003 0303 	and.w	r3, r3, #3
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d135      	bne.n	800dc3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dbd0:	4b7b      	ldr	r3, [pc, #492]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d005      	beq.n	800dbe8 <HAL_RCC_OscConfig+0x320>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	69db      	ldr	r3, [r3, #28]
 800dbe0:	2b80      	cmp	r3, #128	; 0x80
 800dbe2:	d001      	beq.n	800dbe8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e2c1      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dbe8:	f7f7 fdee 	bl	80057c8 <HAL_GetREVID>
 800dbec:	4603      	mov	r3, r0
 800dbee:	f241 0203 	movw	r2, #4099	; 0x1003
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d817      	bhi.n	800dc26 <HAL_RCC_OscConfig+0x35e>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6a1b      	ldr	r3, [r3, #32]
 800dbfa:	2b20      	cmp	r3, #32
 800dbfc:	d108      	bne.n	800dc10 <HAL_RCC_OscConfig+0x348>
 800dbfe:	4b70      	ldr	r3, [pc, #448]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dc06:	4a6e      	ldr	r2, [pc, #440]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dc08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc0e:	e075      	b.n	800dcfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc10:	4b6b      	ldr	r3, [pc, #428]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a1b      	ldr	r3, [r3, #32]
 800dc1c:	069b      	lsls	r3, r3, #26
 800dc1e:	4968      	ldr	r1, [pc, #416]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dc20:	4313      	orrs	r3, r2
 800dc22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc24:	e06a      	b.n	800dcfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc26:	4b66      	ldr	r3, [pc, #408]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a1b      	ldr	r3, [r3, #32]
 800dc32:	061b      	lsls	r3, r3, #24
 800dc34:	4962      	ldr	r1, [pc, #392]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dc36:	4313      	orrs	r3, r2
 800dc38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc3a:	e05f      	b.n	800dcfc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	69db      	ldr	r3, [r3, #28]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d042      	beq.n	800dcca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800dc44:	4b5e      	ldr	r3, [pc, #376]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a5d      	ldr	r2, [pc, #372]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dc4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc50:	f7f7 fdae 	bl	80057b0 <HAL_GetTick>
 800dc54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dc56:	e008      	b.n	800dc6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dc58:	f7f7 fdaa 	bl	80057b0 <HAL_GetTick>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	2b02      	cmp	r3, #2
 800dc64:	d901      	bls.n	800dc6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800dc66:	2303      	movs	r3, #3
 800dc68:	e280      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dc6a:	4b55      	ldr	r3, [pc, #340]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d0f0      	beq.n	800dc58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc76:	f7f7 fda7 	bl	80057c8 <HAL_GetREVID>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	f241 0203 	movw	r2, #4099	; 0x1003
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d817      	bhi.n	800dcb4 <HAL_RCC_OscConfig+0x3ec>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6a1b      	ldr	r3, [r3, #32]
 800dc88:	2b20      	cmp	r3, #32
 800dc8a:	d108      	bne.n	800dc9e <HAL_RCC_OscConfig+0x3d6>
 800dc8c:	4b4c      	ldr	r3, [pc, #304]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dc94:	4a4a      	ldr	r2, [pc, #296]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dc96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc9a:	6053      	str	r3, [r2, #4]
 800dc9c:	e02e      	b.n	800dcfc <HAL_RCC_OscConfig+0x434>
 800dc9e:	4b48      	ldr	r3, [pc, #288]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a1b      	ldr	r3, [r3, #32]
 800dcaa:	069b      	lsls	r3, r3, #26
 800dcac:	4944      	ldr	r1, [pc, #272]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	604b      	str	r3, [r1, #4]
 800dcb2:	e023      	b.n	800dcfc <HAL_RCC_OscConfig+0x434>
 800dcb4:	4b42      	ldr	r3, [pc, #264]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6a1b      	ldr	r3, [r3, #32]
 800dcc0:	061b      	lsls	r3, r3, #24
 800dcc2:	493f      	ldr	r1, [pc, #252]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	60cb      	str	r3, [r1, #12]
 800dcc8:	e018      	b.n	800dcfc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800dcca:	4b3d      	ldr	r3, [pc, #244]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a3c      	ldr	r2, [pc, #240]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dcd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcd6:	f7f7 fd6b 	bl	80057b0 <HAL_GetTick>
 800dcda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dcdc:	e008      	b.n	800dcf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dcde:	f7f7 fd67 	bl	80057b0 <HAL_GetTick>
 800dce2:	4602      	mov	r2, r0
 800dce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce6:	1ad3      	subs	r3, r2, r3
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	d901      	bls.n	800dcf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dcec:	2303      	movs	r3, #3
 800dcee:	e23d      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dcf0:	4b33      	ldr	r3, [pc, #204]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d1f0      	bne.n	800dcde <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f003 0308 	and.w	r3, r3, #8
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d036      	beq.n	800dd76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d019      	beq.n	800dd44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dd10:	4b2b      	ldr	r3, [pc, #172]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dd12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd14:	4a2a      	ldr	r2, [pc, #168]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dd16:	f043 0301 	orr.w	r3, r3, #1
 800dd1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd1c:	f7f7 fd48 	bl	80057b0 <HAL_GetTick>
 800dd20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dd22:	e008      	b.n	800dd36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dd24:	f7f7 fd44 	bl	80057b0 <HAL_GetTick>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	1ad3      	subs	r3, r2, r3
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	d901      	bls.n	800dd36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800dd32:	2303      	movs	r3, #3
 800dd34:	e21a      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dd36:	4b22      	ldr	r3, [pc, #136]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dd38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd3a:	f003 0302 	and.w	r3, r3, #2
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d0f0      	beq.n	800dd24 <HAL_RCC_OscConfig+0x45c>
 800dd42:	e018      	b.n	800dd76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dd44:	4b1e      	ldr	r3, [pc, #120]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dd46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd48:	4a1d      	ldr	r2, [pc, #116]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dd4a:	f023 0301 	bic.w	r3, r3, #1
 800dd4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd50:	f7f7 fd2e 	bl	80057b0 <HAL_GetTick>
 800dd54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dd56:	e008      	b.n	800dd6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dd58:	f7f7 fd2a 	bl	80057b0 <HAL_GetTick>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	d901      	bls.n	800dd6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800dd66:	2303      	movs	r3, #3
 800dd68:	e200      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dd6a:	4b15      	ldr	r3, [pc, #84]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dd6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd6e:	f003 0302 	and.w	r3, r3, #2
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1f0      	bne.n	800dd58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f003 0320 	and.w	r3, r3, #32
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d039      	beq.n	800ddf6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	699b      	ldr	r3, [r3, #24]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d01c      	beq.n	800ddc4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dd8a:	4b0d      	ldr	r3, [pc, #52]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a0c      	ldr	r2, [pc, #48]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800dd90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dd94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dd96:	f7f7 fd0b 	bl	80057b0 <HAL_GetTick>
 800dd9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dd9c:	e008      	b.n	800ddb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dd9e:	f7f7 fd07 	bl	80057b0 <HAL_GetTick>
 800dda2:	4602      	mov	r2, r0
 800dda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda6:	1ad3      	subs	r3, r2, r3
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d901      	bls.n	800ddb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ddac:	2303      	movs	r3, #3
 800ddae:	e1dd      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ddb0:	4b03      	ldr	r3, [pc, #12]	; (800ddc0 <HAL_RCC_OscConfig+0x4f8>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d0f0      	beq.n	800dd9e <HAL_RCC_OscConfig+0x4d6>
 800ddbc:	e01b      	b.n	800ddf6 <HAL_RCC_OscConfig+0x52e>
 800ddbe:	bf00      	nop
 800ddc0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ddc4:	4b9b      	ldr	r3, [pc, #620]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4a9a      	ldr	r2, [pc, #616]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800ddca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ddd0:	f7f7 fcee 	bl	80057b0 <HAL_GetTick>
 800ddd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ddd6:	e008      	b.n	800ddea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ddd8:	f7f7 fcea 	bl	80057b0 <HAL_GetTick>
 800dddc:	4602      	mov	r2, r0
 800ddde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	2b02      	cmp	r3, #2
 800dde4:	d901      	bls.n	800ddea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800dde6:	2303      	movs	r3, #3
 800dde8:	e1c0      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ddea:	4b92      	ldr	r3, [pc, #584]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d1f0      	bne.n	800ddd8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f003 0304 	and.w	r3, r3, #4
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	f000 8081 	beq.w	800df06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800de04:	4b8c      	ldr	r3, [pc, #560]	; (800e038 <HAL_RCC_OscConfig+0x770>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a8b      	ldr	r2, [pc, #556]	; (800e038 <HAL_RCC_OscConfig+0x770>)
 800de0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800de10:	f7f7 fcce 	bl	80057b0 <HAL_GetTick>
 800de14:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de16:	e008      	b.n	800de2a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de18:	f7f7 fcca 	bl	80057b0 <HAL_GetTick>
 800de1c:	4602      	mov	r2, r0
 800de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	2b64      	cmp	r3, #100	; 0x64
 800de24:	d901      	bls.n	800de2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800de26:	2303      	movs	r3, #3
 800de28:	e1a0      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de2a:	4b83      	ldr	r3, [pc, #524]	; (800e038 <HAL_RCC_OscConfig+0x770>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de32:	2b00      	cmp	r3, #0
 800de34:	d0f0      	beq.n	800de18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	2b01      	cmp	r3, #1
 800de3c:	d106      	bne.n	800de4c <HAL_RCC_OscConfig+0x584>
 800de3e:	4b7d      	ldr	r3, [pc, #500]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de42:	4a7c      	ldr	r2, [pc, #496]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de44:	f043 0301 	orr.w	r3, r3, #1
 800de48:	6713      	str	r3, [r2, #112]	; 0x70
 800de4a:	e02d      	b.n	800dea8 <HAL_RCC_OscConfig+0x5e0>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d10c      	bne.n	800de6e <HAL_RCC_OscConfig+0x5a6>
 800de54:	4b77      	ldr	r3, [pc, #476]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de58:	4a76      	ldr	r2, [pc, #472]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de5a:	f023 0301 	bic.w	r3, r3, #1
 800de5e:	6713      	str	r3, [r2, #112]	; 0x70
 800de60:	4b74      	ldr	r3, [pc, #464]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de64:	4a73      	ldr	r2, [pc, #460]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de66:	f023 0304 	bic.w	r3, r3, #4
 800de6a:	6713      	str	r3, [r2, #112]	; 0x70
 800de6c:	e01c      	b.n	800dea8 <HAL_RCC_OscConfig+0x5e0>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	689b      	ldr	r3, [r3, #8]
 800de72:	2b05      	cmp	r3, #5
 800de74:	d10c      	bne.n	800de90 <HAL_RCC_OscConfig+0x5c8>
 800de76:	4b6f      	ldr	r3, [pc, #444]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de7a:	4a6e      	ldr	r2, [pc, #440]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de7c:	f043 0304 	orr.w	r3, r3, #4
 800de80:	6713      	str	r3, [r2, #112]	; 0x70
 800de82:	4b6c      	ldr	r3, [pc, #432]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de86:	4a6b      	ldr	r2, [pc, #428]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de88:	f043 0301 	orr.w	r3, r3, #1
 800de8c:	6713      	str	r3, [r2, #112]	; 0x70
 800de8e:	e00b      	b.n	800dea8 <HAL_RCC_OscConfig+0x5e0>
 800de90:	4b68      	ldr	r3, [pc, #416]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de94:	4a67      	ldr	r2, [pc, #412]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de96:	f023 0301 	bic.w	r3, r3, #1
 800de9a:	6713      	str	r3, [r2, #112]	; 0x70
 800de9c:	4b65      	ldr	r3, [pc, #404]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800de9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dea0:	4a64      	ldr	r2, [pc, #400]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dea2:	f023 0304 	bic.w	r3, r3, #4
 800dea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d015      	beq.n	800dedc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800deb0:	f7f7 fc7e 	bl	80057b0 <HAL_GetTick>
 800deb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800deb6:	e00a      	b.n	800dece <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800deb8:	f7f7 fc7a 	bl	80057b0 <HAL_GetTick>
 800debc:	4602      	mov	r2, r0
 800debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d901      	bls.n	800dece <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800deca:	2303      	movs	r3, #3
 800decc:	e14e      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dece:	4b59      	ldr	r3, [pc, #356]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800ded0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ded2:	f003 0302 	and.w	r3, r3, #2
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d0ee      	beq.n	800deb8 <HAL_RCC_OscConfig+0x5f0>
 800deda:	e014      	b.n	800df06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dedc:	f7f7 fc68 	bl	80057b0 <HAL_GetTick>
 800dee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800dee2:	e00a      	b.n	800defa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dee4:	f7f7 fc64 	bl	80057b0 <HAL_GetTick>
 800dee8:	4602      	mov	r2, r0
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	f241 3288 	movw	r2, #5000	; 0x1388
 800def2:	4293      	cmp	r3, r2
 800def4:	d901      	bls.n	800defa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800def6:	2303      	movs	r3, #3
 800def8:	e138      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800defa:	4b4e      	ldr	r3, [pc, #312]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800defc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800defe:	f003 0302 	and.w	r3, r3, #2
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1ee      	bne.n	800dee4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f000 812d 	beq.w	800e16a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800df10:	4b48      	ldr	r3, [pc, #288]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800df12:	691b      	ldr	r3, [r3, #16]
 800df14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df18:	2b18      	cmp	r3, #24
 800df1a:	f000 80bd 	beq.w	800e098 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df22:	2b02      	cmp	r3, #2
 800df24:	f040 809e 	bne.w	800e064 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df28:	4b42      	ldr	r3, [pc, #264]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a41      	ldr	r2, [pc, #260]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800df2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800df32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df34:	f7f7 fc3c 	bl	80057b0 <HAL_GetTick>
 800df38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800df3a:	e008      	b.n	800df4e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df3c:	f7f7 fc38 	bl	80057b0 <HAL_GetTick>
 800df40:	4602      	mov	r2, r0
 800df42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df44:	1ad3      	subs	r3, r2, r3
 800df46:	2b02      	cmp	r3, #2
 800df48:	d901      	bls.n	800df4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800df4a:	2303      	movs	r3, #3
 800df4c:	e10e      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800df4e:	4b39      	ldr	r3, [pc, #228]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df56:	2b00      	cmp	r3, #0
 800df58:	d1f0      	bne.n	800df3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800df5a:	4b36      	ldr	r3, [pc, #216]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800df5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df5e:	4b37      	ldr	r3, [pc, #220]	; (800e03c <HAL_RCC_OscConfig+0x774>)
 800df60:	4013      	ands	r3, r2
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800df6a:	0112      	lsls	r2, r2, #4
 800df6c:	430a      	orrs	r2, r1
 800df6e:	4931      	ldr	r1, [pc, #196]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800df70:	4313      	orrs	r3, r2
 800df72:	628b      	str	r3, [r1, #40]	; 0x28
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df78:	3b01      	subs	r3, #1
 800df7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df82:	3b01      	subs	r3, #1
 800df84:	025b      	lsls	r3, r3, #9
 800df86:	b29b      	uxth	r3, r3
 800df88:	431a      	orrs	r2, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df8e:	3b01      	subs	r3, #1
 800df90:	041b      	lsls	r3, r3, #16
 800df92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800df96:	431a      	orrs	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df9c:	3b01      	subs	r3, #1
 800df9e:	061b      	lsls	r3, r3, #24
 800dfa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dfa4:	4923      	ldr	r1, [pc, #140]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800dfaa:	4b22      	ldr	r3, [pc, #136]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfae:	4a21      	ldr	r2, [pc, #132]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dfb0:	f023 0301 	bic.w	r3, r3, #1
 800dfb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dfb6:	4b1f      	ldr	r3, [pc, #124]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dfb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfba:	4b21      	ldr	r3, [pc, #132]	; (800e040 <HAL_RCC_OscConfig+0x778>)
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dfc2:	00d2      	lsls	r2, r2, #3
 800dfc4:	491b      	ldr	r1, [pc, #108]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800dfca:	4b1a      	ldr	r3, [pc, #104]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfce:	f023 020c 	bic.w	r2, r3, #12
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfd6:	4917      	ldr	r1, [pc, #92]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800dfdc:	4b15      	ldr	r3, [pc, #84]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe0:	f023 0202 	bic.w	r2, r3, #2
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfe8:	4912      	ldr	r1, [pc, #72]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dfea:	4313      	orrs	r3, r2
 800dfec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dfee:	4b11      	ldr	r3, [pc, #68]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff2:	4a10      	ldr	r2, [pc, #64]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dffa:	4b0e      	ldr	r3, [pc, #56]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800dffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dffe:	4a0d      	ldr	r2, [pc, #52]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800e000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e006:	4b0b      	ldr	r3, [pc, #44]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800e008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00a:	4a0a      	ldr	r2, [pc, #40]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800e00c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e012:	4b08      	ldr	r3, [pc, #32]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800e014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e016:	4a07      	ldr	r2, [pc, #28]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800e018:	f043 0301 	orr.w	r3, r3, #1
 800e01c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e01e:	4b05      	ldr	r3, [pc, #20]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4a04      	ldr	r2, [pc, #16]	; (800e034 <HAL_RCC_OscConfig+0x76c>)
 800e024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e02a:	f7f7 fbc1 	bl	80057b0 <HAL_GetTick>
 800e02e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e030:	e011      	b.n	800e056 <HAL_RCC_OscConfig+0x78e>
 800e032:	bf00      	nop
 800e034:	58024400 	.word	0x58024400
 800e038:	58024800 	.word	0x58024800
 800e03c:	fffffc0c 	.word	0xfffffc0c
 800e040:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e044:	f7f7 fbb4 	bl	80057b0 <HAL_GetTick>
 800e048:	4602      	mov	r2, r0
 800e04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	2b02      	cmp	r3, #2
 800e050:	d901      	bls.n	800e056 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e052:	2303      	movs	r3, #3
 800e054:	e08a      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e056:	4b47      	ldr	r3, [pc, #284]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d0f0      	beq.n	800e044 <HAL_RCC_OscConfig+0x77c>
 800e062:	e082      	b.n	800e16a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e064:	4b43      	ldr	r3, [pc, #268]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a42      	ldr	r2, [pc, #264]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e06a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e06e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e070:	f7f7 fb9e 	bl	80057b0 <HAL_GetTick>
 800e074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e076:	e008      	b.n	800e08a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e078:	f7f7 fb9a 	bl	80057b0 <HAL_GetTick>
 800e07c:	4602      	mov	r2, r0
 800e07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	2b02      	cmp	r3, #2
 800e084:	d901      	bls.n	800e08a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e086:	2303      	movs	r3, #3
 800e088:	e070      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e08a:	4b3a      	ldr	r3, [pc, #232]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e092:	2b00      	cmp	r3, #0
 800e094:	d1f0      	bne.n	800e078 <HAL_RCC_OscConfig+0x7b0>
 800e096:	e068      	b.n	800e16a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e098:	4b36      	ldr	r3, [pc, #216]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e09e:	4b35      	ldr	r3, [pc, #212]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d031      	beq.n	800e110 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	f003 0203 	and.w	r2, r3, #3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d12a      	bne.n	800e110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	091b      	lsrs	r3, r3, #4
 800e0be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d122      	bne.n	800e110 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d11a      	bne.n	800e110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	0a5b      	lsrs	r3, r3, #9
 800e0de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d111      	bne.n	800e110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	0c1b      	lsrs	r3, r3, #16
 800e0f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d108      	bne.n	800e110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	0e1b      	lsrs	r3, r3, #24
 800e102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e10a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d001      	beq.n	800e114 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	e02b      	b.n	800e16c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e114:	4b17      	ldr	r3, [pc, #92]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e118:	08db      	lsrs	r3, r3, #3
 800e11a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e11e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e124:	693a      	ldr	r2, [r7, #16]
 800e126:	429a      	cmp	r2, r3
 800e128:	d01f      	beq.n	800e16a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e12a:	4b12      	ldr	r3, [pc, #72]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12e:	4a11      	ldr	r2, [pc, #68]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e130:	f023 0301 	bic.w	r3, r3, #1
 800e134:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e136:	f7f7 fb3b 	bl	80057b0 <HAL_GetTick>
 800e13a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e13c:	bf00      	nop
 800e13e:	f7f7 fb37 	bl	80057b0 <HAL_GetTick>
 800e142:	4602      	mov	r2, r0
 800e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e146:	4293      	cmp	r3, r2
 800e148:	d0f9      	beq.n	800e13e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e14a:	4b0a      	ldr	r3, [pc, #40]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e14c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e14e:	4b0a      	ldr	r3, [pc, #40]	; (800e178 <HAL_RCC_OscConfig+0x8b0>)
 800e150:	4013      	ands	r3, r2
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e156:	00d2      	lsls	r2, r2, #3
 800e158:	4906      	ldr	r1, [pc, #24]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e15a:	4313      	orrs	r3, r2
 800e15c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e15e:	4b05      	ldr	r3, [pc, #20]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e162:	4a04      	ldr	r2, [pc, #16]	; (800e174 <HAL_RCC_OscConfig+0x8ac>)
 800e164:	f043 0301 	orr.w	r3, r3, #1
 800e168:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e16a:	2300      	movs	r3, #0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3730      	adds	r7, #48	; 0x30
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	58024400 	.word	0x58024400
 800e178:	ffff0007 	.word	0xffff0007

0800e17c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d101      	bne.n	800e190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e18c:	2301      	movs	r3, #1
 800e18e:	e19c      	b.n	800e4ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e190:	4b8a      	ldr	r3, [pc, #552]	; (800e3bc <HAL_RCC_ClockConfig+0x240>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f003 030f 	and.w	r3, r3, #15
 800e198:	683a      	ldr	r2, [r7, #0]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d910      	bls.n	800e1c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e19e:	4b87      	ldr	r3, [pc, #540]	; (800e3bc <HAL_RCC_ClockConfig+0x240>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f023 020f 	bic.w	r2, r3, #15
 800e1a6:	4985      	ldr	r1, [pc, #532]	; (800e3bc <HAL_RCC_ClockConfig+0x240>)
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e1ae:	4b83      	ldr	r3, [pc, #524]	; (800e3bc <HAL_RCC_ClockConfig+0x240>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f003 030f 	and.w	r3, r3, #15
 800e1b6:	683a      	ldr	r2, [r7, #0]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d001      	beq.n	800e1c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e184      	b.n	800e4ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f003 0304 	and.w	r3, r3, #4
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d010      	beq.n	800e1ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	691a      	ldr	r2, [r3, #16]
 800e1d0:	4b7b      	ldr	r3, [pc, #492]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e1d2:	699b      	ldr	r3, [r3, #24]
 800e1d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d908      	bls.n	800e1ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e1dc:	4b78      	ldr	r3, [pc, #480]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e1de:	699b      	ldr	r3, [r3, #24]
 800e1e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	4975      	ldr	r1, [pc, #468]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f003 0308 	and.w	r3, r3, #8
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d010      	beq.n	800e21c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	695a      	ldr	r2, [r3, #20]
 800e1fe:	4b70      	ldr	r3, [pc, #448]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e200:	69db      	ldr	r3, [r3, #28]
 800e202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e206:	429a      	cmp	r2, r3
 800e208:	d908      	bls.n	800e21c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e20a:	4b6d      	ldr	r3, [pc, #436]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e20c:	69db      	ldr	r3, [r3, #28]
 800e20e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	695b      	ldr	r3, [r3, #20]
 800e216:	496a      	ldr	r1, [pc, #424]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e218:	4313      	orrs	r3, r2
 800e21a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f003 0310 	and.w	r3, r3, #16
 800e224:	2b00      	cmp	r3, #0
 800e226:	d010      	beq.n	800e24a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	699a      	ldr	r2, [r3, #24]
 800e22c:	4b64      	ldr	r3, [pc, #400]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e22e:	69db      	ldr	r3, [r3, #28]
 800e230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e234:	429a      	cmp	r2, r3
 800e236:	d908      	bls.n	800e24a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e238:	4b61      	ldr	r3, [pc, #388]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e23a:	69db      	ldr	r3, [r3, #28]
 800e23c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	495e      	ldr	r1, [pc, #376]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e246:	4313      	orrs	r3, r2
 800e248:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f003 0320 	and.w	r3, r3, #32
 800e252:	2b00      	cmp	r3, #0
 800e254:	d010      	beq.n	800e278 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	69da      	ldr	r2, [r3, #28]
 800e25a:	4b59      	ldr	r3, [pc, #356]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e25c:	6a1b      	ldr	r3, [r3, #32]
 800e25e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e262:	429a      	cmp	r2, r3
 800e264:	d908      	bls.n	800e278 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e266:	4b56      	ldr	r3, [pc, #344]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e268:	6a1b      	ldr	r3, [r3, #32]
 800e26a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	69db      	ldr	r3, [r3, #28]
 800e272:	4953      	ldr	r1, [pc, #332]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e274:	4313      	orrs	r3, r2
 800e276:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f003 0302 	and.w	r3, r3, #2
 800e280:	2b00      	cmp	r3, #0
 800e282:	d010      	beq.n	800e2a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	68da      	ldr	r2, [r3, #12]
 800e288:	4b4d      	ldr	r3, [pc, #308]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e28a:	699b      	ldr	r3, [r3, #24]
 800e28c:	f003 030f 	and.w	r3, r3, #15
 800e290:	429a      	cmp	r2, r3
 800e292:	d908      	bls.n	800e2a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e294:	4b4a      	ldr	r3, [pc, #296]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e296:	699b      	ldr	r3, [r3, #24]
 800e298:	f023 020f 	bic.w	r2, r3, #15
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	4947      	ldr	r1, [pc, #284]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f003 0301 	and.w	r3, r3, #1
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d055      	beq.n	800e35e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e2b2:	4b43      	ldr	r3, [pc, #268]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e2b4:	699b      	ldr	r3, [r3, #24]
 800e2b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	4940      	ldr	r1, [pc, #256]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d107      	bne.n	800e2dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e2cc:	4b3c      	ldr	r3, [pc, #240]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d121      	bne.n	800e31c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	e0f6      	b.n	800e4ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	2b03      	cmp	r3, #3
 800e2e2:	d107      	bne.n	800e2f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e2e4:	4b36      	ldr	r3, [pc, #216]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d115      	bne.n	800e31c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	e0ea      	b.n	800e4ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d107      	bne.n	800e30c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e2fc:	4b30      	ldr	r3, [pc, #192]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e304:	2b00      	cmp	r3, #0
 800e306:	d109      	bne.n	800e31c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e308:	2301      	movs	r3, #1
 800e30a:	e0de      	b.n	800e4ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e30c:	4b2c      	ldr	r3, [pc, #176]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f003 0304 	and.w	r3, r3, #4
 800e314:	2b00      	cmp	r3, #0
 800e316:	d101      	bne.n	800e31c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e318:	2301      	movs	r3, #1
 800e31a:	e0d6      	b.n	800e4ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e31c:	4b28      	ldr	r3, [pc, #160]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e31e:	691b      	ldr	r3, [r3, #16]
 800e320:	f023 0207 	bic.w	r2, r3, #7
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	4925      	ldr	r1, [pc, #148]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e32a:	4313      	orrs	r3, r2
 800e32c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e32e:	f7f7 fa3f 	bl	80057b0 <HAL_GetTick>
 800e332:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e334:	e00a      	b.n	800e34c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e336:	f7f7 fa3b 	bl	80057b0 <HAL_GetTick>
 800e33a:	4602      	mov	r2, r0
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	1ad3      	subs	r3, r2, r3
 800e340:	f241 3288 	movw	r2, #5000	; 0x1388
 800e344:	4293      	cmp	r3, r2
 800e346:	d901      	bls.n	800e34c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e348:	2303      	movs	r3, #3
 800e34a:	e0be      	b.n	800e4ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e34c:	4b1c      	ldr	r3, [pc, #112]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e34e:	691b      	ldr	r3, [r3, #16]
 800e350:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	00db      	lsls	r3, r3, #3
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d1eb      	bne.n	800e336 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f003 0302 	and.w	r3, r3, #2
 800e366:	2b00      	cmp	r3, #0
 800e368:	d010      	beq.n	800e38c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	68da      	ldr	r2, [r3, #12]
 800e36e:	4b14      	ldr	r3, [pc, #80]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e370:	699b      	ldr	r3, [r3, #24]
 800e372:	f003 030f 	and.w	r3, r3, #15
 800e376:	429a      	cmp	r2, r3
 800e378:	d208      	bcs.n	800e38c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e37a:	4b11      	ldr	r3, [pc, #68]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e37c:	699b      	ldr	r3, [r3, #24]
 800e37e:	f023 020f 	bic.w	r2, r3, #15
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	490e      	ldr	r1, [pc, #56]	; (800e3c0 <HAL_RCC_ClockConfig+0x244>)
 800e388:	4313      	orrs	r3, r2
 800e38a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e38c:	4b0b      	ldr	r3, [pc, #44]	; (800e3bc <HAL_RCC_ClockConfig+0x240>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f003 030f 	and.w	r3, r3, #15
 800e394:	683a      	ldr	r2, [r7, #0]
 800e396:	429a      	cmp	r2, r3
 800e398:	d214      	bcs.n	800e3c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e39a:	4b08      	ldr	r3, [pc, #32]	; (800e3bc <HAL_RCC_ClockConfig+0x240>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f023 020f 	bic.w	r2, r3, #15
 800e3a2:	4906      	ldr	r1, [pc, #24]	; (800e3bc <HAL_RCC_ClockConfig+0x240>)
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e3aa:	4b04      	ldr	r3, [pc, #16]	; (800e3bc <HAL_RCC_ClockConfig+0x240>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f003 030f 	and.w	r3, r3, #15
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d005      	beq.n	800e3c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e086      	b.n	800e4ca <HAL_RCC_ClockConfig+0x34e>
 800e3bc:	52002000 	.word	0x52002000
 800e3c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f003 0304 	and.w	r3, r3, #4
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d010      	beq.n	800e3f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	691a      	ldr	r2, [r3, #16]
 800e3d4:	4b3f      	ldr	r3, [pc, #252]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e3d6:	699b      	ldr	r3, [r3, #24]
 800e3d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d208      	bcs.n	800e3f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e3e0:	4b3c      	ldr	r3, [pc, #240]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e3e2:	699b      	ldr	r3, [r3, #24]
 800e3e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	691b      	ldr	r3, [r3, #16]
 800e3ec:	4939      	ldr	r1, [pc, #228]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f003 0308 	and.w	r3, r3, #8
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d010      	beq.n	800e420 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	695a      	ldr	r2, [r3, #20]
 800e402:	4b34      	ldr	r3, [pc, #208]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e404:	69db      	ldr	r3, [r3, #28]
 800e406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d208      	bcs.n	800e420 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e40e:	4b31      	ldr	r3, [pc, #196]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e410:	69db      	ldr	r3, [r3, #28]
 800e412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	695b      	ldr	r3, [r3, #20]
 800e41a:	492e      	ldr	r1, [pc, #184]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e41c:	4313      	orrs	r3, r2
 800e41e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f003 0310 	and.w	r3, r3, #16
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d010      	beq.n	800e44e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	699a      	ldr	r2, [r3, #24]
 800e430:	4b28      	ldr	r3, [pc, #160]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e432:	69db      	ldr	r3, [r3, #28]
 800e434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e438:	429a      	cmp	r2, r3
 800e43a:	d208      	bcs.n	800e44e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e43c:	4b25      	ldr	r3, [pc, #148]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e43e:	69db      	ldr	r3, [r3, #28]
 800e440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	699b      	ldr	r3, [r3, #24]
 800e448:	4922      	ldr	r1, [pc, #136]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e44a:	4313      	orrs	r3, r2
 800e44c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f003 0320 	and.w	r3, r3, #32
 800e456:	2b00      	cmp	r3, #0
 800e458:	d010      	beq.n	800e47c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	69da      	ldr	r2, [r3, #28]
 800e45e:	4b1d      	ldr	r3, [pc, #116]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e460:	6a1b      	ldr	r3, [r3, #32]
 800e462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e466:	429a      	cmp	r2, r3
 800e468:	d208      	bcs.n	800e47c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e46a:	4b1a      	ldr	r3, [pc, #104]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e46c:	6a1b      	ldr	r3, [r3, #32]
 800e46e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	69db      	ldr	r3, [r3, #28]
 800e476:	4917      	ldr	r1, [pc, #92]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e478:	4313      	orrs	r3, r2
 800e47a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e47c:	f000 f834 	bl	800e4e8 <HAL_RCC_GetSysClockFreq>
 800e480:	4602      	mov	r2, r0
 800e482:	4b14      	ldr	r3, [pc, #80]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e484:	699b      	ldr	r3, [r3, #24]
 800e486:	0a1b      	lsrs	r3, r3, #8
 800e488:	f003 030f 	and.w	r3, r3, #15
 800e48c:	4912      	ldr	r1, [pc, #72]	; (800e4d8 <HAL_RCC_ClockConfig+0x35c>)
 800e48e:	5ccb      	ldrb	r3, [r1, r3]
 800e490:	f003 031f 	and.w	r3, r3, #31
 800e494:	fa22 f303 	lsr.w	r3, r2, r3
 800e498:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e49a:	4b0e      	ldr	r3, [pc, #56]	; (800e4d4 <HAL_RCC_ClockConfig+0x358>)
 800e49c:	699b      	ldr	r3, [r3, #24]
 800e49e:	f003 030f 	and.w	r3, r3, #15
 800e4a2:	4a0d      	ldr	r2, [pc, #52]	; (800e4d8 <HAL_RCC_ClockConfig+0x35c>)
 800e4a4:	5cd3      	ldrb	r3, [r2, r3]
 800e4a6:	f003 031f 	and.w	r3, r3, #31
 800e4aa:	693a      	ldr	r2, [r7, #16]
 800e4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800e4b0:	4a0a      	ldr	r2, [pc, #40]	; (800e4dc <HAL_RCC_ClockConfig+0x360>)
 800e4b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e4b4:	4a0a      	ldr	r2, [pc, #40]	; (800e4e0 <HAL_RCC_ClockConfig+0x364>)
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e4ba:	4b0a      	ldr	r3, [pc, #40]	; (800e4e4 <HAL_RCC_ClockConfig+0x368>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7f5 ff9c 	bl	80043fc <HAL_InitTick>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3718      	adds	r7, #24
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	58024400 	.word	0x58024400
 800e4d8:	0801abb4 	.word	0x0801abb4
 800e4dc:	24000094 	.word	0x24000094
 800e4e0:	24000090 	.word	0x24000090
 800e4e4:	24000098 	.word	0x24000098

0800e4e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b089      	sub	sp, #36	; 0x24
 800e4ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e4ee:	4bb3      	ldr	r3, [pc, #716]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4f0:	691b      	ldr	r3, [r3, #16]
 800e4f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e4f6:	2b18      	cmp	r3, #24
 800e4f8:	f200 8155 	bhi.w	800e7a6 <HAL_RCC_GetSysClockFreq+0x2be>
 800e4fc:	a201      	add	r2, pc, #4	; (adr r2, 800e504 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e502:	bf00      	nop
 800e504:	0800e569 	.word	0x0800e569
 800e508:	0800e7a7 	.word	0x0800e7a7
 800e50c:	0800e7a7 	.word	0x0800e7a7
 800e510:	0800e7a7 	.word	0x0800e7a7
 800e514:	0800e7a7 	.word	0x0800e7a7
 800e518:	0800e7a7 	.word	0x0800e7a7
 800e51c:	0800e7a7 	.word	0x0800e7a7
 800e520:	0800e7a7 	.word	0x0800e7a7
 800e524:	0800e58f 	.word	0x0800e58f
 800e528:	0800e7a7 	.word	0x0800e7a7
 800e52c:	0800e7a7 	.word	0x0800e7a7
 800e530:	0800e7a7 	.word	0x0800e7a7
 800e534:	0800e7a7 	.word	0x0800e7a7
 800e538:	0800e7a7 	.word	0x0800e7a7
 800e53c:	0800e7a7 	.word	0x0800e7a7
 800e540:	0800e7a7 	.word	0x0800e7a7
 800e544:	0800e595 	.word	0x0800e595
 800e548:	0800e7a7 	.word	0x0800e7a7
 800e54c:	0800e7a7 	.word	0x0800e7a7
 800e550:	0800e7a7 	.word	0x0800e7a7
 800e554:	0800e7a7 	.word	0x0800e7a7
 800e558:	0800e7a7 	.word	0x0800e7a7
 800e55c:	0800e7a7 	.word	0x0800e7a7
 800e560:	0800e7a7 	.word	0x0800e7a7
 800e564:	0800e59b 	.word	0x0800e59b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e568:	4b94      	ldr	r3, [pc, #592]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f003 0320 	and.w	r3, r3, #32
 800e570:	2b00      	cmp	r3, #0
 800e572:	d009      	beq.n	800e588 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e574:	4b91      	ldr	r3, [pc, #580]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	08db      	lsrs	r3, r3, #3
 800e57a:	f003 0303 	and.w	r3, r3, #3
 800e57e:	4a90      	ldr	r2, [pc, #576]	; (800e7c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e580:	fa22 f303 	lsr.w	r3, r2, r3
 800e584:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e586:	e111      	b.n	800e7ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e588:	4b8d      	ldr	r3, [pc, #564]	; (800e7c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e58a:	61bb      	str	r3, [r7, #24]
      break;
 800e58c:	e10e      	b.n	800e7ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e58e:	4b8d      	ldr	r3, [pc, #564]	; (800e7c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e590:	61bb      	str	r3, [r7, #24]
      break;
 800e592:	e10b      	b.n	800e7ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e594:	4b8c      	ldr	r3, [pc, #560]	; (800e7c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e596:	61bb      	str	r3, [r7, #24]
      break;
 800e598:	e108      	b.n	800e7ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e59a:	4b88      	ldr	r3, [pc, #544]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e59e:	f003 0303 	and.w	r3, r3, #3
 800e5a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e5a4:	4b85      	ldr	r3, [pc, #532]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a8:	091b      	lsrs	r3, r3, #4
 800e5aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e5b0:	4b82      	ldr	r3, [pc, #520]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b4:	f003 0301 	and.w	r3, r3, #1
 800e5b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e5ba:	4b80      	ldr	r3, [pc, #512]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5be:	08db      	lsrs	r3, r3, #3
 800e5c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	fb02 f303 	mul.w	r3, r2, r3
 800e5ca:	ee07 3a90 	vmov	s15, r3
 800e5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f000 80e1 	beq.w	800e7a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	2b02      	cmp	r3, #2
 800e5e2:	f000 8083 	beq.w	800e6ec <HAL_RCC_GetSysClockFreq+0x204>
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	2b02      	cmp	r3, #2
 800e5ea:	f200 80a1 	bhi.w	800e730 <HAL_RCC_GetSysClockFreq+0x248>
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d003      	beq.n	800e5fc <HAL_RCC_GetSysClockFreq+0x114>
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d056      	beq.n	800e6a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e5fa:	e099      	b.n	800e730 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5fc:	4b6f      	ldr	r3, [pc, #444]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f003 0320 	and.w	r3, r3, #32
 800e604:	2b00      	cmp	r3, #0
 800e606:	d02d      	beq.n	800e664 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e608:	4b6c      	ldr	r3, [pc, #432]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	08db      	lsrs	r3, r3, #3
 800e60e:	f003 0303 	and.w	r3, r3, #3
 800e612:	4a6b      	ldr	r2, [pc, #428]	; (800e7c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e614:	fa22 f303 	lsr.w	r3, r2, r3
 800e618:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	ee07 3a90 	vmov	s15, r3
 800e620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	ee07 3a90 	vmov	s15, r3
 800e62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e632:	4b62      	ldr	r3, [pc, #392]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e63a:	ee07 3a90 	vmov	s15, r3
 800e63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e642:	ed97 6a02 	vldr	s12, [r7, #8]
 800e646:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e7cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e65e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e662:	e087      	b.n	800e774 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	ee07 3a90 	vmov	s15, r3
 800e66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e66e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e7d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e676:	4b51      	ldr	r3, [pc, #324]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e67e:	ee07 3a90 	vmov	s15, r3
 800e682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e686:	ed97 6a02 	vldr	s12, [r7, #8]
 800e68a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e7cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e6a6:	e065      	b.n	800e774 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	ee07 3a90 	vmov	s15, r3
 800e6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e7d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6ba:	4b40      	ldr	r3, [pc, #256]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6c2:	ee07 3a90 	vmov	s15, r3
 800e6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e7cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e6ea:	e043      	b.n	800e774 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	ee07 3a90 	vmov	s15, r3
 800e6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e7d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6fe:	4b2f      	ldr	r3, [pc, #188]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e706:	ee07 3a90 	vmov	s15, r3
 800e70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e70e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e712:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e7cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e71e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e72a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e72e:	e021      	b.n	800e774 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	ee07 3a90 	vmov	s15, r3
 800e736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e73a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e7d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e73e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e742:	4b1e      	ldr	r3, [pc, #120]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e74a:	ee07 3a90 	vmov	s15, r3
 800e74e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e752:	ed97 6a02 	vldr	s12, [r7, #8]
 800e756:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e7cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e75a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e75e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e76a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e76e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e772:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e774:	4b11      	ldr	r3, [pc, #68]	; (800e7bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e778:	0a5b      	lsrs	r3, r3, #9
 800e77a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e77e:	3301      	adds	r3, #1
 800e780:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	ee07 3a90 	vmov	s15, r3
 800e788:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e78c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e798:	ee17 3a90 	vmov	r3, s15
 800e79c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e79e:	e005      	b.n	800e7ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	61bb      	str	r3, [r7, #24]
      break;
 800e7a4:	e002      	b.n	800e7ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e7a6:	4b07      	ldr	r3, [pc, #28]	; (800e7c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e7a8:	61bb      	str	r3, [r7, #24]
      break;
 800e7aa:	bf00      	nop
  }

  return sysclockfreq;
 800e7ac:	69bb      	ldr	r3, [r7, #24]
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3724      	adds	r7, #36	; 0x24
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	58024400 	.word	0x58024400
 800e7c0:	03d09000 	.word	0x03d09000
 800e7c4:	003d0900 	.word	0x003d0900
 800e7c8:	017d7840 	.word	0x017d7840
 800e7cc:	46000000 	.word	0x46000000
 800e7d0:	4c742400 	.word	0x4c742400
 800e7d4:	4a742400 	.word	0x4a742400
 800e7d8:	4bbebc20 	.word	0x4bbebc20

0800e7dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e7e2:	f7ff fe81 	bl	800e4e8 <HAL_RCC_GetSysClockFreq>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	4b10      	ldr	r3, [pc, #64]	; (800e82c <HAL_RCC_GetHCLKFreq+0x50>)
 800e7ea:	699b      	ldr	r3, [r3, #24]
 800e7ec:	0a1b      	lsrs	r3, r3, #8
 800e7ee:	f003 030f 	and.w	r3, r3, #15
 800e7f2:	490f      	ldr	r1, [pc, #60]	; (800e830 <HAL_RCC_GetHCLKFreq+0x54>)
 800e7f4:	5ccb      	ldrb	r3, [r1, r3]
 800e7f6:	f003 031f 	and.w	r3, r3, #31
 800e7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800e7fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e800:	4b0a      	ldr	r3, [pc, #40]	; (800e82c <HAL_RCC_GetHCLKFreq+0x50>)
 800e802:	699b      	ldr	r3, [r3, #24]
 800e804:	f003 030f 	and.w	r3, r3, #15
 800e808:	4a09      	ldr	r2, [pc, #36]	; (800e830 <HAL_RCC_GetHCLKFreq+0x54>)
 800e80a:	5cd3      	ldrb	r3, [r2, r3]
 800e80c:	f003 031f 	and.w	r3, r3, #31
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	fa22 f303 	lsr.w	r3, r2, r3
 800e816:	4a07      	ldr	r2, [pc, #28]	; (800e834 <HAL_RCC_GetHCLKFreq+0x58>)
 800e818:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e81a:	4a07      	ldr	r2, [pc, #28]	; (800e838 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e820:	4b04      	ldr	r3, [pc, #16]	; (800e834 <HAL_RCC_GetHCLKFreq+0x58>)
 800e822:	681b      	ldr	r3, [r3, #0]
}
 800e824:	4618      	mov	r0, r3
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	58024400 	.word	0x58024400
 800e830:	0801abb4 	.word	0x0801abb4
 800e834:	24000094 	.word	0x24000094
 800e838:	24000090 	.word	0x24000090

0800e83c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e840:	f7ff ffcc 	bl	800e7dc <HAL_RCC_GetHCLKFreq>
 800e844:	4602      	mov	r2, r0
 800e846:	4b06      	ldr	r3, [pc, #24]	; (800e860 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e848:	69db      	ldr	r3, [r3, #28]
 800e84a:	091b      	lsrs	r3, r3, #4
 800e84c:	f003 0307 	and.w	r3, r3, #7
 800e850:	4904      	ldr	r1, [pc, #16]	; (800e864 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e852:	5ccb      	ldrb	r3, [r1, r3]
 800e854:	f003 031f 	and.w	r3, r3, #31
 800e858:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	58024400 	.word	0x58024400
 800e864:	0801abb4 	.word	0x0801abb4

0800e868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e86c:	f7ff ffb6 	bl	800e7dc <HAL_RCC_GetHCLKFreq>
 800e870:	4602      	mov	r2, r0
 800e872:	4b06      	ldr	r3, [pc, #24]	; (800e88c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e874:	69db      	ldr	r3, [r3, #28]
 800e876:	0a1b      	lsrs	r3, r3, #8
 800e878:	f003 0307 	and.w	r3, r3, #7
 800e87c:	4904      	ldr	r1, [pc, #16]	; (800e890 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e87e:	5ccb      	ldrb	r3, [r1, r3]
 800e880:	f003 031f 	and.w	r3, r3, #31
 800e884:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e888:	4618      	mov	r0, r3
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	58024400 	.word	0x58024400
 800e890:	0801abb4 	.word	0x0801abb4

0800e894 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	223f      	movs	r2, #63	; 0x3f
 800e8a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e8a4:	4b1a      	ldr	r3, [pc, #104]	; (800e910 <HAL_RCC_GetClockConfig+0x7c>)
 800e8a6:	691b      	ldr	r3, [r3, #16]
 800e8a8:	f003 0207 	and.w	r2, r3, #7
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800e8b0:	4b17      	ldr	r3, [pc, #92]	; (800e910 <HAL_RCC_GetClockConfig+0x7c>)
 800e8b2:	699b      	ldr	r3, [r3, #24]
 800e8b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800e8bc:	4b14      	ldr	r3, [pc, #80]	; (800e910 <HAL_RCC_GetClockConfig+0x7c>)
 800e8be:	699b      	ldr	r3, [r3, #24]
 800e8c0:	f003 020f 	and.w	r2, r3, #15
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800e8c8:	4b11      	ldr	r3, [pc, #68]	; (800e910 <HAL_RCC_GetClockConfig+0x7c>)
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800e8d4:	4b0e      	ldr	r3, [pc, #56]	; (800e910 <HAL_RCC_GetClockConfig+0x7c>)
 800e8d6:	69db      	ldr	r3, [r3, #28]
 800e8d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800e8e0:	4b0b      	ldr	r3, [pc, #44]	; (800e910 <HAL_RCC_GetClockConfig+0x7c>)
 800e8e2:	69db      	ldr	r3, [r3, #28]
 800e8e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e8ec:	4b08      	ldr	r3, [pc, #32]	; (800e910 <HAL_RCC_GetClockConfig+0x7c>)
 800e8ee:	6a1b      	ldr	r3, [r3, #32]
 800e8f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e8f8:	4b06      	ldr	r3, [pc, #24]	; (800e914 <HAL_RCC_GetClockConfig+0x80>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f003 020f 	and.w	r2, r3, #15
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	601a      	str	r2, [r3, #0]
}
 800e904:	bf00      	nop
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr
 800e910:	58024400 	.word	0x58024400
 800e914:	52002000 	.word	0x52002000

0800e918 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e91c:	b0ca      	sub	sp, #296	; 0x128
 800e91e:	af00      	add	r7, sp, #0
 800e920:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e924:	2300      	movs	r3, #0
 800e926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e92a:	2300      	movs	r3, #0
 800e92c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800e93c:	2500      	movs	r5, #0
 800e93e:	ea54 0305 	orrs.w	r3, r4, r5
 800e942:	d049      	beq.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e94a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e94e:	d02f      	beq.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e950:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e954:	d828      	bhi.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e95a:	d01a      	beq.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e95c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e960:	d822      	bhi.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e962:	2b00      	cmp	r3, #0
 800e964:	d003      	beq.n	800e96e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e96a:	d007      	beq.n	800e97c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e96c:	e01c      	b.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e96e:	4bb8      	ldr	r3, [pc, #736]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e972:	4ab7      	ldr	r2, [pc, #732]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e978:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e97a:	e01a      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e980:	3308      	adds	r3, #8
 800e982:	2102      	movs	r1, #2
 800e984:	4618      	mov	r0, r3
 800e986:	f002 fb61 	bl	801104c <RCCEx_PLL2_Config>
 800e98a:	4603      	mov	r3, r0
 800e98c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e990:	e00f      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e996:	3328      	adds	r3, #40	; 0x28
 800e998:	2102      	movs	r1, #2
 800e99a:	4618      	mov	r0, r3
 800e99c:	f002 fc08 	bl	80111b0 <RCCEx_PLL3_Config>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e9a6:	e004      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e9ae:	e000      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e9b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d10a      	bne.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e9ba:	4ba5      	ldr	r3, [pc, #660]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9c8:	4aa1      	ldr	r2, [pc, #644]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9ca:	430b      	orrs	r3, r1
 800e9cc:	6513      	str	r3, [r2, #80]	; 0x50
 800e9ce:	e003      	b.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800e9e4:	f04f 0900 	mov.w	r9, #0
 800e9e8:	ea58 0309 	orrs.w	r3, r8, r9
 800e9ec:	d047      	beq.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9f4:	2b04      	cmp	r3, #4
 800e9f6:	d82a      	bhi.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e9f8:	a201      	add	r2, pc, #4	; (adr r2, 800ea00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fe:	bf00      	nop
 800ea00:	0800ea15 	.word	0x0800ea15
 800ea04:	0800ea23 	.word	0x0800ea23
 800ea08:	0800ea39 	.word	0x0800ea39
 800ea0c:	0800ea57 	.word	0x0800ea57
 800ea10:	0800ea57 	.word	0x0800ea57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea14:	4b8e      	ldr	r3, [pc, #568]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea18:	4a8d      	ldr	r2, [pc, #564]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ea1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ea20:	e01a      	b.n	800ea58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ea22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea26:	3308      	adds	r3, #8
 800ea28:	2100      	movs	r1, #0
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f002 fb0e 	bl	801104c <RCCEx_PLL2_Config>
 800ea30:	4603      	mov	r3, r0
 800ea32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ea36:	e00f      	b.n	800ea58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ea38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea3c:	3328      	adds	r3, #40	; 0x28
 800ea3e:	2100      	movs	r1, #0
 800ea40:	4618      	mov	r0, r3
 800ea42:	f002 fbb5 	bl	80111b0 <RCCEx_PLL3_Config>
 800ea46:	4603      	mov	r3, r0
 800ea48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ea4c:	e004      	b.n	800ea58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ea54:	e000      	b.n	800ea58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ea56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d10a      	bne.n	800ea76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ea60:	4b7b      	ldr	r3, [pc, #492]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea64:	f023 0107 	bic.w	r1, r3, #7
 800ea68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea6e:	4a78      	ldr	r2, [pc, #480]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea70:	430b      	orrs	r3, r1
 800ea72:	6513      	str	r3, [r2, #80]	; 0x50
 800ea74:	e003      	b.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ea7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ea8a:	f04f 0b00 	mov.w	fp, #0
 800ea8e:	ea5a 030b 	orrs.w	r3, sl, fp
 800ea92:	d04c      	beq.n	800eb2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ea94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea9e:	d030      	beq.n	800eb02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800eaa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eaa4:	d829      	bhi.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800eaa6:	2bc0      	cmp	r3, #192	; 0xc0
 800eaa8:	d02d      	beq.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800eaaa:	2bc0      	cmp	r3, #192	; 0xc0
 800eaac:	d825      	bhi.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800eaae:	2b80      	cmp	r3, #128	; 0x80
 800eab0:	d018      	beq.n	800eae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800eab2:	2b80      	cmp	r3, #128	; 0x80
 800eab4:	d821      	bhi.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d002      	beq.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800eaba:	2b40      	cmp	r3, #64	; 0x40
 800eabc:	d007      	beq.n	800eace <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800eabe:	e01c      	b.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eac0:	4b63      	ldr	r3, [pc, #396]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac4:	4a62      	ldr	r2, [pc, #392]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eaca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eacc:	e01c      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ead2:	3308      	adds	r3, #8
 800ead4:	2100      	movs	r1, #0
 800ead6:	4618      	mov	r0, r3
 800ead8:	f002 fab8 	bl	801104c <RCCEx_PLL2_Config>
 800eadc:	4603      	mov	r3, r0
 800eade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eae2:	e011      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eae8:	3328      	adds	r3, #40	; 0x28
 800eaea:	2100      	movs	r1, #0
 800eaec:	4618      	mov	r0, r3
 800eaee:	f002 fb5f 	bl	80111b0 <RCCEx_PLL3_Config>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eaf8:	e006      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb00:	e002      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800eb02:	bf00      	nop
 800eb04:	e000      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800eb06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d10a      	bne.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800eb10:	4b4f      	ldr	r3, [pc, #316]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb14:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800eb18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb1e:	4a4c      	ldr	r2, [pc, #304]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb20:	430b      	orrs	r3, r1
 800eb22:	6513      	str	r3, [r2, #80]	; 0x50
 800eb24:	e003      	b.n	800eb2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800eb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb36:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800eb3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800eb3e:	2300      	movs	r3, #0
 800eb40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800eb44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800eb48:	460b      	mov	r3, r1
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	d053      	beq.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800eb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800eb56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eb5a:	d035      	beq.n	800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800eb5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eb60:	d82e      	bhi.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eb62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800eb66:	d031      	beq.n	800ebcc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800eb68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800eb6c:	d828      	bhi.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eb6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb72:	d01a      	beq.n	800ebaa <HAL_RCCEx_PeriphCLKConfig+0x292>
 800eb74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb78:	d822      	bhi.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800eb7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb82:	d007      	beq.n	800eb94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800eb84:	e01c      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb86:	4b32      	ldr	r3, [pc, #200]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb8a:	4a31      	ldr	r2, [pc, #196]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eb92:	e01c      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb98:	3308      	adds	r3, #8
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f002 fa55 	bl	801104c <RCCEx_PLL2_Config>
 800eba2:	4603      	mov	r3, r0
 800eba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800eba8:	e011      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ebaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebae:	3328      	adds	r3, #40	; 0x28
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f002 fafc 	bl	80111b0 <RCCEx_PLL3_Config>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ebbe:	e006      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ebc6:	e002      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ebc8:	bf00      	nop
 800ebca:	e000      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ebcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10b      	bne.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ebd6:	4b1e      	ldr	r3, [pc, #120]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebda:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ebde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ebe6:	4a1a      	ldr	r2, [pc, #104]	; (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebe8:	430b      	orrs	r3, r1
 800ebea:	6593      	str	r3, [r2, #88]	; 0x58
 800ebec:	e003      	b.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ebf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ec02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ec06:	2300      	movs	r3, #0
 800ec08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ec0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ec10:	460b      	mov	r3, r1
 800ec12:	4313      	orrs	r3, r2
 800ec14:	d056      	beq.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ec16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ec1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ec22:	d038      	beq.n	800ec96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ec24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ec28:	d831      	bhi.n	800ec8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ec2e:	d034      	beq.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ec30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ec34:	d82b      	bhi.n	800ec8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec3a:	d01d      	beq.n	800ec78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ec3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec40:	d825      	bhi.n	800ec8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d006      	beq.n	800ec54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ec46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ec4a:	d00a      	beq.n	800ec62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ec4c:	e01f      	b.n	800ec8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec4e:	bf00      	nop
 800ec50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec54:	4ba2      	ldr	r3, [pc, #648]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec58:	4aa1      	ldr	r2, [pc, #644]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec60:	e01c      	b.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec66:	3308      	adds	r3, #8
 800ec68:	2100      	movs	r1, #0
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f002 f9ee 	bl	801104c <RCCEx_PLL2_Config>
 800ec70:	4603      	mov	r3, r0
 800ec72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ec76:	e011      	b.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec7c:	3328      	adds	r3, #40	; 0x28
 800ec7e:	2100      	movs	r1, #0
 800ec80:	4618      	mov	r0, r3
 800ec82:	f002 fa95 	bl	80111b0 <RCCEx_PLL3_Config>
 800ec86:	4603      	mov	r3, r0
 800ec88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec8c:	e006      	b.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec94:	e002      	b.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ec96:	bf00      	nop
 800ec98:	e000      	b.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ec9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10b      	bne.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800eca4:	4b8e      	ldr	r3, [pc, #568]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eca8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ecac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ecb4:	4a8a      	ldr	r2, [pc, #552]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ecb6:	430b      	orrs	r3, r1
 800ecb8:	6593      	str	r3, [r2, #88]	; 0x58
 800ecba:	e003      	b.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ecc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eccc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ecd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ecda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ecde:	460b      	mov	r3, r1
 800ece0:	4313      	orrs	r3, r2
 800ece2:	d03a      	beq.n	800ed5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ece4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ece8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecea:	2b30      	cmp	r3, #48	; 0x30
 800ecec:	d01f      	beq.n	800ed2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ecee:	2b30      	cmp	r3, #48	; 0x30
 800ecf0:	d819      	bhi.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ecf2:	2b20      	cmp	r3, #32
 800ecf4:	d00c      	beq.n	800ed10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ecf6:	2b20      	cmp	r3, #32
 800ecf8:	d815      	bhi.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d019      	beq.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ecfe:	2b10      	cmp	r3, #16
 800ed00:	d111      	bne.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed02:	4b77      	ldr	r3, [pc, #476]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed06:	4a76      	ldr	r2, [pc, #472]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ed0e:	e011      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ed10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed14:	3308      	adds	r3, #8
 800ed16:	2102      	movs	r1, #2
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f002 f997 	bl	801104c <RCCEx_PLL2_Config>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ed24:	e006      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ed26:	2301      	movs	r3, #1
 800ed28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ed2c:	e002      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ed2e:	bf00      	nop
 800ed30:	e000      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ed32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d10a      	bne.n	800ed52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ed3c:	4b68      	ldr	r3, [pc, #416]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed40:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ed44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed4a:	4a65      	ldr	r2, [pc, #404]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed4c:	430b      	orrs	r3, r1
 800ed4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ed50:	e003      	b.n	800ed5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ed5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed62:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ed66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ed70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ed74:	460b      	mov	r3, r1
 800ed76:	4313      	orrs	r3, r2
 800ed78:	d051      	beq.n	800ee1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ed7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed84:	d035      	beq.n	800edf2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ed86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed8a:	d82e      	bhi.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ed8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ed90:	d031      	beq.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ed92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ed96:	d828      	bhi.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ed98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed9c:	d01a      	beq.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ed9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eda2:	d822      	bhi.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d003      	beq.n	800edb0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800eda8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edac:	d007      	beq.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800edae:	e01c      	b.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edb0:	4b4b      	ldr	r3, [pc, #300]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800edb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb4:	4a4a      	ldr	r2, [pc, #296]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800edb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800edba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800edbc:	e01c      	b.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800edbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edc2:	3308      	adds	r3, #8
 800edc4:	2100      	movs	r1, #0
 800edc6:	4618      	mov	r0, r3
 800edc8:	f002 f940 	bl	801104c <RCCEx_PLL2_Config>
 800edcc:	4603      	mov	r3, r0
 800edce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800edd2:	e011      	b.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800edd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edd8:	3328      	adds	r3, #40	; 0x28
 800edda:	2100      	movs	r1, #0
 800eddc:	4618      	mov	r0, r3
 800edde:	f002 f9e7 	bl	80111b0 <RCCEx_PLL3_Config>
 800ede2:	4603      	mov	r3, r0
 800ede4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ede8:	e006      	b.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800edea:	2301      	movs	r3, #1
 800edec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800edf0:	e002      	b.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800edf2:	bf00      	nop
 800edf4:	e000      	b.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800edf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d10a      	bne.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ee00:	4b37      	ldr	r3, [pc, #220]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee04:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ee08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee0e:	4a34      	ldr	r2, [pc, #208]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee10:	430b      	orrs	r3, r1
 800ee12:	6513      	str	r3, [r2, #80]	; 0x50
 800ee14:	e003      	b.n	800ee1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ee1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee26:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ee2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ee2e:	2300      	movs	r3, #0
 800ee30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ee34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ee38:	460b      	mov	r3, r1
 800ee3a:	4313      	orrs	r3, r2
 800ee3c:	d056      	beq.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ee3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ee48:	d033      	beq.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ee4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ee4e:	d82c      	bhi.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ee54:	d02f      	beq.n	800eeb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ee56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ee5a:	d826      	bhi.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ee60:	d02b      	beq.n	800eeba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ee62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ee66:	d820      	bhi.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee6c:	d012      	beq.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ee6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee72:	d81a      	bhi.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d022      	beq.n	800eebe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ee78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee7c:	d115      	bne.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee82:	3308      	adds	r3, #8
 800ee84:	2101      	movs	r1, #1
 800ee86:	4618      	mov	r0, r3
 800ee88:	f002 f8e0 	bl	801104c <RCCEx_PLL2_Config>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ee92:	e015      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee98:	3328      	adds	r3, #40	; 0x28
 800ee9a:	2101      	movs	r1, #1
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f002 f987 	bl	80111b0 <RCCEx_PLL3_Config>
 800eea2:	4603      	mov	r3, r0
 800eea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800eea8:	e00a      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eeb0:	e006      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eeb2:	bf00      	nop
 800eeb4:	e004      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eeb6:	bf00      	nop
 800eeb8:	e002      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eeba:	bf00      	nop
 800eebc:	e000      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d10d      	bne.n	800eee4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800eec8:	4b05      	ldr	r3, [pc, #20]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eeca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eecc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800eed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eed6:	4a02      	ldr	r2, [pc, #8]	; (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eed8:	430b      	orrs	r3, r1
 800eeda:	6513      	str	r3, [r2, #80]	; 0x50
 800eedc:	e006      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800eede:	bf00      	nop
 800eee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eee8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800eeec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800eef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800eefc:	2300      	movs	r3, #0
 800eefe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ef02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ef06:	460b      	mov	r3, r1
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	d055      	beq.n	800efb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ef0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ef14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ef18:	d033      	beq.n	800ef82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ef1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ef1e:	d82c      	bhi.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef24:	d02f      	beq.n	800ef86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ef26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef2a:	d826      	bhi.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ef30:	d02b      	beq.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ef32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ef36:	d820      	bhi.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef3c:	d012      	beq.n	800ef64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ef3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef42:	d81a      	bhi.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d022      	beq.n	800ef8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ef48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef4c:	d115      	bne.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef52:	3308      	adds	r3, #8
 800ef54:	2101      	movs	r1, #1
 800ef56:	4618      	mov	r0, r3
 800ef58:	f002 f878 	bl	801104c <RCCEx_PLL2_Config>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ef62:	e015      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef68:	3328      	adds	r3, #40	; 0x28
 800ef6a:	2101      	movs	r1, #1
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f002 f91f 	bl	80111b0 <RCCEx_PLL3_Config>
 800ef72:	4603      	mov	r3, r0
 800ef74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ef78:	e00a      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef80:	e006      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef82:	bf00      	nop
 800ef84:	e004      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef86:	bf00      	nop
 800ef88:	e002      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef8a:	bf00      	nop
 800ef8c:	e000      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d10b      	bne.n	800efb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ef98:	4ba3      	ldr	r3, [pc, #652]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef9c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800efa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800efa8:	4a9f      	ldr	r2, [pc, #636]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800efaa:	430b      	orrs	r3, r1
 800efac:	6593      	str	r3, [r2, #88]	; 0x58
 800efae:	e003      	b.n	800efb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800efb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800efc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800efc8:	2300      	movs	r3, #0
 800efca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800efce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800efd2:	460b      	mov	r3, r1
 800efd4:	4313      	orrs	r3, r2
 800efd6:	d037      	beq.n	800f048 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800efd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800efe2:	d00e      	beq.n	800f002 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800efe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800efe8:	d816      	bhi.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800efea:	2b00      	cmp	r3, #0
 800efec:	d018      	beq.n	800f020 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800efee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eff2:	d111      	bne.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eff4:	4b8c      	ldr	r3, [pc, #560]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff8:	4a8b      	ldr	r2, [pc, #556]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800effa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800effe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f000:	e00f      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f006:	3308      	adds	r3, #8
 800f008:	2101      	movs	r1, #1
 800f00a:	4618      	mov	r0, r3
 800f00c:	f002 f81e 	bl	801104c <RCCEx_PLL2_Config>
 800f010:	4603      	mov	r3, r0
 800f012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f016:	e004      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f018:	2301      	movs	r3, #1
 800f01a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f01e:	e000      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f020:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10a      	bne.n	800f040 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f02a:	4b7f      	ldr	r3, [pc, #508]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f02c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f02e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f038:	4a7b      	ldr	r2, [pc, #492]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f03a:	430b      	orrs	r3, r1
 800f03c:	6513      	str	r3, [r2, #80]	; 0x50
 800f03e:	e003      	b.n	800f048 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f050:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f058:	2300      	movs	r3, #0
 800f05a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f05e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f062:	460b      	mov	r3, r1
 800f064:	4313      	orrs	r3, r2
 800f066:	d039      	beq.n	800f0dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f06c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f06e:	2b03      	cmp	r3, #3
 800f070:	d81c      	bhi.n	800f0ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f072:	a201      	add	r2, pc, #4	; (adr r2, 800f078 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f078:	0800f0b5 	.word	0x0800f0b5
 800f07c:	0800f089 	.word	0x0800f089
 800f080:	0800f097 	.word	0x0800f097
 800f084:	0800f0b5 	.word	0x0800f0b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f088:	4b67      	ldr	r3, [pc, #412]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08c:	4a66      	ldr	r2, [pc, #408]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f08e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f092:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f094:	e00f      	b.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f09a:	3308      	adds	r3, #8
 800f09c:	2102      	movs	r1, #2
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f001 ffd4 	bl	801104c <RCCEx_PLL2_Config>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f0aa:	e004      	b.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f0b2:	e000      	b.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f0b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d10a      	bne.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f0be:	4b5a      	ldr	r3, [pc, #360]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0c2:	f023 0103 	bic.w	r1, r3, #3
 800f0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0cc:	4a56      	ldr	r2, [pc, #344]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0ce:	430b      	orrs	r3, r1
 800f0d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f0d2:	e003      	b.n	800f0dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f0e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f0f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	f000 809f 	beq.w	800f23c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f0fe:	4b4b      	ldr	r3, [pc, #300]	; (800f22c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a4a      	ldr	r2, [pc, #296]	; (800f22c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f108:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f10a:	f7f6 fb51 	bl	80057b0 <HAL_GetTick>
 800f10e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f112:	e00b      	b.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f114:	f7f6 fb4c 	bl	80057b0 <HAL_GetTick>
 800f118:	4602      	mov	r2, r0
 800f11a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	2b64      	cmp	r3, #100	; 0x64
 800f122:	d903      	bls.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f124:	2303      	movs	r3, #3
 800f126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f12a:	e005      	b.n	800f138 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f12c:	4b3f      	ldr	r3, [pc, #252]	; (800f22c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f134:	2b00      	cmp	r3, #0
 800f136:	d0ed      	beq.n	800f114 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d179      	bne.n	800f234 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f140:	4b39      	ldr	r3, [pc, #228]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f148:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f14c:	4053      	eors	r3, r2
 800f14e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f152:	2b00      	cmp	r3, #0
 800f154:	d015      	beq.n	800f182 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f156:	4b34      	ldr	r3, [pc, #208]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f15a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f15e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f162:	4b31      	ldr	r3, [pc, #196]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f166:	4a30      	ldr	r2, [pc, #192]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f16c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f16e:	4b2e      	ldr	r3, [pc, #184]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f172:	4a2d      	ldr	r2, [pc, #180]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f178:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f17a:	4a2b      	ldr	r2, [pc, #172]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f17c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f180:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f186:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f18e:	d118      	bne.n	800f1c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f190:	f7f6 fb0e 	bl	80057b0 <HAL_GetTick>
 800f194:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f198:	e00d      	b.n	800f1b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f19a:	f7f6 fb09 	bl	80057b0 <HAL_GetTick>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f1a4:	1ad2      	subs	r2, r2, r3
 800f1a6:	f241 3388 	movw	r3, #5000	; 0x1388
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d903      	bls.n	800f1b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f1ae:	2303      	movs	r3, #3
 800f1b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f1b4:	e005      	b.n	800f1c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f1b6:	4b1c      	ldr	r3, [pc, #112]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1ba:	f003 0302 	and.w	r3, r3, #2
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d0eb      	beq.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f1c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d129      	bne.n	800f21e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f1d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f1da:	d10e      	bne.n	800f1fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f1dc:	4b12      	ldr	r3, [pc, #72]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1de:	691b      	ldr	r3, [r3, #16]
 800f1e0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f1ec:	091a      	lsrs	r2, r3, #4
 800f1ee:	4b10      	ldr	r3, [pc, #64]	; (800f230 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f1f0:	4013      	ands	r3, r2
 800f1f2:	4a0d      	ldr	r2, [pc, #52]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1f4:	430b      	orrs	r3, r1
 800f1f6:	6113      	str	r3, [r2, #16]
 800f1f8:	e005      	b.n	800f206 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f1fa:	4b0b      	ldr	r3, [pc, #44]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1fc:	691b      	ldr	r3, [r3, #16]
 800f1fe:	4a0a      	ldr	r2, [pc, #40]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f200:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f204:	6113      	str	r3, [r2, #16]
 800f206:	4b08      	ldr	r3, [pc, #32]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f208:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f20e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f216:	4a04      	ldr	r2, [pc, #16]	; (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f218:	430b      	orrs	r3, r1
 800f21a:	6713      	str	r3, [r2, #112]	; 0x70
 800f21c:	e00e      	b.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f21e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f222:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f226:	e009      	b.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f228:	58024400 	.word	0x58024400
 800f22c:	58024800 	.word	0x58024800
 800f230:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	f002 0301 	and.w	r3, r2, #1
 800f248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f24c:	2300      	movs	r3, #0
 800f24e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f252:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f256:	460b      	mov	r3, r1
 800f258:	4313      	orrs	r3, r2
 800f25a:	f000 8089 	beq.w	800f370 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f264:	2b28      	cmp	r3, #40	; 0x28
 800f266:	d86b      	bhi.n	800f340 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f268:	a201      	add	r2, pc, #4	; (adr r2, 800f270 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f26e:	bf00      	nop
 800f270:	0800f349 	.word	0x0800f349
 800f274:	0800f341 	.word	0x0800f341
 800f278:	0800f341 	.word	0x0800f341
 800f27c:	0800f341 	.word	0x0800f341
 800f280:	0800f341 	.word	0x0800f341
 800f284:	0800f341 	.word	0x0800f341
 800f288:	0800f341 	.word	0x0800f341
 800f28c:	0800f341 	.word	0x0800f341
 800f290:	0800f315 	.word	0x0800f315
 800f294:	0800f341 	.word	0x0800f341
 800f298:	0800f341 	.word	0x0800f341
 800f29c:	0800f341 	.word	0x0800f341
 800f2a0:	0800f341 	.word	0x0800f341
 800f2a4:	0800f341 	.word	0x0800f341
 800f2a8:	0800f341 	.word	0x0800f341
 800f2ac:	0800f341 	.word	0x0800f341
 800f2b0:	0800f32b 	.word	0x0800f32b
 800f2b4:	0800f341 	.word	0x0800f341
 800f2b8:	0800f341 	.word	0x0800f341
 800f2bc:	0800f341 	.word	0x0800f341
 800f2c0:	0800f341 	.word	0x0800f341
 800f2c4:	0800f341 	.word	0x0800f341
 800f2c8:	0800f341 	.word	0x0800f341
 800f2cc:	0800f341 	.word	0x0800f341
 800f2d0:	0800f349 	.word	0x0800f349
 800f2d4:	0800f341 	.word	0x0800f341
 800f2d8:	0800f341 	.word	0x0800f341
 800f2dc:	0800f341 	.word	0x0800f341
 800f2e0:	0800f341 	.word	0x0800f341
 800f2e4:	0800f341 	.word	0x0800f341
 800f2e8:	0800f341 	.word	0x0800f341
 800f2ec:	0800f341 	.word	0x0800f341
 800f2f0:	0800f349 	.word	0x0800f349
 800f2f4:	0800f341 	.word	0x0800f341
 800f2f8:	0800f341 	.word	0x0800f341
 800f2fc:	0800f341 	.word	0x0800f341
 800f300:	0800f341 	.word	0x0800f341
 800f304:	0800f341 	.word	0x0800f341
 800f308:	0800f341 	.word	0x0800f341
 800f30c:	0800f341 	.word	0x0800f341
 800f310:	0800f349 	.word	0x0800f349
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f318:	3308      	adds	r3, #8
 800f31a:	2101      	movs	r1, #1
 800f31c:	4618      	mov	r0, r3
 800f31e:	f001 fe95 	bl	801104c <RCCEx_PLL2_Config>
 800f322:	4603      	mov	r3, r0
 800f324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f328:	e00f      	b.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f32e:	3328      	adds	r3, #40	; 0x28
 800f330:	2101      	movs	r1, #1
 800f332:	4618      	mov	r0, r3
 800f334:	f001 ff3c 	bl	80111b0 <RCCEx_PLL3_Config>
 800f338:	4603      	mov	r3, r0
 800f33a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f33e:	e004      	b.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f340:	2301      	movs	r3, #1
 800f342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f346:	e000      	b.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f34a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d10a      	bne.n	800f368 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f352:	4bbf      	ldr	r3, [pc, #764]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f356:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f35e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f360:	4abb      	ldr	r2, [pc, #748]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f362:	430b      	orrs	r3, r1
 800f364:	6553      	str	r3, [r2, #84]	; 0x54
 800f366:	e003      	b.n	800f370 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f36c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f378:	f002 0302 	and.w	r3, r2, #2
 800f37c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f380:	2300      	movs	r3, #0
 800f382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f386:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f38a:	460b      	mov	r3, r1
 800f38c:	4313      	orrs	r3, r2
 800f38e:	d041      	beq.n	800f414 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f396:	2b05      	cmp	r3, #5
 800f398:	d824      	bhi.n	800f3e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f39a:	a201      	add	r2, pc, #4	; (adr r2, 800f3a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a0:	0800f3ed 	.word	0x0800f3ed
 800f3a4:	0800f3b9 	.word	0x0800f3b9
 800f3a8:	0800f3cf 	.word	0x0800f3cf
 800f3ac:	0800f3ed 	.word	0x0800f3ed
 800f3b0:	0800f3ed 	.word	0x0800f3ed
 800f3b4:	0800f3ed 	.word	0x0800f3ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3bc:	3308      	adds	r3, #8
 800f3be:	2101      	movs	r1, #1
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f001 fe43 	bl	801104c <RCCEx_PLL2_Config>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f3cc:	e00f      	b.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3d2:	3328      	adds	r3, #40	; 0x28
 800f3d4:	2101      	movs	r1, #1
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f001 feea 	bl	80111b0 <RCCEx_PLL3_Config>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f3e2:	e004      	b.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f3ea:	e000      	b.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d10a      	bne.n	800f40c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f3f6:	4b96      	ldr	r3, [pc, #600]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3fa:	f023 0107 	bic.w	r1, r3, #7
 800f3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f404:	4a92      	ldr	r2, [pc, #584]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f406:	430b      	orrs	r3, r1
 800f408:	6553      	str	r3, [r2, #84]	; 0x54
 800f40a:	e003      	b.n	800f414 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f40c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f410:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41c:	f002 0304 	and.w	r3, r2, #4
 800f420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f424:	2300      	movs	r3, #0
 800f426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f42a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f42e:	460b      	mov	r3, r1
 800f430:	4313      	orrs	r3, r2
 800f432:	d044      	beq.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f43c:	2b05      	cmp	r3, #5
 800f43e:	d825      	bhi.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f440:	a201      	add	r2, pc, #4	; (adr r2, 800f448 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f446:	bf00      	nop
 800f448:	0800f495 	.word	0x0800f495
 800f44c:	0800f461 	.word	0x0800f461
 800f450:	0800f477 	.word	0x0800f477
 800f454:	0800f495 	.word	0x0800f495
 800f458:	0800f495 	.word	0x0800f495
 800f45c:	0800f495 	.word	0x0800f495
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f464:	3308      	adds	r3, #8
 800f466:	2101      	movs	r1, #1
 800f468:	4618      	mov	r0, r3
 800f46a:	f001 fdef 	bl	801104c <RCCEx_PLL2_Config>
 800f46e:	4603      	mov	r3, r0
 800f470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f474:	e00f      	b.n	800f496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f47a:	3328      	adds	r3, #40	; 0x28
 800f47c:	2101      	movs	r1, #1
 800f47e:	4618      	mov	r0, r3
 800f480:	f001 fe96 	bl	80111b0 <RCCEx_PLL3_Config>
 800f484:	4603      	mov	r3, r0
 800f486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f48a:	e004      	b.n	800f496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f48c:	2301      	movs	r3, #1
 800f48e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f492:	e000      	b.n	800f496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f494:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d10b      	bne.n	800f4b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f49e:	4b6c      	ldr	r3, [pc, #432]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4a2:	f023 0107 	bic.w	r1, r3, #7
 800f4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f4ae:	4a68      	ldr	r2, [pc, #416]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f4b0:	430b      	orrs	r3, r1
 800f4b2:	6593      	str	r3, [r2, #88]	; 0x58
 800f4b4:	e003      	b.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c6:	f002 0320 	and.w	r3, r2, #32
 800f4ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f4d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f4d8:	460b      	mov	r3, r1
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	d055      	beq.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f4ea:	d033      	beq.n	800f554 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f4ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f4f0:	d82c      	bhi.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4f6:	d02f      	beq.n	800f558 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f4f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4fc:	d826      	bhi.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f4fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f502:	d02b      	beq.n	800f55c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f508:	d820      	bhi.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f50a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f50e:	d012      	beq.n	800f536 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f514:	d81a      	bhi.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f516:	2b00      	cmp	r3, #0
 800f518:	d022      	beq.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f51a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f51e:	d115      	bne.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f524:	3308      	adds	r3, #8
 800f526:	2100      	movs	r1, #0
 800f528:	4618      	mov	r0, r3
 800f52a:	f001 fd8f 	bl	801104c <RCCEx_PLL2_Config>
 800f52e:	4603      	mov	r3, r0
 800f530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f534:	e015      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f53a:	3328      	adds	r3, #40	; 0x28
 800f53c:	2102      	movs	r1, #2
 800f53e:	4618      	mov	r0, r3
 800f540:	f001 fe36 	bl	80111b0 <RCCEx_PLL3_Config>
 800f544:	4603      	mov	r3, r0
 800f546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f54a:	e00a      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f552:	e006      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f554:	bf00      	nop
 800f556:	e004      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f558:	bf00      	nop
 800f55a:	e002      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f55c:	bf00      	nop
 800f55e:	e000      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f560:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f566:	2b00      	cmp	r3, #0
 800f568:	d10b      	bne.n	800f582 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f56a:	4b39      	ldr	r3, [pc, #228]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f56e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f57a:	4a35      	ldr	r2, [pc, #212]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f57c:	430b      	orrs	r3, r1
 800f57e:	6553      	str	r3, [r2, #84]	; 0x54
 800f580:	e003      	b.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f592:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f59a:	2300      	movs	r3, #0
 800f59c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f5a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	d058      	beq.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f5b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f5b6:	d033      	beq.n	800f620 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f5b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f5bc:	d82c      	bhi.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5c2:	d02f      	beq.n	800f624 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f5c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5c8:	d826      	bhi.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f5ce:	d02b      	beq.n	800f628 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f5d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f5d4:	d820      	bhi.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f5da:	d012      	beq.n	800f602 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f5dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f5e0:	d81a      	bhi.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d022      	beq.n	800f62c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f5e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5ea:	d115      	bne.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5f0:	3308      	adds	r3, #8
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f001 fd29 	bl	801104c <RCCEx_PLL2_Config>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f600:	e015      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f606:	3328      	adds	r3, #40	; 0x28
 800f608:	2102      	movs	r1, #2
 800f60a:	4618      	mov	r0, r3
 800f60c:	f001 fdd0 	bl	80111b0 <RCCEx_PLL3_Config>
 800f610:	4603      	mov	r3, r0
 800f612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f616:	e00a      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f618:	2301      	movs	r3, #1
 800f61a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f61e:	e006      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f620:	bf00      	nop
 800f622:	e004      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f624:	bf00      	nop
 800f626:	e002      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f628:	bf00      	nop
 800f62a:	e000      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f62c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f62e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f632:	2b00      	cmp	r3, #0
 800f634:	d10e      	bne.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f636:	4b06      	ldr	r3, [pc, #24]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f63a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f646:	4a02      	ldr	r2, [pc, #8]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f648:	430b      	orrs	r3, r1
 800f64a:	6593      	str	r3, [r2, #88]	; 0x58
 800f64c:	e006      	b.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f64e:	bf00      	nop
 800f650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f658:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f664:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f66c:	2300      	movs	r3, #0
 800f66e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f672:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f676:	460b      	mov	r3, r1
 800f678:	4313      	orrs	r3, r2
 800f67a:	d055      	beq.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f67c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f680:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f684:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f688:	d033      	beq.n	800f6f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f68a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f68e:	d82c      	bhi.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f694:	d02f      	beq.n	800f6f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f69a:	d826      	bhi.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f69c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f6a0:	d02b      	beq.n	800f6fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f6a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f6a6:	d820      	bhi.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f6a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6ac:	d012      	beq.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f6ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6b2:	d81a      	bhi.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d022      	beq.n	800f6fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f6b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6bc:	d115      	bne.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6c2:	3308      	adds	r3, #8
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f001 fcc0 	bl	801104c <RCCEx_PLL2_Config>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f6d2:	e015      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f6d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6d8:	3328      	adds	r3, #40	; 0x28
 800f6da:	2102      	movs	r1, #2
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f001 fd67 	bl	80111b0 <RCCEx_PLL3_Config>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f6e8:	e00a      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f6f0:	e006      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6f2:	bf00      	nop
 800f6f4:	e004      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6f6:	bf00      	nop
 800f6f8:	e002      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6fa:	bf00      	nop
 800f6fc:	e000      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10b      	bne.n	800f720 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f708:	4ba1      	ldr	r3, [pc, #644]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f70a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f70c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800f710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f714:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f718:	4a9d      	ldr	r2, [pc, #628]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f71a:	430b      	orrs	r3, r1
 800f71c:	6593      	str	r3, [r2, #88]	; 0x58
 800f71e:	e003      	b.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f724:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f730:	f002 0308 	and.w	r3, r2, #8
 800f734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f738:	2300      	movs	r3, #0
 800f73a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f73e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800f742:	460b      	mov	r3, r1
 800f744:	4313      	orrs	r3, r2
 800f746:	d01e      	beq.n	800f786 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f754:	d10c      	bne.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f75a:	3328      	adds	r3, #40	; 0x28
 800f75c:	2102      	movs	r1, #2
 800f75e:	4618      	mov	r0, r3
 800f760:	f001 fd26 	bl	80111b0 <RCCEx_PLL3_Config>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d002      	beq.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f76a:	2301      	movs	r3, #1
 800f76c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f770:	4b87      	ldr	r3, [pc, #540]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f774:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f780:	4a83      	ldr	r2, [pc, #524]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f782:	430b      	orrs	r3, r1
 800f784:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78e:	f002 0310 	and.w	r3, r2, #16
 800f792:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f796:	2300      	movs	r3, #0
 800f798:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f79c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	d01e      	beq.n	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f7ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7b2:	d10c      	bne.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7b8:	3328      	adds	r3, #40	; 0x28
 800f7ba:	2102      	movs	r1, #2
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f001 fcf7 	bl	80111b0 <RCCEx_PLL3_Config>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d002      	beq.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f7ce:	4b70      	ldr	r3, [pc, #448]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f7de:	4a6c      	ldr	r2, [pc, #432]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7e0:	430b      	orrs	r3, r1
 800f7e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800f7f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f7fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800f7fe:	460b      	mov	r3, r1
 800f800:	4313      	orrs	r3, r2
 800f802:	d03e      	beq.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f808:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f80c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f810:	d022      	beq.n	800f858 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f816:	d81b      	bhi.n	800f850 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d003      	beq.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f81c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f820:	d00b      	beq.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f822:	e015      	b.n	800f850 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f828:	3308      	adds	r3, #8
 800f82a:	2100      	movs	r1, #0
 800f82c:	4618      	mov	r0, r3
 800f82e:	f001 fc0d 	bl	801104c <RCCEx_PLL2_Config>
 800f832:	4603      	mov	r3, r0
 800f834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f838:	e00f      	b.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f83e:	3328      	adds	r3, #40	; 0x28
 800f840:	2102      	movs	r1, #2
 800f842:	4618      	mov	r0, r3
 800f844:	f001 fcb4 	bl	80111b0 <RCCEx_PLL3_Config>
 800f848:	4603      	mov	r3, r0
 800f84a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f84e:	e004      	b.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f850:	2301      	movs	r3, #1
 800f852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f856:	e000      	b.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f85a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d10b      	bne.n	800f87a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f862:	4b4b      	ldr	r3, [pc, #300]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f866:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800f86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f86e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f872:	4a47      	ldr	r2, [pc, #284]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f874:	430b      	orrs	r3, r1
 800f876:	6593      	str	r3, [r2, #88]	; 0x58
 800f878:	e003      	b.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f87a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f87e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800f88e:	67bb      	str	r3, [r7, #120]	; 0x78
 800f890:	2300      	movs	r3, #0
 800f892:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f894:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800f898:	460b      	mov	r3, r1
 800f89a:	4313      	orrs	r3, r2
 800f89c:	d03b      	beq.n	800f916 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f8aa:	d01f      	beq.n	800f8ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f8ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f8b0:	d818      	bhi.n	800f8e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f8b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8b6:	d003      	beq.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f8b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f8bc:	d007      	beq.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f8be:	e011      	b.n	800f8e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f8c0:	4b33      	ldr	r3, [pc, #204]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c4:	4a32      	ldr	r2, [pc, #200]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f8cc:	e00f      	b.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8d2:	3328      	adds	r3, #40	; 0x28
 800f8d4:	2101      	movs	r1, #1
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f001 fc6a 	bl	80111b0 <RCCEx_PLL3_Config>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f8e2:	e004      	b.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f8ea:	e000      	b.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f8ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d10b      	bne.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f8f6:	4b26      	ldr	r3, [pc, #152]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f906:	4a22      	ldr	r2, [pc, #136]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f908:	430b      	orrs	r3, r1
 800f90a:	6553      	str	r3, [r2, #84]	; 0x54
 800f90c:	e003      	b.n	800f916 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f90e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f912:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800f922:	673b      	str	r3, [r7, #112]	; 0x70
 800f924:	2300      	movs	r3, #0
 800f926:	677b      	str	r3, [r7, #116]	; 0x74
 800f928:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800f92c:	460b      	mov	r3, r1
 800f92e:	4313      	orrs	r3, r2
 800f930:	d034      	beq.n	800f99c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d003      	beq.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f93c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f940:	d007      	beq.n	800f952 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f942:	e011      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f944:	4b12      	ldr	r3, [pc, #72]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f948:	4a11      	ldr	r2, [pc, #68]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f94a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f94e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f950:	e00e      	b.n	800f970 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f956:	3308      	adds	r3, #8
 800f958:	2102      	movs	r1, #2
 800f95a:	4618      	mov	r0, r3
 800f95c:	f001 fb76 	bl	801104c <RCCEx_PLL2_Config>
 800f960:	4603      	mov	r3, r0
 800f962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f966:	e003      	b.n	800f970 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f968:	2301      	movs	r3, #1
 800f96a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f96e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f974:	2b00      	cmp	r3, #0
 800f976:	d10d      	bne.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f978:	4b05      	ldr	r3, [pc, #20]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f97a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f97c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f986:	4a02      	ldr	r2, [pc, #8]	; (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f988:	430b      	orrs	r3, r1
 800f98a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f98c:	e006      	b.n	800f99c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f98e:	bf00      	nop
 800f990:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800f9a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f9ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	d00c      	beq.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9bc:	3328      	adds	r3, #40	; 0x28
 800f9be:	2102      	movs	r1, #2
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f001 fbf5 	bl	80111b0 <RCCEx_PLL3_Config>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800f9de:	663b      	str	r3, [r7, #96]	; 0x60
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	667b      	str	r3, [r7, #100]	; 0x64
 800f9e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	d038      	beq.n	800fa60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f9fa:	d018      	beq.n	800fa2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f9fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa00:	d811      	bhi.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fa02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa06:	d014      	beq.n	800fa32 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800fa08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa0c:	d80b      	bhi.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d011      	beq.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800fa12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa16:	d106      	bne.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa18:	4bc3      	ldr	r3, [pc, #780]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa1c:	4ac2      	ldr	r2, [pc, #776]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fa24:	e008      	b.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa26:	2301      	movs	r3, #1
 800fa28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa2c:	e004      	b.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa2e:	bf00      	nop
 800fa30:	e002      	b.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa32:	bf00      	nop
 800fa34:	e000      	b.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d10b      	bne.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fa40:	4bb9      	ldr	r3, [pc, #740]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fa48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa50:	4ab5      	ldr	r2, [pc, #724]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa52:	430b      	orrs	r3, r1
 800fa54:	6553      	str	r3, [r2, #84]	; 0x54
 800fa56:	e003      	b.n	800fa60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fa60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa68:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800fa6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa6e:	2300      	movs	r3, #0
 800fa70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800fa76:	460b      	mov	r3, r1
 800fa78:	4313      	orrs	r3, r2
 800fa7a:	d009      	beq.n	800fa90 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fa7c:	4baa      	ldr	r3, [pc, #680]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fa84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa8a:	4aa7      	ldr	r2, [pc, #668]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa8c:	430b      	orrs	r3, r1
 800fa8e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fa90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa98:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800fa9c:	653b      	str	r3, [r7, #80]	; 0x50
 800fa9e:	2300      	movs	r3, #0
 800faa0:	657b      	str	r3, [r7, #84]	; 0x54
 800faa2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800faa6:	460b      	mov	r3, r1
 800faa8:	4313      	orrs	r3, r2
 800faaa:	d00a      	beq.n	800fac2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800faac:	4b9e      	ldr	r3, [pc, #632]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800faae:	691b      	ldr	r3, [r3, #16]
 800fab0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800fab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fab8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fabc:	4a9a      	ldr	r2, [pc, #616]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fabe:	430b      	orrs	r3, r1
 800fac0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800face:	64bb      	str	r3, [r7, #72]	; 0x48
 800fad0:	2300      	movs	r3, #0
 800fad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fad4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800fad8:	460b      	mov	r3, r1
 800fada:	4313      	orrs	r3, r2
 800fadc:	d009      	beq.n	800faf2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fade:	4b92      	ldr	r3, [pc, #584]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fae2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800fae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800faec:	4a8e      	ldr	r2, [pc, #568]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800faee:	430b      	orrs	r3, r1
 800faf0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800faf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800fafe:	643b      	str	r3, [r7, #64]	; 0x40
 800fb00:	2300      	movs	r3, #0
 800fb02:	647b      	str	r3, [r7, #68]	; 0x44
 800fb04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fb08:	460b      	mov	r3, r1
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	d00e      	beq.n	800fb2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fb0e:	4b86      	ldr	r3, [pc, #536]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb10:	691b      	ldr	r3, [r3, #16]
 800fb12:	4a85      	ldr	r2, [pc, #532]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fb18:	6113      	str	r3, [r2, #16]
 800fb1a:	4b83      	ldr	r3, [pc, #524]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb1c:	6919      	ldr	r1, [r3, #16]
 800fb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fb26:	4a80      	ldr	r2, [pc, #512]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb28:	430b      	orrs	r3, r1
 800fb2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fb2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb34:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800fb38:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fb42:	460b      	mov	r3, r1
 800fb44:	4313      	orrs	r3, r2
 800fb46:	d009      	beq.n	800fb5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fb48:	4b77      	ldr	r3, [pc, #476]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb4c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fb50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb56:	4a74      	ldr	r2, [pc, #464]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb58:	430b      	orrs	r3, r1
 800fb5a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fb5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb64:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800fb68:	633b      	str	r3, [r7, #48]	; 0x30
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	637b      	str	r3, [r7, #52]	; 0x34
 800fb6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800fb72:	460b      	mov	r3, r1
 800fb74:	4313      	orrs	r3, r2
 800fb76:	d00a      	beq.n	800fb8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fb78:	4b6b      	ldr	r3, [pc, #428]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb7c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800fb80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb88:	4a67      	ldr	r2, [pc, #412]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb8a:	430b      	orrs	r3, r1
 800fb8c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fb8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb96:	2100      	movs	r1, #0
 800fb98:	62b9      	str	r1, [r7, #40]	; 0x28
 800fb9a:	f003 0301 	and.w	r3, r3, #1
 800fb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fba0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800fba4:	460b      	mov	r3, r1
 800fba6:	4313      	orrs	r3, r2
 800fba8:	d011      	beq.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbae:	3308      	adds	r3, #8
 800fbb0:	2100      	movs	r1, #0
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f001 fa4a 	bl	801104c <RCCEx_PLL2_Config>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fbbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d003      	beq.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fbce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	6239      	str	r1, [r7, #32]
 800fbda:	f003 0302 	and.w	r3, r3, #2
 800fbde:	627b      	str	r3, [r7, #36]	; 0x24
 800fbe0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	d011      	beq.n	800fc0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbee:	3308      	adds	r3, #8
 800fbf0:	2101      	movs	r1, #1
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f001 fa2a 	bl	801104c <RCCEx_PLL2_Config>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fbfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d003      	beq.n	800fc0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fc0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc16:	2100      	movs	r1, #0
 800fc18:	61b9      	str	r1, [r7, #24]
 800fc1a:	f003 0304 	and.w	r3, r3, #4
 800fc1e:	61fb      	str	r3, [r7, #28]
 800fc20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fc24:	460b      	mov	r3, r1
 800fc26:	4313      	orrs	r3, r2
 800fc28:	d011      	beq.n	800fc4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc2e:	3308      	adds	r3, #8
 800fc30:	2102      	movs	r1, #2
 800fc32:	4618      	mov	r0, r3
 800fc34:	f001 fa0a 	bl	801104c <RCCEx_PLL2_Config>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fc3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d003      	beq.n	800fc4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc56:	2100      	movs	r1, #0
 800fc58:	6139      	str	r1, [r7, #16]
 800fc5a:	f003 0308 	and.w	r3, r3, #8
 800fc5e:	617b      	str	r3, [r7, #20]
 800fc60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fc64:	460b      	mov	r3, r1
 800fc66:	4313      	orrs	r3, r2
 800fc68:	d011      	beq.n	800fc8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc6e:	3328      	adds	r3, #40	; 0x28
 800fc70:	2100      	movs	r1, #0
 800fc72:	4618      	mov	r0, r3
 800fc74:	f001 fa9c 	bl	80111b0 <RCCEx_PLL3_Config>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800fc7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d003      	beq.n	800fc8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc96:	2100      	movs	r1, #0
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	f003 0310 	and.w	r3, r3, #16
 800fc9e:	60fb      	str	r3, [r7, #12]
 800fca0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fca4:	460b      	mov	r3, r1
 800fca6:	4313      	orrs	r3, r2
 800fca8:	d011      	beq.n	800fcce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fcaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcae:	3328      	adds	r3, #40	; 0x28
 800fcb0:	2101      	movs	r1, #1
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f001 fa7c 	bl	80111b0 <RCCEx_PLL3_Config>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fcbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d003      	beq.n	800fcce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd6:	2100      	movs	r1, #0
 800fcd8:	6039      	str	r1, [r7, #0]
 800fcda:	f003 0320 	and.w	r3, r3, #32
 800fcde:	607b      	str	r3, [r7, #4]
 800fce0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fce4:	460b      	mov	r3, r1
 800fce6:	4313      	orrs	r3, r2
 800fce8:	d011      	beq.n	800fd0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fcea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcee:	3328      	adds	r3, #40	; 0x28
 800fcf0:	2102      	movs	r1, #2
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f001 fa5c 	bl	80111b0 <RCCEx_PLL3_Config>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fcfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d003      	beq.n	800fd0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800fd0e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d101      	bne.n	800fd1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800fd16:	2300      	movs	r3, #0
 800fd18:	e000      	b.n	800fd1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800fd1a:	2301      	movs	r3, #1
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800fd22:	46bd      	mov	sp, r7
 800fd24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fd28:	58024400 	.word	0x58024400

0800fd2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b090      	sub	sp, #64	; 0x40
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800fd36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd3a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800fd3e:	430b      	orrs	r3, r1
 800fd40:	f040 8094 	bne.w	800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800fd44:	4b9e      	ldr	r3, [pc, #632]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd48:	f003 0307 	and.w	r3, r3, #7
 800fd4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800fd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd50:	2b04      	cmp	r3, #4
 800fd52:	f200 8087 	bhi.w	800fe64 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800fd56:	a201      	add	r2, pc, #4	; (adr r2, 800fd5c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800fd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd5c:	0800fd71 	.word	0x0800fd71
 800fd60:	0800fd99 	.word	0x0800fd99
 800fd64:	0800fdc1 	.word	0x0800fdc1
 800fd68:	0800fe5d 	.word	0x0800fe5d
 800fd6c:	0800fde9 	.word	0x0800fde9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd70:	4b93      	ldr	r3, [pc, #588]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fd7c:	d108      	bne.n	800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd82:	4618      	mov	r0, r3
 800fd84:	f001 f810 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd8c:	f000 bd45 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd90:	2300      	movs	r3, #0
 800fd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd94:	f000 bd41 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fd98:	4b89      	ldr	r3, [pc, #548]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fda0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fda4:	d108      	bne.n	800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fda6:	f107 0318 	add.w	r3, r7, #24
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 fd54 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fdb0:	69bb      	ldr	r3, [r7, #24]
 800fdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdb4:	f000 bd31 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdbc:	f000 bd2d 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fdc0:	4b7f      	ldr	r3, [pc, #508]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fdc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fdcc:	d108      	bne.n	800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdce:	f107 030c 	add.w	r3, r7, #12
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f000 fe94 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fddc:	f000 bd1d 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fde0:	2300      	movs	r3, #0
 800fde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fde4:	f000 bd19 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fde8:	4b75      	ldr	r3, [pc, #468]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fdf0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fdf2:	4b73      	ldr	r3, [pc, #460]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f003 0304 	and.w	r3, r3, #4
 800fdfa:	2b04      	cmp	r3, #4
 800fdfc:	d10c      	bne.n	800fe18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800fdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d109      	bne.n	800fe18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe04:	4b6e      	ldr	r3, [pc, #440]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	08db      	lsrs	r3, r3, #3
 800fe0a:	f003 0303 	and.w	r3, r3, #3
 800fe0e:	4a6d      	ldr	r2, [pc, #436]	; (800ffc4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fe10:	fa22 f303 	lsr.w	r3, r2, r3
 800fe14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe16:	e01f      	b.n	800fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fe18:	4b69      	ldr	r3, [pc, #420]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe24:	d106      	bne.n	800fe34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800fe26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe2c:	d102      	bne.n	800fe34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fe2e:	4b66      	ldr	r3, [pc, #408]	; (800ffc8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fe30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe32:	e011      	b.n	800fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fe34:	4b62      	ldr	r3, [pc, #392]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fe40:	d106      	bne.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800fe42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe48:	d102      	bne.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fe4a:	4b60      	ldr	r3, [pc, #384]	; (800ffcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fe4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe4e:	e003      	b.n	800fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fe50:	2300      	movs	r3, #0
 800fe52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fe54:	f000 bce1 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fe58:	f000 bcdf 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fe5c:	4b5c      	ldr	r3, [pc, #368]	; (800ffd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fe5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe60:	f000 bcdb 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fe64:	2300      	movs	r3, #0
 800fe66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe68:	f000 bcd7 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800fe6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe70:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800fe74:	430b      	orrs	r3, r1
 800fe76:	f040 80ad 	bne.w	800ffd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800fe7a:	4b51      	ldr	r3, [pc, #324]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe7e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800fe82:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800fe84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe8a:	d056      	beq.n	800ff3a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800fe8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe92:	f200 8090 	bhi.w	800ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fe96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe98:	2bc0      	cmp	r3, #192	; 0xc0
 800fe9a:	f000 8088 	beq.w	800ffae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800fe9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea0:	2bc0      	cmp	r3, #192	; 0xc0
 800fea2:	f200 8088 	bhi.w	800ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea8:	2b80      	cmp	r3, #128	; 0x80
 800feaa:	d032      	beq.n	800ff12 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800feac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feae:	2b80      	cmp	r3, #128	; 0x80
 800feb0:	f200 8081 	bhi.w	800ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800feb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d003      	beq.n	800fec2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800feba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800febc:	2b40      	cmp	r3, #64	; 0x40
 800febe:	d014      	beq.n	800feea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800fec0:	e079      	b.n	800ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fec2:	4b3f      	ldr	r3, [pc, #252]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800feca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fece:	d108      	bne.n	800fee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fed4:	4618      	mov	r0, r3
 800fed6:	f000 ff67 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800feda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fedc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fede:	f000 bc9c 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fee2:	2300      	movs	r3, #0
 800fee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fee6:	f000 bc98 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800feea:	4b35      	ldr	r3, [pc, #212]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fef6:	d108      	bne.n	800ff0a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fef8:	f107 0318 	add.w	r3, r7, #24
 800fefc:	4618      	mov	r0, r3
 800fefe:	f000 fcab 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff06:	f000 bc88 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff0e:	f000 bc84 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ff12:	4b2b      	ldr	r3, [pc, #172]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ff1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ff1e:	d108      	bne.n	800ff32 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff20:	f107 030c 	add.w	r3, r7, #12
 800ff24:	4618      	mov	r0, r3
 800ff26:	f000 fdeb 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff2e:	f000 bc74 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff32:	2300      	movs	r3, #0
 800ff34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff36:	f000 bc70 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ff3a:	4b21      	ldr	r3, [pc, #132]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ff42:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ff44:	4b1e      	ldr	r3, [pc, #120]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f003 0304 	and.w	r3, r3, #4
 800ff4c:	2b04      	cmp	r3, #4
 800ff4e:	d10c      	bne.n	800ff6a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ff50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d109      	bne.n	800ff6a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff56:	4b1a      	ldr	r3, [pc, #104]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	08db      	lsrs	r3, r3, #3
 800ff5c:	f003 0303 	and.w	r3, r3, #3
 800ff60:	4a18      	ldr	r2, [pc, #96]	; (800ffc4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ff62:	fa22 f303 	lsr.w	r3, r2, r3
 800ff66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff68:	e01f      	b.n	800ffaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ff6a:	4b15      	ldr	r3, [pc, #84]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff76:	d106      	bne.n	800ff86 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ff78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ff7e:	d102      	bne.n	800ff86 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ff80:	4b11      	ldr	r3, [pc, #68]	; (800ffc8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ff82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff84:	e011      	b.n	800ffaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ff86:	4b0e      	ldr	r3, [pc, #56]	; (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff92:	d106      	bne.n	800ffa2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ff94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ff9a:	d102      	bne.n	800ffa2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ff9c:	4b0b      	ldr	r3, [pc, #44]	; (800ffcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ff9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffa0:	e003      	b.n	800ffaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ffa6:	f000 bc38 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ffaa:	f000 bc36 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ffae:	4b08      	ldr	r3, [pc, #32]	; (800ffd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ffb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffb2:	f000 bc32 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffba:	f000 bc2e 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ffbe:	bf00      	nop
 800ffc0:	58024400 	.word	0x58024400
 800ffc4:	03d09000 	.word	0x03d09000
 800ffc8:	003d0900 	.word	0x003d0900
 800ffcc:	017d7840 	.word	0x017d7840
 800ffd0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ffd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffd8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ffdc:	430b      	orrs	r3, r1
 800ffde:	f040 809c 	bne.w	801011a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ffe2:	4b9e      	ldr	r3, [pc, #632]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ffe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffe6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ffea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ffec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fff2:	d054      	beq.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800fff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fffa:	f200 808b 	bhi.w	8010114 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010000:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010004:	f000 8083 	beq.w	801010e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801000a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801000e:	f200 8081 	bhi.w	8010114 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010018:	d02f      	beq.n	801007a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 801001a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801001c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010020:	d878      	bhi.n	8010114 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010024:	2b00      	cmp	r3, #0
 8010026:	d004      	beq.n	8010032 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801002a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801002e:	d012      	beq.n	8010056 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010030:	e070      	b.n	8010114 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010032:	4b8a      	ldr	r3, [pc, #552]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801003a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801003e:	d107      	bne.n	8010050 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010044:	4618      	mov	r0, r3
 8010046:	f000 feaf 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801004a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801004c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801004e:	e3e4      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010050:	2300      	movs	r3, #0
 8010052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010054:	e3e1      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010056:	4b81      	ldr	r3, [pc, #516]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801005e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010062:	d107      	bne.n	8010074 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010064:	f107 0318 	add.w	r3, r7, #24
 8010068:	4618      	mov	r0, r3
 801006a:	f000 fbf5 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801006e:	69bb      	ldr	r3, [r7, #24]
 8010070:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010072:	e3d2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010074:	2300      	movs	r3, #0
 8010076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010078:	e3cf      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801007a:	4b78      	ldr	r3, [pc, #480]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010086:	d107      	bne.n	8010098 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010088:	f107 030c 	add.w	r3, r7, #12
 801008c:	4618      	mov	r0, r3
 801008e:	f000 fd37 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010096:	e3c0      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010098:	2300      	movs	r3, #0
 801009a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801009c:	e3bd      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801009e:	4b6f      	ldr	r3, [pc, #444]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80100a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80100a8:	4b6c      	ldr	r3, [pc, #432]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f003 0304 	and.w	r3, r3, #4
 80100b0:	2b04      	cmp	r3, #4
 80100b2:	d10c      	bne.n	80100ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80100b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d109      	bne.n	80100ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80100ba:	4b68      	ldr	r3, [pc, #416]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	08db      	lsrs	r3, r3, #3
 80100c0:	f003 0303 	and.w	r3, r3, #3
 80100c4:	4a66      	ldr	r2, [pc, #408]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80100c6:	fa22 f303 	lsr.w	r3, r2, r3
 80100ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100cc:	e01e      	b.n	801010c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80100ce:	4b63      	ldr	r3, [pc, #396]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100da:	d106      	bne.n	80100ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80100dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80100e2:	d102      	bne.n	80100ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80100e4:	4b5f      	ldr	r3, [pc, #380]	; (8010264 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80100e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100e8:	e010      	b.n	801010c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80100ea:	4b5c      	ldr	r3, [pc, #368]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80100f6:	d106      	bne.n	8010106 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80100f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100fe:	d102      	bne.n	8010106 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010100:	4b59      	ldr	r3, [pc, #356]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010104:	e002      	b.n	801010c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010106:	2300      	movs	r3, #0
 8010108:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801010a:	e386      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801010c:	e385      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801010e:	4b57      	ldr	r3, [pc, #348]	; (801026c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010112:	e382      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010114:	2300      	movs	r3, #0
 8010116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010118:	e37f      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801011a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801011e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8010122:	430b      	orrs	r3, r1
 8010124:	f040 80a7 	bne.w	8010276 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010128:	4b4c      	ldr	r3, [pc, #304]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801012a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801012c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8010130:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010138:	d055      	beq.n	80101e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 801013a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010140:	f200 8096 	bhi.w	8010270 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010146:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801014a:	f000 8084 	beq.w	8010256 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801014e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010150:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010154:	f200 808c 	bhi.w	8010270 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801015e:	d030      	beq.n	80101c2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010166:	f200 8083 	bhi.w	8010270 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801016a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801016c:	2b00      	cmp	r3, #0
 801016e:	d004      	beq.n	801017a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010172:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010176:	d012      	beq.n	801019e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010178:	e07a      	b.n	8010270 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801017a:	4b38      	ldr	r3, [pc, #224]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010186:	d107      	bne.n	8010198 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801018c:	4618      	mov	r0, r3
 801018e:	f000 fe0b 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010194:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010196:	e340      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010198:	2300      	movs	r3, #0
 801019a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801019c:	e33d      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801019e:	4b2f      	ldr	r3, [pc, #188]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80101a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80101aa:	d107      	bne.n	80101bc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101ac:	f107 0318 	add.w	r3, r7, #24
 80101b0:	4618      	mov	r0, r3
 80101b2:	f000 fb51 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101ba:	e32e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101bc:	2300      	movs	r3, #0
 80101be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101c0:	e32b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80101c2:	4b26      	ldr	r3, [pc, #152]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80101ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80101ce:	d107      	bne.n	80101e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101d0:	f107 030c 	add.w	r3, r7, #12
 80101d4:	4618      	mov	r0, r3
 80101d6:	f000 fc93 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101de:	e31c      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101e0:	2300      	movs	r3, #0
 80101e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101e4:	e319      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80101e6:	4b1d      	ldr	r3, [pc, #116]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80101ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80101f0:	4b1a      	ldr	r3, [pc, #104]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f003 0304 	and.w	r3, r3, #4
 80101f8:	2b04      	cmp	r3, #4
 80101fa:	d10c      	bne.n	8010216 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80101fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d109      	bne.n	8010216 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010202:	4b16      	ldr	r3, [pc, #88]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	08db      	lsrs	r3, r3, #3
 8010208:	f003 0303 	and.w	r3, r3, #3
 801020c:	4a14      	ldr	r2, [pc, #80]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801020e:	fa22 f303 	lsr.w	r3, r2, r3
 8010212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010214:	e01e      	b.n	8010254 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010216:	4b11      	ldr	r3, [pc, #68]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801021e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010222:	d106      	bne.n	8010232 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801022a:	d102      	bne.n	8010232 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801022c:	4b0d      	ldr	r3, [pc, #52]	; (8010264 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801022e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010230:	e010      	b.n	8010254 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010232:	4b0a      	ldr	r3, [pc, #40]	; (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801023a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801023e:	d106      	bne.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010246:	d102      	bne.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010248:	4b07      	ldr	r3, [pc, #28]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801024a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801024c:	e002      	b.n	8010254 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801024e:	2300      	movs	r3, #0
 8010250:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010252:	e2e2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010254:	e2e1      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010256:	4b05      	ldr	r3, [pc, #20]	; (801026c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801025a:	e2de      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801025c:	58024400 	.word	0x58024400
 8010260:	03d09000 	.word	0x03d09000
 8010264:	003d0900 	.word	0x003d0900
 8010268:	017d7840 	.word	0x017d7840
 801026c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010270:	2300      	movs	r3, #0
 8010272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010274:	e2d1      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010276:	e9d7 2300 	ldrd	r2, r3, [r7]
 801027a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801027e:	430b      	orrs	r3, r1
 8010280:	f040 809c 	bne.w	80103bc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010284:	4b93      	ldr	r3, [pc, #588]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010288:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801028c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801028e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010294:	d054      	beq.n	8010340 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8010296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801029c:	f200 808b 	bhi.w	80103b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80102a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80102a6:	f000 8083 	beq.w	80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80102aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80102b0:	f200 8081 	bhi.w	80103b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80102b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80102ba:	d02f      	beq.n	801031c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80102bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80102c2:	d878      	bhi.n	80103b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80102c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d004      	beq.n	80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80102ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102d0:	d012      	beq.n	80102f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80102d2:	e070      	b.n	80103b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80102d4:	4b7f      	ldr	r3, [pc, #508]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80102dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80102e0:	d107      	bne.n	80102f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102e6:	4618      	mov	r0, r3
 80102e8:	f000 fd5e 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80102ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102f0:	e293      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102f6:	e290      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80102f8:	4b76      	ldr	r3, [pc, #472]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010304:	d107      	bne.n	8010316 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010306:	f107 0318 	add.w	r3, r7, #24
 801030a:	4618      	mov	r0, r3
 801030c:	f000 faa4 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010310:	69bb      	ldr	r3, [r7, #24]
 8010312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010314:	e281      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010316:	2300      	movs	r3, #0
 8010318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801031a:	e27e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801031c:	4b6d      	ldr	r3, [pc, #436]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010328:	d107      	bne.n	801033a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801032a:	f107 030c 	add.w	r3, r7, #12
 801032e:	4618      	mov	r0, r3
 8010330:	f000 fbe6 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010338:	e26f      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801033a:	2300      	movs	r3, #0
 801033c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801033e:	e26c      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010340:	4b64      	ldr	r3, [pc, #400]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010348:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801034a:	4b62      	ldr	r3, [pc, #392]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	f003 0304 	and.w	r3, r3, #4
 8010352:	2b04      	cmp	r3, #4
 8010354:	d10c      	bne.n	8010370 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010358:	2b00      	cmp	r3, #0
 801035a:	d109      	bne.n	8010370 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801035c:	4b5d      	ldr	r3, [pc, #372]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	08db      	lsrs	r3, r3, #3
 8010362:	f003 0303 	and.w	r3, r3, #3
 8010366:	4a5c      	ldr	r2, [pc, #368]	; (80104d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010368:	fa22 f303 	lsr.w	r3, r2, r3
 801036c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801036e:	e01e      	b.n	80103ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010370:	4b58      	ldr	r3, [pc, #352]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801037c:	d106      	bne.n	801038c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801037e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010384:	d102      	bne.n	801038c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010386:	4b55      	ldr	r3, [pc, #340]	; (80104dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010388:	63fb      	str	r3, [r7, #60]	; 0x3c
 801038a:	e010      	b.n	80103ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801038c:	4b51      	ldr	r3, [pc, #324]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010398:	d106      	bne.n	80103a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801039a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801039c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103a0:	d102      	bne.n	80103a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80103a2:	4b4f      	ldr	r3, [pc, #316]	; (80104e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80103a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103a6:	e002      	b.n	80103ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80103a8:	2300      	movs	r3, #0
 80103aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80103ac:	e235      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80103ae:	e234      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80103b0:	4b4c      	ldr	r3, [pc, #304]	; (80104e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80103b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103b4:	e231      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80103b6:	2300      	movs	r3, #0
 80103b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103ba:	e22e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80103bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103c0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80103c4:	430b      	orrs	r3, r1
 80103c6:	f040 808f 	bne.w	80104e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80103ca:	4b42      	ldr	r3, [pc, #264]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80103cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103ce:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80103d2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80103d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80103da:	d06b      	beq.n	80104b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80103dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80103e2:	d874      	bhi.n	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80103e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80103ea:	d056      	beq.n	801049a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80103ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80103f2:	d86c      	bhi.n	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80103f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80103fa:	d03b      	beq.n	8010474 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80103fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010402:	d864      	bhi.n	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801040a:	d021      	beq.n	8010450 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801040c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010412:	d85c      	bhi.n	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010416:	2b00      	cmp	r3, #0
 8010418:	d004      	beq.n	8010424 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801041a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010420:	d004      	beq.n	801042c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010422:	e054      	b.n	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010424:	f7fe fa0a 	bl	800e83c <HAL_RCC_GetPCLK1Freq>
 8010428:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801042a:	e1f6      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801042c:	4b29      	ldr	r3, [pc, #164]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010438:	d107      	bne.n	801044a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801043a:	f107 0318 	add.w	r3, r7, #24
 801043e:	4618      	mov	r0, r3
 8010440:	f000 fa0a 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010448:	e1e7      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801044a:	2300      	movs	r3, #0
 801044c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801044e:	e1e4      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010450:	4b20      	ldr	r3, [pc, #128]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801045c:	d107      	bne.n	801046e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801045e:	f107 030c 	add.w	r3, r7, #12
 8010462:	4618      	mov	r0, r3
 8010464:	f000 fb4c 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801046c:	e1d5      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801046e:	2300      	movs	r3, #0
 8010470:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010472:	e1d2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010474:	4b17      	ldr	r3, [pc, #92]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f003 0304 	and.w	r3, r3, #4
 801047c:	2b04      	cmp	r3, #4
 801047e:	d109      	bne.n	8010494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010480:	4b14      	ldr	r3, [pc, #80]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	08db      	lsrs	r3, r3, #3
 8010486:	f003 0303 	and.w	r3, r3, #3
 801048a:	4a13      	ldr	r2, [pc, #76]	; (80104d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801048c:	fa22 f303 	lsr.w	r3, r2, r3
 8010490:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010492:	e1c2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010494:	2300      	movs	r3, #0
 8010496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010498:	e1bf      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801049a:	4b0e      	ldr	r3, [pc, #56]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104a6:	d102      	bne.n	80104ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80104a8:	4b0c      	ldr	r3, [pc, #48]	; (80104dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80104aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104ac:	e1b5      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104ae:	2300      	movs	r3, #0
 80104b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104b2:	e1b2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80104b4:	4b07      	ldr	r3, [pc, #28]	; (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80104bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80104c0:	d102      	bne.n	80104c8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80104c2:	4b07      	ldr	r3, [pc, #28]	; (80104e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80104c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104c6:	e1a8      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104c8:	2300      	movs	r3, #0
 80104ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104cc:	e1a5      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104d2:	e1a2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80104d4:	58024400 	.word	0x58024400
 80104d8:	03d09000 	.word	0x03d09000
 80104dc:	003d0900 	.word	0x003d0900
 80104e0:	017d7840 	.word	0x017d7840
 80104e4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80104e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104ec:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80104f0:	430b      	orrs	r3, r1
 80104f2:	d173      	bne.n	80105dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80104f4:	4b9c      	ldr	r3, [pc, #624]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80104fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80104fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010504:	d02f      	beq.n	8010566 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801050c:	d863      	bhi.n	80105d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801050e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010510:	2b00      	cmp	r3, #0
 8010512:	d004      	beq.n	801051e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801051a:	d012      	beq.n	8010542 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 801051c:	e05b      	b.n	80105d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801051e:	4b92      	ldr	r3, [pc, #584]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801052a:	d107      	bne.n	801053c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801052c:	f107 0318 	add.w	r3, r7, #24
 8010530:	4618      	mov	r0, r3
 8010532:	f000 f991 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801053a:	e16e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801053c:	2300      	movs	r3, #0
 801053e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010540:	e16b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010542:	4b89      	ldr	r3, [pc, #548]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801054a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801054e:	d107      	bne.n	8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010550:	f107 030c 	add.w	r3, r7, #12
 8010554:	4618      	mov	r0, r3
 8010556:	f000 fad3 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801055e:	e15c      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010560:	2300      	movs	r3, #0
 8010562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010564:	e159      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010566:	4b80      	ldr	r3, [pc, #512]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801056a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801056e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010570:	4b7d      	ldr	r3, [pc, #500]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f003 0304 	and.w	r3, r3, #4
 8010578:	2b04      	cmp	r3, #4
 801057a:	d10c      	bne.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801057c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801057e:	2b00      	cmp	r3, #0
 8010580:	d109      	bne.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010582:	4b79      	ldr	r3, [pc, #484]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	08db      	lsrs	r3, r3, #3
 8010588:	f003 0303 	and.w	r3, r3, #3
 801058c:	4a77      	ldr	r2, [pc, #476]	; (801076c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801058e:	fa22 f303 	lsr.w	r3, r2, r3
 8010592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010594:	e01e      	b.n	80105d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010596:	4b74      	ldr	r3, [pc, #464]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801059e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105a2:	d106      	bne.n	80105b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80105a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80105aa:	d102      	bne.n	80105b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80105ac:	4b70      	ldr	r3, [pc, #448]	; (8010770 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80105ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105b0:	e010      	b.n	80105d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80105b2:	4b6d      	ldr	r3, [pc, #436]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80105ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80105be:	d106      	bne.n	80105ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80105c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105c6:	d102      	bne.n	80105ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80105c8:	4b6a      	ldr	r3, [pc, #424]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80105ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105cc:	e002      	b.n	80105d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80105ce:	2300      	movs	r3, #0
 80105d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80105d2:	e122      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80105d4:	e121      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80105d6:	2300      	movs	r3, #0
 80105d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105da:	e11e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80105dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105e0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80105e4:	430b      	orrs	r3, r1
 80105e6:	d133      	bne.n	8010650 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80105e8:	4b5f      	ldr	r3, [pc, #380]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80105f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80105f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d004      	beq.n	8010602 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105fe:	d012      	beq.n	8010626 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010600:	e023      	b.n	801064a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010602:	4b59      	ldr	r3, [pc, #356]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801060a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801060e:	d107      	bne.n	8010620 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010614:	4618      	mov	r0, r3
 8010616:	f000 fbc7 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801061e:	e0fc      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010620:	2300      	movs	r3, #0
 8010622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010624:	e0f9      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010626:	4b50      	ldr	r3, [pc, #320]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801062e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010632:	d107      	bne.n	8010644 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010634:	f107 0318 	add.w	r3, r7, #24
 8010638:	4618      	mov	r0, r3
 801063a:	f000 f90d 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801063e:	6a3b      	ldr	r3, [r7, #32]
 8010640:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010642:	e0ea      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010644:	2300      	movs	r3, #0
 8010646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010648:	e0e7      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801064a:	2300      	movs	r3, #0
 801064c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801064e:	e0e4      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010654:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010658:	430b      	orrs	r3, r1
 801065a:	f040 808d 	bne.w	8010778 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801065e:	4b42      	ldr	r3, [pc, #264]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010662:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010666:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801066e:	d06b      	beq.n	8010748 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010676:	d874      	bhi.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801067e:	d056      	beq.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010686:	d86c      	bhi.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801068e:	d03b      	beq.n	8010708 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010692:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010696:	d864      	bhi.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801069e:	d021      	beq.n	80106e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80106a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106a6:	d85c      	bhi.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80106a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d004      	beq.n	80106b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80106ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106b4:	d004      	beq.n	80106c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80106b6:	e054      	b.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80106b8:	f000 f8b8 	bl	801082c <HAL_RCCEx_GetD3PCLK1Freq>
 80106bc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80106be:	e0ac      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80106c0:	4b29      	ldr	r3, [pc, #164]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80106c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80106cc:	d107      	bne.n	80106de <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106ce:	f107 0318 	add.w	r3, r7, #24
 80106d2:	4618      	mov	r0, r3
 80106d4:	f000 f8c0 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106dc:	e09d      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106de:	2300      	movs	r3, #0
 80106e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106e2:	e09a      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80106e4:	4b20      	ldr	r3, [pc, #128]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80106ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106f0:	d107      	bne.n	8010702 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106f2:	f107 030c 	add.w	r3, r7, #12
 80106f6:	4618      	mov	r0, r3
 80106f8:	f000 fa02 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010700:	e08b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010702:	2300      	movs	r3, #0
 8010704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010706:	e088      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010708:	4b17      	ldr	r3, [pc, #92]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f003 0304 	and.w	r3, r3, #4
 8010710:	2b04      	cmp	r3, #4
 8010712:	d109      	bne.n	8010728 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010714:	4b14      	ldr	r3, [pc, #80]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	08db      	lsrs	r3, r3, #3
 801071a:	f003 0303 	and.w	r3, r3, #3
 801071e:	4a13      	ldr	r2, [pc, #76]	; (801076c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010720:	fa22 f303 	lsr.w	r3, r2, r3
 8010724:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010726:	e078      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010728:	2300      	movs	r3, #0
 801072a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801072c:	e075      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801072e:	4b0e      	ldr	r3, [pc, #56]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801073a:	d102      	bne.n	8010742 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 801073c:	4b0c      	ldr	r3, [pc, #48]	; (8010770 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801073e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010740:	e06b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010746:	e068      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010748:	4b07      	ldr	r3, [pc, #28]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010754:	d102      	bne.n	801075c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010756:	4b07      	ldr	r3, [pc, #28]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801075a:	e05e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801075c:	2300      	movs	r3, #0
 801075e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010760:	e05b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010762:	2300      	movs	r3, #0
 8010764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010766:	e058      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010768:	58024400 	.word	0x58024400
 801076c:	03d09000 	.word	0x03d09000
 8010770:	003d0900 	.word	0x003d0900
 8010774:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010778:	e9d7 2300 	ldrd	r2, r3, [r7]
 801077c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010780:	430b      	orrs	r3, r1
 8010782:	d148      	bne.n	8010816 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010784:	4b27      	ldr	r3, [pc, #156]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801078c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801078e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010794:	d02a      	beq.n	80107ec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801079c:	d838      	bhi.n	8010810 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801079e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d004      	beq.n	80107ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80107a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107aa:	d00d      	beq.n	80107c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80107ac:	e030      	b.n	8010810 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80107ae:	4b1d      	ldr	r3, [pc, #116]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107ba:	d102      	bne.n	80107c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80107bc:	4b1a      	ldr	r3, [pc, #104]	; (8010828 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80107be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107c0:	e02b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107c2:	2300      	movs	r3, #0
 80107c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107c6:	e028      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80107c8:	4b16      	ldr	r3, [pc, #88]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80107d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80107d4:	d107      	bne.n	80107e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80107d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107da:	4618      	mov	r0, r3
 80107dc:	f000 fae4 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80107e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107e4:	e019      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107e6:	2300      	movs	r3, #0
 80107e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107ea:	e016      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80107ec:	4b0d      	ldr	r3, [pc, #52]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80107f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80107f8:	d107      	bne.n	801080a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107fa:	f107 0318 	add.w	r3, r7, #24
 80107fe:	4618      	mov	r0, r3
 8010800:	f000 f82a 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010804:	69fb      	ldr	r3, [r7, #28]
 8010806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010808:	e007      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801080a:	2300      	movs	r3, #0
 801080c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801080e:	e004      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010810:	2300      	movs	r3, #0
 8010812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010814:	e001      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010816:	2300      	movs	r3, #0
 8010818:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801081a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801081c:	4618      	mov	r0, r3
 801081e:	3740      	adds	r7, #64	; 0x40
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	58024400 	.word	0x58024400
 8010828:	017d7840 	.word	0x017d7840

0801082c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010830:	f7fd ffd4 	bl	800e7dc <HAL_RCC_GetHCLKFreq>
 8010834:	4602      	mov	r2, r0
 8010836:	4b06      	ldr	r3, [pc, #24]	; (8010850 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010838:	6a1b      	ldr	r3, [r3, #32]
 801083a:	091b      	lsrs	r3, r3, #4
 801083c:	f003 0307 	and.w	r3, r3, #7
 8010840:	4904      	ldr	r1, [pc, #16]	; (8010854 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010842:	5ccb      	ldrb	r3, [r1, r3]
 8010844:	f003 031f 	and.w	r3, r3, #31
 8010848:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801084c:	4618      	mov	r0, r3
 801084e:	bd80      	pop	{r7, pc}
 8010850:	58024400 	.word	0x58024400
 8010854:	0801abb4 	.word	0x0801abb4

08010858 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010858:	b480      	push	{r7}
 801085a:	b089      	sub	sp, #36	; 0x24
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010860:	4ba1      	ldr	r3, [pc, #644]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010864:	f003 0303 	and.w	r3, r3, #3
 8010868:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801086a:	4b9f      	ldr	r3, [pc, #636]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801086c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801086e:	0b1b      	lsrs	r3, r3, #12
 8010870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010874:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010876:	4b9c      	ldr	r3, [pc, #624]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801087a:	091b      	lsrs	r3, r3, #4
 801087c:	f003 0301 	and.w	r3, r3, #1
 8010880:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010882:	4b99      	ldr	r3, [pc, #612]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010886:	08db      	lsrs	r3, r3, #3
 8010888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801088c:	693a      	ldr	r2, [r7, #16]
 801088e:	fb02 f303 	mul.w	r3, r2, r3
 8010892:	ee07 3a90 	vmov	s15, r3
 8010896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801089a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	f000 8111 	beq.w	8010ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	f000 8083 	beq.w	80109b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	2b02      	cmp	r3, #2
 80108b2:	f200 80a1 	bhi.w	80109f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80108b6:	69bb      	ldr	r3, [r7, #24]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d003      	beq.n	80108c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80108bc:	69bb      	ldr	r3, [r7, #24]
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d056      	beq.n	8010970 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80108c2:	e099      	b.n	80109f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80108c4:	4b88      	ldr	r3, [pc, #544]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f003 0320 	and.w	r3, r3, #32
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d02d      	beq.n	801092c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80108d0:	4b85      	ldr	r3, [pc, #532]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	08db      	lsrs	r3, r3, #3
 80108d6:	f003 0303 	and.w	r3, r3, #3
 80108da:	4a84      	ldr	r2, [pc, #528]	; (8010aec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80108dc:	fa22 f303 	lsr.w	r3, r2, r3
 80108e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	ee07 3a90 	vmov	s15, r3
 80108e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	ee07 3a90 	vmov	s15, r3
 80108f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80108fa:	4b7b      	ldr	r3, [pc, #492]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010902:	ee07 3a90 	vmov	s15, r3
 8010906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801090a:	ed97 6a03 	vldr	s12, [r7, #12]
 801090e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801091a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801091e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010926:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801092a:	e087      	b.n	8010a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	ee07 3a90 	vmov	s15, r3
 8010932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010936:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010af4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801093a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801093e:	4b6a      	ldr	r3, [pc, #424]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010946:	ee07 3a90 	vmov	s15, r3
 801094a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801094e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010952:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801095a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801095e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010966:	ee67 7a27 	vmul.f32	s15, s14, s15
 801096a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801096e:	e065      	b.n	8010a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	ee07 3a90 	vmov	s15, r3
 8010976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801097a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801097e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010982:	4b59      	ldr	r3, [pc, #356]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801098a:	ee07 3a90 	vmov	s15, r3
 801098e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010992:	ed97 6a03 	vldr	s12, [r7, #12]
 8010996:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801099a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801099e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80109a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80109b2:	e043      	b.n	8010a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	ee07 3a90 	vmov	s15, r3
 80109ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010afc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80109c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109c6:	4b48      	ldr	r3, [pc, #288]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80109c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109ce:	ee07 3a90 	vmov	s15, r3
 80109d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80109da:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80109de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80109e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80109ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80109f6:	e021      	b.n	8010a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	ee07 3a90 	vmov	s15, r3
 80109fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a0a:	4b37      	ldr	r3, [pc, #220]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a12:	ee07 3a90 	vmov	s15, r3
 8010a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010a3c:	4b2a      	ldr	r3, [pc, #168]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a40:	0a5b      	lsrs	r3, r3, #9
 8010a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a46:	ee07 3a90 	vmov	s15, r3
 8010a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a62:	ee17 2a90 	vmov	r2, s15
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010a6a:	4b1f      	ldr	r3, [pc, #124]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a6e:	0c1b      	lsrs	r3, r3, #16
 8010a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a74:	ee07 3a90 	vmov	s15, r3
 8010a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010a80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a90:	ee17 2a90 	vmov	r2, s15
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8010a98:	4b13      	ldr	r3, [pc, #76]	; (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a9c:	0e1b      	lsrs	r3, r3, #24
 8010a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aa2:	ee07 3a90 	vmov	s15, r3
 8010aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010aaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010aae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ab2:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010abe:	ee17 2a90 	vmov	r2, s15
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010ac6:	e008      	b.n	8010ada <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	609a      	str	r2, [r3, #8]
}
 8010ada:	bf00      	nop
 8010adc:	3724      	adds	r7, #36	; 0x24
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr
 8010ae6:	bf00      	nop
 8010ae8:	58024400 	.word	0x58024400
 8010aec:	03d09000 	.word	0x03d09000
 8010af0:	46000000 	.word	0x46000000
 8010af4:	4c742400 	.word	0x4c742400
 8010af8:	4a742400 	.word	0x4a742400
 8010afc:	4bbebc20 	.word	0x4bbebc20

08010b00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b089      	sub	sp, #36	; 0x24
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010b08:	4ba1      	ldr	r3, [pc, #644]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b0c:	f003 0303 	and.w	r3, r3, #3
 8010b10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010b12:	4b9f      	ldr	r3, [pc, #636]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b16:	0d1b      	lsrs	r3, r3, #20
 8010b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010b1e:	4b9c      	ldr	r3, [pc, #624]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b22:	0a1b      	lsrs	r3, r3, #8
 8010b24:	f003 0301 	and.w	r3, r3, #1
 8010b28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010b2a:	4b99      	ldr	r3, [pc, #612]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b2e:	08db      	lsrs	r3, r3, #3
 8010b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b34:	693a      	ldr	r2, [r7, #16]
 8010b36:	fb02 f303 	mul.w	r3, r2, r3
 8010b3a:	ee07 3a90 	vmov	s15, r3
 8010b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f000 8111 	beq.w	8010d70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	2b02      	cmp	r3, #2
 8010b52:	f000 8083 	beq.w	8010c5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	2b02      	cmp	r3, #2
 8010b5a:	f200 80a1 	bhi.w	8010ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d003      	beq.n	8010b6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010b64:	69bb      	ldr	r3, [r7, #24]
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d056      	beq.n	8010c18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010b6a:	e099      	b.n	8010ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b6c:	4b88      	ldr	r3, [pc, #544]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f003 0320 	and.w	r3, r3, #32
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d02d      	beq.n	8010bd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b78:	4b85      	ldr	r3, [pc, #532]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	08db      	lsrs	r3, r3, #3
 8010b7e:	f003 0303 	and.w	r3, r3, #3
 8010b82:	4a84      	ldr	r2, [pc, #528]	; (8010d94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010b84:	fa22 f303 	lsr.w	r3, r2, r3
 8010b88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	ee07 3a90 	vmov	s15, r3
 8010b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	ee07 3a90 	vmov	s15, r3
 8010b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ba2:	4b7b      	ldr	r3, [pc, #492]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010baa:	ee07 3a90 	vmov	s15, r3
 8010bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010bd2:	e087      	b.n	8010ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	ee07 3a90 	vmov	s15, r3
 8010bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010d9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010be6:	4b6a      	ldr	r3, [pc, #424]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bee:	ee07 3a90 	vmov	s15, r3
 8010bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c16:	e065      	b.n	8010ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	ee07 3a90 	vmov	s15, r3
 8010c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010da0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c2a:	4b59      	ldr	r3, [pc, #356]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c32:	ee07 3a90 	vmov	s15, r3
 8010c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c5a:	e043      	b.n	8010ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	ee07 3a90 	vmov	s15, r3
 8010c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c6e:	4b48      	ldr	r3, [pc, #288]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c76:	ee07 3a90 	vmov	s15, r3
 8010c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c9e:	e021      	b.n	8010ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	ee07 3a90 	vmov	s15, r3
 8010ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010caa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010da0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010cb2:	4b37      	ldr	r3, [pc, #220]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cba:	ee07 3a90 	vmov	s15, r3
 8010cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010cc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ce2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010ce4:	4b2a      	ldr	r3, [pc, #168]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce8:	0a5b      	lsrs	r3, r3, #9
 8010cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cee:	ee07 3a90 	vmov	s15, r3
 8010cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d0a:	ee17 2a90 	vmov	r2, s15
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010d12:	4b1f      	ldr	r3, [pc, #124]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d16:	0c1b      	lsrs	r3, r3, #16
 8010d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d1c:	ee07 3a90 	vmov	s15, r3
 8010d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d38:	ee17 2a90 	vmov	r2, s15
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010d40:	4b13      	ldr	r3, [pc, #76]	; (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d44:	0e1b      	lsrs	r3, r3, #24
 8010d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d4a:	ee07 3a90 	vmov	s15, r3
 8010d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d66:	ee17 2a90 	vmov	r2, s15
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010d6e:	e008      	b.n	8010d82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2200      	movs	r2, #0
 8010d74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	609a      	str	r2, [r3, #8]
}
 8010d82:	bf00      	nop
 8010d84:	3724      	adds	r7, #36	; 0x24
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	58024400 	.word	0x58024400
 8010d94:	03d09000 	.word	0x03d09000
 8010d98:	46000000 	.word	0x46000000
 8010d9c:	4c742400 	.word	0x4c742400
 8010da0:	4a742400 	.word	0x4a742400
 8010da4:	4bbebc20 	.word	0x4bbebc20

08010da8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010da8:	b480      	push	{r7}
 8010daa:	b089      	sub	sp, #36	; 0x24
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010db0:	4ba0      	ldr	r3, [pc, #640]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010db4:	f003 0303 	and.w	r3, r3, #3
 8010db8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010dba:	4b9e      	ldr	r3, [pc, #632]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dbe:	091b      	lsrs	r3, r3, #4
 8010dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010dc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010dc6:	4b9b      	ldr	r3, [pc, #620]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dca:	f003 0301 	and.w	r3, r3, #1
 8010dce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010dd0:	4b98      	ldr	r3, [pc, #608]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dd4:	08db      	lsrs	r3, r3, #3
 8010dd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010dda:	693a      	ldr	r2, [r7, #16]
 8010ddc:	fb02 f303 	mul.w	r3, r2, r3
 8010de0:	ee07 3a90 	vmov	s15, r3
 8010de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010de8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	f000 8111 	beq.w	8011016 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	2b02      	cmp	r3, #2
 8010df8:	f000 8083 	beq.w	8010f02 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010dfc:	69bb      	ldr	r3, [r7, #24]
 8010dfe:	2b02      	cmp	r3, #2
 8010e00:	f200 80a1 	bhi.w	8010f46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d003      	beq.n	8010e12 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	d056      	beq.n	8010ebe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010e10:	e099      	b.n	8010f46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e12:	4b88      	ldr	r3, [pc, #544]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f003 0320 	and.w	r3, r3, #32
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d02d      	beq.n	8010e7a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e1e:	4b85      	ldr	r3, [pc, #532]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	08db      	lsrs	r3, r3, #3
 8010e24:	f003 0303 	and.w	r3, r3, #3
 8010e28:	4a83      	ldr	r2, [pc, #524]	; (8011038 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8010e2e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	ee07 3a90 	vmov	s15, r3
 8010e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	ee07 3a90 	vmov	s15, r3
 8010e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e48:	4b7a      	ldr	r3, [pc, #488]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e50:	ee07 3a90 	vmov	s15, r3
 8010e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e58:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e5c:	eddf 5a77 	vldr	s11, [pc, #476]	; 801103c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010e78:	e087      	b.n	8010f8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	ee07 3a90 	vmov	s15, r3
 8010e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e84:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011040 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e8c:	4b69      	ldr	r3, [pc, #420]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e94:	ee07 3a90 	vmov	s15, r3
 8010e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ea0:	eddf 5a66 	vldr	s11, [pc, #408]	; 801103c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ebc:	e065      	b.n	8010f8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	ee07 3a90 	vmov	s15, r3
 8010ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ec8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011044 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ed0:	4b58      	ldr	r3, [pc, #352]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ed8:	ee07 3a90 	vmov	s15, r3
 8010edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ee0:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ee4:	eddf 5a55 	vldr	s11, [pc, #340]	; 801103c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010efc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f00:	e043      	b.n	8010f8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	ee07 3a90 	vmov	s15, r3
 8010f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f0c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011048 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010f10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f14:	4b47      	ldr	r3, [pc, #284]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f1c:	ee07 3a90 	vmov	s15, r3
 8010f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f24:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f28:	eddf 5a44 	vldr	s11, [pc, #272]	; 801103c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010f2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f44:	e021      	b.n	8010f8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	ee07 3a90 	vmov	s15, r3
 8010f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f50:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011040 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010f54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f58:	4b36      	ldr	r3, [pc, #216]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f60:	ee07 3a90 	vmov	s15, r3
 8010f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f68:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801103c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010f70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f88:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010f8a:	4b2a      	ldr	r3, [pc, #168]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f8e:	0a5b      	lsrs	r3, r3, #9
 8010f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f94:	ee07 3a90 	vmov	s15, r3
 8010f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8010fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fb0:	ee17 2a90 	vmov	r2, s15
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010fb8:	4b1e      	ldr	r3, [pc, #120]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fbc:	0c1b      	lsrs	r3, r3, #16
 8010fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fc2:	ee07 3a90 	vmov	s15, r3
 8010fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8010fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fde:	ee17 2a90 	vmov	r2, s15
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010fe6:	4b13      	ldr	r3, [pc, #76]	; (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fea:	0e1b      	lsrs	r3, r3, #24
 8010fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ff0:	ee07 3a90 	vmov	s15, r3
 8010ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011000:	edd7 6a07 	vldr	s13, [r7, #28]
 8011004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801100c:	ee17 2a90 	vmov	r2, s15
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011014:	e008      	b.n	8011028 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2200      	movs	r2, #0
 801101a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2200      	movs	r2, #0
 8011020:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2200      	movs	r2, #0
 8011026:	609a      	str	r2, [r3, #8]
}
 8011028:	bf00      	nop
 801102a:	3724      	adds	r7, #36	; 0x24
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr
 8011034:	58024400 	.word	0x58024400
 8011038:	03d09000 	.word	0x03d09000
 801103c:	46000000 	.word	0x46000000
 8011040:	4c742400 	.word	0x4c742400
 8011044:	4a742400 	.word	0x4a742400
 8011048:	4bbebc20 	.word	0x4bbebc20

0801104c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011056:	2300      	movs	r3, #0
 8011058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801105a:	4b53      	ldr	r3, [pc, #332]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801105e:	f003 0303 	and.w	r3, r3, #3
 8011062:	2b03      	cmp	r3, #3
 8011064:	d101      	bne.n	801106a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011066:	2301      	movs	r3, #1
 8011068:	e099      	b.n	801119e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801106a:	4b4f      	ldr	r3, [pc, #316]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	4a4e      	ldr	r2, [pc, #312]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011070:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011076:	f7f4 fb9b 	bl	80057b0 <HAL_GetTick>
 801107a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801107c:	e008      	b.n	8011090 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801107e:	f7f4 fb97 	bl	80057b0 <HAL_GetTick>
 8011082:	4602      	mov	r2, r0
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	2b02      	cmp	r3, #2
 801108a:	d901      	bls.n	8011090 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801108c:	2303      	movs	r3, #3
 801108e:	e086      	b.n	801119e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011090:	4b45      	ldr	r3, [pc, #276]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011098:	2b00      	cmp	r3, #0
 801109a:	d1f0      	bne.n	801107e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801109c:	4b42      	ldr	r3, [pc, #264]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	031b      	lsls	r3, r3, #12
 80110aa:	493f      	ldr	r1, [pc, #252]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 80110ac:	4313      	orrs	r3, r2
 80110ae:	628b      	str	r3, [r1, #40]	; 0x28
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	3b01      	subs	r3, #1
 80110b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	689b      	ldr	r3, [r3, #8]
 80110be:	3b01      	subs	r3, #1
 80110c0:	025b      	lsls	r3, r3, #9
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	431a      	orrs	r2, r3
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	3b01      	subs	r3, #1
 80110cc:	041b      	lsls	r3, r3, #16
 80110ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80110d2:	431a      	orrs	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	691b      	ldr	r3, [r3, #16]
 80110d8:	3b01      	subs	r3, #1
 80110da:	061b      	lsls	r3, r3, #24
 80110dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80110e0:	4931      	ldr	r1, [pc, #196]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 80110e2:	4313      	orrs	r3, r2
 80110e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80110e6:	4b30      	ldr	r3, [pc, #192]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 80110e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	695b      	ldr	r3, [r3, #20]
 80110f2:	492d      	ldr	r1, [pc, #180]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 80110f4:	4313      	orrs	r3, r2
 80110f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80110f8:	4b2b      	ldr	r3, [pc, #172]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 80110fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110fc:	f023 0220 	bic.w	r2, r3, #32
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	699b      	ldr	r3, [r3, #24]
 8011104:	4928      	ldr	r1, [pc, #160]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011106:	4313      	orrs	r3, r2
 8011108:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801110a:	4b27      	ldr	r3, [pc, #156]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801110e:	4a26      	ldr	r2, [pc, #152]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011110:	f023 0310 	bic.w	r3, r3, #16
 8011114:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011116:	4b24      	ldr	r3, [pc, #144]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801111a:	4b24      	ldr	r3, [pc, #144]	; (80111ac <RCCEx_PLL2_Config+0x160>)
 801111c:	4013      	ands	r3, r2
 801111e:	687a      	ldr	r2, [r7, #4]
 8011120:	69d2      	ldr	r2, [r2, #28]
 8011122:	00d2      	lsls	r2, r2, #3
 8011124:	4920      	ldr	r1, [pc, #128]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011126:	4313      	orrs	r3, r2
 8011128:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801112a:	4b1f      	ldr	r3, [pc, #124]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801112e:	4a1e      	ldr	r2, [pc, #120]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011130:	f043 0310 	orr.w	r3, r3, #16
 8011134:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d106      	bne.n	801114a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801113c:	4b1a      	ldr	r3, [pc, #104]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011140:	4a19      	ldr	r2, [pc, #100]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011142:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011146:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011148:	e00f      	b.n	801116a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d106      	bne.n	801115e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011150:	4b15      	ldr	r3, [pc, #84]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011154:	4a14      	ldr	r2, [pc, #80]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801115a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801115c:	e005      	b.n	801116a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801115e:	4b12      	ldr	r3, [pc, #72]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011162:	4a11      	ldr	r2, [pc, #68]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011168:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801116a:	4b0f      	ldr	r3, [pc, #60]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	4a0e      	ldr	r2, [pc, #56]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011170:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011176:	f7f4 fb1b 	bl	80057b0 <HAL_GetTick>
 801117a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801117c:	e008      	b.n	8011190 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801117e:	f7f4 fb17 	bl	80057b0 <HAL_GetTick>
 8011182:	4602      	mov	r2, r0
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	1ad3      	subs	r3, r2, r3
 8011188:	2b02      	cmp	r3, #2
 801118a:	d901      	bls.n	8011190 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801118c:	2303      	movs	r3, #3
 801118e:	e006      	b.n	801119e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011190:	4b05      	ldr	r3, [pc, #20]	; (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011198:	2b00      	cmp	r3, #0
 801119a:	d0f0      	beq.n	801117e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801119c:	7bfb      	ldrb	r3, [r7, #15]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	58024400 	.word	0x58024400
 80111ac:	ffff0007 	.word	0xffff0007

080111b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80111ba:	2300      	movs	r3, #0
 80111bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80111be:	4b53      	ldr	r3, [pc, #332]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80111c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111c2:	f003 0303 	and.w	r3, r3, #3
 80111c6:	2b03      	cmp	r3, #3
 80111c8:	d101      	bne.n	80111ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80111ca:	2301      	movs	r3, #1
 80111cc:	e099      	b.n	8011302 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80111ce:	4b4f      	ldr	r3, [pc, #316]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	4a4e      	ldr	r2, [pc, #312]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80111d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80111d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80111da:	f7f4 fae9 	bl	80057b0 <HAL_GetTick>
 80111de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80111e0:	e008      	b.n	80111f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80111e2:	f7f4 fae5 	bl	80057b0 <HAL_GetTick>
 80111e6:	4602      	mov	r2, r0
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	1ad3      	subs	r3, r2, r3
 80111ec:	2b02      	cmp	r3, #2
 80111ee:	d901      	bls.n	80111f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80111f0:	2303      	movs	r3, #3
 80111f2:	e086      	b.n	8011302 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80111f4:	4b45      	ldr	r3, [pc, #276]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d1f0      	bne.n	80111e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011200:	4b42      	ldr	r3, [pc, #264]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 8011202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011204:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	051b      	lsls	r3, r3, #20
 801120e:	493f      	ldr	r1, [pc, #252]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 8011210:	4313      	orrs	r3, r2
 8011212:	628b      	str	r3, [r1, #40]	; 0x28
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	3b01      	subs	r3, #1
 801121a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	689b      	ldr	r3, [r3, #8]
 8011222:	3b01      	subs	r3, #1
 8011224:	025b      	lsls	r3, r3, #9
 8011226:	b29b      	uxth	r3, r3
 8011228:	431a      	orrs	r2, r3
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	3b01      	subs	r3, #1
 8011230:	041b      	lsls	r3, r3, #16
 8011232:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011236:	431a      	orrs	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	691b      	ldr	r3, [r3, #16]
 801123c:	3b01      	subs	r3, #1
 801123e:	061b      	lsls	r3, r3, #24
 8011240:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011244:	4931      	ldr	r1, [pc, #196]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 8011246:	4313      	orrs	r3, r2
 8011248:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801124a:	4b30      	ldr	r3, [pc, #192]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 801124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801124e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	695b      	ldr	r3, [r3, #20]
 8011256:	492d      	ldr	r1, [pc, #180]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 8011258:	4313      	orrs	r3, r2
 801125a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801125c:	4b2b      	ldr	r3, [pc, #172]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 801125e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011260:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	699b      	ldr	r3, [r3, #24]
 8011268:	4928      	ldr	r1, [pc, #160]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 801126a:	4313      	orrs	r3, r2
 801126c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801126e:	4b27      	ldr	r3, [pc, #156]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 8011270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011272:	4a26      	ldr	r2, [pc, #152]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 8011274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801127a:	4b24      	ldr	r3, [pc, #144]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 801127c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801127e:	4b24      	ldr	r3, [pc, #144]	; (8011310 <RCCEx_PLL3_Config+0x160>)
 8011280:	4013      	ands	r3, r2
 8011282:	687a      	ldr	r2, [r7, #4]
 8011284:	69d2      	ldr	r2, [r2, #28]
 8011286:	00d2      	lsls	r2, r2, #3
 8011288:	4920      	ldr	r1, [pc, #128]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 801128a:	4313      	orrs	r3, r2
 801128c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801128e:	4b1f      	ldr	r3, [pc, #124]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 8011290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011292:	4a1e      	ldr	r2, [pc, #120]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 8011294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011298:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d106      	bne.n	80112ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80112a0:	4b1a      	ldr	r3, [pc, #104]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80112a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a4:	4a19      	ldr	r2, [pc, #100]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80112a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80112aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80112ac:	e00f      	b.n	80112ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	2b01      	cmp	r3, #1
 80112b2:	d106      	bne.n	80112c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80112b4:	4b15      	ldr	r3, [pc, #84]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80112b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112b8:	4a14      	ldr	r2, [pc, #80]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80112ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80112be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80112c0:	e005      	b.n	80112ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80112c2:	4b12      	ldr	r3, [pc, #72]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80112c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c6:	4a11      	ldr	r2, [pc, #68]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80112c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80112cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80112ce:	4b0f      	ldr	r3, [pc, #60]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	4a0e      	ldr	r2, [pc, #56]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80112d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80112d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80112da:	f7f4 fa69 	bl	80057b0 <HAL_GetTick>
 80112de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80112e0:	e008      	b.n	80112f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80112e2:	f7f4 fa65 	bl	80057b0 <HAL_GetTick>
 80112e6:	4602      	mov	r2, r0
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	1ad3      	subs	r3, r2, r3
 80112ec:	2b02      	cmp	r3, #2
 80112ee:	d901      	bls.n	80112f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80112f0:	2303      	movs	r3, #3
 80112f2:	e006      	b.n	8011302 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80112f4:	4b05      	ldr	r3, [pc, #20]	; (801130c <RCCEx_PLL3_Config+0x15c>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d0f0      	beq.n	80112e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011300:	7bfb      	ldrb	r3, [r7, #15]
}
 8011302:	4618      	mov	r0, r3
 8011304:	3710      	adds	r7, #16
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	58024400 	.word	0x58024400
 8011310:	ffff0007 	.word	0xffff0007

08011314 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801131c:	2301      	movs	r3, #1
 801131e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d071      	beq.n	801140a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801132c:	b2db      	uxtb	r3, r3
 801132e:	2b00      	cmp	r3, #0
 8011330:	d106      	bne.n	8011340 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2200      	movs	r2, #0
 8011336:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f7f2 fc90 	bl	8003c60 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2202      	movs	r2, #2
 8011344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	f003 0310 	and.w	r3, r3, #16
 8011352:	2b10      	cmp	r3, #16
 8011354:	d050      	beq.n	80113f8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	22ca      	movs	r2, #202	; 0xca
 801135c:	625a      	str	r2, [r3, #36]	; 0x24
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2253      	movs	r2, #83	; 0x53
 8011364:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f000 fa4a 	bl	8011800 <RTC_EnterInitMode>
 801136c:	4603      	mov	r3, r0
 801136e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011370:	7bfb      	ldrb	r3, [r7, #15]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d124      	bne.n	80113c0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	6899      	ldr	r1, [r3, #8]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681a      	ldr	r2, [r3, #0]
 8011380:	4b24      	ldr	r3, [pc, #144]	; (8011414 <HAL_RTC_Init+0x100>)
 8011382:	400b      	ands	r3, r1
 8011384:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	6899      	ldr	r1, [r3, #8]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	685a      	ldr	r2, [r3, #4]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	691b      	ldr	r3, [r3, #16]
 8011394:	431a      	orrs	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	699b      	ldr	r3, [r3, #24]
 801139a:	431a      	orrs	r2, r3
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	430a      	orrs	r2, r1
 80113a2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	689b      	ldr	r3, [r3, #8]
 80113a8:	0419      	lsls	r1, r3, #16
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	68da      	ldr	r2, [r3, #12]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	430a      	orrs	r2, r1
 80113b4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 fa56 	bl	8011868 <RTC_ExitInitMode>
 80113bc:	4603      	mov	r3, r0
 80113be:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80113c0:	7bfb      	ldrb	r3, [r7, #15]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d113      	bne.n	80113ee <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f022 0203 	bic.w	r2, r2, #3
 80113d4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	69da      	ldr	r2, [r3, #28]
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	695b      	ldr	r3, [r3, #20]
 80113e4:	431a      	orrs	r2, r3
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	430a      	orrs	r2, r1
 80113ec:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	22ff      	movs	r2, #255	; 0xff
 80113f4:	625a      	str	r2, [r3, #36]	; 0x24
 80113f6:	e001      	b.n	80113fc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80113f8:	2300      	movs	r3, #0
 80113fa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80113fc:	7bfb      	ldrb	r3, [r7, #15]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d103      	bne.n	801140a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2201      	movs	r2, #1
 8011406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 801140a:	7bfb      	ldrb	r3, [r7, #15]
}
 801140c:	4618      	mov	r0, r3
 801140e:	3710      	adds	r7, #16
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}
 8011414:	ff8fffbf 	.word	0xff8fffbf

08011418 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011418:	b590      	push	{r4, r7, lr}
 801141a:	b087      	sub	sp, #28
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f893 3020 	ldrb.w	r3, [r3, #32]
 801142a:	2b01      	cmp	r3, #1
 801142c:	d101      	bne.n	8011432 <HAL_RTC_SetTime+0x1a>
 801142e:	2302      	movs	r3, #2
 8011430:	e089      	b.n	8011546 <HAL_RTC_SetTime+0x12e>
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	2201      	movs	r2, #1
 8011436:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2202      	movs	r2, #2
 801143e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	22ca      	movs	r2, #202	; 0xca
 8011448:	625a      	str	r2, [r3, #36]	; 0x24
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	2253      	movs	r2, #83	; 0x53
 8011450:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011452:	68f8      	ldr	r0, [r7, #12]
 8011454:	f000 f9d4 	bl	8011800 <RTC_EnterInitMode>
 8011458:	4603      	mov	r3, r0
 801145a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 801145c:	7cfb      	ldrb	r3, [r7, #19]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d161      	bne.n	8011526 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d126      	bne.n	80114b6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	689b      	ldr	r3, [r3, #8]
 801146e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011472:	2b00      	cmp	r3, #0
 8011474:	d102      	bne.n	801147c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	2200      	movs	r2, #0
 801147a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	4618      	mov	r0, r3
 8011482:	f000 fa2f 	bl	80118e4 <RTC_ByteToBcd2>
 8011486:	4603      	mov	r3, r0
 8011488:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	785b      	ldrb	r3, [r3, #1]
 801148e:	4618      	mov	r0, r3
 8011490:	f000 fa28 	bl	80118e4 <RTC_ByteToBcd2>
 8011494:	4603      	mov	r3, r0
 8011496:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011498:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	789b      	ldrb	r3, [r3, #2]
 801149e:	4618      	mov	r0, r3
 80114a0:	f000 fa20 	bl	80118e4 <RTC_ByteToBcd2>
 80114a4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80114a6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	78db      	ldrb	r3, [r3, #3]
 80114ae:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80114b0:	4313      	orrs	r3, r2
 80114b2:	617b      	str	r3, [r7, #20]
 80114b4:	e018      	b.n	80114e8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	689b      	ldr	r3, [r3, #8]
 80114bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d102      	bne.n	80114ca <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	2200      	movs	r2, #0
 80114c8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	785b      	ldrb	r3, [r3, #1]
 80114d4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80114d6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80114d8:	68ba      	ldr	r2, [r7, #8]
 80114da:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80114dc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	78db      	ldrb	r3, [r3, #3]
 80114e2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80114e4:	4313      	orrs	r3, r2
 80114e6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681a      	ldr	r2, [r3, #0]
 80114ec:	6979      	ldr	r1, [r7, #20]
 80114ee:	4b18      	ldr	r3, [pc, #96]	; (8011550 <HAL_RTC_SetTime+0x138>)
 80114f0:	400b      	ands	r3, r1
 80114f2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	689a      	ldr	r2, [r3, #8]
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011502:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	6899      	ldr	r1, [r3, #8]
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	68da      	ldr	r2, [r3, #12]
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	691b      	ldr	r3, [r3, #16]
 8011512:	431a      	orrs	r2, r3
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	430a      	orrs	r2, r1
 801151a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801151c:	68f8      	ldr	r0, [r7, #12]
 801151e:	f000 f9a3 	bl	8011868 <RTC_ExitInitMode>
 8011522:	4603      	mov	r3, r0
 8011524:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	22ff      	movs	r2, #255	; 0xff
 801152c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801152e:	7cfb      	ldrb	r3, [r7, #19]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d103      	bne.n	801153c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	2201      	movs	r2, #1
 8011538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2200      	movs	r2, #0
 8011540:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011544:	7cfb      	ldrb	r3, [r7, #19]
}
 8011546:	4618      	mov	r0, r3
 8011548:	371c      	adds	r7, #28
 801154a:	46bd      	mov	sp, r7
 801154c:	bd90      	pop	{r4, r7, pc}
 801154e:	bf00      	nop
 8011550:	007f7f7f 	.word	0x007f7f7f

08011554 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b086      	sub	sp, #24
 8011558:	af00      	add	r7, sp, #0
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	60b9      	str	r1, [r7, #8]
 801155e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	691b      	ldr	r3, [r3, #16]
 8011570:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	4b22      	ldr	r3, [pc, #136]	; (8011608 <HAL_RTC_GetTime+0xb4>)
 8011580:	4013      	ands	r3, r2
 8011582:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	0c1b      	lsrs	r3, r3, #16
 8011588:	b2db      	uxtb	r3, r3
 801158a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801158e:	b2da      	uxtb	r2, r3
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	0a1b      	lsrs	r3, r3, #8
 8011598:	b2db      	uxtb	r3, r3
 801159a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801159e:	b2da      	uxtb	r2, r3
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	b2db      	uxtb	r3, r3
 80115a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115ac:	b2da      	uxtb	r2, r3
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	0d9b      	lsrs	r3, r3, #22
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	f003 0301 	and.w	r3, r3, #1
 80115bc:	b2da      	uxtb	r2, r3
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d11a      	bne.n	80115fe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	4618      	mov	r0, r3
 80115ce:	f000 f9a9 	bl	8011924 <RTC_Bcd2ToByte>
 80115d2:	4603      	mov	r3, r0
 80115d4:	461a      	mov	r2, r3
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	785b      	ldrb	r3, [r3, #1]
 80115de:	4618      	mov	r0, r3
 80115e0:	f000 f9a0 	bl	8011924 <RTC_Bcd2ToByte>
 80115e4:	4603      	mov	r3, r0
 80115e6:	461a      	mov	r2, r3
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	789b      	ldrb	r3, [r3, #2]
 80115f0:	4618      	mov	r0, r3
 80115f2:	f000 f997 	bl	8011924 <RTC_Bcd2ToByte>
 80115f6:	4603      	mov	r3, r0
 80115f8:	461a      	mov	r2, r3
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80115fe:	2300      	movs	r3, #0
}
 8011600:	4618      	mov	r0, r3
 8011602:	3718      	adds	r7, #24
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	007f7f7f 	.word	0x007f7f7f

0801160c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801160c:	b590      	push	{r4, r7, lr}
 801160e:	b087      	sub	sp, #28
 8011610:	af00      	add	r7, sp, #0
 8011612:	60f8      	str	r0, [r7, #12]
 8011614:	60b9      	str	r1, [r7, #8]
 8011616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801161e:	2b01      	cmp	r3, #1
 8011620:	d101      	bne.n	8011626 <HAL_RTC_SetDate+0x1a>
 8011622:	2302      	movs	r3, #2
 8011624:	e073      	b.n	801170e <HAL_RTC_SetDate+0x102>
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2201      	movs	r2, #1
 801162a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	2202      	movs	r2, #2
 8011632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d10e      	bne.n	801165a <HAL_RTC_SetDate+0x4e>
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	785b      	ldrb	r3, [r3, #1]
 8011640:	f003 0310 	and.w	r3, r3, #16
 8011644:	2b00      	cmp	r3, #0
 8011646:	d008      	beq.n	801165a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	785b      	ldrb	r3, [r3, #1]
 801164c:	f023 0310 	bic.w	r3, r3, #16
 8011650:	b2db      	uxtb	r3, r3
 8011652:	330a      	adds	r3, #10
 8011654:	b2da      	uxtb	r2, r3
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d11c      	bne.n	801169a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	78db      	ldrb	r3, [r3, #3]
 8011664:	4618      	mov	r0, r3
 8011666:	f000 f93d 	bl	80118e4 <RTC_ByteToBcd2>
 801166a:	4603      	mov	r3, r0
 801166c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	785b      	ldrb	r3, [r3, #1]
 8011672:	4618      	mov	r0, r3
 8011674:	f000 f936 	bl	80118e4 <RTC_ByteToBcd2>
 8011678:	4603      	mov	r3, r0
 801167a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801167c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	789b      	ldrb	r3, [r3, #2]
 8011682:	4618      	mov	r0, r3
 8011684:	f000 f92e 	bl	80118e4 <RTC_ByteToBcd2>
 8011688:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801168a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011694:	4313      	orrs	r3, r2
 8011696:	617b      	str	r3, [r7, #20]
 8011698:	e00e      	b.n	80116b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	78db      	ldrb	r3, [r3, #3]
 801169e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	785b      	ldrb	r3, [r3, #1]
 80116a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80116a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80116a8:	68ba      	ldr	r2, [r7, #8]
 80116aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80116ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80116b4:	4313      	orrs	r3, r2
 80116b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	22ca      	movs	r2, #202	; 0xca
 80116be:	625a      	str	r2, [r3, #36]	; 0x24
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	2253      	movs	r2, #83	; 0x53
 80116c6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80116c8:	68f8      	ldr	r0, [r7, #12]
 80116ca:	f000 f899 	bl	8011800 <RTC_EnterInitMode>
 80116ce:	4603      	mov	r3, r0
 80116d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80116d2:	7cfb      	ldrb	r3, [r7, #19]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d10a      	bne.n	80116ee <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	6979      	ldr	r1, [r7, #20]
 80116de:	4b0e      	ldr	r3, [pc, #56]	; (8011718 <HAL_RTC_SetDate+0x10c>)
 80116e0:	400b      	ands	r3, r1
 80116e2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80116e4:	68f8      	ldr	r0, [r7, #12]
 80116e6:	f000 f8bf 	bl	8011868 <RTC_ExitInitMode>
 80116ea:	4603      	mov	r3, r0
 80116ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	22ff      	movs	r2, #255	; 0xff
 80116f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80116f6:	7cfb      	ldrb	r3, [r7, #19]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d103      	bne.n	8011704 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2201      	movs	r2, #1
 8011700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2200      	movs	r2, #0
 8011708:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 801170c:	7cfb      	ldrb	r3, [r7, #19]


}
 801170e:	4618      	mov	r0, r3
 8011710:	371c      	adds	r7, #28
 8011712:	46bd      	mov	sp, r7
 8011714:	bd90      	pop	{r4, r7, pc}
 8011716:	bf00      	nop
 8011718:	00ffff3f 	.word	0x00ffff3f

0801171c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b086      	sub	sp, #24
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	685a      	ldr	r2, [r3, #4]
 801172e:	4b21      	ldr	r3, [pc, #132]	; (80117b4 <HAL_RTC_GetDate+0x98>)
 8011730:	4013      	ands	r3, r2
 8011732:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	0c1b      	lsrs	r3, r3, #16
 8011738:	b2da      	uxtb	r2, r3
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	0a1b      	lsrs	r3, r3, #8
 8011742:	b2db      	uxtb	r3, r3
 8011744:	f003 031f 	and.w	r3, r3, #31
 8011748:	b2da      	uxtb	r2, r3
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	b2db      	uxtb	r3, r3
 8011752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011756:	b2da      	uxtb	r2, r3
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	0b5b      	lsrs	r3, r3, #13
 8011760:	b2db      	uxtb	r3, r3
 8011762:	f003 0307 	and.w	r3, r3, #7
 8011766:	b2da      	uxtb	r2, r3
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d11a      	bne.n	80117a8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	78db      	ldrb	r3, [r3, #3]
 8011776:	4618      	mov	r0, r3
 8011778:	f000 f8d4 	bl	8011924 <RTC_Bcd2ToByte>
 801177c:	4603      	mov	r3, r0
 801177e:	461a      	mov	r2, r3
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	785b      	ldrb	r3, [r3, #1]
 8011788:	4618      	mov	r0, r3
 801178a:	f000 f8cb 	bl	8011924 <RTC_Bcd2ToByte>
 801178e:	4603      	mov	r3, r0
 8011790:	461a      	mov	r2, r3
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	789b      	ldrb	r3, [r3, #2]
 801179a:	4618      	mov	r0, r3
 801179c:	f000 f8c2 	bl	8011924 <RTC_Bcd2ToByte>
 80117a0:	4603      	mov	r3, r0
 80117a2:	461a      	mov	r2, r3
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80117a8:	2300      	movs	r3, #0
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3718      	adds	r7, #24
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
 80117b2:	bf00      	nop
 80117b4:	00ffff3f 	.word	0x00ffff3f

080117b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b084      	sub	sp, #16
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4a0d      	ldr	r2, [pc, #52]	; (80117fc <HAL_RTC_WaitForSynchro+0x44>)
 80117c6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80117c8:	f7f3 fff2 	bl	80057b0 <HAL_GetTick>
 80117cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80117ce:	e009      	b.n	80117e4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80117d0:	f7f3 ffee 	bl	80057b0 <HAL_GetTick>
 80117d4:	4602      	mov	r2, r0
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	1ad3      	subs	r3, r2, r3
 80117da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80117de:	d901      	bls.n	80117e4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80117e0:	2303      	movs	r3, #3
 80117e2:	e007      	b.n	80117f4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	f003 0320 	and.w	r3, r3, #32
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d0ee      	beq.n	80117d0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80117f2:	2300      	movs	r3, #0
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3710      	adds	r7, #16
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	0003ff5f 	.word	0x0003ff5f

08011800 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b084      	sub	sp, #16
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011808:	2300      	movs	r3, #0
 801180a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011816:	2b00      	cmp	r3, #0
 8011818:	d120      	bne.n	801185c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011822:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011824:	f7f3 ffc4 	bl	80057b0 <HAL_GetTick>
 8011828:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801182a:	e00d      	b.n	8011848 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801182c:	f7f3 ffc0 	bl	80057b0 <HAL_GetTick>
 8011830:	4602      	mov	r2, r0
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801183a:	d905      	bls.n	8011848 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 801183c:	2303      	movs	r3, #3
 801183e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2203      	movs	r2, #3
 8011844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	68db      	ldr	r3, [r3, #12]
 801184e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011852:	2b00      	cmp	r3, #0
 8011854:	d102      	bne.n	801185c <RTC_EnterInitMode+0x5c>
 8011856:	7bfb      	ldrb	r3, [r7, #15]
 8011858:	2b03      	cmp	r3, #3
 801185a:	d1e7      	bne.n	801182c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 801185c:	7bfb      	ldrb	r3, [r7, #15]
}
 801185e:	4618      	mov	r0, r3
 8011860:	3710      	adds	r7, #16
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
	...

08011868 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b084      	sub	sp, #16
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011870:	2300      	movs	r3, #0
 8011872:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011874:	4b1a      	ldr	r3, [pc, #104]	; (80118e0 <RTC_ExitInitMode+0x78>)
 8011876:	68db      	ldr	r3, [r3, #12]
 8011878:	4a19      	ldr	r2, [pc, #100]	; (80118e0 <RTC_ExitInitMode+0x78>)
 801187a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801187e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011880:	4b17      	ldr	r3, [pc, #92]	; (80118e0 <RTC_ExitInitMode+0x78>)
 8011882:	689b      	ldr	r3, [r3, #8]
 8011884:	f003 0320 	and.w	r3, r3, #32
 8011888:	2b00      	cmp	r3, #0
 801188a:	d10c      	bne.n	80118a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f7ff ff93 	bl	80117b8 <HAL_RTC_WaitForSynchro>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	d01e      	beq.n	80118d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2203      	movs	r2, #3
 801189c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80118a0:	2303      	movs	r3, #3
 80118a2:	73fb      	strb	r3, [r7, #15]
 80118a4:	e017      	b.n	80118d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80118a6:	4b0e      	ldr	r3, [pc, #56]	; (80118e0 <RTC_ExitInitMode+0x78>)
 80118a8:	689b      	ldr	r3, [r3, #8]
 80118aa:	4a0d      	ldr	r2, [pc, #52]	; (80118e0 <RTC_ExitInitMode+0x78>)
 80118ac:	f023 0320 	bic.w	r3, r3, #32
 80118b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f7ff ff80 	bl	80117b8 <HAL_RTC_WaitForSynchro>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d005      	beq.n	80118ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2203      	movs	r2, #3
 80118c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80118c6:	2303      	movs	r3, #3
 80118c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80118ca:	4b05      	ldr	r3, [pc, #20]	; (80118e0 <RTC_ExitInitMode+0x78>)
 80118cc:	689b      	ldr	r3, [r3, #8]
 80118ce:	4a04      	ldr	r2, [pc, #16]	; (80118e0 <RTC_ExitInitMode+0x78>)
 80118d0:	f043 0320 	orr.w	r3, r3, #32
 80118d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80118d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3710      	adds	r7, #16
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}
 80118e0:	58004000 	.word	0x58004000

080118e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b085      	sub	sp, #20
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	4603      	mov	r3, r0
 80118ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80118ee:	2300      	movs	r3, #0
 80118f0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80118f2:	79fb      	ldrb	r3, [r7, #7]
 80118f4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80118f6:	e005      	b.n	8011904 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	3301      	adds	r3, #1
 80118fc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80118fe:	7afb      	ldrb	r3, [r7, #11]
 8011900:	3b0a      	subs	r3, #10
 8011902:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011904:	7afb      	ldrb	r3, [r7, #11]
 8011906:	2b09      	cmp	r3, #9
 8011908:	d8f6      	bhi.n	80118f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	b2db      	uxtb	r3, r3
 801190e:	011b      	lsls	r3, r3, #4
 8011910:	b2da      	uxtb	r2, r3
 8011912:	7afb      	ldrb	r3, [r7, #11]
 8011914:	4313      	orrs	r3, r2
 8011916:	b2db      	uxtb	r3, r3
}
 8011918:	4618      	mov	r0, r3
 801191a:	3714      	adds	r7, #20
 801191c:	46bd      	mov	sp, r7
 801191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011922:	4770      	bx	lr

08011924 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011924:	b480      	push	{r7}
 8011926:	b085      	sub	sp, #20
 8011928:	af00      	add	r7, sp, #0
 801192a:	4603      	mov	r3, r0
 801192c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801192e:	79fb      	ldrb	r3, [r7, #7]
 8011930:	091b      	lsrs	r3, r3, #4
 8011932:	b2db      	uxtb	r3, r3
 8011934:	461a      	mov	r2, r3
 8011936:	0092      	lsls	r2, r2, #2
 8011938:	4413      	add	r3, r2
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801193e:	79fb      	ldrb	r3, [r7, #7]
 8011940:	f003 030f 	and.w	r3, r3, #15
 8011944:	b2da      	uxtb	r2, r3
 8011946:	7bfb      	ldrb	r3, [r7, #15]
 8011948:	4413      	add	r3, r2
 801194a:	b2db      	uxtb	r3, r3
}
 801194c:	4618      	mov	r0, r3
 801194e:	3714      	adds	r7, #20
 8011950:	46bd      	mov	sp, r7
 8011952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011956:	4770      	bx	lr

08011958 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d101      	bne.n	801196a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011966:	2301      	movs	r3, #1
 8011968:	e10f      	b.n	8011b8a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2200      	movs	r2, #0
 801196e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	4a87      	ldr	r2, [pc, #540]	; (8011b94 <HAL_SPI_Init+0x23c>)
 8011976:	4293      	cmp	r3, r2
 8011978:	d00f      	beq.n	801199a <HAL_SPI_Init+0x42>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	4a86      	ldr	r2, [pc, #536]	; (8011b98 <HAL_SPI_Init+0x240>)
 8011980:	4293      	cmp	r3, r2
 8011982:	d00a      	beq.n	801199a <HAL_SPI_Init+0x42>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4a84      	ldr	r2, [pc, #528]	; (8011b9c <HAL_SPI_Init+0x244>)
 801198a:	4293      	cmp	r3, r2
 801198c:	d005      	beq.n	801199a <HAL_SPI_Init+0x42>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	68db      	ldr	r3, [r3, #12]
 8011992:	2b0f      	cmp	r3, #15
 8011994:	d901      	bls.n	801199a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011996:	2301      	movs	r3, #1
 8011998:	e0f7      	b.n	8011b8a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f000 fd60 	bl	8012460 <SPI_GetPacketSize>
 80119a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	4a7b      	ldr	r2, [pc, #492]	; (8011b94 <HAL_SPI_Init+0x23c>)
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d00c      	beq.n	80119c6 <HAL_SPI_Init+0x6e>
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	4a79      	ldr	r2, [pc, #484]	; (8011b98 <HAL_SPI_Init+0x240>)
 80119b2:	4293      	cmp	r3, r2
 80119b4:	d007      	beq.n	80119c6 <HAL_SPI_Init+0x6e>
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	4a78      	ldr	r2, [pc, #480]	; (8011b9c <HAL_SPI_Init+0x244>)
 80119bc:	4293      	cmp	r3, r2
 80119be:	d002      	beq.n	80119c6 <HAL_SPI_Init+0x6e>
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	2b08      	cmp	r3, #8
 80119c4:	d811      	bhi.n	80119ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80119ca:	4a72      	ldr	r2, [pc, #456]	; (8011b94 <HAL_SPI_Init+0x23c>)
 80119cc:	4293      	cmp	r3, r2
 80119ce:	d009      	beq.n	80119e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	4a70      	ldr	r2, [pc, #448]	; (8011b98 <HAL_SPI_Init+0x240>)
 80119d6:	4293      	cmp	r3, r2
 80119d8:	d004      	beq.n	80119e4 <HAL_SPI_Init+0x8c>
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	4a6f      	ldr	r2, [pc, #444]	; (8011b9c <HAL_SPI_Init+0x244>)
 80119e0:	4293      	cmp	r3, r2
 80119e2:	d104      	bne.n	80119ee <HAL_SPI_Init+0x96>
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2b10      	cmp	r3, #16
 80119e8:	d901      	bls.n	80119ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80119ea:	2301      	movs	r3, #1
 80119ec:	e0cd      	b.n	8011b8a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d106      	bne.n	8011a08 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2200      	movs	r2, #0
 80119fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f7f2 fbb0 	bl	8004168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2202      	movs	r2, #2
 8011a0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	681a      	ldr	r2, [r3, #0]
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	f022 0201 	bic.w	r2, r2, #1
 8011a1e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	689b      	ldr	r3, [r3, #8]
 8011a26:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011a2a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	699b      	ldr	r3, [r3, #24]
 8011a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011a34:	d119      	bne.n	8011a6a <HAL_SPI_Init+0x112>
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011a3e:	d103      	bne.n	8011a48 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d008      	beq.n	8011a5a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d10c      	bne.n	8011a6a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011a58:	d107      	bne.n	8011a6a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	681a      	ldr	r2, [r3, #0]
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011a68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d00f      	beq.n	8011a96 <HAL_SPI_Init+0x13e>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	2b06      	cmp	r3, #6
 8011a7c:	d90b      	bls.n	8011a96 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	430a      	orrs	r2, r1
 8011a92:	601a      	str	r2, [r3, #0]
 8011a94:	e007      	b.n	8011aa6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011aa4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	69da      	ldr	r2, [r3, #28]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aae:	431a      	orrs	r2, r3
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	431a      	orrs	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ab8:	ea42 0103 	orr.w	r1, r2, r3
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	68da      	ldr	r2, [r3, #12]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	430a      	orrs	r2, r1
 8011ac6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad0:	431a      	orrs	r2, r3
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ad6:	431a      	orrs	r2, r3
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	699b      	ldr	r3, [r3, #24]
 8011adc:	431a      	orrs	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	691b      	ldr	r3, [r3, #16]
 8011ae2:	431a      	orrs	r2, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	695b      	ldr	r3, [r3, #20]
 8011ae8:	431a      	orrs	r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6a1b      	ldr	r3, [r3, #32]
 8011aee:	431a      	orrs	r2, r3
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	431a      	orrs	r2, r3
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011afa:	431a      	orrs	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	689b      	ldr	r3, [r3, #8]
 8011b00:	431a      	orrs	r2, r3
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b06:	ea42 0103 	orr.w	r1, r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	430a      	orrs	r2, r1
 8011b14:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d113      	bne.n	8011b46 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	689b      	ldr	r3, [r3, #8]
 8011b24:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011b30:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	689b      	ldr	r3, [r3, #8]
 8011b38:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011b44:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	f022 0201 	bic.w	r2, r2, #1
 8011b54:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d00a      	beq.n	8011b78 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	68db      	ldr	r3, [r3, #12]
 8011b68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	430a      	orrs	r2, r1
 8011b76:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2201      	movs	r2, #1
 8011b84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011b88:	2300      	movs	r3, #0
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3710      	adds	r7, #16
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}
 8011b92:	bf00      	nop
 8011b94:	40013000 	.word	0x40013000
 8011b98:	40003800 	.word	0x40003800
 8011b9c:	40003c00 	.word	0x40003c00

08011ba0 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b084      	sub	sp, #16
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	4613      	mov	r3, r2
 8011bac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	2b01      	cmp	r3, #1
 8011bb8:	d005      	beq.n	8011bc6 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8011bc2:	2302      	movs	r3, #2
 8011bc4:	e127      	b.n	8011e16 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d002      	beq.n	8011bd2 <HAL_SPI_Receive_DMA+0x32>
 8011bcc:	88fb      	ldrh	r3, [r7, #6]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d105      	bne.n	8011bde <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	e11b      	b.n	8011e16 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011be4:	2b01      	cmp	r3, #1
 8011be6:	d101      	bne.n	8011bec <HAL_SPI_Receive_DMA+0x4c>
 8011be8:	2302      	movs	r3, #2
 8011bea:	e114      	b.n	8011e16 <HAL_SPI_Receive_DMA+0x276>
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	2201      	movs	r2, #1
 8011bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2204      	movs	r2, #4
 8011bf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	68ba      	ldr	r2, [r7, #8]
 8011c08:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	88fa      	ldrh	r2, [r7, #6]
 8011c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	88fa      	ldrh	r2, [r7, #6]
 8011c16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2200      	movs	r2, #0
 8011c24:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2200      	movs	r2, #0
 8011c32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	689b      	ldr	r3, [r3, #8]
 8011c3a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011c3e:	d108      	bne.n	8011c52 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011c4e:	601a      	str	r2, [r3, #0]
 8011c50:	e009      	b.n	8011c66 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011c64:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	68db      	ldr	r3, [r3, #12]
 8011c6a:	2b0f      	cmp	r3, #15
 8011c6c:	d905      	bls.n	8011c7a <HAL_SPI_Receive_DMA+0xda>
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c72:	699b      	ldr	r3, [r3, #24]
 8011c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c78:	d10f      	bne.n	8011c9a <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011c7e:	2b07      	cmp	r3, #7
 8011c80:	d911      	bls.n	8011ca6 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c86:	699b      	ldr	r3, [r3, #24]
 8011c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c8c:	d00b      	beq.n	8011ca6 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c92:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c98:	d005      	beq.n	8011ca6 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	e0b7      	b.n	8011e16 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	689a      	ldr	r2, [r3, #8]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011cb4:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	68db      	ldr	r3, [r3, #12]
 8011cba:	2b07      	cmp	r3, #7
 8011cbc:	d820      	bhi.n	8011d00 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cc2:	699b      	ldr	r3, [r3, #24]
 8011cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011cc8:	d109      	bne.n	8011cde <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	105b      	asrs	r3, r3, #1
 8011cd6:	b29a      	uxth	r2, r3
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ce2:	699b      	ldr	r3, [r3, #24]
 8011ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ce8:	d11e      	bne.n	8011d28 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	3303      	adds	r3, #3
 8011cf4:	109b      	asrs	r3, r3, #2
 8011cf6:	b29a      	uxth	r2, r3
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011cfe:	e013      	b.n	8011d28 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	68db      	ldr	r3, [r3, #12]
 8011d04:	2b0f      	cmp	r3, #15
 8011d06:	d80f      	bhi.n	8011d28 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d0c:	699b      	ldr	r3, [r3, #24]
 8011d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011d12:	d109      	bne.n	8011d28 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011d1a:	b29b      	uxth	r3, r3
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	105b      	asrs	r3, r3, #1
 8011d20:	b29a      	uxth	r2, r3
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d2c:	4a3c      	ldr	r2, [pc, #240]	; (8011e20 <HAL_SPI_Receive_DMA+0x280>)
 8011d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d34:	4a3b      	ldr	r2, [pc, #236]	; (8011e24 <HAL_SPI_Receive_DMA+0x284>)
 8011d36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d3c:	4a3a      	ldr	r2, [pc, #232]	; (8011e28 <HAL_SPI_Receive_DMA+0x288>)
 8011d3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d44:	2200      	movs	r2, #0
 8011d46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	3330      	adds	r3, #48	; 0x30
 8011d52:	4619      	mov	r1, r3
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d58:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011d60:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011d62:	f7f6 fa21 	bl	80081a8 <HAL_DMA_Start_IT>
 8011d66:	4603      	mov	r3, r0
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d011      	beq.n	8011d90 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011d72:	f043 0210 	orr.w	r2, r3, #16
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	e042      	b.n	8011e16 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d94:	69db      	ldr	r3, [r3, #28]
 8011d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d9a:	d108      	bne.n	8011dae <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	6859      	ldr	r1, [r3, #4]
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	681a      	ldr	r2, [r3, #0]
 8011da6:	4b21      	ldr	r3, [pc, #132]	; (8011e2c <HAL_SPI_Receive_DMA+0x28c>)
 8011da8:	400b      	ands	r3, r1
 8011daa:	6053      	str	r3, [r2, #4]
 8011dac:	e009      	b.n	8011dc2 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	685a      	ldr	r2, [r3, #4]
 8011db4:	4b1d      	ldr	r3, [pc, #116]	; (8011e2c <HAL_SPI_Receive_DMA+0x28c>)
 8011db6:	4013      	ands	r3, r2
 8011db8:	88f9      	ldrh	r1, [r7, #6]
 8011dba:	68fa      	ldr	r2, [r7, #12]
 8011dbc:	6812      	ldr	r2, [r2, #0]
 8011dbe:	430b      	orrs	r3, r1
 8011dc0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	689a      	ldr	r2, [r3, #8]
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011dd0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	691a      	ldr	r2, [r3, #16]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8011de0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	f042 0201 	orr.w	r2, r2, #1
 8011df0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011dfa:	d107      	bne.n	8011e0c <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	681a      	ldr	r2, [r3, #0]
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011e0a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011e14:	2300      	movs	r3, #0
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3710      	adds	r7, #16
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}
 8011e1e:	bf00      	nop
 8011e20:	0801228b 	.word	0x0801228b
 8011e24:	08012245 	.word	0x08012245
 8011e28:	080122a7 	.word	0x080122a7
 8011e2c:	ffff0000 	.word	0xffff0000

08011e30 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b08a      	sub	sp, #40	; 0x28
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	691b      	ldr	r3, [r3, #16]
 8011e3e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	695b      	ldr	r3, [r3, #20]
 8011e46:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011e48:	6a3a      	ldr	r2, [r7, #32]
 8011e4a:	69fb      	ldr	r3, [r7, #28]
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	689b      	ldr	r3, [r3, #8]
 8011e56:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011e62:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	3330      	adds	r3, #48	; 0x30
 8011e6a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d010      	beq.n	8011e98 <HAL_SPI_IRQHandler+0x68>
 8011e76:	6a3b      	ldr	r3, [r7, #32]
 8011e78:	f003 0308 	and.w	r3, r3, #8
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00b      	beq.n	8011e98 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	699a      	ldr	r2, [r3, #24]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011e8e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f000 f9cd 	bl	8012230 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8011e96:	e192      	b.n	80121be <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d113      	bne.n	8011eca <HAL_SPI_IRQHandler+0x9a>
 8011ea2:	69bb      	ldr	r3, [r7, #24]
 8011ea4:	f003 0320 	and.w	r3, r3, #32
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10e      	bne.n	8011eca <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011eac:	69bb      	ldr	r3, [r7, #24]
 8011eae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d009      	beq.n	8011eca <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	4798      	blx	r3
    handled = 1UL;
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011eca:	69bb      	ldr	r3, [r7, #24]
 8011ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d10f      	bne.n	8011ef4 <HAL_SPI_IRQHandler+0xc4>
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	f003 0301 	and.w	r3, r3, #1
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d00a      	beq.n	8011ef4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011ede:	69bb      	ldr	r3, [r7, #24]
 8011ee0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d105      	bne.n	8011ef4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	4798      	blx	r3
    handled = 1UL;
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011ef4:	69bb      	ldr	r3, [r7, #24]
 8011ef6:	f003 0320 	and.w	r3, r3, #32
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d10f      	bne.n	8011f1e <HAL_SPI_IRQHandler+0xee>
 8011efe:	69bb      	ldr	r3, [r7, #24]
 8011f00:	f003 0302 	and.w	r3, r3, #2
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d00a      	beq.n	8011f1e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d105      	bne.n	8011f1e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	4798      	blx	r3
    handled = 1UL;
 8011f1a:	2301      	movs	r3, #1
 8011f1c:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8011f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	f040 8147 	bne.w	80121b4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011f26:	69bb      	ldr	r3, [r7, #24]
 8011f28:	f003 0308 	and.w	r3, r3, #8
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	f000 808b 	beq.w	8012048 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	699a      	ldr	r2, [r3, #24]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f042 0208 	orr.w	r2, r2, #8
 8011f40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	699a      	ldr	r2, [r3, #24]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	f042 0210 	orr.w	r2, r2, #16
 8011f50:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	699a      	ldr	r2, [r3, #24]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011f60:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	691a      	ldr	r2, [r3, #16]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f022 0208 	bic.w	r2, r2, #8
 8011f70:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	689b      	ldr	r3, [r3, #8]
 8011f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d13d      	bne.n	8011ffc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011f80:	e036      	b.n	8011ff0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	68db      	ldr	r3, [r3, #12]
 8011f86:	2b0f      	cmp	r3, #15
 8011f88:	d90b      	bls.n	8011fa2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011f94:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f9a:	1d1a      	adds	r2, r3, #4
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	665a      	str	r2, [r3, #100]	; 0x64
 8011fa0:	e01d      	b.n	8011fde <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	2b07      	cmp	r3, #7
 8011fa8:	d90b      	bls.n	8011fc2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fae:	68fa      	ldr	r2, [r7, #12]
 8011fb0:	8812      	ldrh	r2, [r2, #0]
 8011fb2:	b292      	uxth	r2, r2
 8011fb4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fba:	1c9a      	adds	r2, r3, #2
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	665a      	str	r2, [r3, #100]	; 0x64
 8011fc0:	e00d      	b.n	8011fde <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fce:	7812      	ldrb	r2, [r2, #0]
 8011fd0:	b2d2      	uxtb	r2, r2
 8011fd2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fd8:	1c5a      	adds	r2, r3, #1
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	3b01      	subs	r3, #1
 8011fe8:	b29a      	uxth	r2, r3
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011ff6:	b29b      	uxth	r3, r3
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d1c2      	bne.n	8011f82 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f000 f98f 	bl	8012320 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2201      	movs	r2, #1
 8012006:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012010:	2b00      	cmp	r3, #0
 8012012:	d003      	beq.n	801201c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f000 f901 	bl	801221c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801201a:	e0d0      	b.n	80121be <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801201c:	7cfb      	ldrb	r3, [r7, #19]
 801201e:	2b05      	cmp	r3, #5
 8012020:	d103      	bne.n	801202a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f000 f8e6 	bl	80121f4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012028:	e0c6      	b.n	80121b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801202a:	7cfb      	ldrb	r3, [r7, #19]
 801202c:	2b04      	cmp	r3, #4
 801202e:	d103      	bne.n	8012038 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 f8d5 	bl	80121e0 <HAL_SPI_RxCpltCallback>
    return;
 8012036:	e0bf      	b.n	80121b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012038:	7cfb      	ldrb	r3, [r7, #19]
 801203a:	2b03      	cmp	r3, #3
 801203c:	f040 80bc 	bne.w	80121b8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f000 f8c3 	bl	80121cc <HAL_SPI_TxCpltCallback>
    return;
 8012046:	e0b7      	b.n	80121b8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012048:	69bb      	ldr	r3, [r7, #24]
 801204a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 801204e:	2b00      	cmp	r3, #0
 8012050:	f000 80b5 	beq.w	80121be <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012054:	69bb      	ldr	r3, [r7, #24]
 8012056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801205a:	2b00      	cmp	r3, #0
 801205c:	d00f      	beq.n	801207e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012064:	f043 0204 	orr.w	r2, r3, #4
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	699a      	ldr	r2, [r3, #24]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801207c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801207e:	69bb      	ldr	r3, [r7, #24]
 8012080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012084:	2b00      	cmp	r3, #0
 8012086:	d00f      	beq.n	80120a8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801208e:	f043 0201 	orr.w	r2, r3, #1
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	699a      	ldr	r2, [r3, #24]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80120a6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80120a8:	69bb      	ldr	r3, [r7, #24]
 80120aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d00f      	beq.n	80120d2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120b8:	f043 0208 	orr.w	r2, r3, #8
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	699a      	ldr	r2, [r3, #24]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80120d0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80120d2:	69bb      	ldr	r3, [r7, #24]
 80120d4:	f003 0320 	and.w	r3, r3, #32
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d00f      	beq.n	80120fc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	699a      	ldr	r2, [r3, #24]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f042 0220 	orr.w	r2, r2, #32
 80120fa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012102:	2b00      	cmp	r3, #0
 8012104:	d05a      	beq.n	80121bc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f022 0201 	bic.w	r2, r2, #1
 8012114:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	6919      	ldr	r1, [r3, #16]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681a      	ldr	r2, [r3, #0]
 8012120:	4b28      	ldr	r3, [pc, #160]	; (80121c4 <HAL_SPI_IRQHandler+0x394>)
 8012122:	400b      	ands	r3, r1
 8012124:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801212c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012130:	d138      	bne.n	80121a4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	689a      	ldr	r2, [r3, #8]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012140:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012146:	2b00      	cmp	r3, #0
 8012148:	d013      	beq.n	8012172 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801214e:	4a1e      	ldr	r2, [pc, #120]	; (80121c8 <HAL_SPI_IRQHandler+0x398>)
 8012150:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012156:	4618      	mov	r0, r3
 8012158:	f7f6 fdae 	bl	8008cb8 <HAL_DMA_Abort_IT>
 801215c:	4603      	mov	r3, r0
 801215e:	2b00      	cmp	r3, #0
 8012160:	d007      	beq.n	8012172 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012168:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012176:	2b00      	cmp	r3, #0
 8012178:	d020      	beq.n	80121bc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801217e:	4a12      	ldr	r2, [pc, #72]	; (80121c8 <HAL_SPI_IRQHandler+0x398>)
 8012180:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012186:	4618      	mov	r0, r3
 8012188:	f7f6 fd96 	bl	8008cb8 <HAL_DMA_Abort_IT>
 801218c:	4603      	mov	r3, r0
 801218e:	2b00      	cmp	r3, #0
 8012190:	d014      	beq.n	80121bc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012198:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80121a2:	e00b      	b.n	80121bc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2201      	movs	r2, #1
 80121a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f000 f835 	bl	801221c <HAL_SPI_ErrorCallback>
    return;
 80121b2:	e003      	b.n	80121bc <HAL_SPI_IRQHandler+0x38c>
    return;
 80121b4:	bf00      	nop
 80121b6:	e002      	b.n	80121be <HAL_SPI_IRQHandler+0x38e>
    return;
 80121b8:	bf00      	nop
 80121ba:	e000      	b.n	80121be <HAL_SPI_IRQHandler+0x38e>
    return;
 80121bc:	bf00      	nop
  }
}
 80121be:	3728      	adds	r7, #40	; 0x28
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	fffffc94 	.word	0xfffffc94
 80121c8:	080122ed 	.word	0x080122ed

080121cc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80121d4:	bf00      	nop
 80121d6:	370c      	adds	r7, #12
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr

080121e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80121e0:	b480      	push	{r7}
 80121e2:	b083      	sub	sp, #12
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80121e8:	bf00      	nop
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr

080121f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80121f4:	b480      	push	{r7}
 80121f6:	b083      	sub	sp, #12
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80121fc:	bf00      	nop
 80121fe:	370c      	adds	r7, #12
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr

08012208 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012208:	b480      	push	{r7}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012210:	bf00      	nop
 8012212:	370c      	adds	r7, #12
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr

0801221c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801221c:	b480      	push	{r7}
 801221e:	b083      	sub	sp, #12
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012224:	bf00      	nop
 8012226:	370c      	adds	r7, #12
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr

08012230 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012238:	bf00      	nop
 801223a:	370c      	adds	r7, #12
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr

08012244 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012250:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012258:	b2db      	uxtb	r3, r3
 801225a:	2b07      	cmp	r3, #7
 801225c:	d011      	beq.n	8012282 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012262:	69db      	ldr	r3, [r3, #28]
 8012264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012268:	d103      	bne.n	8012272 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 801226a:	68f8      	ldr	r0, [r7, #12]
 801226c:	f7ff ffb8 	bl	80121e0 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012270:	e007      	b.n	8012282 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	691a      	ldr	r2, [r3, #16]
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	f042 0208 	orr.w	r2, r2, #8
 8012280:	611a      	str	r2, [r3, #16]
}
 8012282:	bf00      	nop
 8012284:	3710      	adds	r7, #16
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}

0801228a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801228a:	b580      	push	{r7, lr}
 801228c:	b084      	sub	sp, #16
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012296:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012298:	68f8      	ldr	r0, [r7, #12]
 801229a:	f7ff ffb5 	bl	8012208 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801229e:	bf00      	nop
 80122a0:	3710      	adds	r7, #16
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}

080122a6 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80122a6:	b580      	push	{r7, lr}
 80122a8:	b084      	sub	sp, #16
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122b2:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f7f7 fe7d 	bl	8009fb4 <HAL_DMA_GetError>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b02      	cmp	r3, #2
 80122be:	d011      	beq.n	80122e4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80122c0:	68f8      	ldr	r0, [r7, #12]
 80122c2:	f000 f82d 	bl	8012320 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122cc:	f043 0210 	orr.w	r2, r3, #16
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2201      	movs	r2, #1
 80122da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80122de:	68f8      	ldr	r0, [r7, #12]
 80122e0:	f7ff ff9c 	bl	801221c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80122e4:	bf00      	nop
 80122e6:	3710      	adds	r7, #16
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2200      	movs	r2, #0
 80122fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2200      	movs	r2, #0
 8012306:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2201      	movs	r2, #1
 801230e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012312:	68f8      	ldr	r0, [r7, #12]
 8012314:	f7ff ff82 	bl	801221c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012318:	bf00      	nop
 801231a:	3710      	adds	r7, #16
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	695b      	ldr	r3, [r3, #20]
 801232e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	699a      	ldr	r2, [r3, #24]
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	f042 0208 	orr.w	r2, r2, #8
 801233e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	699a      	ldr	r2, [r3, #24]
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	f042 0210 	orr.w	r2, r2, #16
 801234e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	681a      	ldr	r2, [r3, #0]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	f022 0201 	bic.w	r2, r2, #1
 801235e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	6919      	ldr	r1, [r3, #16]
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	4b3c      	ldr	r3, [pc, #240]	; (801245c <SPI_CloseTransfer+0x13c>)
 801236c:	400b      	ands	r3, r1
 801236e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	689a      	ldr	r2, [r3, #8]
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801237e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012386:	b2db      	uxtb	r3, r3
 8012388:	2b04      	cmp	r3, #4
 801238a:	d014      	beq.n	80123b6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	f003 0320 	and.w	r3, r3, #32
 8012392:	2b00      	cmp	r3, #0
 8012394:	d00f      	beq.n	80123b6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801239c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	699a      	ldr	r2, [r3, #24]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	f042 0220 	orr.w	r2, r2, #32
 80123b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80123bc:	b2db      	uxtb	r3, r3
 80123be:	2b03      	cmp	r3, #3
 80123c0:	d014      	beq.n	80123ec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00f      	beq.n	80123ec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123d2:	f043 0204 	orr.w	r2, r3, #4
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	699a      	ldr	r2, [r3, #24]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80123ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d00f      	beq.n	8012416 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123fc:	f043 0201 	orr.w	r2, r3, #1
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	699a      	ldr	r2, [r3, #24]
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012414:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801241c:	2b00      	cmp	r3, #0
 801241e:	d00f      	beq.n	8012440 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012426:	f043 0208 	orr.w	r2, r3, #8
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	699a      	ldr	r2, [r3, #24]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801243e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2200      	movs	r2, #0
 8012444:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2200      	movs	r2, #0
 801244c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012450:	bf00      	nop
 8012452:	3714      	adds	r7, #20
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr
 801245c:	fffffc90 	.word	0xfffffc90

08012460 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012460:	b480      	push	{r7}
 8012462:	b085      	sub	sp, #20
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801246c:	095b      	lsrs	r3, r3, #5
 801246e:	3301      	adds	r3, #1
 8012470:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	68db      	ldr	r3, [r3, #12]
 8012476:	3301      	adds	r3, #1
 8012478:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	3307      	adds	r3, #7
 801247e:	08db      	lsrs	r3, r3, #3
 8012480:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	68fa      	ldr	r2, [r7, #12]
 8012486:	fb02 f303 	mul.w	r3, r2, r3
}
 801248a:	4618      	mov	r0, r3
 801248c:	3714      	adds	r7, #20
 801248e:	46bd      	mov	sp, r7
 8012490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012494:	4770      	bx	lr

08012496 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012496:	b580      	push	{r7, lr}
 8012498:	b082      	sub	sp, #8
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d101      	bne.n	80124a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80124a4:	2301      	movs	r3, #1
 80124a6:	e049      	b.n	801253c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d106      	bne.n	80124c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2200      	movs	r2, #0
 80124b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f7f2 fb5f 	bl	8004b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2202      	movs	r2, #2
 80124c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681a      	ldr	r2, [r3, #0]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	3304      	adds	r3, #4
 80124d2:	4619      	mov	r1, r3
 80124d4:	4610      	mov	r0, r2
 80124d6:	f000 fe7d 	bl	80131d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2201      	movs	r2, #1
 80124de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2201      	movs	r2, #1
 80124e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2201      	movs	r2, #1
 80124ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2201      	movs	r2, #1
 80124f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2201      	movs	r2, #1
 80124fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2201      	movs	r2, #1
 8012506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2201      	movs	r2, #1
 801250e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2201      	movs	r2, #1
 8012516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2201      	movs	r2, #1
 801251e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2201      	movs	r2, #1
 8012526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2201      	movs	r2, #1
 801252e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2201      	movs	r2, #1
 8012536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801253a:	2300      	movs	r3, #0
}
 801253c:	4618      	mov	r0, r3
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012544:	b480      	push	{r7}
 8012546:	b085      	sub	sp, #20
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012552:	b2db      	uxtb	r3, r3
 8012554:	2b01      	cmp	r3, #1
 8012556:	d001      	beq.n	801255c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012558:	2301      	movs	r3, #1
 801255a:	e054      	b.n	8012606 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2202      	movs	r2, #2
 8012560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	68da      	ldr	r2, [r3, #12]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	f042 0201 	orr.w	r2, r2, #1
 8012572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	4a26      	ldr	r2, [pc, #152]	; (8012614 <HAL_TIM_Base_Start_IT+0xd0>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d022      	beq.n	80125c4 <HAL_TIM_Base_Start_IT+0x80>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012586:	d01d      	beq.n	80125c4 <HAL_TIM_Base_Start_IT+0x80>
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	4a22      	ldr	r2, [pc, #136]	; (8012618 <HAL_TIM_Base_Start_IT+0xd4>)
 801258e:	4293      	cmp	r3, r2
 8012590:	d018      	beq.n	80125c4 <HAL_TIM_Base_Start_IT+0x80>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	4a21      	ldr	r2, [pc, #132]	; (801261c <HAL_TIM_Base_Start_IT+0xd8>)
 8012598:	4293      	cmp	r3, r2
 801259a:	d013      	beq.n	80125c4 <HAL_TIM_Base_Start_IT+0x80>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	4a1f      	ldr	r2, [pc, #124]	; (8012620 <HAL_TIM_Base_Start_IT+0xdc>)
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d00e      	beq.n	80125c4 <HAL_TIM_Base_Start_IT+0x80>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	4a1e      	ldr	r2, [pc, #120]	; (8012624 <HAL_TIM_Base_Start_IT+0xe0>)
 80125ac:	4293      	cmp	r3, r2
 80125ae:	d009      	beq.n	80125c4 <HAL_TIM_Base_Start_IT+0x80>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	4a1c      	ldr	r2, [pc, #112]	; (8012628 <HAL_TIM_Base_Start_IT+0xe4>)
 80125b6:	4293      	cmp	r3, r2
 80125b8:	d004      	beq.n	80125c4 <HAL_TIM_Base_Start_IT+0x80>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	4a1b      	ldr	r2, [pc, #108]	; (801262c <HAL_TIM_Base_Start_IT+0xe8>)
 80125c0:	4293      	cmp	r3, r2
 80125c2:	d115      	bne.n	80125f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	689a      	ldr	r2, [r3, #8]
 80125ca:	4b19      	ldr	r3, [pc, #100]	; (8012630 <HAL_TIM_Base_Start_IT+0xec>)
 80125cc:	4013      	ands	r3, r2
 80125ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	2b06      	cmp	r3, #6
 80125d4:	d015      	beq.n	8012602 <HAL_TIM_Base_Start_IT+0xbe>
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125dc:	d011      	beq.n	8012602 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	681a      	ldr	r2, [r3, #0]
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	f042 0201 	orr.w	r2, r2, #1
 80125ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125ee:	e008      	b.n	8012602 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	f042 0201 	orr.w	r2, r2, #1
 80125fe:	601a      	str	r2, [r3, #0]
 8012600:	e000      	b.n	8012604 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012602:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012604:	2300      	movs	r3, #0
}
 8012606:	4618      	mov	r0, r3
 8012608:	3714      	adds	r7, #20
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr
 8012612:	bf00      	nop
 8012614:	40010000 	.word	0x40010000
 8012618:	40000400 	.word	0x40000400
 801261c:	40000800 	.word	0x40000800
 8012620:	40000c00 	.word	0x40000c00
 8012624:	40010400 	.word	0x40010400
 8012628:	40001800 	.word	0x40001800
 801262c:	40014000 	.word	0x40014000
 8012630:	00010007 	.word	0x00010007

08012634 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801263e:	2300      	movs	r3, #0
 8012640:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d109      	bne.n	801265c <HAL_TIM_OC_Start_IT+0x28>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801264e:	b2db      	uxtb	r3, r3
 8012650:	2b01      	cmp	r3, #1
 8012652:	bf14      	ite	ne
 8012654:	2301      	movne	r3, #1
 8012656:	2300      	moveq	r3, #0
 8012658:	b2db      	uxtb	r3, r3
 801265a:	e03c      	b.n	80126d6 <HAL_TIM_OC_Start_IT+0xa2>
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	2b04      	cmp	r3, #4
 8012660:	d109      	bne.n	8012676 <HAL_TIM_OC_Start_IT+0x42>
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012668:	b2db      	uxtb	r3, r3
 801266a:	2b01      	cmp	r3, #1
 801266c:	bf14      	ite	ne
 801266e:	2301      	movne	r3, #1
 8012670:	2300      	moveq	r3, #0
 8012672:	b2db      	uxtb	r3, r3
 8012674:	e02f      	b.n	80126d6 <HAL_TIM_OC_Start_IT+0xa2>
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	2b08      	cmp	r3, #8
 801267a:	d109      	bne.n	8012690 <HAL_TIM_OC_Start_IT+0x5c>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012682:	b2db      	uxtb	r3, r3
 8012684:	2b01      	cmp	r3, #1
 8012686:	bf14      	ite	ne
 8012688:	2301      	movne	r3, #1
 801268a:	2300      	moveq	r3, #0
 801268c:	b2db      	uxtb	r3, r3
 801268e:	e022      	b.n	80126d6 <HAL_TIM_OC_Start_IT+0xa2>
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	2b0c      	cmp	r3, #12
 8012694:	d109      	bne.n	80126aa <HAL_TIM_OC_Start_IT+0x76>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801269c:	b2db      	uxtb	r3, r3
 801269e:	2b01      	cmp	r3, #1
 80126a0:	bf14      	ite	ne
 80126a2:	2301      	movne	r3, #1
 80126a4:	2300      	moveq	r3, #0
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	e015      	b.n	80126d6 <HAL_TIM_OC_Start_IT+0xa2>
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	2b10      	cmp	r3, #16
 80126ae:	d109      	bne.n	80126c4 <HAL_TIM_OC_Start_IT+0x90>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	bf14      	ite	ne
 80126bc:	2301      	movne	r3, #1
 80126be:	2300      	moveq	r3, #0
 80126c0:	b2db      	uxtb	r3, r3
 80126c2:	e008      	b.n	80126d6 <HAL_TIM_OC_Start_IT+0xa2>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	bf14      	ite	ne
 80126d0:	2301      	movne	r3, #1
 80126d2:	2300      	moveq	r3, #0
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d001      	beq.n	80126de <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80126da:	2301      	movs	r3, #1
 80126dc:	e0ec      	b.n	80128b8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d104      	bne.n	80126ee <HAL_TIM_OC_Start_IT+0xba>
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2202      	movs	r2, #2
 80126e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80126ec:	e023      	b.n	8012736 <HAL_TIM_OC_Start_IT+0x102>
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	2b04      	cmp	r3, #4
 80126f2:	d104      	bne.n	80126fe <HAL_TIM_OC_Start_IT+0xca>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2202      	movs	r2, #2
 80126f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80126fc:	e01b      	b.n	8012736 <HAL_TIM_OC_Start_IT+0x102>
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	2b08      	cmp	r3, #8
 8012702:	d104      	bne.n	801270e <HAL_TIM_OC_Start_IT+0xda>
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2202      	movs	r2, #2
 8012708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801270c:	e013      	b.n	8012736 <HAL_TIM_OC_Start_IT+0x102>
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	2b0c      	cmp	r3, #12
 8012712:	d104      	bne.n	801271e <HAL_TIM_OC_Start_IT+0xea>
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2202      	movs	r2, #2
 8012718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801271c:	e00b      	b.n	8012736 <HAL_TIM_OC_Start_IT+0x102>
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	2b10      	cmp	r3, #16
 8012722:	d104      	bne.n	801272e <HAL_TIM_OC_Start_IT+0xfa>
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2202      	movs	r2, #2
 8012728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801272c:	e003      	b.n	8012736 <HAL_TIM_OC_Start_IT+0x102>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2202      	movs	r2, #2
 8012732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	2b0c      	cmp	r3, #12
 801273a:	d841      	bhi.n	80127c0 <HAL_TIM_OC_Start_IT+0x18c>
 801273c:	a201      	add	r2, pc, #4	; (adr r2, 8012744 <HAL_TIM_OC_Start_IT+0x110>)
 801273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012742:	bf00      	nop
 8012744:	08012779 	.word	0x08012779
 8012748:	080127c1 	.word	0x080127c1
 801274c:	080127c1 	.word	0x080127c1
 8012750:	080127c1 	.word	0x080127c1
 8012754:	0801278b 	.word	0x0801278b
 8012758:	080127c1 	.word	0x080127c1
 801275c:	080127c1 	.word	0x080127c1
 8012760:	080127c1 	.word	0x080127c1
 8012764:	0801279d 	.word	0x0801279d
 8012768:	080127c1 	.word	0x080127c1
 801276c:	080127c1 	.word	0x080127c1
 8012770:	080127c1 	.word	0x080127c1
 8012774:	080127af 	.word	0x080127af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	68da      	ldr	r2, [r3, #12]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f042 0202 	orr.w	r2, r2, #2
 8012786:	60da      	str	r2, [r3, #12]
      break;
 8012788:	e01d      	b.n	80127c6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	68da      	ldr	r2, [r3, #12]
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	f042 0204 	orr.w	r2, r2, #4
 8012798:	60da      	str	r2, [r3, #12]
      break;
 801279a:	e014      	b.n	80127c6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	68da      	ldr	r2, [r3, #12]
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	f042 0208 	orr.w	r2, r2, #8
 80127aa:	60da      	str	r2, [r3, #12]
      break;
 80127ac:	e00b      	b.n	80127c6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	68da      	ldr	r2, [r3, #12]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f042 0210 	orr.w	r2, r2, #16
 80127bc:	60da      	str	r2, [r3, #12]
      break;
 80127be:	e002      	b.n	80127c6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80127c0:	2301      	movs	r3, #1
 80127c2:	73fb      	strb	r3, [r7, #15]
      break;
 80127c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80127c6:	7bfb      	ldrb	r3, [r7, #15]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d174      	bne.n	80128b6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2201      	movs	r2, #1
 80127d2:	6839      	ldr	r1, [r7, #0]
 80127d4:	4618      	mov	r0, r3
 80127d6:	f001 f917 	bl	8013a08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	4a38      	ldr	r2, [pc, #224]	; (80128c0 <HAL_TIM_OC_Start_IT+0x28c>)
 80127e0:	4293      	cmp	r3, r2
 80127e2:	d013      	beq.n	801280c <HAL_TIM_OC_Start_IT+0x1d8>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	4a36      	ldr	r2, [pc, #216]	; (80128c4 <HAL_TIM_OC_Start_IT+0x290>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d00e      	beq.n	801280c <HAL_TIM_OC_Start_IT+0x1d8>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	4a35      	ldr	r2, [pc, #212]	; (80128c8 <HAL_TIM_OC_Start_IT+0x294>)
 80127f4:	4293      	cmp	r3, r2
 80127f6:	d009      	beq.n	801280c <HAL_TIM_OC_Start_IT+0x1d8>
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4a33      	ldr	r2, [pc, #204]	; (80128cc <HAL_TIM_OC_Start_IT+0x298>)
 80127fe:	4293      	cmp	r3, r2
 8012800:	d004      	beq.n	801280c <HAL_TIM_OC_Start_IT+0x1d8>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	4a32      	ldr	r2, [pc, #200]	; (80128d0 <HAL_TIM_OC_Start_IT+0x29c>)
 8012808:	4293      	cmp	r3, r2
 801280a:	d101      	bne.n	8012810 <HAL_TIM_OC_Start_IT+0x1dc>
 801280c:	2301      	movs	r3, #1
 801280e:	e000      	b.n	8012812 <HAL_TIM_OC_Start_IT+0x1de>
 8012810:	2300      	movs	r3, #0
 8012812:	2b00      	cmp	r3, #0
 8012814:	d007      	beq.n	8012826 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012824:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	4a25      	ldr	r2, [pc, #148]	; (80128c0 <HAL_TIM_OC_Start_IT+0x28c>)
 801282c:	4293      	cmp	r3, r2
 801282e:	d022      	beq.n	8012876 <HAL_TIM_OC_Start_IT+0x242>
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012838:	d01d      	beq.n	8012876 <HAL_TIM_OC_Start_IT+0x242>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	4a25      	ldr	r2, [pc, #148]	; (80128d4 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d018      	beq.n	8012876 <HAL_TIM_OC_Start_IT+0x242>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4a23      	ldr	r2, [pc, #140]	; (80128d8 <HAL_TIM_OC_Start_IT+0x2a4>)
 801284a:	4293      	cmp	r3, r2
 801284c:	d013      	beq.n	8012876 <HAL_TIM_OC_Start_IT+0x242>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	4a22      	ldr	r2, [pc, #136]	; (80128dc <HAL_TIM_OC_Start_IT+0x2a8>)
 8012854:	4293      	cmp	r3, r2
 8012856:	d00e      	beq.n	8012876 <HAL_TIM_OC_Start_IT+0x242>
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	4a19      	ldr	r2, [pc, #100]	; (80128c4 <HAL_TIM_OC_Start_IT+0x290>)
 801285e:	4293      	cmp	r3, r2
 8012860:	d009      	beq.n	8012876 <HAL_TIM_OC_Start_IT+0x242>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4a1e      	ldr	r2, [pc, #120]	; (80128e0 <HAL_TIM_OC_Start_IT+0x2ac>)
 8012868:	4293      	cmp	r3, r2
 801286a:	d004      	beq.n	8012876 <HAL_TIM_OC_Start_IT+0x242>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	4a15      	ldr	r2, [pc, #84]	; (80128c8 <HAL_TIM_OC_Start_IT+0x294>)
 8012872:	4293      	cmp	r3, r2
 8012874:	d115      	bne.n	80128a2 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	689a      	ldr	r2, [r3, #8]
 801287c:	4b19      	ldr	r3, [pc, #100]	; (80128e4 <HAL_TIM_OC_Start_IT+0x2b0>)
 801287e:	4013      	ands	r3, r2
 8012880:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	2b06      	cmp	r3, #6
 8012886:	d015      	beq.n	80128b4 <HAL_TIM_OC_Start_IT+0x280>
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801288e:	d011      	beq.n	80128b4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	681a      	ldr	r2, [r3, #0]
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	f042 0201 	orr.w	r2, r2, #1
 801289e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128a0:	e008      	b.n	80128b4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	681a      	ldr	r2, [r3, #0]
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	f042 0201 	orr.w	r2, r2, #1
 80128b0:	601a      	str	r2, [r3, #0]
 80128b2:	e000      	b.n	80128b6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128b4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80128b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3710      	adds	r7, #16
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	40010000 	.word	0x40010000
 80128c4:	40010400 	.word	0x40010400
 80128c8:	40014000 	.word	0x40014000
 80128cc:	40014400 	.word	0x40014400
 80128d0:	40014800 	.word	0x40014800
 80128d4:	40000400 	.word	0x40000400
 80128d8:	40000800 	.word	0x40000800
 80128dc:	40000c00 	.word	0x40000c00
 80128e0:	40001800 	.word	0x40001800
 80128e4:	00010007 	.word	0x00010007

080128e8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80128f2:	2300      	movs	r3, #0
 80128f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	2b0c      	cmp	r3, #12
 80128fa:	d841      	bhi.n	8012980 <HAL_TIM_OC_Stop_IT+0x98>
 80128fc:	a201      	add	r2, pc, #4	; (adr r2, 8012904 <HAL_TIM_OC_Stop_IT+0x1c>)
 80128fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012902:	bf00      	nop
 8012904:	08012939 	.word	0x08012939
 8012908:	08012981 	.word	0x08012981
 801290c:	08012981 	.word	0x08012981
 8012910:	08012981 	.word	0x08012981
 8012914:	0801294b 	.word	0x0801294b
 8012918:	08012981 	.word	0x08012981
 801291c:	08012981 	.word	0x08012981
 8012920:	08012981 	.word	0x08012981
 8012924:	0801295d 	.word	0x0801295d
 8012928:	08012981 	.word	0x08012981
 801292c:	08012981 	.word	0x08012981
 8012930:	08012981 	.word	0x08012981
 8012934:	0801296f 	.word	0x0801296f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	68da      	ldr	r2, [r3, #12]
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	f022 0202 	bic.w	r2, r2, #2
 8012946:	60da      	str	r2, [r3, #12]
      break;
 8012948:	e01d      	b.n	8012986 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	68da      	ldr	r2, [r3, #12]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f022 0204 	bic.w	r2, r2, #4
 8012958:	60da      	str	r2, [r3, #12]
      break;
 801295a:	e014      	b.n	8012986 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	68da      	ldr	r2, [r3, #12]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f022 0208 	bic.w	r2, r2, #8
 801296a:	60da      	str	r2, [r3, #12]
      break;
 801296c:	e00b      	b.n	8012986 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	68da      	ldr	r2, [r3, #12]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	f022 0210 	bic.w	r2, r2, #16
 801297c:	60da      	str	r2, [r3, #12]
      break;
 801297e:	e002      	b.n	8012986 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012980:	2301      	movs	r3, #1
 8012982:	73fb      	strb	r3, [r7, #15]
      break;
 8012984:	bf00      	nop
  }

  if (status == HAL_OK)
 8012986:	7bfb      	ldrb	r3, [r7, #15]
 8012988:	2b00      	cmp	r3, #0
 801298a:	f040 8081 	bne.w	8012a90 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	2200      	movs	r2, #0
 8012994:	6839      	ldr	r1, [r7, #0]
 8012996:	4618      	mov	r0, r3
 8012998:	f001 f836 	bl	8013a08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	4a3e      	ldr	r2, [pc, #248]	; (8012a9c <HAL_TIM_OC_Stop_IT+0x1b4>)
 80129a2:	4293      	cmp	r3, r2
 80129a4:	d013      	beq.n	80129ce <HAL_TIM_OC_Stop_IT+0xe6>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4a3d      	ldr	r2, [pc, #244]	; (8012aa0 <HAL_TIM_OC_Stop_IT+0x1b8>)
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d00e      	beq.n	80129ce <HAL_TIM_OC_Stop_IT+0xe6>
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	4a3b      	ldr	r2, [pc, #236]	; (8012aa4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 80129b6:	4293      	cmp	r3, r2
 80129b8:	d009      	beq.n	80129ce <HAL_TIM_OC_Stop_IT+0xe6>
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	4a3a      	ldr	r2, [pc, #232]	; (8012aa8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 80129c0:	4293      	cmp	r3, r2
 80129c2:	d004      	beq.n	80129ce <HAL_TIM_OC_Stop_IT+0xe6>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	4a38      	ldr	r2, [pc, #224]	; (8012aac <HAL_TIM_OC_Stop_IT+0x1c4>)
 80129ca:	4293      	cmp	r3, r2
 80129cc:	d101      	bne.n	80129d2 <HAL_TIM_OC_Stop_IT+0xea>
 80129ce:	2301      	movs	r3, #1
 80129d0:	e000      	b.n	80129d4 <HAL_TIM_OC_Stop_IT+0xec>
 80129d2:	2300      	movs	r3, #0
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d017      	beq.n	8012a08 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	6a1a      	ldr	r2, [r3, #32]
 80129de:	f241 1311 	movw	r3, #4369	; 0x1111
 80129e2:	4013      	ands	r3, r2
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d10f      	bne.n	8012a08 <HAL_TIM_OC_Stop_IT+0x120>
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	6a1a      	ldr	r2, [r3, #32]
 80129ee:	f240 4344 	movw	r3, #1092	; 0x444
 80129f2:	4013      	ands	r3, r2
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d107      	bne.n	8012a08 <HAL_TIM_OC_Stop_IT+0x120>
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012a06:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	6a1a      	ldr	r2, [r3, #32]
 8012a0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8012a12:	4013      	ands	r3, r2
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d10f      	bne.n	8012a38 <HAL_TIM_OC_Stop_IT+0x150>
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	6a1a      	ldr	r2, [r3, #32]
 8012a1e:	f240 4344 	movw	r3, #1092	; 0x444
 8012a22:	4013      	ands	r3, r2
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d107      	bne.n	8012a38 <HAL_TIM_OC_Stop_IT+0x150>
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	681a      	ldr	r2, [r3, #0]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f022 0201 	bic.w	r2, r2, #1
 8012a36:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d104      	bne.n	8012a48 <HAL_TIM_OC_Stop_IT+0x160>
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2201      	movs	r2, #1
 8012a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012a46:	e023      	b.n	8012a90 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012a48:	683b      	ldr	r3, [r7, #0]
 8012a4a:	2b04      	cmp	r3, #4
 8012a4c:	d104      	bne.n	8012a58 <HAL_TIM_OC_Stop_IT+0x170>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2201      	movs	r2, #1
 8012a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012a56:	e01b      	b.n	8012a90 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	2b08      	cmp	r3, #8
 8012a5c:	d104      	bne.n	8012a68 <HAL_TIM_OC_Stop_IT+0x180>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2201      	movs	r2, #1
 8012a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012a66:	e013      	b.n	8012a90 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	2b0c      	cmp	r3, #12
 8012a6c:	d104      	bne.n	8012a78 <HAL_TIM_OC_Stop_IT+0x190>
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2201      	movs	r2, #1
 8012a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012a76:	e00b      	b.n	8012a90 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	2b10      	cmp	r3, #16
 8012a7c:	d104      	bne.n	8012a88 <HAL_TIM_OC_Stop_IT+0x1a0>
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2201      	movs	r2, #1
 8012a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012a86:	e003      	b.n	8012a90 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8012a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	3710      	adds	r7, #16
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	40010000 	.word	0x40010000
 8012aa0:	40010400 	.word	0x40010400
 8012aa4:	40014000 	.word	0x40014000
 8012aa8:	40014400 	.word	0x40014400
 8012aac:	40014800 	.word	0x40014800

08012ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d101      	bne.n	8012ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012abe:	2301      	movs	r3, #1
 8012ac0:	e049      	b.n	8012b56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d106      	bne.n	8012adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f000 f841 	bl	8012b5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2202      	movs	r2, #2
 8012ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681a      	ldr	r2, [r3, #0]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	3304      	adds	r3, #4
 8012aec:	4619      	mov	r1, r3
 8012aee:	4610      	mov	r0, r2
 8012af0:	f000 fb70 	bl	80131d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2201      	movs	r2, #1
 8012af8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2201      	movs	r2, #1
 8012b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2201      	movs	r2, #1
 8012b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2201      	movs	r2, #1
 8012b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2201      	movs	r2, #1
 8012b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2201      	movs	r2, #1
 8012b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2201      	movs	r2, #1
 8012b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2201      	movs	r2, #1
 8012b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2201      	movs	r2, #1
 8012b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2201      	movs	r2, #1
 8012b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2201      	movs	r2, #1
 8012b48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2201      	movs	r2, #1
 8012b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3708      	adds	r7, #8
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}

08012b5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012b5e:	b480      	push	{r7}
 8012b60:	b083      	sub	sp, #12
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012b66:	bf00      	nop
 8012b68:	370c      	adds	r7, #12
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b70:	4770      	bx	lr

08012b72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012b72:	b580      	push	{r7, lr}
 8012b74:	b084      	sub	sp, #16
 8012b76:	af00      	add	r7, sp, #0
 8012b78:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	68db      	ldr	r3, [r3, #12]
 8012b80:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	691b      	ldr	r3, [r3, #16]
 8012b88:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	f003 0302 	and.w	r3, r3, #2
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d020      	beq.n	8012bd6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	f003 0302 	and.w	r3, r3, #2
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d01b      	beq.n	8012bd6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	f06f 0202 	mvn.w	r2, #2
 8012ba6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2201      	movs	r2, #1
 8012bac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	699b      	ldr	r3, [r3, #24]
 8012bb4:	f003 0303 	and.w	r3, r3, #3
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d003      	beq.n	8012bc4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	f000 faeb 	bl	8013198 <HAL_TIM_IC_CaptureCallback>
 8012bc2:	e005      	b.n	8012bd0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f7ef fe65 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f000 faee 	bl	80131ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	f003 0304 	and.w	r3, r3, #4
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d020      	beq.n	8012c22 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	f003 0304 	and.w	r3, r3, #4
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d01b      	beq.n	8012c22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	f06f 0204 	mvn.w	r2, #4
 8012bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2202      	movs	r2, #2
 8012bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	699b      	ldr	r3, [r3, #24]
 8012c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d003      	beq.n	8012c10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f000 fac5 	bl	8013198 <HAL_TIM_IC_CaptureCallback>
 8012c0e:	e005      	b.n	8012c1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f7ef fe3f 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012c16:	6878      	ldr	r0, [r7, #4]
 8012c18:	f000 fac8 	bl	80131ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	f003 0308 	and.w	r3, r3, #8
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d020      	beq.n	8012c6e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	f003 0308 	and.w	r3, r3, #8
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d01b      	beq.n	8012c6e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f06f 0208 	mvn.w	r2, #8
 8012c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2204      	movs	r2, #4
 8012c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	69db      	ldr	r3, [r3, #28]
 8012c4c:	f003 0303 	and.w	r3, r3, #3
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d003      	beq.n	8012c5c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f000 fa9f 	bl	8013198 <HAL_TIM_IC_CaptureCallback>
 8012c5a:	e005      	b.n	8012c68 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f7ef fe19 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f000 faa2 	bl	80131ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	f003 0310 	and.w	r3, r3, #16
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d020      	beq.n	8012cba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	f003 0310 	and.w	r3, r3, #16
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d01b      	beq.n	8012cba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	f06f 0210 	mvn.w	r2, #16
 8012c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2208      	movs	r2, #8
 8012c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	69db      	ldr	r3, [r3, #28]
 8012c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d003      	beq.n	8012ca8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f000 fa79 	bl	8013198 <HAL_TIM_IC_CaptureCallback>
 8012ca6:	e005      	b.n	8012cb4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f7ef fdf3 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f000 fa7c 	bl	80131ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	f003 0301 	and.w	r3, r3, #1
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d00c      	beq.n	8012cde <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	f003 0301 	and.w	r3, r3, #1
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d007      	beq.n	8012cde <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	f06f 0201 	mvn.w	r2, #1
 8012cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f7f0 fd43 	bl	8003764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d104      	bne.n	8012cf2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d00c      	beq.n	8012d0c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d007      	beq.n	8012d0c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8012d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f000 ffba 	bl	8013c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d00c      	beq.n	8012d30 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d007      	beq.n	8012d30 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f000 ffb2 	bl	8013c94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d00c      	beq.n	8012d54 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d007      	beq.n	8012d54 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f000 fa36 	bl	80131c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	f003 0320 	and.w	r3, r3, #32
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d00c      	beq.n	8012d78 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f003 0320 	and.w	r3, r3, #32
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d007      	beq.n	8012d78 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	f06f 0220 	mvn.w	r2, #32
 8012d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f000 ff7a 	bl	8013c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012d78:	bf00      	nop
 8012d7a:	3710      	adds	r7, #16
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}

08012d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b086      	sub	sp, #24
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012d96:	2b01      	cmp	r3, #1
 8012d98:	d101      	bne.n	8012d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012d9a:	2302      	movs	r3, #2
 8012d9c:	e0ff      	b.n	8012f9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2201      	movs	r2, #1
 8012da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2b14      	cmp	r3, #20
 8012daa:	f200 80f0 	bhi.w	8012f8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012dae:	a201      	add	r2, pc, #4	; (adr r2, 8012db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012db4:	08012e09 	.word	0x08012e09
 8012db8:	08012f8f 	.word	0x08012f8f
 8012dbc:	08012f8f 	.word	0x08012f8f
 8012dc0:	08012f8f 	.word	0x08012f8f
 8012dc4:	08012e49 	.word	0x08012e49
 8012dc8:	08012f8f 	.word	0x08012f8f
 8012dcc:	08012f8f 	.word	0x08012f8f
 8012dd0:	08012f8f 	.word	0x08012f8f
 8012dd4:	08012e8b 	.word	0x08012e8b
 8012dd8:	08012f8f 	.word	0x08012f8f
 8012ddc:	08012f8f 	.word	0x08012f8f
 8012de0:	08012f8f 	.word	0x08012f8f
 8012de4:	08012ecb 	.word	0x08012ecb
 8012de8:	08012f8f 	.word	0x08012f8f
 8012dec:	08012f8f 	.word	0x08012f8f
 8012df0:	08012f8f 	.word	0x08012f8f
 8012df4:	08012f0d 	.word	0x08012f0d
 8012df8:	08012f8f 	.word	0x08012f8f
 8012dfc:	08012f8f 	.word	0x08012f8f
 8012e00:	08012f8f 	.word	0x08012f8f
 8012e04:	08012f4d 	.word	0x08012f4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	68b9      	ldr	r1, [r7, #8]
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f000 fa86 	bl	8013320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	699a      	ldr	r2, [r3, #24]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	f042 0208 	orr.w	r2, r2, #8
 8012e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	699a      	ldr	r2, [r3, #24]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	f022 0204 	bic.w	r2, r2, #4
 8012e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	6999      	ldr	r1, [r3, #24]
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	691a      	ldr	r2, [r3, #16]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	430a      	orrs	r2, r1
 8012e44:	619a      	str	r2, [r3, #24]
      break;
 8012e46:	e0a5      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	68b9      	ldr	r1, [r7, #8]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f000 faf6 	bl	8013440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	699a      	ldr	r2, [r3, #24]
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	699a      	ldr	r2, [r3, #24]
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	6999      	ldr	r1, [r3, #24]
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	691b      	ldr	r3, [r3, #16]
 8012e7e:	021a      	lsls	r2, r3, #8
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	430a      	orrs	r2, r1
 8012e86:	619a      	str	r2, [r3, #24]
      break;
 8012e88:	e084      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	68b9      	ldr	r1, [r7, #8]
 8012e90:	4618      	mov	r0, r3
 8012e92:	f000 fb5f 	bl	8013554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	69da      	ldr	r2, [r3, #28]
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f042 0208 	orr.w	r2, r2, #8
 8012ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	69da      	ldr	r2, [r3, #28]
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	f022 0204 	bic.w	r2, r2, #4
 8012eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	69d9      	ldr	r1, [r3, #28]
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	691a      	ldr	r2, [r3, #16]
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	430a      	orrs	r2, r1
 8012ec6:	61da      	str	r2, [r3, #28]
      break;
 8012ec8:	e064      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	68b9      	ldr	r1, [r7, #8]
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f000 fbc7 	bl	8013664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	69da      	ldr	r2, [r3, #28]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	69da      	ldr	r2, [r3, #28]
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	69d9      	ldr	r1, [r3, #28]
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	691b      	ldr	r3, [r3, #16]
 8012f00:	021a      	lsls	r2, r3, #8
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	430a      	orrs	r2, r1
 8012f08:	61da      	str	r2, [r3, #28]
      break;
 8012f0a:	e043      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	68b9      	ldr	r1, [r7, #8]
 8012f12:	4618      	mov	r0, r3
 8012f14:	f000 fc10 	bl	8013738 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	f042 0208 	orr.w	r2, r2, #8
 8012f26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	f022 0204 	bic.w	r2, r2, #4
 8012f36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	691a      	ldr	r2, [r3, #16]
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	430a      	orrs	r2, r1
 8012f48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012f4a:	e023      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	68b9      	ldr	r1, [r7, #8]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f000 fc54 	bl	8013800 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012f66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012f76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	021a      	lsls	r2, r3, #8
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	430a      	orrs	r2, r1
 8012f8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012f8c:	e002      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012f8e:	2301      	movs	r3, #1
 8012f90:	75fb      	strb	r3, [r7, #23]
      break;
 8012f92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	2200      	movs	r2, #0
 8012f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	3718      	adds	r7, #24
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
 8012fa6:	bf00      	nop

08012fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d101      	bne.n	8012fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8012fc0:	2302      	movs	r3, #2
 8012fc2:	e0dc      	b.n	801317e <HAL_TIM_ConfigClockSource+0x1d6>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	2201      	movs	r2, #1
 8012fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2202      	movs	r2, #2
 8012fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	689b      	ldr	r3, [r3, #8]
 8012fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012fdc:	68ba      	ldr	r2, [r7, #8]
 8012fde:	4b6a      	ldr	r3, [pc, #424]	; (8013188 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012fe0:	4013      	ands	r3, r2
 8012fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012fe4:	68bb      	ldr	r3, [r7, #8]
 8012fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	68ba      	ldr	r2, [r7, #8]
 8012ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	4a64      	ldr	r2, [pc, #400]	; (801318c <HAL_TIM_ConfigClockSource+0x1e4>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	f000 80a9 	beq.w	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013000:	4a62      	ldr	r2, [pc, #392]	; (801318c <HAL_TIM_ConfigClockSource+0x1e4>)
 8013002:	4293      	cmp	r3, r2
 8013004:	f200 80ae 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013008:	4a61      	ldr	r2, [pc, #388]	; (8013190 <HAL_TIM_ConfigClockSource+0x1e8>)
 801300a:	4293      	cmp	r3, r2
 801300c:	f000 80a1 	beq.w	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013010:	4a5f      	ldr	r2, [pc, #380]	; (8013190 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013012:	4293      	cmp	r3, r2
 8013014:	f200 80a6 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013018:	4a5e      	ldr	r2, [pc, #376]	; (8013194 <HAL_TIM_ConfigClockSource+0x1ec>)
 801301a:	4293      	cmp	r3, r2
 801301c:	f000 8099 	beq.w	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013020:	4a5c      	ldr	r2, [pc, #368]	; (8013194 <HAL_TIM_ConfigClockSource+0x1ec>)
 8013022:	4293      	cmp	r3, r2
 8013024:	f200 809e 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013028:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801302c:	f000 8091 	beq.w	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013030:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013034:	f200 8096 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801303c:	f000 8089 	beq.w	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013044:	f200 808e 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801304c:	d03e      	beq.n	80130cc <HAL_TIM_ConfigClockSource+0x124>
 801304e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013052:	f200 8087 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801305a:	f000 8086 	beq.w	801316a <HAL_TIM_ConfigClockSource+0x1c2>
 801305e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013062:	d87f      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013064:	2b70      	cmp	r3, #112	; 0x70
 8013066:	d01a      	beq.n	801309e <HAL_TIM_ConfigClockSource+0xf6>
 8013068:	2b70      	cmp	r3, #112	; 0x70
 801306a:	d87b      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 801306c:	2b60      	cmp	r3, #96	; 0x60
 801306e:	d050      	beq.n	8013112 <HAL_TIM_ConfigClockSource+0x16a>
 8013070:	2b60      	cmp	r3, #96	; 0x60
 8013072:	d877      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013074:	2b50      	cmp	r3, #80	; 0x50
 8013076:	d03c      	beq.n	80130f2 <HAL_TIM_ConfigClockSource+0x14a>
 8013078:	2b50      	cmp	r3, #80	; 0x50
 801307a:	d873      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 801307c:	2b40      	cmp	r3, #64	; 0x40
 801307e:	d058      	beq.n	8013132 <HAL_TIM_ConfigClockSource+0x18a>
 8013080:	2b40      	cmp	r3, #64	; 0x40
 8013082:	d86f      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013084:	2b30      	cmp	r3, #48	; 0x30
 8013086:	d064      	beq.n	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013088:	2b30      	cmp	r3, #48	; 0x30
 801308a:	d86b      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 801308c:	2b20      	cmp	r3, #32
 801308e:	d060      	beq.n	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013090:	2b20      	cmp	r3, #32
 8013092:	d867      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013094:	2b00      	cmp	r3, #0
 8013096:	d05c      	beq.n	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013098:	2b10      	cmp	r3, #16
 801309a:	d05a      	beq.n	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 801309c:	e062      	b.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6818      	ldr	r0, [r3, #0]
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	6899      	ldr	r1, [r3, #8]
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	685a      	ldr	r2, [r3, #4]
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	68db      	ldr	r3, [r3, #12]
 80130ae:	f000 fc8b 	bl	80139c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	689b      	ldr	r3, [r3, #8]
 80130b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80130c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	68ba      	ldr	r2, [r7, #8]
 80130c8:	609a      	str	r2, [r3, #8]
      break;
 80130ca:	e04f      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	6818      	ldr	r0, [r3, #0]
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	6899      	ldr	r1, [r3, #8]
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	685a      	ldr	r2, [r3, #4]
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	f000 fc74 	bl	80139c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	689a      	ldr	r2, [r3, #8]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80130ee:	609a      	str	r2, [r3, #8]
      break;
 80130f0:	e03c      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6818      	ldr	r0, [r3, #0]
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	6859      	ldr	r1, [r3, #4]
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	461a      	mov	r2, r3
 8013100:	f000 fbe4 	bl	80138cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	2150      	movs	r1, #80	; 0x50
 801310a:	4618      	mov	r0, r3
 801310c:	f000 fc3e 	bl	801398c <TIM_ITRx_SetConfig>
      break;
 8013110:	e02c      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6818      	ldr	r0, [r3, #0]
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	6859      	ldr	r1, [r3, #4]
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	68db      	ldr	r3, [r3, #12]
 801311e:	461a      	mov	r2, r3
 8013120:	f000 fc03 	bl	801392a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	2160      	movs	r1, #96	; 0x60
 801312a:	4618      	mov	r0, r3
 801312c:	f000 fc2e 	bl	801398c <TIM_ITRx_SetConfig>
      break;
 8013130:	e01c      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	6818      	ldr	r0, [r3, #0]
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	6859      	ldr	r1, [r3, #4]
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	68db      	ldr	r3, [r3, #12]
 801313e:	461a      	mov	r2, r3
 8013140:	f000 fbc4 	bl	80138cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	2140      	movs	r1, #64	; 0x40
 801314a:	4618      	mov	r0, r3
 801314c:	f000 fc1e 	bl	801398c <TIM_ITRx_SetConfig>
      break;
 8013150:	e00c      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681a      	ldr	r2, [r3, #0]
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	4619      	mov	r1, r3
 801315c:	4610      	mov	r0, r2
 801315e:	f000 fc15 	bl	801398c <TIM_ITRx_SetConfig>
      break;
 8013162:	e003      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013164:	2301      	movs	r3, #1
 8013166:	73fb      	strb	r3, [r7, #15]
      break;
 8013168:	e000      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801316a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2201      	movs	r2, #1
 8013170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2200      	movs	r2, #0
 8013178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801317c:	7bfb      	ldrb	r3, [r7, #15]
}
 801317e:	4618      	mov	r0, r3
 8013180:	3710      	adds	r7, #16
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	ffceff88 	.word	0xffceff88
 801318c:	00100040 	.word	0x00100040
 8013190:	00100030 	.word	0x00100030
 8013194:	00100020 	.word	0x00100020

08013198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013198:	b480      	push	{r7}
 801319a:	b083      	sub	sp, #12
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80131a0:	bf00      	nop
 80131a2:	370c      	adds	r7, #12
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr

080131ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80131ac:	b480      	push	{r7}
 80131ae:	b083      	sub	sp, #12
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80131b4:	bf00      	nop
 80131b6:	370c      	adds	r7, #12
 80131b8:	46bd      	mov	sp, r7
 80131ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131be:	4770      	bx	lr

080131c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80131c0:	b480      	push	{r7}
 80131c2:	b083      	sub	sp, #12
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80131c8:	bf00      	nop
 80131ca:	370c      	adds	r7, #12
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr

080131d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80131d4:	b480      	push	{r7}
 80131d6:	b085      	sub	sp, #20
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	4a46      	ldr	r2, [pc, #280]	; (8013300 <TIM_Base_SetConfig+0x12c>)
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d013      	beq.n	8013214 <TIM_Base_SetConfig+0x40>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80131f2:	d00f      	beq.n	8013214 <TIM_Base_SetConfig+0x40>
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	4a43      	ldr	r2, [pc, #268]	; (8013304 <TIM_Base_SetConfig+0x130>)
 80131f8:	4293      	cmp	r3, r2
 80131fa:	d00b      	beq.n	8013214 <TIM_Base_SetConfig+0x40>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	4a42      	ldr	r2, [pc, #264]	; (8013308 <TIM_Base_SetConfig+0x134>)
 8013200:	4293      	cmp	r3, r2
 8013202:	d007      	beq.n	8013214 <TIM_Base_SetConfig+0x40>
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	4a41      	ldr	r2, [pc, #260]	; (801330c <TIM_Base_SetConfig+0x138>)
 8013208:	4293      	cmp	r3, r2
 801320a:	d003      	beq.n	8013214 <TIM_Base_SetConfig+0x40>
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	4a40      	ldr	r2, [pc, #256]	; (8013310 <TIM_Base_SetConfig+0x13c>)
 8013210:	4293      	cmp	r3, r2
 8013212:	d108      	bne.n	8013226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801321a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	685b      	ldr	r3, [r3, #4]
 8013220:	68fa      	ldr	r2, [r7, #12]
 8013222:	4313      	orrs	r3, r2
 8013224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	4a35      	ldr	r2, [pc, #212]	; (8013300 <TIM_Base_SetConfig+0x12c>)
 801322a:	4293      	cmp	r3, r2
 801322c:	d01f      	beq.n	801326e <TIM_Base_SetConfig+0x9a>
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013234:	d01b      	beq.n	801326e <TIM_Base_SetConfig+0x9a>
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	4a32      	ldr	r2, [pc, #200]	; (8013304 <TIM_Base_SetConfig+0x130>)
 801323a:	4293      	cmp	r3, r2
 801323c:	d017      	beq.n	801326e <TIM_Base_SetConfig+0x9a>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	4a31      	ldr	r2, [pc, #196]	; (8013308 <TIM_Base_SetConfig+0x134>)
 8013242:	4293      	cmp	r3, r2
 8013244:	d013      	beq.n	801326e <TIM_Base_SetConfig+0x9a>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	4a30      	ldr	r2, [pc, #192]	; (801330c <TIM_Base_SetConfig+0x138>)
 801324a:	4293      	cmp	r3, r2
 801324c:	d00f      	beq.n	801326e <TIM_Base_SetConfig+0x9a>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	4a2f      	ldr	r2, [pc, #188]	; (8013310 <TIM_Base_SetConfig+0x13c>)
 8013252:	4293      	cmp	r3, r2
 8013254:	d00b      	beq.n	801326e <TIM_Base_SetConfig+0x9a>
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4a2e      	ldr	r2, [pc, #184]	; (8013314 <TIM_Base_SetConfig+0x140>)
 801325a:	4293      	cmp	r3, r2
 801325c:	d007      	beq.n	801326e <TIM_Base_SetConfig+0x9a>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	4a2d      	ldr	r2, [pc, #180]	; (8013318 <TIM_Base_SetConfig+0x144>)
 8013262:	4293      	cmp	r3, r2
 8013264:	d003      	beq.n	801326e <TIM_Base_SetConfig+0x9a>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	4a2c      	ldr	r2, [pc, #176]	; (801331c <TIM_Base_SetConfig+0x148>)
 801326a:	4293      	cmp	r3, r2
 801326c:	d108      	bne.n	8013280 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	68db      	ldr	r3, [r3, #12]
 801327a:	68fa      	ldr	r2, [r7, #12]
 801327c:	4313      	orrs	r3, r2
 801327e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	695b      	ldr	r3, [r3, #20]
 801328a:	4313      	orrs	r3, r2
 801328c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	68fa      	ldr	r2, [r7, #12]
 8013292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	689a      	ldr	r2, [r3, #8]
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	681a      	ldr	r2, [r3, #0]
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	4a16      	ldr	r2, [pc, #88]	; (8013300 <TIM_Base_SetConfig+0x12c>)
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d00f      	beq.n	80132cc <TIM_Base_SetConfig+0xf8>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	4a18      	ldr	r2, [pc, #96]	; (8013310 <TIM_Base_SetConfig+0x13c>)
 80132b0:	4293      	cmp	r3, r2
 80132b2:	d00b      	beq.n	80132cc <TIM_Base_SetConfig+0xf8>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	4a17      	ldr	r2, [pc, #92]	; (8013314 <TIM_Base_SetConfig+0x140>)
 80132b8:	4293      	cmp	r3, r2
 80132ba:	d007      	beq.n	80132cc <TIM_Base_SetConfig+0xf8>
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	4a16      	ldr	r2, [pc, #88]	; (8013318 <TIM_Base_SetConfig+0x144>)
 80132c0:	4293      	cmp	r3, r2
 80132c2:	d003      	beq.n	80132cc <TIM_Base_SetConfig+0xf8>
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	4a15      	ldr	r2, [pc, #84]	; (801331c <TIM_Base_SetConfig+0x148>)
 80132c8:	4293      	cmp	r3, r2
 80132ca:	d103      	bne.n	80132d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	691a      	ldr	r2, [r3, #16]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2201      	movs	r2, #1
 80132d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	691b      	ldr	r3, [r3, #16]
 80132de:	f003 0301 	and.w	r3, r3, #1
 80132e2:	2b01      	cmp	r3, #1
 80132e4:	d105      	bne.n	80132f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	691b      	ldr	r3, [r3, #16]
 80132ea:	f023 0201 	bic.w	r2, r3, #1
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	611a      	str	r2, [r3, #16]
  }
}
 80132f2:	bf00      	nop
 80132f4:	3714      	adds	r7, #20
 80132f6:	46bd      	mov	sp, r7
 80132f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fc:	4770      	bx	lr
 80132fe:	bf00      	nop
 8013300:	40010000 	.word	0x40010000
 8013304:	40000400 	.word	0x40000400
 8013308:	40000800 	.word	0x40000800
 801330c:	40000c00 	.word	0x40000c00
 8013310:	40010400 	.word	0x40010400
 8013314:	40014000 	.word	0x40014000
 8013318:	40014400 	.word	0x40014400
 801331c:	40014800 	.word	0x40014800

08013320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013320:	b480      	push	{r7}
 8013322:	b087      	sub	sp, #28
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6a1b      	ldr	r3, [r3, #32]
 801332e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6a1b      	ldr	r3, [r3, #32]
 8013334:	f023 0201 	bic.w	r2, r3, #1
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	685b      	ldr	r3, [r3, #4]
 8013340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	699b      	ldr	r3, [r3, #24]
 8013346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013348:	68fa      	ldr	r2, [r7, #12]
 801334a:	4b37      	ldr	r3, [pc, #220]	; (8013428 <TIM_OC1_SetConfig+0x108>)
 801334c:	4013      	ands	r3, r2
 801334e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f023 0303 	bic.w	r3, r3, #3
 8013356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	68fa      	ldr	r2, [r7, #12]
 801335e:	4313      	orrs	r3, r2
 8013360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013362:	697b      	ldr	r3, [r7, #20]
 8013364:	f023 0302 	bic.w	r3, r3, #2
 8013368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	689b      	ldr	r3, [r3, #8]
 801336e:	697a      	ldr	r2, [r7, #20]
 8013370:	4313      	orrs	r3, r2
 8013372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	4a2d      	ldr	r2, [pc, #180]	; (801342c <TIM_OC1_SetConfig+0x10c>)
 8013378:	4293      	cmp	r3, r2
 801337a:	d00f      	beq.n	801339c <TIM_OC1_SetConfig+0x7c>
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	4a2c      	ldr	r2, [pc, #176]	; (8013430 <TIM_OC1_SetConfig+0x110>)
 8013380:	4293      	cmp	r3, r2
 8013382:	d00b      	beq.n	801339c <TIM_OC1_SetConfig+0x7c>
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	4a2b      	ldr	r2, [pc, #172]	; (8013434 <TIM_OC1_SetConfig+0x114>)
 8013388:	4293      	cmp	r3, r2
 801338a:	d007      	beq.n	801339c <TIM_OC1_SetConfig+0x7c>
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	4a2a      	ldr	r2, [pc, #168]	; (8013438 <TIM_OC1_SetConfig+0x118>)
 8013390:	4293      	cmp	r3, r2
 8013392:	d003      	beq.n	801339c <TIM_OC1_SetConfig+0x7c>
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	4a29      	ldr	r2, [pc, #164]	; (801343c <TIM_OC1_SetConfig+0x11c>)
 8013398:	4293      	cmp	r3, r2
 801339a:	d10c      	bne.n	80133b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	f023 0308 	bic.w	r3, r3, #8
 80133a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	68db      	ldr	r3, [r3, #12]
 80133a8:	697a      	ldr	r2, [r7, #20]
 80133aa:	4313      	orrs	r3, r2
 80133ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	f023 0304 	bic.w	r3, r3, #4
 80133b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	4a1c      	ldr	r2, [pc, #112]	; (801342c <TIM_OC1_SetConfig+0x10c>)
 80133ba:	4293      	cmp	r3, r2
 80133bc:	d00f      	beq.n	80133de <TIM_OC1_SetConfig+0xbe>
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	4a1b      	ldr	r2, [pc, #108]	; (8013430 <TIM_OC1_SetConfig+0x110>)
 80133c2:	4293      	cmp	r3, r2
 80133c4:	d00b      	beq.n	80133de <TIM_OC1_SetConfig+0xbe>
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	4a1a      	ldr	r2, [pc, #104]	; (8013434 <TIM_OC1_SetConfig+0x114>)
 80133ca:	4293      	cmp	r3, r2
 80133cc:	d007      	beq.n	80133de <TIM_OC1_SetConfig+0xbe>
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	4a19      	ldr	r2, [pc, #100]	; (8013438 <TIM_OC1_SetConfig+0x118>)
 80133d2:	4293      	cmp	r3, r2
 80133d4:	d003      	beq.n	80133de <TIM_OC1_SetConfig+0xbe>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	4a18      	ldr	r2, [pc, #96]	; (801343c <TIM_OC1_SetConfig+0x11c>)
 80133da:	4293      	cmp	r3, r2
 80133dc:	d111      	bne.n	8013402 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80133e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80133ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	695b      	ldr	r3, [r3, #20]
 80133f2:	693a      	ldr	r2, [r7, #16]
 80133f4:	4313      	orrs	r3, r2
 80133f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	699b      	ldr	r3, [r3, #24]
 80133fc:	693a      	ldr	r2, [r7, #16]
 80133fe:	4313      	orrs	r3, r2
 8013400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	693a      	ldr	r2, [r7, #16]
 8013406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	68fa      	ldr	r2, [r7, #12]
 801340c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	685a      	ldr	r2, [r3, #4]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	697a      	ldr	r2, [r7, #20]
 801341a:	621a      	str	r2, [r3, #32]
}
 801341c:	bf00      	nop
 801341e:	371c      	adds	r7, #28
 8013420:	46bd      	mov	sp, r7
 8013422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013426:	4770      	bx	lr
 8013428:	fffeff8f 	.word	0xfffeff8f
 801342c:	40010000 	.word	0x40010000
 8013430:	40010400 	.word	0x40010400
 8013434:	40014000 	.word	0x40014000
 8013438:	40014400 	.word	0x40014400
 801343c:	40014800 	.word	0x40014800

08013440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013440:	b480      	push	{r7}
 8013442:	b087      	sub	sp, #28
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6a1b      	ldr	r3, [r3, #32]
 801344e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6a1b      	ldr	r3, [r3, #32]
 8013454:	f023 0210 	bic.w	r2, r3, #16
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	685b      	ldr	r3, [r3, #4]
 8013460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	699b      	ldr	r3, [r3, #24]
 8013466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013468:	68fa      	ldr	r2, [r7, #12]
 801346a:	4b34      	ldr	r3, [pc, #208]	; (801353c <TIM_OC2_SetConfig+0xfc>)
 801346c:	4013      	ands	r3, r2
 801346e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	021b      	lsls	r3, r3, #8
 801347e:	68fa      	ldr	r2, [r7, #12]
 8013480:	4313      	orrs	r3, r2
 8013482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	f023 0320 	bic.w	r3, r3, #32
 801348a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	689b      	ldr	r3, [r3, #8]
 8013490:	011b      	lsls	r3, r3, #4
 8013492:	697a      	ldr	r2, [r7, #20]
 8013494:	4313      	orrs	r3, r2
 8013496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	4a29      	ldr	r2, [pc, #164]	; (8013540 <TIM_OC2_SetConfig+0x100>)
 801349c:	4293      	cmp	r3, r2
 801349e:	d003      	beq.n	80134a8 <TIM_OC2_SetConfig+0x68>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	4a28      	ldr	r2, [pc, #160]	; (8013544 <TIM_OC2_SetConfig+0x104>)
 80134a4:	4293      	cmp	r3, r2
 80134a6:	d10d      	bne.n	80134c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80134ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	68db      	ldr	r3, [r3, #12]
 80134b4:	011b      	lsls	r3, r3, #4
 80134b6:	697a      	ldr	r2, [r7, #20]
 80134b8:	4313      	orrs	r3, r2
 80134ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80134bc:	697b      	ldr	r3, [r7, #20]
 80134be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80134c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	4a1e      	ldr	r2, [pc, #120]	; (8013540 <TIM_OC2_SetConfig+0x100>)
 80134c8:	4293      	cmp	r3, r2
 80134ca:	d00f      	beq.n	80134ec <TIM_OC2_SetConfig+0xac>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	4a1d      	ldr	r2, [pc, #116]	; (8013544 <TIM_OC2_SetConfig+0x104>)
 80134d0:	4293      	cmp	r3, r2
 80134d2:	d00b      	beq.n	80134ec <TIM_OC2_SetConfig+0xac>
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	4a1c      	ldr	r2, [pc, #112]	; (8013548 <TIM_OC2_SetConfig+0x108>)
 80134d8:	4293      	cmp	r3, r2
 80134da:	d007      	beq.n	80134ec <TIM_OC2_SetConfig+0xac>
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	4a1b      	ldr	r2, [pc, #108]	; (801354c <TIM_OC2_SetConfig+0x10c>)
 80134e0:	4293      	cmp	r3, r2
 80134e2:	d003      	beq.n	80134ec <TIM_OC2_SetConfig+0xac>
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	4a1a      	ldr	r2, [pc, #104]	; (8013550 <TIM_OC2_SetConfig+0x110>)
 80134e8:	4293      	cmp	r3, r2
 80134ea:	d113      	bne.n	8013514 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80134f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80134fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	695b      	ldr	r3, [r3, #20]
 8013500:	009b      	lsls	r3, r3, #2
 8013502:	693a      	ldr	r2, [r7, #16]
 8013504:	4313      	orrs	r3, r2
 8013506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	699b      	ldr	r3, [r3, #24]
 801350c:	009b      	lsls	r3, r3, #2
 801350e:	693a      	ldr	r2, [r7, #16]
 8013510:	4313      	orrs	r3, r2
 8013512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	693a      	ldr	r2, [r7, #16]
 8013518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	68fa      	ldr	r2, [r7, #12]
 801351e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	685a      	ldr	r2, [r3, #4]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	697a      	ldr	r2, [r7, #20]
 801352c:	621a      	str	r2, [r3, #32]
}
 801352e:	bf00      	nop
 8013530:	371c      	adds	r7, #28
 8013532:	46bd      	mov	sp, r7
 8013534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013538:	4770      	bx	lr
 801353a:	bf00      	nop
 801353c:	feff8fff 	.word	0xfeff8fff
 8013540:	40010000 	.word	0x40010000
 8013544:	40010400 	.word	0x40010400
 8013548:	40014000 	.word	0x40014000
 801354c:	40014400 	.word	0x40014400
 8013550:	40014800 	.word	0x40014800

08013554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013554:	b480      	push	{r7}
 8013556:	b087      	sub	sp, #28
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6a1b      	ldr	r3, [r3, #32]
 8013562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6a1b      	ldr	r3, [r3, #32]
 8013568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	685b      	ldr	r3, [r3, #4]
 8013574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	69db      	ldr	r3, [r3, #28]
 801357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801357c:	68fa      	ldr	r2, [r7, #12]
 801357e:	4b33      	ldr	r3, [pc, #204]	; (801364c <TIM_OC3_SetConfig+0xf8>)
 8013580:	4013      	ands	r3, r2
 8013582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	f023 0303 	bic.w	r3, r3, #3
 801358a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	68fa      	ldr	r2, [r7, #12]
 8013592:	4313      	orrs	r3, r2
 8013594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801359c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	689b      	ldr	r3, [r3, #8]
 80135a2:	021b      	lsls	r3, r3, #8
 80135a4:	697a      	ldr	r2, [r7, #20]
 80135a6:	4313      	orrs	r3, r2
 80135a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	4a28      	ldr	r2, [pc, #160]	; (8013650 <TIM_OC3_SetConfig+0xfc>)
 80135ae:	4293      	cmp	r3, r2
 80135b0:	d003      	beq.n	80135ba <TIM_OC3_SetConfig+0x66>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4a27      	ldr	r2, [pc, #156]	; (8013654 <TIM_OC3_SetConfig+0x100>)
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d10d      	bne.n	80135d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80135c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	68db      	ldr	r3, [r3, #12]
 80135c6:	021b      	lsls	r3, r3, #8
 80135c8:	697a      	ldr	r2, [r7, #20]
 80135ca:	4313      	orrs	r3, r2
 80135cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80135d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	4a1d      	ldr	r2, [pc, #116]	; (8013650 <TIM_OC3_SetConfig+0xfc>)
 80135da:	4293      	cmp	r3, r2
 80135dc:	d00f      	beq.n	80135fe <TIM_OC3_SetConfig+0xaa>
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	4a1c      	ldr	r2, [pc, #112]	; (8013654 <TIM_OC3_SetConfig+0x100>)
 80135e2:	4293      	cmp	r3, r2
 80135e4:	d00b      	beq.n	80135fe <TIM_OC3_SetConfig+0xaa>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	4a1b      	ldr	r2, [pc, #108]	; (8013658 <TIM_OC3_SetConfig+0x104>)
 80135ea:	4293      	cmp	r3, r2
 80135ec:	d007      	beq.n	80135fe <TIM_OC3_SetConfig+0xaa>
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	4a1a      	ldr	r2, [pc, #104]	; (801365c <TIM_OC3_SetConfig+0x108>)
 80135f2:	4293      	cmp	r3, r2
 80135f4:	d003      	beq.n	80135fe <TIM_OC3_SetConfig+0xaa>
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	4a19      	ldr	r2, [pc, #100]	; (8013660 <TIM_OC3_SetConfig+0x10c>)
 80135fa:	4293      	cmp	r3, r2
 80135fc:	d113      	bne.n	8013626 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801360c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	695b      	ldr	r3, [r3, #20]
 8013612:	011b      	lsls	r3, r3, #4
 8013614:	693a      	ldr	r2, [r7, #16]
 8013616:	4313      	orrs	r3, r2
 8013618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	699b      	ldr	r3, [r3, #24]
 801361e:	011b      	lsls	r3, r3, #4
 8013620:	693a      	ldr	r2, [r7, #16]
 8013622:	4313      	orrs	r3, r2
 8013624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	693a      	ldr	r2, [r7, #16]
 801362a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	68fa      	ldr	r2, [r7, #12]
 8013630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	685a      	ldr	r2, [r3, #4]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	697a      	ldr	r2, [r7, #20]
 801363e:	621a      	str	r2, [r3, #32]
}
 8013640:	bf00      	nop
 8013642:	371c      	adds	r7, #28
 8013644:	46bd      	mov	sp, r7
 8013646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364a:	4770      	bx	lr
 801364c:	fffeff8f 	.word	0xfffeff8f
 8013650:	40010000 	.word	0x40010000
 8013654:	40010400 	.word	0x40010400
 8013658:	40014000 	.word	0x40014000
 801365c:	40014400 	.word	0x40014400
 8013660:	40014800 	.word	0x40014800

08013664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013664:	b480      	push	{r7}
 8013666:	b087      	sub	sp, #28
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6a1b      	ldr	r3, [r3, #32]
 8013672:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	6a1b      	ldr	r3, [r3, #32]
 8013678:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	69db      	ldr	r3, [r3, #28]
 801368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801368c:	68fa      	ldr	r2, [r7, #12]
 801368e:	4b24      	ldr	r3, [pc, #144]	; (8013720 <TIM_OC4_SetConfig+0xbc>)
 8013690:	4013      	ands	r3, r2
 8013692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801369a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	021b      	lsls	r3, r3, #8
 80136a2:	68fa      	ldr	r2, [r7, #12]
 80136a4:	4313      	orrs	r3, r2
 80136a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80136a8:	693b      	ldr	r3, [r7, #16]
 80136aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80136ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	689b      	ldr	r3, [r3, #8]
 80136b4:	031b      	lsls	r3, r3, #12
 80136b6:	693a      	ldr	r2, [r7, #16]
 80136b8:	4313      	orrs	r3, r2
 80136ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	4a19      	ldr	r2, [pc, #100]	; (8013724 <TIM_OC4_SetConfig+0xc0>)
 80136c0:	4293      	cmp	r3, r2
 80136c2:	d00f      	beq.n	80136e4 <TIM_OC4_SetConfig+0x80>
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	4a18      	ldr	r2, [pc, #96]	; (8013728 <TIM_OC4_SetConfig+0xc4>)
 80136c8:	4293      	cmp	r3, r2
 80136ca:	d00b      	beq.n	80136e4 <TIM_OC4_SetConfig+0x80>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	4a17      	ldr	r2, [pc, #92]	; (801372c <TIM_OC4_SetConfig+0xc8>)
 80136d0:	4293      	cmp	r3, r2
 80136d2:	d007      	beq.n	80136e4 <TIM_OC4_SetConfig+0x80>
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	4a16      	ldr	r2, [pc, #88]	; (8013730 <TIM_OC4_SetConfig+0xcc>)
 80136d8:	4293      	cmp	r3, r2
 80136da:	d003      	beq.n	80136e4 <TIM_OC4_SetConfig+0x80>
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	4a15      	ldr	r2, [pc, #84]	; (8013734 <TIM_OC4_SetConfig+0xd0>)
 80136e0:	4293      	cmp	r3, r2
 80136e2:	d109      	bne.n	80136f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80136ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	695b      	ldr	r3, [r3, #20]
 80136f0:	019b      	lsls	r3, r3, #6
 80136f2:	697a      	ldr	r2, [r7, #20]
 80136f4:	4313      	orrs	r3, r2
 80136f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	697a      	ldr	r2, [r7, #20]
 80136fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	68fa      	ldr	r2, [r7, #12]
 8013702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	685a      	ldr	r2, [r3, #4]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	693a      	ldr	r2, [r7, #16]
 8013710:	621a      	str	r2, [r3, #32]
}
 8013712:	bf00      	nop
 8013714:	371c      	adds	r7, #28
 8013716:	46bd      	mov	sp, r7
 8013718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371c:	4770      	bx	lr
 801371e:	bf00      	nop
 8013720:	feff8fff 	.word	0xfeff8fff
 8013724:	40010000 	.word	0x40010000
 8013728:	40010400 	.word	0x40010400
 801372c:	40014000 	.word	0x40014000
 8013730:	40014400 	.word	0x40014400
 8013734:	40014800 	.word	0x40014800

08013738 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013738:	b480      	push	{r7}
 801373a:	b087      	sub	sp, #28
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6a1b      	ldr	r3, [r3, #32]
 8013746:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	6a1b      	ldr	r3, [r3, #32]
 801374c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013760:	68fa      	ldr	r2, [r7, #12]
 8013762:	4b21      	ldr	r3, [pc, #132]	; (80137e8 <TIM_OC5_SetConfig+0xb0>)
 8013764:	4013      	ands	r3, r2
 8013766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	68fa      	ldr	r2, [r7, #12]
 801376e:	4313      	orrs	r3, r2
 8013770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013778:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	689b      	ldr	r3, [r3, #8]
 801377e:	041b      	lsls	r3, r3, #16
 8013780:	693a      	ldr	r2, [r7, #16]
 8013782:	4313      	orrs	r3, r2
 8013784:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	4a18      	ldr	r2, [pc, #96]	; (80137ec <TIM_OC5_SetConfig+0xb4>)
 801378a:	4293      	cmp	r3, r2
 801378c:	d00f      	beq.n	80137ae <TIM_OC5_SetConfig+0x76>
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	4a17      	ldr	r2, [pc, #92]	; (80137f0 <TIM_OC5_SetConfig+0xb8>)
 8013792:	4293      	cmp	r3, r2
 8013794:	d00b      	beq.n	80137ae <TIM_OC5_SetConfig+0x76>
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	4a16      	ldr	r2, [pc, #88]	; (80137f4 <TIM_OC5_SetConfig+0xbc>)
 801379a:	4293      	cmp	r3, r2
 801379c:	d007      	beq.n	80137ae <TIM_OC5_SetConfig+0x76>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	4a15      	ldr	r2, [pc, #84]	; (80137f8 <TIM_OC5_SetConfig+0xc0>)
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d003      	beq.n	80137ae <TIM_OC5_SetConfig+0x76>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	4a14      	ldr	r2, [pc, #80]	; (80137fc <TIM_OC5_SetConfig+0xc4>)
 80137aa:	4293      	cmp	r3, r2
 80137ac:	d109      	bne.n	80137c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80137b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	695b      	ldr	r3, [r3, #20]
 80137ba:	021b      	lsls	r3, r3, #8
 80137bc:	697a      	ldr	r2, [r7, #20]
 80137be:	4313      	orrs	r3, r2
 80137c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	697a      	ldr	r2, [r7, #20]
 80137c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	68fa      	ldr	r2, [r7, #12]
 80137cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	685a      	ldr	r2, [r3, #4]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	693a      	ldr	r2, [r7, #16]
 80137da:	621a      	str	r2, [r3, #32]
}
 80137dc:	bf00      	nop
 80137de:	371c      	adds	r7, #28
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr
 80137e8:	fffeff8f 	.word	0xfffeff8f
 80137ec:	40010000 	.word	0x40010000
 80137f0:	40010400 	.word	0x40010400
 80137f4:	40014000 	.word	0x40014000
 80137f8:	40014400 	.word	0x40014400
 80137fc:	40014800 	.word	0x40014800

08013800 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013800:	b480      	push	{r7}
 8013802:	b087      	sub	sp, #28
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	6a1b      	ldr	r3, [r3, #32]
 801380e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6a1b      	ldr	r3, [r3, #32]
 8013814:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	685b      	ldr	r3, [r3, #4]
 8013820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013828:	68fa      	ldr	r2, [r7, #12]
 801382a:	4b22      	ldr	r3, [pc, #136]	; (80138b4 <TIM_OC6_SetConfig+0xb4>)
 801382c:	4013      	ands	r3, r2
 801382e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	021b      	lsls	r3, r3, #8
 8013836:	68fa      	ldr	r2, [r7, #12]
 8013838:	4313      	orrs	r3, r2
 801383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	689b      	ldr	r3, [r3, #8]
 8013848:	051b      	lsls	r3, r3, #20
 801384a:	693a      	ldr	r2, [r7, #16]
 801384c:	4313      	orrs	r3, r2
 801384e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	4a19      	ldr	r2, [pc, #100]	; (80138b8 <TIM_OC6_SetConfig+0xb8>)
 8013854:	4293      	cmp	r3, r2
 8013856:	d00f      	beq.n	8013878 <TIM_OC6_SetConfig+0x78>
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	4a18      	ldr	r2, [pc, #96]	; (80138bc <TIM_OC6_SetConfig+0xbc>)
 801385c:	4293      	cmp	r3, r2
 801385e:	d00b      	beq.n	8013878 <TIM_OC6_SetConfig+0x78>
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	4a17      	ldr	r2, [pc, #92]	; (80138c0 <TIM_OC6_SetConfig+0xc0>)
 8013864:	4293      	cmp	r3, r2
 8013866:	d007      	beq.n	8013878 <TIM_OC6_SetConfig+0x78>
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	4a16      	ldr	r2, [pc, #88]	; (80138c4 <TIM_OC6_SetConfig+0xc4>)
 801386c:	4293      	cmp	r3, r2
 801386e:	d003      	beq.n	8013878 <TIM_OC6_SetConfig+0x78>
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	4a15      	ldr	r2, [pc, #84]	; (80138c8 <TIM_OC6_SetConfig+0xc8>)
 8013874:	4293      	cmp	r3, r2
 8013876:	d109      	bne.n	801388c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801387e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	695b      	ldr	r3, [r3, #20]
 8013884:	029b      	lsls	r3, r3, #10
 8013886:	697a      	ldr	r2, [r7, #20]
 8013888:	4313      	orrs	r3, r2
 801388a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	697a      	ldr	r2, [r7, #20]
 8013890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	68fa      	ldr	r2, [r7, #12]
 8013896:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	685a      	ldr	r2, [r3, #4]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	693a      	ldr	r2, [r7, #16]
 80138a4:	621a      	str	r2, [r3, #32]
}
 80138a6:	bf00      	nop
 80138a8:	371c      	adds	r7, #28
 80138aa:	46bd      	mov	sp, r7
 80138ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b0:	4770      	bx	lr
 80138b2:	bf00      	nop
 80138b4:	feff8fff 	.word	0xfeff8fff
 80138b8:	40010000 	.word	0x40010000
 80138bc:	40010400 	.word	0x40010400
 80138c0:	40014000 	.word	0x40014000
 80138c4:	40014400 	.word	0x40014400
 80138c8:	40014800 	.word	0x40014800

080138cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80138cc:	b480      	push	{r7}
 80138ce:	b087      	sub	sp, #28
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	6a1b      	ldr	r3, [r3, #32]
 80138dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	6a1b      	ldr	r3, [r3, #32]
 80138e2:	f023 0201 	bic.w	r2, r3, #1
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	699b      	ldr	r3, [r3, #24]
 80138ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80138f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	011b      	lsls	r3, r3, #4
 80138fc:	693a      	ldr	r2, [r7, #16]
 80138fe:	4313      	orrs	r3, r2
 8013900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	f023 030a 	bic.w	r3, r3, #10
 8013908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801390a:	697a      	ldr	r2, [r7, #20]
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	4313      	orrs	r3, r2
 8013910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	693a      	ldr	r2, [r7, #16]
 8013916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	697a      	ldr	r2, [r7, #20]
 801391c:	621a      	str	r2, [r3, #32]
}
 801391e:	bf00      	nop
 8013920:	371c      	adds	r7, #28
 8013922:	46bd      	mov	sp, r7
 8013924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013928:	4770      	bx	lr

0801392a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801392a:	b480      	push	{r7}
 801392c:	b087      	sub	sp, #28
 801392e:	af00      	add	r7, sp, #0
 8013930:	60f8      	str	r0, [r7, #12]
 8013932:	60b9      	str	r1, [r7, #8]
 8013934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	6a1b      	ldr	r3, [r3, #32]
 801393a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	6a1b      	ldr	r3, [r3, #32]
 8013940:	f023 0210 	bic.w	r2, r3, #16
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	699b      	ldr	r3, [r3, #24]
 801394c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	031b      	lsls	r3, r3, #12
 801395a:	693a      	ldr	r2, [r7, #16]
 801395c:	4313      	orrs	r3, r2
 801395e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013966:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	011b      	lsls	r3, r3, #4
 801396c:	697a      	ldr	r2, [r7, #20]
 801396e:	4313      	orrs	r3, r2
 8013970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	693a      	ldr	r2, [r7, #16]
 8013976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	697a      	ldr	r2, [r7, #20]
 801397c:	621a      	str	r2, [r3, #32]
}
 801397e:	bf00      	nop
 8013980:	371c      	adds	r7, #28
 8013982:	46bd      	mov	sp, r7
 8013984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013988:	4770      	bx	lr
	...

0801398c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801398c:	b480      	push	{r7}
 801398e:	b085      	sub	sp, #20
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	689b      	ldr	r3, [r3, #8]
 801399a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801399c:	68fa      	ldr	r2, [r7, #12]
 801399e:	4b09      	ldr	r3, [pc, #36]	; (80139c4 <TIM_ITRx_SetConfig+0x38>)
 80139a0:	4013      	ands	r3, r2
 80139a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80139a4:	683a      	ldr	r2, [r7, #0]
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	4313      	orrs	r3, r2
 80139aa:	f043 0307 	orr.w	r3, r3, #7
 80139ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	68fa      	ldr	r2, [r7, #12]
 80139b4:	609a      	str	r2, [r3, #8]
}
 80139b6:	bf00      	nop
 80139b8:	3714      	adds	r7, #20
 80139ba:	46bd      	mov	sp, r7
 80139bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop
 80139c4:	ffcfff8f 	.word	0xffcfff8f

080139c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80139c8:	b480      	push	{r7}
 80139ca:	b087      	sub	sp, #28
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	60b9      	str	r1, [r7, #8]
 80139d2:	607a      	str	r2, [r7, #4]
 80139d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	689b      	ldr	r3, [r3, #8]
 80139da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80139e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	021a      	lsls	r2, r3, #8
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	431a      	orrs	r2, r3
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	4313      	orrs	r3, r2
 80139f0:	697a      	ldr	r2, [r7, #20]
 80139f2:	4313      	orrs	r3, r2
 80139f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	697a      	ldr	r2, [r7, #20]
 80139fa:	609a      	str	r2, [r3, #8]
}
 80139fc:	bf00      	nop
 80139fe:	371c      	adds	r7, #28
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr

08013a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b087      	sub	sp, #28
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	60f8      	str	r0, [r7, #12]
 8013a10:	60b9      	str	r1, [r7, #8]
 8013a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	f003 031f 	and.w	r3, r3, #31
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8013a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	6a1a      	ldr	r2, [r3, #32]
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	43db      	mvns	r3, r3
 8013a2a:	401a      	ands	r2, r3
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	6a1a      	ldr	r2, [r3, #32]
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	f003 031f 	and.w	r3, r3, #31
 8013a3a:	6879      	ldr	r1, [r7, #4]
 8013a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8013a40:	431a      	orrs	r2, r3
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	621a      	str	r2, [r3, #32]
}
 8013a46:	bf00      	nop
 8013a48:	371c      	adds	r7, #28
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a50:	4770      	bx	lr
	...

08013a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013a54:	b480      	push	{r7}
 8013a56:	b085      	sub	sp, #20
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
 8013a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013a64:	2b01      	cmp	r3, #1
 8013a66:	d101      	bne.n	8013a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013a68:	2302      	movs	r3, #2
 8013a6a:	e06d      	b.n	8013b48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2201      	movs	r2, #1
 8013a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2202      	movs	r2, #2
 8013a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	689b      	ldr	r3, [r3, #8]
 8013a8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	4a30      	ldr	r2, [pc, #192]	; (8013b54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013a92:	4293      	cmp	r3, r2
 8013a94:	d004      	beq.n	8013aa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	4a2f      	ldr	r2, [pc, #188]	; (8013b58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	d108      	bne.n	8013ab2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013aa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	68fa      	ldr	r2, [r7, #12]
 8013aae:	4313      	orrs	r3, r2
 8013ab0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013ab8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	68fa      	ldr	r2, [r7, #12]
 8013ac0:	4313      	orrs	r3, r2
 8013ac2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	68fa      	ldr	r2, [r7, #12]
 8013aca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	4a20      	ldr	r2, [pc, #128]	; (8013b54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013ad2:	4293      	cmp	r3, r2
 8013ad4:	d022      	beq.n	8013b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013ade:	d01d      	beq.n	8013b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	4a1d      	ldr	r2, [pc, #116]	; (8013b5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	d018      	beq.n	8013b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	4a1c      	ldr	r2, [pc, #112]	; (8013b60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013af0:	4293      	cmp	r3, r2
 8013af2:	d013      	beq.n	8013b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	4a1a      	ldr	r2, [pc, #104]	; (8013b64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013afa:	4293      	cmp	r3, r2
 8013afc:	d00e      	beq.n	8013b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	4a15      	ldr	r2, [pc, #84]	; (8013b58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013b04:	4293      	cmp	r3, r2
 8013b06:	d009      	beq.n	8013b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	4a16      	ldr	r2, [pc, #88]	; (8013b68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013b0e:	4293      	cmp	r3, r2
 8013b10:	d004      	beq.n	8013b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	4a15      	ldr	r2, [pc, #84]	; (8013b6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013b18:	4293      	cmp	r3, r2
 8013b1a:	d10c      	bne.n	8013b36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013b22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	689b      	ldr	r3, [r3, #8]
 8013b28:	68ba      	ldr	r2, [r7, #8]
 8013b2a:	4313      	orrs	r3, r2
 8013b2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	68ba      	ldr	r2, [r7, #8]
 8013b34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2201      	movs	r2, #1
 8013b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	2200      	movs	r2, #0
 8013b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013b46:	2300      	movs	r3, #0
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3714      	adds	r7, #20
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b52:	4770      	bx	lr
 8013b54:	40010000 	.word	0x40010000
 8013b58:	40010400 	.word	0x40010400
 8013b5c:	40000400 	.word	0x40000400
 8013b60:	40000800 	.word	0x40000800
 8013b64:	40000c00 	.word	0x40000c00
 8013b68:	40001800 	.word	0x40001800
 8013b6c:	40014000 	.word	0x40014000

08013b70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013b70:	b480      	push	{r7}
 8013b72:	b085      	sub	sp, #20
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d101      	bne.n	8013b8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013b88:	2302      	movs	r3, #2
 8013b8a:	e065      	b.n	8013c58 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2201      	movs	r2, #1
 8013b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013b9a:	683b      	ldr	r3, [r7, #0]
 8013b9c:	68db      	ldr	r3, [r3, #12]
 8013b9e:	4313      	orrs	r3, r2
 8013ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	689b      	ldr	r3, [r3, #8]
 8013bac:	4313      	orrs	r3, r2
 8013bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	4313      	orrs	r3, r2
 8013bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	4313      	orrs	r3, r2
 8013bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013bd2:	683b      	ldr	r3, [r7, #0]
 8013bd4:	691b      	ldr	r3, [r3, #16]
 8013bd6:	4313      	orrs	r3, r2
 8013bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	695b      	ldr	r3, [r3, #20]
 8013be4:	4313      	orrs	r3, r2
 8013be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bf2:	4313      	orrs	r3, r2
 8013bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	699b      	ldr	r3, [r3, #24]
 8013c00:	041b      	lsls	r3, r3, #16
 8013c02:	4313      	orrs	r3, r2
 8013c04:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	4a16      	ldr	r2, [pc, #88]	; (8013c64 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	d004      	beq.n	8013c1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	4a14      	ldr	r2, [pc, #80]	; (8013c68 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d115      	bne.n	8013c46 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c24:	051b      	lsls	r3, r3, #20
 8013c26:	4313      	orrs	r3, r2
 8013c28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	69db      	ldr	r3, [r3, #28]
 8013c34:	4313      	orrs	r3, r2
 8013c36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	6a1b      	ldr	r3, [r3, #32]
 8013c42:	4313      	orrs	r3, r2
 8013c44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	68fa      	ldr	r2, [r7, #12]
 8013c4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2200      	movs	r2, #0
 8013c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013c56:	2300      	movs	r3, #0
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3714      	adds	r7, #20
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr
 8013c64:	40010000 	.word	0x40010000
 8013c68:	40010400 	.word	0x40010400

08013c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013c6c:	b480      	push	{r7}
 8013c6e:	b083      	sub	sp, #12
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013c74:	bf00      	nop
 8013c76:	370c      	adds	r7, #12
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7e:	4770      	bx	lr

08013c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013c80:	b480      	push	{r7}
 8013c82:	b083      	sub	sp, #12
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013c88:	bf00      	nop
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr

08013c94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013c94:	b480      	push	{r7}
 8013c96:	b083      	sub	sp, #12
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013c9c:	bf00      	nop
 8013c9e:	370c      	adds	r7, #12
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca6:	4770      	bx	lr

08013ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d101      	bne.n	8013cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	e042      	b.n	8013d40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d106      	bne.n	8013cd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f7f1 f921 	bl	8004f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2224      	movs	r2, #36	; 0x24
 8013cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	681a      	ldr	r2, [r3, #0]
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	f022 0201 	bic.w	r2, r2, #1
 8013ce8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d002      	beq.n	8013cf8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f001 fbc2 	bl	801547c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f000 fe57 	bl	80149ac <UART_SetConfig>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	d101      	bne.n	8013d08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013d04:	2301      	movs	r3, #1
 8013d06:	e01b      	b.n	8013d40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	685a      	ldr	r2, [r3, #4]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	689a      	ldr	r2, [r3, #8]
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	f042 0201 	orr.w	r2, r2, #1
 8013d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f001 fc41 	bl	80155c0 <UART_CheckIdleState>
 8013d3e:	4603      	mov	r3, r0
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3708      	adds	r7, #8
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}

08013d48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b08a      	sub	sp, #40	; 0x28
 8013d4c:	af02      	add	r7, sp, #8
 8013d4e:	60f8      	str	r0, [r7, #12]
 8013d50:	60b9      	str	r1, [r7, #8]
 8013d52:	603b      	str	r3, [r7, #0]
 8013d54:	4613      	mov	r3, r2
 8013d56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d5e:	2b20      	cmp	r3, #32
 8013d60:	d17b      	bne.n	8013e5a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013d62:	68bb      	ldr	r3, [r7, #8]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d002      	beq.n	8013d6e <HAL_UART_Transmit+0x26>
 8013d68:	88fb      	ldrh	r3, [r7, #6]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d101      	bne.n	8013d72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013d6e:	2301      	movs	r3, #1
 8013d70:	e074      	b.n	8013e5c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	2200      	movs	r2, #0
 8013d76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	2221      	movs	r2, #33	; 0x21
 8013d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013d82:	f7f1 fd15 	bl	80057b0 <HAL_GetTick>
 8013d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	88fa      	ldrh	r2, [r7, #6]
 8013d8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	88fa      	ldrh	r2, [r7, #6]
 8013d94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	689b      	ldr	r3, [r3, #8]
 8013d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013da0:	d108      	bne.n	8013db4 <HAL_UART_Transmit+0x6c>
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	691b      	ldr	r3, [r3, #16]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d104      	bne.n	8013db4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013daa:	2300      	movs	r3, #0
 8013dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	61bb      	str	r3, [r7, #24]
 8013db2:	e003      	b.n	8013dbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013db8:	2300      	movs	r3, #0
 8013dba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013dbc:	e030      	b.n	8013e20 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	9300      	str	r3, [sp, #0]
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	2180      	movs	r1, #128	; 0x80
 8013dc8:	68f8      	ldr	r0, [r7, #12]
 8013dca:	f001 fca3 	bl	8015714 <UART_WaitOnFlagUntilTimeout>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d005      	beq.n	8013de0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	2220      	movs	r2, #32
 8013dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8013ddc:	2303      	movs	r3, #3
 8013dde:	e03d      	b.n	8013e5c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013de0:	69fb      	ldr	r3, [r7, #28]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d10b      	bne.n	8013dfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013de6:	69bb      	ldr	r3, [r7, #24]
 8013de8:	881b      	ldrh	r3, [r3, #0]
 8013dea:	461a      	mov	r2, r3
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013df4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013df6:	69bb      	ldr	r3, [r7, #24]
 8013df8:	3302      	adds	r3, #2
 8013dfa:	61bb      	str	r3, [r7, #24]
 8013dfc:	e007      	b.n	8013e0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013dfe:	69fb      	ldr	r3, [r7, #28]
 8013e00:	781a      	ldrb	r2, [r3, #0]
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013e08:	69fb      	ldr	r3, [r7, #28]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	3b01      	subs	r3, #1
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d1c8      	bne.n	8013dbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	9300      	str	r3, [sp, #0]
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	2200      	movs	r2, #0
 8013e34:	2140      	movs	r1, #64	; 0x40
 8013e36:	68f8      	ldr	r0, [r7, #12]
 8013e38:	f001 fc6c 	bl	8015714 <UART_WaitOnFlagUntilTimeout>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d005      	beq.n	8013e4e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	2220      	movs	r2, #32
 8013e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8013e4a:	2303      	movs	r3, #3
 8013e4c:	e006      	b.n	8013e5c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	2220      	movs	r2, #32
 8013e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8013e56:	2300      	movs	r3, #0
 8013e58:	e000      	b.n	8013e5c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8013e5a:	2302      	movs	r3, #2
  }
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3720      	adds	r7, #32
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b08a      	sub	sp, #40	; 0x28
 8013e68:	af02      	add	r7, sp, #8
 8013e6a:	60f8      	str	r0, [r7, #12]
 8013e6c:	60b9      	str	r1, [r7, #8]
 8013e6e:	603b      	str	r3, [r7, #0]
 8013e70:	4613      	mov	r3, r2
 8013e72:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e7a:	2b20      	cmp	r3, #32
 8013e7c:	f040 80b5 	bne.w	8013fea <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d002      	beq.n	8013e8c <HAL_UART_Receive+0x28>
 8013e86:	88fb      	ldrh	r3, [r7, #6]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d101      	bne.n	8013e90 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	e0ad      	b.n	8013fec <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	2200      	movs	r2, #0
 8013e94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	2222      	movs	r2, #34	; 0x22
 8013e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013ea6:	f7f1 fc83 	bl	80057b0 <HAL_GetTick>
 8013eaa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	88fa      	ldrh	r2, [r7, #6]
 8013eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	88fa      	ldrh	r2, [r7, #6]
 8013eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	689b      	ldr	r3, [r3, #8]
 8013ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013ec4:	d10e      	bne.n	8013ee4 <HAL_UART_Receive+0x80>
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	691b      	ldr	r3, [r3, #16]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d105      	bne.n	8013eda <HAL_UART_Receive+0x76>
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013ed4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013ed8:	e02d      	b.n	8013f36 <HAL_UART_Receive+0xd2>
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	22ff      	movs	r2, #255	; 0xff
 8013ede:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013ee2:	e028      	b.n	8013f36 <HAL_UART_Receive+0xd2>
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	689b      	ldr	r3, [r3, #8]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d10d      	bne.n	8013f08 <HAL_UART_Receive+0xa4>
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	691b      	ldr	r3, [r3, #16]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d104      	bne.n	8013efe <HAL_UART_Receive+0x9a>
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	22ff      	movs	r2, #255	; 0xff
 8013ef8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013efc:	e01b      	b.n	8013f36 <HAL_UART_Receive+0xd2>
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	227f      	movs	r2, #127	; 0x7f
 8013f02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013f06:	e016      	b.n	8013f36 <HAL_UART_Receive+0xd2>
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	689b      	ldr	r3, [r3, #8]
 8013f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013f10:	d10d      	bne.n	8013f2e <HAL_UART_Receive+0xca>
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	691b      	ldr	r3, [r3, #16]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d104      	bne.n	8013f24 <HAL_UART_Receive+0xc0>
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	227f      	movs	r2, #127	; 0x7f
 8013f1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013f22:	e008      	b.n	8013f36 <HAL_UART_Receive+0xd2>
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	223f      	movs	r2, #63	; 0x3f
 8013f28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013f2c:	e003      	b.n	8013f36 <HAL_UART_Receive+0xd2>
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	2200      	movs	r2, #0
 8013f32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f3c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	689b      	ldr	r3, [r3, #8]
 8013f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013f46:	d108      	bne.n	8013f5a <HAL_UART_Receive+0xf6>
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	691b      	ldr	r3, [r3, #16]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d104      	bne.n	8013f5a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8013f50:	2300      	movs	r3, #0
 8013f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	61bb      	str	r3, [r7, #24]
 8013f58:	e003      	b.n	8013f62 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8013f62:	e036      	b.n	8013fd2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	9300      	str	r3, [sp, #0]
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	2120      	movs	r1, #32
 8013f6e:	68f8      	ldr	r0, [r7, #12]
 8013f70:	f001 fbd0 	bl	8015714 <UART_WaitOnFlagUntilTimeout>
 8013f74:	4603      	mov	r3, r0
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d005      	beq.n	8013f86 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2220      	movs	r2, #32
 8013f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8013f82:	2303      	movs	r3, #3
 8013f84:	e032      	b.n	8013fec <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8013f86:	69fb      	ldr	r3, [r7, #28]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d10c      	bne.n	8013fa6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f92:	b29a      	uxth	r2, r3
 8013f94:	8a7b      	ldrh	r3, [r7, #18]
 8013f96:	4013      	ands	r3, r2
 8013f98:	b29a      	uxth	r2, r3
 8013f9a:	69bb      	ldr	r3, [r7, #24]
 8013f9c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8013f9e:	69bb      	ldr	r3, [r7, #24]
 8013fa0:	3302      	adds	r3, #2
 8013fa2:	61bb      	str	r3, [r7, #24]
 8013fa4:	e00c      	b.n	8013fc0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fac:	b2da      	uxtb	r2, r3
 8013fae:	8a7b      	ldrh	r3, [r7, #18]
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	4013      	ands	r3, r2
 8013fb4:	b2da      	uxtb	r2, r3
 8013fb6:	69fb      	ldr	r3, [r7, #28]
 8013fb8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	3301      	adds	r3, #1
 8013fbe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013fc6:	b29b      	uxth	r3, r3
 8013fc8:	3b01      	subs	r3, #1
 8013fca:	b29a      	uxth	r2, r3
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013fd8:	b29b      	uxth	r3, r3
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d1c2      	bne.n	8013f64 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	2220      	movs	r2, #32
 8013fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	e000      	b.n	8013fec <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8013fea:	2302      	movs	r3, #2
  }
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3720      	adds	r7, #32
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}

08013ff4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b08a      	sub	sp, #40	; 0x28
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	60f8      	str	r0, [r7, #12]
 8013ffc:	60b9      	str	r1, [r7, #8]
 8013ffe:	4613      	mov	r3, r2
 8014000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014008:	2b20      	cmp	r3, #32
 801400a:	d137      	bne.n	801407c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d002      	beq.n	8014018 <HAL_UART_Receive_IT+0x24>
 8014012:	88fb      	ldrh	r3, [r7, #6]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d101      	bne.n	801401c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014018:	2301      	movs	r3, #1
 801401a:	e030      	b.n	801407e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	2200      	movs	r2, #0
 8014020:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	4a18      	ldr	r2, [pc, #96]	; (8014088 <HAL_UART_Receive_IT+0x94>)
 8014028:	4293      	cmp	r3, r2
 801402a:	d01f      	beq.n	801406c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014036:	2b00      	cmp	r3, #0
 8014038:	d018      	beq.n	801406c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	e853 3f00 	ldrex	r3, [r3]
 8014046:	613b      	str	r3, [r7, #16]
   return(result);
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801404e:	627b      	str	r3, [r7, #36]	; 0x24
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	461a      	mov	r2, r3
 8014056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014058:	623b      	str	r3, [r7, #32]
 801405a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801405c:	69f9      	ldr	r1, [r7, #28]
 801405e:	6a3a      	ldr	r2, [r7, #32]
 8014060:	e841 2300 	strex	r3, r2, [r1]
 8014064:	61bb      	str	r3, [r7, #24]
   return(result);
 8014066:	69bb      	ldr	r3, [r7, #24]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d1e6      	bne.n	801403a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801406c:	88fb      	ldrh	r3, [r7, #6]
 801406e:	461a      	mov	r2, r3
 8014070:	68b9      	ldr	r1, [r7, #8]
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	f001 fbbc 	bl	80157f0 <UART_Start_Receive_IT>
 8014078:	4603      	mov	r3, r0
 801407a:	e000      	b.n	801407e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801407c:	2302      	movs	r3, #2
  }
}
 801407e:	4618      	mov	r0, r3
 8014080:	3728      	adds	r7, #40	; 0x28
 8014082:	46bd      	mov	sp, r7
 8014084:	bd80      	pop	{r7, pc}
 8014086:	bf00      	nop
 8014088:	58000c00 	.word	0x58000c00

0801408c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b09a      	sub	sp, #104	; 0x68
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801409a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801409c:	e853 3f00 	ldrex	r3, [r3]
 80140a0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80140a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80140a8:	667b      	str	r3, [r7, #100]	; 0x64
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	461a      	mov	r2, r3
 80140b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80140b2:	657b      	str	r3, [r7, #84]	; 0x54
 80140b4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80140b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80140ba:	e841 2300 	strex	r3, r2, [r1]
 80140be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80140c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d1e6      	bne.n	8014094 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	3308      	adds	r3, #8
 80140cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140d0:	e853 3f00 	ldrex	r3, [r3]
 80140d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80140d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140d8:	4b46      	ldr	r3, [pc, #280]	; (80141f4 <HAL_UART_AbortReceive+0x168>)
 80140da:	4013      	ands	r3, r2
 80140dc:	663b      	str	r3, [r7, #96]	; 0x60
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	3308      	adds	r3, #8
 80140e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80140e6:	643a      	str	r2, [r7, #64]	; 0x40
 80140e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80140ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80140ee:	e841 2300 	strex	r3, r2, [r1]
 80140f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80140f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d1e5      	bne.n	80140c6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140fe:	2b01      	cmp	r3, #1
 8014100:	d118      	bne.n	8014134 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014108:	6a3b      	ldr	r3, [r7, #32]
 801410a:	e853 3f00 	ldrex	r3, [r3]
 801410e:	61fb      	str	r3, [r7, #28]
   return(result);
 8014110:	69fb      	ldr	r3, [r7, #28]
 8014112:	f023 0310 	bic.w	r3, r3, #16
 8014116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	461a      	mov	r2, r3
 801411e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014122:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014128:	e841 2300 	strex	r3, r2, [r1]
 801412c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014130:	2b00      	cmp	r3, #0
 8014132:	d1e6      	bne.n	8014102 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	689b      	ldr	r3, [r3, #8]
 801413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801413e:	2b40      	cmp	r3, #64	; 0x40
 8014140:	d13b      	bne.n	80141ba <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	3308      	adds	r3, #8
 8014148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	e853 3f00 	ldrex	r3, [r3]
 8014150:	60bb      	str	r3, [r7, #8]
   return(result);
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014158:	65bb      	str	r3, [r7, #88]	; 0x58
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	3308      	adds	r3, #8
 8014160:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014162:	61ba      	str	r2, [r7, #24]
 8014164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014166:	6979      	ldr	r1, [r7, #20]
 8014168:	69ba      	ldr	r2, [r7, #24]
 801416a:	e841 2300 	strex	r3, r2, [r1]
 801416e:	613b      	str	r3, [r7, #16]
   return(result);
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d1e5      	bne.n	8014142 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801417c:	2b00      	cmp	r3, #0
 801417e:	d01c      	beq.n	80141ba <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014186:	2200      	movs	r2, #0
 8014188:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014190:	4618      	mov	r0, r3
 8014192:	f7f4 fa73 	bl	800867c <HAL_DMA_Abort>
 8014196:	4603      	mov	r3, r0
 8014198:	2b00      	cmp	r3, #0
 801419a:	d00e      	beq.n	80141ba <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7f5 ff06 	bl	8009fb4 <HAL_DMA_GetError>
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b20      	cmp	r3, #32
 80141ac:	d105      	bne.n	80141ba <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2210      	movs	r2, #16
 80141b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80141b6:	2303      	movs	r3, #3
 80141b8:	e017      	b.n	80141ea <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	2200      	movs	r2, #0
 80141be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	220f      	movs	r2, #15
 80141c8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	699a      	ldr	r2, [r3, #24]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f042 0208 	orr.w	r2, r2, #8
 80141d8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2220      	movs	r2, #32
 80141de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	2200      	movs	r2, #0
 80141e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80141e8:	2300      	movs	r3, #0
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3768      	adds	r7, #104	; 0x68
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}
 80141f2:	bf00      	nop
 80141f4:	effffffe 	.word	0xeffffffe

080141f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b0ba      	sub	sp, #232	; 0xe8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	69db      	ldr	r3, [r3, #28]
 8014206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	689b      	ldr	r3, [r3, #8]
 801421a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801421e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8014222:	f640 030f 	movw	r3, #2063	; 0x80f
 8014226:	4013      	ands	r3, r2
 8014228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801422c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014230:	2b00      	cmp	r3, #0
 8014232:	d11b      	bne.n	801426c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014238:	f003 0320 	and.w	r3, r3, #32
 801423c:	2b00      	cmp	r3, #0
 801423e:	d015      	beq.n	801426c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014244:	f003 0320 	and.w	r3, r3, #32
 8014248:	2b00      	cmp	r3, #0
 801424a:	d105      	bne.n	8014258 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801424c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014254:	2b00      	cmp	r3, #0
 8014256:	d009      	beq.n	801426c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801425c:	2b00      	cmp	r3, #0
 801425e:	f000 8377 	beq.w	8014950 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	4798      	blx	r3
      }
      return;
 801426a:	e371      	b.n	8014950 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801426c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014270:	2b00      	cmp	r3, #0
 8014272:	f000 8123 	beq.w	80144bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8014276:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801427a:	4b8d      	ldr	r3, [pc, #564]	; (80144b0 <HAL_UART_IRQHandler+0x2b8>)
 801427c:	4013      	ands	r3, r2
 801427e:	2b00      	cmp	r3, #0
 8014280:	d106      	bne.n	8014290 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014282:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014286:	4b8b      	ldr	r3, [pc, #556]	; (80144b4 <HAL_UART_IRQHandler+0x2bc>)
 8014288:	4013      	ands	r3, r2
 801428a:	2b00      	cmp	r3, #0
 801428c:	f000 8116 	beq.w	80144bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014294:	f003 0301 	and.w	r3, r3, #1
 8014298:	2b00      	cmp	r3, #0
 801429a:	d011      	beq.n	80142c0 <HAL_UART_IRQHandler+0xc8>
 801429c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80142a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d00b      	beq.n	80142c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	2201      	movs	r2, #1
 80142ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142b6:	f043 0201 	orr.w	r2, r3, #1
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80142c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80142c4:	f003 0302 	and.w	r3, r3, #2
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d011      	beq.n	80142f0 <HAL_UART_IRQHandler+0xf8>
 80142cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80142d0:	f003 0301 	and.w	r3, r3, #1
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d00b      	beq.n	80142f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	2202      	movs	r2, #2
 80142de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142e6:	f043 0204 	orr.w	r2, r3, #4
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80142f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80142f4:	f003 0304 	and.w	r3, r3, #4
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d011      	beq.n	8014320 <HAL_UART_IRQHandler+0x128>
 80142fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014300:	f003 0301 	and.w	r3, r3, #1
 8014304:	2b00      	cmp	r3, #0
 8014306:	d00b      	beq.n	8014320 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	2204      	movs	r2, #4
 801430e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014316:	f043 0202 	orr.w	r2, r3, #2
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014324:	f003 0308 	and.w	r3, r3, #8
 8014328:	2b00      	cmp	r3, #0
 801432a:	d017      	beq.n	801435c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014330:	f003 0320 	and.w	r3, r3, #32
 8014334:	2b00      	cmp	r3, #0
 8014336:	d105      	bne.n	8014344 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014338:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801433c:	4b5c      	ldr	r3, [pc, #368]	; (80144b0 <HAL_UART_IRQHandler+0x2b8>)
 801433e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014340:	2b00      	cmp	r3, #0
 8014342:	d00b      	beq.n	801435c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2208      	movs	r2, #8
 801434a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014352:	f043 0208 	orr.w	r2, r3, #8
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801435c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014364:	2b00      	cmp	r3, #0
 8014366:	d012      	beq.n	801438e <HAL_UART_IRQHandler+0x196>
 8014368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801436c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014370:	2b00      	cmp	r3, #0
 8014372:	d00c      	beq.n	801438e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801437c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014384:	f043 0220 	orr.w	r2, r3, #32
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014394:	2b00      	cmp	r3, #0
 8014396:	f000 82dd 	beq.w	8014954 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801439e:	f003 0320 	and.w	r3, r3, #32
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d013      	beq.n	80143ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80143a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80143aa:	f003 0320 	and.w	r3, r3, #32
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d105      	bne.n	80143be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80143b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80143b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d007      	beq.n	80143ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d003      	beq.n	80143ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143ca:	6878      	ldr	r0, [r7, #4]
 80143cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80143d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	689b      	ldr	r3, [r3, #8]
 80143de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143e2:	2b40      	cmp	r3, #64	; 0x40
 80143e4:	d005      	beq.n	80143f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80143e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80143ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d054      	beq.n	801449c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80143f2:	6878      	ldr	r0, [r7, #4]
 80143f4:	f001 fb1e 	bl	8015a34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	689b      	ldr	r3, [r3, #8]
 80143fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014402:	2b40      	cmp	r3, #64	; 0x40
 8014404:	d146      	bne.n	8014494 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	3308      	adds	r3, #8
 801440c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014414:	e853 3f00 	ldrex	r3, [r3]
 8014418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801441c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	3308      	adds	r3, #8
 801442e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014432:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801443a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801443e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014442:	e841 2300 	strex	r3, r2, [r1]
 8014446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801444a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801444e:	2b00      	cmp	r3, #0
 8014450:	d1d9      	bne.n	8014406 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014458:	2b00      	cmp	r3, #0
 801445a:	d017      	beq.n	801448c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014462:	4a15      	ldr	r2, [pc, #84]	; (80144b8 <HAL_UART_IRQHandler+0x2c0>)
 8014464:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801446c:	4618      	mov	r0, r3
 801446e:	f7f4 fc23 	bl	8008cb8 <HAL_DMA_Abort_IT>
 8014472:	4603      	mov	r3, r0
 8014474:	2b00      	cmp	r3, #0
 8014476:	d019      	beq.n	80144ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801447e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014480:	687a      	ldr	r2, [r7, #4]
 8014482:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014486:	4610      	mov	r0, r2
 8014488:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801448a:	e00f      	b.n	80144ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f000 fa77 	bl	8014980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014492:	e00b      	b.n	80144ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f000 fa73 	bl	8014980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801449a:	e007      	b.n	80144ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801449c:	6878      	ldr	r0, [r7, #4]
 801449e:	f000 fa6f 	bl	8014980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2200      	movs	r2, #0
 80144a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80144aa:	e253      	b.n	8014954 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80144ac:	bf00      	nop
    return;
 80144ae:	e251      	b.n	8014954 <HAL_UART_IRQHandler+0x75c>
 80144b0:	10000001 	.word	0x10000001
 80144b4:	04000120 	.word	0x04000120
 80144b8:	08015b01 	.word	0x08015b01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144c0:	2b01      	cmp	r3, #1
 80144c2:	f040 81e7 	bne.w	8014894 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80144c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144ca:	f003 0310 	and.w	r3, r3, #16
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	f000 81e0 	beq.w	8014894 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80144d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144d8:	f003 0310 	and.w	r3, r3, #16
 80144dc:	2b00      	cmp	r3, #0
 80144de:	f000 81d9 	beq.w	8014894 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	2210      	movs	r2, #16
 80144e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	689b      	ldr	r3, [r3, #8]
 80144f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80144f4:	2b40      	cmp	r3, #64	; 0x40
 80144f6:	f040 8151 	bne.w	801479c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	4a96      	ldr	r2, [pc, #600]	; (801475c <HAL_UART_IRQHandler+0x564>)
 8014504:	4293      	cmp	r3, r2
 8014506:	d068      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	4a93      	ldr	r2, [pc, #588]	; (8014760 <HAL_UART_IRQHandler+0x568>)
 8014512:	4293      	cmp	r3, r2
 8014514:	d061      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	4a91      	ldr	r2, [pc, #580]	; (8014764 <HAL_UART_IRQHandler+0x56c>)
 8014520:	4293      	cmp	r3, r2
 8014522:	d05a      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	4a8e      	ldr	r2, [pc, #568]	; (8014768 <HAL_UART_IRQHandler+0x570>)
 801452e:	4293      	cmp	r3, r2
 8014530:	d053      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	4a8c      	ldr	r2, [pc, #560]	; (801476c <HAL_UART_IRQHandler+0x574>)
 801453c:	4293      	cmp	r3, r2
 801453e:	d04c      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	4a89      	ldr	r2, [pc, #548]	; (8014770 <HAL_UART_IRQHandler+0x578>)
 801454a:	4293      	cmp	r3, r2
 801454c:	d045      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	4a87      	ldr	r2, [pc, #540]	; (8014774 <HAL_UART_IRQHandler+0x57c>)
 8014558:	4293      	cmp	r3, r2
 801455a:	d03e      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	4a84      	ldr	r2, [pc, #528]	; (8014778 <HAL_UART_IRQHandler+0x580>)
 8014566:	4293      	cmp	r3, r2
 8014568:	d037      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	4a82      	ldr	r2, [pc, #520]	; (801477c <HAL_UART_IRQHandler+0x584>)
 8014574:	4293      	cmp	r3, r2
 8014576:	d030      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	4a7f      	ldr	r2, [pc, #508]	; (8014780 <HAL_UART_IRQHandler+0x588>)
 8014582:	4293      	cmp	r3, r2
 8014584:	d029      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	4a7d      	ldr	r2, [pc, #500]	; (8014784 <HAL_UART_IRQHandler+0x58c>)
 8014590:	4293      	cmp	r3, r2
 8014592:	d022      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	4a7a      	ldr	r2, [pc, #488]	; (8014788 <HAL_UART_IRQHandler+0x590>)
 801459e:	4293      	cmp	r3, r2
 80145a0:	d01b      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	4a78      	ldr	r2, [pc, #480]	; (801478c <HAL_UART_IRQHandler+0x594>)
 80145ac:	4293      	cmp	r3, r2
 80145ae:	d014      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	4a75      	ldr	r2, [pc, #468]	; (8014790 <HAL_UART_IRQHandler+0x598>)
 80145ba:	4293      	cmp	r3, r2
 80145bc:	d00d      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	4a73      	ldr	r2, [pc, #460]	; (8014794 <HAL_UART_IRQHandler+0x59c>)
 80145c8:	4293      	cmp	r3, r2
 80145ca:	d006      	beq.n	80145da <HAL_UART_IRQHandler+0x3e2>
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4a70      	ldr	r2, [pc, #448]	; (8014798 <HAL_UART_IRQHandler+0x5a0>)
 80145d6:	4293      	cmp	r3, r2
 80145d8:	d106      	bne.n	80145e8 <HAL_UART_IRQHandler+0x3f0>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	685b      	ldr	r3, [r3, #4]
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	e005      	b.n	80145f4 <HAL_UART_IRQHandler+0x3fc>
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	685b      	ldr	r3, [r3, #4]
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80145f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	f000 81ab 	beq.w	8014958 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014608:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801460c:	429a      	cmp	r2, r3
 801460e:	f080 81a3 	bcs.w	8014958 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014618:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014622:	69db      	ldr	r3, [r3, #28]
 8014624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014628:	f000 8087 	beq.w	801473a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014638:	e853 3f00 	ldrex	r3, [r3]
 801463c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	461a      	mov	r2, r3
 8014652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801465a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801465e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014662:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014666:	e841 2300 	strex	r3, r2, [r1]
 801466a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801466e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014672:	2b00      	cmp	r3, #0
 8014674:	d1da      	bne.n	801462c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	3308      	adds	r3, #8
 801467c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801467e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014680:	e853 3f00 	ldrex	r3, [r3]
 8014684:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014688:	f023 0301 	bic.w	r3, r3, #1
 801468c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	3308      	adds	r3, #8
 8014696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801469a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801469e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80146a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80146a6:	e841 2300 	strex	r3, r2, [r1]
 80146aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80146ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d1e1      	bne.n	8014676 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	3308      	adds	r3, #8
 80146b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80146bc:	e853 3f00 	ldrex	r3, [r3]
 80146c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80146c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80146c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	3308      	adds	r3, #8
 80146d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80146d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80146d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80146dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80146de:	e841 2300 	strex	r3, r2, [r1]
 80146e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80146e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d1e3      	bne.n	80146b2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	2220      	movs	r2, #32
 80146ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	2200      	movs	r2, #0
 80146f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014700:	e853 3f00 	ldrex	r3, [r3]
 8014704:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014708:	f023 0310 	bic.w	r3, r3, #16
 801470c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	461a      	mov	r2, r3
 8014716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801471a:	65bb      	str	r3, [r7, #88]	; 0x58
 801471c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801471e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014722:	e841 2300 	strex	r3, r2, [r1]
 8014726:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801472a:	2b00      	cmp	r3, #0
 801472c:	d1e4      	bne.n	80146f8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014734:	4618      	mov	r0, r3
 8014736:	f7f3 ffa1 	bl	800867c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	2202      	movs	r2, #2
 801473e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801474c:	b29b      	uxth	r3, r3
 801474e:	1ad3      	subs	r3, r2, r3
 8014750:	b29b      	uxth	r3, r3
 8014752:	4619      	mov	r1, r3
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f000 f91d 	bl	8014994 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801475a:	e0fd      	b.n	8014958 <HAL_UART_IRQHandler+0x760>
 801475c:	40020010 	.word	0x40020010
 8014760:	40020028 	.word	0x40020028
 8014764:	40020040 	.word	0x40020040
 8014768:	40020058 	.word	0x40020058
 801476c:	40020070 	.word	0x40020070
 8014770:	40020088 	.word	0x40020088
 8014774:	400200a0 	.word	0x400200a0
 8014778:	400200b8 	.word	0x400200b8
 801477c:	40020410 	.word	0x40020410
 8014780:	40020428 	.word	0x40020428
 8014784:	40020440 	.word	0x40020440
 8014788:	40020458 	.word	0x40020458
 801478c:	40020470 	.word	0x40020470
 8014790:	40020488 	.word	0x40020488
 8014794:	400204a0 	.word	0x400204a0
 8014798:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80147a8:	b29b      	uxth	r3, r3
 80147aa:	1ad3      	subs	r3, r2, r3
 80147ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80147b6:	b29b      	uxth	r3, r3
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	f000 80cf 	beq.w	801495c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80147be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	f000 80ca 	beq.w	801495c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147d0:	e853 3f00 	ldrex	r3, [r3]
 80147d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80147d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80147dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	461a      	mov	r2, r3
 80147e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80147ea:	647b      	str	r3, [r7, #68]	; 0x44
 80147ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80147f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80147f2:	e841 2300 	strex	r3, r2, [r1]
 80147f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80147f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d1e4      	bne.n	80147c8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	3308      	adds	r3, #8
 8014804:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014808:	e853 3f00 	ldrex	r3, [r3]
 801480c:	623b      	str	r3, [r7, #32]
   return(result);
 801480e:	6a3a      	ldr	r2, [r7, #32]
 8014810:	4b55      	ldr	r3, [pc, #340]	; (8014968 <HAL_UART_IRQHandler+0x770>)
 8014812:	4013      	ands	r3, r2
 8014814:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	3308      	adds	r3, #8
 801481e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014822:	633a      	str	r2, [r7, #48]	; 0x30
 8014824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801482a:	e841 2300 	strex	r3, r2, [r1]
 801482e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014832:	2b00      	cmp	r3, #0
 8014834:	d1e3      	bne.n	80147fe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2220      	movs	r2, #32
 801483a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2200      	movs	r2, #0
 8014842:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2200      	movs	r2, #0
 8014848:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	e853 3f00 	ldrex	r3, [r3]
 8014856:	60fb      	str	r3, [r7, #12]
   return(result);
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	f023 0310 	bic.w	r3, r3, #16
 801485e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	461a      	mov	r2, r3
 8014868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801486c:	61fb      	str	r3, [r7, #28]
 801486e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014870:	69b9      	ldr	r1, [r7, #24]
 8014872:	69fa      	ldr	r2, [r7, #28]
 8014874:	e841 2300 	strex	r3, r2, [r1]
 8014878:	617b      	str	r3, [r7, #20]
   return(result);
 801487a:	697b      	ldr	r3, [r7, #20]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d1e4      	bne.n	801484a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2202      	movs	r2, #2
 8014884:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014886:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801488a:	4619      	mov	r1, r3
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f000 f881 	bl	8014994 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014892:	e063      	b.n	801495c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801489c:	2b00      	cmp	r3, #0
 801489e:	d00e      	beq.n	80148be <HAL_UART_IRQHandler+0x6c6>
 80148a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80148a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d008      	beq.n	80148be <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80148b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f001 fe80 	bl	80165bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80148bc:	e051      	b.n	8014962 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80148be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80148c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d014      	beq.n	80148f4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80148ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80148ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d105      	bne.n	80148e2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80148d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80148da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d008      	beq.n	80148f4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d03a      	beq.n	8014960 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148ee:	6878      	ldr	r0, [r7, #4]
 80148f0:	4798      	blx	r3
    }
    return;
 80148f2:	e035      	b.n	8014960 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80148f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80148f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d009      	beq.n	8014914 <HAL_UART_IRQHandler+0x71c>
 8014900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014908:	2b00      	cmp	r3, #0
 801490a:	d003      	beq.n	8014914 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f001 f90d 	bl	8015b2c <UART_EndTransmit_IT>
    return;
 8014912:	e026      	b.n	8014962 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801491c:	2b00      	cmp	r3, #0
 801491e:	d009      	beq.n	8014934 <HAL_UART_IRQHandler+0x73c>
 8014920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014924:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014928:	2b00      	cmp	r3, #0
 801492a:	d003      	beq.n	8014934 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f001 fe59 	bl	80165e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014932:	e016      	b.n	8014962 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801493c:	2b00      	cmp	r3, #0
 801493e:	d010      	beq.n	8014962 <HAL_UART_IRQHandler+0x76a>
 8014940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014944:	2b00      	cmp	r3, #0
 8014946:	da0c      	bge.n	8014962 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f001 fe41 	bl	80165d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801494e:	e008      	b.n	8014962 <HAL_UART_IRQHandler+0x76a>
      return;
 8014950:	bf00      	nop
 8014952:	e006      	b.n	8014962 <HAL_UART_IRQHandler+0x76a>
    return;
 8014954:	bf00      	nop
 8014956:	e004      	b.n	8014962 <HAL_UART_IRQHandler+0x76a>
      return;
 8014958:	bf00      	nop
 801495a:	e002      	b.n	8014962 <HAL_UART_IRQHandler+0x76a>
      return;
 801495c:	bf00      	nop
 801495e:	e000      	b.n	8014962 <HAL_UART_IRQHandler+0x76a>
    return;
 8014960:	bf00      	nop
  }
}
 8014962:	37e8      	adds	r7, #232	; 0xe8
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}
 8014968:	effffffe 	.word	0xeffffffe

0801496c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014974:	bf00      	nop
 8014976:	370c      	adds	r7, #12
 8014978:	46bd      	mov	sp, r7
 801497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497e:	4770      	bx	lr

08014980 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014980:	b480      	push	{r7}
 8014982:	b083      	sub	sp, #12
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014988:	bf00      	nop
 801498a:	370c      	adds	r7, #12
 801498c:	46bd      	mov	sp, r7
 801498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014992:	4770      	bx	lr

08014994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014994:	b480      	push	{r7}
 8014996:	b083      	sub	sp, #12
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
 801499c:	460b      	mov	r3, r1
 801499e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80149a0:	bf00      	nop
 80149a2:	370c      	adds	r7, #12
 80149a4:	46bd      	mov	sp, r7
 80149a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149aa:	4770      	bx	lr

080149ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80149ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80149b0:	b092      	sub	sp, #72	; 0x48
 80149b2:	af00      	add	r7, sp, #0
 80149b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80149b6:	2300      	movs	r3, #0
 80149b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80149bc:	697b      	ldr	r3, [r7, #20]
 80149be:	689a      	ldr	r2, [r3, #8]
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	691b      	ldr	r3, [r3, #16]
 80149c4:	431a      	orrs	r2, r3
 80149c6:	697b      	ldr	r3, [r7, #20]
 80149c8:	695b      	ldr	r3, [r3, #20]
 80149ca:	431a      	orrs	r2, r3
 80149cc:	697b      	ldr	r3, [r7, #20]
 80149ce:	69db      	ldr	r3, [r3, #28]
 80149d0:	4313      	orrs	r3, r2
 80149d2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	681a      	ldr	r2, [r3, #0]
 80149da:	4bbe      	ldr	r3, [pc, #760]	; (8014cd4 <UART_SetConfig+0x328>)
 80149dc:	4013      	ands	r3, r2
 80149de:	697a      	ldr	r2, [r7, #20]
 80149e0:	6812      	ldr	r2, [r2, #0]
 80149e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80149e4:	430b      	orrs	r3, r1
 80149e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	685b      	ldr	r3, [r3, #4]
 80149ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	68da      	ldr	r2, [r3, #12]
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	430a      	orrs	r2, r1
 80149fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	699b      	ldr	r3, [r3, #24]
 8014a02:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	4ab3      	ldr	r2, [pc, #716]	; (8014cd8 <UART_SetConfig+0x32c>)
 8014a0a:	4293      	cmp	r3, r2
 8014a0c:	d004      	beq.n	8014a18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	6a1b      	ldr	r3, [r3, #32]
 8014a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014a14:	4313      	orrs	r3, r2
 8014a16:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014a18:	697b      	ldr	r3, [r7, #20]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	689a      	ldr	r2, [r3, #8]
 8014a1e:	4baf      	ldr	r3, [pc, #700]	; (8014cdc <UART_SetConfig+0x330>)
 8014a20:	4013      	ands	r3, r2
 8014a22:	697a      	ldr	r2, [r7, #20]
 8014a24:	6812      	ldr	r2, [r2, #0]
 8014a26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014a28:	430b      	orrs	r3, r1
 8014a2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a32:	f023 010f 	bic.w	r1, r3, #15
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	430a      	orrs	r2, r1
 8014a40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	4aa6      	ldr	r2, [pc, #664]	; (8014ce0 <UART_SetConfig+0x334>)
 8014a48:	4293      	cmp	r3, r2
 8014a4a:	d177      	bne.n	8014b3c <UART_SetConfig+0x190>
 8014a4c:	4ba5      	ldr	r3, [pc, #660]	; (8014ce4 <UART_SetConfig+0x338>)
 8014a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014a54:	2b28      	cmp	r3, #40	; 0x28
 8014a56:	d86d      	bhi.n	8014b34 <UART_SetConfig+0x188>
 8014a58:	a201      	add	r2, pc, #4	; (adr r2, 8014a60 <UART_SetConfig+0xb4>)
 8014a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a5e:	bf00      	nop
 8014a60:	08014b05 	.word	0x08014b05
 8014a64:	08014b35 	.word	0x08014b35
 8014a68:	08014b35 	.word	0x08014b35
 8014a6c:	08014b35 	.word	0x08014b35
 8014a70:	08014b35 	.word	0x08014b35
 8014a74:	08014b35 	.word	0x08014b35
 8014a78:	08014b35 	.word	0x08014b35
 8014a7c:	08014b35 	.word	0x08014b35
 8014a80:	08014b0d 	.word	0x08014b0d
 8014a84:	08014b35 	.word	0x08014b35
 8014a88:	08014b35 	.word	0x08014b35
 8014a8c:	08014b35 	.word	0x08014b35
 8014a90:	08014b35 	.word	0x08014b35
 8014a94:	08014b35 	.word	0x08014b35
 8014a98:	08014b35 	.word	0x08014b35
 8014a9c:	08014b35 	.word	0x08014b35
 8014aa0:	08014b15 	.word	0x08014b15
 8014aa4:	08014b35 	.word	0x08014b35
 8014aa8:	08014b35 	.word	0x08014b35
 8014aac:	08014b35 	.word	0x08014b35
 8014ab0:	08014b35 	.word	0x08014b35
 8014ab4:	08014b35 	.word	0x08014b35
 8014ab8:	08014b35 	.word	0x08014b35
 8014abc:	08014b35 	.word	0x08014b35
 8014ac0:	08014b1d 	.word	0x08014b1d
 8014ac4:	08014b35 	.word	0x08014b35
 8014ac8:	08014b35 	.word	0x08014b35
 8014acc:	08014b35 	.word	0x08014b35
 8014ad0:	08014b35 	.word	0x08014b35
 8014ad4:	08014b35 	.word	0x08014b35
 8014ad8:	08014b35 	.word	0x08014b35
 8014adc:	08014b35 	.word	0x08014b35
 8014ae0:	08014b25 	.word	0x08014b25
 8014ae4:	08014b35 	.word	0x08014b35
 8014ae8:	08014b35 	.word	0x08014b35
 8014aec:	08014b35 	.word	0x08014b35
 8014af0:	08014b35 	.word	0x08014b35
 8014af4:	08014b35 	.word	0x08014b35
 8014af8:	08014b35 	.word	0x08014b35
 8014afc:	08014b35 	.word	0x08014b35
 8014b00:	08014b2d 	.word	0x08014b2d
 8014b04:	2301      	movs	r3, #1
 8014b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b0a:	e222      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b0c:	2304      	movs	r3, #4
 8014b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b12:	e21e      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b14:	2308      	movs	r3, #8
 8014b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b1a:	e21a      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b1c:	2310      	movs	r3, #16
 8014b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b22:	e216      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b24:	2320      	movs	r3, #32
 8014b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b2a:	e212      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b2c:	2340      	movs	r3, #64	; 0x40
 8014b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b32:	e20e      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b34:	2380      	movs	r3, #128	; 0x80
 8014b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b3a:	e20a      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	4a69      	ldr	r2, [pc, #420]	; (8014ce8 <UART_SetConfig+0x33c>)
 8014b42:	4293      	cmp	r3, r2
 8014b44:	d130      	bne.n	8014ba8 <UART_SetConfig+0x1fc>
 8014b46:	4b67      	ldr	r3, [pc, #412]	; (8014ce4 <UART_SetConfig+0x338>)
 8014b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b4a:	f003 0307 	and.w	r3, r3, #7
 8014b4e:	2b05      	cmp	r3, #5
 8014b50:	d826      	bhi.n	8014ba0 <UART_SetConfig+0x1f4>
 8014b52:	a201      	add	r2, pc, #4	; (adr r2, 8014b58 <UART_SetConfig+0x1ac>)
 8014b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b58:	08014b71 	.word	0x08014b71
 8014b5c:	08014b79 	.word	0x08014b79
 8014b60:	08014b81 	.word	0x08014b81
 8014b64:	08014b89 	.word	0x08014b89
 8014b68:	08014b91 	.word	0x08014b91
 8014b6c:	08014b99 	.word	0x08014b99
 8014b70:	2300      	movs	r3, #0
 8014b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b76:	e1ec      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b78:	2304      	movs	r3, #4
 8014b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b7e:	e1e8      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b80:	2308      	movs	r3, #8
 8014b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b86:	e1e4      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b88:	2310      	movs	r3, #16
 8014b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b8e:	e1e0      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b90:	2320      	movs	r3, #32
 8014b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b96:	e1dc      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014b98:	2340      	movs	r3, #64	; 0x40
 8014b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b9e:	e1d8      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014ba0:	2380      	movs	r3, #128	; 0x80
 8014ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ba6:	e1d4      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	4a4f      	ldr	r2, [pc, #316]	; (8014cec <UART_SetConfig+0x340>)
 8014bae:	4293      	cmp	r3, r2
 8014bb0:	d130      	bne.n	8014c14 <UART_SetConfig+0x268>
 8014bb2:	4b4c      	ldr	r3, [pc, #304]	; (8014ce4 <UART_SetConfig+0x338>)
 8014bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bb6:	f003 0307 	and.w	r3, r3, #7
 8014bba:	2b05      	cmp	r3, #5
 8014bbc:	d826      	bhi.n	8014c0c <UART_SetConfig+0x260>
 8014bbe:	a201      	add	r2, pc, #4	; (adr r2, 8014bc4 <UART_SetConfig+0x218>)
 8014bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bc4:	08014bdd 	.word	0x08014bdd
 8014bc8:	08014be5 	.word	0x08014be5
 8014bcc:	08014bed 	.word	0x08014bed
 8014bd0:	08014bf5 	.word	0x08014bf5
 8014bd4:	08014bfd 	.word	0x08014bfd
 8014bd8:	08014c05 	.word	0x08014c05
 8014bdc:	2300      	movs	r3, #0
 8014bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014be2:	e1b6      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014be4:	2304      	movs	r3, #4
 8014be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bea:	e1b2      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014bec:	2308      	movs	r3, #8
 8014bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bf2:	e1ae      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014bf4:	2310      	movs	r3, #16
 8014bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bfa:	e1aa      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014bfc:	2320      	movs	r3, #32
 8014bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c02:	e1a6      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014c04:	2340      	movs	r3, #64	; 0x40
 8014c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c0a:	e1a2      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014c0c:	2380      	movs	r3, #128	; 0x80
 8014c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c12:	e19e      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	4a35      	ldr	r2, [pc, #212]	; (8014cf0 <UART_SetConfig+0x344>)
 8014c1a:	4293      	cmp	r3, r2
 8014c1c:	d130      	bne.n	8014c80 <UART_SetConfig+0x2d4>
 8014c1e:	4b31      	ldr	r3, [pc, #196]	; (8014ce4 <UART_SetConfig+0x338>)
 8014c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c22:	f003 0307 	and.w	r3, r3, #7
 8014c26:	2b05      	cmp	r3, #5
 8014c28:	d826      	bhi.n	8014c78 <UART_SetConfig+0x2cc>
 8014c2a:	a201      	add	r2, pc, #4	; (adr r2, 8014c30 <UART_SetConfig+0x284>)
 8014c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c30:	08014c49 	.word	0x08014c49
 8014c34:	08014c51 	.word	0x08014c51
 8014c38:	08014c59 	.word	0x08014c59
 8014c3c:	08014c61 	.word	0x08014c61
 8014c40:	08014c69 	.word	0x08014c69
 8014c44:	08014c71 	.word	0x08014c71
 8014c48:	2300      	movs	r3, #0
 8014c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c4e:	e180      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014c50:	2304      	movs	r3, #4
 8014c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c56:	e17c      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014c58:	2308      	movs	r3, #8
 8014c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c5e:	e178      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014c60:	2310      	movs	r3, #16
 8014c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c66:	e174      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014c68:	2320      	movs	r3, #32
 8014c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c6e:	e170      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014c70:	2340      	movs	r3, #64	; 0x40
 8014c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c76:	e16c      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014c78:	2380      	movs	r3, #128	; 0x80
 8014c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c7e:	e168      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014c80:	697b      	ldr	r3, [r7, #20]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	4a1b      	ldr	r2, [pc, #108]	; (8014cf4 <UART_SetConfig+0x348>)
 8014c86:	4293      	cmp	r3, r2
 8014c88:	d142      	bne.n	8014d10 <UART_SetConfig+0x364>
 8014c8a:	4b16      	ldr	r3, [pc, #88]	; (8014ce4 <UART_SetConfig+0x338>)
 8014c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c8e:	f003 0307 	and.w	r3, r3, #7
 8014c92:	2b05      	cmp	r3, #5
 8014c94:	d838      	bhi.n	8014d08 <UART_SetConfig+0x35c>
 8014c96:	a201      	add	r2, pc, #4	; (adr r2, 8014c9c <UART_SetConfig+0x2f0>)
 8014c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c9c:	08014cb5 	.word	0x08014cb5
 8014ca0:	08014cbd 	.word	0x08014cbd
 8014ca4:	08014cc5 	.word	0x08014cc5
 8014ca8:	08014ccd 	.word	0x08014ccd
 8014cac:	08014cf9 	.word	0x08014cf9
 8014cb0:	08014d01 	.word	0x08014d01
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cba:	e14a      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014cbc:	2304      	movs	r3, #4
 8014cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cc2:	e146      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014cc4:	2308      	movs	r3, #8
 8014cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cca:	e142      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014ccc:	2310      	movs	r3, #16
 8014cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cd2:	e13e      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014cd4:	cfff69f3 	.word	0xcfff69f3
 8014cd8:	58000c00 	.word	0x58000c00
 8014cdc:	11fff4ff 	.word	0x11fff4ff
 8014ce0:	40011000 	.word	0x40011000
 8014ce4:	58024400 	.word	0x58024400
 8014ce8:	40004400 	.word	0x40004400
 8014cec:	40004800 	.word	0x40004800
 8014cf0:	40004c00 	.word	0x40004c00
 8014cf4:	40005000 	.word	0x40005000
 8014cf8:	2320      	movs	r3, #32
 8014cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cfe:	e128      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014d00:	2340      	movs	r3, #64	; 0x40
 8014d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d06:	e124      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014d08:	2380      	movs	r3, #128	; 0x80
 8014d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d0e:	e120      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014d10:	697b      	ldr	r3, [r7, #20]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	4acb      	ldr	r2, [pc, #812]	; (8015044 <UART_SetConfig+0x698>)
 8014d16:	4293      	cmp	r3, r2
 8014d18:	d176      	bne.n	8014e08 <UART_SetConfig+0x45c>
 8014d1a:	4bcb      	ldr	r3, [pc, #812]	; (8015048 <UART_SetConfig+0x69c>)
 8014d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014d22:	2b28      	cmp	r3, #40	; 0x28
 8014d24:	d86c      	bhi.n	8014e00 <UART_SetConfig+0x454>
 8014d26:	a201      	add	r2, pc, #4	; (adr r2, 8014d2c <UART_SetConfig+0x380>)
 8014d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d2c:	08014dd1 	.word	0x08014dd1
 8014d30:	08014e01 	.word	0x08014e01
 8014d34:	08014e01 	.word	0x08014e01
 8014d38:	08014e01 	.word	0x08014e01
 8014d3c:	08014e01 	.word	0x08014e01
 8014d40:	08014e01 	.word	0x08014e01
 8014d44:	08014e01 	.word	0x08014e01
 8014d48:	08014e01 	.word	0x08014e01
 8014d4c:	08014dd9 	.word	0x08014dd9
 8014d50:	08014e01 	.word	0x08014e01
 8014d54:	08014e01 	.word	0x08014e01
 8014d58:	08014e01 	.word	0x08014e01
 8014d5c:	08014e01 	.word	0x08014e01
 8014d60:	08014e01 	.word	0x08014e01
 8014d64:	08014e01 	.word	0x08014e01
 8014d68:	08014e01 	.word	0x08014e01
 8014d6c:	08014de1 	.word	0x08014de1
 8014d70:	08014e01 	.word	0x08014e01
 8014d74:	08014e01 	.word	0x08014e01
 8014d78:	08014e01 	.word	0x08014e01
 8014d7c:	08014e01 	.word	0x08014e01
 8014d80:	08014e01 	.word	0x08014e01
 8014d84:	08014e01 	.word	0x08014e01
 8014d88:	08014e01 	.word	0x08014e01
 8014d8c:	08014de9 	.word	0x08014de9
 8014d90:	08014e01 	.word	0x08014e01
 8014d94:	08014e01 	.word	0x08014e01
 8014d98:	08014e01 	.word	0x08014e01
 8014d9c:	08014e01 	.word	0x08014e01
 8014da0:	08014e01 	.word	0x08014e01
 8014da4:	08014e01 	.word	0x08014e01
 8014da8:	08014e01 	.word	0x08014e01
 8014dac:	08014df1 	.word	0x08014df1
 8014db0:	08014e01 	.word	0x08014e01
 8014db4:	08014e01 	.word	0x08014e01
 8014db8:	08014e01 	.word	0x08014e01
 8014dbc:	08014e01 	.word	0x08014e01
 8014dc0:	08014e01 	.word	0x08014e01
 8014dc4:	08014e01 	.word	0x08014e01
 8014dc8:	08014e01 	.word	0x08014e01
 8014dcc:	08014df9 	.word	0x08014df9
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dd6:	e0bc      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014dd8:	2304      	movs	r3, #4
 8014dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dde:	e0b8      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014de0:	2308      	movs	r3, #8
 8014de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014de6:	e0b4      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014de8:	2310      	movs	r3, #16
 8014dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dee:	e0b0      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014df0:	2320      	movs	r3, #32
 8014df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014df6:	e0ac      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014df8:	2340      	movs	r3, #64	; 0x40
 8014dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dfe:	e0a8      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014e00:	2380      	movs	r3, #128	; 0x80
 8014e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e06:	e0a4      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	4a8f      	ldr	r2, [pc, #572]	; (801504c <UART_SetConfig+0x6a0>)
 8014e0e:	4293      	cmp	r3, r2
 8014e10:	d130      	bne.n	8014e74 <UART_SetConfig+0x4c8>
 8014e12:	4b8d      	ldr	r3, [pc, #564]	; (8015048 <UART_SetConfig+0x69c>)
 8014e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e16:	f003 0307 	and.w	r3, r3, #7
 8014e1a:	2b05      	cmp	r3, #5
 8014e1c:	d826      	bhi.n	8014e6c <UART_SetConfig+0x4c0>
 8014e1e:	a201      	add	r2, pc, #4	; (adr r2, 8014e24 <UART_SetConfig+0x478>)
 8014e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e24:	08014e3d 	.word	0x08014e3d
 8014e28:	08014e45 	.word	0x08014e45
 8014e2c:	08014e4d 	.word	0x08014e4d
 8014e30:	08014e55 	.word	0x08014e55
 8014e34:	08014e5d 	.word	0x08014e5d
 8014e38:	08014e65 	.word	0x08014e65
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e42:	e086      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014e44:	2304      	movs	r3, #4
 8014e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e4a:	e082      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014e4c:	2308      	movs	r3, #8
 8014e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e52:	e07e      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014e54:	2310      	movs	r3, #16
 8014e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e5a:	e07a      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014e5c:	2320      	movs	r3, #32
 8014e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e62:	e076      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014e64:	2340      	movs	r3, #64	; 0x40
 8014e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e6a:	e072      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014e6c:	2380      	movs	r3, #128	; 0x80
 8014e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e72:	e06e      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	4a75      	ldr	r2, [pc, #468]	; (8015050 <UART_SetConfig+0x6a4>)
 8014e7a:	4293      	cmp	r3, r2
 8014e7c:	d130      	bne.n	8014ee0 <UART_SetConfig+0x534>
 8014e7e:	4b72      	ldr	r3, [pc, #456]	; (8015048 <UART_SetConfig+0x69c>)
 8014e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e82:	f003 0307 	and.w	r3, r3, #7
 8014e86:	2b05      	cmp	r3, #5
 8014e88:	d826      	bhi.n	8014ed8 <UART_SetConfig+0x52c>
 8014e8a:	a201      	add	r2, pc, #4	; (adr r2, 8014e90 <UART_SetConfig+0x4e4>)
 8014e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e90:	08014ea9 	.word	0x08014ea9
 8014e94:	08014eb1 	.word	0x08014eb1
 8014e98:	08014eb9 	.word	0x08014eb9
 8014e9c:	08014ec1 	.word	0x08014ec1
 8014ea0:	08014ec9 	.word	0x08014ec9
 8014ea4:	08014ed1 	.word	0x08014ed1
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eae:	e050      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014eb0:	2304      	movs	r3, #4
 8014eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eb6:	e04c      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014eb8:	2308      	movs	r3, #8
 8014eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ebe:	e048      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014ec0:	2310      	movs	r3, #16
 8014ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ec6:	e044      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014ec8:	2320      	movs	r3, #32
 8014eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ece:	e040      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014ed0:	2340      	movs	r3, #64	; 0x40
 8014ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ed6:	e03c      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014ed8:	2380      	movs	r3, #128	; 0x80
 8014eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ede:	e038      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	4a5b      	ldr	r2, [pc, #364]	; (8015054 <UART_SetConfig+0x6a8>)
 8014ee6:	4293      	cmp	r3, r2
 8014ee8:	d130      	bne.n	8014f4c <UART_SetConfig+0x5a0>
 8014eea:	4b57      	ldr	r3, [pc, #348]	; (8015048 <UART_SetConfig+0x69c>)
 8014eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014eee:	f003 0307 	and.w	r3, r3, #7
 8014ef2:	2b05      	cmp	r3, #5
 8014ef4:	d826      	bhi.n	8014f44 <UART_SetConfig+0x598>
 8014ef6:	a201      	add	r2, pc, #4	; (adr r2, 8014efc <UART_SetConfig+0x550>)
 8014ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014efc:	08014f15 	.word	0x08014f15
 8014f00:	08014f1d 	.word	0x08014f1d
 8014f04:	08014f25 	.word	0x08014f25
 8014f08:	08014f2d 	.word	0x08014f2d
 8014f0c:	08014f35 	.word	0x08014f35
 8014f10:	08014f3d 	.word	0x08014f3d
 8014f14:	2302      	movs	r3, #2
 8014f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f1a:	e01a      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014f1c:	2304      	movs	r3, #4
 8014f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f22:	e016      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014f24:	2308      	movs	r3, #8
 8014f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f2a:	e012      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014f2c:	2310      	movs	r3, #16
 8014f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f32:	e00e      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014f34:	2320      	movs	r3, #32
 8014f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f3a:	e00a      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014f3c:	2340      	movs	r3, #64	; 0x40
 8014f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f42:	e006      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014f44:	2380      	movs	r3, #128	; 0x80
 8014f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f4a:	e002      	b.n	8014f52 <UART_SetConfig+0x5a6>
 8014f4c:	2380      	movs	r3, #128	; 0x80
 8014f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	4a3f      	ldr	r2, [pc, #252]	; (8015054 <UART_SetConfig+0x6a8>)
 8014f58:	4293      	cmp	r3, r2
 8014f5a:	f040 80f8 	bne.w	801514e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014f5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014f62:	2b20      	cmp	r3, #32
 8014f64:	dc46      	bgt.n	8014ff4 <UART_SetConfig+0x648>
 8014f66:	2b02      	cmp	r3, #2
 8014f68:	f2c0 8082 	blt.w	8015070 <UART_SetConfig+0x6c4>
 8014f6c:	3b02      	subs	r3, #2
 8014f6e:	2b1e      	cmp	r3, #30
 8014f70:	d87e      	bhi.n	8015070 <UART_SetConfig+0x6c4>
 8014f72:	a201      	add	r2, pc, #4	; (adr r2, 8014f78 <UART_SetConfig+0x5cc>)
 8014f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f78:	08014ffb 	.word	0x08014ffb
 8014f7c:	08015071 	.word	0x08015071
 8014f80:	08015003 	.word	0x08015003
 8014f84:	08015071 	.word	0x08015071
 8014f88:	08015071 	.word	0x08015071
 8014f8c:	08015071 	.word	0x08015071
 8014f90:	08015013 	.word	0x08015013
 8014f94:	08015071 	.word	0x08015071
 8014f98:	08015071 	.word	0x08015071
 8014f9c:	08015071 	.word	0x08015071
 8014fa0:	08015071 	.word	0x08015071
 8014fa4:	08015071 	.word	0x08015071
 8014fa8:	08015071 	.word	0x08015071
 8014fac:	08015071 	.word	0x08015071
 8014fb0:	08015023 	.word	0x08015023
 8014fb4:	08015071 	.word	0x08015071
 8014fb8:	08015071 	.word	0x08015071
 8014fbc:	08015071 	.word	0x08015071
 8014fc0:	08015071 	.word	0x08015071
 8014fc4:	08015071 	.word	0x08015071
 8014fc8:	08015071 	.word	0x08015071
 8014fcc:	08015071 	.word	0x08015071
 8014fd0:	08015071 	.word	0x08015071
 8014fd4:	08015071 	.word	0x08015071
 8014fd8:	08015071 	.word	0x08015071
 8014fdc:	08015071 	.word	0x08015071
 8014fe0:	08015071 	.word	0x08015071
 8014fe4:	08015071 	.word	0x08015071
 8014fe8:	08015071 	.word	0x08015071
 8014fec:	08015071 	.word	0x08015071
 8014ff0:	08015063 	.word	0x08015063
 8014ff4:	2b40      	cmp	r3, #64	; 0x40
 8014ff6:	d037      	beq.n	8015068 <UART_SetConfig+0x6bc>
 8014ff8:	e03a      	b.n	8015070 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8014ffa:	f7fb fc17 	bl	801082c <HAL_RCCEx_GetD3PCLK1Freq>
 8014ffe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015000:	e03c      	b.n	801507c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015006:	4618      	mov	r0, r3
 8015008:	f7fb fc26 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801500e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015010:	e034      	b.n	801507c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015012:	f107 0318 	add.w	r3, r7, #24
 8015016:	4618      	mov	r0, r3
 8015018:	f7fb fd72 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801501c:	69fb      	ldr	r3, [r7, #28]
 801501e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015020:	e02c      	b.n	801507c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015022:	4b09      	ldr	r3, [pc, #36]	; (8015048 <UART_SetConfig+0x69c>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	f003 0320 	and.w	r3, r3, #32
 801502a:	2b00      	cmp	r3, #0
 801502c:	d016      	beq.n	801505c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801502e:	4b06      	ldr	r3, [pc, #24]	; (8015048 <UART_SetConfig+0x69c>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	08db      	lsrs	r3, r3, #3
 8015034:	f003 0303 	and.w	r3, r3, #3
 8015038:	4a07      	ldr	r2, [pc, #28]	; (8015058 <UART_SetConfig+0x6ac>)
 801503a:	fa22 f303 	lsr.w	r3, r2, r3
 801503e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015040:	e01c      	b.n	801507c <UART_SetConfig+0x6d0>
 8015042:	bf00      	nop
 8015044:	40011400 	.word	0x40011400
 8015048:	58024400 	.word	0x58024400
 801504c:	40007800 	.word	0x40007800
 8015050:	40007c00 	.word	0x40007c00
 8015054:	58000c00 	.word	0x58000c00
 8015058:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801505c:	4b9d      	ldr	r3, [pc, #628]	; (80152d4 <UART_SetConfig+0x928>)
 801505e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015060:	e00c      	b.n	801507c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015062:	4b9d      	ldr	r3, [pc, #628]	; (80152d8 <UART_SetConfig+0x92c>)
 8015064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015066:	e009      	b.n	801507c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801506c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801506e:	e005      	b.n	801507c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015070:	2300      	movs	r3, #0
 8015072:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015074:	2301      	movs	r3, #1
 8015076:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801507a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801507c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801507e:	2b00      	cmp	r3, #0
 8015080:	f000 81de 	beq.w	8015440 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015088:	4a94      	ldr	r2, [pc, #592]	; (80152dc <UART_SetConfig+0x930>)
 801508a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801508e:	461a      	mov	r2, r3
 8015090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015092:	fbb3 f3f2 	udiv	r3, r3, r2
 8015096:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	685a      	ldr	r2, [r3, #4]
 801509c:	4613      	mov	r3, r2
 801509e:	005b      	lsls	r3, r3, #1
 80150a0:	4413      	add	r3, r2
 80150a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d305      	bcc.n	80150b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80150ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d903      	bls.n	80150bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80150b4:	2301      	movs	r3, #1
 80150b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80150ba:	e1c1      	b.n	8015440 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80150bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150be:	2200      	movs	r2, #0
 80150c0:	60bb      	str	r3, [r7, #8]
 80150c2:	60fa      	str	r2, [r7, #12]
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150c8:	4a84      	ldr	r2, [pc, #528]	; (80152dc <UART_SetConfig+0x930>)
 80150ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80150ce:	b29b      	uxth	r3, r3
 80150d0:	2200      	movs	r2, #0
 80150d2:	603b      	str	r3, [r7, #0]
 80150d4:	607a      	str	r2, [r7, #4]
 80150d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80150da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80150de:	f7eb f8ff 	bl	80002e0 <__aeabi_uldivmod>
 80150e2:	4602      	mov	r2, r0
 80150e4:	460b      	mov	r3, r1
 80150e6:	4610      	mov	r0, r2
 80150e8:	4619      	mov	r1, r3
 80150ea:	f04f 0200 	mov.w	r2, #0
 80150ee:	f04f 0300 	mov.w	r3, #0
 80150f2:	020b      	lsls	r3, r1, #8
 80150f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80150f8:	0202      	lsls	r2, r0, #8
 80150fa:	6979      	ldr	r1, [r7, #20]
 80150fc:	6849      	ldr	r1, [r1, #4]
 80150fe:	0849      	lsrs	r1, r1, #1
 8015100:	2000      	movs	r0, #0
 8015102:	460c      	mov	r4, r1
 8015104:	4605      	mov	r5, r0
 8015106:	eb12 0804 	adds.w	r8, r2, r4
 801510a:	eb43 0905 	adc.w	r9, r3, r5
 801510e:	697b      	ldr	r3, [r7, #20]
 8015110:	685b      	ldr	r3, [r3, #4]
 8015112:	2200      	movs	r2, #0
 8015114:	469a      	mov	sl, r3
 8015116:	4693      	mov	fp, r2
 8015118:	4652      	mov	r2, sl
 801511a:	465b      	mov	r3, fp
 801511c:	4640      	mov	r0, r8
 801511e:	4649      	mov	r1, r9
 8015120:	f7eb f8de 	bl	80002e0 <__aeabi_uldivmod>
 8015124:	4602      	mov	r2, r0
 8015126:	460b      	mov	r3, r1
 8015128:	4613      	mov	r3, r2
 801512a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801512e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015132:	d308      	bcc.n	8015146 <UART_SetConfig+0x79a>
 8015134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801513a:	d204      	bcs.n	8015146 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015142:	60da      	str	r2, [r3, #12]
 8015144:	e17c      	b.n	8015440 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8015146:	2301      	movs	r3, #1
 8015148:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801514c:	e178      	b.n	8015440 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	69db      	ldr	r3, [r3, #28]
 8015152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015156:	f040 80c5 	bne.w	80152e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801515a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801515e:	2b20      	cmp	r3, #32
 8015160:	dc48      	bgt.n	80151f4 <UART_SetConfig+0x848>
 8015162:	2b00      	cmp	r3, #0
 8015164:	db7b      	blt.n	801525e <UART_SetConfig+0x8b2>
 8015166:	2b20      	cmp	r3, #32
 8015168:	d879      	bhi.n	801525e <UART_SetConfig+0x8b2>
 801516a:	a201      	add	r2, pc, #4	; (adr r2, 8015170 <UART_SetConfig+0x7c4>)
 801516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015170:	080151fb 	.word	0x080151fb
 8015174:	08015203 	.word	0x08015203
 8015178:	0801525f 	.word	0x0801525f
 801517c:	0801525f 	.word	0x0801525f
 8015180:	0801520b 	.word	0x0801520b
 8015184:	0801525f 	.word	0x0801525f
 8015188:	0801525f 	.word	0x0801525f
 801518c:	0801525f 	.word	0x0801525f
 8015190:	0801521b 	.word	0x0801521b
 8015194:	0801525f 	.word	0x0801525f
 8015198:	0801525f 	.word	0x0801525f
 801519c:	0801525f 	.word	0x0801525f
 80151a0:	0801525f 	.word	0x0801525f
 80151a4:	0801525f 	.word	0x0801525f
 80151a8:	0801525f 	.word	0x0801525f
 80151ac:	0801525f 	.word	0x0801525f
 80151b0:	0801522b 	.word	0x0801522b
 80151b4:	0801525f 	.word	0x0801525f
 80151b8:	0801525f 	.word	0x0801525f
 80151bc:	0801525f 	.word	0x0801525f
 80151c0:	0801525f 	.word	0x0801525f
 80151c4:	0801525f 	.word	0x0801525f
 80151c8:	0801525f 	.word	0x0801525f
 80151cc:	0801525f 	.word	0x0801525f
 80151d0:	0801525f 	.word	0x0801525f
 80151d4:	0801525f 	.word	0x0801525f
 80151d8:	0801525f 	.word	0x0801525f
 80151dc:	0801525f 	.word	0x0801525f
 80151e0:	0801525f 	.word	0x0801525f
 80151e4:	0801525f 	.word	0x0801525f
 80151e8:	0801525f 	.word	0x0801525f
 80151ec:	0801525f 	.word	0x0801525f
 80151f0:	08015251 	.word	0x08015251
 80151f4:	2b40      	cmp	r3, #64	; 0x40
 80151f6:	d02e      	beq.n	8015256 <UART_SetConfig+0x8aa>
 80151f8:	e031      	b.n	801525e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80151fa:	f7f9 fb1f 	bl	800e83c <HAL_RCC_GetPCLK1Freq>
 80151fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015200:	e033      	b.n	801526a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015202:	f7f9 fb31 	bl	800e868 <HAL_RCC_GetPCLK2Freq>
 8015206:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015208:	e02f      	b.n	801526a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801520a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801520e:	4618      	mov	r0, r3
 8015210:	f7fb fb22 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015218:	e027      	b.n	801526a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801521a:	f107 0318 	add.w	r3, r7, #24
 801521e:	4618      	mov	r0, r3
 8015220:	f7fb fc6e 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015224:	69fb      	ldr	r3, [r7, #28]
 8015226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015228:	e01f      	b.n	801526a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801522a:	4b2d      	ldr	r3, [pc, #180]	; (80152e0 <UART_SetConfig+0x934>)
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	f003 0320 	and.w	r3, r3, #32
 8015232:	2b00      	cmp	r3, #0
 8015234:	d009      	beq.n	801524a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015236:	4b2a      	ldr	r3, [pc, #168]	; (80152e0 <UART_SetConfig+0x934>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	08db      	lsrs	r3, r3, #3
 801523c:	f003 0303 	and.w	r3, r3, #3
 8015240:	4a24      	ldr	r2, [pc, #144]	; (80152d4 <UART_SetConfig+0x928>)
 8015242:	fa22 f303 	lsr.w	r3, r2, r3
 8015246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015248:	e00f      	b.n	801526a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801524a:	4b22      	ldr	r3, [pc, #136]	; (80152d4 <UART_SetConfig+0x928>)
 801524c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801524e:	e00c      	b.n	801526a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015250:	4b21      	ldr	r3, [pc, #132]	; (80152d8 <UART_SetConfig+0x92c>)
 8015252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015254:	e009      	b.n	801526a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801525a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801525c:	e005      	b.n	801526a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801525e:	2300      	movs	r3, #0
 8015260:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015262:	2301      	movs	r3, #1
 8015264:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015268:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801526a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801526c:	2b00      	cmp	r3, #0
 801526e:	f000 80e7 	beq.w	8015440 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015276:	4a19      	ldr	r2, [pc, #100]	; (80152dc <UART_SetConfig+0x930>)
 8015278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801527c:	461a      	mov	r2, r3
 801527e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015280:	fbb3 f3f2 	udiv	r3, r3, r2
 8015284:	005a      	lsls	r2, r3, #1
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	085b      	lsrs	r3, r3, #1
 801528c:	441a      	add	r2, r3
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	685b      	ldr	r3, [r3, #4]
 8015292:	fbb2 f3f3 	udiv	r3, r2, r3
 8015296:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801529a:	2b0f      	cmp	r3, #15
 801529c:	d916      	bls.n	80152cc <UART_SetConfig+0x920>
 801529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152a4:	d212      	bcs.n	80152cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80152a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152a8:	b29b      	uxth	r3, r3
 80152aa:	f023 030f 	bic.w	r3, r3, #15
 80152ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80152b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152b2:	085b      	lsrs	r3, r3, #1
 80152b4:	b29b      	uxth	r3, r3
 80152b6:	f003 0307 	and.w	r3, r3, #7
 80152ba:	b29a      	uxth	r2, r3
 80152bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80152be:	4313      	orrs	r3, r2
 80152c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80152c2:	697b      	ldr	r3, [r7, #20]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80152c8:	60da      	str	r2, [r3, #12]
 80152ca:	e0b9      	b.n	8015440 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80152cc:	2301      	movs	r3, #1
 80152ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80152d2:	e0b5      	b.n	8015440 <UART_SetConfig+0xa94>
 80152d4:	03d09000 	.word	0x03d09000
 80152d8:	003d0900 	.word	0x003d0900
 80152dc:	0801abcc 	.word	0x0801abcc
 80152e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80152e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80152e8:	2b20      	cmp	r3, #32
 80152ea:	dc49      	bgt.n	8015380 <UART_SetConfig+0x9d4>
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	db7c      	blt.n	80153ea <UART_SetConfig+0xa3e>
 80152f0:	2b20      	cmp	r3, #32
 80152f2:	d87a      	bhi.n	80153ea <UART_SetConfig+0xa3e>
 80152f4:	a201      	add	r2, pc, #4	; (adr r2, 80152fc <UART_SetConfig+0x950>)
 80152f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152fa:	bf00      	nop
 80152fc:	08015387 	.word	0x08015387
 8015300:	0801538f 	.word	0x0801538f
 8015304:	080153eb 	.word	0x080153eb
 8015308:	080153eb 	.word	0x080153eb
 801530c:	08015397 	.word	0x08015397
 8015310:	080153eb 	.word	0x080153eb
 8015314:	080153eb 	.word	0x080153eb
 8015318:	080153eb 	.word	0x080153eb
 801531c:	080153a7 	.word	0x080153a7
 8015320:	080153eb 	.word	0x080153eb
 8015324:	080153eb 	.word	0x080153eb
 8015328:	080153eb 	.word	0x080153eb
 801532c:	080153eb 	.word	0x080153eb
 8015330:	080153eb 	.word	0x080153eb
 8015334:	080153eb 	.word	0x080153eb
 8015338:	080153eb 	.word	0x080153eb
 801533c:	080153b7 	.word	0x080153b7
 8015340:	080153eb 	.word	0x080153eb
 8015344:	080153eb 	.word	0x080153eb
 8015348:	080153eb 	.word	0x080153eb
 801534c:	080153eb 	.word	0x080153eb
 8015350:	080153eb 	.word	0x080153eb
 8015354:	080153eb 	.word	0x080153eb
 8015358:	080153eb 	.word	0x080153eb
 801535c:	080153eb 	.word	0x080153eb
 8015360:	080153eb 	.word	0x080153eb
 8015364:	080153eb 	.word	0x080153eb
 8015368:	080153eb 	.word	0x080153eb
 801536c:	080153eb 	.word	0x080153eb
 8015370:	080153eb 	.word	0x080153eb
 8015374:	080153eb 	.word	0x080153eb
 8015378:	080153eb 	.word	0x080153eb
 801537c:	080153dd 	.word	0x080153dd
 8015380:	2b40      	cmp	r3, #64	; 0x40
 8015382:	d02e      	beq.n	80153e2 <UART_SetConfig+0xa36>
 8015384:	e031      	b.n	80153ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015386:	f7f9 fa59 	bl	800e83c <HAL_RCC_GetPCLK1Freq>
 801538a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801538c:	e033      	b.n	80153f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801538e:	f7f9 fa6b 	bl	800e868 <HAL_RCC_GetPCLK2Freq>
 8015392:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015394:	e02f      	b.n	80153f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801539a:	4618      	mov	r0, r3
 801539c:	f7fb fa5c 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80153a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153a4:	e027      	b.n	80153f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80153a6:	f107 0318 	add.w	r3, r7, #24
 80153aa:	4618      	mov	r0, r3
 80153ac:	f7fb fba8 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80153b0:	69fb      	ldr	r3, [r7, #28]
 80153b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153b4:	e01f      	b.n	80153f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80153b6:	4b2d      	ldr	r3, [pc, #180]	; (801546c <UART_SetConfig+0xac0>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	f003 0320 	and.w	r3, r3, #32
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d009      	beq.n	80153d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80153c2:	4b2a      	ldr	r3, [pc, #168]	; (801546c <UART_SetConfig+0xac0>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	08db      	lsrs	r3, r3, #3
 80153c8:	f003 0303 	and.w	r3, r3, #3
 80153cc:	4a28      	ldr	r2, [pc, #160]	; (8015470 <UART_SetConfig+0xac4>)
 80153ce:	fa22 f303 	lsr.w	r3, r2, r3
 80153d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80153d4:	e00f      	b.n	80153f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80153d6:	4b26      	ldr	r3, [pc, #152]	; (8015470 <UART_SetConfig+0xac4>)
 80153d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153da:	e00c      	b.n	80153f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80153dc:	4b25      	ldr	r3, [pc, #148]	; (8015474 <UART_SetConfig+0xac8>)
 80153de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153e0:	e009      	b.n	80153f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80153e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80153e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153e8:	e005      	b.n	80153f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80153ea:	2300      	movs	r3, #0
 80153ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80153ee:	2301      	movs	r3, #1
 80153f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80153f4:	bf00      	nop
    }

    if (pclk != 0U)
 80153f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d021      	beq.n	8015440 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80153fc:	697b      	ldr	r3, [r7, #20]
 80153fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015400:	4a1d      	ldr	r2, [pc, #116]	; (8015478 <UART_SetConfig+0xacc>)
 8015402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015406:	461a      	mov	r2, r3
 8015408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801540a:	fbb3 f2f2 	udiv	r2, r3, r2
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	685b      	ldr	r3, [r3, #4]
 8015412:	085b      	lsrs	r3, r3, #1
 8015414:	441a      	add	r2, r3
 8015416:	697b      	ldr	r3, [r7, #20]
 8015418:	685b      	ldr	r3, [r3, #4]
 801541a:	fbb2 f3f3 	udiv	r3, r2, r3
 801541e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015422:	2b0f      	cmp	r3, #15
 8015424:	d909      	bls.n	801543a <UART_SetConfig+0xa8e>
 8015426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801542c:	d205      	bcs.n	801543a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015430:	b29a      	uxth	r2, r3
 8015432:	697b      	ldr	r3, [r7, #20]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	60da      	str	r2, [r3, #12]
 8015438:	e002      	b.n	8015440 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801543a:	2301      	movs	r3, #1
 801543c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	2201      	movs	r2, #1
 8015444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	2201      	movs	r2, #1
 801544c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	2200      	movs	r2, #0
 8015454:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	2200      	movs	r2, #0
 801545a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801545c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015460:	4618      	mov	r0, r3
 8015462:	3748      	adds	r7, #72	; 0x48
 8015464:	46bd      	mov	sp, r7
 8015466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801546a:	bf00      	nop
 801546c:	58024400 	.word	0x58024400
 8015470:	03d09000 	.word	0x03d09000
 8015474:	003d0900 	.word	0x003d0900
 8015478:	0801abcc 	.word	0x0801abcc

0801547c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801547c:	b480      	push	{r7}
 801547e:	b083      	sub	sp, #12
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015488:	f003 0308 	and.w	r3, r3, #8
 801548c:	2b00      	cmp	r3, #0
 801548e:	d00a      	beq.n	80154a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	430a      	orrs	r2, r1
 80154a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154aa:	f003 0301 	and.w	r3, r3, #1
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d00a      	beq.n	80154c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	430a      	orrs	r2, r1
 80154c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154cc:	f003 0302 	and.w	r3, r3, #2
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d00a      	beq.n	80154ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	430a      	orrs	r2, r1
 80154e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154ee:	f003 0304 	and.w	r3, r3, #4
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d00a      	beq.n	801550c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	685b      	ldr	r3, [r3, #4]
 80154fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	430a      	orrs	r2, r1
 801550a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015510:	f003 0310 	and.w	r3, r3, #16
 8015514:	2b00      	cmp	r3, #0
 8015516:	d00a      	beq.n	801552e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	689b      	ldr	r3, [r3, #8]
 801551e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	430a      	orrs	r2, r1
 801552c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015532:	f003 0320 	and.w	r3, r3, #32
 8015536:	2b00      	cmp	r3, #0
 8015538:	d00a      	beq.n	8015550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	689b      	ldr	r3, [r3, #8]
 8015540:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	430a      	orrs	r2, r1
 801554e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015558:	2b00      	cmp	r3, #0
 801555a:	d01a      	beq.n	8015592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	430a      	orrs	r2, r1
 8015570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801557a:	d10a      	bne.n	8015592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	430a      	orrs	r2, r1
 8015590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801559a:	2b00      	cmp	r3, #0
 801559c:	d00a      	beq.n	80155b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	685b      	ldr	r3, [r3, #4]
 80155a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	430a      	orrs	r2, r1
 80155b2:	605a      	str	r2, [r3, #4]
  }
}
 80155b4:	bf00      	nop
 80155b6:	370c      	adds	r7, #12
 80155b8:	46bd      	mov	sp, r7
 80155ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155be:	4770      	bx	lr

080155c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b098      	sub	sp, #96	; 0x60
 80155c4:	af02      	add	r7, sp, #8
 80155c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2200      	movs	r2, #0
 80155cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80155d0:	f7f0 f8ee 	bl	80057b0 <HAL_GetTick>
 80155d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	f003 0308 	and.w	r3, r3, #8
 80155e0:	2b08      	cmp	r3, #8
 80155e2:	d12f      	bne.n	8015644 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80155e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80155e8:	9300      	str	r3, [sp, #0]
 80155ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155ec:	2200      	movs	r2, #0
 80155ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f000 f88e 	bl	8015714 <UART_WaitOnFlagUntilTimeout>
 80155f8:	4603      	mov	r3, r0
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d022      	beq.n	8015644 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015606:	e853 3f00 	ldrex	r3, [r3]
 801560a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801560e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015612:	653b      	str	r3, [r7, #80]	; 0x50
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	461a      	mov	r2, r3
 801561a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801561c:	647b      	str	r3, [r7, #68]	; 0x44
 801561e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015620:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015624:	e841 2300 	strex	r3, r2, [r1]
 8015628:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801562a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801562c:	2b00      	cmp	r3, #0
 801562e:	d1e6      	bne.n	80155fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2220      	movs	r2, #32
 8015634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2200      	movs	r2, #0
 801563c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015640:	2303      	movs	r3, #3
 8015642:	e063      	b.n	801570c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	f003 0304 	and.w	r3, r3, #4
 801564e:	2b04      	cmp	r3, #4
 8015650:	d149      	bne.n	80156e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015652:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015656:	9300      	str	r3, [sp, #0]
 8015658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801565a:	2200      	movs	r2, #0
 801565c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015660:	6878      	ldr	r0, [r7, #4]
 8015662:	f000 f857 	bl	8015714 <UART_WaitOnFlagUntilTimeout>
 8015666:	4603      	mov	r3, r0
 8015668:	2b00      	cmp	r3, #0
 801566a:	d03c      	beq.n	80156e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015674:	e853 3f00 	ldrex	r3, [r3]
 8015678:	623b      	str	r3, [r7, #32]
   return(result);
 801567a:	6a3b      	ldr	r3, [r7, #32]
 801567c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	461a      	mov	r2, r3
 8015688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801568a:	633b      	str	r3, [r7, #48]	; 0x30
 801568c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801568e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015692:	e841 2300 	strex	r3, r2, [r1]
 8015696:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801569a:	2b00      	cmp	r3, #0
 801569c:	d1e6      	bne.n	801566c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	3308      	adds	r3, #8
 80156a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	e853 3f00 	ldrex	r3, [r3]
 80156ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	f023 0301 	bic.w	r3, r3, #1
 80156b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	3308      	adds	r3, #8
 80156bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80156be:	61fa      	str	r2, [r7, #28]
 80156c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156c2:	69b9      	ldr	r1, [r7, #24]
 80156c4:	69fa      	ldr	r2, [r7, #28]
 80156c6:	e841 2300 	strex	r3, r2, [r1]
 80156ca:	617b      	str	r3, [r7, #20]
   return(result);
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d1e5      	bne.n	801569e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	2220      	movs	r2, #32
 80156d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2200      	movs	r2, #0
 80156de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80156e2:	2303      	movs	r3, #3
 80156e4:	e012      	b.n	801570c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2220      	movs	r2, #32
 80156ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2220      	movs	r2, #32
 80156f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2200      	movs	r2, #0
 80156fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2200      	movs	r2, #0
 8015700:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	2200      	movs	r2, #0
 8015706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801570a:	2300      	movs	r3, #0
}
 801570c:	4618      	mov	r0, r3
 801570e:	3758      	adds	r7, #88	; 0x58
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}

08015714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b084      	sub	sp, #16
 8015718:	af00      	add	r7, sp, #0
 801571a:	60f8      	str	r0, [r7, #12]
 801571c:	60b9      	str	r1, [r7, #8]
 801571e:	603b      	str	r3, [r7, #0]
 8015720:	4613      	mov	r3, r2
 8015722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015724:	e04f      	b.n	80157c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015726:	69bb      	ldr	r3, [r7, #24]
 8015728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801572c:	d04b      	beq.n	80157c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801572e:	f7f0 f83f 	bl	80057b0 <HAL_GetTick>
 8015732:	4602      	mov	r2, r0
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	1ad3      	subs	r3, r2, r3
 8015738:	69ba      	ldr	r2, [r7, #24]
 801573a:	429a      	cmp	r2, r3
 801573c:	d302      	bcc.n	8015744 <UART_WaitOnFlagUntilTimeout+0x30>
 801573e:	69bb      	ldr	r3, [r7, #24]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d101      	bne.n	8015748 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015744:	2303      	movs	r3, #3
 8015746:	e04e      	b.n	80157e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	f003 0304 	and.w	r3, r3, #4
 8015752:	2b00      	cmp	r3, #0
 8015754:	d037      	beq.n	80157c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	2b80      	cmp	r3, #128	; 0x80
 801575a:	d034      	beq.n	80157c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801575c:	68bb      	ldr	r3, [r7, #8]
 801575e:	2b40      	cmp	r3, #64	; 0x40
 8015760:	d031      	beq.n	80157c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	69db      	ldr	r3, [r3, #28]
 8015768:	f003 0308 	and.w	r3, r3, #8
 801576c:	2b08      	cmp	r3, #8
 801576e:	d110      	bne.n	8015792 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	2208      	movs	r2, #8
 8015776:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015778:	68f8      	ldr	r0, [r7, #12]
 801577a:	f000 f95b 	bl	8015a34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	2208      	movs	r2, #8
 8015782:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	2200      	movs	r2, #0
 801578a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801578e:	2301      	movs	r3, #1
 8015790:	e029      	b.n	80157e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	69db      	ldr	r3, [r3, #28]
 8015798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801579c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80157a0:	d111      	bne.n	80157c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80157aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80157ac:	68f8      	ldr	r0, [r7, #12]
 80157ae:	f000 f941 	bl	8015a34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	2220      	movs	r2, #32
 80157b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	2200      	movs	r2, #0
 80157be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80157c2:	2303      	movs	r3, #3
 80157c4:	e00f      	b.n	80157e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	69da      	ldr	r2, [r3, #28]
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	4013      	ands	r3, r2
 80157d0:	68ba      	ldr	r2, [r7, #8]
 80157d2:	429a      	cmp	r2, r3
 80157d4:	bf0c      	ite	eq
 80157d6:	2301      	moveq	r3, #1
 80157d8:	2300      	movne	r3, #0
 80157da:	b2db      	uxtb	r3, r3
 80157dc:	461a      	mov	r2, r3
 80157de:	79fb      	ldrb	r3, [r7, #7]
 80157e0:	429a      	cmp	r2, r3
 80157e2:	d0a0      	beq.n	8015726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80157e4:	2300      	movs	r3, #0
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3710      	adds	r7, #16
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}
	...

080157f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80157f0:	b480      	push	{r7}
 80157f2:	b0a3      	sub	sp, #140	; 0x8c
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	60f8      	str	r0, [r7, #12]
 80157f8:	60b9      	str	r1, [r7, #8]
 80157fa:	4613      	mov	r3, r2
 80157fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	68ba      	ldr	r2, [r7, #8]
 8015802:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	88fa      	ldrh	r2, [r7, #6]
 8015808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	88fa      	ldrh	r2, [r7, #6]
 8015810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	2200      	movs	r2, #0
 8015818:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	689b      	ldr	r3, [r3, #8]
 801581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015822:	d10e      	bne.n	8015842 <UART_Start_Receive_IT+0x52>
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	691b      	ldr	r3, [r3, #16]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d105      	bne.n	8015838 <UART_Start_Receive_IT+0x48>
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015836:	e02d      	b.n	8015894 <UART_Start_Receive_IT+0xa4>
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	22ff      	movs	r2, #255	; 0xff
 801583c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015840:	e028      	b.n	8015894 <UART_Start_Receive_IT+0xa4>
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	689b      	ldr	r3, [r3, #8]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d10d      	bne.n	8015866 <UART_Start_Receive_IT+0x76>
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	691b      	ldr	r3, [r3, #16]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d104      	bne.n	801585c <UART_Start_Receive_IT+0x6c>
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	22ff      	movs	r2, #255	; 0xff
 8015856:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801585a:	e01b      	b.n	8015894 <UART_Start_Receive_IT+0xa4>
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	227f      	movs	r2, #127	; 0x7f
 8015860:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015864:	e016      	b.n	8015894 <UART_Start_Receive_IT+0xa4>
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	689b      	ldr	r3, [r3, #8]
 801586a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801586e:	d10d      	bne.n	801588c <UART_Start_Receive_IT+0x9c>
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	691b      	ldr	r3, [r3, #16]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d104      	bne.n	8015882 <UART_Start_Receive_IT+0x92>
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	227f      	movs	r2, #127	; 0x7f
 801587c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015880:	e008      	b.n	8015894 <UART_Start_Receive_IT+0xa4>
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	223f      	movs	r2, #63	; 0x3f
 8015886:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801588a:	e003      	b.n	8015894 <UART_Start_Receive_IT+0xa4>
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2200      	movs	r2, #0
 8015890:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2200      	movs	r2, #0
 8015898:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	2222      	movs	r2, #34	; 0x22
 80158a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	3308      	adds	r3, #8
 80158aa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80158ae:	e853 3f00 	ldrex	r3, [r3]
 80158b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80158b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80158b6:	f043 0301 	orr.w	r3, r3, #1
 80158ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	3308      	adds	r3, #8
 80158c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80158c8:	673a      	str	r2, [r7, #112]	; 0x70
 80158ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80158ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80158d0:	e841 2300 	strex	r3, r2, [r1]
 80158d4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80158d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d1e3      	bne.n	80158a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80158e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80158e4:	d14f      	bne.n	8015986 <UART_Start_Receive_IT+0x196>
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80158ec:	88fa      	ldrh	r2, [r7, #6]
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d349      	bcc.n	8015986 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	689b      	ldr	r3, [r3, #8]
 80158f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80158fa:	d107      	bne.n	801590c <UART_Start_Receive_IT+0x11c>
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	691b      	ldr	r3, [r3, #16]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d103      	bne.n	801590c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	4a47      	ldr	r2, [pc, #284]	; (8015a24 <UART_Start_Receive_IT+0x234>)
 8015908:	675a      	str	r2, [r3, #116]	; 0x74
 801590a:	e002      	b.n	8015912 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	4a46      	ldr	r2, [pc, #280]	; (8015a28 <UART_Start_Receive_IT+0x238>)
 8015910:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	691b      	ldr	r3, [r3, #16]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d01a      	beq.n	8015950 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015922:	e853 3f00 	ldrex	r3, [r3]
 8015926:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801592a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801592e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	461a      	mov	r2, r3
 8015938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801593c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801593e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015940:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015942:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015944:	e841 2300 	strex	r3, r2, [r1]
 8015948:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801594a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801594c:	2b00      	cmp	r3, #0
 801594e:	d1e4      	bne.n	801591a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	3308      	adds	r3, #8
 8015956:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801595a:	e853 3f00 	ldrex	r3, [r3]
 801595e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015966:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	3308      	adds	r3, #8
 801596e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015970:	64ba      	str	r2, [r7, #72]	; 0x48
 8015972:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015974:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015978:	e841 2300 	strex	r3, r2, [r1]
 801597c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801597e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015980:	2b00      	cmp	r3, #0
 8015982:	d1e5      	bne.n	8015950 <UART_Start_Receive_IT+0x160>
 8015984:	e046      	b.n	8015a14 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	689b      	ldr	r3, [r3, #8]
 801598a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801598e:	d107      	bne.n	80159a0 <UART_Start_Receive_IT+0x1b0>
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	691b      	ldr	r3, [r3, #16]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d103      	bne.n	80159a0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	4a24      	ldr	r2, [pc, #144]	; (8015a2c <UART_Start_Receive_IT+0x23c>)
 801599c:	675a      	str	r2, [r3, #116]	; 0x74
 801599e:	e002      	b.n	80159a6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	4a23      	ldr	r2, [pc, #140]	; (8015a30 <UART_Start_Receive_IT+0x240>)
 80159a4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	691b      	ldr	r3, [r3, #16]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d019      	beq.n	80159e2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b6:	e853 3f00 	ldrex	r3, [r3]
 80159ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80159bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80159c2:	677b      	str	r3, [r7, #116]	; 0x74
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	461a      	mov	r2, r3
 80159ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159cc:	637b      	str	r3, [r7, #52]	; 0x34
 80159ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80159d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80159d4:	e841 2300 	strex	r3, r2, [r1]
 80159d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80159da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d1e6      	bne.n	80159ae <UART_Start_Receive_IT+0x1be>
 80159e0:	e018      	b.n	8015a14 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159e8:	697b      	ldr	r3, [r7, #20]
 80159ea:	e853 3f00 	ldrex	r3, [r3]
 80159ee:	613b      	str	r3, [r7, #16]
   return(result);
 80159f0:	693b      	ldr	r3, [r7, #16]
 80159f2:	f043 0320 	orr.w	r3, r3, #32
 80159f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	461a      	mov	r2, r3
 80159fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015a00:	623b      	str	r3, [r7, #32]
 8015a02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a04:	69f9      	ldr	r1, [r7, #28]
 8015a06:	6a3a      	ldr	r2, [r7, #32]
 8015a08:	e841 2300 	strex	r3, r2, [r1]
 8015a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8015a0e:	69bb      	ldr	r3, [r7, #24]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d1e6      	bne.n	80159e2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015a14:	2300      	movs	r3, #0
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	378c      	adds	r7, #140	; 0x8c
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a20:	4770      	bx	lr
 8015a22:	bf00      	nop
 8015a24:	08016255 	.word	0x08016255
 8015a28:	08015ef5 	.word	0x08015ef5
 8015a2c:	08015d3d 	.word	0x08015d3d
 8015a30:	08015b85 	.word	0x08015b85

08015a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015a34:	b480      	push	{r7}
 8015a36:	b095      	sub	sp, #84	; 0x54
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a44:	e853 3f00 	ldrex	r3, [r3]
 8015a48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015a50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	461a      	mov	r2, r3
 8015a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8015a5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015a60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015a62:	e841 2300 	strex	r3, r2, [r1]
 8015a66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d1e6      	bne.n	8015a3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	3308      	adds	r3, #8
 8015a74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a76:	6a3b      	ldr	r3, [r7, #32]
 8015a78:	e853 3f00 	ldrex	r3, [r3]
 8015a7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8015a7e:	69fa      	ldr	r2, [r7, #28]
 8015a80:	4b1e      	ldr	r3, [pc, #120]	; (8015afc <UART_EndRxTransfer+0xc8>)
 8015a82:	4013      	ands	r3, r2
 8015a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	3308      	adds	r3, #8
 8015a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015a90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a96:	e841 2300 	strex	r3, r2, [r1]
 8015a9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d1e5      	bne.n	8015a6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015aa6:	2b01      	cmp	r3, #1
 8015aa8:	d118      	bne.n	8015adc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	e853 3f00 	ldrex	r3, [r3]
 8015ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	f023 0310 	bic.w	r3, r3, #16
 8015abe:	647b      	str	r3, [r7, #68]	; 0x44
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ac8:	61bb      	str	r3, [r7, #24]
 8015aca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015acc:	6979      	ldr	r1, [r7, #20]
 8015ace:	69ba      	ldr	r2, [r7, #24]
 8015ad0:	e841 2300 	strex	r3, r2, [r1]
 8015ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8015ad6:	693b      	ldr	r3, [r7, #16]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d1e6      	bne.n	8015aaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	2220      	movs	r2, #32
 8015ae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	2200      	movs	r2, #0
 8015aee:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015af0:	bf00      	nop
 8015af2:	3754      	adds	r7, #84	; 0x54
 8015af4:	46bd      	mov	sp, r7
 8015af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afa:	4770      	bx	lr
 8015afc:	effffffe 	.word	0xeffffffe

08015b00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b084      	sub	sp, #16
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	2200      	movs	r2, #0
 8015b12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	2200      	movs	r2, #0
 8015b1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015b1e:	68f8      	ldr	r0, [r7, #12]
 8015b20:	f7fe ff2e 	bl	8014980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015b24:	bf00      	nop
 8015b26:	3710      	adds	r7, #16
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd80      	pop	{r7, pc}

08015b2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b088      	sub	sp, #32
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	e853 3f00 	ldrex	r3, [r3]
 8015b40:	60bb      	str	r3, [r7, #8]
   return(result);
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015b48:	61fb      	str	r3, [r7, #28]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	461a      	mov	r2, r3
 8015b50:	69fb      	ldr	r3, [r7, #28]
 8015b52:	61bb      	str	r3, [r7, #24]
 8015b54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b56:	6979      	ldr	r1, [r7, #20]
 8015b58:	69ba      	ldr	r2, [r7, #24]
 8015b5a:	e841 2300 	strex	r3, r2, [r1]
 8015b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8015b60:	693b      	ldr	r3, [r7, #16]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d1e6      	bne.n	8015b34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	2220      	movs	r2, #32
 8015b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	2200      	movs	r2, #0
 8015b72:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015b74:	6878      	ldr	r0, [r7, #4]
 8015b76:	f7fe fef9 	bl	801496c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015b7a:	bf00      	nop
 8015b7c:	3720      	adds	r7, #32
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
	...

08015b84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b09c      	sub	sp, #112	; 0x70
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015b92:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b9c:	2b22      	cmp	r3, #34	; 0x22
 8015b9e:	f040 80be 	bne.w	8015d1e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ba8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015bac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8015bb0:	b2d9      	uxtb	r1, r3
 8015bb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015bb6:	b2da      	uxtb	r2, r3
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015bbc:	400a      	ands	r2, r1
 8015bbe:	b2d2      	uxtb	r2, r2
 8015bc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015bc6:	1c5a      	adds	r2, r3, #1
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015bd2:	b29b      	uxth	r3, r3
 8015bd4:	3b01      	subs	r3, #1
 8015bd6:	b29a      	uxth	r2, r3
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015be4:	b29b      	uxth	r3, r3
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	f040 80a1 	bne.w	8015d2e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bf4:	e853 3f00 	ldrex	r3, [r3]
 8015bf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	461a      	mov	r2, r3
 8015c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8015c0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015c12:	e841 2300 	strex	r3, r2, [r1]
 8015c16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d1e6      	bne.n	8015bec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	3308      	adds	r3, #8
 8015c24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c28:	e853 3f00 	ldrex	r3, [r3]
 8015c2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c30:	f023 0301 	bic.w	r3, r3, #1
 8015c34:	667b      	str	r3, [r7, #100]	; 0x64
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	3308      	adds	r3, #8
 8015c3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015c3e:	647a      	str	r2, [r7, #68]	; 0x44
 8015c40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015c44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c46:	e841 2300 	strex	r3, r2, [r1]
 8015c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d1e5      	bne.n	8015c1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	2220      	movs	r2, #32
 8015c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2200      	movs	r2, #0
 8015c64:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4a33      	ldr	r2, [pc, #204]	; (8015d38 <UART_RxISR_8BIT+0x1b4>)
 8015c6c:	4293      	cmp	r3, r2
 8015c6e:	d01f      	beq.n	8015cb0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	685b      	ldr	r3, [r3, #4]
 8015c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d018      	beq.n	8015cb0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c86:	e853 3f00 	ldrex	r3, [r3]
 8015c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8015c8c:	6a3b      	ldr	r3, [r7, #32]
 8015c8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015c92:	663b      	str	r3, [r7, #96]	; 0x60
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	461a      	mov	r2, r3
 8015c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8015c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ca4:	e841 2300 	strex	r3, r2, [r1]
 8015ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d1e6      	bne.n	8015c7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015cb4:	2b01      	cmp	r3, #1
 8015cb6:	d12e      	bne.n	8015d16 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2200      	movs	r2, #0
 8015cbc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	e853 3f00 	ldrex	r3, [r3]
 8015cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	f023 0310 	bic.w	r3, r3, #16
 8015cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	461a      	mov	r2, r3
 8015cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015cdc:	61fb      	str	r3, [r7, #28]
 8015cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ce0:	69b9      	ldr	r1, [r7, #24]
 8015ce2:	69fa      	ldr	r2, [r7, #28]
 8015ce4:	e841 2300 	strex	r3, r2, [r1]
 8015ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8015cea:	697b      	ldr	r3, [r7, #20]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d1e6      	bne.n	8015cbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	69db      	ldr	r3, [r3, #28]
 8015cf6:	f003 0310 	and.w	r3, r3, #16
 8015cfa:	2b10      	cmp	r3, #16
 8015cfc:	d103      	bne.n	8015d06 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	2210      	movs	r2, #16
 8015d04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015d0c:	4619      	mov	r1, r3
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	f7fe fe40 	bl	8014994 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015d14:	e00b      	b.n	8015d2e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f7ec fe12 	bl	8002940 <HAL_UART_RxCpltCallback>
}
 8015d1c:	e007      	b.n	8015d2e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	699a      	ldr	r2, [r3, #24]
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	f042 0208 	orr.w	r2, r2, #8
 8015d2c:	619a      	str	r2, [r3, #24]
}
 8015d2e:	bf00      	nop
 8015d30:	3770      	adds	r7, #112	; 0x70
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	58000c00 	.word	0x58000c00

08015d3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b09c      	sub	sp, #112	; 0x70
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015d4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015d54:	2b22      	cmp	r3, #34	; 0x22
 8015d56:	f040 80be 	bne.w	8015ed6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d68:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8015d6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015d6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015d72:	4013      	ands	r3, r2
 8015d74:	b29a      	uxth	r2, r3
 8015d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015d78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d7e:	1c9a      	adds	r2, r3, #2
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015d8a:	b29b      	uxth	r3, r3
 8015d8c:	3b01      	subs	r3, #1
 8015d8e:	b29a      	uxth	r2, r3
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015d9c:	b29b      	uxth	r3, r3
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	f040 80a1 	bne.w	8015ee6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015dac:	e853 3f00 	ldrex	r3, [r3]
 8015db0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015db8:	667b      	str	r3, [r7, #100]	; 0x64
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	461a      	mov	r2, r3
 8015dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8015dc4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015dc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015dca:	e841 2300 	strex	r3, r2, [r1]
 8015dce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d1e6      	bne.n	8015da4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	3308      	adds	r3, #8
 8015ddc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015de0:	e853 3f00 	ldrex	r3, [r3]
 8015de4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de8:	f023 0301 	bic.w	r3, r3, #1
 8015dec:	663b      	str	r3, [r7, #96]	; 0x60
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	3308      	adds	r3, #8
 8015df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015df6:	643a      	str	r2, [r7, #64]	; 0x40
 8015df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015dfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015dfe:	e841 2300 	strex	r3, r2, [r1]
 8015e02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d1e5      	bne.n	8015dd6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	2220      	movs	r2, #32
 8015e0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	2200      	movs	r2, #0
 8015e16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	4a33      	ldr	r2, [pc, #204]	; (8015ef0 <UART_RxISR_16BIT+0x1b4>)
 8015e24:	4293      	cmp	r3, r2
 8015e26:	d01f      	beq.n	8015e68 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d018      	beq.n	8015e68 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e3c:	6a3b      	ldr	r3, [r7, #32]
 8015e3e:	e853 3f00 	ldrex	r3, [r3]
 8015e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8015e44:	69fb      	ldr	r3, [r7, #28]
 8015e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	461a      	mov	r2, r3
 8015e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015e56:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e5c:	e841 2300 	strex	r3, r2, [r1]
 8015e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d1e6      	bne.n	8015e36 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e6c:	2b01      	cmp	r3, #1
 8015e6e:	d12e      	bne.n	8015ece <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2200      	movs	r2, #0
 8015e74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	e853 3f00 	ldrex	r3, [r3]
 8015e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	f023 0310 	bic.w	r3, r3, #16
 8015e8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	461a      	mov	r2, r3
 8015e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015e94:	61bb      	str	r3, [r7, #24]
 8015e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e98:	6979      	ldr	r1, [r7, #20]
 8015e9a:	69ba      	ldr	r2, [r7, #24]
 8015e9c:	e841 2300 	strex	r3, r2, [r1]
 8015ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8015ea2:	693b      	ldr	r3, [r7, #16]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d1e6      	bne.n	8015e76 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	69db      	ldr	r3, [r3, #28]
 8015eae:	f003 0310 	and.w	r3, r3, #16
 8015eb2:	2b10      	cmp	r3, #16
 8015eb4:	d103      	bne.n	8015ebe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	2210      	movs	r2, #16
 8015ebc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015ec4:	4619      	mov	r1, r3
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f7fe fd64 	bl	8014994 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015ecc:	e00b      	b.n	8015ee6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f7ec fd36 	bl	8002940 <HAL_UART_RxCpltCallback>
}
 8015ed4:	e007      	b.n	8015ee6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	699a      	ldr	r2, [r3, #24]
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	f042 0208 	orr.w	r2, r2, #8
 8015ee4:	619a      	str	r2, [r3, #24]
}
 8015ee6:	bf00      	nop
 8015ee8:	3770      	adds	r7, #112	; 0x70
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	58000c00 	.word	0x58000c00

08015ef4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b0ac      	sub	sp, #176	; 0xb0
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015f02:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	69db      	ldr	r3, [r3, #28]
 8015f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	689b      	ldr	r3, [r3, #8]
 8015f20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f2a:	2b22      	cmp	r3, #34	; 0x22
 8015f2c:	f040 8180 	bne.w	8016230 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015f36:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015f3a:	e123      	b.n	8016184 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f42:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015f46:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8015f4a:	b2d9      	uxtb	r1, r3
 8015f4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8015f50:	b2da      	uxtb	r2, r3
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f56:	400a      	ands	r2, r1
 8015f58:	b2d2      	uxtb	r2, r2
 8015f5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f60:	1c5a      	adds	r2, r3, #1
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015f6c:	b29b      	uxth	r3, r3
 8015f6e:	3b01      	subs	r3, #1
 8015f70:	b29a      	uxth	r2, r3
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	69db      	ldr	r3, [r3, #28]
 8015f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f86:	f003 0307 	and.w	r3, r3, #7
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d053      	beq.n	8016036 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f92:	f003 0301 	and.w	r3, r3, #1
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d011      	beq.n	8015fbe <UART_RxISR_8BIT_FIFOEN+0xca>
 8015f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d00b      	beq.n	8015fbe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	2201      	movs	r2, #1
 8015fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015fb4:	f043 0201 	orr.w	r2, r3, #1
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015fc2:	f003 0302 	and.w	r3, r3, #2
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d011      	beq.n	8015fee <UART_RxISR_8BIT_FIFOEN+0xfa>
 8015fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015fce:	f003 0301 	and.w	r3, r3, #1
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d00b      	beq.n	8015fee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	2202      	movs	r2, #2
 8015fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015fe4:	f043 0204 	orr.w	r2, r3, #4
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015ff2:	f003 0304 	and.w	r3, r3, #4
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d011      	beq.n	801601e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8015ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015ffe:	f003 0301 	and.w	r3, r3, #1
 8016002:	2b00      	cmp	r3, #0
 8016004:	d00b      	beq.n	801601e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	2204      	movs	r2, #4
 801600c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016014:	f043 0202 	orr.w	r2, r3, #2
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016024:	2b00      	cmp	r3, #0
 8016026:	d006      	beq.n	8016036 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f7fe fca9 	bl	8014980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	2200      	movs	r2, #0
 8016032:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801603c:	b29b      	uxth	r3, r3
 801603e:	2b00      	cmp	r3, #0
 8016040:	f040 80a0 	bne.w	8016184 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801604a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801604c:	e853 3f00 	ldrex	r3, [r3]
 8016050:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8016052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	461a      	mov	r2, r3
 8016062:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016066:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016068:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801606a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801606c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801606e:	e841 2300 	strex	r3, r2, [r1]
 8016072:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8016074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016076:	2b00      	cmp	r3, #0
 8016078:	d1e4      	bne.n	8016044 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	3308      	adds	r3, #8
 8016080:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016084:	e853 3f00 	ldrex	r3, [r3]
 8016088:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801608a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801608c:	4b6e      	ldr	r3, [pc, #440]	; (8016248 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801608e:	4013      	ands	r3, r2
 8016090:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	3308      	adds	r3, #8
 801609a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801609e:	66ba      	str	r2, [r7, #104]	; 0x68
 80160a0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160a2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80160a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80160a6:	e841 2300 	strex	r3, r2, [r1]
 80160aa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80160ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d1e3      	bne.n	801607a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2220      	movs	r2, #32
 80160b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	2200      	movs	r2, #0
 80160be:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	2200      	movs	r2, #0
 80160c4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	4a60      	ldr	r2, [pc, #384]	; (801624c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80160cc:	4293      	cmp	r3, r2
 80160ce:	d021      	beq.n	8016114 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	685b      	ldr	r3, [r3, #4]
 80160d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d01a      	beq.n	8016114 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80160e6:	e853 3f00 	ldrex	r3, [r3]
 80160ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80160ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80160ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80160f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	461a      	mov	r2, r3
 80160fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016100:	657b      	str	r3, [r7, #84]	; 0x54
 8016102:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016104:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016106:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016108:	e841 2300 	strex	r3, r2, [r1]
 801610c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801610e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016110:	2b00      	cmp	r3, #0
 8016112:	d1e4      	bne.n	80160de <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016118:	2b01      	cmp	r3, #1
 801611a:	d130      	bne.n	801617e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	2200      	movs	r2, #0
 8016120:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801612a:	e853 3f00 	ldrex	r3, [r3]
 801612e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016132:	f023 0310 	bic.w	r3, r3, #16
 8016136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	461a      	mov	r2, r3
 8016140:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016144:	643b      	str	r3, [r7, #64]	; 0x40
 8016146:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016148:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801614a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801614c:	e841 2300 	strex	r3, r2, [r1]
 8016150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016154:	2b00      	cmp	r3, #0
 8016156:	d1e4      	bne.n	8016122 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	69db      	ldr	r3, [r3, #28]
 801615e:	f003 0310 	and.w	r3, r3, #16
 8016162:	2b10      	cmp	r3, #16
 8016164:	d103      	bne.n	801616e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	2210      	movs	r2, #16
 801616c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016174:	4619      	mov	r1, r3
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	f7fe fc0c 	bl	8014994 <HAL_UARTEx_RxEventCallback>
 801617c:	e002      	b.n	8016184 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f7ec fbde 	bl	8002940 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016184:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8016188:	2b00      	cmp	r3, #0
 801618a:	d006      	beq.n	801619a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801618c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016190:	f003 0320 	and.w	r3, r3, #32
 8016194:	2b00      	cmp	r3, #0
 8016196:	f47f aed1 	bne.w	8015f3c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80161a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80161a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d049      	beq.n	8016240 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80161b2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d242      	bcs.n	8016240 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	3308      	adds	r3, #8
 80161c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161c2:	6a3b      	ldr	r3, [r7, #32]
 80161c4:	e853 3f00 	ldrex	r3, [r3]
 80161c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80161ca:	69fb      	ldr	r3, [r7, #28]
 80161cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80161d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	3308      	adds	r3, #8
 80161da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80161de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80161e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80161e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80161e6:	e841 2300 	strex	r3, r2, [r1]
 80161ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80161ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d1e3      	bne.n	80161ba <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	4a16      	ldr	r2, [pc, #88]	; (8016250 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80161f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	e853 3f00 	ldrex	r3, [r3]
 8016204:	60bb      	str	r3, [r7, #8]
   return(result);
 8016206:	68bb      	ldr	r3, [r7, #8]
 8016208:	f043 0320 	orr.w	r3, r3, #32
 801620c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	461a      	mov	r2, r3
 8016216:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801621a:	61bb      	str	r3, [r7, #24]
 801621c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801621e:	6979      	ldr	r1, [r7, #20]
 8016220:	69ba      	ldr	r2, [r7, #24]
 8016222:	e841 2300 	strex	r3, r2, [r1]
 8016226:	613b      	str	r3, [r7, #16]
   return(result);
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d1e4      	bne.n	80161f8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801622e:	e007      	b.n	8016240 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	699a      	ldr	r2, [r3, #24]
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	f042 0208 	orr.w	r2, r2, #8
 801623e:	619a      	str	r2, [r3, #24]
}
 8016240:	bf00      	nop
 8016242:	37b0      	adds	r7, #176	; 0xb0
 8016244:	46bd      	mov	sp, r7
 8016246:	bd80      	pop	{r7, pc}
 8016248:	effffffe 	.word	0xeffffffe
 801624c:	58000c00 	.word	0x58000c00
 8016250:	08015b85 	.word	0x08015b85

08016254 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b0ae      	sub	sp, #184	; 0xb8
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016262:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	69db      	ldr	r3, [r3, #28]
 801626c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	689b      	ldr	r3, [r3, #8]
 8016280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801628a:	2b22      	cmp	r3, #34	; 0x22
 801628c:	f040 8184 	bne.w	8016598 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016296:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801629a:	e127      	b.n	80164ec <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80162ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80162b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80162b6:	4013      	ands	r3, r2
 80162b8:	b29a      	uxth	r2, r3
 80162ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80162be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162c4:	1c9a      	adds	r2, r3, #2
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	3b01      	subs	r3, #1
 80162d4:	b29a      	uxth	r2, r3
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	69db      	ldr	r3, [r3, #28]
 80162e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80162e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80162ea:	f003 0307 	and.w	r3, r3, #7
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d053      	beq.n	801639a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80162f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80162f6:	f003 0301 	and.w	r3, r3, #1
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d011      	beq.n	8016322 <UART_RxISR_16BIT_FIFOEN+0xce>
 80162fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016306:	2b00      	cmp	r3, #0
 8016308:	d00b      	beq.n	8016322 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	2201      	movs	r2, #1
 8016310:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016318:	f043 0201 	orr.w	r2, r3, #1
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016326:	f003 0302 	and.w	r3, r3, #2
 801632a:	2b00      	cmp	r3, #0
 801632c:	d011      	beq.n	8016352 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801632e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016332:	f003 0301 	and.w	r3, r3, #1
 8016336:	2b00      	cmp	r3, #0
 8016338:	d00b      	beq.n	8016352 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	2202      	movs	r2, #2
 8016340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016348:	f043 0204 	orr.w	r2, r3, #4
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016352:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016356:	f003 0304 	and.w	r3, r3, #4
 801635a:	2b00      	cmp	r3, #0
 801635c:	d011      	beq.n	8016382 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801635e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016362:	f003 0301 	and.w	r3, r3, #1
 8016366:	2b00      	cmp	r3, #0
 8016368:	d00b      	beq.n	8016382 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	2204      	movs	r2, #4
 8016370:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016378:	f043 0202 	orr.w	r2, r3, #2
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016388:	2b00      	cmp	r3, #0
 801638a:	d006      	beq.n	801639a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f7fe faf7 	bl	8014980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2200      	movs	r2, #0
 8016396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80163a0:	b29b      	uxth	r3, r3
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	f040 80a2 	bne.w	80164ec <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80163b0:	e853 3f00 	ldrex	r3, [r3]
 80163b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80163b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80163b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80163bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	461a      	mov	r2, r3
 80163c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80163ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80163ce:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80163d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80163d6:	e841 2300 	strex	r3, r2, [r1]
 80163da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80163dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d1e2      	bne.n	80163a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	3308      	adds	r3, #8
 80163e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80163ec:	e853 3f00 	ldrex	r3, [r3]
 80163f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80163f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80163f4:	4b6e      	ldr	r3, [pc, #440]	; (80165b0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80163f6:	4013      	ands	r3, r2
 80163f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	3308      	adds	r3, #8
 8016402:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016406:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016408:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801640a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801640c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801640e:	e841 2300 	strex	r3, r2, [r1]
 8016412:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016416:	2b00      	cmp	r3, #0
 8016418:	d1e3      	bne.n	80163e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	2220      	movs	r2, #32
 801641e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2200      	movs	r2, #0
 8016426:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	2200      	movs	r2, #0
 801642c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	4a60      	ldr	r2, [pc, #384]	; (80165b4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016434:	4293      	cmp	r3, r2
 8016436:	d021      	beq.n	801647c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	685b      	ldr	r3, [r3, #4]
 801643e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016442:	2b00      	cmp	r3, #0
 8016444:	d01a      	beq.n	801647c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801644c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801644e:	e853 3f00 	ldrex	r3, [r3]
 8016452:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016456:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801645a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	461a      	mov	r2, r3
 8016464:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016468:	65bb      	str	r3, [r7, #88]	; 0x58
 801646a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801646c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801646e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016470:	e841 2300 	strex	r3, r2, [r1]
 8016474:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016478:	2b00      	cmp	r3, #0
 801647a:	d1e4      	bne.n	8016446 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016480:	2b01      	cmp	r3, #1
 8016482:	d130      	bne.n	80164e6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2200      	movs	r2, #0
 8016488:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016492:	e853 3f00 	ldrex	r3, [r3]
 8016496:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801649a:	f023 0310 	bic.w	r3, r3, #16
 801649e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	461a      	mov	r2, r3
 80164a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80164ac:	647b      	str	r3, [r7, #68]	; 0x44
 80164ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80164b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80164b4:	e841 2300 	strex	r3, r2, [r1]
 80164b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80164ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d1e4      	bne.n	801648a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	69db      	ldr	r3, [r3, #28]
 80164c6:	f003 0310 	and.w	r3, r3, #16
 80164ca:	2b10      	cmp	r3, #16
 80164cc:	d103      	bne.n	80164d6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	2210      	movs	r2, #16
 80164d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80164dc:	4619      	mov	r1, r3
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f7fe fa58 	bl	8014994 <HAL_UARTEx_RxEventCallback>
 80164e4:	e002      	b.n	80164ec <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f7ec fa2a 	bl	8002940 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80164ec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d006      	beq.n	8016502 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80164f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80164f8:	f003 0320 	and.w	r3, r3, #32
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	f47f aecd 	bne.w	801629c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016508:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801650c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016510:	2b00      	cmp	r3, #0
 8016512:	d049      	beq.n	80165a8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801651a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801651e:	429a      	cmp	r2, r3
 8016520:	d242      	bcs.n	80165a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	3308      	adds	r3, #8
 8016528:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652c:	e853 3f00 	ldrex	r3, [r3]
 8016530:	623b      	str	r3, [r7, #32]
   return(result);
 8016532:	6a3b      	ldr	r3, [r7, #32]
 8016534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	3308      	adds	r3, #8
 8016542:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016546:	633a      	str	r2, [r7, #48]	; 0x30
 8016548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801654a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801654c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801654e:	e841 2300 	strex	r3, r2, [r1]
 8016552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016556:	2b00      	cmp	r3, #0
 8016558:	d1e3      	bne.n	8016522 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	4a16      	ldr	r2, [pc, #88]	; (80165b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801655e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	e853 3f00 	ldrex	r3, [r3]
 801656c:	60fb      	str	r3, [r7, #12]
   return(result);
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	f043 0320 	orr.w	r3, r3, #32
 8016574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	461a      	mov	r2, r3
 801657e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016582:	61fb      	str	r3, [r7, #28]
 8016584:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016586:	69b9      	ldr	r1, [r7, #24]
 8016588:	69fa      	ldr	r2, [r7, #28]
 801658a:	e841 2300 	strex	r3, r2, [r1]
 801658e:	617b      	str	r3, [r7, #20]
   return(result);
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d1e4      	bne.n	8016560 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016596:	e007      	b.n	80165a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	699a      	ldr	r2, [r3, #24]
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	f042 0208 	orr.w	r2, r2, #8
 80165a6:	619a      	str	r2, [r3, #24]
}
 80165a8:	bf00      	nop
 80165aa:	37b8      	adds	r7, #184	; 0xb8
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}
 80165b0:	effffffe 	.word	0xeffffffe
 80165b4:	58000c00 	.word	0x58000c00
 80165b8:	08015d3d 	.word	0x08015d3d

080165bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80165bc:	b480      	push	{r7}
 80165be:	b083      	sub	sp, #12
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80165c4:	bf00      	nop
 80165c6:	370c      	adds	r7, #12
 80165c8:	46bd      	mov	sp, r7
 80165ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ce:	4770      	bx	lr

080165d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80165d0:	b480      	push	{r7}
 80165d2:	b083      	sub	sp, #12
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80165d8:	bf00      	nop
 80165da:	370c      	adds	r7, #12
 80165dc:	46bd      	mov	sp, r7
 80165de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e2:	4770      	bx	lr

080165e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80165e4:	b480      	push	{r7}
 80165e6:	b083      	sub	sp, #12
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80165ec:	bf00      	nop
 80165ee:	370c      	adds	r7, #12
 80165f0:	46bd      	mov	sp, r7
 80165f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f6:	4770      	bx	lr

080165f8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80165f8:	b480      	push	{r7}
 80165fa:	b089      	sub	sp, #36	; 0x24
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016606:	2b01      	cmp	r3, #1
 8016608:	d101      	bne.n	801660e <HAL_UARTEx_EnableStopMode+0x16>
 801660a:	2302      	movs	r3, #2
 801660c:	e021      	b.n	8016652 <HAL_UARTEx_EnableStopMode+0x5a>
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	2201      	movs	r2, #1
 8016612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	e853 3f00 	ldrex	r3, [r3]
 8016622:	60bb      	str	r3, [r7, #8]
   return(result);
 8016624:	68bb      	ldr	r3, [r7, #8]
 8016626:	f043 0302 	orr.w	r3, r3, #2
 801662a:	61fb      	str	r3, [r7, #28]
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	461a      	mov	r2, r3
 8016632:	69fb      	ldr	r3, [r7, #28]
 8016634:	61bb      	str	r3, [r7, #24]
 8016636:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016638:	6979      	ldr	r1, [r7, #20]
 801663a:	69ba      	ldr	r2, [r7, #24]
 801663c:	e841 2300 	strex	r3, r2, [r1]
 8016640:	613b      	str	r3, [r7, #16]
   return(result);
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d1e6      	bne.n	8016616 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	2200      	movs	r2, #0
 801664c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016650:	2300      	movs	r3, #0
}
 8016652:	4618      	mov	r0, r3
 8016654:	3724      	adds	r7, #36	; 0x24
 8016656:	46bd      	mov	sp, r7
 8016658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665c:	4770      	bx	lr

0801665e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801665e:	b580      	push	{r7, lr}
 8016660:	b084      	sub	sp, #16
 8016662:	af00      	add	r7, sp, #0
 8016664:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801666c:	2b01      	cmp	r3, #1
 801666e:	d101      	bne.n	8016674 <HAL_UARTEx_EnableFifoMode+0x16>
 8016670:	2302      	movs	r3, #2
 8016672:	e02b      	b.n	80166cc <HAL_UARTEx_EnableFifoMode+0x6e>
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2201      	movs	r2, #1
 8016678:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2224      	movs	r2, #36	; 0x24
 8016680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	681a      	ldr	r2, [r3, #0]
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	f022 0201 	bic.w	r2, r2, #1
 801669a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80166a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80166aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	68fa      	ldr	r2, [r7, #12]
 80166b2:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f000 f8c3 	bl	8016840 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2220      	movs	r2, #32
 80166be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2200      	movs	r2, #0
 80166c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80166ca:	2300      	movs	r3, #0
}
 80166cc:	4618      	mov	r0, r3
 80166ce:	3710      	adds	r7, #16
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bd80      	pop	{r7, pc}

080166d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80166d4:	b480      	push	{r7}
 80166d6:	b085      	sub	sp, #20
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80166e2:	2b01      	cmp	r3, #1
 80166e4:	d101      	bne.n	80166ea <HAL_UARTEx_DisableFifoMode+0x16>
 80166e6:	2302      	movs	r3, #2
 80166e8:	e027      	b.n	801673a <HAL_UARTEx_DisableFifoMode+0x66>
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2201      	movs	r2, #1
 80166ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	2224      	movs	r2, #36	; 0x24
 80166f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	681a      	ldr	r2, [r3, #0]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	f022 0201 	bic.w	r2, r2, #1
 8016710:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016718:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	2200      	movs	r2, #0
 801671e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	68fa      	ldr	r2, [r7, #12]
 8016726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2220      	movs	r2, #32
 801672c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	2200      	movs	r2, #0
 8016734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016738:	2300      	movs	r3, #0
}
 801673a:	4618      	mov	r0, r3
 801673c:	3714      	adds	r7, #20
 801673e:	46bd      	mov	sp, r7
 8016740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016744:	4770      	bx	lr

08016746 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016746:	b580      	push	{r7, lr}
 8016748:	b084      	sub	sp, #16
 801674a:	af00      	add	r7, sp, #0
 801674c:	6078      	str	r0, [r7, #4]
 801674e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016756:	2b01      	cmp	r3, #1
 8016758:	d101      	bne.n	801675e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801675a:	2302      	movs	r3, #2
 801675c:	e02d      	b.n	80167ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	2201      	movs	r2, #1
 8016762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	2224      	movs	r2, #36	; 0x24
 801676a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	681a      	ldr	r2, [r3, #0]
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	f022 0201 	bic.w	r2, r2, #1
 8016784:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	689b      	ldr	r3, [r3, #8]
 801678c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	683a      	ldr	r2, [r7, #0]
 8016796:	430a      	orrs	r2, r1
 8016798:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f000 f850 	bl	8016840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	68fa      	ldr	r2, [r7, #12]
 80167a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2220      	movs	r2, #32
 80167ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2200      	movs	r2, #0
 80167b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80167b8:	2300      	movs	r3, #0
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3710      	adds	r7, #16
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}

080167c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b084      	sub	sp, #16
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6078      	str	r0, [r7, #4]
 80167ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80167d2:	2b01      	cmp	r3, #1
 80167d4:	d101      	bne.n	80167da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80167d6:	2302      	movs	r3, #2
 80167d8:	e02d      	b.n	8016836 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	2201      	movs	r2, #1
 80167de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	2224      	movs	r2, #36	; 0x24
 80167e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	681a      	ldr	r2, [r3, #0]
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	f022 0201 	bic.w	r2, r2, #1
 8016800:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	689b      	ldr	r3, [r3, #8]
 8016808:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	683a      	ldr	r2, [r7, #0]
 8016812:	430a      	orrs	r2, r1
 8016814:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016816:	6878      	ldr	r0, [r7, #4]
 8016818:	f000 f812 	bl	8016840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	68fa      	ldr	r2, [r7, #12]
 8016822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2220      	movs	r2, #32
 8016828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	2200      	movs	r2, #0
 8016830:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016834:	2300      	movs	r3, #0
}
 8016836:	4618      	mov	r0, r3
 8016838:	3710      	adds	r7, #16
 801683a:	46bd      	mov	sp, r7
 801683c:	bd80      	pop	{r7, pc}
	...

08016840 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016840:	b480      	push	{r7}
 8016842:	b085      	sub	sp, #20
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801684c:	2b00      	cmp	r3, #0
 801684e:	d108      	bne.n	8016862 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	2201      	movs	r2, #1
 8016854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2201      	movs	r2, #1
 801685c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016860:	e031      	b.n	80168c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016862:	2310      	movs	r3, #16
 8016864:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016866:	2310      	movs	r3, #16
 8016868:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	689b      	ldr	r3, [r3, #8]
 8016870:	0e5b      	lsrs	r3, r3, #25
 8016872:	b2db      	uxtb	r3, r3
 8016874:	f003 0307 	and.w	r3, r3, #7
 8016878:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	689b      	ldr	r3, [r3, #8]
 8016880:	0f5b      	lsrs	r3, r3, #29
 8016882:	b2db      	uxtb	r3, r3
 8016884:	f003 0307 	and.w	r3, r3, #7
 8016888:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801688a:	7bbb      	ldrb	r3, [r7, #14]
 801688c:	7b3a      	ldrb	r2, [r7, #12]
 801688e:	4911      	ldr	r1, [pc, #68]	; (80168d4 <UARTEx_SetNbDataToProcess+0x94>)
 8016890:	5c8a      	ldrb	r2, [r1, r2]
 8016892:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016896:	7b3a      	ldrb	r2, [r7, #12]
 8016898:	490f      	ldr	r1, [pc, #60]	; (80168d8 <UARTEx_SetNbDataToProcess+0x98>)
 801689a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801689c:	fb93 f3f2 	sdiv	r3, r3, r2
 80168a0:	b29a      	uxth	r2, r3
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80168a8:	7bfb      	ldrb	r3, [r7, #15]
 80168aa:	7b7a      	ldrb	r2, [r7, #13]
 80168ac:	4909      	ldr	r1, [pc, #36]	; (80168d4 <UARTEx_SetNbDataToProcess+0x94>)
 80168ae:	5c8a      	ldrb	r2, [r1, r2]
 80168b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80168b4:	7b7a      	ldrb	r2, [r7, #13]
 80168b6:	4908      	ldr	r1, [pc, #32]	; (80168d8 <UARTEx_SetNbDataToProcess+0x98>)
 80168b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80168ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80168be:	b29a      	uxth	r2, r3
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80168c6:	bf00      	nop
 80168c8:	3714      	adds	r7, #20
 80168ca:	46bd      	mov	sp, r7
 80168cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d0:	4770      	bx	lr
 80168d2:	bf00      	nop
 80168d4:	0801abe4 	.word	0x0801abe4
 80168d8:	0801abec 	.word	0x0801abec

080168dc <__NVIC_SetPriority>:
{
 80168dc:	b480      	push	{r7}
 80168de:	b083      	sub	sp, #12
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	4603      	mov	r3, r0
 80168e4:	6039      	str	r1, [r7, #0]
 80168e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80168e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	db0a      	blt.n	8016906 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	b2da      	uxtb	r2, r3
 80168f4:	490c      	ldr	r1, [pc, #48]	; (8016928 <__NVIC_SetPriority+0x4c>)
 80168f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80168fa:	0112      	lsls	r2, r2, #4
 80168fc:	b2d2      	uxtb	r2, r2
 80168fe:	440b      	add	r3, r1
 8016900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016904:	e00a      	b.n	801691c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	b2da      	uxtb	r2, r3
 801690a:	4908      	ldr	r1, [pc, #32]	; (801692c <__NVIC_SetPriority+0x50>)
 801690c:	88fb      	ldrh	r3, [r7, #6]
 801690e:	f003 030f 	and.w	r3, r3, #15
 8016912:	3b04      	subs	r3, #4
 8016914:	0112      	lsls	r2, r2, #4
 8016916:	b2d2      	uxtb	r2, r2
 8016918:	440b      	add	r3, r1
 801691a:	761a      	strb	r2, [r3, #24]
}
 801691c:	bf00      	nop
 801691e:	370c      	adds	r7, #12
 8016920:	46bd      	mov	sp, r7
 8016922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016926:	4770      	bx	lr
 8016928:	e000e100 	.word	0xe000e100
 801692c:	e000ed00 	.word	0xe000ed00

08016930 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016930:	b580      	push	{r7, lr}
 8016932:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016934:	4b05      	ldr	r3, [pc, #20]	; (801694c <SysTick_Handler+0x1c>)
 8016936:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016938:	f002 f958 	bl	8018bec <xTaskGetSchedulerState>
 801693c:	4603      	mov	r3, r0
 801693e:	2b01      	cmp	r3, #1
 8016940:	d001      	beq.n	8016946 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016942:	f002 ff79 	bl	8019838 <xPortSysTickHandler>
  }
}
 8016946:	bf00      	nop
 8016948:	bd80      	pop	{r7, pc}
 801694a:	bf00      	nop
 801694c:	e000e010 	.word	0xe000e010

08016950 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016950:	b580      	push	{r7, lr}
 8016952:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016954:	2100      	movs	r1, #0
 8016956:	f06f 0004 	mvn.w	r0, #4
 801695a:	f7ff ffbf 	bl	80168dc <__NVIC_SetPriority>
#endif
}
 801695e:	bf00      	nop
 8016960:	bd80      	pop	{r7, pc}
	...

08016964 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016964:	b480      	push	{r7}
 8016966:	b083      	sub	sp, #12
 8016968:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801696a:	f3ef 8305 	mrs	r3, IPSR
 801696e:	603b      	str	r3, [r7, #0]
  return(result);
 8016970:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016972:	2b00      	cmp	r3, #0
 8016974:	d003      	beq.n	801697e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016976:	f06f 0305 	mvn.w	r3, #5
 801697a:	607b      	str	r3, [r7, #4]
 801697c:	e00c      	b.n	8016998 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801697e:	4b0a      	ldr	r3, [pc, #40]	; (80169a8 <osKernelInitialize+0x44>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d105      	bne.n	8016992 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016986:	4b08      	ldr	r3, [pc, #32]	; (80169a8 <osKernelInitialize+0x44>)
 8016988:	2201      	movs	r2, #1
 801698a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801698c:	2300      	movs	r3, #0
 801698e:	607b      	str	r3, [r7, #4]
 8016990:	e002      	b.n	8016998 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016996:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016998:	687b      	ldr	r3, [r7, #4]
}
 801699a:	4618      	mov	r0, r3
 801699c:	370c      	adds	r7, #12
 801699e:	46bd      	mov	sp, r7
 80169a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a4:	4770      	bx	lr
 80169a6:	bf00      	nop
 80169a8:	24001fbc 	.word	0x24001fbc

080169ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b082      	sub	sp, #8
 80169b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80169b2:	f3ef 8305 	mrs	r3, IPSR
 80169b6:	603b      	str	r3, [r7, #0]
  return(result);
 80169b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d003      	beq.n	80169c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80169be:	f06f 0305 	mvn.w	r3, #5
 80169c2:	607b      	str	r3, [r7, #4]
 80169c4:	e010      	b.n	80169e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80169c6:	4b0b      	ldr	r3, [pc, #44]	; (80169f4 <osKernelStart+0x48>)
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d109      	bne.n	80169e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80169ce:	f7ff ffbf 	bl	8016950 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80169d2:	4b08      	ldr	r3, [pc, #32]	; (80169f4 <osKernelStart+0x48>)
 80169d4:	2202      	movs	r2, #2
 80169d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80169d8:	f001 fc0c 	bl	80181f4 <vTaskStartScheduler>
      stat = osOK;
 80169dc:	2300      	movs	r3, #0
 80169de:	607b      	str	r3, [r7, #4]
 80169e0:	e002      	b.n	80169e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80169e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80169e8:	687b      	ldr	r3, [r7, #4]
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3708      	adds	r7, #8
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}
 80169f2:	bf00      	nop
 80169f4:	24001fbc 	.word	0x24001fbc

080169f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b08e      	sub	sp, #56	; 0x38
 80169fc:	af04      	add	r7, sp, #16
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	60b9      	str	r1, [r7, #8]
 8016a02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016a04:	2300      	movs	r3, #0
 8016a06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016a08:	f3ef 8305 	mrs	r3, IPSR
 8016a0c:	617b      	str	r3, [r7, #20]
  return(result);
 8016a0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d17e      	bne.n	8016b12 <osThreadNew+0x11a>
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d07b      	beq.n	8016b12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016a1a:	2380      	movs	r3, #128	; 0x80
 8016a1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016a1e:	2318      	movs	r3, #24
 8016a20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016a22:	2300      	movs	r3, #0
 8016a24:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d045      	beq.n	8016abe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d002      	beq.n	8016a40 <osThreadNew+0x48>
        name = attr->name;
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	699b      	ldr	r3, [r3, #24]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d002      	beq.n	8016a4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	699b      	ldr	r3, [r3, #24]
 8016a4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016a4e:	69fb      	ldr	r3, [r7, #28]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d008      	beq.n	8016a66 <osThreadNew+0x6e>
 8016a54:	69fb      	ldr	r3, [r7, #28]
 8016a56:	2b38      	cmp	r3, #56	; 0x38
 8016a58:	d805      	bhi.n	8016a66 <osThreadNew+0x6e>
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	685b      	ldr	r3, [r3, #4]
 8016a5e:	f003 0301 	and.w	r3, r3, #1
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d001      	beq.n	8016a6a <osThreadNew+0x72>
        return (NULL);
 8016a66:	2300      	movs	r3, #0
 8016a68:	e054      	b.n	8016b14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	695b      	ldr	r3, [r3, #20]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d003      	beq.n	8016a7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	695b      	ldr	r3, [r3, #20]
 8016a76:	089b      	lsrs	r3, r3, #2
 8016a78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	689b      	ldr	r3, [r3, #8]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d00e      	beq.n	8016aa0 <osThreadNew+0xa8>
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	68db      	ldr	r3, [r3, #12]
 8016a86:	2b5b      	cmp	r3, #91	; 0x5b
 8016a88:	d90a      	bls.n	8016aa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d006      	beq.n	8016aa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	695b      	ldr	r3, [r3, #20]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d002      	beq.n	8016aa0 <osThreadNew+0xa8>
        mem = 1;
 8016a9a:	2301      	movs	r3, #1
 8016a9c:	61bb      	str	r3, [r7, #24]
 8016a9e:	e010      	b.n	8016ac2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	689b      	ldr	r3, [r3, #8]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d10c      	bne.n	8016ac2 <osThreadNew+0xca>
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	68db      	ldr	r3, [r3, #12]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d108      	bne.n	8016ac2 <osThreadNew+0xca>
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	691b      	ldr	r3, [r3, #16]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d104      	bne.n	8016ac2 <osThreadNew+0xca>
          mem = 0;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	61bb      	str	r3, [r7, #24]
 8016abc:	e001      	b.n	8016ac2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016ac2:	69bb      	ldr	r3, [r7, #24]
 8016ac4:	2b01      	cmp	r3, #1
 8016ac6:	d110      	bne.n	8016aea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016acc:	687a      	ldr	r2, [r7, #4]
 8016ace:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016ad0:	9202      	str	r2, [sp, #8]
 8016ad2:	9301      	str	r3, [sp, #4]
 8016ad4:	69fb      	ldr	r3, [r7, #28]
 8016ad6:	9300      	str	r3, [sp, #0]
 8016ad8:	68bb      	ldr	r3, [r7, #8]
 8016ada:	6a3a      	ldr	r2, [r7, #32]
 8016adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ade:	68f8      	ldr	r0, [r7, #12]
 8016ae0:	f001 f9b2 	bl	8017e48 <xTaskCreateStatic>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	613b      	str	r3, [r7, #16]
 8016ae8:	e013      	b.n	8016b12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016aea:	69bb      	ldr	r3, [r7, #24]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d110      	bne.n	8016b12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016af0:	6a3b      	ldr	r3, [r7, #32]
 8016af2:	b29a      	uxth	r2, r3
 8016af4:	f107 0310 	add.w	r3, r7, #16
 8016af8:	9301      	str	r3, [sp, #4]
 8016afa:	69fb      	ldr	r3, [r7, #28]
 8016afc:	9300      	str	r3, [sp, #0]
 8016afe:	68bb      	ldr	r3, [r7, #8]
 8016b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b02:	68f8      	ldr	r0, [r7, #12]
 8016b04:	f001 f9fd 	bl	8017f02 <xTaskCreate>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	2b01      	cmp	r3, #1
 8016b0c:	d001      	beq.n	8016b12 <osThreadNew+0x11a>
            hTask = NULL;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016b12:	693b      	ldr	r3, [r7, #16]
}
 8016b14:	4618      	mov	r0, r3
 8016b16:	3728      	adds	r7, #40	; 0x28
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}

08016b1c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016b1c:	b480      	push	{r7}
 8016b1e:	b083      	sub	sp, #12
 8016b20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b22:	f3ef 8305 	mrs	r3, IPSR
 8016b26:	603b      	str	r3, [r7, #0]
  return(result);
 8016b28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d003      	beq.n	8016b36 <osThreadYield+0x1a>
    stat = osErrorISR;
 8016b2e:	f06f 0305 	mvn.w	r3, #5
 8016b32:	607b      	str	r3, [r7, #4]
 8016b34:	e009      	b.n	8016b4a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8016b36:	2300      	movs	r3, #0
 8016b38:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8016b3a:	4b07      	ldr	r3, [pc, #28]	; (8016b58 <osThreadYield+0x3c>)
 8016b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b40:	601a      	str	r2, [r3, #0]
 8016b42:	f3bf 8f4f 	dsb	sy
 8016b46:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8016b4a:	687b      	ldr	r3, [r7, #4]
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	370c      	adds	r7, #12
 8016b50:	46bd      	mov	sp, r7
 8016b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b56:	4770      	bx	lr
 8016b58:	e000ed04 	.word	0xe000ed04

08016b5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b084      	sub	sp, #16
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b64:	f3ef 8305 	mrs	r3, IPSR
 8016b68:	60bb      	str	r3, [r7, #8]
  return(result);
 8016b6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d003      	beq.n	8016b78 <osDelay+0x1c>
    stat = osErrorISR;
 8016b70:	f06f 0305 	mvn.w	r3, #5
 8016b74:	60fb      	str	r3, [r7, #12]
 8016b76:	e007      	b.n	8016b88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d002      	beq.n	8016b88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8016b82:	6878      	ldr	r0, [r7, #4]
 8016b84:	f001 fb02 	bl	801818c <vTaskDelay>
    }
  }

  return (stat);
 8016b88:	68fb      	ldr	r3, [r7, #12]
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3710      	adds	r7, #16
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b086      	sub	sp, #24
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b9e:	f3ef 8305 	mrs	r3, IPSR
 8016ba2:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ba4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d12d      	bne.n	8016c06 <osEventFlagsNew+0x74>
    mem = -1;
 8016baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bae:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d015      	beq.n	8016be2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	689b      	ldr	r3, [r3, #8]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d006      	beq.n	8016bcc <osEventFlagsNew+0x3a>
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	68db      	ldr	r3, [r3, #12]
 8016bc2:	2b1f      	cmp	r3, #31
 8016bc4:	d902      	bls.n	8016bcc <osEventFlagsNew+0x3a>
        mem = 1;
 8016bc6:	2301      	movs	r3, #1
 8016bc8:	613b      	str	r3, [r7, #16]
 8016bca:	e00c      	b.n	8016be6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	689b      	ldr	r3, [r3, #8]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d108      	bne.n	8016be6 <osEventFlagsNew+0x54>
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	68db      	ldr	r3, [r3, #12]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d104      	bne.n	8016be6 <osEventFlagsNew+0x54>
          mem = 0;
 8016bdc:	2300      	movs	r3, #0
 8016bde:	613b      	str	r3, [r7, #16]
 8016be0:	e001      	b.n	8016be6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8016be2:	2300      	movs	r3, #0
 8016be4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8016be6:	693b      	ldr	r3, [r7, #16]
 8016be8:	2b01      	cmp	r3, #1
 8016bea:	d106      	bne.n	8016bfa <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	689b      	ldr	r3, [r3, #8]
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f000 f91d 	bl	8016e30 <xEventGroupCreateStatic>
 8016bf6:	6178      	str	r0, [r7, #20]
 8016bf8:	e005      	b.n	8016c06 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016bfa:	693b      	ldr	r3, [r7, #16]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d102      	bne.n	8016c06 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016c00:	f000 f94d 	bl	8016e9e <xEventGroupCreate>
 8016c04:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8016c06:	697b      	ldr	r3, [r7, #20]
}
 8016c08:	4618      	mov	r0, r3
 8016c0a:	3718      	adds	r7, #24
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}

08016c10 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b086      	sub	sp, #24
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
 8016c18:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d004      	beq.n	8016c2e <osEventFlagsSet+0x1e>
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d003      	beq.n	8016c36 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016c2e:	f06f 0303 	mvn.w	r3, #3
 8016c32:	617b      	str	r3, [r7, #20]
 8016c34:	e028      	b.n	8016c88 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c36:	f3ef 8305 	mrs	r3, IPSR
 8016c3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c3c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d01d      	beq.n	8016c7e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016c42:	2300      	movs	r3, #0
 8016c44:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8016c46:	f107 0308 	add.w	r3, r7, #8
 8016c4a:	461a      	mov	r2, r3
 8016c4c:	6839      	ldr	r1, [r7, #0]
 8016c4e:	6938      	ldr	r0, [r7, #16]
 8016c50:	f000 fb46 	bl	80172e0 <xEventGroupSetBitsFromISR>
 8016c54:	4603      	mov	r3, r0
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d103      	bne.n	8016c62 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8016c5a:	f06f 0302 	mvn.w	r3, #2
 8016c5e:	617b      	str	r3, [r7, #20]
 8016c60:	e012      	b.n	8016c88 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016c62:	683b      	ldr	r3, [r7, #0]
 8016c64:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8016c66:	68bb      	ldr	r3, [r7, #8]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d00d      	beq.n	8016c88 <osEventFlagsSet+0x78>
 8016c6c:	4b09      	ldr	r3, [pc, #36]	; (8016c94 <osEventFlagsSet+0x84>)
 8016c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c72:	601a      	str	r2, [r3, #0]
 8016c74:	f3bf 8f4f 	dsb	sy
 8016c78:	f3bf 8f6f 	isb	sy
 8016c7c:	e004      	b.n	8016c88 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016c7e:	6839      	ldr	r1, [r7, #0]
 8016c80:	6938      	ldr	r0, [r7, #16]
 8016c82:	f000 fa65 	bl	8017150 <xEventGroupSetBits>
 8016c86:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016c88:	697b      	ldr	r3, [r7, #20]
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	3718      	adds	r7, #24
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bd80      	pop	{r7, pc}
 8016c92:	bf00      	nop
 8016c94:	e000ed04 	.word	0xe000ed04

08016c98 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b086      	sub	sp, #24
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
 8016ca0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016ca6:	693b      	ldr	r3, [r7, #16]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d004      	beq.n	8016cb6 <osEventFlagsClear+0x1e>
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d003      	beq.n	8016cbe <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016cb6:	f06f 0303 	mvn.w	r3, #3
 8016cba:	617b      	str	r3, [r7, #20]
 8016cbc:	e019      	b.n	8016cf2 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016cbe:	f3ef 8305 	mrs	r3, IPSR
 8016cc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8016cc4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d00e      	beq.n	8016ce8 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8016cca:	6938      	ldr	r0, [r7, #16]
 8016ccc:	f000 fa1c 	bl	8017108 <xEventGroupGetBitsFromISR>
 8016cd0:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016cd2:	6839      	ldr	r1, [r7, #0]
 8016cd4:	6938      	ldr	r0, [r7, #16]
 8016cd6:	f000 fa03 	bl	80170e0 <xEventGroupClearBitsFromISR>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d108      	bne.n	8016cf2 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016ce0:	f06f 0302 	mvn.w	r3, #2
 8016ce4:	617b      	str	r3, [r7, #20]
 8016ce6:	e004      	b.n	8016cf2 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016ce8:	6839      	ldr	r1, [r7, #0]
 8016cea:	6938      	ldr	r0, [r7, #16]
 8016cec:	f000 f9c0 	bl	8017070 <xEventGroupClearBits>
 8016cf0:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016cf2:	697b      	ldr	r3, [r7, #20]
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3718      	adds	r7, #24
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd80      	pop	{r7, pc}

08016cfc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b08c      	sub	sp, #48	; 0x30
 8016d00:	af02      	add	r7, sp, #8
 8016d02:	60f8      	str	r0, [r7, #12]
 8016d04:	60b9      	str	r1, [r7, #8]
 8016d06:	607a      	str	r2, [r7, #4]
 8016d08:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016d0e:	69bb      	ldr	r3, [r7, #24]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d004      	beq.n	8016d1e <osEventFlagsWait+0x22>
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d003      	beq.n	8016d26 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8016d1e:	f06f 0303 	mvn.w	r3, #3
 8016d22:	61fb      	str	r3, [r7, #28]
 8016d24:	e04b      	b.n	8016dbe <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d26:	f3ef 8305 	mrs	r3, IPSR
 8016d2a:	617b      	str	r3, [r7, #20]
  return(result);
 8016d2c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d003      	beq.n	8016d3a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8016d32:	f06f 0305 	mvn.w	r3, #5
 8016d36:	61fb      	str	r3, [r7, #28]
 8016d38:	e041      	b.n	8016dbe <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	f003 0301 	and.w	r3, r3, #1
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d002      	beq.n	8016d4a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8016d44:	2301      	movs	r3, #1
 8016d46:	627b      	str	r3, [r7, #36]	; 0x24
 8016d48:	e001      	b.n	8016d4e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	f003 0302 	and.w	r3, r3, #2
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d002      	beq.n	8016d5e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8016d58:	2300      	movs	r3, #0
 8016d5a:	623b      	str	r3, [r7, #32]
 8016d5c:	e001      	b.n	8016d62 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016d5e:	2301      	movs	r3, #1
 8016d60:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8016d62:	683b      	ldr	r3, [r7, #0]
 8016d64:	9300      	str	r3, [sp, #0]
 8016d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d68:	6a3a      	ldr	r2, [r7, #32]
 8016d6a:	68b9      	ldr	r1, [r7, #8]
 8016d6c:	69b8      	ldr	r0, [r7, #24]
 8016d6e:	f000 f8b1 	bl	8016ed4 <xEventGroupWaitBits>
 8016d72:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	f003 0301 	and.w	r3, r3, #1
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d010      	beq.n	8016da0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8016d7e:	68ba      	ldr	r2, [r7, #8]
 8016d80:	69fb      	ldr	r3, [r7, #28]
 8016d82:	4013      	ands	r3, r2
 8016d84:	68ba      	ldr	r2, [r7, #8]
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d019      	beq.n	8016dbe <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d003      	beq.n	8016d98 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016d90:	f06f 0301 	mvn.w	r3, #1
 8016d94:	61fb      	str	r3, [r7, #28]
 8016d96:	e012      	b.n	8016dbe <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016d98:	f06f 0302 	mvn.w	r3, #2
 8016d9c:	61fb      	str	r3, [r7, #28]
 8016d9e:	e00e      	b.n	8016dbe <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8016da0:	68ba      	ldr	r2, [r7, #8]
 8016da2:	69fb      	ldr	r3, [r7, #28]
 8016da4:	4013      	ands	r3, r2
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d109      	bne.n	8016dbe <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d003      	beq.n	8016db8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8016db0:	f06f 0301 	mvn.w	r3, #1
 8016db4:	61fb      	str	r3, [r7, #28]
 8016db6:	e002      	b.n	8016dbe <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016db8:	f06f 0302 	mvn.w	r3, #2
 8016dbc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8016dbe:	69fb      	ldr	r3, [r7, #28]
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3728      	adds	r7, #40	; 0x28
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}

08016dc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016dc8:	b480      	push	{r7}
 8016dca:	b085      	sub	sp, #20
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	60f8      	str	r0, [r7, #12]
 8016dd0:	60b9      	str	r1, [r7, #8]
 8016dd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	4a07      	ldr	r2, [pc, #28]	; (8016df4 <vApplicationGetIdleTaskMemory+0x2c>)
 8016dd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016dda:	68bb      	ldr	r3, [r7, #8]
 8016ddc:	4a06      	ldr	r2, [pc, #24]	; (8016df8 <vApplicationGetIdleTaskMemory+0x30>)
 8016dde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	2280      	movs	r2, #128	; 0x80
 8016de4:	601a      	str	r2, [r3, #0]
}
 8016de6:	bf00      	nop
 8016de8:	3714      	adds	r7, #20
 8016dea:	46bd      	mov	sp, r7
 8016dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df0:	4770      	bx	lr
 8016df2:	bf00      	nop
 8016df4:	24001fc0 	.word	0x24001fc0
 8016df8:	2400201c 	.word	0x2400201c

08016dfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016dfc:	b480      	push	{r7}
 8016dfe:	b085      	sub	sp, #20
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	60f8      	str	r0, [r7, #12]
 8016e04:	60b9      	str	r1, [r7, #8]
 8016e06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	4a07      	ldr	r2, [pc, #28]	; (8016e28 <vApplicationGetTimerTaskMemory+0x2c>)
 8016e0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	4a06      	ldr	r2, [pc, #24]	; (8016e2c <vApplicationGetTimerTaskMemory+0x30>)
 8016e12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016e1a:	601a      	str	r2, [r3, #0]
}
 8016e1c:	bf00      	nop
 8016e1e:	3714      	adds	r7, #20
 8016e20:	46bd      	mov	sp, r7
 8016e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e26:	4770      	bx	lr
 8016e28:	2400221c 	.word	0x2400221c
 8016e2c:	24002278 	.word	0x24002278

08016e30 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b086      	sub	sp, #24
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d10a      	bne.n	8016e54 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e42:	f383 8811 	msr	BASEPRI, r3
 8016e46:	f3bf 8f6f 	isb	sy
 8016e4a:	f3bf 8f4f 	dsb	sy
 8016e4e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016e50:	bf00      	nop
 8016e52:	e7fe      	b.n	8016e52 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8016e54:	2320      	movs	r3, #32
 8016e56:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	2b20      	cmp	r3, #32
 8016e5c:	d00a      	beq.n	8016e74 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8016e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e62:	f383 8811 	msr	BASEPRI, r3
 8016e66:	f3bf 8f6f 	isb	sy
 8016e6a:	f3bf 8f4f 	dsb	sy
 8016e6e:	60fb      	str	r3, [r7, #12]
}
 8016e70:	bf00      	nop
 8016e72:	e7fe      	b.n	8016e72 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d00a      	beq.n	8016e94 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8016e7e:	697b      	ldr	r3, [r7, #20]
 8016e80:	2200      	movs	r2, #0
 8016e82:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016e84:	697b      	ldr	r3, [r7, #20]
 8016e86:	3304      	adds	r3, #4
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f000 fa3d 	bl	8017308 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8016e8e:	697b      	ldr	r3, [r7, #20]
 8016e90:	2201      	movs	r2, #1
 8016e92:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8016e94:	697b      	ldr	r3, [r7, #20]
	}
 8016e96:	4618      	mov	r0, r3
 8016e98:	3718      	adds	r7, #24
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bd80      	pop	{r7, pc}

08016e9e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8016e9e:	b580      	push	{r7, lr}
 8016ea0:	b082      	sub	sp, #8
 8016ea2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8016ea4:	2020      	movs	r0, #32
 8016ea6:	f002 fd57 	bl	8019958 <pvPortMalloc>
 8016eaa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d00a      	beq.n	8016ec8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	3304      	adds	r3, #4
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f000 fa23 	bl	8017308 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8016ec8:	687b      	ldr	r3, [r7, #4]
	}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3708      	adds	r7, #8
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}
	...

08016ed4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b090      	sub	sp, #64	; 0x40
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	60f8      	str	r0, [r7, #12]
 8016edc:	60b9      	str	r1, [r7, #8]
 8016ede:	607a      	str	r2, [r7, #4]
 8016ee0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8016eea:	2300      	movs	r3, #0
 8016eec:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d10a      	bne.n	8016f0a <xEventGroupWaitBits+0x36>
	__asm volatile
 8016ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ef8:	f383 8811 	msr	BASEPRI, r3
 8016efc:	f3bf 8f6f 	isb	sy
 8016f00:	f3bf 8f4f 	dsb	sy
 8016f04:	623b      	str	r3, [r7, #32]
}
 8016f06:	bf00      	nop
 8016f08:	e7fe      	b.n	8016f08 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016f0a:	68bb      	ldr	r3, [r7, #8]
 8016f0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d00a      	beq.n	8016f2a <xEventGroupWaitBits+0x56>
	__asm volatile
 8016f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f18:	f383 8811 	msr	BASEPRI, r3
 8016f1c:	f3bf 8f6f 	isb	sy
 8016f20:	f3bf 8f4f 	dsb	sy
 8016f24:	61fb      	str	r3, [r7, #28]
}
 8016f26:	bf00      	nop
 8016f28:	e7fe      	b.n	8016f28 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8016f2a:	68bb      	ldr	r3, [r7, #8]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d10a      	bne.n	8016f46 <xEventGroupWaitBits+0x72>
	__asm volatile
 8016f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f34:	f383 8811 	msr	BASEPRI, r3
 8016f38:	f3bf 8f6f 	isb	sy
 8016f3c:	f3bf 8f4f 	dsb	sy
 8016f40:	61bb      	str	r3, [r7, #24]
}
 8016f42:	bf00      	nop
 8016f44:	e7fe      	b.n	8016f44 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016f46:	f001 fe51 	bl	8018bec <xTaskGetSchedulerState>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d102      	bne.n	8016f56 <xEventGroupWaitBits+0x82>
 8016f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d101      	bne.n	8016f5a <xEventGroupWaitBits+0x86>
 8016f56:	2301      	movs	r3, #1
 8016f58:	e000      	b.n	8016f5c <xEventGroupWaitBits+0x88>
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d10a      	bne.n	8016f76 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8016f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f64:	f383 8811 	msr	BASEPRI, r3
 8016f68:	f3bf 8f6f 	isb	sy
 8016f6c:	f3bf 8f4f 	dsb	sy
 8016f70:	617b      	str	r3, [r7, #20]
}
 8016f72:	bf00      	nop
 8016f74:	e7fe      	b.n	8016f74 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8016f76:	f001 f9a3 	bl	80182c0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8016f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8016f80:	683a      	ldr	r2, [r7, #0]
 8016f82:	68b9      	ldr	r1, [r7, #8]
 8016f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f86:	f000 f988 	bl	801729a <prvTestWaitCondition>
 8016f8a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8016f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d00e      	beq.n	8016fb0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8016f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f94:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8016f96:	2300      	movs	r3, #0
 8016f98:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d028      	beq.n	8016ff2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fa2:	681a      	ldr	r2, [r3, #0]
 8016fa4:	68bb      	ldr	r3, [r7, #8]
 8016fa6:	43db      	mvns	r3, r3
 8016fa8:	401a      	ands	r2, r3
 8016faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fac:	601a      	str	r2, [r3, #0]
 8016fae:	e020      	b.n	8016ff2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8016fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d104      	bne.n	8016fc0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8016fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8016fba:	2301      	movs	r3, #1
 8016fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8016fbe:	e018      	b.n	8016ff2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d003      	beq.n	8016fce <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8016fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016fcc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d003      	beq.n	8016fdc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8016fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016fda:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8016fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fde:	1d18      	adds	r0, r3, #4
 8016fe0:	68ba      	ldr	r2, [r7, #8]
 8016fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fe4:	4313      	orrs	r3, r2
 8016fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016fe8:	4619      	mov	r1, r3
 8016fea:	f001 fb77 	bl	80186dc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8016fee:	2300      	movs	r3, #0
 8016ff0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8016ff2:	f001 f973 	bl	80182dc <xTaskResumeAll>
 8016ff6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8016ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d031      	beq.n	8017062 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8016ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017000:	2b00      	cmp	r3, #0
 8017002:	d107      	bne.n	8017014 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8017004:	4b19      	ldr	r3, [pc, #100]	; (801706c <xEventGroupWaitBits+0x198>)
 8017006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801700a:	601a      	str	r2, [r3, #0]
 801700c:	f3bf 8f4f 	dsb	sy
 8017010:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8017014:	f001 fe76 	bl	8018d04 <uxTaskResetEventItemValue>
 8017018:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801701a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801701c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017020:	2b00      	cmp	r3, #0
 8017022:	d11a      	bne.n	801705a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8017024:	f002 fb76 	bl	8019714 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8017028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801702e:	683a      	ldr	r2, [r7, #0]
 8017030:	68b9      	ldr	r1, [r7, #8]
 8017032:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017034:	f000 f931 	bl	801729a <prvTestWaitCondition>
 8017038:	4603      	mov	r3, r0
 801703a:	2b00      	cmp	r3, #0
 801703c:	d009      	beq.n	8017052 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d006      	beq.n	8017052 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017046:	681a      	ldr	r2, [r3, #0]
 8017048:	68bb      	ldr	r3, [r7, #8]
 801704a:	43db      	mvns	r3, r3
 801704c:	401a      	ands	r2, r3
 801704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017050:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8017052:	2301      	movs	r3, #1
 8017054:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8017056:	f002 fb8d 	bl	8019774 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801705a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801705c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017060:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8017062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017064:	4618      	mov	r0, r3
 8017066:	3740      	adds	r7, #64	; 0x40
 8017068:	46bd      	mov	sp, r7
 801706a:	bd80      	pop	{r7, pc}
 801706c:	e000ed04 	.word	0xe000ed04

08017070 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b086      	sub	sp, #24
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
 8017078:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d10a      	bne.n	801709a <xEventGroupClearBits+0x2a>
	__asm volatile
 8017084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017088:	f383 8811 	msr	BASEPRI, r3
 801708c:	f3bf 8f6f 	isb	sy
 8017090:	f3bf 8f4f 	dsb	sy
 8017094:	60fb      	str	r3, [r7, #12]
}
 8017096:	bf00      	nop
 8017098:	e7fe      	b.n	8017098 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d00a      	beq.n	80170ba <xEventGroupClearBits+0x4a>
	__asm volatile
 80170a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170a8:	f383 8811 	msr	BASEPRI, r3
 80170ac:	f3bf 8f6f 	isb	sy
 80170b0:	f3bf 8f4f 	dsb	sy
 80170b4:	60bb      	str	r3, [r7, #8]
}
 80170b6:	bf00      	nop
 80170b8:	e7fe      	b.n	80170b8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80170ba:	f002 fb2b 	bl	8019714 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80170be:	697b      	ldr	r3, [r7, #20]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80170c4:	697b      	ldr	r3, [r7, #20]
 80170c6:	681a      	ldr	r2, [r3, #0]
 80170c8:	683b      	ldr	r3, [r7, #0]
 80170ca:	43db      	mvns	r3, r3
 80170cc:	401a      	ands	r2, r3
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80170d2:	f002 fb4f 	bl	8019774 <vPortExitCritical>

	return uxReturn;
 80170d6:	693b      	ldr	r3, [r7, #16]
}
 80170d8:	4618      	mov	r0, r3
 80170da:	3718      	adds	r7, #24
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}

080170e0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b084      	sub	sp, #16
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
 80170e8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80170ea:	2300      	movs	r3, #0
 80170ec:	683a      	ldr	r2, [r7, #0]
 80170ee:	6879      	ldr	r1, [r7, #4]
 80170f0:	4804      	ldr	r0, [pc, #16]	; (8017104 <xEventGroupClearBitsFromISR+0x24>)
 80170f2:	f002 f9c1 	bl	8019478 <xTimerPendFunctionCallFromISR>
 80170f6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80170f8:	68fb      	ldr	r3, [r7, #12]
	}
 80170fa:	4618      	mov	r0, r3
 80170fc:	3710      	adds	r7, #16
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd80      	pop	{r7, pc}
 8017102:	bf00      	nop
 8017104:	08017281 	.word	0x08017281

08017108 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8017108:	b480      	push	{r7}
 801710a:	b089      	sub	sp, #36	; 0x24
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017114:	f3ef 8211 	mrs	r2, BASEPRI
 8017118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801711c:	f383 8811 	msr	BASEPRI, r3
 8017120:	f3bf 8f6f 	isb	sy
 8017124:	f3bf 8f4f 	dsb	sy
 8017128:	60fa      	str	r2, [r7, #12]
 801712a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801712c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801712e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8017130:	69fb      	ldr	r3, [r7, #28]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	617b      	str	r3, [r7, #20]
 8017136:	69bb      	ldr	r3, [r7, #24]
 8017138:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801713a:	693b      	ldr	r3, [r7, #16]
 801713c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017140:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8017142:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8017144:	4618      	mov	r0, r3
 8017146:	3724      	adds	r7, #36	; 0x24
 8017148:	46bd      	mov	sp, r7
 801714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714e:	4770      	bx	lr

08017150 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b08e      	sub	sp, #56	; 0x38
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801715a:	2300      	movs	r3, #0
 801715c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8017162:	2300      	movs	r3, #0
 8017164:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d10a      	bne.n	8017182 <xEventGroupSetBits+0x32>
	__asm volatile
 801716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017170:	f383 8811 	msr	BASEPRI, r3
 8017174:	f3bf 8f6f 	isb	sy
 8017178:	f3bf 8f4f 	dsb	sy
 801717c:	613b      	str	r3, [r7, #16]
}
 801717e:	bf00      	nop
 8017180:	e7fe      	b.n	8017180 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017188:	2b00      	cmp	r3, #0
 801718a:	d00a      	beq.n	80171a2 <xEventGroupSetBits+0x52>
	__asm volatile
 801718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017190:	f383 8811 	msr	BASEPRI, r3
 8017194:	f3bf 8f6f 	isb	sy
 8017198:	f3bf 8f4f 	dsb	sy
 801719c:	60fb      	str	r3, [r7, #12]
}
 801719e:	bf00      	nop
 80171a0:	e7fe      	b.n	80171a0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80171a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a4:	3304      	adds	r3, #4
 80171a6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80171a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171aa:	3308      	adds	r3, #8
 80171ac:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80171ae:	f001 f887 	bl	80182c0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80171b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171b4:	68db      	ldr	r3, [r3, #12]
 80171b6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80171b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171ba:	681a      	ldr	r2, [r3, #0]
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	431a      	orrs	r2, r3
 80171c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171c2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80171c4:	e03c      	b.n	8017240 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80171c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171c8:	685b      	ldr	r3, [r3, #4]
 80171ca:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80171cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80171d2:	2300      	movs	r3, #0
 80171d4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80171d6:	69bb      	ldr	r3, [r7, #24]
 80171d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80171dc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80171de:	69bb      	ldr	r3, [r7, #24]
 80171e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80171e4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80171e6:	697b      	ldr	r3, [r7, #20]
 80171e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d108      	bne.n	8017202 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80171f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171f2:	681a      	ldr	r2, [r3, #0]
 80171f4:	69bb      	ldr	r3, [r7, #24]
 80171f6:	4013      	ands	r3, r2
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d00b      	beq.n	8017214 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80171fc:	2301      	movs	r3, #1
 80171fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017200:	e008      	b.n	8017214 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8017202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017204:	681a      	ldr	r2, [r3, #0]
 8017206:	69bb      	ldr	r3, [r7, #24]
 8017208:	4013      	ands	r3, r2
 801720a:	69ba      	ldr	r2, [r7, #24]
 801720c:	429a      	cmp	r2, r3
 801720e:	d101      	bne.n	8017214 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8017210:	2301      	movs	r3, #1
 8017212:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8017214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017216:	2b00      	cmp	r3, #0
 8017218:	d010      	beq.n	801723c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801721a:	697b      	ldr	r3, [r7, #20]
 801721c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017220:	2b00      	cmp	r3, #0
 8017222:	d003      	beq.n	801722c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017226:	69bb      	ldr	r3, [r7, #24]
 8017228:	4313      	orrs	r3, r2
 801722a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017234:	4619      	mov	r1, r3
 8017236:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017238:	f001 fb1c 	bl	8018874 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801723c:	69fb      	ldr	r3, [r7, #28]
 801723e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8017240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017242:	6a3b      	ldr	r3, [r7, #32]
 8017244:	429a      	cmp	r2, r3
 8017246:	d1be      	bne.n	80171c6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801724a:	681a      	ldr	r2, [r3, #0]
 801724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801724e:	43db      	mvns	r3, r3
 8017250:	401a      	ands	r2, r3
 8017252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017254:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8017256:	f001 f841 	bl	80182dc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801725c:	681b      	ldr	r3, [r3, #0]
}
 801725e:	4618      	mov	r0, r3
 8017260:	3738      	adds	r7, #56	; 0x38
 8017262:	46bd      	mov	sp, r7
 8017264:	bd80      	pop	{r7, pc}

08017266 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017266:	b580      	push	{r7, lr}
 8017268:	b082      	sub	sp, #8
 801726a:	af00      	add	r7, sp, #0
 801726c:	6078      	str	r0, [r7, #4]
 801726e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017270:	6839      	ldr	r1, [r7, #0]
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f7ff ff6c 	bl	8017150 <xEventGroupSetBits>
}
 8017278:	bf00      	nop
 801727a:	3708      	adds	r7, #8
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}

08017280 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b082      	sub	sp, #8
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
 8017288:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801728a:	6839      	ldr	r1, [r7, #0]
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	f7ff feef 	bl	8017070 <xEventGroupClearBits>
}
 8017292:	bf00      	nop
 8017294:	3708      	adds	r7, #8
 8017296:	46bd      	mov	sp, r7
 8017298:	bd80      	pop	{r7, pc}

0801729a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801729a:	b480      	push	{r7}
 801729c:	b087      	sub	sp, #28
 801729e:	af00      	add	r7, sp, #0
 80172a0:	60f8      	str	r0, [r7, #12]
 80172a2:	60b9      	str	r1, [r7, #8]
 80172a4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80172a6:	2300      	movs	r3, #0
 80172a8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d107      	bne.n	80172c0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80172b0:	68fa      	ldr	r2, [r7, #12]
 80172b2:	68bb      	ldr	r3, [r7, #8]
 80172b4:	4013      	ands	r3, r2
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d00a      	beq.n	80172d0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80172ba:	2301      	movs	r3, #1
 80172bc:	617b      	str	r3, [r7, #20]
 80172be:	e007      	b.n	80172d0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80172c0:	68fa      	ldr	r2, [r7, #12]
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	4013      	ands	r3, r2
 80172c6:	68ba      	ldr	r2, [r7, #8]
 80172c8:	429a      	cmp	r2, r3
 80172ca:	d101      	bne.n	80172d0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80172cc:	2301      	movs	r3, #1
 80172ce:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80172d0:	697b      	ldr	r3, [r7, #20]
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	371c      	adds	r7, #28
 80172d6:	46bd      	mov	sp, r7
 80172d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172dc:	4770      	bx	lr
	...

080172e0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b086      	sub	sp, #24
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	60f8      	str	r0, [r7, #12]
 80172e8:	60b9      	str	r1, [r7, #8]
 80172ea:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	68ba      	ldr	r2, [r7, #8]
 80172f0:	68f9      	ldr	r1, [r7, #12]
 80172f2:	4804      	ldr	r0, [pc, #16]	; (8017304 <xEventGroupSetBitsFromISR+0x24>)
 80172f4:	f002 f8c0 	bl	8019478 <xTimerPendFunctionCallFromISR>
 80172f8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80172fa:	697b      	ldr	r3, [r7, #20]
	}
 80172fc:	4618      	mov	r0, r3
 80172fe:	3718      	adds	r7, #24
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}
 8017304:	08017267 	.word	0x08017267

08017308 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017308:	b480      	push	{r7}
 801730a:	b083      	sub	sp, #12
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	f103 0208 	add.w	r2, r3, #8
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017320:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	f103 0208 	add.w	r2, r3, #8
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	f103 0208 	add.w	r2, r3, #8
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	2200      	movs	r2, #0
 801733a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801733c:	bf00      	nop
 801733e:	370c      	adds	r7, #12
 8017340:	46bd      	mov	sp, r7
 8017342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017346:	4770      	bx	lr

08017348 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017348:	b480      	push	{r7}
 801734a:	b083      	sub	sp, #12
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2200      	movs	r2, #0
 8017354:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017356:	bf00      	nop
 8017358:	370c      	adds	r7, #12
 801735a:	46bd      	mov	sp, r7
 801735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017360:	4770      	bx	lr

08017362 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017362:	b480      	push	{r7}
 8017364:	b085      	sub	sp, #20
 8017366:	af00      	add	r7, sp, #0
 8017368:	6078      	str	r0, [r7, #4]
 801736a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	685b      	ldr	r3, [r3, #4]
 8017370:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017372:	683b      	ldr	r3, [r7, #0]
 8017374:	68fa      	ldr	r2, [r7, #12]
 8017376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	689a      	ldr	r2, [r3, #8]
 801737c:	683b      	ldr	r3, [r7, #0]
 801737e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	689b      	ldr	r3, [r3, #8]
 8017384:	683a      	ldr	r2, [r7, #0]
 8017386:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	683a      	ldr	r2, [r7, #0]
 801738c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801738e:	683b      	ldr	r3, [r7, #0]
 8017390:	687a      	ldr	r2, [r7, #4]
 8017392:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	1c5a      	adds	r2, r3, #1
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	601a      	str	r2, [r3, #0]
}
 801739e:	bf00      	nop
 80173a0:	3714      	adds	r7, #20
 80173a2:	46bd      	mov	sp, r7
 80173a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a8:	4770      	bx	lr

080173aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80173aa:	b480      	push	{r7}
 80173ac:	b085      	sub	sp, #20
 80173ae:	af00      	add	r7, sp, #0
 80173b0:	6078      	str	r0, [r7, #4]
 80173b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80173b4:	683b      	ldr	r3, [r7, #0]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80173c0:	d103      	bne.n	80173ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	691b      	ldr	r3, [r3, #16]
 80173c6:	60fb      	str	r3, [r7, #12]
 80173c8:	e00c      	b.n	80173e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	3308      	adds	r3, #8
 80173ce:	60fb      	str	r3, [r7, #12]
 80173d0:	e002      	b.n	80173d8 <vListInsert+0x2e>
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	685b      	ldr	r3, [r3, #4]
 80173d6:	60fb      	str	r3, [r7, #12]
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	685b      	ldr	r3, [r3, #4]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	68ba      	ldr	r2, [r7, #8]
 80173e0:	429a      	cmp	r2, r3
 80173e2:	d2f6      	bcs.n	80173d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	685a      	ldr	r2, [r3, #4]
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80173ec:	683b      	ldr	r3, [r7, #0]
 80173ee:	685b      	ldr	r3, [r3, #4]
 80173f0:	683a      	ldr	r2, [r7, #0]
 80173f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80173f4:	683b      	ldr	r3, [r7, #0]
 80173f6:	68fa      	ldr	r2, [r7, #12]
 80173f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	683a      	ldr	r2, [r7, #0]
 80173fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	687a      	ldr	r2, [r7, #4]
 8017404:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	1c5a      	adds	r2, r3, #1
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	601a      	str	r2, [r3, #0]
}
 8017410:	bf00      	nop
 8017412:	3714      	adds	r7, #20
 8017414:	46bd      	mov	sp, r7
 8017416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801741a:	4770      	bx	lr

0801741c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801741c:	b480      	push	{r7}
 801741e:	b085      	sub	sp, #20
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	691b      	ldr	r3, [r3, #16]
 8017428:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	685b      	ldr	r3, [r3, #4]
 801742e:	687a      	ldr	r2, [r7, #4]
 8017430:	6892      	ldr	r2, [r2, #8]
 8017432:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	689b      	ldr	r3, [r3, #8]
 8017438:	687a      	ldr	r2, [r7, #4]
 801743a:	6852      	ldr	r2, [r2, #4]
 801743c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	685b      	ldr	r3, [r3, #4]
 8017442:	687a      	ldr	r2, [r7, #4]
 8017444:	429a      	cmp	r2, r3
 8017446:	d103      	bne.n	8017450 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	689a      	ldr	r2, [r3, #8]
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2200      	movs	r2, #0
 8017454:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	1e5a      	subs	r2, r3, #1
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	681b      	ldr	r3, [r3, #0]
}
 8017464:	4618      	mov	r0, r3
 8017466:	3714      	adds	r7, #20
 8017468:	46bd      	mov	sp, r7
 801746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746e:	4770      	bx	lr

08017470 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b084      	sub	sp, #16
 8017474:	af00      	add	r7, sp, #0
 8017476:	6078      	str	r0, [r7, #4]
 8017478:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d10a      	bne.n	801749a <xQueueGenericReset+0x2a>
	__asm volatile
 8017484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017488:	f383 8811 	msr	BASEPRI, r3
 801748c:	f3bf 8f6f 	isb	sy
 8017490:	f3bf 8f4f 	dsb	sy
 8017494:	60bb      	str	r3, [r7, #8]
}
 8017496:	bf00      	nop
 8017498:	e7fe      	b.n	8017498 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801749a:	f002 f93b 	bl	8019714 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	681a      	ldr	r2, [r3, #0]
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80174a6:	68f9      	ldr	r1, [r7, #12]
 80174a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80174aa:	fb01 f303 	mul.w	r3, r1, r3
 80174ae:	441a      	add	r2, r3
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	2200      	movs	r2, #0
 80174b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	681a      	ldr	r2, [r3, #0]
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	681a      	ldr	r2, [r3, #0]
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80174ca:	3b01      	subs	r3, #1
 80174cc:	68f9      	ldr	r1, [r7, #12]
 80174ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80174d0:	fb01 f303 	mul.w	r3, r1, r3
 80174d4:	441a      	add	r2, r3
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	22ff      	movs	r2, #255	; 0xff
 80174de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	22ff      	movs	r2, #255	; 0xff
 80174e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80174ea:	683b      	ldr	r3, [r7, #0]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d114      	bne.n	801751a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	691b      	ldr	r3, [r3, #16]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d01a      	beq.n	801752e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	3310      	adds	r3, #16
 80174fc:	4618      	mov	r0, r3
 80174fe:	f001 f955 	bl	80187ac <xTaskRemoveFromEventList>
 8017502:	4603      	mov	r3, r0
 8017504:	2b00      	cmp	r3, #0
 8017506:	d012      	beq.n	801752e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017508:	4b0c      	ldr	r3, [pc, #48]	; (801753c <xQueueGenericReset+0xcc>)
 801750a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801750e:	601a      	str	r2, [r3, #0]
 8017510:	f3bf 8f4f 	dsb	sy
 8017514:	f3bf 8f6f 	isb	sy
 8017518:	e009      	b.n	801752e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	3310      	adds	r3, #16
 801751e:	4618      	mov	r0, r3
 8017520:	f7ff fef2 	bl	8017308 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	3324      	adds	r3, #36	; 0x24
 8017528:	4618      	mov	r0, r3
 801752a:	f7ff feed 	bl	8017308 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801752e:	f002 f921 	bl	8019774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017532:	2301      	movs	r3, #1
}
 8017534:	4618      	mov	r0, r3
 8017536:	3710      	adds	r7, #16
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}
 801753c:	e000ed04 	.word	0xe000ed04

08017540 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017540:	b580      	push	{r7, lr}
 8017542:	b08e      	sub	sp, #56	; 0x38
 8017544:	af02      	add	r7, sp, #8
 8017546:	60f8      	str	r0, [r7, #12]
 8017548:	60b9      	str	r1, [r7, #8]
 801754a:	607a      	str	r2, [r7, #4]
 801754c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d10a      	bne.n	801756a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017558:	f383 8811 	msr	BASEPRI, r3
 801755c:	f3bf 8f6f 	isb	sy
 8017560:	f3bf 8f4f 	dsb	sy
 8017564:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017566:	bf00      	nop
 8017568:	e7fe      	b.n	8017568 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d10a      	bne.n	8017586 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017574:	f383 8811 	msr	BASEPRI, r3
 8017578:	f3bf 8f6f 	isb	sy
 801757c:	f3bf 8f4f 	dsb	sy
 8017580:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017582:	bf00      	nop
 8017584:	e7fe      	b.n	8017584 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d002      	beq.n	8017592 <xQueueGenericCreateStatic+0x52>
 801758c:	68bb      	ldr	r3, [r7, #8]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d001      	beq.n	8017596 <xQueueGenericCreateStatic+0x56>
 8017592:	2301      	movs	r3, #1
 8017594:	e000      	b.n	8017598 <xQueueGenericCreateStatic+0x58>
 8017596:	2300      	movs	r3, #0
 8017598:	2b00      	cmp	r3, #0
 801759a:	d10a      	bne.n	80175b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a0:	f383 8811 	msr	BASEPRI, r3
 80175a4:	f3bf 8f6f 	isb	sy
 80175a8:	f3bf 8f4f 	dsb	sy
 80175ac:	623b      	str	r3, [r7, #32]
}
 80175ae:	bf00      	nop
 80175b0:	e7fe      	b.n	80175b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d102      	bne.n	80175be <xQueueGenericCreateStatic+0x7e>
 80175b8:	68bb      	ldr	r3, [r7, #8]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d101      	bne.n	80175c2 <xQueueGenericCreateStatic+0x82>
 80175be:	2301      	movs	r3, #1
 80175c0:	e000      	b.n	80175c4 <xQueueGenericCreateStatic+0x84>
 80175c2:	2300      	movs	r3, #0
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d10a      	bne.n	80175de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80175c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175cc:	f383 8811 	msr	BASEPRI, r3
 80175d0:	f3bf 8f6f 	isb	sy
 80175d4:	f3bf 8f4f 	dsb	sy
 80175d8:	61fb      	str	r3, [r7, #28]
}
 80175da:	bf00      	nop
 80175dc:	e7fe      	b.n	80175dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80175de:	2350      	movs	r3, #80	; 0x50
 80175e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80175e2:	697b      	ldr	r3, [r7, #20]
 80175e4:	2b50      	cmp	r3, #80	; 0x50
 80175e6:	d00a      	beq.n	80175fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80175e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ec:	f383 8811 	msr	BASEPRI, r3
 80175f0:	f3bf 8f6f 	isb	sy
 80175f4:	f3bf 8f4f 	dsb	sy
 80175f8:	61bb      	str	r3, [r7, #24]
}
 80175fa:	bf00      	nop
 80175fc:	e7fe      	b.n	80175fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80175fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017600:	683b      	ldr	r3, [r7, #0]
 8017602:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017606:	2b00      	cmp	r3, #0
 8017608:	d00d      	beq.n	8017626 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801760c:	2201      	movs	r2, #1
 801760e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017612:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017618:	9300      	str	r3, [sp, #0]
 801761a:	4613      	mov	r3, r2
 801761c:	687a      	ldr	r2, [r7, #4]
 801761e:	68b9      	ldr	r1, [r7, #8]
 8017620:	68f8      	ldr	r0, [r7, #12]
 8017622:	f000 f805 	bl	8017630 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017628:	4618      	mov	r0, r3
 801762a:	3730      	adds	r7, #48	; 0x30
 801762c:	46bd      	mov	sp, r7
 801762e:	bd80      	pop	{r7, pc}

08017630 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b084      	sub	sp, #16
 8017634:	af00      	add	r7, sp, #0
 8017636:	60f8      	str	r0, [r7, #12]
 8017638:	60b9      	str	r1, [r7, #8]
 801763a:	607a      	str	r2, [r7, #4]
 801763c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801763e:	68bb      	ldr	r3, [r7, #8]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d103      	bne.n	801764c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017644:	69bb      	ldr	r3, [r7, #24]
 8017646:	69ba      	ldr	r2, [r7, #24]
 8017648:	601a      	str	r2, [r3, #0]
 801764a:	e002      	b.n	8017652 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801764c:	69bb      	ldr	r3, [r7, #24]
 801764e:	687a      	ldr	r2, [r7, #4]
 8017650:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017652:	69bb      	ldr	r3, [r7, #24]
 8017654:	68fa      	ldr	r2, [r7, #12]
 8017656:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017658:	69bb      	ldr	r3, [r7, #24]
 801765a:	68ba      	ldr	r2, [r7, #8]
 801765c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801765e:	2101      	movs	r1, #1
 8017660:	69b8      	ldr	r0, [r7, #24]
 8017662:	f7ff ff05 	bl	8017470 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017666:	69bb      	ldr	r3, [r7, #24]
 8017668:	78fa      	ldrb	r2, [r7, #3]
 801766a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801766e:	bf00      	nop
 8017670:	3710      	adds	r7, #16
 8017672:	46bd      	mov	sp, r7
 8017674:	bd80      	pop	{r7, pc}
	...

08017678 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b08e      	sub	sp, #56	; 0x38
 801767c:	af00      	add	r7, sp, #0
 801767e:	60f8      	str	r0, [r7, #12]
 8017680:	60b9      	str	r1, [r7, #8]
 8017682:	607a      	str	r2, [r7, #4]
 8017684:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017686:	2300      	movs	r3, #0
 8017688:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017690:	2b00      	cmp	r3, #0
 8017692:	d10a      	bne.n	80176aa <xQueueGenericSend+0x32>
	__asm volatile
 8017694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017698:	f383 8811 	msr	BASEPRI, r3
 801769c:	f3bf 8f6f 	isb	sy
 80176a0:	f3bf 8f4f 	dsb	sy
 80176a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80176a6:	bf00      	nop
 80176a8:	e7fe      	b.n	80176a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80176aa:	68bb      	ldr	r3, [r7, #8]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d103      	bne.n	80176b8 <xQueueGenericSend+0x40>
 80176b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d101      	bne.n	80176bc <xQueueGenericSend+0x44>
 80176b8:	2301      	movs	r3, #1
 80176ba:	e000      	b.n	80176be <xQueueGenericSend+0x46>
 80176bc:	2300      	movs	r3, #0
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d10a      	bne.n	80176d8 <xQueueGenericSend+0x60>
	__asm volatile
 80176c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176c6:	f383 8811 	msr	BASEPRI, r3
 80176ca:	f3bf 8f6f 	isb	sy
 80176ce:	f3bf 8f4f 	dsb	sy
 80176d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80176d4:	bf00      	nop
 80176d6:	e7fe      	b.n	80176d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	2b02      	cmp	r3, #2
 80176dc:	d103      	bne.n	80176e6 <xQueueGenericSend+0x6e>
 80176de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176e2:	2b01      	cmp	r3, #1
 80176e4:	d101      	bne.n	80176ea <xQueueGenericSend+0x72>
 80176e6:	2301      	movs	r3, #1
 80176e8:	e000      	b.n	80176ec <xQueueGenericSend+0x74>
 80176ea:	2300      	movs	r3, #0
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d10a      	bne.n	8017706 <xQueueGenericSend+0x8e>
	__asm volatile
 80176f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f4:	f383 8811 	msr	BASEPRI, r3
 80176f8:	f3bf 8f6f 	isb	sy
 80176fc:	f3bf 8f4f 	dsb	sy
 8017700:	623b      	str	r3, [r7, #32]
}
 8017702:	bf00      	nop
 8017704:	e7fe      	b.n	8017704 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017706:	f001 fa71 	bl	8018bec <xTaskGetSchedulerState>
 801770a:	4603      	mov	r3, r0
 801770c:	2b00      	cmp	r3, #0
 801770e:	d102      	bne.n	8017716 <xQueueGenericSend+0x9e>
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d101      	bne.n	801771a <xQueueGenericSend+0xa2>
 8017716:	2301      	movs	r3, #1
 8017718:	e000      	b.n	801771c <xQueueGenericSend+0xa4>
 801771a:	2300      	movs	r3, #0
 801771c:	2b00      	cmp	r3, #0
 801771e:	d10a      	bne.n	8017736 <xQueueGenericSend+0xbe>
	__asm volatile
 8017720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017724:	f383 8811 	msr	BASEPRI, r3
 8017728:	f3bf 8f6f 	isb	sy
 801772c:	f3bf 8f4f 	dsb	sy
 8017730:	61fb      	str	r3, [r7, #28]
}
 8017732:	bf00      	nop
 8017734:	e7fe      	b.n	8017734 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017736:	f001 ffed 	bl	8019714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017742:	429a      	cmp	r2, r3
 8017744:	d302      	bcc.n	801774c <xQueueGenericSend+0xd4>
 8017746:	683b      	ldr	r3, [r7, #0]
 8017748:	2b02      	cmp	r3, #2
 801774a:	d129      	bne.n	80177a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801774c:	683a      	ldr	r2, [r7, #0]
 801774e:	68b9      	ldr	r1, [r7, #8]
 8017750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017752:	f000 fa0b 	bl	8017b6c <prvCopyDataToQueue>
 8017756:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801775c:	2b00      	cmp	r3, #0
 801775e:	d010      	beq.n	8017782 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017762:	3324      	adds	r3, #36	; 0x24
 8017764:	4618      	mov	r0, r3
 8017766:	f001 f821 	bl	80187ac <xTaskRemoveFromEventList>
 801776a:	4603      	mov	r3, r0
 801776c:	2b00      	cmp	r3, #0
 801776e:	d013      	beq.n	8017798 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017770:	4b3f      	ldr	r3, [pc, #252]	; (8017870 <xQueueGenericSend+0x1f8>)
 8017772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017776:	601a      	str	r2, [r3, #0]
 8017778:	f3bf 8f4f 	dsb	sy
 801777c:	f3bf 8f6f 	isb	sy
 8017780:	e00a      	b.n	8017798 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017784:	2b00      	cmp	r3, #0
 8017786:	d007      	beq.n	8017798 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017788:	4b39      	ldr	r3, [pc, #228]	; (8017870 <xQueueGenericSend+0x1f8>)
 801778a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801778e:	601a      	str	r2, [r3, #0]
 8017790:	f3bf 8f4f 	dsb	sy
 8017794:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017798:	f001 ffec 	bl	8019774 <vPortExitCritical>
				return pdPASS;
 801779c:	2301      	movs	r3, #1
 801779e:	e063      	b.n	8017868 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d103      	bne.n	80177ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80177a6:	f001 ffe5 	bl	8019774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80177aa:	2300      	movs	r3, #0
 80177ac:	e05c      	b.n	8017868 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80177ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d106      	bne.n	80177c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80177b4:	f107 0314 	add.w	r3, r7, #20
 80177b8:	4618      	mov	r0, r3
 80177ba:	f001 f8bd 	bl	8018938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80177be:	2301      	movs	r3, #1
 80177c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80177c2:	f001 ffd7 	bl	8019774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80177c6:	f000 fd7b 	bl	80182c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80177ca:	f001 ffa3 	bl	8019714 <vPortEnterCritical>
 80177ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80177d4:	b25b      	sxtb	r3, r3
 80177d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80177da:	d103      	bne.n	80177e4 <xQueueGenericSend+0x16c>
 80177dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177de:	2200      	movs	r2, #0
 80177e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80177e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80177ea:	b25b      	sxtb	r3, r3
 80177ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80177f0:	d103      	bne.n	80177fa <xQueueGenericSend+0x182>
 80177f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f4:	2200      	movs	r2, #0
 80177f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80177fa:	f001 ffbb 	bl	8019774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80177fe:	1d3a      	adds	r2, r7, #4
 8017800:	f107 0314 	add.w	r3, r7, #20
 8017804:	4611      	mov	r1, r2
 8017806:	4618      	mov	r0, r3
 8017808:	f001 f8ac 	bl	8018964 <xTaskCheckForTimeOut>
 801780c:	4603      	mov	r3, r0
 801780e:	2b00      	cmp	r3, #0
 8017810:	d124      	bne.n	801785c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017814:	f000 faa2 	bl	8017d5c <prvIsQueueFull>
 8017818:	4603      	mov	r3, r0
 801781a:	2b00      	cmp	r3, #0
 801781c:	d018      	beq.n	8017850 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017820:	3310      	adds	r3, #16
 8017822:	687a      	ldr	r2, [r7, #4]
 8017824:	4611      	mov	r1, r2
 8017826:	4618      	mov	r0, r3
 8017828:	f000 ff34 	bl	8018694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801782c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801782e:	f000 fa2d 	bl	8017c8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017832:	f000 fd53 	bl	80182dc <xTaskResumeAll>
 8017836:	4603      	mov	r3, r0
 8017838:	2b00      	cmp	r3, #0
 801783a:	f47f af7c 	bne.w	8017736 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801783e:	4b0c      	ldr	r3, [pc, #48]	; (8017870 <xQueueGenericSend+0x1f8>)
 8017840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017844:	601a      	str	r2, [r3, #0]
 8017846:	f3bf 8f4f 	dsb	sy
 801784a:	f3bf 8f6f 	isb	sy
 801784e:	e772      	b.n	8017736 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017852:	f000 fa1b 	bl	8017c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017856:	f000 fd41 	bl	80182dc <xTaskResumeAll>
 801785a:	e76c      	b.n	8017736 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801785c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801785e:	f000 fa15 	bl	8017c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017862:	f000 fd3b 	bl	80182dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017866:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017868:	4618      	mov	r0, r3
 801786a:	3738      	adds	r7, #56	; 0x38
 801786c:	46bd      	mov	sp, r7
 801786e:	bd80      	pop	{r7, pc}
 8017870:	e000ed04 	.word	0xe000ed04

08017874 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b090      	sub	sp, #64	; 0x40
 8017878:	af00      	add	r7, sp, #0
 801787a:	60f8      	str	r0, [r7, #12]
 801787c:	60b9      	str	r1, [r7, #8]
 801787e:	607a      	str	r2, [r7, #4]
 8017880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017888:	2b00      	cmp	r3, #0
 801788a:	d10a      	bne.n	80178a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017890:	f383 8811 	msr	BASEPRI, r3
 8017894:	f3bf 8f6f 	isb	sy
 8017898:	f3bf 8f4f 	dsb	sy
 801789c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801789e:	bf00      	nop
 80178a0:	e7fe      	b.n	80178a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d103      	bne.n	80178b0 <xQueueGenericSendFromISR+0x3c>
 80178a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d101      	bne.n	80178b4 <xQueueGenericSendFromISR+0x40>
 80178b0:	2301      	movs	r3, #1
 80178b2:	e000      	b.n	80178b6 <xQueueGenericSendFromISR+0x42>
 80178b4:	2300      	movs	r3, #0
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d10a      	bne.n	80178d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80178ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178be:	f383 8811 	msr	BASEPRI, r3
 80178c2:	f3bf 8f6f 	isb	sy
 80178c6:	f3bf 8f4f 	dsb	sy
 80178ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80178cc:	bf00      	nop
 80178ce:	e7fe      	b.n	80178ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80178d0:	683b      	ldr	r3, [r7, #0]
 80178d2:	2b02      	cmp	r3, #2
 80178d4:	d103      	bne.n	80178de <xQueueGenericSendFromISR+0x6a>
 80178d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178da:	2b01      	cmp	r3, #1
 80178dc:	d101      	bne.n	80178e2 <xQueueGenericSendFromISR+0x6e>
 80178de:	2301      	movs	r3, #1
 80178e0:	e000      	b.n	80178e4 <xQueueGenericSendFromISR+0x70>
 80178e2:	2300      	movs	r3, #0
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d10a      	bne.n	80178fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80178e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178ec:	f383 8811 	msr	BASEPRI, r3
 80178f0:	f3bf 8f6f 	isb	sy
 80178f4:	f3bf 8f4f 	dsb	sy
 80178f8:	623b      	str	r3, [r7, #32]
}
 80178fa:	bf00      	nop
 80178fc:	e7fe      	b.n	80178fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80178fe:	f001 ffeb 	bl	80198d8 <vPortValidateInterruptPriority>
	__asm volatile
 8017902:	f3ef 8211 	mrs	r2, BASEPRI
 8017906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801790a:	f383 8811 	msr	BASEPRI, r3
 801790e:	f3bf 8f6f 	isb	sy
 8017912:	f3bf 8f4f 	dsb	sy
 8017916:	61fa      	str	r2, [r7, #28]
 8017918:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801791a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801791c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017926:	429a      	cmp	r2, r3
 8017928:	d302      	bcc.n	8017930 <xQueueGenericSendFromISR+0xbc>
 801792a:	683b      	ldr	r3, [r7, #0]
 801792c:	2b02      	cmp	r3, #2
 801792e:	d12f      	bne.n	8017990 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801793e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017940:	683a      	ldr	r2, [r7, #0]
 8017942:	68b9      	ldr	r1, [r7, #8]
 8017944:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017946:	f000 f911 	bl	8017b6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801794a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801794e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017952:	d112      	bne.n	801797a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017958:	2b00      	cmp	r3, #0
 801795a:	d016      	beq.n	801798a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801795e:	3324      	adds	r3, #36	; 0x24
 8017960:	4618      	mov	r0, r3
 8017962:	f000 ff23 	bl	80187ac <xTaskRemoveFromEventList>
 8017966:	4603      	mov	r3, r0
 8017968:	2b00      	cmp	r3, #0
 801796a:	d00e      	beq.n	801798a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d00b      	beq.n	801798a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	2201      	movs	r2, #1
 8017976:	601a      	str	r2, [r3, #0]
 8017978:	e007      	b.n	801798a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801797a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801797e:	3301      	adds	r3, #1
 8017980:	b2db      	uxtb	r3, r3
 8017982:	b25a      	sxtb	r2, r3
 8017984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801798a:	2301      	movs	r3, #1
 801798c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801798e:	e001      	b.n	8017994 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017990:	2300      	movs	r3, #0
 8017992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017996:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017998:	697b      	ldr	r3, [r7, #20]
 801799a:	f383 8811 	msr	BASEPRI, r3
}
 801799e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80179a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	3740      	adds	r7, #64	; 0x40
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd80      	pop	{r7, pc}
	...

080179ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b08c      	sub	sp, #48	; 0x30
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	60f8      	str	r0, [r7, #12]
 80179b4:	60b9      	str	r1, [r7, #8]
 80179b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80179b8:	2300      	movs	r3, #0
 80179ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80179c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d10a      	bne.n	80179dc <xQueueReceive+0x30>
	__asm volatile
 80179c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179ca:	f383 8811 	msr	BASEPRI, r3
 80179ce:	f3bf 8f6f 	isb	sy
 80179d2:	f3bf 8f4f 	dsb	sy
 80179d6:	623b      	str	r3, [r7, #32]
}
 80179d8:	bf00      	nop
 80179da:	e7fe      	b.n	80179da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80179dc:	68bb      	ldr	r3, [r7, #8]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d103      	bne.n	80179ea <xQueueReceive+0x3e>
 80179e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d101      	bne.n	80179ee <xQueueReceive+0x42>
 80179ea:	2301      	movs	r3, #1
 80179ec:	e000      	b.n	80179f0 <xQueueReceive+0x44>
 80179ee:	2300      	movs	r3, #0
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d10a      	bne.n	8017a0a <xQueueReceive+0x5e>
	__asm volatile
 80179f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179f8:	f383 8811 	msr	BASEPRI, r3
 80179fc:	f3bf 8f6f 	isb	sy
 8017a00:	f3bf 8f4f 	dsb	sy
 8017a04:	61fb      	str	r3, [r7, #28]
}
 8017a06:	bf00      	nop
 8017a08:	e7fe      	b.n	8017a08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017a0a:	f001 f8ef 	bl	8018bec <xTaskGetSchedulerState>
 8017a0e:	4603      	mov	r3, r0
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d102      	bne.n	8017a1a <xQueueReceive+0x6e>
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d101      	bne.n	8017a1e <xQueueReceive+0x72>
 8017a1a:	2301      	movs	r3, #1
 8017a1c:	e000      	b.n	8017a20 <xQueueReceive+0x74>
 8017a1e:	2300      	movs	r3, #0
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d10a      	bne.n	8017a3a <xQueueReceive+0x8e>
	__asm volatile
 8017a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a28:	f383 8811 	msr	BASEPRI, r3
 8017a2c:	f3bf 8f6f 	isb	sy
 8017a30:	f3bf 8f4f 	dsb	sy
 8017a34:	61bb      	str	r3, [r7, #24]
}
 8017a36:	bf00      	nop
 8017a38:	e7fe      	b.n	8017a38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017a3a:	f001 fe6b 	bl	8019714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d01f      	beq.n	8017a8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017a4a:	68b9      	ldr	r1, [r7, #8]
 8017a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a4e:	f000 f8f7 	bl	8017c40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a54:	1e5a      	subs	r2, r3, #1
 8017a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a5c:	691b      	ldr	r3, [r3, #16]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d00f      	beq.n	8017a82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a64:	3310      	adds	r3, #16
 8017a66:	4618      	mov	r0, r3
 8017a68:	f000 fea0 	bl	80187ac <xTaskRemoveFromEventList>
 8017a6c:	4603      	mov	r3, r0
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d007      	beq.n	8017a82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017a72:	4b3d      	ldr	r3, [pc, #244]	; (8017b68 <xQueueReceive+0x1bc>)
 8017a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a78:	601a      	str	r2, [r3, #0]
 8017a7a:	f3bf 8f4f 	dsb	sy
 8017a7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017a82:	f001 fe77 	bl	8019774 <vPortExitCritical>
				return pdPASS;
 8017a86:	2301      	movs	r3, #1
 8017a88:	e069      	b.n	8017b5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d103      	bne.n	8017a98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017a90:	f001 fe70 	bl	8019774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017a94:	2300      	movs	r3, #0
 8017a96:	e062      	b.n	8017b5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d106      	bne.n	8017aac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017a9e:	f107 0310 	add.w	r3, r7, #16
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f000 ff48 	bl	8018938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017aac:	f001 fe62 	bl	8019774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017ab0:	f000 fc06 	bl	80182c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017ab4:	f001 fe2e 	bl	8019714 <vPortEnterCritical>
 8017ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017abe:	b25b      	sxtb	r3, r3
 8017ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017ac4:	d103      	bne.n	8017ace <xQueueReceive+0x122>
 8017ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ac8:	2200      	movs	r2, #0
 8017aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017ad4:	b25b      	sxtb	r3, r3
 8017ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017ada:	d103      	bne.n	8017ae4 <xQueueReceive+0x138>
 8017adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ade:	2200      	movs	r2, #0
 8017ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017ae4:	f001 fe46 	bl	8019774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017ae8:	1d3a      	adds	r2, r7, #4
 8017aea:	f107 0310 	add.w	r3, r7, #16
 8017aee:	4611      	mov	r1, r2
 8017af0:	4618      	mov	r0, r3
 8017af2:	f000 ff37 	bl	8018964 <xTaskCheckForTimeOut>
 8017af6:	4603      	mov	r3, r0
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d123      	bne.n	8017b44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017afe:	f000 f917 	bl	8017d30 <prvIsQueueEmpty>
 8017b02:	4603      	mov	r3, r0
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d017      	beq.n	8017b38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b0a:	3324      	adds	r3, #36	; 0x24
 8017b0c:	687a      	ldr	r2, [r7, #4]
 8017b0e:	4611      	mov	r1, r2
 8017b10:	4618      	mov	r0, r3
 8017b12:	f000 fdbf 	bl	8018694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b18:	f000 f8b8 	bl	8017c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017b1c:	f000 fbde 	bl	80182dc <xTaskResumeAll>
 8017b20:	4603      	mov	r3, r0
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d189      	bne.n	8017a3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017b26:	4b10      	ldr	r3, [pc, #64]	; (8017b68 <xQueueReceive+0x1bc>)
 8017b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b2c:	601a      	str	r2, [r3, #0]
 8017b2e:	f3bf 8f4f 	dsb	sy
 8017b32:	f3bf 8f6f 	isb	sy
 8017b36:	e780      	b.n	8017a3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b3a:	f000 f8a7 	bl	8017c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017b3e:	f000 fbcd 	bl	80182dc <xTaskResumeAll>
 8017b42:	e77a      	b.n	8017a3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b46:	f000 f8a1 	bl	8017c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017b4a:	f000 fbc7 	bl	80182dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b50:	f000 f8ee 	bl	8017d30 <prvIsQueueEmpty>
 8017b54:	4603      	mov	r3, r0
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	f43f af6f 	beq.w	8017a3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017b5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017b5e:	4618      	mov	r0, r3
 8017b60:	3730      	adds	r7, #48	; 0x30
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}
 8017b66:	bf00      	nop
 8017b68:	e000ed04 	.word	0xe000ed04

08017b6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b086      	sub	sp, #24
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	60f8      	str	r0, [r7, #12]
 8017b74:	60b9      	str	r1, [r7, #8]
 8017b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017b78:	2300      	movs	r3, #0
 8017b7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d10d      	bne.n	8017ba6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d14d      	bne.n	8017c2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	689b      	ldr	r3, [r3, #8]
 8017b96:	4618      	mov	r0, r3
 8017b98:	f001 f846 	bl	8018c28 <xTaskPriorityDisinherit>
 8017b9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	609a      	str	r2, [r3, #8]
 8017ba4:	e043      	b.n	8017c2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d119      	bne.n	8017be0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	6858      	ldr	r0, [r3, #4]
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bb4:	461a      	mov	r2, r3
 8017bb6:	68b9      	ldr	r1, [r7, #8]
 8017bb8:	f002 f8e2 	bl	8019d80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	685a      	ldr	r2, [r3, #4]
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bc4:	441a      	add	r2, r3
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	685a      	ldr	r2, [r3, #4]
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	689b      	ldr	r3, [r3, #8]
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d32b      	bcc.n	8017c2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	681a      	ldr	r2, [r3, #0]
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	605a      	str	r2, [r3, #4]
 8017bde:	e026      	b.n	8017c2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	68d8      	ldr	r0, [r3, #12]
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017be8:	461a      	mov	r2, r3
 8017bea:	68b9      	ldr	r1, [r7, #8]
 8017bec:	f002 f8c8 	bl	8019d80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	68da      	ldr	r2, [r3, #12]
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bf8:	425b      	negs	r3, r3
 8017bfa:	441a      	add	r2, r3
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	68da      	ldr	r2, [r3, #12]
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	429a      	cmp	r2, r3
 8017c0a:	d207      	bcs.n	8017c1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	689a      	ldr	r2, [r3, #8]
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c14:	425b      	negs	r3, r3
 8017c16:	441a      	add	r2, r3
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	2b02      	cmp	r3, #2
 8017c20:	d105      	bne.n	8017c2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017c22:	693b      	ldr	r3, [r7, #16]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d002      	beq.n	8017c2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017c28:	693b      	ldr	r3, [r7, #16]
 8017c2a:	3b01      	subs	r3, #1
 8017c2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017c2e:	693b      	ldr	r3, [r7, #16]
 8017c30:	1c5a      	adds	r2, r3, #1
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017c36:	697b      	ldr	r3, [r7, #20]
}
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3718      	adds	r7, #24
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}

08017c40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b082      	sub	sp, #8
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
 8017c48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d018      	beq.n	8017c84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	68da      	ldr	r2, [r3, #12]
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c5a:	441a      	add	r2, r3
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	68da      	ldr	r2, [r3, #12]
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	689b      	ldr	r3, [r3, #8]
 8017c68:	429a      	cmp	r2, r3
 8017c6a:	d303      	bcc.n	8017c74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	681a      	ldr	r2, [r3, #0]
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	68d9      	ldr	r1, [r3, #12]
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c7c:	461a      	mov	r2, r3
 8017c7e:	6838      	ldr	r0, [r7, #0]
 8017c80:	f002 f87e 	bl	8019d80 <memcpy>
	}
}
 8017c84:	bf00      	nop
 8017c86:	3708      	adds	r7, #8
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b084      	sub	sp, #16
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017c94:	f001 fd3e 	bl	8019714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017c9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017ca0:	e011      	b.n	8017cc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d012      	beq.n	8017cd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	3324      	adds	r3, #36	; 0x24
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f000 fd7c 	bl	80187ac <xTaskRemoveFromEventList>
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d001      	beq.n	8017cbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017cba:	f000 feb5 	bl	8018a28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017cbe:	7bfb      	ldrb	r3, [r7, #15]
 8017cc0:	3b01      	subs	r3, #1
 8017cc2:	b2db      	uxtb	r3, r3
 8017cc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	dce9      	bgt.n	8017ca2 <prvUnlockQueue+0x16>
 8017cce:	e000      	b.n	8017cd2 <prvUnlockQueue+0x46>
					break;
 8017cd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	22ff      	movs	r2, #255	; 0xff
 8017cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017cda:	f001 fd4b 	bl	8019774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017cde:	f001 fd19 	bl	8019714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017ce8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017cea:	e011      	b.n	8017d10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	691b      	ldr	r3, [r3, #16]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d012      	beq.n	8017d1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	3310      	adds	r3, #16
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	f000 fd57 	bl	80187ac <xTaskRemoveFromEventList>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d001      	beq.n	8017d08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017d04:	f000 fe90 	bl	8018a28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017d08:	7bbb      	ldrb	r3, [r7, #14]
 8017d0a:	3b01      	subs	r3, #1
 8017d0c:	b2db      	uxtb	r3, r3
 8017d0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	dce9      	bgt.n	8017cec <prvUnlockQueue+0x60>
 8017d18:	e000      	b.n	8017d1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017d1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	22ff      	movs	r2, #255	; 0xff
 8017d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017d24:	f001 fd26 	bl	8019774 <vPortExitCritical>
}
 8017d28:	bf00      	nop
 8017d2a:	3710      	adds	r7, #16
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}

08017d30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b084      	sub	sp, #16
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017d38:	f001 fcec 	bl	8019714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d102      	bne.n	8017d4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017d44:	2301      	movs	r3, #1
 8017d46:	60fb      	str	r3, [r7, #12]
 8017d48:	e001      	b.n	8017d4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017d4e:	f001 fd11 	bl	8019774 <vPortExitCritical>

	return xReturn;
 8017d52:	68fb      	ldr	r3, [r7, #12]
}
 8017d54:	4618      	mov	r0, r3
 8017d56:	3710      	adds	r7, #16
 8017d58:	46bd      	mov	sp, r7
 8017d5a:	bd80      	pop	{r7, pc}

08017d5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b084      	sub	sp, #16
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017d64:	f001 fcd6 	bl	8019714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d70:	429a      	cmp	r2, r3
 8017d72:	d102      	bne.n	8017d7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017d74:	2301      	movs	r3, #1
 8017d76:	60fb      	str	r3, [r7, #12]
 8017d78:	e001      	b.n	8017d7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017d7e:	f001 fcf9 	bl	8019774 <vPortExitCritical>

	return xReturn;
 8017d82:	68fb      	ldr	r3, [r7, #12]
}
 8017d84:	4618      	mov	r0, r3
 8017d86:	3710      	adds	r7, #16
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}

08017d8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017d8c:	b480      	push	{r7}
 8017d8e:	b085      	sub	sp, #20
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
 8017d94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d96:	2300      	movs	r3, #0
 8017d98:	60fb      	str	r3, [r7, #12]
 8017d9a:	e014      	b.n	8017dc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017d9c:	4a0f      	ldr	r2, [pc, #60]	; (8017ddc <vQueueAddToRegistry+0x50>)
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d10b      	bne.n	8017dc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017da8:	490c      	ldr	r1, [pc, #48]	; (8017ddc <vQueueAddToRegistry+0x50>)
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	683a      	ldr	r2, [r7, #0]
 8017dae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017db2:	4a0a      	ldr	r2, [pc, #40]	; (8017ddc <vQueueAddToRegistry+0x50>)
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	00db      	lsls	r3, r3, #3
 8017db8:	4413      	add	r3, r2
 8017dba:	687a      	ldr	r2, [r7, #4]
 8017dbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017dbe:	e006      	b.n	8017dce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	3301      	adds	r3, #1
 8017dc4:	60fb      	str	r3, [r7, #12]
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	2b07      	cmp	r3, #7
 8017dca:	d9e7      	bls.n	8017d9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017dcc:	bf00      	nop
 8017dce:	bf00      	nop
 8017dd0:	3714      	adds	r7, #20
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd8:	4770      	bx	lr
 8017dda:	bf00      	nop
 8017ddc:	24002678 	.word	0x24002678

08017de0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b086      	sub	sp, #24
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	60f8      	str	r0, [r7, #12]
 8017de8:	60b9      	str	r1, [r7, #8]
 8017dea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017df0:	f001 fc90 	bl	8019714 <vPortEnterCritical>
 8017df4:	697b      	ldr	r3, [r7, #20]
 8017df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017dfa:	b25b      	sxtb	r3, r3
 8017dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017e00:	d103      	bne.n	8017e0a <vQueueWaitForMessageRestricted+0x2a>
 8017e02:	697b      	ldr	r3, [r7, #20]
 8017e04:	2200      	movs	r2, #0
 8017e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017e10:	b25b      	sxtb	r3, r3
 8017e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017e16:	d103      	bne.n	8017e20 <vQueueWaitForMessageRestricted+0x40>
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017e20:	f001 fca8 	bl	8019774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017e24:	697b      	ldr	r3, [r7, #20]
 8017e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d106      	bne.n	8017e3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017e2c:	697b      	ldr	r3, [r7, #20]
 8017e2e:	3324      	adds	r3, #36	; 0x24
 8017e30:	687a      	ldr	r2, [r7, #4]
 8017e32:	68b9      	ldr	r1, [r7, #8]
 8017e34:	4618      	mov	r0, r3
 8017e36:	f000 fc8d 	bl	8018754 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017e3a:	6978      	ldr	r0, [r7, #20]
 8017e3c:	f7ff ff26 	bl	8017c8c <prvUnlockQueue>
	}
 8017e40:	bf00      	nop
 8017e42:	3718      	adds	r7, #24
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}

08017e48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b08e      	sub	sp, #56	; 0x38
 8017e4c:	af04      	add	r7, sp, #16
 8017e4e:	60f8      	str	r0, [r7, #12]
 8017e50:	60b9      	str	r1, [r7, #8]
 8017e52:	607a      	str	r2, [r7, #4]
 8017e54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d10a      	bne.n	8017e72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8017e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e60:	f383 8811 	msr	BASEPRI, r3
 8017e64:	f3bf 8f6f 	isb	sy
 8017e68:	f3bf 8f4f 	dsb	sy
 8017e6c:	623b      	str	r3, [r7, #32]
}
 8017e6e:	bf00      	nop
 8017e70:	e7fe      	b.n	8017e70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d10a      	bne.n	8017e8e <xTaskCreateStatic+0x46>
	__asm volatile
 8017e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e7c:	f383 8811 	msr	BASEPRI, r3
 8017e80:	f3bf 8f6f 	isb	sy
 8017e84:	f3bf 8f4f 	dsb	sy
 8017e88:	61fb      	str	r3, [r7, #28]
}
 8017e8a:	bf00      	nop
 8017e8c:	e7fe      	b.n	8017e8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017e8e:	235c      	movs	r3, #92	; 0x5c
 8017e90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017e92:	693b      	ldr	r3, [r7, #16]
 8017e94:	2b5c      	cmp	r3, #92	; 0x5c
 8017e96:	d00a      	beq.n	8017eae <xTaskCreateStatic+0x66>
	__asm volatile
 8017e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e9c:	f383 8811 	msr	BASEPRI, r3
 8017ea0:	f3bf 8f6f 	isb	sy
 8017ea4:	f3bf 8f4f 	dsb	sy
 8017ea8:	61bb      	str	r3, [r7, #24]
}
 8017eaa:	bf00      	nop
 8017eac:	e7fe      	b.n	8017eac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017eae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d01e      	beq.n	8017ef4 <xTaskCreateStatic+0xac>
 8017eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d01b      	beq.n	8017ef4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ebe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017ec4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec8:	2202      	movs	r2, #2
 8017eca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017ece:	2300      	movs	r3, #0
 8017ed0:	9303      	str	r3, [sp, #12]
 8017ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed4:	9302      	str	r3, [sp, #8]
 8017ed6:	f107 0314 	add.w	r3, r7, #20
 8017eda:	9301      	str	r3, [sp, #4]
 8017edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ede:	9300      	str	r3, [sp, #0]
 8017ee0:	683b      	ldr	r3, [r7, #0]
 8017ee2:	687a      	ldr	r2, [r7, #4]
 8017ee4:	68b9      	ldr	r1, [r7, #8]
 8017ee6:	68f8      	ldr	r0, [r7, #12]
 8017ee8:	f000 f850 	bl	8017f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017eee:	f000 f8dd 	bl	80180ac <prvAddNewTaskToReadyList>
 8017ef2:	e001      	b.n	8017ef8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017ef8:	697b      	ldr	r3, [r7, #20]
	}
 8017efa:	4618      	mov	r0, r3
 8017efc:	3728      	adds	r7, #40	; 0x28
 8017efe:	46bd      	mov	sp, r7
 8017f00:	bd80      	pop	{r7, pc}

08017f02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017f02:	b580      	push	{r7, lr}
 8017f04:	b08c      	sub	sp, #48	; 0x30
 8017f06:	af04      	add	r7, sp, #16
 8017f08:	60f8      	str	r0, [r7, #12]
 8017f0a:	60b9      	str	r1, [r7, #8]
 8017f0c:	603b      	str	r3, [r7, #0]
 8017f0e:	4613      	mov	r3, r2
 8017f10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017f12:	88fb      	ldrh	r3, [r7, #6]
 8017f14:	009b      	lsls	r3, r3, #2
 8017f16:	4618      	mov	r0, r3
 8017f18:	f001 fd1e 	bl	8019958 <pvPortMalloc>
 8017f1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017f1e:	697b      	ldr	r3, [r7, #20]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d00e      	beq.n	8017f42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017f24:	205c      	movs	r0, #92	; 0x5c
 8017f26:	f001 fd17 	bl	8019958 <pvPortMalloc>
 8017f2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017f2c:	69fb      	ldr	r3, [r7, #28]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d003      	beq.n	8017f3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017f32:	69fb      	ldr	r3, [r7, #28]
 8017f34:	697a      	ldr	r2, [r7, #20]
 8017f36:	631a      	str	r2, [r3, #48]	; 0x30
 8017f38:	e005      	b.n	8017f46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017f3a:	6978      	ldr	r0, [r7, #20]
 8017f3c:	f001 fdd8 	bl	8019af0 <vPortFree>
 8017f40:	e001      	b.n	8017f46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017f42:	2300      	movs	r3, #0
 8017f44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017f46:	69fb      	ldr	r3, [r7, #28]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d017      	beq.n	8017f7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017f4c:	69fb      	ldr	r3, [r7, #28]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017f54:	88fa      	ldrh	r2, [r7, #6]
 8017f56:	2300      	movs	r3, #0
 8017f58:	9303      	str	r3, [sp, #12]
 8017f5a:	69fb      	ldr	r3, [r7, #28]
 8017f5c:	9302      	str	r3, [sp, #8]
 8017f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f60:	9301      	str	r3, [sp, #4]
 8017f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f64:	9300      	str	r3, [sp, #0]
 8017f66:	683b      	ldr	r3, [r7, #0]
 8017f68:	68b9      	ldr	r1, [r7, #8]
 8017f6a:	68f8      	ldr	r0, [r7, #12]
 8017f6c:	f000 f80e 	bl	8017f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017f70:	69f8      	ldr	r0, [r7, #28]
 8017f72:	f000 f89b 	bl	80180ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017f76:	2301      	movs	r3, #1
 8017f78:	61bb      	str	r3, [r7, #24]
 8017f7a:	e002      	b.n	8017f82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017f82:	69bb      	ldr	r3, [r7, #24]
	}
 8017f84:	4618      	mov	r0, r3
 8017f86:	3720      	adds	r7, #32
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	bd80      	pop	{r7, pc}

08017f8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b088      	sub	sp, #32
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	60f8      	str	r0, [r7, #12]
 8017f94:	60b9      	str	r1, [r7, #8]
 8017f96:	607a      	str	r2, [r7, #4]
 8017f98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	009b      	lsls	r3, r3, #2
 8017fa2:	461a      	mov	r2, r3
 8017fa4:	21a5      	movs	r1, #165	; 0xa5
 8017fa6:	f001 fef9 	bl	8019d9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017fae:	6879      	ldr	r1, [r7, #4]
 8017fb0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017fb4:	440b      	add	r3, r1
 8017fb6:	009b      	lsls	r3, r3, #2
 8017fb8:	4413      	add	r3, r2
 8017fba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017fbc:	69bb      	ldr	r3, [r7, #24]
 8017fbe:	f023 0307 	bic.w	r3, r3, #7
 8017fc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017fc4:	69bb      	ldr	r3, [r7, #24]
 8017fc6:	f003 0307 	and.w	r3, r3, #7
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d00a      	beq.n	8017fe4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fd2:	f383 8811 	msr	BASEPRI, r3
 8017fd6:	f3bf 8f6f 	isb	sy
 8017fda:	f3bf 8f4f 	dsb	sy
 8017fde:	617b      	str	r3, [r7, #20]
}
 8017fe0:	bf00      	nop
 8017fe2:	e7fe      	b.n	8017fe2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017fe4:	68bb      	ldr	r3, [r7, #8]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d01f      	beq.n	801802a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017fea:	2300      	movs	r3, #0
 8017fec:	61fb      	str	r3, [r7, #28]
 8017fee:	e012      	b.n	8018016 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017ff0:	68ba      	ldr	r2, [r7, #8]
 8017ff2:	69fb      	ldr	r3, [r7, #28]
 8017ff4:	4413      	add	r3, r2
 8017ff6:	7819      	ldrb	r1, [r3, #0]
 8017ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ffa:	69fb      	ldr	r3, [r7, #28]
 8017ffc:	4413      	add	r3, r2
 8017ffe:	3334      	adds	r3, #52	; 0x34
 8018000:	460a      	mov	r2, r1
 8018002:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018004:	68ba      	ldr	r2, [r7, #8]
 8018006:	69fb      	ldr	r3, [r7, #28]
 8018008:	4413      	add	r3, r2
 801800a:	781b      	ldrb	r3, [r3, #0]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d006      	beq.n	801801e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018010:	69fb      	ldr	r3, [r7, #28]
 8018012:	3301      	adds	r3, #1
 8018014:	61fb      	str	r3, [r7, #28]
 8018016:	69fb      	ldr	r3, [r7, #28]
 8018018:	2b0f      	cmp	r3, #15
 801801a:	d9e9      	bls.n	8017ff0 <prvInitialiseNewTask+0x64>
 801801c:	e000      	b.n	8018020 <prvInitialiseNewTask+0x94>
			{
				break;
 801801e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018022:	2200      	movs	r2, #0
 8018024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018028:	e003      	b.n	8018032 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801802c:	2200      	movs	r2, #0
 801802e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018034:	2b37      	cmp	r3, #55	; 0x37
 8018036:	d901      	bls.n	801803c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018038:	2337      	movs	r3, #55	; 0x37
 801803a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801803e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018040:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018046:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801804a:	2200      	movs	r2, #0
 801804c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018050:	3304      	adds	r3, #4
 8018052:	4618      	mov	r0, r3
 8018054:	f7ff f978 	bl	8017348 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801805a:	3318      	adds	r3, #24
 801805c:	4618      	mov	r0, r3
 801805e:	f7ff f973 	bl	8017348 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018066:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801806a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018070:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018076:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801807a:	2200      	movs	r2, #0
 801807c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018080:	2200      	movs	r2, #0
 8018082:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018086:	683a      	ldr	r2, [r7, #0]
 8018088:	68f9      	ldr	r1, [r7, #12]
 801808a:	69b8      	ldr	r0, [r7, #24]
 801808c:	f001 fa14 	bl	80194b8 <pxPortInitialiseStack>
 8018090:	4602      	mov	r2, r0
 8018092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018094:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018098:	2b00      	cmp	r3, #0
 801809a:	d002      	beq.n	80180a2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801809c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801809e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80180a2:	bf00      	nop
 80180a4:	3720      	adds	r7, #32
 80180a6:	46bd      	mov	sp, r7
 80180a8:	bd80      	pop	{r7, pc}
	...

080180ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b082      	sub	sp, #8
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80180b4:	f001 fb2e 	bl	8019714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80180b8:	4b2d      	ldr	r3, [pc, #180]	; (8018170 <prvAddNewTaskToReadyList+0xc4>)
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	3301      	adds	r3, #1
 80180be:	4a2c      	ldr	r2, [pc, #176]	; (8018170 <prvAddNewTaskToReadyList+0xc4>)
 80180c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80180c2:	4b2c      	ldr	r3, [pc, #176]	; (8018174 <prvAddNewTaskToReadyList+0xc8>)
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d109      	bne.n	80180de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80180ca:	4a2a      	ldr	r2, [pc, #168]	; (8018174 <prvAddNewTaskToReadyList+0xc8>)
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80180d0:	4b27      	ldr	r3, [pc, #156]	; (8018170 <prvAddNewTaskToReadyList+0xc4>)
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	2b01      	cmp	r3, #1
 80180d6:	d110      	bne.n	80180fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80180d8:	f000 fcca 	bl	8018a70 <prvInitialiseTaskLists>
 80180dc:	e00d      	b.n	80180fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80180de:	4b26      	ldr	r3, [pc, #152]	; (8018178 <prvAddNewTaskToReadyList+0xcc>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d109      	bne.n	80180fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80180e6:	4b23      	ldr	r3, [pc, #140]	; (8018174 <prvAddNewTaskToReadyList+0xc8>)
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d802      	bhi.n	80180fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80180f4:	4a1f      	ldr	r2, [pc, #124]	; (8018174 <prvAddNewTaskToReadyList+0xc8>)
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80180fa:	4b20      	ldr	r3, [pc, #128]	; (801817c <prvAddNewTaskToReadyList+0xd0>)
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	3301      	adds	r3, #1
 8018100:	4a1e      	ldr	r2, [pc, #120]	; (801817c <prvAddNewTaskToReadyList+0xd0>)
 8018102:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018104:	4b1d      	ldr	r3, [pc, #116]	; (801817c <prvAddNewTaskToReadyList+0xd0>)
 8018106:	681a      	ldr	r2, [r3, #0]
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018110:	4b1b      	ldr	r3, [pc, #108]	; (8018180 <prvAddNewTaskToReadyList+0xd4>)
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	429a      	cmp	r2, r3
 8018116:	d903      	bls.n	8018120 <prvAddNewTaskToReadyList+0x74>
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801811c:	4a18      	ldr	r2, [pc, #96]	; (8018180 <prvAddNewTaskToReadyList+0xd4>)
 801811e:	6013      	str	r3, [r2, #0]
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018124:	4613      	mov	r3, r2
 8018126:	009b      	lsls	r3, r3, #2
 8018128:	4413      	add	r3, r2
 801812a:	009b      	lsls	r3, r3, #2
 801812c:	4a15      	ldr	r2, [pc, #84]	; (8018184 <prvAddNewTaskToReadyList+0xd8>)
 801812e:	441a      	add	r2, r3
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	3304      	adds	r3, #4
 8018134:	4619      	mov	r1, r3
 8018136:	4610      	mov	r0, r2
 8018138:	f7ff f913 	bl	8017362 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801813c:	f001 fb1a 	bl	8019774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018140:	4b0d      	ldr	r3, [pc, #52]	; (8018178 <prvAddNewTaskToReadyList+0xcc>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d00e      	beq.n	8018166 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018148:	4b0a      	ldr	r3, [pc, #40]	; (8018174 <prvAddNewTaskToReadyList+0xc8>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018152:	429a      	cmp	r2, r3
 8018154:	d207      	bcs.n	8018166 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018156:	4b0c      	ldr	r3, [pc, #48]	; (8018188 <prvAddNewTaskToReadyList+0xdc>)
 8018158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801815c:	601a      	str	r2, [r3, #0]
 801815e:	f3bf 8f4f 	dsb	sy
 8018162:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018166:	bf00      	nop
 8018168:	3708      	adds	r7, #8
 801816a:	46bd      	mov	sp, r7
 801816c:	bd80      	pop	{r7, pc}
 801816e:	bf00      	nop
 8018170:	24002b8c 	.word	0x24002b8c
 8018174:	240026b8 	.word	0x240026b8
 8018178:	24002b98 	.word	0x24002b98
 801817c:	24002ba8 	.word	0x24002ba8
 8018180:	24002b94 	.word	0x24002b94
 8018184:	240026bc 	.word	0x240026bc
 8018188:	e000ed04 	.word	0xe000ed04

0801818c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801818c:	b580      	push	{r7, lr}
 801818e:	b084      	sub	sp, #16
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018194:	2300      	movs	r3, #0
 8018196:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d017      	beq.n	80181ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801819e:	4b13      	ldr	r3, [pc, #76]	; (80181ec <vTaskDelay+0x60>)
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d00a      	beq.n	80181bc <vTaskDelay+0x30>
	__asm volatile
 80181a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181aa:	f383 8811 	msr	BASEPRI, r3
 80181ae:	f3bf 8f6f 	isb	sy
 80181b2:	f3bf 8f4f 	dsb	sy
 80181b6:	60bb      	str	r3, [r7, #8]
}
 80181b8:	bf00      	nop
 80181ba:	e7fe      	b.n	80181ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80181bc:	f000 f880 	bl	80182c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80181c0:	2100      	movs	r1, #0
 80181c2:	6878      	ldr	r0, [r7, #4]
 80181c4:	f000 fdb6 	bl	8018d34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80181c8:	f000 f888 	bl	80182dc <xTaskResumeAll>
 80181cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d107      	bne.n	80181e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80181d4:	4b06      	ldr	r3, [pc, #24]	; (80181f0 <vTaskDelay+0x64>)
 80181d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181da:	601a      	str	r2, [r3, #0]
 80181dc:	f3bf 8f4f 	dsb	sy
 80181e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80181e4:	bf00      	nop
 80181e6:	3710      	adds	r7, #16
 80181e8:	46bd      	mov	sp, r7
 80181ea:	bd80      	pop	{r7, pc}
 80181ec:	24002bb4 	.word	0x24002bb4
 80181f0:	e000ed04 	.word	0xe000ed04

080181f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b08a      	sub	sp, #40	; 0x28
 80181f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80181fa:	2300      	movs	r3, #0
 80181fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80181fe:	2300      	movs	r3, #0
 8018200:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018202:	463a      	mov	r2, r7
 8018204:	1d39      	adds	r1, r7, #4
 8018206:	f107 0308 	add.w	r3, r7, #8
 801820a:	4618      	mov	r0, r3
 801820c:	f7fe fddc 	bl	8016dc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018210:	6839      	ldr	r1, [r7, #0]
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	68ba      	ldr	r2, [r7, #8]
 8018216:	9202      	str	r2, [sp, #8]
 8018218:	9301      	str	r3, [sp, #4]
 801821a:	2300      	movs	r3, #0
 801821c:	9300      	str	r3, [sp, #0]
 801821e:	2300      	movs	r3, #0
 8018220:	460a      	mov	r2, r1
 8018222:	4921      	ldr	r1, [pc, #132]	; (80182a8 <vTaskStartScheduler+0xb4>)
 8018224:	4821      	ldr	r0, [pc, #132]	; (80182ac <vTaskStartScheduler+0xb8>)
 8018226:	f7ff fe0f 	bl	8017e48 <xTaskCreateStatic>
 801822a:	4603      	mov	r3, r0
 801822c:	4a20      	ldr	r2, [pc, #128]	; (80182b0 <vTaskStartScheduler+0xbc>)
 801822e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018230:	4b1f      	ldr	r3, [pc, #124]	; (80182b0 <vTaskStartScheduler+0xbc>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d002      	beq.n	801823e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018238:	2301      	movs	r3, #1
 801823a:	617b      	str	r3, [r7, #20]
 801823c:	e001      	b.n	8018242 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801823e:	2300      	movs	r3, #0
 8018240:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018242:	697b      	ldr	r3, [r7, #20]
 8018244:	2b01      	cmp	r3, #1
 8018246:	d102      	bne.n	801824e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018248:	f000 fdc8 	bl	8018ddc <xTimerCreateTimerTask>
 801824c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801824e:	697b      	ldr	r3, [r7, #20]
 8018250:	2b01      	cmp	r3, #1
 8018252:	d116      	bne.n	8018282 <vTaskStartScheduler+0x8e>
	__asm volatile
 8018254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018258:	f383 8811 	msr	BASEPRI, r3
 801825c:	f3bf 8f6f 	isb	sy
 8018260:	f3bf 8f4f 	dsb	sy
 8018264:	613b      	str	r3, [r7, #16]
}
 8018266:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018268:	4b12      	ldr	r3, [pc, #72]	; (80182b4 <vTaskStartScheduler+0xc0>)
 801826a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801826e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018270:	4b11      	ldr	r3, [pc, #68]	; (80182b8 <vTaskStartScheduler+0xc4>)
 8018272:	2201      	movs	r2, #1
 8018274:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018276:	4b11      	ldr	r3, [pc, #68]	; (80182bc <vTaskStartScheduler+0xc8>)
 8018278:	2200      	movs	r2, #0
 801827a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801827c:	f001 f9a8 	bl	80195d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018280:	e00e      	b.n	80182a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018282:	697b      	ldr	r3, [r7, #20]
 8018284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018288:	d10a      	bne.n	80182a0 <vTaskStartScheduler+0xac>
	__asm volatile
 801828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801828e:	f383 8811 	msr	BASEPRI, r3
 8018292:	f3bf 8f6f 	isb	sy
 8018296:	f3bf 8f4f 	dsb	sy
 801829a:	60fb      	str	r3, [r7, #12]
}
 801829c:	bf00      	nop
 801829e:	e7fe      	b.n	801829e <vTaskStartScheduler+0xaa>
}
 80182a0:	bf00      	nop
 80182a2:	3718      	adds	r7, #24
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}
 80182a8:	0801aa10 	.word	0x0801aa10
 80182ac:	08018a41 	.word	0x08018a41
 80182b0:	24002bb0 	.word	0x24002bb0
 80182b4:	24002bac 	.word	0x24002bac
 80182b8:	24002b98 	.word	0x24002b98
 80182bc:	24002b90 	.word	0x24002b90

080182c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80182c0:	b480      	push	{r7}
 80182c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80182c4:	4b04      	ldr	r3, [pc, #16]	; (80182d8 <vTaskSuspendAll+0x18>)
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	3301      	adds	r3, #1
 80182ca:	4a03      	ldr	r2, [pc, #12]	; (80182d8 <vTaskSuspendAll+0x18>)
 80182cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80182ce:	bf00      	nop
 80182d0:	46bd      	mov	sp, r7
 80182d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d6:	4770      	bx	lr
 80182d8:	24002bb4 	.word	0x24002bb4

080182dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b084      	sub	sp, #16
 80182e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80182e2:	2300      	movs	r3, #0
 80182e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80182e6:	2300      	movs	r3, #0
 80182e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80182ea:	4b42      	ldr	r3, [pc, #264]	; (80183f4 <xTaskResumeAll+0x118>)
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d10a      	bne.n	8018308 <xTaskResumeAll+0x2c>
	__asm volatile
 80182f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182f6:	f383 8811 	msr	BASEPRI, r3
 80182fa:	f3bf 8f6f 	isb	sy
 80182fe:	f3bf 8f4f 	dsb	sy
 8018302:	603b      	str	r3, [r7, #0]
}
 8018304:	bf00      	nop
 8018306:	e7fe      	b.n	8018306 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018308:	f001 fa04 	bl	8019714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801830c:	4b39      	ldr	r3, [pc, #228]	; (80183f4 <xTaskResumeAll+0x118>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	3b01      	subs	r3, #1
 8018312:	4a38      	ldr	r2, [pc, #224]	; (80183f4 <xTaskResumeAll+0x118>)
 8018314:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018316:	4b37      	ldr	r3, [pc, #220]	; (80183f4 <xTaskResumeAll+0x118>)
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d162      	bne.n	80183e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801831e:	4b36      	ldr	r3, [pc, #216]	; (80183f8 <xTaskResumeAll+0x11c>)
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d05e      	beq.n	80183e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018326:	e02f      	b.n	8018388 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018328:	4b34      	ldr	r3, [pc, #208]	; (80183fc <xTaskResumeAll+0x120>)
 801832a:	68db      	ldr	r3, [r3, #12]
 801832c:	68db      	ldr	r3, [r3, #12]
 801832e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	3318      	adds	r3, #24
 8018334:	4618      	mov	r0, r3
 8018336:	f7ff f871 	bl	801741c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	3304      	adds	r3, #4
 801833e:	4618      	mov	r0, r3
 8018340:	f7ff f86c 	bl	801741c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018348:	4b2d      	ldr	r3, [pc, #180]	; (8018400 <xTaskResumeAll+0x124>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	429a      	cmp	r2, r3
 801834e:	d903      	bls.n	8018358 <xTaskResumeAll+0x7c>
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018354:	4a2a      	ldr	r2, [pc, #168]	; (8018400 <xTaskResumeAll+0x124>)
 8018356:	6013      	str	r3, [r2, #0]
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801835c:	4613      	mov	r3, r2
 801835e:	009b      	lsls	r3, r3, #2
 8018360:	4413      	add	r3, r2
 8018362:	009b      	lsls	r3, r3, #2
 8018364:	4a27      	ldr	r2, [pc, #156]	; (8018404 <xTaskResumeAll+0x128>)
 8018366:	441a      	add	r2, r3
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	3304      	adds	r3, #4
 801836c:	4619      	mov	r1, r3
 801836e:	4610      	mov	r0, r2
 8018370:	f7fe fff7 	bl	8017362 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018378:	4b23      	ldr	r3, [pc, #140]	; (8018408 <xTaskResumeAll+0x12c>)
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801837e:	429a      	cmp	r2, r3
 8018380:	d302      	bcc.n	8018388 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018382:	4b22      	ldr	r3, [pc, #136]	; (801840c <xTaskResumeAll+0x130>)
 8018384:	2201      	movs	r2, #1
 8018386:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018388:	4b1c      	ldr	r3, [pc, #112]	; (80183fc <xTaskResumeAll+0x120>)
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d1cb      	bne.n	8018328 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d001      	beq.n	801839a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018396:	f000 fc09 	bl	8018bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801839a:	4b1d      	ldr	r3, [pc, #116]	; (8018410 <xTaskResumeAll+0x134>)
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d010      	beq.n	80183c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80183a6:	f000 f847 	bl	8018438 <xTaskIncrementTick>
 80183aa:	4603      	mov	r3, r0
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d002      	beq.n	80183b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80183b0:	4b16      	ldr	r3, [pc, #88]	; (801840c <xTaskResumeAll+0x130>)
 80183b2:	2201      	movs	r2, #1
 80183b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	3b01      	subs	r3, #1
 80183ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d1f1      	bne.n	80183a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80183c2:	4b13      	ldr	r3, [pc, #76]	; (8018410 <xTaskResumeAll+0x134>)
 80183c4:	2200      	movs	r2, #0
 80183c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80183c8:	4b10      	ldr	r3, [pc, #64]	; (801840c <xTaskResumeAll+0x130>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d009      	beq.n	80183e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80183d0:	2301      	movs	r3, #1
 80183d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80183d4:	4b0f      	ldr	r3, [pc, #60]	; (8018414 <xTaskResumeAll+0x138>)
 80183d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183da:	601a      	str	r2, [r3, #0]
 80183dc:	f3bf 8f4f 	dsb	sy
 80183e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80183e4:	f001 f9c6 	bl	8019774 <vPortExitCritical>

	return xAlreadyYielded;
 80183e8:	68bb      	ldr	r3, [r7, #8]
}
 80183ea:	4618      	mov	r0, r3
 80183ec:	3710      	adds	r7, #16
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bd80      	pop	{r7, pc}
 80183f2:	bf00      	nop
 80183f4:	24002bb4 	.word	0x24002bb4
 80183f8:	24002b8c 	.word	0x24002b8c
 80183fc:	24002b4c 	.word	0x24002b4c
 8018400:	24002b94 	.word	0x24002b94
 8018404:	240026bc 	.word	0x240026bc
 8018408:	240026b8 	.word	0x240026b8
 801840c:	24002ba0 	.word	0x24002ba0
 8018410:	24002b9c 	.word	0x24002b9c
 8018414:	e000ed04 	.word	0xe000ed04

08018418 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018418:	b480      	push	{r7}
 801841a:	b083      	sub	sp, #12
 801841c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801841e:	4b05      	ldr	r3, [pc, #20]	; (8018434 <xTaskGetTickCount+0x1c>)
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018424:	687b      	ldr	r3, [r7, #4]
}
 8018426:	4618      	mov	r0, r3
 8018428:	370c      	adds	r7, #12
 801842a:	46bd      	mov	sp, r7
 801842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018430:	4770      	bx	lr
 8018432:	bf00      	nop
 8018434:	24002b90 	.word	0x24002b90

08018438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b086      	sub	sp, #24
 801843c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801843e:	2300      	movs	r3, #0
 8018440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018442:	4b53      	ldr	r3, [pc, #332]	; (8018590 <xTaskIncrementTick+0x158>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	2b00      	cmp	r3, #0
 8018448:	f040 8095 	bne.w	8018576 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801844c:	4b51      	ldr	r3, [pc, #324]	; (8018594 <xTaskIncrementTick+0x15c>)
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	3301      	adds	r3, #1
 8018452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018454:	4a4f      	ldr	r2, [pc, #316]	; (8018594 <xTaskIncrementTick+0x15c>)
 8018456:	693b      	ldr	r3, [r7, #16]
 8018458:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801845a:	693b      	ldr	r3, [r7, #16]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d120      	bne.n	80184a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018460:	4b4d      	ldr	r3, [pc, #308]	; (8018598 <xTaskIncrementTick+0x160>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d00a      	beq.n	8018480 <xTaskIncrementTick+0x48>
	__asm volatile
 801846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801846e:	f383 8811 	msr	BASEPRI, r3
 8018472:	f3bf 8f6f 	isb	sy
 8018476:	f3bf 8f4f 	dsb	sy
 801847a:	603b      	str	r3, [r7, #0]
}
 801847c:	bf00      	nop
 801847e:	e7fe      	b.n	801847e <xTaskIncrementTick+0x46>
 8018480:	4b45      	ldr	r3, [pc, #276]	; (8018598 <xTaskIncrementTick+0x160>)
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	60fb      	str	r3, [r7, #12]
 8018486:	4b45      	ldr	r3, [pc, #276]	; (801859c <xTaskIncrementTick+0x164>)
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	4a43      	ldr	r2, [pc, #268]	; (8018598 <xTaskIncrementTick+0x160>)
 801848c:	6013      	str	r3, [r2, #0]
 801848e:	4a43      	ldr	r2, [pc, #268]	; (801859c <xTaskIncrementTick+0x164>)
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	6013      	str	r3, [r2, #0]
 8018494:	4b42      	ldr	r3, [pc, #264]	; (80185a0 <xTaskIncrementTick+0x168>)
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	3301      	adds	r3, #1
 801849a:	4a41      	ldr	r2, [pc, #260]	; (80185a0 <xTaskIncrementTick+0x168>)
 801849c:	6013      	str	r3, [r2, #0]
 801849e:	f000 fb85 	bl	8018bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80184a2:	4b40      	ldr	r3, [pc, #256]	; (80185a4 <xTaskIncrementTick+0x16c>)
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	693a      	ldr	r2, [r7, #16]
 80184a8:	429a      	cmp	r2, r3
 80184aa:	d349      	bcc.n	8018540 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80184ac:	4b3a      	ldr	r3, [pc, #232]	; (8018598 <xTaskIncrementTick+0x160>)
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d104      	bne.n	80184c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184b6:	4b3b      	ldr	r3, [pc, #236]	; (80185a4 <xTaskIncrementTick+0x16c>)
 80184b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80184bc:	601a      	str	r2, [r3, #0]
					break;
 80184be:	e03f      	b.n	8018540 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184c0:	4b35      	ldr	r3, [pc, #212]	; (8018598 <xTaskIncrementTick+0x160>)
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	68db      	ldr	r3, [r3, #12]
 80184c6:	68db      	ldr	r3, [r3, #12]
 80184c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	685b      	ldr	r3, [r3, #4]
 80184ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80184d0:	693a      	ldr	r2, [r7, #16]
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	429a      	cmp	r2, r3
 80184d6:	d203      	bcs.n	80184e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80184d8:	4a32      	ldr	r2, [pc, #200]	; (80185a4 <xTaskIncrementTick+0x16c>)
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80184de:	e02f      	b.n	8018540 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80184e0:	68bb      	ldr	r3, [r7, #8]
 80184e2:	3304      	adds	r3, #4
 80184e4:	4618      	mov	r0, r3
 80184e6:	f7fe ff99 	bl	801741c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80184ea:	68bb      	ldr	r3, [r7, #8]
 80184ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d004      	beq.n	80184fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	3318      	adds	r3, #24
 80184f6:	4618      	mov	r0, r3
 80184f8:	f7fe ff90 	bl	801741c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80184fc:	68bb      	ldr	r3, [r7, #8]
 80184fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018500:	4b29      	ldr	r3, [pc, #164]	; (80185a8 <xTaskIncrementTick+0x170>)
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	429a      	cmp	r2, r3
 8018506:	d903      	bls.n	8018510 <xTaskIncrementTick+0xd8>
 8018508:	68bb      	ldr	r3, [r7, #8]
 801850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801850c:	4a26      	ldr	r2, [pc, #152]	; (80185a8 <xTaskIncrementTick+0x170>)
 801850e:	6013      	str	r3, [r2, #0]
 8018510:	68bb      	ldr	r3, [r7, #8]
 8018512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018514:	4613      	mov	r3, r2
 8018516:	009b      	lsls	r3, r3, #2
 8018518:	4413      	add	r3, r2
 801851a:	009b      	lsls	r3, r3, #2
 801851c:	4a23      	ldr	r2, [pc, #140]	; (80185ac <xTaskIncrementTick+0x174>)
 801851e:	441a      	add	r2, r3
 8018520:	68bb      	ldr	r3, [r7, #8]
 8018522:	3304      	adds	r3, #4
 8018524:	4619      	mov	r1, r3
 8018526:	4610      	mov	r0, r2
 8018528:	f7fe ff1b 	bl	8017362 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801852c:	68bb      	ldr	r3, [r7, #8]
 801852e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018530:	4b1f      	ldr	r3, [pc, #124]	; (80185b0 <xTaskIncrementTick+0x178>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018536:	429a      	cmp	r2, r3
 8018538:	d3b8      	bcc.n	80184ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801853a:	2301      	movs	r3, #1
 801853c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801853e:	e7b5      	b.n	80184ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018540:	4b1b      	ldr	r3, [pc, #108]	; (80185b0 <xTaskIncrementTick+0x178>)
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018546:	4919      	ldr	r1, [pc, #100]	; (80185ac <xTaskIncrementTick+0x174>)
 8018548:	4613      	mov	r3, r2
 801854a:	009b      	lsls	r3, r3, #2
 801854c:	4413      	add	r3, r2
 801854e:	009b      	lsls	r3, r3, #2
 8018550:	440b      	add	r3, r1
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	2b01      	cmp	r3, #1
 8018556:	d901      	bls.n	801855c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018558:	2301      	movs	r3, #1
 801855a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 801855c:	4b15      	ldr	r3, [pc, #84]	; (80185b4 <xTaskIncrementTick+0x17c>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d101      	bne.n	8018568 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018564:	f7e9 fdac 	bl	80020c0 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018568:	4b13      	ldr	r3, [pc, #76]	; (80185b8 <xTaskIncrementTick+0x180>)
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d009      	beq.n	8018584 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018570:	2301      	movs	r3, #1
 8018572:	617b      	str	r3, [r7, #20]
 8018574:	e006      	b.n	8018584 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018576:	4b0f      	ldr	r3, [pc, #60]	; (80185b4 <xTaskIncrementTick+0x17c>)
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	3301      	adds	r3, #1
 801857c:	4a0d      	ldr	r2, [pc, #52]	; (80185b4 <xTaskIncrementTick+0x17c>)
 801857e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018580:	f7e9 fd9e 	bl	80020c0 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018584:	697b      	ldr	r3, [r7, #20]
}
 8018586:	4618      	mov	r0, r3
 8018588:	3718      	adds	r7, #24
 801858a:	46bd      	mov	sp, r7
 801858c:	bd80      	pop	{r7, pc}
 801858e:	bf00      	nop
 8018590:	24002bb4 	.word	0x24002bb4
 8018594:	24002b90 	.word	0x24002b90
 8018598:	24002b44 	.word	0x24002b44
 801859c:	24002b48 	.word	0x24002b48
 80185a0:	24002ba4 	.word	0x24002ba4
 80185a4:	24002bac 	.word	0x24002bac
 80185a8:	24002b94 	.word	0x24002b94
 80185ac:	240026bc 	.word	0x240026bc
 80185b0:	240026b8 	.word	0x240026b8
 80185b4:	24002b9c 	.word	0x24002b9c
 80185b8:	24002ba0 	.word	0x24002ba0

080185bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b084      	sub	sp, #16
 80185c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80185c2:	4b2f      	ldr	r3, [pc, #188]	; (8018680 <vTaskSwitchContext+0xc4>)
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d003      	beq.n	80185d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80185ca:	4b2e      	ldr	r3, [pc, #184]	; (8018684 <vTaskSwitchContext+0xc8>)
 80185cc:	2201      	movs	r2, #1
 80185ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80185d0:	e052      	b.n	8018678 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80185d2:	4b2c      	ldr	r3, [pc, #176]	; (8018684 <vTaskSwitchContext+0xc8>)
 80185d4:	2200      	movs	r2, #0
 80185d6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80185d8:	4b2b      	ldr	r3, [pc, #172]	; (8018688 <vTaskSwitchContext+0xcc>)
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	681a      	ldr	r2, [r3, #0]
 80185de:	4b2a      	ldr	r3, [pc, #168]	; (8018688 <vTaskSwitchContext+0xcc>)
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185e4:	429a      	cmp	r2, r3
 80185e6:	d808      	bhi.n	80185fa <vTaskSwitchContext+0x3e>
 80185e8:	4b27      	ldr	r3, [pc, #156]	; (8018688 <vTaskSwitchContext+0xcc>)
 80185ea:	681a      	ldr	r2, [r3, #0]
 80185ec:	4b26      	ldr	r3, [pc, #152]	; (8018688 <vTaskSwitchContext+0xcc>)
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	3334      	adds	r3, #52	; 0x34
 80185f2:	4619      	mov	r1, r3
 80185f4:	4610      	mov	r0, r2
 80185f6:	f7e9 fd71 	bl	80020dc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80185fa:	4b24      	ldr	r3, [pc, #144]	; (801868c <vTaskSwitchContext+0xd0>)
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	60fb      	str	r3, [r7, #12]
 8018600:	e010      	b.n	8018624 <vTaskSwitchContext+0x68>
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d10a      	bne.n	801861e <vTaskSwitchContext+0x62>
	__asm volatile
 8018608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801860c:	f383 8811 	msr	BASEPRI, r3
 8018610:	f3bf 8f6f 	isb	sy
 8018614:	f3bf 8f4f 	dsb	sy
 8018618:	607b      	str	r3, [r7, #4]
}
 801861a:	bf00      	nop
 801861c:	e7fe      	b.n	801861c <vTaskSwitchContext+0x60>
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	3b01      	subs	r3, #1
 8018622:	60fb      	str	r3, [r7, #12]
 8018624:	491a      	ldr	r1, [pc, #104]	; (8018690 <vTaskSwitchContext+0xd4>)
 8018626:	68fa      	ldr	r2, [r7, #12]
 8018628:	4613      	mov	r3, r2
 801862a:	009b      	lsls	r3, r3, #2
 801862c:	4413      	add	r3, r2
 801862e:	009b      	lsls	r3, r3, #2
 8018630:	440b      	add	r3, r1
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d0e4      	beq.n	8018602 <vTaskSwitchContext+0x46>
 8018638:	68fa      	ldr	r2, [r7, #12]
 801863a:	4613      	mov	r3, r2
 801863c:	009b      	lsls	r3, r3, #2
 801863e:	4413      	add	r3, r2
 8018640:	009b      	lsls	r3, r3, #2
 8018642:	4a13      	ldr	r2, [pc, #76]	; (8018690 <vTaskSwitchContext+0xd4>)
 8018644:	4413      	add	r3, r2
 8018646:	60bb      	str	r3, [r7, #8]
 8018648:	68bb      	ldr	r3, [r7, #8]
 801864a:	685b      	ldr	r3, [r3, #4]
 801864c:	685a      	ldr	r2, [r3, #4]
 801864e:	68bb      	ldr	r3, [r7, #8]
 8018650:	605a      	str	r2, [r3, #4]
 8018652:	68bb      	ldr	r3, [r7, #8]
 8018654:	685a      	ldr	r2, [r3, #4]
 8018656:	68bb      	ldr	r3, [r7, #8]
 8018658:	3308      	adds	r3, #8
 801865a:	429a      	cmp	r2, r3
 801865c:	d104      	bne.n	8018668 <vTaskSwitchContext+0xac>
 801865e:	68bb      	ldr	r3, [r7, #8]
 8018660:	685b      	ldr	r3, [r3, #4]
 8018662:	685a      	ldr	r2, [r3, #4]
 8018664:	68bb      	ldr	r3, [r7, #8]
 8018666:	605a      	str	r2, [r3, #4]
 8018668:	68bb      	ldr	r3, [r7, #8]
 801866a:	685b      	ldr	r3, [r3, #4]
 801866c:	68db      	ldr	r3, [r3, #12]
 801866e:	4a06      	ldr	r2, [pc, #24]	; (8018688 <vTaskSwitchContext+0xcc>)
 8018670:	6013      	str	r3, [r2, #0]
 8018672:	4a06      	ldr	r2, [pc, #24]	; (801868c <vTaskSwitchContext+0xd0>)
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	6013      	str	r3, [r2, #0]
}
 8018678:	bf00      	nop
 801867a:	3710      	adds	r7, #16
 801867c:	46bd      	mov	sp, r7
 801867e:	bd80      	pop	{r7, pc}
 8018680:	24002bb4 	.word	0x24002bb4
 8018684:	24002ba0 	.word	0x24002ba0
 8018688:	240026b8 	.word	0x240026b8
 801868c:	24002b94 	.word	0x24002b94
 8018690:	240026bc 	.word	0x240026bc

08018694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b084      	sub	sp, #16
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
 801869c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d10a      	bne.n	80186ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80186a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186a8:	f383 8811 	msr	BASEPRI, r3
 80186ac:	f3bf 8f6f 	isb	sy
 80186b0:	f3bf 8f4f 	dsb	sy
 80186b4:	60fb      	str	r3, [r7, #12]
}
 80186b6:	bf00      	nop
 80186b8:	e7fe      	b.n	80186b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80186ba:	4b07      	ldr	r3, [pc, #28]	; (80186d8 <vTaskPlaceOnEventList+0x44>)
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	3318      	adds	r3, #24
 80186c0:	4619      	mov	r1, r3
 80186c2:	6878      	ldr	r0, [r7, #4]
 80186c4:	f7fe fe71 	bl	80173aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80186c8:	2101      	movs	r1, #1
 80186ca:	6838      	ldr	r0, [r7, #0]
 80186cc:	f000 fb32 	bl	8018d34 <prvAddCurrentTaskToDelayedList>
}
 80186d0:	bf00      	nop
 80186d2:	3710      	adds	r7, #16
 80186d4:	46bd      	mov	sp, r7
 80186d6:	bd80      	pop	{r7, pc}
 80186d8:	240026b8 	.word	0x240026b8

080186dc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	b086      	sub	sp, #24
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	60f8      	str	r0, [r7, #12]
 80186e4:	60b9      	str	r1, [r7, #8]
 80186e6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d10a      	bne.n	8018704 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80186ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186f2:	f383 8811 	msr	BASEPRI, r3
 80186f6:	f3bf 8f6f 	isb	sy
 80186fa:	f3bf 8f4f 	dsb	sy
 80186fe:	617b      	str	r3, [r7, #20]
}
 8018700:	bf00      	nop
 8018702:	e7fe      	b.n	8018702 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8018704:	4b11      	ldr	r3, [pc, #68]	; (801874c <vTaskPlaceOnUnorderedEventList+0x70>)
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d10a      	bne.n	8018722 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018710:	f383 8811 	msr	BASEPRI, r3
 8018714:	f3bf 8f6f 	isb	sy
 8018718:	f3bf 8f4f 	dsb	sy
 801871c:	613b      	str	r3, [r7, #16]
}
 801871e:	bf00      	nop
 8018720:	e7fe      	b.n	8018720 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018722:	4b0b      	ldr	r3, [pc, #44]	; (8018750 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	68ba      	ldr	r2, [r7, #8]
 8018728:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801872c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801872e:	4b08      	ldr	r3, [pc, #32]	; (8018750 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	3318      	adds	r3, #24
 8018734:	4619      	mov	r1, r3
 8018736:	68f8      	ldr	r0, [r7, #12]
 8018738:	f7fe fe13 	bl	8017362 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801873c:	2101      	movs	r1, #1
 801873e:	6878      	ldr	r0, [r7, #4]
 8018740:	f000 faf8 	bl	8018d34 <prvAddCurrentTaskToDelayedList>
}
 8018744:	bf00      	nop
 8018746:	3718      	adds	r7, #24
 8018748:	46bd      	mov	sp, r7
 801874a:	bd80      	pop	{r7, pc}
 801874c:	24002bb4 	.word	0x24002bb4
 8018750:	240026b8 	.word	0x240026b8

08018754 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018754:	b580      	push	{r7, lr}
 8018756:	b086      	sub	sp, #24
 8018758:	af00      	add	r7, sp, #0
 801875a:	60f8      	str	r0, [r7, #12]
 801875c:	60b9      	str	r1, [r7, #8]
 801875e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d10a      	bne.n	801877c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801876a:	f383 8811 	msr	BASEPRI, r3
 801876e:	f3bf 8f6f 	isb	sy
 8018772:	f3bf 8f4f 	dsb	sy
 8018776:	617b      	str	r3, [r7, #20]
}
 8018778:	bf00      	nop
 801877a:	e7fe      	b.n	801877a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801877c:	4b0a      	ldr	r3, [pc, #40]	; (80187a8 <vTaskPlaceOnEventListRestricted+0x54>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	3318      	adds	r3, #24
 8018782:	4619      	mov	r1, r3
 8018784:	68f8      	ldr	r0, [r7, #12]
 8018786:	f7fe fdec 	bl	8017362 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d002      	beq.n	8018796 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018794:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018796:	6879      	ldr	r1, [r7, #4]
 8018798:	68b8      	ldr	r0, [r7, #8]
 801879a:	f000 facb 	bl	8018d34 <prvAddCurrentTaskToDelayedList>
	}
 801879e:	bf00      	nop
 80187a0:	3718      	adds	r7, #24
 80187a2:	46bd      	mov	sp, r7
 80187a4:	bd80      	pop	{r7, pc}
 80187a6:	bf00      	nop
 80187a8:	240026b8 	.word	0x240026b8

080187ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b086      	sub	sp, #24
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	68db      	ldr	r3, [r3, #12]
 80187b8:	68db      	ldr	r3, [r3, #12]
 80187ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80187bc:	693b      	ldr	r3, [r7, #16]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d10a      	bne.n	80187d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80187c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187c6:	f383 8811 	msr	BASEPRI, r3
 80187ca:	f3bf 8f6f 	isb	sy
 80187ce:	f3bf 8f4f 	dsb	sy
 80187d2:	60fb      	str	r3, [r7, #12]
}
 80187d4:	bf00      	nop
 80187d6:	e7fe      	b.n	80187d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80187d8:	693b      	ldr	r3, [r7, #16]
 80187da:	3318      	adds	r3, #24
 80187dc:	4618      	mov	r0, r3
 80187de:	f7fe fe1d 	bl	801741c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80187e2:	4b1e      	ldr	r3, [pc, #120]	; (801885c <xTaskRemoveFromEventList+0xb0>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d11d      	bne.n	8018826 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80187ea:	693b      	ldr	r3, [r7, #16]
 80187ec:	3304      	adds	r3, #4
 80187ee:	4618      	mov	r0, r3
 80187f0:	f7fe fe14 	bl	801741c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80187f4:	693b      	ldr	r3, [r7, #16]
 80187f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187f8:	4b19      	ldr	r3, [pc, #100]	; (8018860 <xTaskRemoveFromEventList+0xb4>)
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	429a      	cmp	r2, r3
 80187fe:	d903      	bls.n	8018808 <xTaskRemoveFromEventList+0x5c>
 8018800:	693b      	ldr	r3, [r7, #16]
 8018802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018804:	4a16      	ldr	r2, [pc, #88]	; (8018860 <xTaskRemoveFromEventList+0xb4>)
 8018806:	6013      	str	r3, [r2, #0]
 8018808:	693b      	ldr	r3, [r7, #16]
 801880a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801880c:	4613      	mov	r3, r2
 801880e:	009b      	lsls	r3, r3, #2
 8018810:	4413      	add	r3, r2
 8018812:	009b      	lsls	r3, r3, #2
 8018814:	4a13      	ldr	r2, [pc, #76]	; (8018864 <xTaskRemoveFromEventList+0xb8>)
 8018816:	441a      	add	r2, r3
 8018818:	693b      	ldr	r3, [r7, #16]
 801881a:	3304      	adds	r3, #4
 801881c:	4619      	mov	r1, r3
 801881e:	4610      	mov	r0, r2
 8018820:	f7fe fd9f 	bl	8017362 <vListInsertEnd>
 8018824:	e005      	b.n	8018832 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018826:	693b      	ldr	r3, [r7, #16]
 8018828:	3318      	adds	r3, #24
 801882a:	4619      	mov	r1, r3
 801882c:	480e      	ldr	r0, [pc, #56]	; (8018868 <xTaskRemoveFromEventList+0xbc>)
 801882e:	f7fe fd98 	bl	8017362 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018832:	693b      	ldr	r3, [r7, #16]
 8018834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018836:	4b0d      	ldr	r3, [pc, #52]	; (801886c <xTaskRemoveFromEventList+0xc0>)
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801883c:	429a      	cmp	r2, r3
 801883e:	d905      	bls.n	801884c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018840:	2301      	movs	r3, #1
 8018842:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018844:	4b0a      	ldr	r3, [pc, #40]	; (8018870 <xTaskRemoveFromEventList+0xc4>)
 8018846:	2201      	movs	r2, #1
 8018848:	601a      	str	r2, [r3, #0]
 801884a:	e001      	b.n	8018850 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801884c:	2300      	movs	r3, #0
 801884e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018850:	697b      	ldr	r3, [r7, #20]
}
 8018852:	4618      	mov	r0, r3
 8018854:	3718      	adds	r7, #24
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}
 801885a:	bf00      	nop
 801885c:	24002bb4 	.word	0x24002bb4
 8018860:	24002b94 	.word	0x24002b94
 8018864:	240026bc 	.word	0x240026bc
 8018868:	24002b4c 	.word	0x24002b4c
 801886c:	240026b8 	.word	0x240026b8
 8018870:	24002ba0 	.word	0x24002ba0

08018874 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018874:	b580      	push	{r7, lr}
 8018876:	b086      	sub	sp, #24
 8018878:	af00      	add	r7, sp, #0
 801887a:	6078      	str	r0, [r7, #4]
 801887c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801887e:	4b29      	ldr	r3, [pc, #164]	; (8018924 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d10a      	bne.n	801889c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8018886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801888a:	f383 8811 	msr	BASEPRI, r3
 801888e:	f3bf 8f6f 	isb	sy
 8018892:	f3bf 8f4f 	dsb	sy
 8018896:	613b      	str	r3, [r7, #16]
}
 8018898:	bf00      	nop
 801889a:	e7fe      	b.n	801889a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	68db      	ldr	r3, [r3, #12]
 80188aa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80188ac:	697b      	ldr	r3, [r7, #20]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d10a      	bne.n	80188c8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80188b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188b6:	f383 8811 	msr	BASEPRI, r3
 80188ba:	f3bf 8f6f 	isb	sy
 80188be:	f3bf 8f4f 	dsb	sy
 80188c2:	60fb      	str	r3, [r7, #12]
}
 80188c4:	bf00      	nop
 80188c6:	e7fe      	b.n	80188c6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80188c8:	6878      	ldr	r0, [r7, #4]
 80188ca:	f7fe fda7 	bl	801741c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80188ce:	697b      	ldr	r3, [r7, #20]
 80188d0:	3304      	adds	r3, #4
 80188d2:	4618      	mov	r0, r3
 80188d4:	f7fe fda2 	bl	801741c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80188d8:	697b      	ldr	r3, [r7, #20]
 80188da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188dc:	4b12      	ldr	r3, [pc, #72]	; (8018928 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	429a      	cmp	r2, r3
 80188e2:	d903      	bls.n	80188ec <vTaskRemoveFromUnorderedEventList+0x78>
 80188e4:	697b      	ldr	r3, [r7, #20]
 80188e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188e8:	4a0f      	ldr	r2, [pc, #60]	; (8018928 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80188ea:	6013      	str	r3, [r2, #0]
 80188ec:	697b      	ldr	r3, [r7, #20]
 80188ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188f0:	4613      	mov	r3, r2
 80188f2:	009b      	lsls	r3, r3, #2
 80188f4:	4413      	add	r3, r2
 80188f6:	009b      	lsls	r3, r3, #2
 80188f8:	4a0c      	ldr	r2, [pc, #48]	; (801892c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80188fa:	441a      	add	r2, r3
 80188fc:	697b      	ldr	r3, [r7, #20]
 80188fe:	3304      	adds	r3, #4
 8018900:	4619      	mov	r1, r3
 8018902:	4610      	mov	r0, r2
 8018904:	f7fe fd2d 	bl	8017362 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018908:	697b      	ldr	r3, [r7, #20]
 801890a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801890c:	4b08      	ldr	r3, [pc, #32]	; (8018930 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018912:	429a      	cmp	r2, r3
 8018914:	d902      	bls.n	801891c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018916:	4b07      	ldr	r3, [pc, #28]	; (8018934 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018918:	2201      	movs	r2, #1
 801891a:	601a      	str	r2, [r3, #0]
	}
}
 801891c:	bf00      	nop
 801891e:	3718      	adds	r7, #24
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}
 8018924:	24002bb4 	.word	0x24002bb4
 8018928:	24002b94 	.word	0x24002b94
 801892c:	240026bc 	.word	0x240026bc
 8018930:	240026b8 	.word	0x240026b8
 8018934:	24002ba0 	.word	0x24002ba0

08018938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018938:	b480      	push	{r7}
 801893a:	b083      	sub	sp, #12
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018940:	4b06      	ldr	r3, [pc, #24]	; (801895c <vTaskInternalSetTimeOutState+0x24>)
 8018942:	681a      	ldr	r2, [r3, #0]
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018948:	4b05      	ldr	r3, [pc, #20]	; (8018960 <vTaskInternalSetTimeOutState+0x28>)
 801894a:	681a      	ldr	r2, [r3, #0]
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	605a      	str	r2, [r3, #4]
}
 8018950:	bf00      	nop
 8018952:	370c      	adds	r7, #12
 8018954:	46bd      	mov	sp, r7
 8018956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895a:	4770      	bx	lr
 801895c:	24002ba4 	.word	0x24002ba4
 8018960:	24002b90 	.word	0x24002b90

08018964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b088      	sub	sp, #32
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
 801896c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d10a      	bne.n	801898a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018978:	f383 8811 	msr	BASEPRI, r3
 801897c:	f3bf 8f6f 	isb	sy
 8018980:	f3bf 8f4f 	dsb	sy
 8018984:	613b      	str	r3, [r7, #16]
}
 8018986:	bf00      	nop
 8018988:	e7fe      	b.n	8018988 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801898a:	683b      	ldr	r3, [r7, #0]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d10a      	bne.n	80189a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018994:	f383 8811 	msr	BASEPRI, r3
 8018998:	f3bf 8f6f 	isb	sy
 801899c:	f3bf 8f4f 	dsb	sy
 80189a0:	60fb      	str	r3, [r7, #12]
}
 80189a2:	bf00      	nop
 80189a4:	e7fe      	b.n	80189a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80189a6:	f000 feb5 	bl	8019714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80189aa:	4b1d      	ldr	r3, [pc, #116]	; (8018a20 <xTaskCheckForTimeOut+0xbc>)
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	685b      	ldr	r3, [r3, #4]
 80189b4:	69ba      	ldr	r2, [r7, #24]
 80189b6:	1ad3      	subs	r3, r2, r3
 80189b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80189ba:	683b      	ldr	r3, [r7, #0]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80189c2:	d102      	bne.n	80189ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80189c4:	2300      	movs	r3, #0
 80189c6:	61fb      	str	r3, [r7, #28]
 80189c8:	e023      	b.n	8018a12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	681a      	ldr	r2, [r3, #0]
 80189ce:	4b15      	ldr	r3, [pc, #84]	; (8018a24 <xTaskCheckForTimeOut+0xc0>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	429a      	cmp	r2, r3
 80189d4:	d007      	beq.n	80189e6 <xTaskCheckForTimeOut+0x82>
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	685b      	ldr	r3, [r3, #4]
 80189da:	69ba      	ldr	r2, [r7, #24]
 80189dc:	429a      	cmp	r2, r3
 80189de:	d302      	bcc.n	80189e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80189e0:	2301      	movs	r3, #1
 80189e2:	61fb      	str	r3, [r7, #28]
 80189e4:	e015      	b.n	8018a12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	697a      	ldr	r2, [r7, #20]
 80189ec:	429a      	cmp	r2, r3
 80189ee:	d20b      	bcs.n	8018a08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80189f0:	683b      	ldr	r3, [r7, #0]
 80189f2:	681a      	ldr	r2, [r3, #0]
 80189f4:	697b      	ldr	r3, [r7, #20]
 80189f6:	1ad2      	subs	r2, r2, r3
 80189f8:	683b      	ldr	r3, [r7, #0]
 80189fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80189fc:	6878      	ldr	r0, [r7, #4]
 80189fe:	f7ff ff9b 	bl	8018938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018a02:	2300      	movs	r3, #0
 8018a04:	61fb      	str	r3, [r7, #28]
 8018a06:	e004      	b.n	8018a12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018a08:	683b      	ldr	r3, [r7, #0]
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018a0e:	2301      	movs	r3, #1
 8018a10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018a12:	f000 feaf 	bl	8019774 <vPortExitCritical>

	return xReturn;
 8018a16:	69fb      	ldr	r3, [r7, #28]
}
 8018a18:	4618      	mov	r0, r3
 8018a1a:	3720      	adds	r7, #32
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	bd80      	pop	{r7, pc}
 8018a20:	24002b90 	.word	0x24002b90
 8018a24:	24002ba4 	.word	0x24002ba4

08018a28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018a28:	b480      	push	{r7}
 8018a2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018a2c:	4b03      	ldr	r3, [pc, #12]	; (8018a3c <vTaskMissedYield+0x14>)
 8018a2e:	2201      	movs	r2, #1
 8018a30:	601a      	str	r2, [r3, #0]
}
 8018a32:	bf00      	nop
 8018a34:	46bd      	mov	sp, r7
 8018a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3a:	4770      	bx	lr
 8018a3c:	24002ba0 	.word	0x24002ba0

08018a40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b082      	sub	sp, #8
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018a48:	f000 f852 	bl	8018af0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018a4c:	4b06      	ldr	r3, [pc, #24]	; (8018a68 <prvIdleTask+0x28>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	2b01      	cmp	r3, #1
 8018a52:	d9f9      	bls.n	8018a48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018a54:	4b05      	ldr	r3, [pc, #20]	; (8018a6c <prvIdleTask+0x2c>)
 8018a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a5a:	601a      	str	r2, [r3, #0]
 8018a5c:	f3bf 8f4f 	dsb	sy
 8018a60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018a64:	e7f0      	b.n	8018a48 <prvIdleTask+0x8>
 8018a66:	bf00      	nop
 8018a68:	240026bc 	.word	0x240026bc
 8018a6c:	e000ed04 	.word	0xe000ed04

08018a70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b082      	sub	sp, #8
 8018a74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018a76:	2300      	movs	r3, #0
 8018a78:	607b      	str	r3, [r7, #4]
 8018a7a:	e00c      	b.n	8018a96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018a7c:	687a      	ldr	r2, [r7, #4]
 8018a7e:	4613      	mov	r3, r2
 8018a80:	009b      	lsls	r3, r3, #2
 8018a82:	4413      	add	r3, r2
 8018a84:	009b      	lsls	r3, r3, #2
 8018a86:	4a12      	ldr	r2, [pc, #72]	; (8018ad0 <prvInitialiseTaskLists+0x60>)
 8018a88:	4413      	add	r3, r2
 8018a8a:	4618      	mov	r0, r3
 8018a8c:	f7fe fc3c 	bl	8017308 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	3301      	adds	r3, #1
 8018a94:	607b      	str	r3, [r7, #4]
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	2b37      	cmp	r3, #55	; 0x37
 8018a9a:	d9ef      	bls.n	8018a7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018a9c:	480d      	ldr	r0, [pc, #52]	; (8018ad4 <prvInitialiseTaskLists+0x64>)
 8018a9e:	f7fe fc33 	bl	8017308 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018aa2:	480d      	ldr	r0, [pc, #52]	; (8018ad8 <prvInitialiseTaskLists+0x68>)
 8018aa4:	f7fe fc30 	bl	8017308 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018aa8:	480c      	ldr	r0, [pc, #48]	; (8018adc <prvInitialiseTaskLists+0x6c>)
 8018aaa:	f7fe fc2d 	bl	8017308 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018aae:	480c      	ldr	r0, [pc, #48]	; (8018ae0 <prvInitialiseTaskLists+0x70>)
 8018ab0:	f7fe fc2a 	bl	8017308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018ab4:	480b      	ldr	r0, [pc, #44]	; (8018ae4 <prvInitialiseTaskLists+0x74>)
 8018ab6:	f7fe fc27 	bl	8017308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018aba:	4b0b      	ldr	r3, [pc, #44]	; (8018ae8 <prvInitialiseTaskLists+0x78>)
 8018abc:	4a05      	ldr	r2, [pc, #20]	; (8018ad4 <prvInitialiseTaskLists+0x64>)
 8018abe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018ac0:	4b0a      	ldr	r3, [pc, #40]	; (8018aec <prvInitialiseTaskLists+0x7c>)
 8018ac2:	4a05      	ldr	r2, [pc, #20]	; (8018ad8 <prvInitialiseTaskLists+0x68>)
 8018ac4:	601a      	str	r2, [r3, #0]
}
 8018ac6:	bf00      	nop
 8018ac8:	3708      	adds	r7, #8
 8018aca:	46bd      	mov	sp, r7
 8018acc:	bd80      	pop	{r7, pc}
 8018ace:	bf00      	nop
 8018ad0:	240026bc 	.word	0x240026bc
 8018ad4:	24002b1c 	.word	0x24002b1c
 8018ad8:	24002b30 	.word	0x24002b30
 8018adc:	24002b4c 	.word	0x24002b4c
 8018ae0:	24002b60 	.word	0x24002b60
 8018ae4:	24002b78 	.word	0x24002b78
 8018ae8:	24002b44 	.word	0x24002b44
 8018aec:	24002b48 	.word	0x24002b48

08018af0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b082      	sub	sp, #8
 8018af4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018af6:	e019      	b.n	8018b2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018af8:	f000 fe0c 	bl	8019714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018afc:	4b10      	ldr	r3, [pc, #64]	; (8018b40 <prvCheckTasksWaitingTermination+0x50>)
 8018afe:	68db      	ldr	r3, [r3, #12]
 8018b00:	68db      	ldr	r3, [r3, #12]
 8018b02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	3304      	adds	r3, #4
 8018b08:	4618      	mov	r0, r3
 8018b0a:	f7fe fc87 	bl	801741c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018b0e:	4b0d      	ldr	r3, [pc, #52]	; (8018b44 <prvCheckTasksWaitingTermination+0x54>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	3b01      	subs	r3, #1
 8018b14:	4a0b      	ldr	r2, [pc, #44]	; (8018b44 <prvCheckTasksWaitingTermination+0x54>)
 8018b16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018b18:	4b0b      	ldr	r3, [pc, #44]	; (8018b48 <prvCheckTasksWaitingTermination+0x58>)
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	3b01      	subs	r3, #1
 8018b1e:	4a0a      	ldr	r2, [pc, #40]	; (8018b48 <prvCheckTasksWaitingTermination+0x58>)
 8018b20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018b22:	f000 fe27 	bl	8019774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018b26:	6878      	ldr	r0, [r7, #4]
 8018b28:	f000 f810 	bl	8018b4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018b2c:	4b06      	ldr	r3, [pc, #24]	; (8018b48 <prvCheckTasksWaitingTermination+0x58>)
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d1e1      	bne.n	8018af8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018b34:	bf00      	nop
 8018b36:	bf00      	nop
 8018b38:	3708      	adds	r7, #8
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bd80      	pop	{r7, pc}
 8018b3e:	bf00      	nop
 8018b40:	24002b60 	.word	0x24002b60
 8018b44:	24002b8c 	.word	0x24002b8c
 8018b48:	24002b74 	.word	0x24002b74

08018b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b084      	sub	sp, #16
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d108      	bne.n	8018b70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b62:	4618      	mov	r0, r3
 8018b64:	f000 ffc4 	bl	8019af0 <vPortFree>
				vPortFree( pxTCB );
 8018b68:	6878      	ldr	r0, [r7, #4]
 8018b6a:	f000 ffc1 	bl	8019af0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018b6e:	e018      	b.n	8018ba2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018b76:	2b01      	cmp	r3, #1
 8018b78:	d103      	bne.n	8018b82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018b7a:	6878      	ldr	r0, [r7, #4]
 8018b7c:	f000 ffb8 	bl	8019af0 <vPortFree>
	}
 8018b80:	e00f      	b.n	8018ba2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018b88:	2b02      	cmp	r3, #2
 8018b8a:	d00a      	beq.n	8018ba2 <prvDeleteTCB+0x56>
	__asm volatile
 8018b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b90:	f383 8811 	msr	BASEPRI, r3
 8018b94:	f3bf 8f6f 	isb	sy
 8018b98:	f3bf 8f4f 	dsb	sy
 8018b9c:	60fb      	str	r3, [r7, #12]
}
 8018b9e:	bf00      	nop
 8018ba0:	e7fe      	b.n	8018ba0 <prvDeleteTCB+0x54>
	}
 8018ba2:	bf00      	nop
 8018ba4:	3710      	adds	r7, #16
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
	...

08018bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018bac:	b480      	push	{r7}
 8018bae:	b083      	sub	sp, #12
 8018bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018bb2:	4b0c      	ldr	r3, [pc, #48]	; (8018be4 <prvResetNextTaskUnblockTime+0x38>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d104      	bne.n	8018bc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018bbc:	4b0a      	ldr	r3, [pc, #40]	; (8018be8 <prvResetNextTaskUnblockTime+0x3c>)
 8018bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018bc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018bc4:	e008      	b.n	8018bd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018bc6:	4b07      	ldr	r3, [pc, #28]	; (8018be4 <prvResetNextTaskUnblockTime+0x38>)
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	68db      	ldr	r3, [r3, #12]
 8018bcc:	68db      	ldr	r3, [r3, #12]
 8018bce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	685b      	ldr	r3, [r3, #4]
 8018bd4:	4a04      	ldr	r2, [pc, #16]	; (8018be8 <prvResetNextTaskUnblockTime+0x3c>)
 8018bd6:	6013      	str	r3, [r2, #0]
}
 8018bd8:	bf00      	nop
 8018bda:	370c      	adds	r7, #12
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be2:	4770      	bx	lr
 8018be4:	24002b44 	.word	0x24002b44
 8018be8:	24002bac 	.word	0x24002bac

08018bec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018bec:	b480      	push	{r7}
 8018bee:	b083      	sub	sp, #12
 8018bf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018bf2:	4b0b      	ldr	r3, [pc, #44]	; (8018c20 <xTaskGetSchedulerState+0x34>)
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d102      	bne.n	8018c00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018bfa:	2301      	movs	r3, #1
 8018bfc:	607b      	str	r3, [r7, #4]
 8018bfe:	e008      	b.n	8018c12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018c00:	4b08      	ldr	r3, [pc, #32]	; (8018c24 <xTaskGetSchedulerState+0x38>)
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d102      	bne.n	8018c0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018c08:	2302      	movs	r3, #2
 8018c0a:	607b      	str	r3, [r7, #4]
 8018c0c:	e001      	b.n	8018c12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018c0e:	2300      	movs	r3, #0
 8018c10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018c12:	687b      	ldr	r3, [r7, #4]
	}
 8018c14:	4618      	mov	r0, r3
 8018c16:	370c      	adds	r7, #12
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1e:	4770      	bx	lr
 8018c20:	24002b98 	.word	0x24002b98
 8018c24:	24002bb4 	.word	0x24002bb4

08018c28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b086      	sub	sp, #24
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018c34:	2300      	movs	r3, #0
 8018c36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d056      	beq.n	8018cec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018c3e:	4b2e      	ldr	r3, [pc, #184]	; (8018cf8 <xTaskPriorityDisinherit+0xd0>)
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	693a      	ldr	r2, [r7, #16]
 8018c44:	429a      	cmp	r2, r3
 8018c46:	d00a      	beq.n	8018c5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c4c:	f383 8811 	msr	BASEPRI, r3
 8018c50:	f3bf 8f6f 	isb	sy
 8018c54:	f3bf 8f4f 	dsb	sy
 8018c58:	60fb      	str	r3, [r7, #12]
}
 8018c5a:	bf00      	nop
 8018c5c:	e7fe      	b.n	8018c5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018c5e:	693b      	ldr	r3, [r7, #16]
 8018c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d10a      	bne.n	8018c7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c6a:	f383 8811 	msr	BASEPRI, r3
 8018c6e:	f3bf 8f6f 	isb	sy
 8018c72:	f3bf 8f4f 	dsb	sy
 8018c76:	60bb      	str	r3, [r7, #8]
}
 8018c78:	bf00      	nop
 8018c7a:	e7fe      	b.n	8018c7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018c7c:	693b      	ldr	r3, [r7, #16]
 8018c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c80:	1e5a      	subs	r2, r3, #1
 8018c82:	693b      	ldr	r3, [r7, #16]
 8018c84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018c86:	693b      	ldr	r3, [r7, #16]
 8018c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c8a:	693b      	ldr	r3, [r7, #16]
 8018c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018c8e:	429a      	cmp	r2, r3
 8018c90:	d02c      	beq.n	8018cec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018c92:	693b      	ldr	r3, [r7, #16]
 8018c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d128      	bne.n	8018cec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018c9a:	693b      	ldr	r3, [r7, #16]
 8018c9c:	3304      	adds	r3, #4
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	f7fe fbbc 	bl	801741c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018ca4:	693b      	ldr	r3, [r7, #16]
 8018ca6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018ca8:	693b      	ldr	r3, [r7, #16]
 8018caa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018cac:	693b      	ldr	r3, [r7, #16]
 8018cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018cb4:	693b      	ldr	r3, [r7, #16]
 8018cb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018cb8:	693b      	ldr	r3, [r7, #16]
 8018cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cbc:	4b0f      	ldr	r3, [pc, #60]	; (8018cfc <xTaskPriorityDisinherit+0xd4>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	d903      	bls.n	8018ccc <xTaskPriorityDisinherit+0xa4>
 8018cc4:	693b      	ldr	r3, [r7, #16]
 8018cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cc8:	4a0c      	ldr	r2, [pc, #48]	; (8018cfc <xTaskPriorityDisinherit+0xd4>)
 8018cca:	6013      	str	r3, [r2, #0]
 8018ccc:	693b      	ldr	r3, [r7, #16]
 8018cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cd0:	4613      	mov	r3, r2
 8018cd2:	009b      	lsls	r3, r3, #2
 8018cd4:	4413      	add	r3, r2
 8018cd6:	009b      	lsls	r3, r3, #2
 8018cd8:	4a09      	ldr	r2, [pc, #36]	; (8018d00 <xTaskPriorityDisinherit+0xd8>)
 8018cda:	441a      	add	r2, r3
 8018cdc:	693b      	ldr	r3, [r7, #16]
 8018cde:	3304      	adds	r3, #4
 8018ce0:	4619      	mov	r1, r3
 8018ce2:	4610      	mov	r0, r2
 8018ce4:	f7fe fb3d 	bl	8017362 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018ce8:	2301      	movs	r3, #1
 8018cea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018cec:	697b      	ldr	r3, [r7, #20]
	}
 8018cee:	4618      	mov	r0, r3
 8018cf0:	3718      	adds	r7, #24
 8018cf2:	46bd      	mov	sp, r7
 8018cf4:	bd80      	pop	{r7, pc}
 8018cf6:	bf00      	nop
 8018cf8:	240026b8 	.word	0x240026b8
 8018cfc:	24002b94 	.word	0x24002b94
 8018d00:	240026bc 	.word	0x240026bc

08018d04 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018d04:	b480      	push	{r7}
 8018d06:	b083      	sub	sp, #12
 8018d08:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018d0a:	4b09      	ldr	r3, [pc, #36]	; (8018d30 <uxTaskResetEventItemValue+0x2c>)
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	699b      	ldr	r3, [r3, #24]
 8018d10:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018d12:	4b07      	ldr	r3, [pc, #28]	; (8018d30 <uxTaskResetEventItemValue+0x2c>)
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d18:	4b05      	ldr	r3, [pc, #20]	; (8018d30 <uxTaskResetEventItemValue+0x2c>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018d20:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018d22:	687b      	ldr	r3, [r7, #4]
}
 8018d24:	4618      	mov	r0, r3
 8018d26:	370c      	adds	r7, #12
 8018d28:	46bd      	mov	sp, r7
 8018d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2e:	4770      	bx	lr
 8018d30:	240026b8 	.word	0x240026b8

08018d34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b084      	sub	sp, #16
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
 8018d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018d3e:	4b21      	ldr	r3, [pc, #132]	; (8018dc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018d44:	4b20      	ldr	r3, [pc, #128]	; (8018dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	3304      	adds	r3, #4
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f7fe fb66 	bl	801741c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018d56:	d10a      	bne.n	8018d6e <prvAddCurrentTaskToDelayedList+0x3a>
 8018d58:	683b      	ldr	r3, [r7, #0]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d007      	beq.n	8018d6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018d5e:	4b1a      	ldr	r3, [pc, #104]	; (8018dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	3304      	adds	r3, #4
 8018d64:	4619      	mov	r1, r3
 8018d66:	4819      	ldr	r0, [pc, #100]	; (8018dcc <prvAddCurrentTaskToDelayedList+0x98>)
 8018d68:	f7fe fafb 	bl	8017362 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018d6c:	e026      	b.n	8018dbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018d6e:	68fa      	ldr	r2, [r7, #12]
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	4413      	add	r3, r2
 8018d74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018d76:	4b14      	ldr	r3, [pc, #80]	; (8018dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	68ba      	ldr	r2, [r7, #8]
 8018d7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018d7e:	68ba      	ldr	r2, [r7, #8]
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	429a      	cmp	r2, r3
 8018d84:	d209      	bcs.n	8018d9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018d86:	4b12      	ldr	r3, [pc, #72]	; (8018dd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018d88:	681a      	ldr	r2, [r3, #0]
 8018d8a:	4b0f      	ldr	r3, [pc, #60]	; (8018dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	3304      	adds	r3, #4
 8018d90:	4619      	mov	r1, r3
 8018d92:	4610      	mov	r0, r2
 8018d94:	f7fe fb09 	bl	80173aa <vListInsert>
}
 8018d98:	e010      	b.n	8018dbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018d9a:	4b0e      	ldr	r3, [pc, #56]	; (8018dd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018d9c:	681a      	ldr	r2, [r3, #0]
 8018d9e:	4b0a      	ldr	r3, [pc, #40]	; (8018dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	3304      	adds	r3, #4
 8018da4:	4619      	mov	r1, r3
 8018da6:	4610      	mov	r0, r2
 8018da8:	f7fe faff 	bl	80173aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018dac:	4b0a      	ldr	r3, [pc, #40]	; (8018dd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	68ba      	ldr	r2, [r7, #8]
 8018db2:	429a      	cmp	r2, r3
 8018db4:	d202      	bcs.n	8018dbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018db6:	4a08      	ldr	r2, [pc, #32]	; (8018dd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	6013      	str	r3, [r2, #0]
}
 8018dbc:	bf00      	nop
 8018dbe:	3710      	adds	r7, #16
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bd80      	pop	{r7, pc}
 8018dc4:	24002b90 	.word	0x24002b90
 8018dc8:	240026b8 	.word	0x240026b8
 8018dcc:	24002b78 	.word	0x24002b78
 8018dd0:	24002b48 	.word	0x24002b48
 8018dd4:	24002b44 	.word	0x24002b44
 8018dd8:	24002bac 	.word	0x24002bac

08018ddc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b08a      	sub	sp, #40	; 0x28
 8018de0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018de2:	2300      	movs	r3, #0
 8018de4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018de6:	f000 fb07 	bl	80193f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018dea:	4b1c      	ldr	r3, [pc, #112]	; (8018e5c <xTimerCreateTimerTask+0x80>)
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d021      	beq.n	8018e36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018df2:	2300      	movs	r3, #0
 8018df4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018df6:	2300      	movs	r3, #0
 8018df8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018dfa:	1d3a      	adds	r2, r7, #4
 8018dfc:	f107 0108 	add.w	r1, r7, #8
 8018e00:	f107 030c 	add.w	r3, r7, #12
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7fd fff9 	bl	8016dfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018e0a:	6879      	ldr	r1, [r7, #4]
 8018e0c:	68bb      	ldr	r3, [r7, #8]
 8018e0e:	68fa      	ldr	r2, [r7, #12]
 8018e10:	9202      	str	r2, [sp, #8]
 8018e12:	9301      	str	r3, [sp, #4]
 8018e14:	2302      	movs	r3, #2
 8018e16:	9300      	str	r3, [sp, #0]
 8018e18:	2300      	movs	r3, #0
 8018e1a:	460a      	mov	r2, r1
 8018e1c:	4910      	ldr	r1, [pc, #64]	; (8018e60 <xTimerCreateTimerTask+0x84>)
 8018e1e:	4811      	ldr	r0, [pc, #68]	; (8018e64 <xTimerCreateTimerTask+0x88>)
 8018e20:	f7ff f812 	bl	8017e48 <xTaskCreateStatic>
 8018e24:	4603      	mov	r3, r0
 8018e26:	4a10      	ldr	r2, [pc, #64]	; (8018e68 <xTimerCreateTimerTask+0x8c>)
 8018e28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018e2a:	4b0f      	ldr	r3, [pc, #60]	; (8018e68 <xTimerCreateTimerTask+0x8c>)
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d001      	beq.n	8018e36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018e32:	2301      	movs	r3, #1
 8018e34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018e36:	697b      	ldr	r3, [r7, #20]
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d10a      	bne.n	8018e52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e40:	f383 8811 	msr	BASEPRI, r3
 8018e44:	f3bf 8f6f 	isb	sy
 8018e48:	f3bf 8f4f 	dsb	sy
 8018e4c:	613b      	str	r3, [r7, #16]
}
 8018e4e:	bf00      	nop
 8018e50:	e7fe      	b.n	8018e50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018e52:	697b      	ldr	r3, [r7, #20]
}
 8018e54:	4618      	mov	r0, r3
 8018e56:	3718      	adds	r7, #24
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	bd80      	pop	{r7, pc}
 8018e5c:	24002be8 	.word	0x24002be8
 8018e60:	0801aa18 	.word	0x0801aa18
 8018e64:	08018fa1 	.word	0x08018fa1
 8018e68:	24002bec 	.word	0x24002bec

08018e6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018e6c:	b580      	push	{r7, lr}
 8018e6e:	b08a      	sub	sp, #40	; 0x28
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	60f8      	str	r0, [r7, #12]
 8018e74:	60b9      	str	r1, [r7, #8]
 8018e76:	607a      	str	r2, [r7, #4]
 8018e78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d10a      	bne.n	8018e9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8018e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e88:	f383 8811 	msr	BASEPRI, r3
 8018e8c:	f3bf 8f6f 	isb	sy
 8018e90:	f3bf 8f4f 	dsb	sy
 8018e94:	623b      	str	r3, [r7, #32]
}
 8018e96:	bf00      	nop
 8018e98:	e7fe      	b.n	8018e98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018e9a:	4b1a      	ldr	r3, [pc, #104]	; (8018f04 <xTimerGenericCommand+0x98>)
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d02a      	beq.n	8018ef8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018ea2:	68bb      	ldr	r3, [r7, #8]
 8018ea4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018eae:	68bb      	ldr	r3, [r7, #8]
 8018eb0:	2b05      	cmp	r3, #5
 8018eb2:	dc18      	bgt.n	8018ee6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018eb4:	f7ff fe9a 	bl	8018bec <xTaskGetSchedulerState>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	2b02      	cmp	r3, #2
 8018ebc:	d109      	bne.n	8018ed2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018ebe:	4b11      	ldr	r3, [pc, #68]	; (8018f04 <xTimerGenericCommand+0x98>)
 8018ec0:	6818      	ldr	r0, [r3, #0]
 8018ec2:	f107 0110 	add.w	r1, r7, #16
 8018ec6:	2300      	movs	r3, #0
 8018ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018eca:	f7fe fbd5 	bl	8017678 <xQueueGenericSend>
 8018ece:	6278      	str	r0, [r7, #36]	; 0x24
 8018ed0:	e012      	b.n	8018ef8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018ed2:	4b0c      	ldr	r3, [pc, #48]	; (8018f04 <xTimerGenericCommand+0x98>)
 8018ed4:	6818      	ldr	r0, [r3, #0]
 8018ed6:	f107 0110 	add.w	r1, r7, #16
 8018eda:	2300      	movs	r3, #0
 8018edc:	2200      	movs	r2, #0
 8018ede:	f7fe fbcb 	bl	8017678 <xQueueGenericSend>
 8018ee2:	6278      	str	r0, [r7, #36]	; 0x24
 8018ee4:	e008      	b.n	8018ef8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018ee6:	4b07      	ldr	r3, [pc, #28]	; (8018f04 <xTimerGenericCommand+0x98>)
 8018ee8:	6818      	ldr	r0, [r3, #0]
 8018eea:	f107 0110 	add.w	r1, r7, #16
 8018eee:	2300      	movs	r3, #0
 8018ef0:	683a      	ldr	r2, [r7, #0]
 8018ef2:	f7fe fcbf 	bl	8017874 <xQueueGenericSendFromISR>
 8018ef6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018efa:	4618      	mov	r0, r3
 8018efc:	3728      	adds	r7, #40	; 0x28
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bd80      	pop	{r7, pc}
 8018f02:	bf00      	nop
 8018f04:	24002be8 	.word	0x24002be8

08018f08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b088      	sub	sp, #32
 8018f0c:	af02      	add	r7, sp, #8
 8018f0e:	6078      	str	r0, [r7, #4]
 8018f10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f12:	4b22      	ldr	r3, [pc, #136]	; (8018f9c <prvProcessExpiredTimer+0x94>)
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	68db      	ldr	r3, [r3, #12]
 8018f18:	68db      	ldr	r3, [r3, #12]
 8018f1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018f1c:	697b      	ldr	r3, [r7, #20]
 8018f1e:	3304      	adds	r3, #4
 8018f20:	4618      	mov	r0, r3
 8018f22:	f7fe fa7b 	bl	801741c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018f26:	697b      	ldr	r3, [r7, #20]
 8018f28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f2c:	f003 0304 	and.w	r3, r3, #4
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d022      	beq.n	8018f7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018f34:	697b      	ldr	r3, [r7, #20]
 8018f36:	699a      	ldr	r2, [r3, #24]
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	18d1      	adds	r1, r2, r3
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	683a      	ldr	r2, [r7, #0]
 8018f40:	6978      	ldr	r0, [r7, #20]
 8018f42:	f000 f8d1 	bl	80190e8 <prvInsertTimerInActiveList>
 8018f46:	4603      	mov	r3, r0
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d01f      	beq.n	8018f8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	9300      	str	r3, [sp, #0]
 8018f50:	2300      	movs	r3, #0
 8018f52:	687a      	ldr	r2, [r7, #4]
 8018f54:	2100      	movs	r1, #0
 8018f56:	6978      	ldr	r0, [r7, #20]
 8018f58:	f7ff ff88 	bl	8018e6c <xTimerGenericCommand>
 8018f5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018f5e:	693b      	ldr	r3, [r7, #16]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d113      	bne.n	8018f8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f68:	f383 8811 	msr	BASEPRI, r3
 8018f6c:	f3bf 8f6f 	isb	sy
 8018f70:	f3bf 8f4f 	dsb	sy
 8018f74:	60fb      	str	r3, [r7, #12]
}
 8018f76:	bf00      	nop
 8018f78:	e7fe      	b.n	8018f78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018f7a:	697b      	ldr	r3, [r7, #20]
 8018f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f80:	f023 0301 	bic.w	r3, r3, #1
 8018f84:	b2da      	uxtb	r2, r3
 8018f86:	697b      	ldr	r3, [r7, #20]
 8018f88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018f8c:	697b      	ldr	r3, [r7, #20]
 8018f8e:	6a1b      	ldr	r3, [r3, #32]
 8018f90:	6978      	ldr	r0, [r7, #20]
 8018f92:	4798      	blx	r3
}
 8018f94:	bf00      	nop
 8018f96:	3718      	adds	r7, #24
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	bd80      	pop	{r7, pc}
 8018f9c:	24002be0 	.word	0x24002be0

08018fa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b084      	sub	sp, #16
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018fa8:	f107 0308 	add.w	r3, r7, #8
 8018fac:	4618      	mov	r0, r3
 8018fae:	f000 f857 	bl	8019060 <prvGetNextExpireTime>
 8018fb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018fb4:	68bb      	ldr	r3, [r7, #8]
 8018fb6:	4619      	mov	r1, r3
 8018fb8:	68f8      	ldr	r0, [r7, #12]
 8018fba:	f000 f803 	bl	8018fc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018fbe:	f000 f8d5 	bl	801916c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018fc2:	e7f1      	b.n	8018fa8 <prvTimerTask+0x8>

08018fc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018fc4:	b580      	push	{r7, lr}
 8018fc6:	b084      	sub	sp, #16
 8018fc8:	af00      	add	r7, sp, #0
 8018fca:	6078      	str	r0, [r7, #4]
 8018fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018fce:	f7ff f977 	bl	80182c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018fd2:	f107 0308 	add.w	r3, r7, #8
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	f000 f866 	bl	80190a8 <prvSampleTimeNow>
 8018fdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d130      	bne.n	8019046 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018fe4:	683b      	ldr	r3, [r7, #0]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d10a      	bne.n	8019000 <prvProcessTimerOrBlockTask+0x3c>
 8018fea:	687a      	ldr	r2, [r7, #4]
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	429a      	cmp	r2, r3
 8018ff0:	d806      	bhi.n	8019000 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018ff2:	f7ff f973 	bl	80182dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018ff6:	68f9      	ldr	r1, [r7, #12]
 8018ff8:	6878      	ldr	r0, [r7, #4]
 8018ffa:	f7ff ff85 	bl	8018f08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018ffe:	e024      	b.n	801904a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019000:	683b      	ldr	r3, [r7, #0]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d008      	beq.n	8019018 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019006:	4b13      	ldr	r3, [pc, #76]	; (8019054 <prvProcessTimerOrBlockTask+0x90>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d101      	bne.n	8019014 <prvProcessTimerOrBlockTask+0x50>
 8019010:	2301      	movs	r3, #1
 8019012:	e000      	b.n	8019016 <prvProcessTimerOrBlockTask+0x52>
 8019014:	2300      	movs	r3, #0
 8019016:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019018:	4b0f      	ldr	r3, [pc, #60]	; (8019058 <prvProcessTimerOrBlockTask+0x94>)
 801901a:	6818      	ldr	r0, [r3, #0]
 801901c:	687a      	ldr	r2, [r7, #4]
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	1ad3      	subs	r3, r2, r3
 8019022:	683a      	ldr	r2, [r7, #0]
 8019024:	4619      	mov	r1, r3
 8019026:	f7fe fedb 	bl	8017de0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801902a:	f7ff f957 	bl	80182dc <xTaskResumeAll>
 801902e:	4603      	mov	r3, r0
 8019030:	2b00      	cmp	r3, #0
 8019032:	d10a      	bne.n	801904a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019034:	4b09      	ldr	r3, [pc, #36]	; (801905c <prvProcessTimerOrBlockTask+0x98>)
 8019036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801903a:	601a      	str	r2, [r3, #0]
 801903c:	f3bf 8f4f 	dsb	sy
 8019040:	f3bf 8f6f 	isb	sy
}
 8019044:	e001      	b.n	801904a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019046:	f7ff f949 	bl	80182dc <xTaskResumeAll>
}
 801904a:	bf00      	nop
 801904c:	3710      	adds	r7, #16
 801904e:	46bd      	mov	sp, r7
 8019050:	bd80      	pop	{r7, pc}
 8019052:	bf00      	nop
 8019054:	24002be4 	.word	0x24002be4
 8019058:	24002be8 	.word	0x24002be8
 801905c:	e000ed04 	.word	0xe000ed04

08019060 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019060:	b480      	push	{r7}
 8019062:	b085      	sub	sp, #20
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019068:	4b0e      	ldr	r3, [pc, #56]	; (80190a4 <prvGetNextExpireTime+0x44>)
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d101      	bne.n	8019076 <prvGetNextExpireTime+0x16>
 8019072:	2201      	movs	r2, #1
 8019074:	e000      	b.n	8019078 <prvGetNextExpireTime+0x18>
 8019076:	2200      	movs	r2, #0
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d105      	bne.n	8019090 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019084:	4b07      	ldr	r3, [pc, #28]	; (80190a4 <prvGetNextExpireTime+0x44>)
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	68db      	ldr	r3, [r3, #12]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	60fb      	str	r3, [r7, #12]
 801908e:	e001      	b.n	8019094 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019090:	2300      	movs	r3, #0
 8019092:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019094:	68fb      	ldr	r3, [r7, #12]
}
 8019096:	4618      	mov	r0, r3
 8019098:	3714      	adds	r7, #20
 801909a:	46bd      	mov	sp, r7
 801909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a0:	4770      	bx	lr
 80190a2:	bf00      	nop
 80190a4:	24002be0 	.word	0x24002be0

080190a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b084      	sub	sp, #16
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80190b0:	f7ff f9b2 	bl	8018418 <xTaskGetTickCount>
 80190b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80190b6:	4b0b      	ldr	r3, [pc, #44]	; (80190e4 <prvSampleTimeNow+0x3c>)
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	68fa      	ldr	r2, [r7, #12]
 80190bc:	429a      	cmp	r2, r3
 80190be:	d205      	bcs.n	80190cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80190c0:	f000 f936 	bl	8019330 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	2201      	movs	r2, #1
 80190c8:	601a      	str	r2, [r3, #0]
 80190ca:	e002      	b.n	80190d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	2200      	movs	r2, #0
 80190d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80190d2:	4a04      	ldr	r2, [pc, #16]	; (80190e4 <prvSampleTimeNow+0x3c>)
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80190d8:	68fb      	ldr	r3, [r7, #12]
}
 80190da:	4618      	mov	r0, r3
 80190dc:	3710      	adds	r7, #16
 80190de:	46bd      	mov	sp, r7
 80190e0:	bd80      	pop	{r7, pc}
 80190e2:	bf00      	nop
 80190e4:	24002bf0 	.word	0x24002bf0

080190e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b086      	sub	sp, #24
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	60f8      	str	r0, [r7, #12]
 80190f0:	60b9      	str	r1, [r7, #8]
 80190f2:	607a      	str	r2, [r7, #4]
 80190f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80190f6:	2300      	movs	r3, #0
 80190f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	68ba      	ldr	r2, [r7, #8]
 80190fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	68fa      	ldr	r2, [r7, #12]
 8019104:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019106:	68ba      	ldr	r2, [r7, #8]
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	429a      	cmp	r2, r3
 801910c:	d812      	bhi.n	8019134 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801910e:	687a      	ldr	r2, [r7, #4]
 8019110:	683b      	ldr	r3, [r7, #0]
 8019112:	1ad2      	subs	r2, r2, r3
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	699b      	ldr	r3, [r3, #24]
 8019118:	429a      	cmp	r2, r3
 801911a:	d302      	bcc.n	8019122 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801911c:	2301      	movs	r3, #1
 801911e:	617b      	str	r3, [r7, #20]
 8019120:	e01b      	b.n	801915a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019122:	4b10      	ldr	r3, [pc, #64]	; (8019164 <prvInsertTimerInActiveList+0x7c>)
 8019124:	681a      	ldr	r2, [r3, #0]
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	3304      	adds	r3, #4
 801912a:	4619      	mov	r1, r3
 801912c:	4610      	mov	r0, r2
 801912e:	f7fe f93c 	bl	80173aa <vListInsert>
 8019132:	e012      	b.n	801915a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019134:	687a      	ldr	r2, [r7, #4]
 8019136:	683b      	ldr	r3, [r7, #0]
 8019138:	429a      	cmp	r2, r3
 801913a:	d206      	bcs.n	801914a <prvInsertTimerInActiveList+0x62>
 801913c:	68ba      	ldr	r2, [r7, #8]
 801913e:	683b      	ldr	r3, [r7, #0]
 8019140:	429a      	cmp	r2, r3
 8019142:	d302      	bcc.n	801914a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019144:	2301      	movs	r3, #1
 8019146:	617b      	str	r3, [r7, #20]
 8019148:	e007      	b.n	801915a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801914a:	4b07      	ldr	r3, [pc, #28]	; (8019168 <prvInsertTimerInActiveList+0x80>)
 801914c:	681a      	ldr	r2, [r3, #0]
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	3304      	adds	r3, #4
 8019152:	4619      	mov	r1, r3
 8019154:	4610      	mov	r0, r2
 8019156:	f7fe f928 	bl	80173aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 801915a:	697b      	ldr	r3, [r7, #20]
}
 801915c:	4618      	mov	r0, r3
 801915e:	3718      	adds	r7, #24
 8019160:	46bd      	mov	sp, r7
 8019162:	bd80      	pop	{r7, pc}
 8019164:	24002be4 	.word	0x24002be4
 8019168:	24002be0 	.word	0x24002be0

0801916c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801916c:	b580      	push	{r7, lr}
 801916e:	b08e      	sub	sp, #56	; 0x38
 8019170:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019172:	e0ca      	b.n	801930a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	2b00      	cmp	r3, #0
 8019178:	da18      	bge.n	80191ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801917a:	1d3b      	adds	r3, r7, #4
 801917c:	3304      	adds	r3, #4
 801917e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019182:	2b00      	cmp	r3, #0
 8019184:	d10a      	bne.n	801919c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801918a:	f383 8811 	msr	BASEPRI, r3
 801918e:	f3bf 8f6f 	isb	sy
 8019192:	f3bf 8f4f 	dsb	sy
 8019196:	61fb      	str	r3, [r7, #28]
}
 8019198:	bf00      	nop
 801919a:	e7fe      	b.n	801919a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80191a2:	6850      	ldr	r0, [r2, #4]
 80191a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80191a6:	6892      	ldr	r2, [r2, #8]
 80191a8:	4611      	mov	r1, r2
 80191aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	f2c0 80aa 	blt.w	8019308 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80191b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ba:	695b      	ldr	r3, [r3, #20]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d004      	beq.n	80191ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80191c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191c2:	3304      	adds	r3, #4
 80191c4:	4618      	mov	r0, r3
 80191c6:	f7fe f929 	bl	801741c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80191ca:	463b      	mov	r3, r7
 80191cc:	4618      	mov	r0, r3
 80191ce:	f7ff ff6b 	bl	80190a8 <prvSampleTimeNow>
 80191d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	2b09      	cmp	r3, #9
 80191d8:	f200 8097 	bhi.w	801930a <prvProcessReceivedCommands+0x19e>
 80191dc:	a201      	add	r2, pc, #4	; (adr r2, 80191e4 <prvProcessReceivedCommands+0x78>)
 80191de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191e2:	bf00      	nop
 80191e4:	0801920d 	.word	0x0801920d
 80191e8:	0801920d 	.word	0x0801920d
 80191ec:	0801920d 	.word	0x0801920d
 80191f0:	08019281 	.word	0x08019281
 80191f4:	08019295 	.word	0x08019295
 80191f8:	080192df 	.word	0x080192df
 80191fc:	0801920d 	.word	0x0801920d
 8019200:	0801920d 	.word	0x0801920d
 8019204:	08019281 	.word	0x08019281
 8019208:	08019295 	.word	0x08019295
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801920e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019212:	f043 0301 	orr.w	r3, r3, #1
 8019216:	b2da      	uxtb	r2, r3
 8019218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801921a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801921e:	68ba      	ldr	r2, [r7, #8]
 8019220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019222:	699b      	ldr	r3, [r3, #24]
 8019224:	18d1      	adds	r1, r2, r3
 8019226:	68bb      	ldr	r3, [r7, #8]
 8019228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801922a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801922c:	f7ff ff5c 	bl	80190e8 <prvInsertTimerInActiveList>
 8019230:	4603      	mov	r3, r0
 8019232:	2b00      	cmp	r3, #0
 8019234:	d069      	beq.n	801930a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019238:	6a1b      	ldr	r3, [r3, #32]
 801923a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801923c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019244:	f003 0304 	and.w	r3, r3, #4
 8019248:	2b00      	cmp	r3, #0
 801924a:	d05e      	beq.n	801930a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801924c:	68ba      	ldr	r2, [r7, #8]
 801924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019250:	699b      	ldr	r3, [r3, #24]
 8019252:	441a      	add	r2, r3
 8019254:	2300      	movs	r3, #0
 8019256:	9300      	str	r3, [sp, #0]
 8019258:	2300      	movs	r3, #0
 801925a:	2100      	movs	r1, #0
 801925c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801925e:	f7ff fe05 	bl	8018e6c <xTimerGenericCommand>
 8019262:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019264:	6a3b      	ldr	r3, [r7, #32]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d14f      	bne.n	801930a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801926e:	f383 8811 	msr	BASEPRI, r3
 8019272:	f3bf 8f6f 	isb	sy
 8019276:	f3bf 8f4f 	dsb	sy
 801927a:	61bb      	str	r3, [r7, #24]
}
 801927c:	bf00      	nop
 801927e:	e7fe      	b.n	801927e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019286:	f023 0301 	bic.w	r3, r3, #1
 801928a:	b2da      	uxtb	r2, r3
 801928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801928e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019292:	e03a      	b.n	801930a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801929a:	f043 0301 	orr.w	r3, r3, #1
 801929e:	b2da      	uxtb	r2, r3
 80192a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80192a6:	68ba      	ldr	r2, [r7, #8]
 80192a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80192ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ae:	699b      	ldr	r3, [r3, #24]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d10a      	bne.n	80192ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80192b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192b8:	f383 8811 	msr	BASEPRI, r3
 80192bc:	f3bf 8f6f 	isb	sy
 80192c0:	f3bf 8f4f 	dsb	sy
 80192c4:	617b      	str	r3, [r7, #20]
}
 80192c6:	bf00      	nop
 80192c8:	e7fe      	b.n	80192c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80192ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192cc:	699a      	ldr	r2, [r3, #24]
 80192ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d0:	18d1      	adds	r1, r2, r3
 80192d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80192d8:	f7ff ff06 	bl	80190e8 <prvInsertTimerInActiveList>
					break;
 80192dc:	e015      	b.n	801930a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80192de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80192e4:	f003 0302 	and.w	r3, r3, #2
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d103      	bne.n	80192f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80192ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80192ee:	f000 fbff 	bl	8019af0 <vPortFree>
 80192f2:	e00a      	b.n	801930a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80192f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80192fa:	f023 0301 	bic.w	r3, r3, #1
 80192fe:	b2da      	uxtb	r2, r3
 8019300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019306:	e000      	b.n	801930a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019308:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801930a:	4b08      	ldr	r3, [pc, #32]	; (801932c <prvProcessReceivedCommands+0x1c0>)
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	1d39      	adds	r1, r7, #4
 8019310:	2200      	movs	r2, #0
 8019312:	4618      	mov	r0, r3
 8019314:	f7fe fb4a 	bl	80179ac <xQueueReceive>
 8019318:	4603      	mov	r3, r0
 801931a:	2b00      	cmp	r3, #0
 801931c:	f47f af2a 	bne.w	8019174 <prvProcessReceivedCommands+0x8>
	}
}
 8019320:	bf00      	nop
 8019322:	bf00      	nop
 8019324:	3730      	adds	r7, #48	; 0x30
 8019326:	46bd      	mov	sp, r7
 8019328:	bd80      	pop	{r7, pc}
 801932a:	bf00      	nop
 801932c:	24002be8 	.word	0x24002be8

08019330 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b088      	sub	sp, #32
 8019334:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019336:	e048      	b.n	80193ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019338:	4b2d      	ldr	r3, [pc, #180]	; (80193f0 <prvSwitchTimerLists+0xc0>)
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	68db      	ldr	r3, [r3, #12]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019342:	4b2b      	ldr	r3, [pc, #172]	; (80193f0 <prvSwitchTimerLists+0xc0>)
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	68db      	ldr	r3, [r3, #12]
 8019348:	68db      	ldr	r3, [r3, #12]
 801934a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	3304      	adds	r3, #4
 8019350:	4618      	mov	r0, r3
 8019352:	f7fe f863 	bl	801741c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	6a1b      	ldr	r3, [r3, #32]
 801935a:	68f8      	ldr	r0, [r7, #12]
 801935c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019364:	f003 0304 	and.w	r3, r3, #4
 8019368:	2b00      	cmp	r3, #0
 801936a:	d02e      	beq.n	80193ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	699b      	ldr	r3, [r3, #24]
 8019370:	693a      	ldr	r2, [r7, #16]
 8019372:	4413      	add	r3, r2
 8019374:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019376:	68ba      	ldr	r2, [r7, #8]
 8019378:	693b      	ldr	r3, [r7, #16]
 801937a:	429a      	cmp	r2, r3
 801937c:	d90e      	bls.n	801939c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	68ba      	ldr	r2, [r7, #8]
 8019382:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	68fa      	ldr	r2, [r7, #12]
 8019388:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801938a:	4b19      	ldr	r3, [pc, #100]	; (80193f0 <prvSwitchTimerLists+0xc0>)
 801938c:	681a      	ldr	r2, [r3, #0]
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	3304      	adds	r3, #4
 8019392:	4619      	mov	r1, r3
 8019394:	4610      	mov	r0, r2
 8019396:	f7fe f808 	bl	80173aa <vListInsert>
 801939a:	e016      	b.n	80193ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801939c:	2300      	movs	r3, #0
 801939e:	9300      	str	r3, [sp, #0]
 80193a0:	2300      	movs	r3, #0
 80193a2:	693a      	ldr	r2, [r7, #16]
 80193a4:	2100      	movs	r1, #0
 80193a6:	68f8      	ldr	r0, [r7, #12]
 80193a8:	f7ff fd60 	bl	8018e6c <xTimerGenericCommand>
 80193ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d10a      	bne.n	80193ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80193b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193b8:	f383 8811 	msr	BASEPRI, r3
 80193bc:	f3bf 8f6f 	isb	sy
 80193c0:	f3bf 8f4f 	dsb	sy
 80193c4:	603b      	str	r3, [r7, #0]
}
 80193c6:	bf00      	nop
 80193c8:	e7fe      	b.n	80193c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80193ca:	4b09      	ldr	r3, [pc, #36]	; (80193f0 <prvSwitchTimerLists+0xc0>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d1b1      	bne.n	8019338 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80193d4:	4b06      	ldr	r3, [pc, #24]	; (80193f0 <prvSwitchTimerLists+0xc0>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80193da:	4b06      	ldr	r3, [pc, #24]	; (80193f4 <prvSwitchTimerLists+0xc4>)
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	4a04      	ldr	r2, [pc, #16]	; (80193f0 <prvSwitchTimerLists+0xc0>)
 80193e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80193e2:	4a04      	ldr	r2, [pc, #16]	; (80193f4 <prvSwitchTimerLists+0xc4>)
 80193e4:	697b      	ldr	r3, [r7, #20]
 80193e6:	6013      	str	r3, [r2, #0]
}
 80193e8:	bf00      	nop
 80193ea:	3718      	adds	r7, #24
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	24002be0 	.word	0x24002be0
 80193f4:	24002be4 	.word	0x24002be4

080193f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b082      	sub	sp, #8
 80193fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80193fe:	f000 f989 	bl	8019714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019402:	4b15      	ldr	r3, [pc, #84]	; (8019458 <prvCheckForValidListAndQueue+0x60>)
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	2b00      	cmp	r3, #0
 8019408:	d120      	bne.n	801944c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801940a:	4814      	ldr	r0, [pc, #80]	; (801945c <prvCheckForValidListAndQueue+0x64>)
 801940c:	f7fd ff7c 	bl	8017308 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019410:	4813      	ldr	r0, [pc, #76]	; (8019460 <prvCheckForValidListAndQueue+0x68>)
 8019412:	f7fd ff79 	bl	8017308 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019416:	4b13      	ldr	r3, [pc, #76]	; (8019464 <prvCheckForValidListAndQueue+0x6c>)
 8019418:	4a10      	ldr	r2, [pc, #64]	; (801945c <prvCheckForValidListAndQueue+0x64>)
 801941a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801941c:	4b12      	ldr	r3, [pc, #72]	; (8019468 <prvCheckForValidListAndQueue+0x70>)
 801941e:	4a10      	ldr	r2, [pc, #64]	; (8019460 <prvCheckForValidListAndQueue+0x68>)
 8019420:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019422:	2300      	movs	r3, #0
 8019424:	9300      	str	r3, [sp, #0]
 8019426:	4b11      	ldr	r3, [pc, #68]	; (801946c <prvCheckForValidListAndQueue+0x74>)
 8019428:	4a11      	ldr	r2, [pc, #68]	; (8019470 <prvCheckForValidListAndQueue+0x78>)
 801942a:	2110      	movs	r1, #16
 801942c:	200a      	movs	r0, #10
 801942e:	f7fe f887 	bl	8017540 <xQueueGenericCreateStatic>
 8019432:	4603      	mov	r3, r0
 8019434:	4a08      	ldr	r2, [pc, #32]	; (8019458 <prvCheckForValidListAndQueue+0x60>)
 8019436:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019438:	4b07      	ldr	r3, [pc, #28]	; (8019458 <prvCheckForValidListAndQueue+0x60>)
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d005      	beq.n	801944c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019440:	4b05      	ldr	r3, [pc, #20]	; (8019458 <prvCheckForValidListAndQueue+0x60>)
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	490b      	ldr	r1, [pc, #44]	; (8019474 <prvCheckForValidListAndQueue+0x7c>)
 8019446:	4618      	mov	r0, r3
 8019448:	f7fe fca0 	bl	8017d8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801944c:	f000 f992 	bl	8019774 <vPortExitCritical>
}
 8019450:	bf00      	nop
 8019452:	46bd      	mov	sp, r7
 8019454:	bd80      	pop	{r7, pc}
 8019456:	bf00      	nop
 8019458:	24002be8 	.word	0x24002be8
 801945c:	24002bb8 	.word	0x24002bb8
 8019460:	24002bcc 	.word	0x24002bcc
 8019464:	24002be0 	.word	0x24002be0
 8019468:	24002be4 	.word	0x24002be4
 801946c:	24002c94 	.word	0x24002c94
 8019470:	24002bf4 	.word	0x24002bf4
 8019474:	0801aa20 	.word	0x0801aa20

08019478 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019478:	b580      	push	{r7, lr}
 801947a:	b08a      	sub	sp, #40	; 0x28
 801947c:	af00      	add	r7, sp, #0
 801947e:	60f8      	str	r0, [r7, #12]
 8019480:	60b9      	str	r1, [r7, #8]
 8019482:	607a      	str	r2, [r7, #4]
 8019484:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019486:	f06f 0301 	mvn.w	r3, #1
 801948a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801948c:	68fb      	ldr	r3, [r7, #12]
 801948e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019490:	68bb      	ldr	r3, [r7, #8]
 8019492:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019498:	4b06      	ldr	r3, [pc, #24]	; (80194b4 <xTimerPendFunctionCallFromISR+0x3c>)
 801949a:	6818      	ldr	r0, [r3, #0]
 801949c:	f107 0114 	add.w	r1, r7, #20
 80194a0:	2300      	movs	r3, #0
 80194a2:	683a      	ldr	r2, [r7, #0]
 80194a4:	f7fe f9e6 	bl	8017874 <xQueueGenericSendFromISR>
 80194a8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80194aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80194ac:	4618      	mov	r0, r3
 80194ae:	3728      	adds	r7, #40	; 0x28
 80194b0:	46bd      	mov	sp, r7
 80194b2:	bd80      	pop	{r7, pc}
 80194b4:	24002be8 	.word	0x24002be8

080194b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80194b8:	b480      	push	{r7}
 80194ba:	b085      	sub	sp, #20
 80194bc:	af00      	add	r7, sp, #0
 80194be:	60f8      	str	r0, [r7, #12]
 80194c0:	60b9      	str	r1, [r7, #8]
 80194c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	3b04      	subs	r3, #4
 80194c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80194ca:	68fb      	ldr	r3, [r7, #12]
 80194cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80194d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	3b04      	subs	r3, #4
 80194d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	f023 0201 	bic.w	r2, r3, #1
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	3b04      	subs	r3, #4
 80194e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80194e8:	4a0c      	ldr	r2, [pc, #48]	; (801951c <pxPortInitialiseStack+0x64>)
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	3b14      	subs	r3, #20
 80194f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80194f4:	687a      	ldr	r2, [r7, #4]
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	3b04      	subs	r3, #4
 80194fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	f06f 0202 	mvn.w	r2, #2
 8019506:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	3b20      	subs	r3, #32
 801950c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801950e:	68fb      	ldr	r3, [r7, #12]
}
 8019510:	4618      	mov	r0, r3
 8019512:	3714      	adds	r7, #20
 8019514:	46bd      	mov	sp, r7
 8019516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951a:	4770      	bx	lr
 801951c:	08019521 	.word	0x08019521

08019520 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019520:	b480      	push	{r7}
 8019522:	b085      	sub	sp, #20
 8019524:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019526:	2300      	movs	r3, #0
 8019528:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801952a:	4b12      	ldr	r3, [pc, #72]	; (8019574 <prvTaskExitError+0x54>)
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019532:	d00a      	beq.n	801954a <prvTaskExitError+0x2a>
	__asm volatile
 8019534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019538:	f383 8811 	msr	BASEPRI, r3
 801953c:	f3bf 8f6f 	isb	sy
 8019540:	f3bf 8f4f 	dsb	sy
 8019544:	60fb      	str	r3, [r7, #12]
}
 8019546:	bf00      	nop
 8019548:	e7fe      	b.n	8019548 <prvTaskExitError+0x28>
	__asm volatile
 801954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801954e:	f383 8811 	msr	BASEPRI, r3
 8019552:	f3bf 8f6f 	isb	sy
 8019556:	f3bf 8f4f 	dsb	sy
 801955a:	60bb      	str	r3, [r7, #8]
}
 801955c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801955e:	bf00      	nop
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d0fc      	beq.n	8019560 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019566:	bf00      	nop
 8019568:	bf00      	nop
 801956a:	3714      	adds	r7, #20
 801956c:	46bd      	mov	sp, r7
 801956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019572:	4770      	bx	lr
 8019574:	240000a0 	.word	0x240000a0
	...

08019580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019580:	4b07      	ldr	r3, [pc, #28]	; (80195a0 <pxCurrentTCBConst2>)
 8019582:	6819      	ldr	r1, [r3, #0]
 8019584:	6808      	ldr	r0, [r1, #0]
 8019586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801958a:	f380 8809 	msr	PSP, r0
 801958e:	f3bf 8f6f 	isb	sy
 8019592:	f04f 0000 	mov.w	r0, #0
 8019596:	f380 8811 	msr	BASEPRI, r0
 801959a:	4770      	bx	lr
 801959c:	f3af 8000 	nop.w

080195a0 <pxCurrentTCBConst2>:
 80195a0:	240026b8 	.word	0x240026b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80195a4:	bf00      	nop
 80195a6:	bf00      	nop

080195a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80195a8:	4808      	ldr	r0, [pc, #32]	; (80195cc <prvPortStartFirstTask+0x24>)
 80195aa:	6800      	ldr	r0, [r0, #0]
 80195ac:	6800      	ldr	r0, [r0, #0]
 80195ae:	f380 8808 	msr	MSP, r0
 80195b2:	f04f 0000 	mov.w	r0, #0
 80195b6:	f380 8814 	msr	CONTROL, r0
 80195ba:	b662      	cpsie	i
 80195bc:	b661      	cpsie	f
 80195be:	f3bf 8f4f 	dsb	sy
 80195c2:	f3bf 8f6f 	isb	sy
 80195c6:	df00      	svc	0
 80195c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80195ca:	bf00      	nop
 80195cc:	e000ed08 	.word	0xe000ed08

080195d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b086      	sub	sp, #24
 80195d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80195d6:	4b46      	ldr	r3, [pc, #280]	; (80196f0 <xPortStartScheduler+0x120>)
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	4a46      	ldr	r2, [pc, #280]	; (80196f4 <xPortStartScheduler+0x124>)
 80195dc:	4293      	cmp	r3, r2
 80195de:	d10a      	bne.n	80195f6 <xPortStartScheduler+0x26>
	__asm volatile
 80195e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195e4:	f383 8811 	msr	BASEPRI, r3
 80195e8:	f3bf 8f6f 	isb	sy
 80195ec:	f3bf 8f4f 	dsb	sy
 80195f0:	613b      	str	r3, [r7, #16]
}
 80195f2:	bf00      	nop
 80195f4:	e7fe      	b.n	80195f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80195f6:	4b3e      	ldr	r3, [pc, #248]	; (80196f0 <xPortStartScheduler+0x120>)
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	4a3f      	ldr	r2, [pc, #252]	; (80196f8 <xPortStartScheduler+0x128>)
 80195fc:	4293      	cmp	r3, r2
 80195fe:	d10a      	bne.n	8019616 <xPortStartScheduler+0x46>
	__asm volatile
 8019600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019604:	f383 8811 	msr	BASEPRI, r3
 8019608:	f3bf 8f6f 	isb	sy
 801960c:	f3bf 8f4f 	dsb	sy
 8019610:	60fb      	str	r3, [r7, #12]
}
 8019612:	bf00      	nop
 8019614:	e7fe      	b.n	8019614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019616:	4b39      	ldr	r3, [pc, #228]	; (80196fc <xPortStartScheduler+0x12c>)
 8019618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801961a:	697b      	ldr	r3, [r7, #20]
 801961c:	781b      	ldrb	r3, [r3, #0]
 801961e:	b2db      	uxtb	r3, r3
 8019620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019622:	697b      	ldr	r3, [r7, #20]
 8019624:	22ff      	movs	r2, #255	; 0xff
 8019626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019628:	697b      	ldr	r3, [r7, #20]
 801962a:	781b      	ldrb	r3, [r3, #0]
 801962c:	b2db      	uxtb	r3, r3
 801962e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019630:	78fb      	ldrb	r3, [r7, #3]
 8019632:	b2db      	uxtb	r3, r3
 8019634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019638:	b2da      	uxtb	r2, r3
 801963a:	4b31      	ldr	r3, [pc, #196]	; (8019700 <xPortStartScheduler+0x130>)
 801963c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801963e:	4b31      	ldr	r3, [pc, #196]	; (8019704 <xPortStartScheduler+0x134>)
 8019640:	2207      	movs	r2, #7
 8019642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019644:	e009      	b.n	801965a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019646:	4b2f      	ldr	r3, [pc, #188]	; (8019704 <xPortStartScheduler+0x134>)
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	3b01      	subs	r3, #1
 801964c:	4a2d      	ldr	r2, [pc, #180]	; (8019704 <xPortStartScheduler+0x134>)
 801964e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019650:	78fb      	ldrb	r3, [r7, #3]
 8019652:	b2db      	uxtb	r3, r3
 8019654:	005b      	lsls	r3, r3, #1
 8019656:	b2db      	uxtb	r3, r3
 8019658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801965a:	78fb      	ldrb	r3, [r7, #3]
 801965c:	b2db      	uxtb	r3, r3
 801965e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019662:	2b80      	cmp	r3, #128	; 0x80
 8019664:	d0ef      	beq.n	8019646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019666:	4b27      	ldr	r3, [pc, #156]	; (8019704 <xPortStartScheduler+0x134>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	f1c3 0307 	rsb	r3, r3, #7
 801966e:	2b04      	cmp	r3, #4
 8019670:	d00a      	beq.n	8019688 <xPortStartScheduler+0xb8>
	__asm volatile
 8019672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019676:	f383 8811 	msr	BASEPRI, r3
 801967a:	f3bf 8f6f 	isb	sy
 801967e:	f3bf 8f4f 	dsb	sy
 8019682:	60bb      	str	r3, [r7, #8]
}
 8019684:	bf00      	nop
 8019686:	e7fe      	b.n	8019686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019688:	4b1e      	ldr	r3, [pc, #120]	; (8019704 <xPortStartScheduler+0x134>)
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	021b      	lsls	r3, r3, #8
 801968e:	4a1d      	ldr	r2, [pc, #116]	; (8019704 <xPortStartScheduler+0x134>)
 8019690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019692:	4b1c      	ldr	r3, [pc, #112]	; (8019704 <xPortStartScheduler+0x134>)
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801969a:	4a1a      	ldr	r2, [pc, #104]	; (8019704 <xPortStartScheduler+0x134>)
 801969c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	b2da      	uxtb	r2, r3
 80196a2:	697b      	ldr	r3, [r7, #20]
 80196a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80196a6:	4b18      	ldr	r3, [pc, #96]	; (8019708 <xPortStartScheduler+0x138>)
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	4a17      	ldr	r2, [pc, #92]	; (8019708 <xPortStartScheduler+0x138>)
 80196ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80196b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80196b2:	4b15      	ldr	r3, [pc, #84]	; (8019708 <xPortStartScheduler+0x138>)
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	4a14      	ldr	r2, [pc, #80]	; (8019708 <xPortStartScheduler+0x138>)
 80196b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80196bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80196be:	f000 f8dd 	bl	801987c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80196c2:	4b12      	ldr	r3, [pc, #72]	; (801970c <xPortStartScheduler+0x13c>)
 80196c4:	2200      	movs	r2, #0
 80196c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80196c8:	f000 f8fc 	bl	80198c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80196cc:	4b10      	ldr	r3, [pc, #64]	; (8019710 <xPortStartScheduler+0x140>)
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	4a0f      	ldr	r2, [pc, #60]	; (8019710 <xPortStartScheduler+0x140>)
 80196d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80196d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80196d8:	f7ff ff66 	bl	80195a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80196dc:	f7fe ff6e 	bl	80185bc <vTaskSwitchContext>
	prvTaskExitError();
 80196e0:	f7ff ff1e 	bl	8019520 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80196e4:	2300      	movs	r3, #0
}
 80196e6:	4618      	mov	r0, r3
 80196e8:	3718      	adds	r7, #24
 80196ea:	46bd      	mov	sp, r7
 80196ec:	bd80      	pop	{r7, pc}
 80196ee:	bf00      	nop
 80196f0:	e000ed00 	.word	0xe000ed00
 80196f4:	410fc271 	.word	0x410fc271
 80196f8:	410fc270 	.word	0x410fc270
 80196fc:	e000e400 	.word	0xe000e400
 8019700:	24002ce4 	.word	0x24002ce4
 8019704:	24002ce8 	.word	0x24002ce8
 8019708:	e000ed20 	.word	0xe000ed20
 801970c:	240000a0 	.word	0x240000a0
 8019710:	e000ef34 	.word	0xe000ef34

08019714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019714:	b480      	push	{r7}
 8019716:	b083      	sub	sp, #12
 8019718:	af00      	add	r7, sp, #0
	__asm volatile
 801971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801971e:	f383 8811 	msr	BASEPRI, r3
 8019722:	f3bf 8f6f 	isb	sy
 8019726:	f3bf 8f4f 	dsb	sy
 801972a:	607b      	str	r3, [r7, #4]
}
 801972c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801972e:	4b0f      	ldr	r3, [pc, #60]	; (801976c <vPortEnterCritical+0x58>)
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	3301      	adds	r3, #1
 8019734:	4a0d      	ldr	r2, [pc, #52]	; (801976c <vPortEnterCritical+0x58>)
 8019736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019738:	4b0c      	ldr	r3, [pc, #48]	; (801976c <vPortEnterCritical+0x58>)
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	2b01      	cmp	r3, #1
 801973e:	d10f      	bne.n	8019760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019740:	4b0b      	ldr	r3, [pc, #44]	; (8019770 <vPortEnterCritical+0x5c>)
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	b2db      	uxtb	r3, r3
 8019746:	2b00      	cmp	r3, #0
 8019748:	d00a      	beq.n	8019760 <vPortEnterCritical+0x4c>
	__asm volatile
 801974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801974e:	f383 8811 	msr	BASEPRI, r3
 8019752:	f3bf 8f6f 	isb	sy
 8019756:	f3bf 8f4f 	dsb	sy
 801975a:	603b      	str	r3, [r7, #0]
}
 801975c:	bf00      	nop
 801975e:	e7fe      	b.n	801975e <vPortEnterCritical+0x4a>
	}
}
 8019760:	bf00      	nop
 8019762:	370c      	adds	r7, #12
 8019764:	46bd      	mov	sp, r7
 8019766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976a:	4770      	bx	lr
 801976c:	240000a0 	.word	0x240000a0
 8019770:	e000ed04 	.word	0xe000ed04

08019774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019774:	b480      	push	{r7}
 8019776:	b083      	sub	sp, #12
 8019778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801977a:	4b12      	ldr	r3, [pc, #72]	; (80197c4 <vPortExitCritical+0x50>)
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	2b00      	cmp	r3, #0
 8019780:	d10a      	bne.n	8019798 <vPortExitCritical+0x24>
	__asm volatile
 8019782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019786:	f383 8811 	msr	BASEPRI, r3
 801978a:	f3bf 8f6f 	isb	sy
 801978e:	f3bf 8f4f 	dsb	sy
 8019792:	607b      	str	r3, [r7, #4]
}
 8019794:	bf00      	nop
 8019796:	e7fe      	b.n	8019796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019798:	4b0a      	ldr	r3, [pc, #40]	; (80197c4 <vPortExitCritical+0x50>)
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	3b01      	subs	r3, #1
 801979e:	4a09      	ldr	r2, [pc, #36]	; (80197c4 <vPortExitCritical+0x50>)
 80197a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80197a2:	4b08      	ldr	r3, [pc, #32]	; (80197c4 <vPortExitCritical+0x50>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d105      	bne.n	80197b6 <vPortExitCritical+0x42>
 80197aa:	2300      	movs	r3, #0
 80197ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80197ae:	683b      	ldr	r3, [r7, #0]
 80197b0:	f383 8811 	msr	BASEPRI, r3
}
 80197b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80197b6:	bf00      	nop
 80197b8:	370c      	adds	r7, #12
 80197ba:	46bd      	mov	sp, r7
 80197bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c0:	4770      	bx	lr
 80197c2:	bf00      	nop
 80197c4:	240000a0 	.word	0x240000a0
	...

080197d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80197d0:	f3ef 8009 	mrs	r0, PSP
 80197d4:	f3bf 8f6f 	isb	sy
 80197d8:	4b15      	ldr	r3, [pc, #84]	; (8019830 <pxCurrentTCBConst>)
 80197da:	681a      	ldr	r2, [r3, #0]
 80197dc:	f01e 0f10 	tst.w	lr, #16
 80197e0:	bf08      	it	eq
 80197e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80197e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197ea:	6010      	str	r0, [r2, #0]
 80197ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80197f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80197f4:	f380 8811 	msr	BASEPRI, r0
 80197f8:	f3bf 8f4f 	dsb	sy
 80197fc:	f3bf 8f6f 	isb	sy
 8019800:	f7fe fedc 	bl	80185bc <vTaskSwitchContext>
 8019804:	f04f 0000 	mov.w	r0, #0
 8019808:	f380 8811 	msr	BASEPRI, r0
 801980c:	bc09      	pop	{r0, r3}
 801980e:	6819      	ldr	r1, [r3, #0]
 8019810:	6808      	ldr	r0, [r1, #0]
 8019812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019816:	f01e 0f10 	tst.w	lr, #16
 801981a:	bf08      	it	eq
 801981c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019820:	f380 8809 	msr	PSP, r0
 8019824:	f3bf 8f6f 	isb	sy
 8019828:	4770      	bx	lr
 801982a:	bf00      	nop
 801982c:	f3af 8000 	nop.w

08019830 <pxCurrentTCBConst>:
 8019830:	240026b8 	.word	0x240026b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019834:	bf00      	nop
 8019836:	bf00      	nop

08019838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b082      	sub	sp, #8
 801983c:	af00      	add	r7, sp, #0
	__asm volatile
 801983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019842:	f383 8811 	msr	BASEPRI, r3
 8019846:	f3bf 8f6f 	isb	sy
 801984a:	f3bf 8f4f 	dsb	sy
 801984e:	607b      	str	r3, [r7, #4]
}
 8019850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019852:	f7fe fdf1 	bl	8018438 <xTaskIncrementTick>
 8019856:	4603      	mov	r3, r0
 8019858:	2b00      	cmp	r3, #0
 801985a:	d003      	beq.n	8019864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801985c:	4b06      	ldr	r3, [pc, #24]	; (8019878 <xPortSysTickHandler+0x40>)
 801985e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019862:	601a      	str	r2, [r3, #0]
 8019864:	2300      	movs	r3, #0
 8019866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	f383 8811 	msr	BASEPRI, r3
}
 801986e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019870:	bf00      	nop
 8019872:	3708      	adds	r7, #8
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}
 8019878:	e000ed04 	.word	0xe000ed04

0801987c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801987c:	b480      	push	{r7}
 801987e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019880:	4b0b      	ldr	r3, [pc, #44]	; (80198b0 <vPortSetupTimerInterrupt+0x34>)
 8019882:	2200      	movs	r2, #0
 8019884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019886:	4b0b      	ldr	r3, [pc, #44]	; (80198b4 <vPortSetupTimerInterrupt+0x38>)
 8019888:	2200      	movs	r2, #0
 801988a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801988c:	4b0a      	ldr	r3, [pc, #40]	; (80198b8 <vPortSetupTimerInterrupt+0x3c>)
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	4a0a      	ldr	r2, [pc, #40]	; (80198bc <vPortSetupTimerInterrupt+0x40>)
 8019892:	fba2 2303 	umull	r2, r3, r2, r3
 8019896:	099b      	lsrs	r3, r3, #6
 8019898:	4a09      	ldr	r2, [pc, #36]	; (80198c0 <vPortSetupTimerInterrupt+0x44>)
 801989a:	3b01      	subs	r3, #1
 801989c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801989e:	4b04      	ldr	r3, [pc, #16]	; (80198b0 <vPortSetupTimerInterrupt+0x34>)
 80198a0:	2207      	movs	r2, #7
 80198a2:	601a      	str	r2, [r3, #0]
}
 80198a4:	bf00      	nop
 80198a6:	46bd      	mov	sp, r7
 80198a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ac:	4770      	bx	lr
 80198ae:	bf00      	nop
 80198b0:	e000e010 	.word	0xe000e010
 80198b4:	e000e018 	.word	0xe000e018
 80198b8:	24000090 	.word	0x24000090
 80198bc:	10624dd3 	.word	0x10624dd3
 80198c0:	e000e014 	.word	0xe000e014

080198c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80198c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80198d4 <vPortEnableVFP+0x10>
 80198c8:	6801      	ldr	r1, [r0, #0]
 80198ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80198ce:	6001      	str	r1, [r0, #0]
 80198d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80198d2:	bf00      	nop
 80198d4:	e000ed88 	.word	0xe000ed88

080198d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80198d8:	b480      	push	{r7}
 80198da:	b085      	sub	sp, #20
 80198dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80198de:	f3ef 8305 	mrs	r3, IPSR
 80198e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	2b0f      	cmp	r3, #15
 80198e8:	d914      	bls.n	8019914 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80198ea:	4a17      	ldr	r2, [pc, #92]	; (8019948 <vPortValidateInterruptPriority+0x70>)
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	4413      	add	r3, r2
 80198f0:	781b      	ldrb	r3, [r3, #0]
 80198f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80198f4:	4b15      	ldr	r3, [pc, #84]	; (801994c <vPortValidateInterruptPriority+0x74>)
 80198f6:	781b      	ldrb	r3, [r3, #0]
 80198f8:	7afa      	ldrb	r2, [r7, #11]
 80198fa:	429a      	cmp	r2, r3
 80198fc:	d20a      	bcs.n	8019914 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80198fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019902:	f383 8811 	msr	BASEPRI, r3
 8019906:	f3bf 8f6f 	isb	sy
 801990a:	f3bf 8f4f 	dsb	sy
 801990e:	607b      	str	r3, [r7, #4]
}
 8019910:	bf00      	nop
 8019912:	e7fe      	b.n	8019912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019914:	4b0e      	ldr	r3, [pc, #56]	; (8019950 <vPortValidateInterruptPriority+0x78>)
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801991c:	4b0d      	ldr	r3, [pc, #52]	; (8019954 <vPortValidateInterruptPriority+0x7c>)
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	429a      	cmp	r2, r3
 8019922:	d90a      	bls.n	801993a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019928:	f383 8811 	msr	BASEPRI, r3
 801992c:	f3bf 8f6f 	isb	sy
 8019930:	f3bf 8f4f 	dsb	sy
 8019934:	603b      	str	r3, [r7, #0]
}
 8019936:	bf00      	nop
 8019938:	e7fe      	b.n	8019938 <vPortValidateInterruptPriority+0x60>
	}
 801993a:	bf00      	nop
 801993c:	3714      	adds	r7, #20
 801993e:	46bd      	mov	sp, r7
 8019940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019944:	4770      	bx	lr
 8019946:	bf00      	nop
 8019948:	e000e3f0 	.word	0xe000e3f0
 801994c:	24002ce4 	.word	0x24002ce4
 8019950:	e000ed0c 	.word	0xe000ed0c
 8019954:	24002ce8 	.word	0x24002ce8

08019958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b08a      	sub	sp, #40	; 0x28
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019960:	2300      	movs	r3, #0
 8019962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019964:	f7fe fcac 	bl	80182c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019968:	4b5b      	ldr	r3, [pc, #364]	; (8019ad8 <pvPortMalloc+0x180>)
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d101      	bne.n	8019974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019970:	f000 f920 	bl	8019bb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019974:	4b59      	ldr	r3, [pc, #356]	; (8019adc <pvPortMalloc+0x184>)
 8019976:	681a      	ldr	r2, [r3, #0]
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	4013      	ands	r3, r2
 801997c:	2b00      	cmp	r3, #0
 801997e:	f040 8093 	bne.w	8019aa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d01d      	beq.n	80199c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019988:	2208      	movs	r2, #8
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	4413      	add	r3, r2
 801998e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	f003 0307 	and.w	r3, r3, #7
 8019996:	2b00      	cmp	r3, #0
 8019998:	d014      	beq.n	80199c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	f023 0307 	bic.w	r3, r3, #7
 80199a0:	3308      	adds	r3, #8
 80199a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	f003 0307 	and.w	r3, r3, #7
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d00a      	beq.n	80199c4 <pvPortMalloc+0x6c>
	__asm volatile
 80199ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199b2:	f383 8811 	msr	BASEPRI, r3
 80199b6:	f3bf 8f6f 	isb	sy
 80199ba:	f3bf 8f4f 	dsb	sy
 80199be:	617b      	str	r3, [r7, #20]
}
 80199c0:	bf00      	nop
 80199c2:	e7fe      	b.n	80199c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d06e      	beq.n	8019aa8 <pvPortMalloc+0x150>
 80199ca:	4b45      	ldr	r3, [pc, #276]	; (8019ae0 <pvPortMalloc+0x188>)
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	687a      	ldr	r2, [r7, #4]
 80199d0:	429a      	cmp	r2, r3
 80199d2:	d869      	bhi.n	8019aa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80199d4:	4b43      	ldr	r3, [pc, #268]	; (8019ae4 <pvPortMalloc+0x18c>)
 80199d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80199d8:	4b42      	ldr	r3, [pc, #264]	; (8019ae4 <pvPortMalloc+0x18c>)
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80199de:	e004      	b.n	80199ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80199e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80199e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80199ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ec:	685b      	ldr	r3, [r3, #4]
 80199ee:	687a      	ldr	r2, [r7, #4]
 80199f0:	429a      	cmp	r2, r3
 80199f2:	d903      	bls.n	80199fc <pvPortMalloc+0xa4>
 80199f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d1f1      	bne.n	80199e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80199fc:	4b36      	ldr	r3, [pc, #216]	; (8019ad8 <pvPortMalloc+0x180>)
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a02:	429a      	cmp	r2, r3
 8019a04:	d050      	beq.n	8019aa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019a06:	6a3b      	ldr	r3, [r7, #32]
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	2208      	movs	r2, #8
 8019a0c:	4413      	add	r3, r2
 8019a0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a12:	681a      	ldr	r2, [r3, #0]
 8019a14:	6a3b      	ldr	r3, [r7, #32]
 8019a16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a1a:	685a      	ldr	r2, [r3, #4]
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	1ad2      	subs	r2, r2, r3
 8019a20:	2308      	movs	r3, #8
 8019a22:	005b      	lsls	r3, r3, #1
 8019a24:	429a      	cmp	r2, r3
 8019a26:	d91f      	bls.n	8019a68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	4413      	add	r3, r2
 8019a2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019a30:	69bb      	ldr	r3, [r7, #24]
 8019a32:	f003 0307 	and.w	r3, r3, #7
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d00a      	beq.n	8019a50 <pvPortMalloc+0xf8>
	__asm volatile
 8019a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a3e:	f383 8811 	msr	BASEPRI, r3
 8019a42:	f3bf 8f6f 	isb	sy
 8019a46:	f3bf 8f4f 	dsb	sy
 8019a4a:	613b      	str	r3, [r7, #16]
}
 8019a4c:	bf00      	nop
 8019a4e:	e7fe      	b.n	8019a4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a52:	685a      	ldr	r2, [r3, #4]
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	1ad2      	subs	r2, r2, r3
 8019a58:	69bb      	ldr	r3, [r7, #24]
 8019a5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a5e:	687a      	ldr	r2, [r7, #4]
 8019a60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019a62:	69b8      	ldr	r0, [r7, #24]
 8019a64:	f000 f908 	bl	8019c78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019a68:	4b1d      	ldr	r3, [pc, #116]	; (8019ae0 <pvPortMalloc+0x188>)
 8019a6a:	681a      	ldr	r2, [r3, #0]
 8019a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a6e:	685b      	ldr	r3, [r3, #4]
 8019a70:	1ad3      	subs	r3, r2, r3
 8019a72:	4a1b      	ldr	r2, [pc, #108]	; (8019ae0 <pvPortMalloc+0x188>)
 8019a74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019a76:	4b1a      	ldr	r3, [pc, #104]	; (8019ae0 <pvPortMalloc+0x188>)
 8019a78:	681a      	ldr	r2, [r3, #0]
 8019a7a:	4b1b      	ldr	r3, [pc, #108]	; (8019ae8 <pvPortMalloc+0x190>)
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	429a      	cmp	r2, r3
 8019a80:	d203      	bcs.n	8019a8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019a82:	4b17      	ldr	r3, [pc, #92]	; (8019ae0 <pvPortMalloc+0x188>)
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	4a18      	ldr	r2, [pc, #96]	; (8019ae8 <pvPortMalloc+0x190>)
 8019a88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a8c:	685a      	ldr	r2, [r3, #4]
 8019a8e:	4b13      	ldr	r3, [pc, #76]	; (8019adc <pvPortMalloc+0x184>)
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	431a      	orrs	r2, r3
 8019a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a9a:	2200      	movs	r2, #0
 8019a9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019a9e:	4b13      	ldr	r3, [pc, #76]	; (8019aec <pvPortMalloc+0x194>)
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	3301      	adds	r3, #1
 8019aa4:	4a11      	ldr	r2, [pc, #68]	; (8019aec <pvPortMalloc+0x194>)
 8019aa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019aa8:	f7fe fc18 	bl	80182dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019aac:	69fb      	ldr	r3, [r7, #28]
 8019aae:	f003 0307 	and.w	r3, r3, #7
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d00a      	beq.n	8019acc <pvPortMalloc+0x174>
	__asm volatile
 8019ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aba:	f383 8811 	msr	BASEPRI, r3
 8019abe:	f3bf 8f6f 	isb	sy
 8019ac2:	f3bf 8f4f 	dsb	sy
 8019ac6:	60fb      	str	r3, [r7, #12]
}
 8019ac8:	bf00      	nop
 8019aca:	e7fe      	b.n	8019aca <pvPortMalloc+0x172>
	return pvReturn;
 8019acc:	69fb      	ldr	r3, [r7, #28]
}
 8019ace:	4618      	mov	r0, r3
 8019ad0:	3728      	adds	r7, #40	; 0x28
 8019ad2:	46bd      	mov	sp, r7
 8019ad4:	bd80      	pop	{r7, pc}
 8019ad6:	bf00      	nop
 8019ad8:	240068f4 	.word	0x240068f4
 8019adc:	24006908 	.word	0x24006908
 8019ae0:	240068f8 	.word	0x240068f8
 8019ae4:	240068ec 	.word	0x240068ec
 8019ae8:	240068fc 	.word	0x240068fc
 8019aec:	24006900 	.word	0x24006900

08019af0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b086      	sub	sp, #24
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d04d      	beq.n	8019b9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019b02:	2308      	movs	r3, #8
 8019b04:	425b      	negs	r3, r3
 8019b06:	697a      	ldr	r2, [r7, #20]
 8019b08:	4413      	add	r3, r2
 8019b0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019b0c:	697b      	ldr	r3, [r7, #20]
 8019b0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019b10:	693b      	ldr	r3, [r7, #16]
 8019b12:	685a      	ldr	r2, [r3, #4]
 8019b14:	4b24      	ldr	r3, [pc, #144]	; (8019ba8 <vPortFree+0xb8>)
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	4013      	ands	r3, r2
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d10a      	bne.n	8019b34 <vPortFree+0x44>
	__asm volatile
 8019b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b22:	f383 8811 	msr	BASEPRI, r3
 8019b26:	f3bf 8f6f 	isb	sy
 8019b2a:	f3bf 8f4f 	dsb	sy
 8019b2e:	60fb      	str	r3, [r7, #12]
}
 8019b30:	bf00      	nop
 8019b32:	e7fe      	b.n	8019b32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019b34:	693b      	ldr	r3, [r7, #16]
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d00a      	beq.n	8019b52 <vPortFree+0x62>
	__asm volatile
 8019b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b40:	f383 8811 	msr	BASEPRI, r3
 8019b44:	f3bf 8f6f 	isb	sy
 8019b48:	f3bf 8f4f 	dsb	sy
 8019b4c:	60bb      	str	r3, [r7, #8]
}
 8019b4e:	bf00      	nop
 8019b50:	e7fe      	b.n	8019b50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019b52:	693b      	ldr	r3, [r7, #16]
 8019b54:	685a      	ldr	r2, [r3, #4]
 8019b56:	4b14      	ldr	r3, [pc, #80]	; (8019ba8 <vPortFree+0xb8>)
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	4013      	ands	r3, r2
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d01e      	beq.n	8019b9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019b60:	693b      	ldr	r3, [r7, #16]
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d11a      	bne.n	8019b9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019b68:	693b      	ldr	r3, [r7, #16]
 8019b6a:	685a      	ldr	r2, [r3, #4]
 8019b6c:	4b0e      	ldr	r3, [pc, #56]	; (8019ba8 <vPortFree+0xb8>)
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	43db      	mvns	r3, r3
 8019b72:	401a      	ands	r2, r3
 8019b74:	693b      	ldr	r3, [r7, #16]
 8019b76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019b78:	f7fe fba2 	bl	80182c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019b7c:	693b      	ldr	r3, [r7, #16]
 8019b7e:	685a      	ldr	r2, [r3, #4]
 8019b80:	4b0a      	ldr	r3, [pc, #40]	; (8019bac <vPortFree+0xbc>)
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	4413      	add	r3, r2
 8019b86:	4a09      	ldr	r2, [pc, #36]	; (8019bac <vPortFree+0xbc>)
 8019b88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019b8a:	6938      	ldr	r0, [r7, #16]
 8019b8c:	f000 f874 	bl	8019c78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019b90:	4b07      	ldr	r3, [pc, #28]	; (8019bb0 <vPortFree+0xc0>)
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	3301      	adds	r3, #1
 8019b96:	4a06      	ldr	r2, [pc, #24]	; (8019bb0 <vPortFree+0xc0>)
 8019b98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019b9a:	f7fe fb9f 	bl	80182dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019b9e:	bf00      	nop
 8019ba0:	3718      	adds	r7, #24
 8019ba2:	46bd      	mov	sp, r7
 8019ba4:	bd80      	pop	{r7, pc}
 8019ba6:	bf00      	nop
 8019ba8:	24006908 	.word	0x24006908
 8019bac:	240068f8 	.word	0x240068f8
 8019bb0:	24006904 	.word	0x24006904

08019bb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019bb4:	b480      	push	{r7}
 8019bb6:	b085      	sub	sp, #20
 8019bb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019bba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019bbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019bc0:	4b27      	ldr	r3, [pc, #156]	; (8019c60 <prvHeapInit+0xac>)
 8019bc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	f003 0307 	and.w	r3, r3, #7
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d00c      	beq.n	8019be8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019bce:	68fb      	ldr	r3, [r7, #12]
 8019bd0:	3307      	adds	r3, #7
 8019bd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	f023 0307 	bic.w	r3, r3, #7
 8019bda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019bdc:	68ba      	ldr	r2, [r7, #8]
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	1ad3      	subs	r3, r2, r3
 8019be2:	4a1f      	ldr	r2, [pc, #124]	; (8019c60 <prvHeapInit+0xac>)
 8019be4:	4413      	add	r3, r2
 8019be6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019bec:	4a1d      	ldr	r2, [pc, #116]	; (8019c64 <prvHeapInit+0xb0>)
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019bf2:	4b1c      	ldr	r3, [pc, #112]	; (8019c64 <prvHeapInit+0xb0>)
 8019bf4:	2200      	movs	r2, #0
 8019bf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	68ba      	ldr	r2, [r7, #8]
 8019bfc:	4413      	add	r3, r2
 8019bfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019c00:	2208      	movs	r2, #8
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	1a9b      	subs	r3, r3, r2
 8019c06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	f023 0307 	bic.w	r3, r3, #7
 8019c0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	4a15      	ldr	r2, [pc, #84]	; (8019c68 <prvHeapInit+0xb4>)
 8019c14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019c16:	4b14      	ldr	r3, [pc, #80]	; (8019c68 <prvHeapInit+0xb4>)
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	2200      	movs	r2, #0
 8019c1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019c1e:	4b12      	ldr	r3, [pc, #72]	; (8019c68 <prvHeapInit+0xb4>)
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	2200      	movs	r2, #0
 8019c24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019c2a:	683b      	ldr	r3, [r7, #0]
 8019c2c:	68fa      	ldr	r2, [r7, #12]
 8019c2e:	1ad2      	subs	r2, r2, r3
 8019c30:	683b      	ldr	r3, [r7, #0]
 8019c32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019c34:	4b0c      	ldr	r3, [pc, #48]	; (8019c68 <prvHeapInit+0xb4>)
 8019c36:	681a      	ldr	r2, [r3, #0]
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019c3c:	683b      	ldr	r3, [r7, #0]
 8019c3e:	685b      	ldr	r3, [r3, #4]
 8019c40:	4a0a      	ldr	r2, [pc, #40]	; (8019c6c <prvHeapInit+0xb8>)
 8019c42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019c44:	683b      	ldr	r3, [r7, #0]
 8019c46:	685b      	ldr	r3, [r3, #4]
 8019c48:	4a09      	ldr	r2, [pc, #36]	; (8019c70 <prvHeapInit+0xbc>)
 8019c4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019c4c:	4b09      	ldr	r3, [pc, #36]	; (8019c74 <prvHeapInit+0xc0>)
 8019c4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019c52:	601a      	str	r2, [r3, #0]
}
 8019c54:	bf00      	nop
 8019c56:	3714      	adds	r7, #20
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c5e:	4770      	bx	lr
 8019c60:	24002cec 	.word	0x24002cec
 8019c64:	240068ec 	.word	0x240068ec
 8019c68:	240068f4 	.word	0x240068f4
 8019c6c:	240068fc 	.word	0x240068fc
 8019c70:	240068f8 	.word	0x240068f8
 8019c74:	24006908 	.word	0x24006908

08019c78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019c78:	b480      	push	{r7}
 8019c7a:	b085      	sub	sp, #20
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019c80:	4b28      	ldr	r3, [pc, #160]	; (8019d24 <prvInsertBlockIntoFreeList+0xac>)
 8019c82:	60fb      	str	r3, [r7, #12]
 8019c84:	e002      	b.n	8019c8c <prvInsertBlockIntoFreeList+0x14>
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	60fb      	str	r3, [r7, #12]
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	687a      	ldr	r2, [r7, #4]
 8019c92:	429a      	cmp	r2, r3
 8019c94:	d8f7      	bhi.n	8019c86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	685b      	ldr	r3, [r3, #4]
 8019c9e:	68ba      	ldr	r2, [r7, #8]
 8019ca0:	4413      	add	r3, r2
 8019ca2:	687a      	ldr	r2, [r7, #4]
 8019ca4:	429a      	cmp	r2, r3
 8019ca6:	d108      	bne.n	8019cba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	685a      	ldr	r2, [r3, #4]
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	685b      	ldr	r3, [r3, #4]
 8019cb0:	441a      	add	r2, r3
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	685b      	ldr	r3, [r3, #4]
 8019cc2:	68ba      	ldr	r2, [r7, #8]
 8019cc4:	441a      	add	r2, r3
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	429a      	cmp	r2, r3
 8019ccc:	d118      	bne.n	8019d00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	681a      	ldr	r2, [r3, #0]
 8019cd2:	4b15      	ldr	r3, [pc, #84]	; (8019d28 <prvInsertBlockIntoFreeList+0xb0>)
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	429a      	cmp	r2, r3
 8019cd8:	d00d      	beq.n	8019cf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	685a      	ldr	r2, [r3, #4]
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	685b      	ldr	r3, [r3, #4]
 8019ce4:	441a      	add	r2, r3
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	681a      	ldr	r2, [r3, #0]
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	601a      	str	r2, [r3, #0]
 8019cf4:	e008      	b.n	8019d08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019cf6:	4b0c      	ldr	r3, [pc, #48]	; (8019d28 <prvInsertBlockIntoFreeList+0xb0>)
 8019cf8:	681a      	ldr	r2, [r3, #0]
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	601a      	str	r2, [r3, #0]
 8019cfe:	e003      	b.n	8019d08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	681a      	ldr	r2, [r3, #0]
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019d08:	68fa      	ldr	r2, [r7, #12]
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	429a      	cmp	r2, r3
 8019d0e:	d002      	beq.n	8019d16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	687a      	ldr	r2, [r7, #4]
 8019d14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019d16:	bf00      	nop
 8019d18:	3714      	adds	r7, #20
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d20:	4770      	bx	lr
 8019d22:	bf00      	nop
 8019d24:	240068ec 	.word	0x240068ec
 8019d28:	240068f4 	.word	0x240068f4

08019d2c <__errno>:
 8019d2c:	4b01      	ldr	r3, [pc, #4]	; (8019d34 <__errno+0x8>)
 8019d2e:	6818      	ldr	r0, [r3, #0]
 8019d30:	4770      	bx	lr
 8019d32:	bf00      	nop
 8019d34:	240000a4 	.word	0x240000a4

08019d38 <__libc_init_array>:
 8019d38:	b570      	push	{r4, r5, r6, lr}
 8019d3a:	4d0d      	ldr	r5, [pc, #52]	; (8019d70 <__libc_init_array+0x38>)
 8019d3c:	4c0d      	ldr	r4, [pc, #52]	; (8019d74 <__libc_init_array+0x3c>)
 8019d3e:	1b64      	subs	r4, r4, r5
 8019d40:	10a4      	asrs	r4, r4, #2
 8019d42:	2600      	movs	r6, #0
 8019d44:	42a6      	cmp	r6, r4
 8019d46:	d109      	bne.n	8019d5c <__libc_init_array+0x24>
 8019d48:	4d0b      	ldr	r5, [pc, #44]	; (8019d78 <__libc_init_array+0x40>)
 8019d4a:	4c0c      	ldr	r4, [pc, #48]	; (8019d7c <__libc_init_array+0x44>)
 8019d4c:	f000 fd2c 	bl	801a7a8 <_init>
 8019d50:	1b64      	subs	r4, r4, r5
 8019d52:	10a4      	asrs	r4, r4, #2
 8019d54:	2600      	movs	r6, #0
 8019d56:	42a6      	cmp	r6, r4
 8019d58:	d105      	bne.n	8019d66 <__libc_init_array+0x2e>
 8019d5a:	bd70      	pop	{r4, r5, r6, pc}
 8019d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d60:	4798      	blx	r3
 8019d62:	3601      	adds	r6, #1
 8019d64:	e7ee      	b.n	8019d44 <__libc_init_array+0xc>
 8019d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d6a:	4798      	blx	r3
 8019d6c:	3601      	adds	r6, #1
 8019d6e:	e7f2      	b.n	8019d56 <__libc_init_array+0x1e>
 8019d70:	0801ac60 	.word	0x0801ac60
 8019d74:	0801ac60 	.word	0x0801ac60
 8019d78:	0801ac60 	.word	0x0801ac60
 8019d7c:	0801ac64 	.word	0x0801ac64

08019d80 <memcpy>:
 8019d80:	440a      	add	r2, r1
 8019d82:	4291      	cmp	r1, r2
 8019d84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019d88:	d100      	bne.n	8019d8c <memcpy+0xc>
 8019d8a:	4770      	bx	lr
 8019d8c:	b510      	push	{r4, lr}
 8019d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d96:	4291      	cmp	r1, r2
 8019d98:	d1f9      	bne.n	8019d8e <memcpy+0xe>
 8019d9a:	bd10      	pop	{r4, pc}

08019d9c <memset>:
 8019d9c:	4402      	add	r2, r0
 8019d9e:	4603      	mov	r3, r0
 8019da0:	4293      	cmp	r3, r2
 8019da2:	d100      	bne.n	8019da6 <memset+0xa>
 8019da4:	4770      	bx	lr
 8019da6:	f803 1b01 	strb.w	r1, [r3], #1
 8019daa:	e7f9      	b.n	8019da0 <memset+0x4>

08019dac <_puts_r>:
 8019dac:	b570      	push	{r4, r5, r6, lr}
 8019dae:	460e      	mov	r6, r1
 8019db0:	4605      	mov	r5, r0
 8019db2:	b118      	cbz	r0, 8019dbc <_puts_r+0x10>
 8019db4:	6983      	ldr	r3, [r0, #24]
 8019db6:	b90b      	cbnz	r3, 8019dbc <_puts_r+0x10>
 8019db8:	f000 fa48 	bl	801a24c <__sinit>
 8019dbc:	69ab      	ldr	r3, [r5, #24]
 8019dbe:	68ac      	ldr	r4, [r5, #8]
 8019dc0:	b913      	cbnz	r3, 8019dc8 <_puts_r+0x1c>
 8019dc2:	4628      	mov	r0, r5
 8019dc4:	f000 fa42 	bl	801a24c <__sinit>
 8019dc8:	4b2c      	ldr	r3, [pc, #176]	; (8019e7c <_puts_r+0xd0>)
 8019dca:	429c      	cmp	r4, r3
 8019dcc:	d120      	bne.n	8019e10 <_puts_r+0x64>
 8019dce:	686c      	ldr	r4, [r5, #4]
 8019dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019dd2:	07db      	lsls	r3, r3, #31
 8019dd4:	d405      	bmi.n	8019de2 <_puts_r+0x36>
 8019dd6:	89a3      	ldrh	r3, [r4, #12]
 8019dd8:	0598      	lsls	r0, r3, #22
 8019dda:	d402      	bmi.n	8019de2 <_puts_r+0x36>
 8019ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019dde:	f000 fad3 	bl	801a388 <__retarget_lock_acquire_recursive>
 8019de2:	89a3      	ldrh	r3, [r4, #12]
 8019de4:	0719      	lsls	r1, r3, #28
 8019de6:	d51d      	bpl.n	8019e24 <_puts_r+0x78>
 8019de8:	6923      	ldr	r3, [r4, #16]
 8019dea:	b1db      	cbz	r3, 8019e24 <_puts_r+0x78>
 8019dec:	3e01      	subs	r6, #1
 8019dee:	68a3      	ldr	r3, [r4, #8]
 8019df0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019df4:	3b01      	subs	r3, #1
 8019df6:	60a3      	str	r3, [r4, #8]
 8019df8:	bb39      	cbnz	r1, 8019e4a <_puts_r+0x9e>
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	da38      	bge.n	8019e70 <_puts_r+0xc4>
 8019dfe:	4622      	mov	r2, r4
 8019e00:	210a      	movs	r1, #10
 8019e02:	4628      	mov	r0, r5
 8019e04:	f000 f848 	bl	8019e98 <__swbuf_r>
 8019e08:	3001      	adds	r0, #1
 8019e0a:	d011      	beq.n	8019e30 <_puts_r+0x84>
 8019e0c:	250a      	movs	r5, #10
 8019e0e:	e011      	b.n	8019e34 <_puts_r+0x88>
 8019e10:	4b1b      	ldr	r3, [pc, #108]	; (8019e80 <_puts_r+0xd4>)
 8019e12:	429c      	cmp	r4, r3
 8019e14:	d101      	bne.n	8019e1a <_puts_r+0x6e>
 8019e16:	68ac      	ldr	r4, [r5, #8]
 8019e18:	e7da      	b.n	8019dd0 <_puts_r+0x24>
 8019e1a:	4b1a      	ldr	r3, [pc, #104]	; (8019e84 <_puts_r+0xd8>)
 8019e1c:	429c      	cmp	r4, r3
 8019e1e:	bf08      	it	eq
 8019e20:	68ec      	ldreq	r4, [r5, #12]
 8019e22:	e7d5      	b.n	8019dd0 <_puts_r+0x24>
 8019e24:	4621      	mov	r1, r4
 8019e26:	4628      	mov	r0, r5
 8019e28:	f000 f888 	bl	8019f3c <__swsetup_r>
 8019e2c:	2800      	cmp	r0, #0
 8019e2e:	d0dd      	beq.n	8019dec <_puts_r+0x40>
 8019e30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019e36:	07da      	lsls	r2, r3, #31
 8019e38:	d405      	bmi.n	8019e46 <_puts_r+0x9a>
 8019e3a:	89a3      	ldrh	r3, [r4, #12]
 8019e3c:	059b      	lsls	r3, r3, #22
 8019e3e:	d402      	bmi.n	8019e46 <_puts_r+0x9a>
 8019e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e42:	f000 faa2 	bl	801a38a <__retarget_lock_release_recursive>
 8019e46:	4628      	mov	r0, r5
 8019e48:	bd70      	pop	{r4, r5, r6, pc}
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	da04      	bge.n	8019e58 <_puts_r+0xac>
 8019e4e:	69a2      	ldr	r2, [r4, #24]
 8019e50:	429a      	cmp	r2, r3
 8019e52:	dc06      	bgt.n	8019e62 <_puts_r+0xb6>
 8019e54:	290a      	cmp	r1, #10
 8019e56:	d004      	beq.n	8019e62 <_puts_r+0xb6>
 8019e58:	6823      	ldr	r3, [r4, #0]
 8019e5a:	1c5a      	adds	r2, r3, #1
 8019e5c:	6022      	str	r2, [r4, #0]
 8019e5e:	7019      	strb	r1, [r3, #0]
 8019e60:	e7c5      	b.n	8019dee <_puts_r+0x42>
 8019e62:	4622      	mov	r2, r4
 8019e64:	4628      	mov	r0, r5
 8019e66:	f000 f817 	bl	8019e98 <__swbuf_r>
 8019e6a:	3001      	adds	r0, #1
 8019e6c:	d1bf      	bne.n	8019dee <_puts_r+0x42>
 8019e6e:	e7df      	b.n	8019e30 <_puts_r+0x84>
 8019e70:	6823      	ldr	r3, [r4, #0]
 8019e72:	250a      	movs	r5, #10
 8019e74:	1c5a      	adds	r2, r3, #1
 8019e76:	6022      	str	r2, [r4, #0]
 8019e78:	701d      	strb	r5, [r3, #0]
 8019e7a:	e7db      	b.n	8019e34 <_puts_r+0x88>
 8019e7c:	0801ac18 	.word	0x0801ac18
 8019e80:	0801ac38 	.word	0x0801ac38
 8019e84:	0801abf8 	.word	0x0801abf8

08019e88 <puts>:
 8019e88:	4b02      	ldr	r3, [pc, #8]	; (8019e94 <puts+0xc>)
 8019e8a:	4601      	mov	r1, r0
 8019e8c:	6818      	ldr	r0, [r3, #0]
 8019e8e:	f7ff bf8d 	b.w	8019dac <_puts_r>
 8019e92:	bf00      	nop
 8019e94:	240000a4 	.word	0x240000a4

08019e98 <__swbuf_r>:
 8019e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e9a:	460e      	mov	r6, r1
 8019e9c:	4614      	mov	r4, r2
 8019e9e:	4605      	mov	r5, r0
 8019ea0:	b118      	cbz	r0, 8019eaa <__swbuf_r+0x12>
 8019ea2:	6983      	ldr	r3, [r0, #24]
 8019ea4:	b90b      	cbnz	r3, 8019eaa <__swbuf_r+0x12>
 8019ea6:	f000 f9d1 	bl	801a24c <__sinit>
 8019eaa:	4b21      	ldr	r3, [pc, #132]	; (8019f30 <__swbuf_r+0x98>)
 8019eac:	429c      	cmp	r4, r3
 8019eae:	d12b      	bne.n	8019f08 <__swbuf_r+0x70>
 8019eb0:	686c      	ldr	r4, [r5, #4]
 8019eb2:	69a3      	ldr	r3, [r4, #24]
 8019eb4:	60a3      	str	r3, [r4, #8]
 8019eb6:	89a3      	ldrh	r3, [r4, #12]
 8019eb8:	071a      	lsls	r2, r3, #28
 8019eba:	d52f      	bpl.n	8019f1c <__swbuf_r+0x84>
 8019ebc:	6923      	ldr	r3, [r4, #16]
 8019ebe:	b36b      	cbz	r3, 8019f1c <__swbuf_r+0x84>
 8019ec0:	6923      	ldr	r3, [r4, #16]
 8019ec2:	6820      	ldr	r0, [r4, #0]
 8019ec4:	1ac0      	subs	r0, r0, r3
 8019ec6:	6963      	ldr	r3, [r4, #20]
 8019ec8:	b2f6      	uxtb	r6, r6
 8019eca:	4283      	cmp	r3, r0
 8019ecc:	4637      	mov	r7, r6
 8019ece:	dc04      	bgt.n	8019eda <__swbuf_r+0x42>
 8019ed0:	4621      	mov	r1, r4
 8019ed2:	4628      	mov	r0, r5
 8019ed4:	f000 f926 	bl	801a124 <_fflush_r>
 8019ed8:	bb30      	cbnz	r0, 8019f28 <__swbuf_r+0x90>
 8019eda:	68a3      	ldr	r3, [r4, #8]
 8019edc:	3b01      	subs	r3, #1
 8019ede:	60a3      	str	r3, [r4, #8]
 8019ee0:	6823      	ldr	r3, [r4, #0]
 8019ee2:	1c5a      	adds	r2, r3, #1
 8019ee4:	6022      	str	r2, [r4, #0]
 8019ee6:	701e      	strb	r6, [r3, #0]
 8019ee8:	6963      	ldr	r3, [r4, #20]
 8019eea:	3001      	adds	r0, #1
 8019eec:	4283      	cmp	r3, r0
 8019eee:	d004      	beq.n	8019efa <__swbuf_r+0x62>
 8019ef0:	89a3      	ldrh	r3, [r4, #12]
 8019ef2:	07db      	lsls	r3, r3, #31
 8019ef4:	d506      	bpl.n	8019f04 <__swbuf_r+0x6c>
 8019ef6:	2e0a      	cmp	r6, #10
 8019ef8:	d104      	bne.n	8019f04 <__swbuf_r+0x6c>
 8019efa:	4621      	mov	r1, r4
 8019efc:	4628      	mov	r0, r5
 8019efe:	f000 f911 	bl	801a124 <_fflush_r>
 8019f02:	b988      	cbnz	r0, 8019f28 <__swbuf_r+0x90>
 8019f04:	4638      	mov	r0, r7
 8019f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f08:	4b0a      	ldr	r3, [pc, #40]	; (8019f34 <__swbuf_r+0x9c>)
 8019f0a:	429c      	cmp	r4, r3
 8019f0c:	d101      	bne.n	8019f12 <__swbuf_r+0x7a>
 8019f0e:	68ac      	ldr	r4, [r5, #8]
 8019f10:	e7cf      	b.n	8019eb2 <__swbuf_r+0x1a>
 8019f12:	4b09      	ldr	r3, [pc, #36]	; (8019f38 <__swbuf_r+0xa0>)
 8019f14:	429c      	cmp	r4, r3
 8019f16:	bf08      	it	eq
 8019f18:	68ec      	ldreq	r4, [r5, #12]
 8019f1a:	e7ca      	b.n	8019eb2 <__swbuf_r+0x1a>
 8019f1c:	4621      	mov	r1, r4
 8019f1e:	4628      	mov	r0, r5
 8019f20:	f000 f80c 	bl	8019f3c <__swsetup_r>
 8019f24:	2800      	cmp	r0, #0
 8019f26:	d0cb      	beq.n	8019ec0 <__swbuf_r+0x28>
 8019f28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019f2c:	e7ea      	b.n	8019f04 <__swbuf_r+0x6c>
 8019f2e:	bf00      	nop
 8019f30:	0801ac18 	.word	0x0801ac18
 8019f34:	0801ac38 	.word	0x0801ac38
 8019f38:	0801abf8 	.word	0x0801abf8

08019f3c <__swsetup_r>:
 8019f3c:	4b32      	ldr	r3, [pc, #200]	; (801a008 <__swsetup_r+0xcc>)
 8019f3e:	b570      	push	{r4, r5, r6, lr}
 8019f40:	681d      	ldr	r5, [r3, #0]
 8019f42:	4606      	mov	r6, r0
 8019f44:	460c      	mov	r4, r1
 8019f46:	b125      	cbz	r5, 8019f52 <__swsetup_r+0x16>
 8019f48:	69ab      	ldr	r3, [r5, #24]
 8019f4a:	b913      	cbnz	r3, 8019f52 <__swsetup_r+0x16>
 8019f4c:	4628      	mov	r0, r5
 8019f4e:	f000 f97d 	bl	801a24c <__sinit>
 8019f52:	4b2e      	ldr	r3, [pc, #184]	; (801a00c <__swsetup_r+0xd0>)
 8019f54:	429c      	cmp	r4, r3
 8019f56:	d10f      	bne.n	8019f78 <__swsetup_r+0x3c>
 8019f58:	686c      	ldr	r4, [r5, #4]
 8019f5a:	89a3      	ldrh	r3, [r4, #12]
 8019f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019f60:	0719      	lsls	r1, r3, #28
 8019f62:	d42c      	bmi.n	8019fbe <__swsetup_r+0x82>
 8019f64:	06dd      	lsls	r5, r3, #27
 8019f66:	d411      	bmi.n	8019f8c <__swsetup_r+0x50>
 8019f68:	2309      	movs	r3, #9
 8019f6a:	6033      	str	r3, [r6, #0]
 8019f6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019f70:	81a3      	strh	r3, [r4, #12]
 8019f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f76:	e03e      	b.n	8019ff6 <__swsetup_r+0xba>
 8019f78:	4b25      	ldr	r3, [pc, #148]	; (801a010 <__swsetup_r+0xd4>)
 8019f7a:	429c      	cmp	r4, r3
 8019f7c:	d101      	bne.n	8019f82 <__swsetup_r+0x46>
 8019f7e:	68ac      	ldr	r4, [r5, #8]
 8019f80:	e7eb      	b.n	8019f5a <__swsetup_r+0x1e>
 8019f82:	4b24      	ldr	r3, [pc, #144]	; (801a014 <__swsetup_r+0xd8>)
 8019f84:	429c      	cmp	r4, r3
 8019f86:	bf08      	it	eq
 8019f88:	68ec      	ldreq	r4, [r5, #12]
 8019f8a:	e7e6      	b.n	8019f5a <__swsetup_r+0x1e>
 8019f8c:	0758      	lsls	r0, r3, #29
 8019f8e:	d512      	bpl.n	8019fb6 <__swsetup_r+0x7a>
 8019f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f92:	b141      	cbz	r1, 8019fa6 <__swsetup_r+0x6a>
 8019f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f98:	4299      	cmp	r1, r3
 8019f9a:	d002      	beq.n	8019fa2 <__swsetup_r+0x66>
 8019f9c:	4630      	mov	r0, r6
 8019f9e:	f000 fa5b 	bl	801a458 <_free_r>
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	6363      	str	r3, [r4, #52]	; 0x34
 8019fa6:	89a3      	ldrh	r3, [r4, #12]
 8019fa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019fac:	81a3      	strh	r3, [r4, #12]
 8019fae:	2300      	movs	r3, #0
 8019fb0:	6063      	str	r3, [r4, #4]
 8019fb2:	6923      	ldr	r3, [r4, #16]
 8019fb4:	6023      	str	r3, [r4, #0]
 8019fb6:	89a3      	ldrh	r3, [r4, #12]
 8019fb8:	f043 0308 	orr.w	r3, r3, #8
 8019fbc:	81a3      	strh	r3, [r4, #12]
 8019fbe:	6923      	ldr	r3, [r4, #16]
 8019fc0:	b94b      	cbnz	r3, 8019fd6 <__swsetup_r+0x9a>
 8019fc2:	89a3      	ldrh	r3, [r4, #12]
 8019fc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019fcc:	d003      	beq.n	8019fd6 <__swsetup_r+0x9a>
 8019fce:	4621      	mov	r1, r4
 8019fd0:	4630      	mov	r0, r6
 8019fd2:	f000 fa01 	bl	801a3d8 <__smakebuf_r>
 8019fd6:	89a0      	ldrh	r0, [r4, #12]
 8019fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019fdc:	f010 0301 	ands.w	r3, r0, #1
 8019fe0:	d00a      	beq.n	8019ff8 <__swsetup_r+0xbc>
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	60a3      	str	r3, [r4, #8]
 8019fe6:	6963      	ldr	r3, [r4, #20]
 8019fe8:	425b      	negs	r3, r3
 8019fea:	61a3      	str	r3, [r4, #24]
 8019fec:	6923      	ldr	r3, [r4, #16]
 8019fee:	b943      	cbnz	r3, 801a002 <__swsetup_r+0xc6>
 8019ff0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019ff4:	d1ba      	bne.n	8019f6c <__swsetup_r+0x30>
 8019ff6:	bd70      	pop	{r4, r5, r6, pc}
 8019ff8:	0781      	lsls	r1, r0, #30
 8019ffa:	bf58      	it	pl
 8019ffc:	6963      	ldrpl	r3, [r4, #20]
 8019ffe:	60a3      	str	r3, [r4, #8]
 801a000:	e7f4      	b.n	8019fec <__swsetup_r+0xb0>
 801a002:	2000      	movs	r0, #0
 801a004:	e7f7      	b.n	8019ff6 <__swsetup_r+0xba>
 801a006:	bf00      	nop
 801a008:	240000a4 	.word	0x240000a4
 801a00c:	0801ac18 	.word	0x0801ac18
 801a010:	0801ac38 	.word	0x0801ac38
 801a014:	0801abf8 	.word	0x0801abf8

0801a018 <__sflush_r>:
 801a018:	898a      	ldrh	r2, [r1, #12]
 801a01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a01e:	4605      	mov	r5, r0
 801a020:	0710      	lsls	r0, r2, #28
 801a022:	460c      	mov	r4, r1
 801a024:	d458      	bmi.n	801a0d8 <__sflush_r+0xc0>
 801a026:	684b      	ldr	r3, [r1, #4]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	dc05      	bgt.n	801a038 <__sflush_r+0x20>
 801a02c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a02e:	2b00      	cmp	r3, #0
 801a030:	dc02      	bgt.n	801a038 <__sflush_r+0x20>
 801a032:	2000      	movs	r0, #0
 801a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a03a:	2e00      	cmp	r6, #0
 801a03c:	d0f9      	beq.n	801a032 <__sflush_r+0x1a>
 801a03e:	2300      	movs	r3, #0
 801a040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a044:	682f      	ldr	r7, [r5, #0]
 801a046:	602b      	str	r3, [r5, #0]
 801a048:	d032      	beq.n	801a0b0 <__sflush_r+0x98>
 801a04a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a04c:	89a3      	ldrh	r3, [r4, #12]
 801a04e:	075a      	lsls	r2, r3, #29
 801a050:	d505      	bpl.n	801a05e <__sflush_r+0x46>
 801a052:	6863      	ldr	r3, [r4, #4]
 801a054:	1ac0      	subs	r0, r0, r3
 801a056:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a058:	b10b      	cbz	r3, 801a05e <__sflush_r+0x46>
 801a05a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a05c:	1ac0      	subs	r0, r0, r3
 801a05e:	2300      	movs	r3, #0
 801a060:	4602      	mov	r2, r0
 801a062:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a064:	6a21      	ldr	r1, [r4, #32]
 801a066:	4628      	mov	r0, r5
 801a068:	47b0      	blx	r6
 801a06a:	1c43      	adds	r3, r0, #1
 801a06c:	89a3      	ldrh	r3, [r4, #12]
 801a06e:	d106      	bne.n	801a07e <__sflush_r+0x66>
 801a070:	6829      	ldr	r1, [r5, #0]
 801a072:	291d      	cmp	r1, #29
 801a074:	d82c      	bhi.n	801a0d0 <__sflush_r+0xb8>
 801a076:	4a2a      	ldr	r2, [pc, #168]	; (801a120 <__sflush_r+0x108>)
 801a078:	40ca      	lsrs	r2, r1
 801a07a:	07d6      	lsls	r6, r2, #31
 801a07c:	d528      	bpl.n	801a0d0 <__sflush_r+0xb8>
 801a07e:	2200      	movs	r2, #0
 801a080:	6062      	str	r2, [r4, #4]
 801a082:	04d9      	lsls	r1, r3, #19
 801a084:	6922      	ldr	r2, [r4, #16]
 801a086:	6022      	str	r2, [r4, #0]
 801a088:	d504      	bpl.n	801a094 <__sflush_r+0x7c>
 801a08a:	1c42      	adds	r2, r0, #1
 801a08c:	d101      	bne.n	801a092 <__sflush_r+0x7a>
 801a08e:	682b      	ldr	r3, [r5, #0]
 801a090:	b903      	cbnz	r3, 801a094 <__sflush_r+0x7c>
 801a092:	6560      	str	r0, [r4, #84]	; 0x54
 801a094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a096:	602f      	str	r7, [r5, #0]
 801a098:	2900      	cmp	r1, #0
 801a09a:	d0ca      	beq.n	801a032 <__sflush_r+0x1a>
 801a09c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a0a0:	4299      	cmp	r1, r3
 801a0a2:	d002      	beq.n	801a0aa <__sflush_r+0x92>
 801a0a4:	4628      	mov	r0, r5
 801a0a6:	f000 f9d7 	bl	801a458 <_free_r>
 801a0aa:	2000      	movs	r0, #0
 801a0ac:	6360      	str	r0, [r4, #52]	; 0x34
 801a0ae:	e7c1      	b.n	801a034 <__sflush_r+0x1c>
 801a0b0:	6a21      	ldr	r1, [r4, #32]
 801a0b2:	2301      	movs	r3, #1
 801a0b4:	4628      	mov	r0, r5
 801a0b6:	47b0      	blx	r6
 801a0b8:	1c41      	adds	r1, r0, #1
 801a0ba:	d1c7      	bne.n	801a04c <__sflush_r+0x34>
 801a0bc:	682b      	ldr	r3, [r5, #0]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d0c4      	beq.n	801a04c <__sflush_r+0x34>
 801a0c2:	2b1d      	cmp	r3, #29
 801a0c4:	d001      	beq.n	801a0ca <__sflush_r+0xb2>
 801a0c6:	2b16      	cmp	r3, #22
 801a0c8:	d101      	bne.n	801a0ce <__sflush_r+0xb6>
 801a0ca:	602f      	str	r7, [r5, #0]
 801a0cc:	e7b1      	b.n	801a032 <__sflush_r+0x1a>
 801a0ce:	89a3      	ldrh	r3, [r4, #12]
 801a0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0d4:	81a3      	strh	r3, [r4, #12]
 801a0d6:	e7ad      	b.n	801a034 <__sflush_r+0x1c>
 801a0d8:	690f      	ldr	r7, [r1, #16]
 801a0da:	2f00      	cmp	r7, #0
 801a0dc:	d0a9      	beq.n	801a032 <__sflush_r+0x1a>
 801a0de:	0793      	lsls	r3, r2, #30
 801a0e0:	680e      	ldr	r6, [r1, #0]
 801a0e2:	bf08      	it	eq
 801a0e4:	694b      	ldreq	r3, [r1, #20]
 801a0e6:	600f      	str	r7, [r1, #0]
 801a0e8:	bf18      	it	ne
 801a0ea:	2300      	movne	r3, #0
 801a0ec:	eba6 0807 	sub.w	r8, r6, r7
 801a0f0:	608b      	str	r3, [r1, #8]
 801a0f2:	f1b8 0f00 	cmp.w	r8, #0
 801a0f6:	dd9c      	ble.n	801a032 <__sflush_r+0x1a>
 801a0f8:	6a21      	ldr	r1, [r4, #32]
 801a0fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a0fc:	4643      	mov	r3, r8
 801a0fe:	463a      	mov	r2, r7
 801a100:	4628      	mov	r0, r5
 801a102:	47b0      	blx	r6
 801a104:	2800      	cmp	r0, #0
 801a106:	dc06      	bgt.n	801a116 <__sflush_r+0xfe>
 801a108:	89a3      	ldrh	r3, [r4, #12]
 801a10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a10e:	81a3      	strh	r3, [r4, #12]
 801a110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a114:	e78e      	b.n	801a034 <__sflush_r+0x1c>
 801a116:	4407      	add	r7, r0
 801a118:	eba8 0800 	sub.w	r8, r8, r0
 801a11c:	e7e9      	b.n	801a0f2 <__sflush_r+0xda>
 801a11e:	bf00      	nop
 801a120:	20400001 	.word	0x20400001

0801a124 <_fflush_r>:
 801a124:	b538      	push	{r3, r4, r5, lr}
 801a126:	690b      	ldr	r3, [r1, #16]
 801a128:	4605      	mov	r5, r0
 801a12a:	460c      	mov	r4, r1
 801a12c:	b913      	cbnz	r3, 801a134 <_fflush_r+0x10>
 801a12e:	2500      	movs	r5, #0
 801a130:	4628      	mov	r0, r5
 801a132:	bd38      	pop	{r3, r4, r5, pc}
 801a134:	b118      	cbz	r0, 801a13e <_fflush_r+0x1a>
 801a136:	6983      	ldr	r3, [r0, #24]
 801a138:	b90b      	cbnz	r3, 801a13e <_fflush_r+0x1a>
 801a13a:	f000 f887 	bl	801a24c <__sinit>
 801a13e:	4b14      	ldr	r3, [pc, #80]	; (801a190 <_fflush_r+0x6c>)
 801a140:	429c      	cmp	r4, r3
 801a142:	d11b      	bne.n	801a17c <_fflush_r+0x58>
 801a144:	686c      	ldr	r4, [r5, #4]
 801a146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d0ef      	beq.n	801a12e <_fflush_r+0xa>
 801a14e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a150:	07d0      	lsls	r0, r2, #31
 801a152:	d404      	bmi.n	801a15e <_fflush_r+0x3a>
 801a154:	0599      	lsls	r1, r3, #22
 801a156:	d402      	bmi.n	801a15e <_fflush_r+0x3a>
 801a158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a15a:	f000 f915 	bl	801a388 <__retarget_lock_acquire_recursive>
 801a15e:	4628      	mov	r0, r5
 801a160:	4621      	mov	r1, r4
 801a162:	f7ff ff59 	bl	801a018 <__sflush_r>
 801a166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a168:	07da      	lsls	r2, r3, #31
 801a16a:	4605      	mov	r5, r0
 801a16c:	d4e0      	bmi.n	801a130 <_fflush_r+0xc>
 801a16e:	89a3      	ldrh	r3, [r4, #12]
 801a170:	059b      	lsls	r3, r3, #22
 801a172:	d4dd      	bmi.n	801a130 <_fflush_r+0xc>
 801a174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a176:	f000 f908 	bl	801a38a <__retarget_lock_release_recursive>
 801a17a:	e7d9      	b.n	801a130 <_fflush_r+0xc>
 801a17c:	4b05      	ldr	r3, [pc, #20]	; (801a194 <_fflush_r+0x70>)
 801a17e:	429c      	cmp	r4, r3
 801a180:	d101      	bne.n	801a186 <_fflush_r+0x62>
 801a182:	68ac      	ldr	r4, [r5, #8]
 801a184:	e7df      	b.n	801a146 <_fflush_r+0x22>
 801a186:	4b04      	ldr	r3, [pc, #16]	; (801a198 <_fflush_r+0x74>)
 801a188:	429c      	cmp	r4, r3
 801a18a:	bf08      	it	eq
 801a18c:	68ec      	ldreq	r4, [r5, #12]
 801a18e:	e7da      	b.n	801a146 <_fflush_r+0x22>
 801a190:	0801ac18 	.word	0x0801ac18
 801a194:	0801ac38 	.word	0x0801ac38
 801a198:	0801abf8 	.word	0x0801abf8

0801a19c <std>:
 801a19c:	2300      	movs	r3, #0
 801a19e:	b510      	push	{r4, lr}
 801a1a0:	4604      	mov	r4, r0
 801a1a2:	e9c0 3300 	strd	r3, r3, [r0]
 801a1a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a1aa:	6083      	str	r3, [r0, #8]
 801a1ac:	8181      	strh	r1, [r0, #12]
 801a1ae:	6643      	str	r3, [r0, #100]	; 0x64
 801a1b0:	81c2      	strh	r2, [r0, #14]
 801a1b2:	6183      	str	r3, [r0, #24]
 801a1b4:	4619      	mov	r1, r3
 801a1b6:	2208      	movs	r2, #8
 801a1b8:	305c      	adds	r0, #92	; 0x5c
 801a1ba:	f7ff fdef 	bl	8019d9c <memset>
 801a1be:	4b05      	ldr	r3, [pc, #20]	; (801a1d4 <std+0x38>)
 801a1c0:	6263      	str	r3, [r4, #36]	; 0x24
 801a1c2:	4b05      	ldr	r3, [pc, #20]	; (801a1d8 <std+0x3c>)
 801a1c4:	62a3      	str	r3, [r4, #40]	; 0x28
 801a1c6:	4b05      	ldr	r3, [pc, #20]	; (801a1dc <std+0x40>)
 801a1c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a1ca:	4b05      	ldr	r3, [pc, #20]	; (801a1e0 <std+0x44>)
 801a1cc:	6224      	str	r4, [r4, #32]
 801a1ce:	6323      	str	r3, [r4, #48]	; 0x30
 801a1d0:	bd10      	pop	{r4, pc}
 801a1d2:	bf00      	nop
 801a1d4:	0801a639 	.word	0x0801a639
 801a1d8:	0801a65b 	.word	0x0801a65b
 801a1dc:	0801a693 	.word	0x0801a693
 801a1e0:	0801a6b7 	.word	0x0801a6b7

0801a1e4 <_cleanup_r>:
 801a1e4:	4901      	ldr	r1, [pc, #4]	; (801a1ec <_cleanup_r+0x8>)
 801a1e6:	f000 b8af 	b.w	801a348 <_fwalk_reent>
 801a1ea:	bf00      	nop
 801a1ec:	0801a125 	.word	0x0801a125

0801a1f0 <__sfmoreglue>:
 801a1f0:	b570      	push	{r4, r5, r6, lr}
 801a1f2:	2268      	movs	r2, #104	; 0x68
 801a1f4:	1e4d      	subs	r5, r1, #1
 801a1f6:	4355      	muls	r5, r2
 801a1f8:	460e      	mov	r6, r1
 801a1fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a1fe:	f000 f997 	bl	801a530 <_malloc_r>
 801a202:	4604      	mov	r4, r0
 801a204:	b140      	cbz	r0, 801a218 <__sfmoreglue+0x28>
 801a206:	2100      	movs	r1, #0
 801a208:	e9c0 1600 	strd	r1, r6, [r0]
 801a20c:	300c      	adds	r0, #12
 801a20e:	60a0      	str	r0, [r4, #8]
 801a210:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a214:	f7ff fdc2 	bl	8019d9c <memset>
 801a218:	4620      	mov	r0, r4
 801a21a:	bd70      	pop	{r4, r5, r6, pc}

0801a21c <__sfp_lock_acquire>:
 801a21c:	4801      	ldr	r0, [pc, #4]	; (801a224 <__sfp_lock_acquire+0x8>)
 801a21e:	f000 b8b3 	b.w	801a388 <__retarget_lock_acquire_recursive>
 801a222:	bf00      	nop
 801a224:	2400690d 	.word	0x2400690d

0801a228 <__sfp_lock_release>:
 801a228:	4801      	ldr	r0, [pc, #4]	; (801a230 <__sfp_lock_release+0x8>)
 801a22a:	f000 b8ae 	b.w	801a38a <__retarget_lock_release_recursive>
 801a22e:	bf00      	nop
 801a230:	2400690d 	.word	0x2400690d

0801a234 <__sinit_lock_acquire>:
 801a234:	4801      	ldr	r0, [pc, #4]	; (801a23c <__sinit_lock_acquire+0x8>)
 801a236:	f000 b8a7 	b.w	801a388 <__retarget_lock_acquire_recursive>
 801a23a:	bf00      	nop
 801a23c:	2400690e 	.word	0x2400690e

0801a240 <__sinit_lock_release>:
 801a240:	4801      	ldr	r0, [pc, #4]	; (801a248 <__sinit_lock_release+0x8>)
 801a242:	f000 b8a2 	b.w	801a38a <__retarget_lock_release_recursive>
 801a246:	bf00      	nop
 801a248:	2400690e 	.word	0x2400690e

0801a24c <__sinit>:
 801a24c:	b510      	push	{r4, lr}
 801a24e:	4604      	mov	r4, r0
 801a250:	f7ff fff0 	bl	801a234 <__sinit_lock_acquire>
 801a254:	69a3      	ldr	r3, [r4, #24]
 801a256:	b11b      	cbz	r3, 801a260 <__sinit+0x14>
 801a258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a25c:	f7ff bff0 	b.w	801a240 <__sinit_lock_release>
 801a260:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a264:	6523      	str	r3, [r4, #80]	; 0x50
 801a266:	4b13      	ldr	r3, [pc, #76]	; (801a2b4 <__sinit+0x68>)
 801a268:	4a13      	ldr	r2, [pc, #76]	; (801a2b8 <__sinit+0x6c>)
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a26e:	42a3      	cmp	r3, r4
 801a270:	bf04      	itt	eq
 801a272:	2301      	moveq	r3, #1
 801a274:	61a3      	streq	r3, [r4, #24]
 801a276:	4620      	mov	r0, r4
 801a278:	f000 f820 	bl	801a2bc <__sfp>
 801a27c:	6060      	str	r0, [r4, #4]
 801a27e:	4620      	mov	r0, r4
 801a280:	f000 f81c 	bl	801a2bc <__sfp>
 801a284:	60a0      	str	r0, [r4, #8]
 801a286:	4620      	mov	r0, r4
 801a288:	f000 f818 	bl	801a2bc <__sfp>
 801a28c:	2200      	movs	r2, #0
 801a28e:	60e0      	str	r0, [r4, #12]
 801a290:	2104      	movs	r1, #4
 801a292:	6860      	ldr	r0, [r4, #4]
 801a294:	f7ff ff82 	bl	801a19c <std>
 801a298:	68a0      	ldr	r0, [r4, #8]
 801a29a:	2201      	movs	r2, #1
 801a29c:	2109      	movs	r1, #9
 801a29e:	f7ff ff7d 	bl	801a19c <std>
 801a2a2:	68e0      	ldr	r0, [r4, #12]
 801a2a4:	2202      	movs	r2, #2
 801a2a6:	2112      	movs	r1, #18
 801a2a8:	f7ff ff78 	bl	801a19c <std>
 801a2ac:	2301      	movs	r3, #1
 801a2ae:	61a3      	str	r3, [r4, #24]
 801a2b0:	e7d2      	b.n	801a258 <__sinit+0xc>
 801a2b2:	bf00      	nop
 801a2b4:	0801abf4 	.word	0x0801abf4
 801a2b8:	0801a1e5 	.word	0x0801a1e5

0801a2bc <__sfp>:
 801a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2be:	4607      	mov	r7, r0
 801a2c0:	f7ff ffac 	bl	801a21c <__sfp_lock_acquire>
 801a2c4:	4b1e      	ldr	r3, [pc, #120]	; (801a340 <__sfp+0x84>)
 801a2c6:	681e      	ldr	r6, [r3, #0]
 801a2c8:	69b3      	ldr	r3, [r6, #24]
 801a2ca:	b913      	cbnz	r3, 801a2d2 <__sfp+0x16>
 801a2cc:	4630      	mov	r0, r6
 801a2ce:	f7ff ffbd 	bl	801a24c <__sinit>
 801a2d2:	3648      	adds	r6, #72	; 0x48
 801a2d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a2d8:	3b01      	subs	r3, #1
 801a2da:	d503      	bpl.n	801a2e4 <__sfp+0x28>
 801a2dc:	6833      	ldr	r3, [r6, #0]
 801a2de:	b30b      	cbz	r3, 801a324 <__sfp+0x68>
 801a2e0:	6836      	ldr	r6, [r6, #0]
 801a2e2:	e7f7      	b.n	801a2d4 <__sfp+0x18>
 801a2e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a2e8:	b9d5      	cbnz	r5, 801a320 <__sfp+0x64>
 801a2ea:	4b16      	ldr	r3, [pc, #88]	; (801a344 <__sfp+0x88>)
 801a2ec:	60e3      	str	r3, [r4, #12]
 801a2ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a2f2:	6665      	str	r5, [r4, #100]	; 0x64
 801a2f4:	f000 f847 	bl	801a386 <__retarget_lock_init_recursive>
 801a2f8:	f7ff ff96 	bl	801a228 <__sfp_lock_release>
 801a2fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a300:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a304:	6025      	str	r5, [r4, #0]
 801a306:	61a5      	str	r5, [r4, #24]
 801a308:	2208      	movs	r2, #8
 801a30a:	4629      	mov	r1, r5
 801a30c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a310:	f7ff fd44 	bl	8019d9c <memset>
 801a314:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a318:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a31c:	4620      	mov	r0, r4
 801a31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a320:	3468      	adds	r4, #104	; 0x68
 801a322:	e7d9      	b.n	801a2d8 <__sfp+0x1c>
 801a324:	2104      	movs	r1, #4
 801a326:	4638      	mov	r0, r7
 801a328:	f7ff ff62 	bl	801a1f0 <__sfmoreglue>
 801a32c:	4604      	mov	r4, r0
 801a32e:	6030      	str	r0, [r6, #0]
 801a330:	2800      	cmp	r0, #0
 801a332:	d1d5      	bne.n	801a2e0 <__sfp+0x24>
 801a334:	f7ff ff78 	bl	801a228 <__sfp_lock_release>
 801a338:	230c      	movs	r3, #12
 801a33a:	603b      	str	r3, [r7, #0]
 801a33c:	e7ee      	b.n	801a31c <__sfp+0x60>
 801a33e:	bf00      	nop
 801a340:	0801abf4 	.word	0x0801abf4
 801a344:	ffff0001 	.word	0xffff0001

0801a348 <_fwalk_reent>:
 801a348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a34c:	4606      	mov	r6, r0
 801a34e:	4688      	mov	r8, r1
 801a350:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a354:	2700      	movs	r7, #0
 801a356:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a35a:	f1b9 0901 	subs.w	r9, r9, #1
 801a35e:	d505      	bpl.n	801a36c <_fwalk_reent+0x24>
 801a360:	6824      	ldr	r4, [r4, #0]
 801a362:	2c00      	cmp	r4, #0
 801a364:	d1f7      	bne.n	801a356 <_fwalk_reent+0xe>
 801a366:	4638      	mov	r0, r7
 801a368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a36c:	89ab      	ldrh	r3, [r5, #12]
 801a36e:	2b01      	cmp	r3, #1
 801a370:	d907      	bls.n	801a382 <_fwalk_reent+0x3a>
 801a372:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a376:	3301      	adds	r3, #1
 801a378:	d003      	beq.n	801a382 <_fwalk_reent+0x3a>
 801a37a:	4629      	mov	r1, r5
 801a37c:	4630      	mov	r0, r6
 801a37e:	47c0      	blx	r8
 801a380:	4307      	orrs	r7, r0
 801a382:	3568      	adds	r5, #104	; 0x68
 801a384:	e7e9      	b.n	801a35a <_fwalk_reent+0x12>

0801a386 <__retarget_lock_init_recursive>:
 801a386:	4770      	bx	lr

0801a388 <__retarget_lock_acquire_recursive>:
 801a388:	4770      	bx	lr

0801a38a <__retarget_lock_release_recursive>:
 801a38a:	4770      	bx	lr

0801a38c <__swhatbuf_r>:
 801a38c:	b570      	push	{r4, r5, r6, lr}
 801a38e:	460e      	mov	r6, r1
 801a390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a394:	2900      	cmp	r1, #0
 801a396:	b096      	sub	sp, #88	; 0x58
 801a398:	4614      	mov	r4, r2
 801a39a:	461d      	mov	r5, r3
 801a39c:	da08      	bge.n	801a3b0 <__swhatbuf_r+0x24>
 801a39e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	602a      	str	r2, [r5, #0]
 801a3a6:	061a      	lsls	r2, r3, #24
 801a3a8:	d410      	bmi.n	801a3cc <__swhatbuf_r+0x40>
 801a3aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a3ae:	e00e      	b.n	801a3ce <__swhatbuf_r+0x42>
 801a3b0:	466a      	mov	r2, sp
 801a3b2:	f000 f9a7 	bl	801a704 <_fstat_r>
 801a3b6:	2800      	cmp	r0, #0
 801a3b8:	dbf1      	blt.n	801a39e <__swhatbuf_r+0x12>
 801a3ba:	9a01      	ldr	r2, [sp, #4]
 801a3bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a3c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a3c4:	425a      	negs	r2, r3
 801a3c6:	415a      	adcs	r2, r3
 801a3c8:	602a      	str	r2, [r5, #0]
 801a3ca:	e7ee      	b.n	801a3aa <__swhatbuf_r+0x1e>
 801a3cc:	2340      	movs	r3, #64	; 0x40
 801a3ce:	2000      	movs	r0, #0
 801a3d0:	6023      	str	r3, [r4, #0]
 801a3d2:	b016      	add	sp, #88	; 0x58
 801a3d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a3d8 <__smakebuf_r>:
 801a3d8:	898b      	ldrh	r3, [r1, #12]
 801a3da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a3dc:	079d      	lsls	r5, r3, #30
 801a3de:	4606      	mov	r6, r0
 801a3e0:	460c      	mov	r4, r1
 801a3e2:	d507      	bpl.n	801a3f4 <__smakebuf_r+0x1c>
 801a3e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a3e8:	6023      	str	r3, [r4, #0]
 801a3ea:	6123      	str	r3, [r4, #16]
 801a3ec:	2301      	movs	r3, #1
 801a3ee:	6163      	str	r3, [r4, #20]
 801a3f0:	b002      	add	sp, #8
 801a3f2:	bd70      	pop	{r4, r5, r6, pc}
 801a3f4:	ab01      	add	r3, sp, #4
 801a3f6:	466a      	mov	r2, sp
 801a3f8:	f7ff ffc8 	bl	801a38c <__swhatbuf_r>
 801a3fc:	9900      	ldr	r1, [sp, #0]
 801a3fe:	4605      	mov	r5, r0
 801a400:	4630      	mov	r0, r6
 801a402:	f000 f895 	bl	801a530 <_malloc_r>
 801a406:	b948      	cbnz	r0, 801a41c <__smakebuf_r+0x44>
 801a408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a40c:	059a      	lsls	r2, r3, #22
 801a40e:	d4ef      	bmi.n	801a3f0 <__smakebuf_r+0x18>
 801a410:	f023 0303 	bic.w	r3, r3, #3
 801a414:	f043 0302 	orr.w	r3, r3, #2
 801a418:	81a3      	strh	r3, [r4, #12]
 801a41a:	e7e3      	b.n	801a3e4 <__smakebuf_r+0xc>
 801a41c:	4b0d      	ldr	r3, [pc, #52]	; (801a454 <__smakebuf_r+0x7c>)
 801a41e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a420:	89a3      	ldrh	r3, [r4, #12]
 801a422:	6020      	str	r0, [r4, #0]
 801a424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a428:	81a3      	strh	r3, [r4, #12]
 801a42a:	9b00      	ldr	r3, [sp, #0]
 801a42c:	6163      	str	r3, [r4, #20]
 801a42e:	9b01      	ldr	r3, [sp, #4]
 801a430:	6120      	str	r0, [r4, #16]
 801a432:	b15b      	cbz	r3, 801a44c <__smakebuf_r+0x74>
 801a434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a438:	4630      	mov	r0, r6
 801a43a:	f000 f975 	bl	801a728 <_isatty_r>
 801a43e:	b128      	cbz	r0, 801a44c <__smakebuf_r+0x74>
 801a440:	89a3      	ldrh	r3, [r4, #12]
 801a442:	f023 0303 	bic.w	r3, r3, #3
 801a446:	f043 0301 	orr.w	r3, r3, #1
 801a44a:	81a3      	strh	r3, [r4, #12]
 801a44c:	89a0      	ldrh	r0, [r4, #12]
 801a44e:	4305      	orrs	r5, r0
 801a450:	81a5      	strh	r5, [r4, #12]
 801a452:	e7cd      	b.n	801a3f0 <__smakebuf_r+0x18>
 801a454:	0801a1e5 	.word	0x0801a1e5

0801a458 <_free_r>:
 801a458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a45a:	2900      	cmp	r1, #0
 801a45c:	d044      	beq.n	801a4e8 <_free_r+0x90>
 801a45e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a462:	9001      	str	r0, [sp, #4]
 801a464:	2b00      	cmp	r3, #0
 801a466:	f1a1 0404 	sub.w	r4, r1, #4
 801a46a:	bfb8      	it	lt
 801a46c:	18e4      	addlt	r4, r4, r3
 801a46e:	f000 f97d 	bl	801a76c <__malloc_lock>
 801a472:	4a1e      	ldr	r2, [pc, #120]	; (801a4ec <_free_r+0x94>)
 801a474:	9801      	ldr	r0, [sp, #4]
 801a476:	6813      	ldr	r3, [r2, #0]
 801a478:	b933      	cbnz	r3, 801a488 <_free_r+0x30>
 801a47a:	6063      	str	r3, [r4, #4]
 801a47c:	6014      	str	r4, [r2, #0]
 801a47e:	b003      	add	sp, #12
 801a480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a484:	f000 b978 	b.w	801a778 <__malloc_unlock>
 801a488:	42a3      	cmp	r3, r4
 801a48a:	d908      	bls.n	801a49e <_free_r+0x46>
 801a48c:	6825      	ldr	r5, [r4, #0]
 801a48e:	1961      	adds	r1, r4, r5
 801a490:	428b      	cmp	r3, r1
 801a492:	bf01      	itttt	eq
 801a494:	6819      	ldreq	r1, [r3, #0]
 801a496:	685b      	ldreq	r3, [r3, #4]
 801a498:	1949      	addeq	r1, r1, r5
 801a49a:	6021      	streq	r1, [r4, #0]
 801a49c:	e7ed      	b.n	801a47a <_free_r+0x22>
 801a49e:	461a      	mov	r2, r3
 801a4a0:	685b      	ldr	r3, [r3, #4]
 801a4a2:	b10b      	cbz	r3, 801a4a8 <_free_r+0x50>
 801a4a4:	42a3      	cmp	r3, r4
 801a4a6:	d9fa      	bls.n	801a49e <_free_r+0x46>
 801a4a8:	6811      	ldr	r1, [r2, #0]
 801a4aa:	1855      	adds	r5, r2, r1
 801a4ac:	42a5      	cmp	r5, r4
 801a4ae:	d10b      	bne.n	801a4c8 <_free_r+0x70>
 801a4b0:	6824      	ldr	r4, [r4, #0]
 801a4b2:	4421      	add	r1, r4
 801a4b4:	1854      	adds	r4, r2, r1
 801a4b6:	42a3      	cmp	r3, r4
 801a4b8:	6011      	str	r1, [r2, #0]
 801a4ba:	d1e0      	bne.n	801a47e <_free_r+0x26>
 801a4bc:	681c      	ldr	r4, [r3, #0]
 801a4be:	685b      	ldr	r3, [r3, #4]
 801a4c0:	6053      	str	r3, [r2, #4]
 801a4c2:	4421      	add	r1, r4
 801a4c4:	6011      	str	r1, [r2, #0]
 801a4c6:	e7da      	b.n	801a47e <_free_r+0x26>
 801a4c8:	d902      	bls.n	801a4d0 <_free_r+0x78>
 801a4ca:	230c      	movs	r3, #12
 801a4cc:	6003      	str	r3, [r0, #0]
 801a4ce:	e7d6      	b.n	801a47e <_free_r+0x26>
 801a4d0:	6825      	ldr	r5, [r4, #0]
 801a4d2:	1961      	adds	r1, r4, r5
 801a4d4:	428b      	cmp	r3, r1
 801a4d6:	bf04      	itt	eq
 801a4d8:	6819      	ldreq	r1, [r3, #0]
 801a4da:	685b      	ldreq	r3, [r3, #4]
 801a4dc:	6063      	str	r3, [r4, #4]
 801a4de:	bf04      	itt	eq
 801a4e0:	1949      	addeq	r1, r1, r5
 801a4e2:	6021      	streq	r1, [r4, #0]
 801a4e4:	6054      	str	r4, [r2, #4]
 801a4e6:	e7ca      	b.n	801a47e <_free_r+0x26>
 801a4e8:	b003      	add	sp, #12
 801a4ea:	bd30      	pop	{r4, r5, pc}
 801a4ec:	24006910 	.word	0x24006910

0801a4f0 <sbrk_aligned>:
 801a4f0:	b570      	push	{r4, r5, r6, lr}
 801a4f2:	4e0e      	ldr	r6, [pc, #56]	; (801a52c <sbrk_aligned+0x3c>)
 801a4f4:	460c      	mov	r4, r1
 801a4f6:	6831      	ldr	r1, [r6, #0]
 801a4f8:	4605      	mov	r5, r0
 801a4fa:	b911      	cbnz	r1, 801a502 <sbrk_aligned+0x12>
 801a4fc:	f000 f88c 	bl	801a618 <_sbrk_r>
 801a500:	6030      	str	r0, [r6, #0]
 801a502:	4621      	mov	r1, r4
 801a504:	4628      	mov	r0, r5
 801a506:	f000 f887 	bl	801a618 <_sbrk_r>
 801a50a:	1c43      	adds	r3, r0, #1
 801a50c:	d00a      	beq.n	801a524 <sbrk_aligned+0x34>
 801a50e:	1cc4      	adds	r4, r0, #3
 801a510:	f024 0403 	bic.w	r4, r4, #3
 801a514:	42a0      	cmp	r0, r4
 801a516:	d007      	beq.n	801a528 <sbrk_aligned+0x38>
 801a518:	1a21      	subs	r1, r4, r0
 801a51a:	4628      	mov	r0, r5
 801a51c:	f000 f87c 	bl	801a618 <_sbrk_r>
 801a520:	3001      	adds	r0, #1
 801a522:	d101      	bne.n	801a528 <sbrk_aligned+0x38>
 801a524:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a528:	4620      	mov	r0, r4
 801a52a:	bd70      	pop	{r4, r5, r6, pc}
 801a52c:	24006914 	.word	0x24006914

0801a530 <_malloc_r>:
 801a530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a534:	1ccd      	adds	r5, r1, #3
 801a536:	f025 0503 	bic.w	r5, r5, #3
 801a53a:	3508      	adds	r5, #8
 801a53c:	2d0c      	cmp	r5, #12
 801a53e:	bf38      	it	cc
 801a540:	250c      	movcc	r5, #12
 801a542:	2d00      	cmp	r5, #0
 801a544:	4607      	mov	r7, r0
 801a546:	db01      	blt.n	801a54c <_malloc_r+0x1c>
 801a548:	42a9      	cmp	r1, r5
 801a54a:	d905      	bls.n	801a558 <_malloc_r+0x28>
 801a54c:	230c      	movs	r3, #12
 801a54e:	603b      	str	r3, [r7, #0]
 801a550:	2600      	movs	r6, #0
 801a552:	4630      	mov	r0, r6
 801a554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a558:	4e2e      	ldr	r6, [pc, #184]	; (801a614 <_malloc_r+0xe4>)
 801a55a:	f000 f907 	bl	801a76c <__malloc_lock>
 801a55e:	6833      	ldr	r3, [r6, #0]
 801a560:	461c      	mov	r4, r3
 801a562:	bb34      	cbnz	r4, 801a5b2 <_malloc_r+0x82>
 801a564:	4629      	mov	r1, r5
 801a566:	4638      	mov	r0, r7
 801a568:	f7ff ffc2 	bl	801a4f0 <sbrk_aligned>
 801a56c:	1c43      	adds	r3, r0, #1
 801a56e:	4604      	mov	r4, r0
 801a570:	d14d      	bne.n	801a60e <_malloc_r+0xde>
 801a572:	6834      	ldr	r4, [r6, #0]
 801a574:	4626      	mov	r6, r4
 801a576:	2e00      	cmp	r6, #0
 801a578:	d140      	bne.n	801a5fc <_malloc_r+0xcc>
 801a57a:	6823      	ldr	r3, [r4, #0]
 801a57c:	4631      	mov	r1, r6
 801a57e:	4638      	mov	r0, r7
 801a580:	eb04 0803 	add.w	r8, r4, r3
 801a584:	f000 f848 	bl	801a618 <_sbrk_r>
 801a588:	4580      	cmp	r8, r0
 801a58a:	d13a      	bne.n	801a602 <_malloc_r+0xd2>
 801a58c:	6821      	ldr	r1, [r4, #0]
 801a58e:	3503      	adds	r5, #3
 801a590:	1a6d      	subs	r5, r5, r1
 801a592:	f025 0503 	bic.w	r5, r5, #3
 801a596:	3508      	adds	r5, #8
 801a598:	2d0c      	cmp	r5, #12
 801a59a:	bf38      	it	cc
 801a59c:	250c      	movcc	r5, #12
 801a59e:	4629      	mov	r1, r5
 801a5a0:	4638      	mov	r0, r7
 801a5a2:	f7ff ffa5 	bl	801a4f0 <sbrk_aligned>
 801a5a6:	3001      	adds	r0, #1
 801a5a8:	d02b      	beq.n	801a602 <_malloc_r+0xd2>
 801a5aa:	6823      	ldr	r3, [r4, #0]
 801a5ac:	442b      	add	r3, r5
 801a5ae:	6023      	str	r3, [r4, #0]
 801a5b0:	e00e      	b.n	801a5d0 <_malloc_r+0xa0>
 801a5b2:	6822      	ldr	r2, [r4, #0]
 801a5b4:	1b52      	subs	r2, r2, r5
 801a5b6:	d41e      	bmi.n	801a5f6 <_malloc_r+0xc6>
 801a5b8:	2a0b      	cmp	r2, #11
 801a5ba:	d916      	bls.n	801a5ea <_malloc_r+0xba>
 801a5bc:	1961      	adds	r1, r4, r5
 801a5be:	42a3      	cmp	r3, r4
 801a5c0:	6025      	str	r5, [r4, #0]
 801a5c2:	bf18      	it	ne
 801a5c4:	6059      	strne	r1, [r3, #4]
 801a5c6:	6863      	ldr	r3, [r4, #4]
 801a5c8:	bf08      	it	eq
 801a5ca:	6031      	streq	r1, [r6, #0]
 801a5cc:	5162      	str	r2, [r4, r5]
 801a5ce:	604b      	str	r3, [r1, #4]
 801a5d0:	4638      	mov	r0, r7
 801a5d2:	f104 060b 	add.w	r6, r4, #11
 801a5d6:	f000 f8cf 	bl	801a778 <__malloc_unlock>
 801a5da:	f026 0607 	bic.w	r6, r6, #7
 801a5de:	1d23      	adds	r3, r4, #4
 801a5e0:	1af2      	subs	r2, r6, r3
 801a5e2:	d0b6      	beq.n	801a552 <_malloc_r+0x22>
 801a5e4:	1b9b      	subs	r3, r3, r6
 801a5e6:	50a3      	str	r3, [r4, r2]
 801a5e8:	e7b3      	b.n	801a552 <_malloc_r+0x22>
 801a5ea:	6862      	ldr	r2, [r4, #4]
 801a5ec:	42a3      	cmp	r3, r4
 801a5ee:	bf0c      	ite	eq
 801a5f0:	6032      	streq	r2, [r6, #0]
 801a5f2:	605a      	strne	r2, [r3, #4]
 801a5f4:	e7ec      	b.n	801a5d0 <_malloc_r+0xa0>
 801a5f6:	4623      	mov	r3, r4
 801a5f8:	6864      	ldr	r4, [r4, #4]
 801a5fa:	e7b2      	b.n	801a562 <_malloc_r+0x32>
 801a5fc:	4634      	mov	r4, r6
 801a5fe:	6876      	ldr	r6, [r6, #4]
 801a600:	e7b9      	b.n	801a576 <_malloc_r+0x46>
 801a602:	230c      	movs	r3, #12
 801a604:	603b      	str	r3, [r7, #0]
 801a606:	4638      	mov	r0, r7
 801a608:	f000 f8b6 	bl	801a778 <__malloc_unlock>
 801a60c:	e7a1      	b.n	801a552 <_malloc_r+0x22>
 801a60e:	6025      	str	r5, [r4, #0]
 801a610:	e7de      	b.n	801a5d0 <_malloc_r+0xa0>
 801a612:	bf00      	nop
 801a614:	24006910 	.word	0x24006910

0801a618 <_sbrk_r>:
 801a618:	b538      	push	{r3, r4, r5, lr}
 801a61a:	4d06      	ldr	r5, [pc, #24]	; (801a634 <_sbrk_r+0x1c>)
 801a61c:	2300      	movs	r3, #0
 801a61e:	4604      	mov	r4, r0
 801a620:	4608      	mov	r0, r1
 801a622:	602b      	str	r3, [r5, #0]
 801a624:	f7ea f8ca 	bl	80047bc <_sbrk>
 801a628:	1c43      	adds	r3, r0, #1
 801a62a:	d102      	bne.n	801a632 <_sbrk_r+0x1a>
 801a62c:	682b      	ldr	r3, [r5, #0]
 801a62e:	b103      	cbz	r3, 801a632 <_sbrk_r+0x1a>
 801a630:	6023      	str	r3, [r4, #0]
 801a632:	bd38      	pop	{r3, r4, r5, pc}
 801a634:	24006918 	.word	0x24006918

0801a638 <__sread>:
 801a638:	b510      	push	{r4, lr}
 801a63a:	460c      	mov	r4, r1
 801a63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a640:	f000 f8a0 	bl	801a784 <_read_r>
 801a644:	2800      	cmp	r0, #0
 801a646:	bfab      	itete	ge
 801a648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a64a:	89a3      	ldrhlt	r3, [r4, #12]
 801a64c:	181b      	addge	r3, r3, r0
 801a64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a652:	bfac      	ite	ge
 801a654:	6563      	strge	r3, [r4, #84]	; 0x54
 801a656:	81a3      	strhlt	r3, [r4, #12]
 801a658:	bd10      	pop	{r4, pc}

0801a65a <__swrite>:
 801a65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a65e:	461f      	mov	r7, r3
 801a660:	898b      	ldrh	r3, [r1, #12]
 801a662:	05db      	lsls	r3, r3, #23
 801a664:	4605      	mov	r5, r0
 801a666:	460c      	mov	r4, r1
 801a668:	4616      	mov	r6, r2
 801a66a:	d505      	bpl.n	801a678 <__swrite+0x1e>
 801a66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a670:	2302      	movs	r3, #2
 801a672:	2200      	movs	r2, #0
 801a674:	f000 f868 	bl	801a748 <_lseek_r>
 801a678:	89a3      	ldrh	r3, [r4, #12]
 801a67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a67e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a682:	81a3      	strh	r3, [r4, #12]
 801a684:	4632      	mov	r2, r6
 801a686:	463b      	mov	r3, r7
 801a688:	4628      	mov	r0, r5
 801a68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a68e:	f000 b817 	b.w	801a6c0 <_write_r>

0801a692 <__sseek>:
 801a692:	b510      	push	{r4, lr}
 801a694:	460c      	mov	r4, r1
 801a696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a69a:	f000 f855 	bl	801a748 <_lseek_r>
 801a69e:	1c43      	adds	r3, r0, #1
 801a6a0:	89a3      	ldrh	r3, [r4, #12]
 801a6a2:	bf15      	itete	ne
 801a6a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a6ae:	81a3      	strheq	r3, [r4, #12]
 801a6b0:	bf18      	it	ne
 801a6b2:	81a3      	strhne	r3, [r4, #12]
 801a6b4:	bd10      	pop	{r4, pc}

0801a6b6 <__sclose>:
 801a6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6ba:	f000 b813 	b.w	801a6e4 <_close_r>
	...

0801a6c0 <_write_r>:
 801a6c0:	b538      	push	{r3, r4, r5, lr}
 801a6c2:	4d07      	ldr	r5, [pc, #28]	; (801a6e0 <_write_r+0x20>)
 801a6c4:	4604      	mov	r4, r0
 801a6c6:	4608      	mov	r0, r1
 801a6c8:	4611      	mov	r1, r2
 801a6ca:	2200      	movs	r2, #0
 801a6cc:	602a      	str	r2, [r5, #0]
 801a6ce:	461a      	mov	r2, r3
 801a6d0:	f7ea f823 	bl	800471a <_write>
 801a6d4:	1c43      	adds	r3, r0, #1
 801a6d6:	d102      	bne.n	801a6de <_write_r+0x1e>
 801a6d8:	682b      	ldr	r3, [r5, #0]
 801a6da:	b103      	cbz	r3, 801a6de <_write_r+0x1e>
 801a6dc:	6023      	str	r3, [r4, #0]
 801a6de:	bd38      	pop	{r3, r4, r5, pc}
 801a6e0:	24006918 	.word	0x24006918

0801a6e4 <_close_r>:
 801a6e4:	b538      	push	{r3, r4, r5, lr}
 801a6e6:	4d06      	ldr	r5, [pc, #24]	; (801a700 <_close_r+0x1c>)
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	4604      	mov	r4, r0
 801a6ec:	4608      	mov	r0, r1
 801a6ee:	602b      	str	r3, [r5, #0]
 801a6f0:	f7ea f82f 	bl	8004752 <_close>
 801a6f4:	1c43      	adds	r3, r0, #1
 801a6f6:	d102      	bne.n	801a6fe <_close_r+0x1a>
 801a6f8:	682b      	ldr	r3, [r5, #0]
 801a6fa:	b103      	cbz	r3, 801a6fe <_close_r+0x1a>
 801a6fc:	6023      	str	r3, [r4, #0]
 801a6fe:	bd38      	pop	{r3, r4, r5, pc}
 801a700:	24006918 	.word	0x24006918

0801a704 <_fstat_r>:
 801a704:	b538      	push	{r3, r4, r5, lr}
 801a706:	4d07      	ldr	r5, [pc, #28]	; (801a724 <_fstat_r+0x20>)
 801a708:	2300      	movs	r3, #0
 801a70a:	4604      	mov	r4, r0
 801a70c:	4608      	mov	r0, r1
 801a70e:	4611      	mov	r1, r2
 801a710:	602b      	str	r3, [r5, #0]
 801a712:	f7ea f82a 	bl	800476a <_fstat>
 801a716:	1c43      	adds	r3, r0, #1
 801a718:	d102      	bne.n	801a720 <_fstat_r+0x1c>
 801a71a:	682b      	ldr	r3, [r5, #0]
 801a71c:	b103      	cbz	r3, 801a720 <_fstat_r+0x1c>
 801a71e:	6023      	str	r3, [r4, #0]
 801a720:	bd38      	pop	{r3, r4, r5, pc}
 801a722:	bf00      	nop
 801a724:	24006918 	.word	0x24006918

0801a728 <_isatty_r>:
 801a728:	b538      	push	{r3, r4, r5, lr}
 801a72a:	4d06      	ldr	r5, [pc, #24]	; (801a744 <_isatty_r+0x1c>)
 801a72c:	2300      	movs	r3, #0
 801a72e:	4604      	mov	r4, r0
 801a730:	4608      	mov	r0, r1
 801a732:	602b      	str	r3, [r5, #0]
 801a734:	f7ea f829 	bl	800478a <_isatty>
 801a738:	1c43      	adds	r3, r0, #1
 801a73a:	d102      	bne.n	801a742 <_isatty_r+0x1a>
 801a73c:	682b      	ldr	r3, [r5, #0]
 801a73e:	b103      	cbz	r3, 801a742 <_isatty_r+0x1a>
 801a740:	6023      	str	r3, [r4, #0]
 801a742:	bd38      	pop	{r3, r4, r5, pc}
 801a744:	24006918 	.word	0x24006918

0801a748 <_lseek_r>:
 801a748:	b538      	push	{r3, r4, r5, lr}
 801a74a:	4d07      	ldr	r5, [pc, #28]	; (801a768 <_lseek_r+0x20>)
 801a74c:	4604      	mov	r4, r0
 801a74e:	4608      	mov	r0, r1
 801a750:	4611      	mov	r1, r2
 801a752:	2200      	movs	r2, #0
 801a754:	602a      	str	r2, [r5, #0]
 801a756:	461a      	mov	r2, r3
 801a758:	f7ea f822 	bl	80047a0 <_lseek>
 801a75c:	1c43      	adds	r3, r0, #1
 801a75e:	d102      	bne.n	801a766 <_lseek_r+0x1e>
 801a760:	682b      	ldr	r3, [r5, #0]
 801a762:	b103      	cbz	r3, 801a766 <_lseek_r+0x1e>
 801a764:	6023      	str	r3, [r4, #0]
 801a766:	bd38      	pop	{r3, r4, r5, pc}
 801a768:	24006918 	.word	0x24006918

0801a76c <__malloc_lock>:
 801a76c:	4801      	ldr	r0, [pc, #4]	; (801a774 <__malloc_lock+0x8>)
 801a76e:	f7ff be0b 	b.w	801a388 <__retarget_lock_acquire_recursive>
 801a772:	bf00      	nop
 801a774:	2400690c 	.word	0x2400690c

0801a778 <__malloc_unlock>:
 801a778:	4801      	ldr	r0, [pc, #4]	; (801a780 <__malloc_unlock+0x8>)
 801a77a:	f7ff be06 	b.w	801a38a <__retarget_lock_release_recursive>
 801a77e:	bf00      	nop
 801a780:	2400690c 	.word	0x2400690c

0801a784 <_read_r>:
 801a784:	b538      	push	{r3, r4, r5, lr}
 801a786:	4d07      	ldr	r5, [pc, #28]	; (801a7a4 <_read_r+0x20>)
 801a788:	4604      	mov	r4, r0
 801a78a:	4608      	mov	r0, r1
 801a78c:	4611      	mov	r1, r2
 801a78e:	2200      	movs	r2, #0
 801a790:	602a      	str	r2, [r5, #0]
 801a792:	461a      	mov	r2, r3
 801a794:	f7e9 ffa4 	bl	80046e0 <_read>
 801a798:	1c43      	adds	r3, r0, #1
 801a79a:	d102      	bne.n	801a7a2 <_read_r+0x1e>
 801a79c:	682b      	ldr	r3, [r5, #0]
 801a79e:	b103      	cbz	r3, 801a7a2 <_read_r+0x1e>
 801a7a0:	6023      	str	r3, [r4, #0]
 801a7a2:	bd38      	pop	{r3, r4, r5, pc}
 801a7a4:	24006918 	.word	0x24006918

0801a7a8 <_init>:
 801a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7aa:	bf00      	nop
 801a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7ae:	bc08      	pop	{r3}
 801a7b0:	469e      	mov	lr, r3
 801a7b2:	4770      	bx	lr

0801a7b4 <_fini>:
 801a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7b6:	bf00      	nop
 801a7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7ba:	bc08      	pop	{r3}
 801a7bc:	469e      	mov	lr, r3
 801a7be:	4770      	bx	lr
