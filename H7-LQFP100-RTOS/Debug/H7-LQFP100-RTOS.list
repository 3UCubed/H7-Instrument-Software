
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d88  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08014028  08014028  00024028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080143d8  080143d8  000243d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080143e0  080143e0  000243e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080143e4  080143e4  000243e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  080143e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004f1c  24000080  08014460  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24004f9c  08014460  00034f9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000309dd  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000527a  00000000  00000000  00060a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002530  00000000  00000000  00065d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002348  00000000  00000000  00068230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000748b  00000000  00000000  0006a578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ede4  00000000  00000000  00071a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d515  00000000  00000000  000a07e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022dcfc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a9d4  00000000  00000000  0022dd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014010 	.word	0x08014010

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08014010 	.word	0x08014010

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f00f fa50 	bl	800fb40 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00f fa45 	bl	800fb40 <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00f fa3a 	bl	800fb40 <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f012 fdb8 	bl	8013244 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240003bc 	.word	0x240003bc
 80006e0:	24000550 	.word	0x24000550
 80006e4:	24000408 	.word	0x24000408
 80006e8:	24000454 	.word	0x24000454
 80006ec:	08014068 	.word	0x08014068

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	496b      	ldr	r1, [pc, #428]	; (80008a8 <HAL_UART_RxCpltCallback+0x1b8>)
 80006fc:	486b      	ldr	r0, [pc, #428]	; (80008ac <HAL_UART_RxCpltCallback+0x1bc>)
 80006fe:	f00c fd35 	bl	800d16c <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4b69      	ldr	r3, [pc, #420]	; (80008a8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 80c8 	bhi.w	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080007e9 	.word	0x080007e9
 800071c:	080007f9 	.word	0x080007f9
 8000720:	08000809 	.word	0x08000809
 8000724:	08000819 	.word	0x08000819
 8000728:	08000829 	.word	0x08000829
 800072c:	08000839 	.word	0x08000839
 8000730:	08000849 	.word	0x08000849
 8000734:	08000859 	.word	0x08000859
 8000738:	080008a1 	.word	0x080008a1
 800073c:	080008a1 	.word	0x080008a1
 8000740:	080007b9 	.word	0x080007b9
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000869 	.word	0x08000869
 800074c:	08000871 	.word	0x08000871
 8000750:	08000881 	.word	0x08000881
 8000754:	08000891 	.word	0x08000891
 8000758:	08000879 	.word	0x08000879
 800075c:	08000889 	.word	0x08000889
 8000760:	08000899 	.word	0x08000899
 8000764:	080007f1 	.word	0x080007f1
 8000768:	08000801 	.word	0x08000801
 800076c:	08000811 	.word	0x08000811
 8000770:	08000821 	.word	0x08000821
 8000774:	08000831 	.word	0x08000831
 8000778:	08000841 	.word	0x08000841
 800077c:	08000851 	.word	0x08000851
 8000780:	08000861 	.word	0x08000861
 8000784:	080007c1 	.word	0x080007c1
 8000788:	080007c9 	.word	0x080007c9
 800078c:	080007d1 	.word	0x080007d1
 8000790:	080008a1 	.word	0x080008a1
 8000794:	080008a1 	.word	0x080008a1
 8000798:	080008a1 	.word	0x080008a1
 800079c:	080008a1 	.word	0x080008a1
 80007a0:	080008a1 	.word	0x080008a1
 80007a4:	080008a1 	.word	0x080008a1
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	080007e1 	.word	0x080007e1
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	483f      	ldr	r0, [pc, #252]	; (80008b0 <HAL_UART_RxCpltCallback+0x1c0>)
 80007b2:	f012 fd47 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
		break;
 80007b6:	e073      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007b8:	483e      	ldr	r0, [pc, #248]	; (80008b4 <HAL_UART_RxCpltCallback+0x1c4>)
 80007ba:	f012 fd43 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
		break;
 80007be:	e06f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007c0:	483d      	ldr	r0, [pc, #244]	; (80008b8 <HAL_UART_RxCpltCallback+0x1c8>)
 80007c2:	f012 fd3f 	bl	8013244 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 80007c6:	e06b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1C: {
		printf("Step Down\n");
 80007c8:	483c      	ldr	r0, [pc, #240]	; (80008bc <HAL_UART_RxCpltCallback+0x1cc>)
 80007ca:	f012 fd3b 	bl	8013244 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 80007ce:	e067      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 80007d0:	483b      	ldr	r0, [pc, #236]	; (80008c0 <HAL_UART_RxCpltCallback+0x1d0>)
 80007d2:	f012 fd37 	bl	8013244 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 80007d6:	e063      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x24: {
		printf("Factor Up\n");
 80007d8:	483a      	ldr	r0, [pc, #232]	; (80008c4 <HAL_UART_RxCpltCallback+0x1d4>)
 80007da:	f012 fd33 	bl	8013244 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 80007de:	e05f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x25: {
		printf("Factor Down\n");
 80007e0:	4839      	ldr	r0, [pc, #228]	; (80008c8 <HAL_UART_RxCpltCallback+0x1d8>)
 80007e2:	f012 fd2f 	bl	8013244 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 80007e6:	e05b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80007e8:	4838      	ldr	r0, [pc, #224]	; (80008cc <HAL_UART_RxCpltCallback+0x1dc>)
 80007ea:	f012 fd2b 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
		break;
 80007ee:	e057      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80007f0:	4837      	ldr	r0, [pc, #220]	; (80008d0 <HAL_UART_RxCpltCallback+0x1e0>)
 80007f2:	f012 fd27 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
		break;
 80007f6:	e053      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 80007f8:	4836      	ldr	r0, [pc, #216]	; (80008d4 <HAL_UART_RxCpltCallback+0x1e4>)
 80007fa:	f012 fd23 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
		break;
 80007fe:	e04f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000800:	4835      	ldr	r0, [pc, #212]	; (80008d8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000802:	f012 fd1f 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
		break;
 8000806:	e04b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000808:	4834      	ldr	r0, [pc, #208]	; (80008dc <HAL_UART_RxCpltCallback+0x1ec>)
 800080a:	f012 fd1b 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
		break;
 800080e:	e047      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 8000810:	4833      	ldr	r0, [pc, #204]	; (80008e0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000812:	f012 fd17 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
		break;
 8000816:	e043      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000818:	4832      	ldr	r0, [pc, #200]	; (80008e4 <HAL_UART_RxCpltCallback+0x1f4>)
 800081a:	f012 fd13 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
		break;
 800081e:	e03f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000820:	4831      	ldr	r0, [pc, #196]	; (80008e8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000822:	f012 fd0f 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
		break;
 8000826:	e03b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 8000828:	4830      	ldr	r0, [pc, #192]	; (80008ec <HAL_UART_RxCpltCallback+0x1fc>)
 800082a:	f012 fd0b 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
		break;
 800082e:	e037      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 8000830:	482f      	ldr	r0, [pc, #188]	; (80008f0 <HAL_UART_RxCpltCallback+0x200>)
 8000832:	f012 fd07 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
		break;
 8000836:	e033      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 8000838:	482e      	ldr	r0, [pc, #184]	; (80008f4 <HAL_UART_RxCpltCallback+0x204>)
 800083a:	f012 fd03 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
		break;
 800083e:	e02f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 8000840:	482d      	ldr	r0, [pc, #180]	; (80008f8 <HAL_UART_RxCpltCallback+0x208>)
 8000842:	f012 fcff 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
		break;
 8000846:	e02b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 8000848:	482c      	ldr	r0, [pc, #176]	; (80008fc <HAL_UART_RxCpltCallback+0x20c>)
 800084a:	f012 fcfb 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
		break;
 800084e:	e027      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000850:	482b      	ldr	r0, [pc, #172]	; (8000900 <HAL_UART_RxCpltCallback+0x210>)
 8000852:	f012 fcf7 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
		break;
 8000856:	e023      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000858:	482a      	ldr	r0, [pc, #168]	; (8000904 <HAL_UART_RxCpltCallback+0x214>)
 800085a:	f012 fcf3 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
		break;
 800085e:	e01f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000860:	4829      	ldr	r0, [pc, #164]	; (8000908 <HAL_UART_RxCpltCallback+0x218>)
 8000862:	f012 fcef 	bl	8013244 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
		break;
 8000866:	e01b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000868:	4828      	ldr	r0, [pc, #160]	; (800090c <HAL_UART_RxCpltCallback+0x21c>)
 800086a:	f012 fceb 	bl	8013244 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 800086e:	e017      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000870:	4827      	ldr	r0, [pc, #156]	; (8000910 <HAL_UART_RxCpltCallback+0x220>)
 8000872:	f012 fce7 	bl	8013244 <puts>
//		PMT_ON = 1;
//		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
		break;
 8000876:	e013      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000878:	4826      	ldr	r0, [pc, #152]	; (8000914 <HAL_UART_RxCpltCallback+0x224>)
 800087a:	f012 fce3 	bl	8013244 <puts>
//		PMT_ON = 0;
//		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
		break;
 800087e:	e00f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000880:	4825      	ldr	r0, [pc, #148]	; (8000918 <HAL_UART_RxCpltCallback+0x228>)
 8000882:	f012 fcdf 	bl	8013244 <puts>
		//ERPA_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
		break;
 8000886:	e00b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000888:	4824      	ldr	r0, [pc, #144]	; (800091c <HAL_UART_RxCpltCallback+0x22c>)
 800088a:	f012 fcdb 	bl	8013244 <puts>
		//ERPA_ON = 0;
		//HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
		break;
 800088e:	e007      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000890:	4823      	ldr	r0, [pc, #140]	; (8000920 <HAL_UART_RxCpltCallback+0x230>)
 8000892:	f012 fcd7 	bl	8013244 <puts>
		//HK_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 8000896:	e003      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x12: {
		printf("HK OFF\n");
 8000898:	4822      	ldr	r0, [pc, #136]	; (8000924 <HAL_UART_RxCpltCallback+0x234>)
 800089a:	f012 fcd3 	bl	8013244 <puts>
		//HK_ON = 0;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 800089e:	bf00      	nop
	}
	}
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	24000554 	.word	0x24000554
 80008ac:	240004a0 	.word	0x240004a0
 80008b0:	08014080 	.word	0x08014080
 80008b4:	08014088 	.word	0x08014088
 80008b8:	08014094 	.word	0x08014094
 80008bc:	0801409c 	.word	0x0801409c
 80008c0:	080140a8 	.word	0x080140a8
 80008c4:	080140bc 	.word	0x080140bc
 80008c8:	080140c8 	.word	0x080140c8
 80008cc:	080140d4 	.word	0x080140d4
 80008d0:	080140e0 	.word	0x080140e0
 80008d4:	080140ec 	.word	0x080140ec
 80008d8:	080140f8 	.word	0x080140f8
 80008dc:	08014108 	.word	0x08014108
 80008e0:	08014114 	.word	0x08014114
 80008e4:	08014120 	.word	0x08014120
 80008e8:	08014130 	.word	0x08014130
 80008ec:	08014140 	.word	0x08014140
 80008f0:	0801414c 	.word	0x0801414c
 80008f4:	08014158 	.word	0x08014158
 80008f8:	08014164 	.word	0x08014164
 80008fc:	08014170 	.word	0x08014170
 8000900:	0801417c 	.word	0x0801417c
 8000904:	08014188 	.word	0x08014188
 8000908:	08014194 	.word	0x08014194
 800090c:	080141a4 	.word	0x080141a4
 8000910:	080141b4 	.word	0x080141b4
 8000914:	080141bc 	.word	0x080141bc
 8000918:	080141c4 	.word	0x080141c4
 800091c:	080141cc 	.word	0x080141cc
 8000920:	080141d8 	.word	0x080141d8
 8000924:	080141e0 	.word	0x080141e0

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f001 fff2 	bl	8002914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f88e 	bl	8000a50 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000934:	f000 f90a 	bl	8000b4c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 fda8 	bl	800148c <MX_GPIO_Init>
  MX_DMA_Init();
 800093c:	f000 fd76 	bl	800142c <MX_DMA_Init>
  MX_TIM3_Init();
 8000940:	f000 fcda 	bl	80012f8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000944:	f000 fd26 	bl	8001394 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000948:	f000 fb1a 	bl	8000f80 <MX_I2C1_Init>
  MX_SPI2_Init();
 800094c:	f000 fb58 	bl	8001000 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000950:	f000 fc5c 	bl	800120c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000954:	f000 fbac 	bl	80010b0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000958:	f000 fa4e 	bl	8000df8 <MX_ADC3_Init>
  MX_ADC1_Init();
 800095c:	f000 f926 	bl	8000bac <MX_ADC1_Init>
  MX_DAC1_Init();
 8000960:	f000 fadc 	bl	8000f1c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000964:	2100      	movs	r1, #0
 8000966:	4825      	ldr	r0, [pc, #148]	; (80009fc <main+0xd4>)
 8000968:	f00a ffbc 	bl	800b8e4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800096c:	2100      	movs	r1, #0
 800096e:	4824      	ldr	r0, [pc, #144]	; (8000a00 <main+0xd8>)
 8000970:	f00a ffb8 	bl	800b8e4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000974:	2100      	movs	r1, #0
 8000976:	4823      	ldr	r0, [pc, #140]	; (8000a04 <main+0xdc>)
 8000978:	f00a ffb4 	bl	800b8e4 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800097c:	f00e ff8a 	bl	800f894 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000980:	2200      	movs	r2, #0
 8000982:	2108      	movs	r1, #8
 8000984:	2010      	movs	r0, #16
 8000986:	f00f f985 	bl	800fc94 <osMessageQueueNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <main+0xe0>)
 800098e:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000990:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <main+0xe4>)
 8000992:	2100      	movs	r1, #0
 8000994:	481e      	ldr	r0, [pc, #120]	; (8000a10 <main+0xe8>)
 8000996:	f00e ffc7 	bl	800f928 <osThreadNew>
 800099a:	4603      	mov	r3, r0
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <main+0xec>)
 800099e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <main+0xf0>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	481d      	ldr	r0, [pc, #116]	; (8000a1c <main+0xf4>)
 80009a6:	f00e ffbf 	bl	800f928 <osThreadNew>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <main+0xf8>)
 80009ae:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80009b0:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <main+0xfc>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <main+0x100>)
 80009b6:	f00e ffb7 	bl	800f928 <osThreadNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <main+0x104>)
 80009be:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <main+0x108>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	481b      	ldr	r0, [pc, #108]	; (8000a34 <main+0x10c>)
 80009c6:	f00e ffaf 	bl	800f928 <osThreadNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <main+0x110>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 80009d0:	4a1a      	ldr	r2, [pc, #104]	; (8000a3c <main+0x114>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	481a      	ldr	r0, [pc, #104]	; (8000a40 <main+0x118>)
 80009d6:	f00e ffa7 	bl	800f928 <osThreadNew>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <main+0x11c>)
 80009de:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f00f f86e 	bl	800fac2 <osEventFlagsNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <main+0x120>)
 80009ea:	6013      	str	r3, [r2, #0]
  system_setup();
 80009ec:	f000 fdb8 	bl	8001560 <system_setup>
  printf("Starting kernal...\n");
 80009f0:	4816      	ldr	r0, [pc, #88]	; (8000a4c <main+0x124>)
 80009f2:	f012 fc27 	bl	8013244 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009f6:	f00e ff71 	bl	800f8dc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80009fa:	e7fe      	b.n	80009fa <main+0xd2>
 80009fc:	240003bc 	.word	0x240003bc
 8000a00:	24000408 	.word	0x24000408
 8000a04:	24000454 	.word	0x24000454
 8000a08:	24000548 	.word	0x24000548
 8000a0c:	0801424c 	.word	0x0801424c
 8000a10:	08001afd 	.word	0x08001afd
 8000a14:	24000534 	.word	0x24000534
 8000a18:	08014270 	.word	0x08014270
 8000a1c:	08001b35 	.word	0x08001b35
 8000a20:	24000538 	.word	0x24000538
 8000a24:	08014294 	.word	0x08014294
 8000a28:	08001b6d 	.word	0x08001b6d
 8000a2c:	2400053c 	.word	0x2400053c
 8000a30:	080142b8 	.word	0x080142b8
 8000a34:	08001ba5 	.word	0x08001ba5
 8000a38:	24000540 	.word	0x24000540
 8000a3c:	080142dc 	.word	0x080142dc
 8000a40:	08001bc9 	.word	0x08001bc9
 8000a44:	24000544 	.word	0x24000544
 8000a48:	24000550 	.word	0x24000550
 8000a4c:	080141e8 	.word	0x080141e8

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	; 0x70
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	224c      	movs	r2, #76	; 0x4c
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f012 fa6c 	bl	8012f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f012 fa66 	bl	8012f3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f006 ffc9 	bl	8007a08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <SystemClock_Config+0xf4>)
 8000a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <SystemClock_Config+0xf4>)
 8000a80:	f023 0301 	bic.w	r3, r3, #1
 8000a84:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a86:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <SystemClock_Config+0xf4>)
 8000a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <SystemClock_Config+0xf8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a98:	4a2b      	ldr	r2, [pc, #172]	; (8000b48 <SystemClock_Config+0xf8>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <SystemClock_Config+0xf8>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aac:	bf00      	nop
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <SystemClock_Config+0xf8>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aba:	d1f8      	bne.n	8000aae <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000abc:	2302      	movs	r3, #2
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac4:	2340      	movs	r3, #64	; 0x40
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000acc:	2300      	movs	r3, #0
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000ad4:	2309      	movs	r3, #9
 8000ad6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000aec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000af0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4618      	mov	r0, r3
 8000af8:	f006 ffc0 	bl	8007a7c <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b02:	f001 f8ab 	bl	8001c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	233f      	movs	r3, #63	; 0x3f
 8000b08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b1a:	2340      	movs	r3, #64	; 0x40
 8000b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f007 fbff 	bl	8008330 <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000b38:	f001 f890 	bl	8001c5c <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3770      	adds	r7, #112	; 0x70
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58000400 	.word	0x58000400
 8000b48:	58024800 	.word	0x58024800

08000b4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0b0      	sub	sp, #192	; 0xc0
 8000b50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	22c0      	movs	r2, #192	; 0xc0
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f012 f9ef 	bl	8012f3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b62:	f04f 0300 	mov.w	r3, #0
 8000b66:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000b6e:	2309      	movs	r3, #9
 8000b70:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000b72:	2304      	movs	r3, #4
 8000b74:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b7e:	23c0      	movs	r3, #192	; 0xc0
 8000b80:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b82:	2320      	movs	r3, #32
 8000b84:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000b86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	4618      	mov	r0, r3
 8000b96:	f007 ff99 	bl	8008acc <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000ba0:	f001 f85c 	bl	8001c5c <Error_Handler>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	37c0      	adds	r7, #192	; 0xc0
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bd0:	4b7c      	ldr	r3, [pc, #496]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bd2:	4a7d      	ldr	r2, [pc, #500]	; (8000dc8 <MX_ADC1_Init+0x21c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000bd6:	4b7b      	ldr	r3, [pc, #492]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bd8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bde:	4b79      	ldr	r3, [pc, #484]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000be0:	2208      	movs	r2, #8
 8000be2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000be4:	4b77      	ldr	r3, [pc, #476]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bea:	4b76      	ldr	r3, [pc, #472]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bf0:	4b74      	ldr	r3, [pc, #464]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf6:	4b73      	ldr	r3, [pc, #460]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000bfc:	4b71      	ldr	r3, [pc, #452]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bfe:	220b      	movs	r2, #11
 8000c00:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c02:	4b70      	ldr	r3, [pc, #448]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c08:	4b6e      	ldr	r3, [pc, #440]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0e:	4b6d      	ldr	r3, [pc, #436]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c14:	4b6b      	ldr	r3, [pc, #428]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c16:	2203      	movs	r2, #3
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c1a:	4b6a      	ldr	r3, [pc, #424]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c20:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c22:	4b68      	ldr	r3, [pc, #416]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c28:	4b66      	ldr	r3, [pc, #408]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c30:	4864      	ldr	r0, [pc, #400]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c32:	f002 f8fb 	bl	8002e2c <HAL_ADC_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c3c:	f001 f80e 	bl	8001c5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	485e      	ldr	r0, [pc, #376]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c4c:	f003 fa16 	bl	800407c <HAL_ADCEx_MultiModeConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c56:	f001 f801 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c5a:	4b5c      	ldr	r3, [pc, #368]	; (8000dcc <MX_ADC1_Init+0x220>)
 8000c5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5e:	2306      	movs	r3, #6
 8000c60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000c62:	2307      	movs	r3, #7
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c66:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c6a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4851      	ldr	r0, [pc, #324]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c7e:	f002 fb59 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000c88:	f000 ffe8 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c8c:	4b50      	ldr	r3, [pc, #320]	; (8000dd0 <MX_ADC1_Init+0x224>)
 8000c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c90:	230c      	movs	r3, #12
 8000c92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	484a      	ldr	r0, [pc, #296]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c9a:	f002 fb4b 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ca4:	f000 ffda 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ca8:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <MX_ADC1_Init+0x228>)
 8000caa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cac:	2312      	movs	r3, #18
 8000cae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4843      	ldr	r0, [pc, #268]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000cb6:	f002 fb3d 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000cc0:	f000 ffcc 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <MX_ADC1_Init+0x22c>)
 8000cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cc8:	2318      	movs	r3, #24
 8000cca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4619      	mov	r1, r3
 8000cd0:	483c      	ldr	r0, [pc, #240]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000cd2:	f002 fb2f 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000cdc:	f000 ffbe 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <MX_ADC1_Init+0x230>)
 8000ce2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4835      	ldr	r0, [pc, #212]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000cf0:	f002 fb20 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000cfa:	f000 ffaf 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000cfe:	4b38      	ldr	r3, [pc, #224]	; (8000de0 <MX_ADC1_Init+0x234>)
 8000d00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d02:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000d06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	482d      	ldr	r0, [pc, #180]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000d0e:	f002 fb11 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000d18:	f000 ffa0 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d1c:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <MX_ADC1_Init+0x238>)
 8000d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d20:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000d24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4826      	ldr	r0, [pc, #152]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000d2c:	f002 fb02 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000d36:	f000 ff91 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <MX_ADC1_Init+0x23c>)
 8000d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d3e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	4619      	mov	r1, r3
 8000d48:	481e      	ldr	r0, [pc, #120]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000d4a:	f002 faf3 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000d54:	f000 ff82 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <MX_ADC1_Init+0x240>)
 8000d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000d5c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000d60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4817      	ldr	r0, [pc, #92]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000d68:	f002 fae4 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000d72:	f000 ff73 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <MX_ADC1_Init+0x244>)
 8000d78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000d8a:	f002 fad3 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000d94:	f000 ff62 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_ADC1_Init+0x248>)
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000d9c:	f240 2306 	movw	r3, #518	; 0x206
 8000da0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000da2:	2307      	movs	r3, #7
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000dac:	f002 fac2 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000db6:	f000 ff51 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2400009c 	.word	0x2400009c
 8000dc8:	40022000 	.word	0x40022000
 8000dcc:	0c900008 	.word	0x0c900008
 8000dd0:	10c00010 	.word	0x10c00010
 8000dd4:	14f00020 	.word	0x14f00020
 8000dd8:	1d500080 	.word	0x1d500080
 8000ddc:	21800100 	.word	0x21800100
 8000de0:	25b00200 	.word	0x25b00200
 8000de4:	2a000400 	.word	0x2a000400
 8000de8:	2e300800 	.word	0x2e300800
 8000dec:	3ac04000 	.word	0x3ac04000
 8000df0:	3ef08000 	.word	0x3ef08000
 8000df4:	47520000 	.word	0x47520000

08000df8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]
 8000e0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e10:	4b3d      	ldr	r3, [pc, #244]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e12:	4a3e      	ldr	r2, [pc, #248]	; (8000f0c <MX_ADC3_Init+0x114>)
 8000e14:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e16:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e18:	2208      	movs	r2, #8
 8000e1a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e24:	2204      	movs	r2, #4
 8000e26:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e28:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000e34:	4b34      	ldr	r3, [pc, #208]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e36:	2204      	movs	r2, #4
 8000e38:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e4c:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e4e:	2203      	movs	r2, #3
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e58:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e68:	4827      	ldr	r0, [pc, #156]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e6a:	f001 ffdf 	bl	8002e2c <HAL_ADC_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8000e74:	f000 fef2 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <MX_ADC3_Init+0x118>)
 8000e7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e7c:	2306      	movs	r3, #6
 8000e7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000e80:	2307      	movs	r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e84:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e88:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481b      	ldr	r0, [pc, #108]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e9c:	f002 fa4a 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000ea6:	f000 fed9 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_ADC3_Init+0x11c>)
 8000eac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4814      	ldr	r0, [pc, #80]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000eb8:	f002 fa3c 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000ec2:	f000 fecb 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480d      	ldr	r0, [pc, #52]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000ed4:	f002 fa2e 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8000ede:	f000 febd 	bl	8001c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_ADC3_Init+0x120>)
 8000ee4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ee6:	2318      	movs	r3, #24
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000ef0:	f002 fa20 	bl	8003334 <HAL_ADC_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8000efa:	f000 feaf 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	24000100 	.word	0x24000100
 8000f0c:	58026000 	.word	0x58026000
 8000f10:	cb840000 	.word	0xcb840000
 8000f14:	cfb80000 	.word	0xcfb80000
 8000f18:	04300002 	.word	0x04300002

08000f1c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2224      	movs	r2, #36	; 0x24
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f012 f807 	bl	8012f3c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_DAC1_Init+0x5c>)
 8000f30:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_DAC1_Init+0x60>)
 8000f32:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f34:	4810      	ldr	r0, [pc, #64]	; (8000f78 <MX_DAC1_Init+0x5c>)
 8000f36:	f003 fa5f 	bl	80043f8 <HAL_DAC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f40:	f000 fe8c 	bl	8001c5c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f48:	230a      	movs	r3, #10
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000f50:	2301      	movs	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_DAC1_Init+0x5c>)
 8000f60:	f003 facc 	bl	80044fc <HAL_DAC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000f6a:	f000 fe77 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	24000254 	.word	0x24000254
 8000f7c:	40007400 	.word	0x40007400

08000f80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <MX_I2C1_Init+0x78>)
 8000f88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <MX_I2C1_Init+0x7c>)
 8000f8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fbc:	f006 fbf0 	bl	80077a0 <HAL_I2C_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fc6:	f000 fe49 	bl	8001c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fce:	f006 fc83 	bl	80078d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fd8:	f000 fe40 	bl	8001c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fe0:	f006 fcc5 	bl	800796e <HAL_I2CEx_ConfigDigitalFilter>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 fe37 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	240002e0 	.word	0x240002e0
 8000ff8:	40005400 	.word	0x40005400
 8000ffc:	00707cbb 	.word	0x00707cbb

08001000 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001006:	4a29      	ldr	r2, [pc, #164]	; (80010ac <MX_SPI2_Init+0xac>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800100c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001010:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001014:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001018:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800101c:	220f      	movs	r2, #15
 800101e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800102e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001032:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001036:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800103a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001050:	2200      	movs	r2, #0
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800105e:	2200      	movs	r2, #0
 8001060:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001064:	2200      	movs	r2, #0
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800106a:	2200      	movs	r2, #0
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001070:	2200      	movs	r2, #0
 8001072:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001076:	2200      	movs	r2, #0
 8001078:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800107c:	2200      	movs	r2, #0
 800107e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001082:	2200      	movs	r2, #0
 8001084:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001088:	2200      	movs	r2, #0
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001094:	f00a fa18 	bl	800b4c8 <HAL_SPI_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800109e:	f000 fddd 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	24000334 	.word	0x24000334
 80010ac:	40003800 	.word	0x40003800

080010b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b09a      	sub	sp, #104	; 0x68
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	222c      	movs	r2, #44	; 0x2c
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f011 ff26 	bl	8012f3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <MX_TIM1_Init+0x154>)
 80010f2:	4a45      	ldr	r2, [pc, #276]	; (8001208 <MX_TIM1_Init+0x158>)
 80010f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 80010f6:	4b43      	ldr	r3, [pc, #268]	; (8001204 <MX_TIM1_Init+0x154>)
 80010f8:	227f      	movs	r2, #127	; 0x7f
 80010fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <MX_TIM1_Init+0x154>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001102:	4b40      	ldr	r3, [pc, #256]	; (8001204 <MX_TIM1_Init+0x154>)
 8001104:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001108:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <MX_TIM1_Init+0x154>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001110:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <MX_TIM1_Init+0x154>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <MX_TIM1_Init+0x154>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800111c:	4839      	ldr	r0, [pc, #228]	; (8001204 <MX_TIM1_Init+0x154>)
 800111e:	f00a fb12 	bl	800b746 <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001128:	f000 fd98 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001130:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001132:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001136:	4619      	mov	r1, r3
 8001138:	4832      	ldr	r0, [pc, #200]	; (8001204 <MX_TIM1_Init+0x154>)
 800113a:	f00b f8b9 	bl	800c2b0 <HAL_TIM_ConfigClockSource>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001144:	f000 fd8a 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001148:	482e      	ldr	r0, [pc, #184]	; (8001204 <MX_TIM1_Init+0x154>)
 800114a:	f00a fd25 	bl	800bb98 <HAL_TIM_PWM_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001154:	f000 fd82 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001164:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001168:	4619      	mov	r1, r3
 800116a:	4826      	ldr	r0, [pc, #152]	; (8001204 <MX_TIM1_Init+0x154>)
 800116c:	f00b fdf6 	bl	800cd5c <HAL_TIMEx_MasterConfigSynchronization>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001176:	f000 fd71 	bl	8001c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117a:	2360      	movs	r3, #96	; 0x60
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800117e:	f240 13df 	movw	r3, #479	; 0x1df
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <MX_TIM1_Init+0x154>)
 80011a2:	f00a ff71 	bl	800c088 <HAL_TIM_PWM_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80011ac:	f000 fd56 	bl	8001c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4807      	ldr	r0, [pc, #28]	; (8001204 <MX_TIM1_Init+0x154>)
 80011e6:	f00b fe47 	bl	800ce78 <HAL_TIMEx_ConfigBreakDeadTime>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80011f0:	f000 fd34 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <MX_TIM1_Init+0x154>)
 80011f6:	f001 f83f 	bl	8002278 <HAL_TIM_MspPostInit>

}
 80011fa:	bf00      	nop
 80011fc:	3768      	adds	r7, #104	; 0x68
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	240003bc 	.word	0x240003bc
 8001208:	40010000 	.word	0x40010000

0800120c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001244:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001248:	223f      	movs	r2, #63	; 0x3f
 800124a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <MX_TIM2_Init+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001254:	f640 4234 	movw	r2, #3124	; 0xc34
 8001258:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_TIM2_Init+0xe8>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001266:	4823      	ldr	r0, [pc, #140]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001268:	f00a fa6d 	bl	800b746 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001272:	f000 fcf3 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001280:	4619      	mov	r1, r3
 8001282:	481c      	ldr	r0, [pc, #112]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001284:	f00b f814 	bl	800c2b0 <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800128e:	f000 fce5 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001292:	4818      	ldr	r0, [pc, #96]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001294:	f00a fc80 	bl	800bb98 <HAL_TIM_PWM_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800129e:	f000 fcdd 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012a2:	2320      	movs	r3, #32
 80012a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	4810      	ldr	r0, [pc, #64]	; (80012f4 <MX_TIM2_Init+0xe8>)
 80012b2:	f00b fd53 	bl	800cd5c <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012bc:	f000 fcce 	bl	8001c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c0:	2360      	movs	r3, #96	; 0x60
 80012c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	220c      	movs	r2, #12
 80012d4:	4619      	mov	r1, r3
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM2_Init+0xe8>)
 80012d8:	f00a fed6 	bl	800c088 <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012e2:	f000 fcbb 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM2_Init+0xe8>)
 80012e8:	f000 ffc6 	bl	8002278 <HAL_TIM_MspPostInit>

}
 80012ec:	bf00      	nop
 80012ee:	3738      	adds	r7, #56	; 0x38
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	24000408 	.word	0x24000408

080012f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_TIM3_Init+0x94>)
 8001318:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <MX_TIM3_Init+0x98>)
 800131a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_TIM3_Init+0x94>)
 800131e:	223f      	movs	r2, #63	; 0x3f
 8001320:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_TIM3_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_TIM3_Init+0x94>)
 800132a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800132e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_TIM3_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_TIM3_Init+0x94>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800133c:	4813      	ldr	r0, [pc, #76]	; (800138c <MX_TIM3_Init+0x94>)
 800133e:	f00a fa02 	bl	800b746 <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001348:	f000 fc88 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <MX_TIM3_Init+0x94>)
 800135a:	f00a ffa9 	bl	800c2b0 <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001364:	f000 fc7a 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_TIM3_Init+0x94>)
 8001376:	f00b fcf1 	bl	800cd5c <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001380:	f000 fc6c 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	24000454 	.word	0x24000454
 8001390:	40000400 	.word	0x40000400

08001394 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <MX_USART1_UART_Init+0x90>)
 800139a:	4a23      	ldr	r2, [pc, #140]	; (8001428 <MX_USART1_UART_Init+0x94>)
 800139c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013a0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80013a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013dc:	4811      	ldr	r0, [pc, #68]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013de:	f00b fde7 	bl	800cfb0 <HAL_UART_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013e8:	f000 fc38 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ec:	2100      	movs	r1, #0
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013f0:	f00e f941 	bl	800f676 <HAL_UARTEx_SetTxFifoThreshold>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013fa:	f000 fc2f 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fe:	2100      	movs	r1, #0
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <MX_USART1_UART_Init+0x90>)
 8001402:	f00e f976 	bl	800f6f2 <HAL_UARTEx_SetRxFifoThreshold>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800140c:	f000 fc26 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <MX_USART1_UART_Init+0x90>)
 8001412:	f00e f8f7 	bl	800f604 <HAL_UARTEx_DisableFifoMode>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800141c:	f000 fc1e 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	240004a0 	.word	0x240004a0
 8001428:	40011000 	.word	0x40011000

0800142c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_DMA_Init+0x5c>)
 8001434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001438:	4a13      	ldr	r2, [pc, #76]	; (8001488 <MX_DMA_Init+0x5c>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_DMA_Init+0x5c>)
 8001444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2105      	movs	r1, #5
 8001454:	200b      	movs	r0, #11
 8001456:	f002 ffa7 	bl	80043a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800145a:	200b      	movs	r0, #11
 800145c:	f002 ffbe 	bl	80043dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2105      	movs	r1, #5
 8001464:	200c      	movs	r0, #12
 8001466:	f002 ff9f 	bl	80043a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800146a:	200c      	movs	r0, #12
 800146c:	f002 ffb6 	bl	80043dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2105      	movs	r1, #5
 8001474:	2010      	movs	r0, #16
 8001476:	f002 ff97 	bl	80043a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800147a:	2010      	movs	r0, #16
 800147c:	f002 ffae 	bl	80043dc <HAL_NVIC_EnableIRQ>

}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	58024400 	.word	0x58024400

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a8:	4a2a      	ldr	r2, [pc, #168]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b2:	4b28      	ldr	r3, [pc, #160]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001502:	4815      	ldr	r0, [pc, #84]	; (8001558 <MX_GPIO_Init+0xcc>)
 8001504:	f006 f932 	bl	800776c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2164      	movs	r1, #100	; 0x64
 800150c:	4813      	ldr	r0, [pc, #76]	; (800155c <MX_GPIO_Init+0xd0>)
 800150e:	f006 f92d 	bl	800776c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001512:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001516:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4619      	mov	r1, r3
 800152a:	480b      	ldr	r0, [pc, #44]	; (8001558 <MX_GPIO_Init+0xcc>)
 800152c:	f005 ff6e 	bl	800740c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_GPIO_Init+0xd0>)
 8001548:	f005 ff60 	bl	800740c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	58024400 	.word	0x58024400
 8001558:	58020800 	.word	0x58020800
 800155c:	58020400 	.word	0x58020400

08001560 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001568:	f44f 729c 	mov.w	r2, #312	; 0x138
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800156e:	210c      	movs	r1, #12
 8001570:	4818      	ldr	r0, [pc, #96]	; (80015d4 <system_setup+0x74>)
 8001572:	f00a fb73 	bl	800bc5c <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001576:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800157a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800157e:	4816      	ldr	r0, [pc, #88]	; (80015d8 <system_setup+0x78>)
 8001580:	f002 fd18 	bl	8003fb4 <HAL_ADCEx_Calibration_Start>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 800158a:	f000 fb67 	bl	8001c5c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800158e:	220b      	movs	r2, #11
 8001590:	4912      	ldr	r1, [pc, #72]	; (80015dc <system_setup+0x7c>)
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <system_setup+0x78>)
 8001594:	f001 fdec 	bl	8003170 <HAL_ADC_Start_DMA>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 800159e:	f000 fb5d 	bl	8001c5c <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80015a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <system_setup+0x80>)
 80015ac:	f002 fd02 	bl	8003fb4 <HAL_ADCEx_Calibration_Start>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80015b6:	f000 fb51 	bl	8001c5c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80015ba:	2204      	movs	r2, #4
 80015bc:	4909      	ldr	r1, [pc, #36]	; (80015e4 <system_setup+0x84>)
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <system_setup+0x80>)
 80015c0:	f001 fdd6 	bl	8003170 <HAL_ADC_Start_DMA>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80015ca:	f000 fb47 	bl	8001c5c <Error_Handler>
	  	}
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	24000408 	.word	0x24000408
 80015d8:	2400009c 	.word	0x2400009c
 80015dc:	240005c0 	.word	0x240005c0
 80015e0:	24000100 	.word	0x24000100
 80015e4:	240005e0 	.word	0x240005e0

080015e8 <create_packet>:


packet_t create_packet(const uint8_t* data, uint16_t size) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	4613      	mov	r3, r2
 80015f4:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f011 fc81 	bl	8012f00 <malloc>
 80015fe:	4603      	mov	r3, r0
 8001600:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	4618      	mov	r0, r3
 800160a:	f011 fc89 	bl	8012f20 <memcpy>
    packet.size = size;
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	461a      	mov	r2, r3
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800161e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001632:	2006      	movs	r0, #6
 8001634:	f011 fc64 	bl	8012f00 <malloc>
 8001638:	4603      	mov	r3, r0
 800163a:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800163c:	2002      	movs	r0, #2
 800163e:	f011 fc5f 	bl	8012f00 <malloc>
 8001642:	4603      	mov	r3, r0
 8001644:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	220e      	movs	r2, #14
 800164a:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3301      	adds	r3, #1
 8001650:	220d      	movs	r2, #13
 8001652:	701a      	strb	r2, [r3, #0]
#else
	receive_spi(hspi1, pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	22bb      	movs	r2, #187	; 0xbb
 8001658:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3301      	adds	r3, #1
 800165e:	22bb      	movs	r2, #187	; 0xbb
 8001660:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3302      	adds	r3, #2
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3303      	adds	r3, #3
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <sample_pmt+0x8c>)
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3304      	adds	r3, #4
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3305      	adds	r3, #5
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	7852      	ldrb	r2, [r2, #1]
 8001686:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8001688:	463b      	mov	r3, r7
 800168a:	2206      	movs	r2, #6
 800168c:	68f9      	ldr	r1, [r7, #12]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ffaa 	bl	80015e8 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <sample_pmt+0x90>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	4639      	mov	r1, r7
 800169a:	2300      	movs	r3, #0
 800169c:	2200      	movs	r2, #0
 800169e:	f00e fb6d 	bl	800fd7c <osMessageQueuePut>
	free(buffer);
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f011 fc34 	bl	8012f10 <free>
	free(pmt_spi);
 80016a8:	68b8      	ldr	r0, [r7, #8]
 80016aa:	f011 fc31 	bl	8012f10 <free>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2400054c 	.word	0x2400054c
 80016bc:	24000548 	.word	0x24000548

080016c0 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80016c6:	200e      	movs	r0, #14
 80016c8:	f011 fc1a 	bl	8012f00 <malloc>
 80016cc:	4603      	mov	r3, r0
 80016ce:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80016d0:	2002      	movs	r0, #2
 80016d2:	f011 fc15 	bl	8012f00 <malloc>
 80016d6:	4603      	mov	r3, r0
 80016d8:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 80016da:	2004      	movs	r0, #4
 80016dc:	f011 fc10 	bl	8012f00 <malloc>
 80016e0:	4603      	mov	r3, r0
 80016e2:	60fb      	str	r3, [r7, #12]

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	220e      	movs	r2, #14
 80016e8:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	3301      	adds	r3, #1
 80016ee:	220d      	movs	r2, #13
 80016f0:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	22ee      	movs	r2, #238	; 0xee
 80016f6:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3302      	adds	r3, #2
 80016fc:	22dd      	movs	r2, #221	; 0xdd
 80016fe:	801a      	strh	r2, [r3, #0]
#else
	receive_spi(hspi2);
	reveice_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	22aa      	movs	r2, #170	; 0xaa
 8001704:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	22aa      	movs	r2, #170	; 0xaa
 800170c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3302      	adds	r3, #2
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3303      	adds	r3, #3
 800171a:	4a2a      	ldr	r2, [pc, #168]	; (80017c4 <sample_erpa+0x104>)
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	3304      	adds	r3, #4
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
	buffer[5] = (0 & 0xFF);               		// ENDmon LSB
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3305      	adds	r3, #5
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	b29a      	uxth	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3306      	adds	r3, #6
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	881a      	ldrh	r2, [r3, #0]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3307      	adds	r3, #7
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3302      	adds	r3, #2
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	b29a      	uxth	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3308      	adds	r3, #8
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3302      	adds	r3, #2
 8001762:	881a      	ldrh	r2, [r3, #0]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3309      	adds	r3, #9
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((0 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	330a      	adds	r3, #10
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
	buffer[11] = (0 & 0xFF);                    // TEMPURATURE 2 LSB
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	330b      	adds	r3, #11
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
	buffer[12] = erpa_spi[0];					// ERPA eADC MSB
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	330c      	adds	r3, #12
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	7812      	ldrb	r2, [r2, #0]
 8001784:	701a      	strb	r2, [r3, #0]
	buffer[13] = erpa_spi[1];					// ERPA eADC LSB
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	330d      	adds	r3, #13
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	7852      	ldrb	r2, [r2, #1]
 800178e:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	220e      	movs	r2, #14
 8001794:	6979      	ldr	r1, [r7, #20]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff26 	bl	80015e8 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <sample_erpa+0x108>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	1d39      	adds	r1, r7, #4
 80017a2:	2300      	movs	r3, #0
 80017a4:	2200      	movs	r2, #0
 80017a6:	f00e fae9 	bl	800fd7c <osMessageQueuePut>
	free(buffer);
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f011 fbb0 	bl	8012f10 <free>
	free(erpa_spi);
 80017b0:	6938      	ldr	r0, [r7, #16]
 80017b2:	f011 fbad 	bl	8012f10 <free>
	free(erpa_adc);
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f011 fbaa 	bl	8012f10 <free>
}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2400054d 	.word	0x2400054d
 80017c8:	24000548 	.word	0x24000548

080017cc <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80017d2:	2026      	movs	r0, #38	; 0x26
 80017d4:	f011 fb94 	bl	8012f00 <malloc>
 80017d8:	4603      	mov	r3, r0
 80017da:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (uint16_t*)malloc(4 * sizeof(uint16_t));
 80017dc:	2008      	movs	r0, #8
 80017de:	f011 fb8f 	bl	8012f00 <malloc>
 80017e2:	4603      	mov	r3, r0
 80017e4:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 80017e6:	2012      	movs	r0, #18
 80017e8:	f011 fb8a 	bl	8012f00 <malloc>
 80017ec:	4603      	mov	r3, r0
 80017ee:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 80017f0:	2008      	movs	r0, #8
 80017f2:	f011 fb85 	bl	8012f00 <malloc>
 80017f6:	4603      	mov	r3, r0
 80017f8:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2211      	movs	r2, #17
 80017fe:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	3302      	adds	r3, #2
 8001804:	2212      	movs	r2, #18
 8001806:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	3304      	adds	r3, #4
 800180c:	2213      	movs	r2, #19
 800180e:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	3306      	adds	r3, #6
 8001814:	2214      	movs	r2, #20
 8001816:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	22a0      	movs	r2, #160	; 0xa0
 800181c:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3302      	adds	r3, #2
 8001822:	22a1      	movs	r2, #161	; 0xa1
 8001824:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3304      	adds	r3, #4
 800182a:	22a2      	movs	r2, #162	; 0xa2
 800182c:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3306      	adds	r3, #6
 8001832:	22a3      	movs	r2, #163	; 0xa3
 8001834:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3308      	adds	r3, #8
 800183a:	22a4      	movs	r2, #164	; 0xa4
 800183c:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	330a      	adds	r3, #10
 8001842:	22a5      	movs	r2, #165	; 0xa5
 8001844:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	330c      	adds	r3, #12
 800184a:	22a6      	movs	r2, #166	; 0xa6
 800184c:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	330e      	adds	r3, #14
 8001852:	22a7      	movs	r2, #167	; 0xa7
 8001854:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3310      	adds	r3, #16
 800185a:	22a8      	movs	r2, #168	; 0xa8
 800185c:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	22b0      	movs	r2, #176	; 0xb0
 8001862:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	3302      	adds	r3, #2
 8001868:	22b1      	movs	r2, #177	; 0xb1
 800186a:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	3304      	adds	r3, #4
 8001870:	22b2      	movs	r2, #178	; 0xb2
 8001872:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3306      	adds	r3, #6
 8001878:	22b3      	movs	r2, #179	; 0xb3
 800187a:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	22cc      	movs	r2, #204	; 0xcc
 8001880:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	22cc      	movs	r2, #204	; 0xcc
 8001888:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3302      	adds	r3, #2
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3303      	adds	r3, #3
 8001896:	4a97      	ldr	r2, [pc, #604]	; (8001af4 <sample_hk+0x328>)
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	3302      	adds	r3, #2
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3304      	adds	r3, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3302      	adds	r3, #2
 80018b2:	881a      	ldrh	r2, [r3, #0]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3305      	adds	r3, #5
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3306      	adds	r3, #6
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	881a      	ldrh	r2, [r3, #0]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3307      	adds	r3, #7
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018de:	121a      	asrs	r2, r3, #8
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3308      	adds	r3, #8
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3309      	adds	r3, #9
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	3302      	adds	r3, #2
 80018fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fe:	121a      	asrs	r2, r3, #8
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	330a      	adds	r3, #10
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	3302      	adds	r3, #2
 800190c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	330b      	adds	r3, #11
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	3304      	adds	r3, #4
 800191c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001920:	121a      	asrs	r2, r3, #8
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	330c      	adds	r3, #12
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	3304      	adds	r3, #4
 800192e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	330d      	adds	r3, #13
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	3306      	adds	r3, #6
 800193e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001942:	121a      	asrs	r2, r3, #8
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	330e      	adds	r3, #14
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	3306      	adds	r3, #6
 8001950:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	330f      	adds	r3, #15
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b29a      	uxth	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3310      	adds	r3, #16
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3311      	adds	r3, #17
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3302      	adds	r3, #2
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b29a      	uxth	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3312      	adds	r3, #18
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3302      	adds	r3, #2
 800198e:	881a      	ldrh	r2, [r3, #0]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3313      	adds	r3, #19
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3304      	adds	r3, #4
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3314      	adds	r3, #20
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3304      	adds	r3, #4
 80019ae:	881a      	ldrh	r2, [r3, #0]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3315      	adds	r3, #21
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3306      	adds	r3, #6
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3316      	adds	r3, #22
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3306      	adds	r3, #6
 80019ce:	881a      	ldrh	r2, [r3, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3317      	adds	r3, #23
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	330c      	adds	r3, #12
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3318      	adds	r3, #24
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	330c      	adds	r3, #12
 80019ee:	881a      	ldrh	r2, [r3, #0]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3319      	adds	r3, #25
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3306      	adds	r3, #6
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	331a      	adds	r3, #26
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3306      	adds	r3, #6
 8001a0e:	881a      	ldrh	r2, [r3, #0]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	331b      	adds	r3, #27
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	331c      	adds	r3, #28
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	331d      	adds	r3, #29
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	330e      	adds	r3, #14
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	331e      	adds	r3, #30
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	330e      	adds	r3, #14
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	331f      	adds	r3, #31
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3310      	adds	r3, #16
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3320      	adds	r3, #32
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3310      	adds	r3, #16
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3321      	adds	r3, #33	; 0x21
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3322      	adds	r3, #34	; 0x22
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3323      	adds	r3, #35	; 0x23
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	330a      	adds	r3, #10
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3324      	adds	r3, #36	; 0x24
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	330a      	adds	r3, #10
 8001aae:	881a      	ldrh	r2, [r3, #0]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3325      	adds	r3, #37	; 0x25
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2226      	movs	r2, #38	; 0x26
 8001abc:	6979      	ldr	r1, [r7, #20]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fd92 	bl	80015e8 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <sample_hk+0x32c>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	4639      	mov	r1, r7
 8001aca:	2300      	movs	r3, #0
 8001acc:	2200      	movs	r2, #0
 8001ace:	f00e f955 	bl	800fd7c <osMessageQueuePut>
	free(buffer);
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f011 fa1c 	bl	8012f10 <free>
	free(hk_i2c);
 8001ad8:	6938      	ldr	r0, [r7, #16]
 8001ada:	f011 fa19 	bl	8012f10 <free>
	free(hk_adc1);
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f011 fa16 	bl	8012f10 <free>
	free(hk_adc3);
 8001ae4:	68b8      	ldr	r0, [r7, #8]
 8001ae6:	f011 fa13 	bl	8012f10 <free>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2400054e 	.word	0x2400054e
 8001af8:	24000548 	.word	0x24000548

08001afc <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <PMT_init+0x30>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2101      	movs	r1, #1
 8001b10:	f00e f85a 	bl	800fbc8 <osEventFlagsWait>
	    sample_pmt();
 8001b14:	f7ff fd8a 	bl	800162c <sample_pmt>
		pmt_seq++;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <PMT_init+0x34>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <PMT_init+0x34>)
 8001b22:	701a      	strb	r2, [r3, #0]
		osThreadYield();
 8001b24:	f00d ff92 	bl	800fa4c <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b28:	e7ec      	b.n	8001b04 <PMT_init+0x8>
 8001b2a:	bf00      	nop
 8001b2c:	24000550 	.word	0x24000550
 8001b30:	2400054c 	.word	0x2400054c

08001b34 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <ERPA_init+0x30>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b44:	2200      	movs	r2, #0
 8001b46:	2102      	movs	r1, #2
 8001b48:	f00e f83e 	bl	800fbc8 <osEventFlagsWait>
	    sample_erpa();
 8001b4c:	f7ff fdb8 	bl	80016c0 <sample_erpa>
		erpa_seq++;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <ERPA_init+0x34>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <ERPA_init+0x34>)
 8001b5a:	701a      	strb	r2, [r3, #0]
		osThreadYield();
 8001b5c:	f00d ff76 	bl	800fa4c <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b60:	e7ec      	b.n	8001b3c <ERPA_init+0x8>
 8001b62:	bf00      	nop
 8001b64:	24000550 	.word	0x24000550
 8001b68:	2400054d 	.word	0x2400054d

08001b6c <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HK_init+0x30>)
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2104      	movs	r1, #4
 8001b80:	f00e f822 	bl	800fbc8 <osEventFlagsWait>
	    sample_hk();
 8001b84:	f7ff fe22 	bl	80017cc <sample_hk>
		hk_seq++;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HK_init+0x34>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HK_init+0x34>)
 8001b92:	701a      	strb	r2, [r3, #0]
		osThreadYield();
 8001b94:	f00d ff5a 	bl	800fa4c <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b98:	e7ec      	b.n	8001b74 <HK_init+0x8>
 8001b9a:	bf00      	nop
 8001b9c:	24000550 	.word	0x24000550
 8001ba0:	2400054e 	.word	0x2400054e

08001ba4 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001bac:	2201      	movs	r2, #1
 8001bae:	4904      	ldr	r1, [pc, #16]	; (8001bc0 <UART_RX_init+0x1c>)
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <UART_RX_init+0x20>)
 8001bb2:	f00b fadb 	bl	800d16c <HAL_UART_Receive_IT>
		osDelay(1);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f00d ff68 	bl	800fa8c <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001bbc:	e7f6      	b.n	8001bac <UART_RX_init+0x8>
 8001bbe:	bf00      	nop
 8001bc0:	24000554 	.word	0x24000554
 8001bc4:	240004a0 	.word	0x240004a0

08001bc8 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <UART_TX_init+0x60>)
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	f107 0108 	add.w	r1, r7, #8
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f00e f92d 	bl	800fe3c <osMessageQueueGet>
 8001be2:	6138      	str	r0, [r7, #16]

	   if (status == osOK) {
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f2      	bne.n	8001bd0 <UART_TX_init+0x8>
	       printf("Dequeued packet: ");
 8001bea:	4810      	ldr	r0, [pc, #64]	; (8001c2c <UART_TX_init+0x64>)
 8001bec:	f011 fa8e 	bl	801310c <iprintf>

	       for (uint16_t i = 0; i < msg.size; i++) {
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	82fb      	strh	r3, [r7, #22]
 8001bf4:	e00a      	b.n	8001c0c <UART_TX_init+0x44>
	           printf("%d ", msg.array[i]);
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	8afb      	ldrh	r3, [r7, #22]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480b      	ldr	r0, [pc, #44]	; (8001c30 <UART_TX_init+0x68>)
 8001c02:	f011 fa83 	bl	801310c <iprintf>
	       for (uint16_t i = 0; i < msg.size; i++) {
 8001c06:	8afb      	ldrh	r3, [r7, #22]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	82fb      	strh	r3, [r7, #22]
 8001c0c:	89bb      	ldrh	r3, [r7, #12]
 8001c0e:	8afa      	ldrh	r2, [r7, #22]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d3f0      	bcc.n	8001bf6 <UART_TX_init+0x2e>
	       }
	       printf("\n");
 8001c14:	200a      	movs	r0, #10
 8001c16:	f011 fa91 	bl	801313c <putchar>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	89ba      	ldrh	r2, [r7, #12]
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <UART_TX_init+0x6c>)
 8001c22:	f00b fa15 	bl	800d050 <HAL_UART_Transmit>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001c26:	e7d3      	b.n	8001bd0 <UART_TX_init+0x8>
 8001c28:	24000548 	.word	0x24000548
 8001c2c:	0801421c 	.word	0x0801421c
 8001c30:	08014230 	.word	0x08014230
 8001c34:	240004a0 	.word	0x240004a0

08001c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c4a:	f000 fe9f 	bl	800298c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40001000 	.word	0x40001000

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c64:	e7fe      	b.n	8001c64 <Error_Handler+0x8>
	...

08001c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_MspInit+0x38>)
 8001c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c74:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_MspInit+0x38>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_MspInit+0x38>)
 8001c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f06f 0001 	mvn.w	r0, #1
 8001c94:	f002 fb88 	bl	80043a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	58024400 	.word	0x58024400

08001ca4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08e      	sub	sp, #56	; 0x38
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a7b      	ldr	r2, [pc, #492]	; (8001eb0 <HAL_ADC_MspInit+0x20c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	f040 8091 	bne.w	8001dea <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cc8:	4b7a      	ldr	r3, [pc, #488]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001cca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cce:	4a79      	ldr	r2, [pc, #484]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001cd0:	f043 0320 	orr.w	r3, r3, #32
 8001cd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cd8:	4b76      	ldr	r3, [pc, #472]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001cda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	4b73      	ldr	r3, [pc, #460]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	4a71      	ldr	r2, [pc, #452]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf6:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b6b      	ldr	r3, [pc, #428]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0a:	4a6a      	ldr	r2, [pc, #424]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b64      	ldr	r3, [pc, #400]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d28:	4a62      	ldr	r2, [pc, #392]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d32:	4b60      	ldr	r3, [pc, #384]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d40:	2333      	movs	r3, #51	; 0x33
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d44:	2303      	movs	r3, #3
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4859      	ldr	r0, [pc, #356]	; (8001eb8 <HAL_ADC_MspInit+0x214>)
 8001d54:	f005 fb5a 	bl	800740c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001d58:	23ce      	movs	r3, #206	; 0xce
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4854      	ldr	r0, [pc, #336]	; (8001ebc <HAL_ADC_MspInit+0x218>)
 8001d6c:	f005 fb4e 	bl	800740c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d70:	2303      	movs	r3, #3
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d74:	2303      	movs	r3, #3
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d80:	4619      	mov	r1, r3
 8001d82:	484f      	ldr	r0, [pc, #316]	; (8001ec0 <HAL_ADC_MspInit+0x21c>)
 8001d84:	f005 fb42 	bl	800740c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d88:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001d8a:	4a4f      	ldr	r2, [pc, #316]	; (8001ec8 <HAL_ADC_MspInit+0x224>)
 8001d8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d8e:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001d90:	2209      	movs	r2, #9
 8001d92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d94:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001da0:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001da8:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001db6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001db8:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dbe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dcc:	483d      	ldr	r0, [pc, #244]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001dce:	f002 fce1 	bl	8004794 <HAL_DMA_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001dd8:	f7ff ff40 	bl	8001c5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a39      	ldr	r2, [pc, #228]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001de0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_ADC_MspInit+0x220>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001de8:	e05e      	b.n	8001ea8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a37      	ldr	r2, [pc, #220]	; (8001ecc <HAL_ADC_MspInit+0x228>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d159      	bne.n	8001ea8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfa:	4a2e      	ldr	r2, [pc, #184]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001dfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e18:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_ADC_MspInit+0x210>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001e30:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001e34:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001e38:	f000 fdd4 	bl	80029e4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001e3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001e40:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001e44:	f000 fdce 	bl	80029e4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001e4a:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_ADC_MspInit+0x230>)
 8001e4c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001e50:	2273      	movs	r2, #115	; 0x73
 8001e52:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001e62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e66:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001e6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e6e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e76:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e7e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001e8c:	4810      	ldr	r0, [pc, #64]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001e8e:	f002 fc81 	bl	8004794 <HAL_DMA_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001e98:	f7ff fee0 	bl	8001c5c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001ea0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <HAL_ADC_MspInit+0x22c>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ea8:	bf00      	nop
 8001eaa:	3738      	adds	r7, #56	; 0x38
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40022000 	.word	0x40022000
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	58020800 	.word	0x58020800
 8001ebc:	58020000 	.word	0x58020000
 8001ec0:	58020400 	.word	0x58020400
 8001ec4:	24000164 	.word	0x24000164
 8001ec8:	40020010 	.word	0x40020010
 8001ecc:	58026000 	.word	0x58026000
 8001ed0:	240001dc 	.word	0x240001dc
 8001ed4:	40020028 	.word	0x40020028

08001ed8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a34      	ldr	r2, [pc, #208]	; (8001fc8 <HAL_DAC_MspInit+0xf0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d161      	bne.n	8001fbe <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_DAC_MspInit+0xf4>)
 8001efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f00:	4a32      	ldr	r2, [pc, #200]	; (8001fcc <HAL_DAC_MspInit+0xf4>)
 8001f02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f0a:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_DAC_MspInit+0xf4>)
 8001f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <HAL_DAC_MspInit+0xf4>)
 8001f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1e:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <HAL_DAC_MspInit+0xf4>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_DAC_MspInit+0xf4>)
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f36:	2310      	movs	r3, #16
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	4821      	ldr	r0, [pc, #132]	; (8001fd0 <HAL_DAC_MspInit+0xf8>)
 8001f4a:	f005 fa5f 	bl	800740c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001f50:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <HAL_DAC_MspInit+0x100>)
 8001f52:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001f56:	2243      	movs	r2, #67	; 0x43
 8001f58:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001f5c:	2240      	movs	r2, #64	; 0x40
 8001f5e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f60:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f6c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001f70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f74:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001f78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f7c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f84:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001f92:	4810      	ldr	r0, [pc, #64]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001f94:	f002 fbfe 	bl	8004794 <HAL_DMA_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001f9e:	f7ff fe5d 	bl	8001c5c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_DAC_MspInit+0xfc>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2105      	movs	r1, #5
 8001fb2:	2036      	movs	r0, #54	; 0x36
 8001fb4:	f002 f9f8 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fb8:	2036      	movs	r0, #54	; 0x36
 8001fba:	f002 fa0f 	bl	80043dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40007400 	.word	0x40007400
 8001fcc:	58024400 	.word	0x58024400
 8001fd0:	58020000 	.word	0x58020000
 8001fd4:	24000268 	.word	0x24000268
 8001fd8:	40020088 	.word	0x40020088

08001fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b0ba      	sub	sp, #232	; 0xe8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	22c0      	movs	r2, #192	; 0xc0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f010 ff9d 	bl	8012f3c <memset>
  if(hi2c->Instance==I2C1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_I2C_MspInit+0xc8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d146      	bne.n	800209a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800200c:	f04f 0208 	mov.w	r2, #8
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	4618      	mov	r0, r3
 8002024:	f006 fd52 	bl	8008acc <HAL_RCCEx_PeriphCLKConfig>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800202e:	f7ff fe15 	bl	8001c5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_I2C_MspInit+0xcc>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002038:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <HAL_I2C_MspInit+0xcc>)
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_I2C_MspInit+0xcc>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002050:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002054:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002058:	2312      	movs	r3, #18
 800205a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800206a:	2304      	movs	r3, #4
 800206c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002074:	4619      	mov	r1, r3
 8002076:	480d      	ldr	r0, [pc, #52]	; (80020ac <HAL_I2C_MspInit+0xd0>)
 8002078:	f005 f9c8 	bl	800740c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_I2C_MspInit+0xcc>)
 800207e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_I2C_MspInit+0xcc>)
 8002084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002088:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_I2C_MspInit+0xcc>)
 800208e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	37e8      	adds	r7, #232	; 0xe8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40005400 	.word	0x40005400
 80020a8:	58024400 	.word	0x58024400
 80020ac:	58020400 	.word	0x58020400

080020b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0ba      	sub	sp, #232	; 0xe8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	22c0      	movs	r2, #192	; 0xc0
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f010 ff33 	bl	8012f3c <memset>
  if(hspi->Instance==SPI2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a26      	ldr	r2, [pc, #152]	; (8002174 <HAL_SPI_MspInit+0xc4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d145      	bne.n	800216c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80020e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	4618      	mov	r0, r3
 80020f6:	f006 fce9 	bl	8008acc <HAL_RCCEx_PeriphCLKConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002100:	f7ff fdac 	bl	8001c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <HAL_SPI_MspInit+0xc8>)
 8002106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800210a:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_SPI_MspInit+0xc8>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002110:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_SPI_MspInit+0xc8>)
 8002116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_SPI_MspInit+0xc8>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002128:	4a13      	ldr	r2, [pc, #76]	; (8002178 <HAL_SPI_MspInit+0xc8>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_SPI_MspInit+0xc8>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002140:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800215a:	2305      	movs	r3, #5
 800215c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002164:	4619      	mov	r1, r3
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <HAL_SPI_MspInit+0xcc>)
 8002168:	f005 f950 	bl	800740c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800216c:	bf00      	nop
 800216e:	37e8      	adds	r7, #232	; 0xe8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40003800 	.word	0x40003800
 8002178:	58024400 	.word	0x58024400
 800217c:	58020400 	.word	0x58020400

08002180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a37      	ldr	r2, [pc, #220]	; (800226c <HAL_TIM_Base_MspInit+0xec>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d12f      	bne.n	80021f2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <HAL_TIM_Base_MspInit+0xf0>)
 8002194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002198:	4a35      	ldr	r2, [pc, #212]	; (8002270 <HAL_TIM_Base_MspInit+0xf0>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021a2:	4b33      	ldr	r3, [pc, #204]	; (8002270 <HAL_TIM_Base_MspInit+0xf0>)
 80021a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2105      	movs	r1, #5
 80021b4:	2018      	movs	r0, #24
 80021b6:	f002 f8f7 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80021ba:	2018      	movs	r0, #24
 80021bc:	f002 f90e 	bl	80043dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2105      	movs	r1, #5
 80021c4:	2019      	movs	r0, #25
 80021c6:	f002 f8ef 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021ca:	2019      	movs	r0, #25
 80021cc:	f002 f906 	bl	80043dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2105      	movs	r1, #5
 80021d4:	201a      	movs	r0, #26
 80021d6:	f002 f8e7 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80021da:	201a      	movs	r0, #26
 80021dc:	f002 f8fe 	bl	80043dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2105      	movs	r1, #5
 80021e4:	201b      	movs	r0, #27
 80021e6:	f002 f8df 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80021ea:	201b      	movs	r0, #27
 80021ec:	f002 f8f6 	bl	80043dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021f0:	e038      	b.n	8002264 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fa:	d117      	bne.n	800222c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021fc:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <HAL_TIM_Base_MspInit+0xf0>)
 80021fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002202:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <HAL_TIM_Base_MspInit+0xf0>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_TIM_Base_MspInit+0xf0>)
 800220e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2105      	movs	r1, #5
 800221e:	201c      	movs	r0, #28
 8002220:	f002 f8c2 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002224:	201c      	movs	r0, #28
 8002226:	f002 f8d9 	bl	80043dc <HAL_NVIC_EnableIRQ>
}
 800222a:	e01b      	b.n	8002264 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a10      	ldr	r2, [pc, #64]	; (8002274 <HAL_TIM_Base_MspInit+0xf4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d116      	bne.n	8002264 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_TIM_Base_MspInit+0xf0>)
 8002238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <HAL_TIM_Base_MspInit+0xf0>)
 800223e:	f043 0302 	orr.w	r3, r3, #2
 8002242:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_TIM_Base_MspInit+0xf0>)
 8002248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	2105      	movs	r1, #5
 8002258:	201d      	movs	r0, #29
 800225a:	f002 f8a5 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800225e:	201d      	movs	r0, #29
 8002260:	f002 f8bc 	bl	80043dc <HAL_NVIC_EnableIRQ>
}
 8002264:	bf00      	nop
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40010000 	.word	0x40010000
 8002270:	58024400 	.word	0x58024400
 8002274:	40000400 	.word	0x40000400

08002278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a26      	ldr	r2, [pc, #152]	; (8002330 <HAL_TIM_MspPostInit+0xb8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d120      	bne.n	80022dc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <HAL_TIM_MspPostInit+0xbc>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a0:	4a24      	ldr	r2, [pc, #144]	; (8002334 <HAL_TIM_MspPostInit+0xbc>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <HAL_TIM_MspPostInit+0xbc>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4619      	mov	r1, r3
 80022d4:	4818      	ldr	r0, [pc, #96]	; (8002338 <HAL_TIM_MspPostInit+0xc0>)
 80022d6:	f005 f899 	bl	800740c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022da:	e024      	b.n	8002326 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e4:	d11f      	bne.n	8002326 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_TIM_MspPostInit+0xbc>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ec:	4a11      	ldr	r2, [pc, #68]	; (8002334 <HAL_TIM_MspPostInit+0xbc>)
 80022ee:	f043 0302 	orr.w	r3, r3, #2
 80022f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_TIM_MspPostInit+0xbc>)
 80022f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002316:	2301      	movs	r3, #1
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4806      	ldr	r0, [pc, #24]	; (800233c <HAL_TIM_MspPostInit+0xc4>)
 8002322:	f005 f873 	bl	800740c <HAL_GPIO_Init>
}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40010000 	.word	0x40010000
 8002334:	58024400 	.word	0x58024400
 8002338:	58020000 	.word	0x58020000
 800233c:	58020400 	.word	0x58020400

08002340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0ba      	sub	sp, #232	; 0xe8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	22c0      	movs	r2, #192	; 0xc0
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f010 fdeb 	bl	8012f3c <memset>
  if(huart->Instance==USART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a2b      	ldr	r2, [pc, #172]	; (8002418 <HAL_UART_MspInit+0xd8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d14e      	bne.n	800240e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002370:	f04f 0201 	mov.w	r2, #1
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	4618      	mov	r0, r3
 8002388:	f006 fba0 	bl	8008acc <HAL_RCCEx_PeriphCLKConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002392:	f7ff fc63 	bl	8001c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <HAL_UART_MspInit+0xdc>)
 8002398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800239c:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_UART_MspInit+0xdc>)
 800239e:	f043 0310 	orr.w	r3, r3, #16
 80023a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_UART_MspInit+0xdc>)
 80023a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_UART_MspInit+0xdc>)
 80023b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ba:	4a18      	ldr	r2, [pc, #96]	; (800241c <HAL_UART_MspInit+0xdc>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_UART_MspInit+0xdc>)
 80023c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ec:	2307      	movs	r3, #7
 80023ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023f6:	4619      	mov	r1, r3
 80023f8:	4809      	ldr	r0, [pc, #36]	; (8002420 <HAL_UART_MspInit+0xe0>)
 80023fa:	f005 f807 	bl	800740c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2105      	movs	r1, #5
 8002402:	2025      	movs	r0, #37	; 0x25
 8002404:	f001 ffd0 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002408:	2025      	movs	r0, #37	; 0x25
 800240a:	f001 ffe7 	bl	80043dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800240e:	bf00      	nop
 8002410:	37e8      	adds	r7, #232	; 0xe8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40011000 	.word	0x40011000
 800241c:	58024400 	.word	0x58024400
 8002420:	58020000 	.word	0x58020000

08002424 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b090      	sub	sp, #64	; 0x40
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	d827      	bhi.n	8002482 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002432:	2200      	movs	r2, #0
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	2036      	movs	r0, #54	; 0x36
 8002438:	f001 ffb6 	bl	80043a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800243c:	2036      	movs	r0, #54	; 0x36
 800243e:	f001 ffcd 	bl	80043dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002442:	4a29      	ldr	r2, [pc, #164]	; (80024e8 <HAL_InitTick+0xc4>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_InitTick+0xc8>)
 800244a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800244e:	4a27      	ldr	r2, [pc, #156]	; (80024ec <HAL_InitTick+0xc8>)
 8002450:	f043 0310 	orr.w	r3, r3, #16
 8002454:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_InitTick+0xc8>)
 800245a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002466:	f107 0210 	add.w	r2, r7, #16
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f006 fae9 	bl	8008a48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	2b00      	cmp	r3, #0
 800247e:	d106      	bne.n	800248e <HAL_InitTick+0x6a>
 8002480:	e001      	b.n	8002486 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e02b      	b.n	80024de <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002486:	f006 fab3 	bl	80089f0 <HAL_RCC_GetPCLK1Freq>
 800248a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800248c:	e004      	b.n	8002498 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800248e:	f006 faaf 	bl	80089f0 <HAL_RCC_GetPCLK1Freq>
 8002492:	4603      	mov	r3, r0
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249a:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <HAL_InitTick+0xcc>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	0c9b      	lsrs	r3, r3, #18
 80024a2:	3b01      	subs	r3, #1
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_InitTick+0xd0>)
 80024a8:	4a13      	ldr	r2, [pc, #76]	; (80024f8 <HAL_InitTick+0xd4>)
 80024aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_InitTick+0xd0>)
 80024ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024b4:	4a0f      	ldr	r2, [pc, #60]	; (80024f4 <HAL_InitTick+0xd0>)
 80024b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_InitTick+0xd0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_InitTick+0xd0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80024c6:	480b      	ldr	r0, [pc, #44]	; (80024f4 <HAL_InitTick+0xd0>)
 80024c8:	f009 f93d 	bl	800b746 <HAL_TIM_Base_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80024d2:	4808      	ldr	r0, [pc, #32]	; (80024f4 <HAL_InitTick+0xd0>)
 80024d4:	f009 f98e 	bl	800b7f4 <HAL_TIM_Base_Start_IT>
 80024d8:	4603      	mov	r3, r0
 80024da:	e000      	b.n	80024de <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3740      	adds	r7, #64	; 0x40
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	24000008 	.word	0x24000008
 80024ec:	58024400 	.word	0x58024400
 80024f0:	431bde83 	.word	0x431bde83
 80024f4:	240005e8 	.word	0x240005e8
 80024f8:	40001000 	.word	0x40001000

080024fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002500:	e7fe      	b.n	8002500 <NMI_Handler+0x4>

08002502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <HardFault_Handler+0x4>

08002508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <MemManage_Handler+0x4>

0800250e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <BusFault_Handler+0x4>

08002514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <UsageFault_Handler+0x4>

0800251a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <DMA1_Stream0_IRQHandler+0x10>)
 800252e:	f003 fc5b 	bl	8005de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	24000164 	.word	0x24000164

0800253c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <DMA1_Stream1_IRQHandler+0x10>)
 8002542:	f003 fc51 	bl	8005de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	240001dc 	.word	0x240001dc

08002550 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <DMA1_Stream5_IRQHandler+0x10>)
 8002556:	f003 fc47 	bl	8005de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	24000268 	.word	0x24000268

08002564 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <TIM1_BRK_IRQHandler+0x10>)
 800256a:	f009 fc85 	bl	800be78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	240003bc 	.word	0x240003bc

08002578 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <TIM1_UP_IRQHandler+0x10>)
 800257e:	f009 fc7b 	bl	800be78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	240003bc 	.word	0x240003bc

0800258c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002592:	f009 fc71 	bl	800be78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	240003bc 	.word	0x240003bc

080025a0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <TIM1_CC_IRQHandler+0x10>)
 80025a6:	f009 fc67 	bl	800be78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	240003bc 	.word	0x240003bc

080025b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <TIM2_IRQHandler+0x10>)
 80025ba:	f009 fc5d 	bl	800be78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	24000408 	.word	0x24000408

080025c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <TIM3_IRQHandler+0x10>)
 80025ce:	f009 fc53 	bl	800be78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	24000454 	.word	0x24000454

080025dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <USART1_IRQHandler+0x10>)
 80025e2:	f00a fe0f 	bl	800d204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	240004a0 	.word	0x240004a0

080025f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <TIM6_DAC_IRQHandler+0x20>)
 80025f6:	791b      	ldrb	r3, [r3, #4]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80025fe:	4804      	ldr	r0, [pc, #16]	; (8002610 <TIM6_DAC_IRQHandler+0x20>)
 8002600:	f001 ff1c 	bl	800443c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002604:	4803      	ldr	r0, [pc, #12]	; (8002614 <TIM6_DAC_IRQHandler+0x24>)
 8002606:	f009 fc37 	bl	800be78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	24000254 	.word	0x24000254
 8002614:	240005e8 	.word	0x240005e8

08002618 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <ITM_SendChar+0x48>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <ITM_SendChar+0x48>)
 8002628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <ITM_SendChar+0x4c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <ITM_SendChar+0x4c>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800263a:	bf00      	nop
 800263c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f8      	beq.n	800263c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800264a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	6013      	str	r3, [r2, #0]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000edfc 	.word	0xe000edfc
 8002664:	e0000e00 	.word	0xe0000e00

08002668 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e00a      	b.n	8002690 <_read+0x28>
		*ptr++ = __io_getchar();
 800267a:	f3af 8000 	nop.w
 800267e:	4601      	mov	r1, r0
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	60ba      	str	r2, [r7, #8]
 8002686:	b2ca      	uxtb	r2, r1
 8002688:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3301      	adds	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	dbf0      	blt.n	800267a <_read+0x12>
	}

	return len;
 8002698:	687b      	ldr	r3, [r7, #4]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e009      	b.n	80026c8 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	60ba      	str	r2, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ffab 	bl	8002618 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3301      	adds	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	dbf1      	blt.n	80026b4 <_write+0x12>
	}
	return len;
 80026d0:	687b      	ldr	r3, [r7, #4]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <_close>:

int _close(int file) {
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002702:	605a      	str	r2, [r3, #4]
	return 0;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_isatty>:

int _isatty(int file) {
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
		errno = ENOMEM;
 8002774:	f010 fb9a 	bl	8012eac <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	24080000 	.word	0x24080000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	24000634 	.word	0x24000634
 80027ac:	24004fa0 	.word	0x24004fa0

080027b0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80027b4:	4b37      	ldr	r3, [pc, #220]	; (8002894 <SystemInit+0xe4>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	4a36      	ldr	r2, [pc, #216]	; (8002894 <SystemInit+0xe4>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80027c4:	4b34      	ldr	r3, [pc, #208]	; (8002898 <SystemInit+0xe8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d807      	bhi.n	80027e0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80027d0:	4b31      	ldr	r3, [pc, #196]	; (8002898 <SystemInit+0xe8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 030f 	bic.w	r3, r3, #15
 80027d8:	4a2f      	ldr	r2, [pc, #188]	; (8002898 <SystemInit+0xe8>)
 80027da:	f043 0307 	orr.w	r3, r3, #7
 80027de:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80027e0:	4b2e      	ldr	r3, [pc, #184]	; (800289c <SystemInit+0xec>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2d      	ldr	r2, [pc, #180]	; (800289c <SystemInit+0xec>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80027ec:	4b2b      	ldr	r3, [pc, #172]	; (800289c <SystemInit+0xec>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80027f2:	4b2a      	ldr	r3, [pc, #168]	; (800289c <SystemInit+0xec>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	4929      	ldr	r1, [pc, #164]	; (800289c <SystemInit+0xec>)
 80027f8:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <SystemInit+0xf0>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80027fe:	4b26      	ldr	r3, [pc, #152]	; (8002898 <SystemInit+0xe8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <SystemInit+0xe8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 030f 	bic.w	r3, r3, #15
 8002812:	4a21      	ldr	r2, [pc, #132]	; (8002898 <SystemInit+0xe8>)
 8002814:	f043 0307 	orr.w	r3, r3, #7
 8002818:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <SystemInit+0xec>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <SystemInit+0xec>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <SystemInit+0xec>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <SystemInit+0xec>)
 800282e:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <SystemInit+0xf4>)
 8002830:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002832:	4b1a      	ldr	r3, [pc, #104]	; (800289c <SystemInit+0xec>)
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <SystemInit+0xf8>)
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <SystemInit+0xec>)
 800283a:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <SystemInit+0xfc>)
 800283c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <SystemInit+0xec>)
 8002840:	2200      	movs	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002844:	4b15      	ldr	r3, [pc, #84]	; (800289c <SystemInit+0xec>)
 8002846:	4a19      	ldr	r2, [pc, #100]	; (80028ac <SystemInit+0xfc>)
 8002848:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <SystemInit+0xec>)
 800284c:	2200      	movs	r2, #0
 800284e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <SystemInit+0xec>)
 8002852:	4a16      	ldr	r2, [pc, #88]	; (80028ac <SystemInit+0xfc>)
 8002854:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <SystemInit+0xec>)
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <SystemInit+0xec>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0e      	ldr	r2, [pc, #56]	; (800289c <SystemInit+0xec>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002866:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <SystemInit+0xec>)
 800286a:	2200      	movs	r2, #0
 800286c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <SystemInit+0x100>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <SystemInit+0x104>)
 8002874:	4013      	ands	r3, r2
 8002876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800287a:	d202      	bcs.n	8002882 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <SystemInit+0x108>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <SystemInit+0x10c>)
 8002884:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002888:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00
 8002898:	52002000 	.word	0x52002000
 800289c:	58024400 	.word	0x58024400
 80028a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80028a4:	02020200 	.word	0x02020200
 80028a8:	01ff0000 	.word	0x01ff0000
 80028ac:	01010280 	.word	0x01010280
 80028b0:	5c001000 	.word	0x5c001000
 80028b4:	ffff0000 	.word	0xffff0000
 80028b8:	51008108 	.word	0x51008108
 80028bc:	52004000 	.word	0x52004000

080028c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028c4:	f7ff ff74 	bl	80027b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c8:	480c      	ldr	r0, [pc, #48]	; (80028fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ca:	490d      	ldr	r1, [pc, #52]	; (8002900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028cc:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d0:	e002      	b.n	80028d8 <LoopCopyDataInit>

080028d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d6:	3304      	adds	r3, #4

080028d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028dc:	d3f9      	bcc.n	80028d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028de:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028e0:	4c0a      	ldr	r4, [pc, #40]	; (800290c <LoopFillZerobss+0x22>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e4:	e001      	b.n	80028ea <LoopFillZerobss>

080028e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e8:	3204      	adds	r2, #4

080028ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028ec:	d3fb      	bcc.n	80028e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ee:	f010 fae3 	bl	8012eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f2:	f7fe f819 	bl	8000928 <main>
  bx  lr
 80028f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80028fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002900:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002904:	080143e8 	.word	0x080143e8
  ldr r2, =_sbss
 8002908:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 800290c:	24004f9c 	.word	0x24004f9c

08002910 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002910:	e7fe      	b.n	8002910 <ADC3_IRQHandler>
	...

08002914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800291a:	2003      	movs	r0, #3
 800291c:	f001 fd39 	bl	8004392 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002920:	f005 febc 	bl	800869c <HAL_RCC_GetSysClockFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_Init+0x68>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	4913      	ldr	r1, [pc, #76]	; (8002980 <HAL_Init+0x6c>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_Init+0x68>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <HAL_Init+0x6c>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <HAL_Init+0x70>)
 8002956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002958:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_Init+0x74>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800295e:	2005      	movs	r0, #5
 8002960:	f7ff fd60 	bl	8002424 <HAL_InitTick>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e002      	b.n	8002974 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800296e:	f7ff f97b 	bl	8001c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	58024400 	.word	0x58024400
 8002980:	08014300 	.word	0x08014300
 8002984:	24000004 	.word	0x24000004
 8002988:	24000000 	.word	0x24000000

0800298c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_IncTick+0x20>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_IncTick+0x24>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4413      	add	r3, r2
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_IncTick+0x24>)
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	2400000c 	.word	0x2400000c
 80029b0:	24000638 	.word	0x24000638

080029b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return uwTick;
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_GetTick+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	24000638 	.word	0x24000638

080029cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_GetREVID+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0c1b      	lsrs	r3, r3, #16
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	5c001000 	.word	0x5c001000

080029e4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	401a      	ands	r2, r3
 80029f8:	4904      	ldr	r1, [pc, #16]	; (8002a0c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	58000400 	.word	0x58000400

08002a10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	609a      	str	r2, [r3, #8]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3360      	adds	r3, #96	; 0x60
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	611a      	str	r2, [r3, #16]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b087      	sub	sp, #28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3360      	adds	r3, #96	; 0x60
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	601a      	str	r2, [r3, #0]
  }
}
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3330      	adds	r3, #48	; 0x30
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	211f      	movs	r1, #31
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	f003 011f 	and.w	r1, r3, #31
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f023 0203 	bic.w	r2, r3, #3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	0e5b      	lsrs	r3, r3, #25
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	4413      	add	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	0d1b      	lsrs	r3, r3, #20
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2107      	movs	r1, #7
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	0d1b      	lsrs	r3, r3, #20
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c34:	43db      	mvns	r3, r3
 8002c36:	401a      	ands	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f003 0318 	and.w	r3, r3, #24
 8002c3e:	4908      	ldr	r1, [pc, #32]	; (8002c60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c40:	40d9      	lsrs	r1, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	400b      	ands	r3, r1
 8002c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	000fffff 	.word	0x000fffff

08002c64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 031f 	and.w	r3, r3, #31
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6093      	str	r3, [r2, #8]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	5fffffc0 	.word	0x5fffffc0

08002ca4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb8:	d101      	bne.n	8002cbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	6fffffc0 	.word	0x6fffffc0

08002cf4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d08:	d101      	bne.n	8002d0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <LL_ADC_Enable+0x24>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	7fffffc0 	.word	0x7fffffc0

08002d44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <LL_ADC_Disable+0x24>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	f043 0202 	orr.w	r2, r3, #2
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	7fffffc0 	.word	0x7fffffc0

08002d6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <LL_ADC_IsEnabled+0x18>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <LL_ADC_IsEnabled+0x1a>
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d101      	bne.n	8002daa <LL_ADC_IsDisableOngoing+0x18>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <LL_ADC_IsDisableOngoing+0x1a>
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <LL_ADC_REG_StartConversion+0x24>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	f043 0204 	orr.w	r2, r3, #4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	7fffffc0 	.word	0x7fffffc0

08002de0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d101      	bne.n	8002df8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d101      	bne.n	8002e1e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e18f      	b.n	8003166 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fe ff25 	bl	8001ca4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff19 	bl	8002ca4 <LL_ADC_IsDeepPowerDownEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff feff 	bl	8002c80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff ff34 	bl	8002cf4 <LL_ADC_IsInternalRegulatorEnabled>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d114      	bne.n	8002ebc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff18 	bl	8002ccc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e9c:	4b87      	ldr	r3, [pc, #540]	; (80030bc <HAL_ADC_Init+0x290>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	099b      	lsrs	r3, r3, #6
 8002ea2:	4a87      	ldr	r2, [pc, #540]	; (80030c0 <HAL_ADC_Init+0x294>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eae:	e002      	b.n	8002eb6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f9      	bne.n	8002eb0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff17 	bl	8002cf4 <LL_ADC_IsInternalRegulatorEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10d      	bne.n	8002ee8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f043 0210 	orr.w	r2, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff77 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 8002ef2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 8129 	bne.w	8003154 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 8125 	bne.w	8003154 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f12:	f043 0202 	orr.w	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff24 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d136      	bne.n	8002f98 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a65      	ldr	r2, [pc, #404]	; (80030c4 <HAL_ADC_Init+0x298>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_ADC_Init+0x112>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a63      	ldr	r2, [pc, #396]	; (80030c8 <HAL_ADC_Init+0x29c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10e      	bne.n	8002f5c <HAL_ADC_Init+0x130>
 8002f3e:	4861      	ldr	r0, [pc, #388]	; (80030c4 <HAL_ADC_Init+0x298>)
 8002f40:	f7ff ff14 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f44:	4604      	mov	r4, r0
 8002f46:	4860      	ldr	r0, [pc, #384]	; (80030c8 <HAL_ADC_Init+0x29c>)
 8002f48:	f7ff ff10 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4323      	orrs	r3, r4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e008      	b.n	8002f6e <HAL_ADC_Init+0x142>
 8002f5c:	485b      	ldr	r0, [pc, #364]	; (80030cc <HAL_ADC_Init+0x2a0>)
 8002f5e:	f7ff ff05 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d012      	beq.n	8002f98 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a53      	ldr	r2, [pc, #332]	; (80030c4 <HAL_ADC_Init+0x298>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_ADC_Init+0x15a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a51      	ldr	r2, [pc, #324]	; (80030c8 <HAL_ADC_Init+0x29c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_Init+0x15e>
 8002f86:	4a52      	ldr	r2, [pc, #328]	; (80030d0 <HAL_ADC_Init+0x2a4>)
 8002f88:	e000      	b.n	8002f8c <HAL_ADC_Init+0x160>
 8002f8a:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_ADC_Init+0x2a8>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f7ff fd3c 	bl	8002a10 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f98:	f7ff fd18 	bl	80029cc <HAL_GetREVID>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d914      	bls.n	8002fd0 <HAL_ADC_Init+0x1a4>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d110      	bne.n	8002fd0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7d5b      	ldrb	r3, [r3, #21]
 8002fb2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fb8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fbe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7f1b      	ldrb	r3, [r3, #28]
 8002fc4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002fc6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fc8:	f043 030c 	orr.w	r3, r3, #12
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	e00d      	b.n	8002fec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7d5b      	ldrb	r3, [r3, #21]
 8002fd4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fda:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fe0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7f1b      	ldrb	r3, [r3, #28]
 8002fe6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7f1b      	ldrb	r3, [r3, #28]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d106      	bne.n	8003002 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	045b      	lsls	r3, r3, #17
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <HAL_ADC_Init+0x2ac>)
 8003026:	4013      	ands	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	69b9      	ldr	r1, [r7, #24]
 800302e:	430b      	orrs	r3, r1
 8003030:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fed2 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 800303c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fedf 	bl	8002e06 <LL_ADC_INJ_IsConversionOngoing>
 8003048:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d15f      	bne.n	8003110 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d15c      	bne.n	8003110 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7d1b      	ldrb	r3, [r3, #20]
 800305a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <HAL_ADC_Init+0x2b0>)
 800306c:	4013      	ands	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	69b9      	ldr	r1, [r7, #24]
 8003074:	430b      	orrs	r3, r1
 8003076:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800307e:	2b01      	cmp	r3, #1
 8003080:	d130      	bne.n	80030e4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_ADC_Init+0x2b4>)
 8003090:	4013      	ands	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003096:	3a01      	subs	r2, #1
 8003098:	0411      	lsls	r1, r2, #16
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800309e:	4311      	orrs	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030a4:	4311      	orrs	r1, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030aa:	430a      	orrs	r2, r1
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	611a      	str	r2, [r3, #16]
 80030b8:	e01c      	b.n	80030f4 <HAL_ADC_Init+0x2c8>
 80030ba:	bf00      	nop
 80030bc:	24000000 	.word	0x24000000
 80030c0:	053e2d63 	.word	0x053e2d63
 80030c4:	40022000 	.word	0x40022000
 80030c8:	40022100 	.word	0x40022100
 80030cc:	58026000 	.word	0x58026000
 80030d0:	40022300 	.word	0x40022300
 80030d4:	58026300 	.word	0x58026300
 80030d8:	fff0c003 	.word	0xfff0c003
 80030dc:	ffffbffc 	.word	0xffffbffc
 80030e0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fdec 	bl	8003ce8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10c      	bne.n	8003132 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f023 010f 	bic.w	r1, r3, #15
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	1e5a      	subs	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
 8003130:	e007      	b.n	8003142 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 020f 	bic.w	r2, r2, #15
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
 8003152:	e007      	b.n	8003164 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	f043 0210 	orr.w	r2, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003164:	7ffb      	ldrb	r3, [r7, #31]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd90      	pop	{r4, r7, pc}
 800316e:	bf00      	nop

08003170 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a55      	ldr	r2, [pc, #340]	; (80032d8 <HAL_ADC_Start_DMA+0x168>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_ADC_Start_DMA+0x20>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a54      	ldr	r2, [pc, #336]	; (80032dc <HAL_ADC_Start_DMA+0x16c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_ADC_Start_DMA+0x24>
 8003190:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_ADC_Start_DMA+0x170>)
 8003192:	e000      	b.n	8003196 <HAL_ADC_Start_DMA+0x26>
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_ADC_Start_DMA+0x174>)
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fd64 	bl	8002c64 <LL_ADC_GetMultimode>
 800319c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fe1c 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 808c 	bne.w	80032c8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Start_DMA+0x4e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e087      	b.n	80032ce <HAL_ADC_Start_DMA+0x15e>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b05      	cmp	r3, #5
 80031d0:	d002      	beq.n	80031d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b09      	cmp	r3, #9
 80031d6:	d170      	bne.n	80032ba <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fc07 	bl	80039ec <ADC_Enable>
 80031de:	4603      	mov	r3, r0
 80031e0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d163      	bne.n	80032b0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ec:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_ADC_Start_DMA+0x178>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a37      	ldr	r2, [pc, #220]	; (80032dc <HAL_ADC_Start_DMA+0x16c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d002      	beq.n	8003208 <HAL_ADC_Start_DMA+0x98>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	e000      	b.n	800320a <HAL_ADC_Start_DMA+0x9a>
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <HAL_ADC_Start_DMA+0x168>)
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	4293      	cmp	r3, r2
 8003210:	d002      	beq.n	8003218 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	f023 0206 	bic.w	r2, r3, #6
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	659a      	str	r2, [r3, #88]	; 0x58
 800323c:	e002      	b.n	8003244 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003248:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_ADC_Start_DMA+0x17c>)
 800324a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_ADC_Start_DMA+0x180>)
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <HAL_ADC_Start_DMA+0x184>)
 800325a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	221c      	movs	r2, #28
 8003262:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0210 	orr.w	r2, r2, #16
 800327a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f7ff fc89 	bl	8002b9e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3340      	adds	r3, #64	; 0x40
 8003296:	4619      	mov	r1, r3
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f001 fdd6 	bl	8004e4c <HAL_DMA_Start_IT>
 80032a0:	4603      	mov	r3, r0
 80032a2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fd85 	bl	8002db8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032ae:	e00d      	b.n	80032cc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80032b8:	e008      	b.n	80032cc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80032c6:	e001      	b.n	80032cc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032c8:	2302      	movs	r3, #2
 80032ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40022100 	.word	0x40022100
 80032e0:	40022300 	.word	0x40022300
 80032e4:	58026300 	.word	0x58026300
 80032e8:	fffff0fe 	.word	0xfffff0fe
 80032ec:	08003bbf 	.word	0x08003bbf
 80032f0:	08003c97 	.word	0x08003c97
 80032f4:	08003cb3 	.word	0x08003cb3

080032f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b0a1      	sub	sp, #132	; 0x84
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a65      	ldr	r2, [pc, #404]	; (80034e4 <HAL_ADC_ConfigChannel+0x1b0>)
 800334e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x2a>
 800335a:	2302      	movs	r3, #2
 800335c:	e32e      	b.n	80039bc <HAL_ADC_ConfigChannel+0x688>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fd38 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 8313 	bne.w	800399e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db2c      	blt.n	80033da <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003388:	2b00      	cmp	r3, #0
 800338a:	d108      	bne.n	800339e <HAL_ADC_ConfigChannel+0x6a>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0e9b      	lsrs	r3, r3, #26
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2201      	movs	r2, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	e016      	b.n	80033cc <HAL_ADC_ConfigChannel+0x98>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ae:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e003      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80033ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	2201      	movs	r2, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	69d1      	ldr	r1, [r2, #28]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	430b      	orrs	r3, r1
 80033d8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f7ff fbad 	bl	8002b46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fcf5 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 80033f6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fd02 	bl	8002e06 <LL_ADC_INJ_IsConversionOngoing>
 8003402:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 80b8 	bne.w	800357c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800340c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 80b4 	bne.w	800357c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	461a      	mov	r2, r3
 8003422:	f7ff fbcf 	bl	8002bc4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003426:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <HAL_ADC_ConfigChannel+0x1b4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800342e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003432:	d10b      	bne.n	800344c <HAL_ADC_ConfigChannel+0x118>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	089b      	lsrs	r3, r3, #2
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	e01d      	b.n	8003488 <HAL_ADC_ConfigChannel+0x154>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10b      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x13e>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	e00a      	b.n	8003488 <HAL_ADC_ConfigChannel+0x154>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d02c      	beq.n	80034ec <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6919      	ldr	r1, [r3, #16]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034a0:	f7ff faea 	bl	8002a78 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6919      	ldr	r1, [r3, #16]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	7e5b      	ldrb	r3, [r3, #25]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d102      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x186>
 80034b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034b8:	e000      	b.n	80034bc <HAL_ADC_ConfigChannel+0x188>
 80034ba:	2300      	movs	r3, #0
 80034bc:	461a      	mov	r2, r3
 80034be:	f7ff fb14 	bl	8002aea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6919      	ldr	r1, [r3, #16]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	7e1b      	ldrb	r3, [r3, #24]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d102      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x1a4>
 80034d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034d6:	e000      	b.n	80034da <HAL_ADC_ConfigChannel+0x1a6>
 80034d8:	2300      	movs	r3, #0
 80034da:	461a      	mov	r2, r3
 80034dc:	f7ff faec 	bl	8002ab8 <LL_ADC_SetDataRightShift>
 80034e0:	e04c      	b.n	800357c <HAL_ADC_ConfigChannel+0x248>
 80034e2:	bf00      	nop
 80034e4:	47ff0000 	.word	0x47ff0000
 80034e8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	069b      	lsls	r3, r3, #26
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d107      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800350e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003516:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	069b      	lsls	r3, r3, #26
 8003520:	429a      	cmp	r2, r3
 8003522:	d107      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003532:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800353a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	069b      	lsls	r3, r3, #26
 8003544:	429a      	cmp	r2, r3
 8003546:	d107      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003556:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	069b      	lsls	r3, r3, #26
 8003568:	429a      	cmp	r2, r3
 800356a:	d107      	bne.n	800357c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800357a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fbf3 	bl	8002d6c <LL_ADC_IsEnabled>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	f040 8211 	bne.w	80039b0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6819      	ldr	r1, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	461a      	mov	r2, r3
 800359c:	f7ff fb3e 	bl	8002c1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4aa1      	ldr	r2, [pc, #644]	; (800382c <HAL_ADC_ConfigChannel+0x4f8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	f040 812e 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x2a0>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0e9b      	lsrs	r3, r3, #26
 80035c2:	3301      	adds	r3, #1
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2b09      	cmp	r3, #9
 80035ca:	bf94      	ite	ls
 80035cc:	2301      	movls	r3, #1
 80035ce:	2300      	movhi	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e019      	b.n	8003608 <HAL_ADC_ConfigChannel+0x2d4>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80035e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80035e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80035ec:	2320      	movs	r3, #32
 80035ee:	e003      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80035f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2b09      	cmp	r3, #9
 8003600:	bf94      	ite	ls
 8003602:	2301      	movls	r3, #1
 8003604:	2300      	movhi	r3, #0
 8003606:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003608:	2b00      	cmp	r3, #0
 800360a:	d079      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x2f4>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0e9b      	lsrs	r3, r3, #26
 800361e:	3301      	adds	r3, #1
 8003620:	069b      	lsls	r3, r3, #26
 8003622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003626:	e015      	b.n	8003654 <HAL_ADC_ConfigChannel+0x320>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003638:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800363a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003640:	2320      	movs	r3, #32
 8003642:	e003      	b.n	800364c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3301      	adds	r3, #1
 800364e:	069b      	lsls	r3, r3, #26
 8003650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x340>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	0e9b      	lsrs	r3, r3, #26
 8003666:	3301      	adds	r3, #1
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	e017      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x370>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800368c:	2320      	movs	r3, #32
 800368e:	e003      	b.n	8003698 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	3301      	adds	r3, #1
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2101      	movs	r1, #1
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	ea42 0103 	orr.w	r1, r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x396>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	0e9b      	lsrs	r3, r3, #26
 80036ba:	3301      	adds	r3, #1
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	4613      	mov	r3, r2
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4413      	add	r3, r2
 80036c6:	051b      	lsls	r3, r3, #20
 80036c8:	e018      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3c8>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e003      	b.n	80036ee <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	3301      	adds	r3, #1
 80036f0:	f003 021f 	and.w	r2, r3, #31
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036fc:	430b      	orrs	r3, r1
 80036fe:	e07e      	b.n	80037fe <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_ADC_ConfigChannel+0x3e8>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	3301      	adds	r3, #1
 8003714:	069b      	lsls	r3, r3, #26
 8003716:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800371a:	e015      	b.n	8003748 <HAL_ADC_ConfigChannel+0x414>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e003      	b.n	8003740 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	069b      	lsls	r3, r3, #26
 8003744:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x434>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0e9b      	lsrs	r3, r3, #26
 800375a:	3301      	adds	r3, #1
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	e017      	b.n	8003798 <HAL_ADC_ConfigChannel+0x464>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	61bb      	str	r3, [r7, #24]
  return result;
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003780:	2320      	movs	r3, #32
 8003782:	e003      	b.n	800378c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	ea42 0103 	orr.w	r1, r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10d      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x490>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0e9b      	lsrs	r3, r3, #26
 80037ae:	3301      	adds	r3, #1
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	3b1e      	subs	r3, #30
 80037bc:	051b      	lsls	r3, r3, #20
 80037be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037c2:	e01b      	b.n	80037fc <HAL_ADC_ConfigChannel+0x4c8>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	60fb      	str	r3, [r7, #12]
  return result;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	e003      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	f003 021f 	and.w	r2, r3, #31
 80037ee:	4613      	mov	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4413      	add	r3, r2
 80037f4:	3b1e      	subs	r3, #30
 80037f6:	051b      	lsls	r3, r3, #20
 80037f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037fc:	430b      	orrs	r3, r1
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	6892      	ldr	r2, [r2, #8]
 8003802:	4619      	mov	r1, r3
 8003804:	f7ff f9de 	bl	8002bc4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f280 80cf 	bge.w	80039b0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a06      	ldr	r2, [pc, #24]	; (8003830 <HAL_ADC_ConfigChannel+0x4fc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_ADC_ConfigChannel+0x4f2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_ADC_ConfigChannel+0x500>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10a      	bne.n	800383c <HAL_ADC_ConfigChannel+0x508>
 8003826:	4b04      	ldr	r3, [pc, #16]	; (8003838 <HAL_ADC_ConfigChannel+0x504>)
 8003828:	e009      	b.n	800383e <HAL_ADC_ConfigChannel+0x50a>
 800382a:	bf00      	nop
 800382c:	47ff0000 	.word	0x47ff0000
 8003830:	40022000 	.word	0x40022000
 8003834:	40022100 	.word	0x40022100
 8003838:	40022300 	.word	0x40022300
 800383c:	4b61      	ldr	r3, [pc, #388]	; (80039c4 <HAL_ADC_ConfigChannel+0x690>)
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff f90c 	bl	8002a5c <LL_ADC_GetCommonPathInternalCh>
 8003844:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a5f      	ldr	r2, [pc, #380]	; (80039c8 <HAL_ADC_ConfigChannel+0x694>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d004      	beq.n	800385a <HAL_ADC_ConfigChannel+0x526>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a5d      	ldr	r2, [pc, #372]	; (80039cc <HAL_ADC_ConfigChannel+0x698>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d10e      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x544>
 800385a:	485b      	ldr	r0, [pc, #364]	; (80039c8 <HAL_ADC_ConfigChannel+0x694>)
 800385c:	f7ff fa86 	bl	8002d6c <LL_ADC_IsEnabled>
 8003860:	4604      	mov	r4, r0
 8003862:	485a      	ldr	r0, [pc, #360]	; (80039cc <HAL_ADC_ConfigChannel+0x698>)
 8003864:	f7ff fa82 	bl	8002d6c <LL_ADC_IsEnabled>
 8003868:	4603      	mov	r3, r0
 800386a:	4323      	orrs	r3, r4
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e008      	b.n	800388a <HAL_ADC_ConfigChannel+0x556>
 8003878:	4855      	ldr	r0, [pc, #340]	; (80039d0 <HAL_ADC_ConfigChannel+0x69c>)
 800387a:	f7ff fa77 	bl	8002d6c <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d07d      	beq.n	800398a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a50      	ldr	r2, [pc, #320]	; (80039d4 <HAL_ADC_ConfigChannel+0x6a0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d130      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x5c6>
 8003898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d12b      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a4a      	ldr	r2, [pc, #296]	; (80039d0 <HAL_ADC_ConfigChannel+0x69c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	f040 8081 	bne.w	80039b0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a45      	ldr	r2, [pc, #276]	; (80039c8 <HAL_ADC_ConfigChannel+0x694>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_ADC_ConfigChannel+0x58e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a43      	ldr	r2, [pc, #268]	; (80039cc <HAL_ADC_ConfigChannel+0x698>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x592>
 80038c2:	4a45      	ldr	r2, [pc, #276]	; (80039d8 <HAL_ADC_ConfigChannel+0x6a4>)
 80038c4:	e000      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x594>
 80038c6:	4a3f      	ldr	r2, [pc, #252]	; (80039c4 <HAL_ADC_ConfigChannel+0x690>)
 80038c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7ff f8b0 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038d6:	4b41      	ldr	r3, [pc, #260]	; (80039dc <HAL_ADC_ConfigChannel+0x6a8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	099b      	lsrs	r3, r3, #6
 80038dc:	4a40      	ldr	r2, [pc, #256]	; (80039e0 <HAL_ADC_ConfigChannel+0x6ac>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	099b      	lsrs	r3, r3, #6
 80038e4:	3301      	adds	r3, #1
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038ea:	e002      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f9      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038f8:	e05a      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a39      	ldr	r2, [pc, #228]	; (80039e4 <HAL_ADC_ConfigChannel+0x6b0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d11e      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x60e>
 8003904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d119      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <HAL_ADC_ConfigChannel+0x69c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d14b      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <HAL_ADC_ConfigChannel+0x694>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_ADC_ConfigChannel+0x5f8>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a29      	ldr	r2, [pc, #164]	; (80039cc <HAL_ADC_ConfigChannel+0x698>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x5fc>
 800392c:	4a2a      	ldr	r2, [pc, #168]	; (80039d8 <HAL_ADC_ConfigChannel+0x6a4>)
 800392e:	e000      	b.n	8003932 <HAL_ADC_ConfigChannel+0x5fe>
 8003930:	4a24      	ldr	r2, [pc, #144]	; (80039c4 <HAL_ADC_ConfigChannel+0x690>)
 8003932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003934:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f7ff f87b 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003940:	e036      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a28      	ldr	r2, [pc, #160]	; (80039e8 <HAL_ADC_ConfigChannel+0x6b4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d131      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x67c>
 800394c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d12c      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <HAL_ADC_ConfigChannel+0x69c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d127      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <HAL_ADC_ConfigChannel+0x694>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_ADC_ConfigChannel+0x640>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a17      	ldr	r2, [pc, #92]	; (80039cc <HAL_ADC_ConfigChannel+0x698>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d101      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x644>
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003976:	e000      	b.n	800397a <HAL_ADC_ConfigChannel+0x646>
 8003978:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <HAL_ADC_ConfigChannel+0x690>)
 800397a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f7ff f857 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
 8003988:	e012      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	f043 0220 	orr.w	r2, r3, #32
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800399c:	e008      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3784      	adds	r7, #132	; 0x84
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd90      	pop	{r4, r7, pc}
 80039c4:	58026300 	.word	0x58026300
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40022100 	.word	0x40022100
 80039d0:	58026000 	.word	0x58026000
 80039d4:	cb840000 	.word	0xcb840000
 80039d8:	40022300 	.word	0x40022300
 80039dc:	24000000 	.word	0x24000000
 80039e0:	053e2d63 	.word	0x053e2d63
 80039e4:	c7520000 	.word	0xc7520000
 80039e8:	cfb80000 	.word	0xcfb80000

080039ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff f9b7 	bl	8002d6c <LL_ADC_IsEnabled>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d16e      	bne.n	8003ae2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	4b38      	ldr	r3, [pc, #224]	; (8003aec <ADC_Enable+0x100>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	f043 0210 	orr.w	r2, r3, #16
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e05a      	b.n	8003ae4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f972 	bl	8002d1c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a38:	f7fe ffbc 	bl	80029b4 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a2b      	ldr	r2, [pc, #172]	; (8003af0 <ADC_Enable+0x104>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <ADC_Enable+0x66>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <ADC_Enable+0x108>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <ADC_Enable+0x6a>
 8003a52:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <ADC_Enable+0x10c>)
 8003a54:	e000      	b.n	8003a58 <ADC_Enable+0x6c>
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <ADC_Enable+0x110>)
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff f903 	bl	8002c64 <LL_ADC_GetMultimode>
 8003a5e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a23      	ldr	r2, [pc, #140]	; (8003af4 <ADC_Enable+0x108>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d002      	beq.n	8003a70 <ADC_Enable+0x84>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	e000      	b.n	8003a72 <ADC_Enable+0x86>
 8003a70:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <ADC_Enable+0x104>)
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02c      	beq.n	8003ad4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d130      	bne.n	8003ae2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a80:	e028      	b.n	8003ad4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff f970 	bl	8002d6c <LL_ADC_IsEnabled>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff f940 	bl	8002d1c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a9c:	f7fe ff8a 	bl	80029b4 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d914      	bls.n	8003ad4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d00d      	beq.n	8003ad4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abc:	f043 0210 	orr.w	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f043 0201 	orr.w	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e007      	b.n	8003ae4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d1cf      	bne.n	8003a82 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	8000003f 	.word	0x8000003f
 8003af0:	40022000 	.word	0x40022000
 8003af4:	40022100 	.word	0x40022100
 8003af8:	40022300 	.word	0x40022300
 8003afc:	58026300 	.word	0x58026300

08003b00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff f940 	bl	8002d92 <LL_ADC_IsDisableOngoing>
 8003b12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff f927 	bl	8002d6c <LL_ADC_IsEnabled>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d047      	beq.n	8003bb4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d144      	bne.n	8003bb4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030d 	and.w	r3, r3, #13
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d10c      	bne.n	8003b52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff f901 	bl	8002d44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2203      	movs	r2, #3
 8003b48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b4a:	f7fe ff33 	bl	80029b4 <HAL_GetTick>
 8003b4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b50:	e029      	b.n	8003ba6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e023      	b.n	8003bb6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b6e:	f7fe ff21 	bl	80029b4 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d914      	bls.n	8003ba6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	f043 0210 	orr.w	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e007      	b.n	8003bb6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1dc      	bne.n	8003b6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d14b      	bne.n	8003c70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d021      	beq.n	8003c36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe ff92 	bl	8002b20 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d032      	beq.n	8003c68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d12b      	bne.n	8003c68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d11f      	bne.n	8003c68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
 8003c34:	e018      	b.n	8003c68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d111      	bne.n	8003c68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f043 0201 	orr.w	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff fb45 	bl	80032f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c6e:	e00e      	b.n	8003c8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff fb4f 	bl	8003320 <HAL_ADC_ErrorCallback>
}
 8003c82:	e004      	b.n	8003c8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	4798      	blx	r3
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff fb31 	bl	800330c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	f043 0204 	orr.w	r2, r3, #4
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7ff fb21 	bl	8003320 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a7a      	ldr	r2, [pc, #488]	; (8003ee0 <ADC_ConfigureBoostMode+0x1f8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <ADC_ConfigureBoostMode+0x1c>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a79      	ldr	r2, [pc, #484]	; (8003ee4 <ADC_ConfigureBoostMode+0x1fc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d109      	bne.n	8003d18 <ADC_ConfigureBoostMode+0x30>
 8003d04:	4b78      	ldr	r3, [pc, #480]	; (8003ee8 <ADC_ConfigureBoostMode+0x200>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e008      	b.n	8003d2a <ADC_ConfigureBoostMode+0x42>
 8003d18:	4b74      	ldr	r3, [pc, #464]	; (8003eec <ADC_ConfigureBoostMode+0x204>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01c      	beq.n	8003d68 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d2e:	f004 fe2f 	bl	8008990 <HAL_RCC_GetHCLKFreq>
 8003d32:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d3c:	d010      	beq.n	8003d60 <ADC_ConfigureBoostMode+0x78>
 8003d3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d42:	d873      	bhi.n	8003e2c <ADC_ConfigureBoostMode+0x144>
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d48:	d002      	beq.n	8003d50 <ADC_ConfigureBoostMode+0x68>
 8003d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d4e:	d16d      	bne.n	8003e2c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	60fb      	str	r3, [r7, #12]
        break;
 8003d5e:	e068      	b.n	8003e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	089b      	lsrs	r3, r3, #2
 8003d64:	60fb      	str	r3, [r7, #12]
        break;
 8003d66:	e064      	b.n	8003e32 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d6c:	f04f 0100 	mov.w	r1, #0
 8003d70:	f006 f8b6 	bl	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d7e:	d051      	beq.n	8003e24 <ADC_ConfigureBoostMode+0x13c>
 8003d80:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d84:	d854      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x148>
 8003d86:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d8a:	d047      	beq.n	8003e1c <ADC_ConfigureBoostMode+0x134>
 8003d8c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d90:	d84e      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x148>
 8003d92:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d96:	d03d      	beq.n	8003e14 <ADC_ConfigureBoostMode+0x12c>
 8003d98:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d9c:	d848      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x148>
 8003d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da2:	d033      	beq.n	8003e0c <ADC_ConfigureBoostMode+0x124>
 8003da4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da8:	d842      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x148>
 8003daa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003dae:	d029      	beq.n	8003e04 <ADC_ConfigureBoostMode+0x11c>
 8003db0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003db4:	d83c      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x148>
 8003db6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003dba:	d01a      	beq.n	8003df2 <ADC_ConfigureBoostMode+0x10a>
 8003dbc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003dc0:	d836      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x148>
 8003dc2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003dc6:	d014      	beq.n	8003df2 <ADC_ConfigureBoostMode+0x10a>
 8003dc8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003dcc:	d830      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x148>
 8003dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd2:	d00e      	beq.n	8003df2 <ADC_ConfigureBoostMode+0x10a>
 8003dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd8:	d82a      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x148>
 8003dda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dde:	d008      	beq.n	8003df2 <ADC_ConfigureBoostMode+0x10a>
 8003de0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003de4:	d824      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x148>
 8003de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dea:	d002      	beq.n	8003df2 <ADC_ConfigureBoostMode+0x10a>
 8003dec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003df0:	d11e      	bne.n	8003e30 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	0c9b      	lsrs	r3, r3, #18
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	60fb      	str	r3, [r7, #12]
        break;
 8003e02:	e016      	b.n	8003e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]
        break;
 8003e0a:	e012      	b.n	8003e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	60fb      	str	r3, [r7, #12]
        break;
 8003e12:	e00e      	b.n	8003e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	60fb      	str	r3, [r7, #12]
        break;
 8003e1a:	e00a      	b.n	8003e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	09db      	lsrs	r3, r3, #7
 8003e20:	60fb      	str	r3, [r7, #12]
        break;
 8003e22:	e006      	b.n	8003e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	60fb      	str	r3, [r7, #12]
        break;
 8003e2a:	e002      	b.n	8003e32 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003e30:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e32:	f7fe fdcb 	bl	80029cc <HAL_GetREVID>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d815      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <ADC_ConfigureBoostMode+0x208>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d908      	bls.n	8003e5a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e56:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e58:	e03e      	b.n	8003ed8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e68:	609a      	str	r2, [r3, #8]
}
 8003e6a:	e035      	b.n	8003ed8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a1f      	ldr	r2, [pc, #124]	; (8003ef4 <ADC_ConfigureBoostMode+0x20c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d808      	bhi.n	8003e8c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e88:	609a      	str	r2, [r3, #8]
}
 8003e8a:	e025      	b.n	8003ed8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ef8 <ADC_ConfigureBoostMode+0x210>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d80a      	bhi.n	8003eaa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea6:	609a      	str	r2, [r3, #8]
}
 8003ea8:	e016      	b.n	8003ed8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4a13      	ldr	r2, [pc, #76]	; (8003efc <ADC_ConfigureBoostMode+0x214>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d80a      	bhi.n	8003ec8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec4:	609a      	str	r2, [r3, #8]
}
 8003ec6:	e007      	b.n	8003ed8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40022000 	.word	0x40022000
 8003ee4:	40022100 	.word	0x40022100
 8003ee8:	40022300 	.word	0x40022300
 8003eec:	58026300 	.word	0x58026300
 8003ef0:	01312d00 	.word	0x01312d00
 8003ef4:	005f5e10 	.word	0x005f5e10
 8003ef8:	00bebc20 	.word	0x00bebc20
 8003efc:	017d7840 	.word	0x017d7840

08003f00 <LL_ADC_IsEnabled>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <LL_ADC_IsEnabled+0x18>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <LL_ADC_IsEnabled+0x1a>
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <LL_ADC_StartCalibration>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <LL_ADC_StartCalibration+0x38>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	3ffeffc0 	.word	0x3ffeffc0

08003f64 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f78:	d101      	bne.n	8003f7e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_REG_IsConversionOngoing>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d101      	bne.n	8003fa4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_ADCEx_Calibration_Start+0x1e>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e04c      	b.n	800406c <HAL_ADCEx_Calibration_Start+0xb8>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff fd90 	bl	8003b00 <ADC_Disable>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d135      	bne.n	8004056 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fee:	4b21      	ldr	r3, [pc, #132]	; (8004074 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	f043 0202 	orr.w	r2, r3, #2
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff ff90 	bl	8003f28 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004008:	e014      	b.n	8004034 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	3301      	adds	r3, #1
 800400e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4a19      	ldr	r2, [pc, #100]	; (8004078 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d30d      	bcc.n	8004034 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	f023 0312 	bic.w	r3, r3, #18
 8004020:	f043 0210 	orr.w	r2, r3, #16
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e01b      	b.n	800406c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff93 	bl	8003f64 <LL_ADC_IsCalibrationOnGoing>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e2      	bne.n	800400a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	f023 0303 	bic.w	r3, r3, #3
 800404c:	f043 0201 	orr.w	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
 8004054:	e005      	b.n	8004062 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	f043 0210 	orr.w	r2, r3, #16
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800406a:	7dfb      	ldrb	r3, [r7, #23]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	ffffeefd 	.word	0xffffeefd
 8004078:	25c3f800 	.word	0x25c3f800

0800407c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800407c:	b590      	push	{r4, r7, lr}
 800407e:	b09f      	sub	sp, #124	; 0x7c
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004096:	2302      	movs	r3, #2
 8004098:	e0be      	b.n	8004218 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80040a2:	2300      	movs	r3, #0
 80040a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a5c      	ldr	r2, [pc, #368]	; (8004220 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d102      	bne.n	80040ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040b4:	4b5b      	ldr	r3, [pc, #364]	; (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	e001      	b.n	80040be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e09d      	b.n	8004218 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff ff54 	bl	8003f8c <LL_ADC_REG_IsConversionOngoing>
 80040e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff ff4e 	bl	8003f8c <LL_ADC_REG_IsConversionOngoing>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d17f      	bne.n	80041f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d17c      	bne.n	80041f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a47      	ldr	r2, [pc, #284]	; (8004220 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a46      	ldr	r2, [pc, #280]	; (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004110:	4b45      	ldr	r3, [pc, #276]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004112:	e000      	b.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004114:	4b45      	ldr	r3, [pc, #276]	; (800422c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004116:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d039      	beq.n	8004194 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	431a      	orrs	r2, r3
 800412e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004130:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a3a      	ldr	r2, [pc, #232]	; (8004220 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a38      	ldr	r2, [pc, #224]	; (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10e      	bne.n	8004164 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004146:	4836      	ldr	r0, [pc, #216]	; (8004220 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004148:	f7ff feda 	bl	8003f00 <LL_ADC_IsEnabled>
 800414c:	4604      	mov	r4, r0
 800414e:	4835      	ldr	r0, [pc, #212]	; (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004150:	f7ff fed6 	bl	8003f00 <LL_ADC_IsEnabled>
 8004154:	4603      	mov	r3, r0
 8004156:	4323      	orrs	r3, r4
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e008      	b.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004164:	4832      	ldr	r0, [pc, #200]	; (8004230 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004166:	f7ff fecb 	bl	8003f00 <LL_ADC_IsEnabled>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d047      	beq.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800417a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004180:	4013      	ands	r3, r2
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	6811      	ldr	r1, [r2, #0]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	6892      	ldr	r2, [r2, #8]
 800418a:	430a      	orrs	r2, r1
 800418c:	431a      	orrs	r2, r3
 800418e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004190:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004192:	e03a      	b.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10e      	bne.n	80041d2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80041b4:	481a      	ldr	r0, [pc, #104]	; (8004220 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041b6:	f7ff fea3 	bl	8003f00 <LL_ADC_IsEnabled>
 80041ba:	4604      	mov	r4, r0
 80041bc:	4819      	ldr	r0, [pc, #100]	; (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041be:	f7ff fe9f 	bl	8003f00 <LL_ADC_IsEnabled>
 80041c2:	4603      	mov	r3, r0
 80041c4:	4323      	orrs	r3, r4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	e008      	b.n	80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80041d2:	4817      	ldr	r0, [pc, #92]	; (8004230 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80041d4:	f7ff fe94 	bl	8003f00 <LL_ADC_IsEnabled>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041f2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041f4:	e009      	b.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004208:	e000      	b.n	800420c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800420a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004214:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004218:	4618      	mov	r0, r3
 800421a:	377c      	adds	r7, #124	; 0x7c
 800421c:	46bd      	mov	sp, r7
 800421e:	bd90      	pop	{r4, r7, pc}
 8004220:	40022000 	.word	0x40022000
 8004224:	40022100 	.word	0x40022100
 8004228:	40022300 	.word	0x40022300
 800422c:	58026300 	.word	0x58026300
 8004230:	58026000 	.word	0x58026000
 8004234:	fffff0e0 	.word	0xfffff0e0

08004238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <__NVIC_SetPriorityGrouping+0x40>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004254:	4013      	ands	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <__NVIC_SetPriorityGrouping+0x44>)
 8004262:	4313      	orrs	r3, r2
 8004264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004266:	4a04      	ldr	r2, [pc, #16]	; (8004278 <__NVIC_SetPriorityGrouping+0x40>)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	60d3      	str	r3, [r2, #12]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000ed00 	.word	0xe000ed00
 800427c:	05fa0000 	.word	0x05fa0000

08004280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <__NVIC_GetPriorityGrouping+0x18>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	0a1b      	lsrs	r3, r3, #8
 800428a:	f003 0307 	and.w	r3, r3, #7
}
 800428e:	4618      	mov	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	db0b      	blt.n	80042c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	f003 021f 	and.w	r2, r3, #31
 80042b4:	4907      	ldr	r1, [pc, #28]	; (80042d4 <__NVIC_EnableIRQ+0x38>)
 80042b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2001      	movs	r0, #1
 80042be:	fa00 f202 	lsl.w	r2, r0, r2
 80042c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	e000e100 	.word	0xe000e100

080042d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	db0a      	blt.n	8004302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	490c      	ldr	r1, [pc, #48]	; (8004324 <__NVIC_SetPriority+0x4c>)
 80042f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042f6:	0112      	lsls	r2, r2, #4
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	440b      	add	r3, r1
 80042fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004300:	e00a      	b.n	8004318 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	4908      	ldr	r1, [pc, #32]	; (8004328 <__NVIC_SetPriority+0x50>)
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	3b04      	subs	r3, #4
 8004310:	0112      	lsls	r2, r2, #4
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	440b      	add	r3, r1
 8004316:	761a      	strb	r2, [r3, #24]
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	e000e100 	.word	0xe000e100
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800432c:	b480      	push	{r7}
 800432e:	b089      	sub	sp, #36	; 0x24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f1c3 0307 	rsb	r3, r3, #7
 8004346:	2b04      	cmp	r3, #4
 8004348:	bf28      	it	cs
 800434a:	2304      	movcs	r3, #4
 800434c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	3304      	adds	r3, #4
 8004352:	2b06      	cmp	r3, #6
 8004354:	d902      	bls.n	800435c <NVIC_EncodePriority+0x30>
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3b03      	subs	r3, #3
 800435a:	e000      	b.n	800435e <NVIC_EncodePriority+0x32>
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43da      	mvns	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	401a      	ands	r2, r3
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004374:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	fa01 f303 	lsl.w	r3, r1, r3
 800437e:	43d9      	mvns	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004384:	4313      	orrs	r3, r2
         );
}
 8004386:	4618      	mov	r0, r3
 8004388:	3724      	adds	r7, #36	; 0x24
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff ff4c 	bl	8004238 <__NVIC_SetPriorityGrouping>
}
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043b6:	f7ff ff63 	bl	8004280 <__NVIC_GetPriorityGrouping>
 80043ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	6978      	ldr	r0, [r7, #20]
 80043c2:	f7ff ffb3 	bl	800432c <NVIC_EncodePriority>
 80043c6:	4602      	mov	r2, r0
 80043c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043cc:	4611      	mov	r1, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff ff82 	bl	80042d8 <__NVIC_SetPriority>
}
 80043d4:	bf00      	nop
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff ff56 	bl	800429c <__NVIC_EnableIRQ>
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e014      	b.n	8004434 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	791b      	ldrb	r3, [r3, #4]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d105      	bne.n	8004420 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fd fd5c 	bl	8001ed8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004452:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01d      	beq.n	800449a <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d018      	beq.n	800449a <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2204      	movs	r2, #4
 800446c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004482:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004492:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f827 	bl	80044e8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01d      	beq.n	80044e0 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d018      	beq.n	80044e0 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2204      	movs	r2, #4
 80044b2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f043 0202 	orr.w	r2, r3, #2
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80044d8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f950 	bl	8004780 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_DAC_ConfigChannel+0x1e>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e12a      	b.n	8004774 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	795b      	ldrb	r3, [r3, #5]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_DAC_ConfigChannel+0x2e>
 8004526:	2302      	movs	r3, #2
 8004528:	e124      	b.n	8004774 <HAL_DAC_ConfigChannel+0x278>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2202      	movs	r2, #2
 8004534:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d17a      	bne.n	8004634 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800453e:	f7fe fa39 	bl	80029b4 <HAL_GetTick>
 8004542:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d13d      	bne.n	80045c6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800454a:	e018      	b.n	800457e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800454c:	f7fe fa32 	bl	80029b4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d911      	bls.n	800457e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004560:	4b86      	ldr	r3, [pc, #536]	; (800477c <HAL_DAC_ConfigChannel+0x280>)
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f043 0208 	orr.w	r2, r3, #8
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2203      	movs	r2, #3
 8004578:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e0fa      	b.n	8004774 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004584:	4b7d      	ldr	r3, [pc, #500]	; (800477c <HAL_DAC_ConfigChannel+0x280>)
 8004586:	4013      	ands	r3, r2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1df      	bne.n	800454c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	6992      	ldr	r2, [r2, #24]
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
 8004596:	e020      	b.n	80045da <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004598:	f7fe fa0c 	bl	80029b4 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d90f      	bls.n	80045c6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	da0a      	bge.n	80045c6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f043 0208 	orr.w	r2, r3, #8
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2203      	movs	r2, #3
 80045c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0d6      	b.n	8004774 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	dbe3      	blt.n	8004598 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	6992      	ldr	r2, [r2, #24]
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80045ea:	fa01 f303 	lsl.w	r3, r1, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	ea02 0103 	and.w	r1, r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	409a      	lsls	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	21ff      	movs	r1, #255	; 0xff
 8004616:	fa01 f303 	lsl.w	r3, r1, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	ea02 0103 	and.w	r1, r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f003 0310 	and.w	r3, r3, #16
 800462a:	409a      	lsls	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d11d      	bne.n	8004678 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	221f      	movs	r2, #31
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4313      	orrs	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2207      	movs	r2, #7
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d102      	bne.n	80046a2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800469c:	2300      	movs	r3, #0
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
 80046a0:	e00f      	b.n	80046c2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d102      	bne.n	80046b0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80046aa:	2301      	movs	r3, #1
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
 80046ae:	e008      	b.n	80046c2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80046b8:	2301      	movs	r3, #1
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
 80046bc:	e001      	b.n	80046c2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6819      	ldr	r1, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43da      	mvns	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	400a      	ands	r2, r1
 8004708:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	f640 72fe 	movw	r2, #4094	; 0xffe
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6819      	ldr	r1, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	22c0      	movs	r2, #192	; 0xc0
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43da      	mvns	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	400a      	ands	r2, r1
 8004762:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004774:	4618      	mov	r0, r3
 8004776:	3728      	adds	r7, #40	; 0x28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20008000 	.word	0x20008000

08004780 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800479c:	f7fe f90a 	bl	80029b4 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e316      	b.n	8004dda <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a66      	ldr	r2, [pc, #408]	; (800494c <HAL_DMA_Init+0x1b8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d04a      	beq.n	800484c <HAL_DMA_Init+0xb8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a65      	ldr	r2, [pc, #404]	; (8004950 <HAL_DMA_Init+0x1bc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d045      	beq.n	800484c <HAL_DMA_Init+0xb8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a63      	ldr	r2, [pc, #396]	; (8004954 <HAL_DMA_Init+0x1c0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d040      	beq.n	800484c <HAL_DMA_Init+0xb8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a62      	ldr	r2, [pc, #392]	; (8004958 <HAL_DMA_Init+0x1c4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d03b      	beq.n	800484c <HAL_DMA_Init+0xb8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a60      	ldr	r2, [pc, #384]	; (800495c <HAL_DMA_Init+0x1c8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d036      	beq.n	800484c <HAL_DMA_Init+0xb8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a5f      	ldr	r2, [pc, #380]	; (8004960 <HAL_DMA_Init+0x1cc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d031      	beq.n	800484c <HAL_DMA_Init+0xb8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a5d      	ldr	r2, [pc, #372]	; (8004964 <HAL_DMA_Init+0x1d0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d02c      	beq.n	800484c <HAL_DMA_Init+0xb8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a5c      	ldr	r2, [pc, #368]	; (8004968 <HAL_DMA_Init+0x1d4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d027      	beq.n	800484c <HAL_DMA_Init+0xb8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a5a      	ldr	r2, [pc, #360]	; (800496c <HAL_DMA_Init+0x1d8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d022      	beq.n	800484c <HAL_DMA_Init+0xb8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a59      	ldr	r2, [pc, #356]	; (8004970 <HAL_DMA_Init+0x1dc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d01d      	beq.n	800484c <HAL_DMA_Init+0xb8>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a57      	ldr	r2, [pc, #348]	; (8004974 <HAL_DMA_Init+0x1e0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d018      	beq.n	800484c <HAL_DMA_Init+0xb8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a56      	ldr	r2, [pc, #344]	; (8004978 <HAL_DMA_Init+0x1e4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d013      	beq.n	800484c <HAL_DMA_Init+0xb8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a54      	ldr	r2, [pc, #336]	; (800497c <HAL_DMA_Init+0x1e8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00e      	beq.n	800484c <HAL_DMA_Init+0xb8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a53      	ldr	r2, [pc, #332]	; (8004980 <HAL_DMA_Init+0x1ec>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d009      	beq.n	800484c <HAL_DMA_Init+0xb8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a51      	ldr	r2, [pc, #324]	; (8004984 <HAL_DMA_Init+0x1f0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_DMA_Init+0xb8>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a50      	ldr	r2, [pc, #320]	; (8004988 <HAL_DMA_Init+0x1f4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d101      	bne.n	8004850 <HAL_DMA_Init+0xbc>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_DMA_Init+0xbe>
 8004850:	2300      	movs	r3, #0
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 813b 	beq.w	8004ace <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a37      	ldr	r2, [pc, #220]	; (800494c <HAL_DMA_Init+0x1b8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d04a      	beq.n	8004908 <HAL_DMA_Init+0x174>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a36      	ldr	r2, [pc, #216]	; (8004950 <HAL_DMA_Init+0x1bc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d045      	beq.n	8004908 <HAL_DMA_Init+0x174>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a34      	ldr	r2, [pc, #208]	; (8004954 <HAL_DMA_Init+0x1c0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d040      	beq.n	8004908 <HAL_DMA_Init+0x174>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a33      	ldr	r2, [pc, #204]	; (8004958 <HAL_DMA_Init+0x1c4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d03b      	beq.n	8004908 <HAL_DMA_Init+0x174>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a31      	ldr	r2, [pc, #196]	; (800495c <HAL_DMA_Init+0x1c8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d036      	beq.n	8004908 <HAL_DMA_Init+0x174>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a30      	ldr	r2, [pc, #192]	; (8004960 <HAL_DMA_Init+0x1cc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d031      	beq.n	8004908 <HAL_DMA_Init+0x174>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2e      	ldr	r2, [pc, #184]	; (8004964 <HAL_DMA_Init+0x1d0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d02c      	beq.n	8004908 <HAL_DMA_Init+0x174>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a2d      	ldr	r2, [pc, #180]	; (8004968 <HAL_DMA_Init+0x1d4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d027      	beq.n	8004908 <HAL_DMA_Init+0x174>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2b      	ldr	r2, [pc, #172]	; (800496c <HAL_DMA_Init+0x1d8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d022      	beq.n	8004908 <HAL_DMA_Init+0x174>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <HAL_DMA_Init+0x1dc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d01d      	beq.n	8004908 <HAL_DMA_Init+0x174>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a28      	ldr	r2, [pc, #160]	; (8004974 <HAL_DMA_Init+0x1e0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d018      	beq.n	8004908 <HAL_DMA_Init+0x174>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a27      	ldr	r2, [pc, #156]	; (8004978 <HAL_DMA_Init+0x1e4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d013      	beq.n	8004908 <HAL_DMA_Init+0x174>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a25      	ldr	r2, [pc, #148]	; (800497c <HAL_DMA_Init+0x1e8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00e      	beq.n	8004908 <HAL_DMA_Init+0x174>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a24      	ldr	r2, [pc, #144]	; (8004980 <HAL_DMA_Init+0x1ec>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_DMA_Init+0x174>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a22      	ldr	r2, [pc, #136]	; (8004984 <HAL_DMA_Init+0x1f0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_DMA_Init+0x174>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a21      	ldr	r2, [pc, #132]	; (8004988 <HAL_DMA_Init+0x1f4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d108      	bne.n	800491a <HAL_DMA_Init+0x186>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e007      	b.n	800492a <HAL_DMA_Init+0x196>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800492a:	e02f      	b.n	800498c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800492c:	f7fe f842 	bl	80029b4 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b05      	cmp	r3, #5
 8004938:	d928      	bls.n	800498c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2203      	movs	r2, #3
 8004944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e246      	b.n	8004dda <HAL_DMA_Init+0x646>
 800494c:	40020010 	.word	0x40020010
 8004950:	40020028 	.word	0x40020028
 8004954:	40020040 	.word	0x40020040
 8004958:	40020058 	.word	0x40020058
 800495c:	40020070 	.word	0x40020070
 8004960:	40020088 	.word	0x40020088
 8004964:	400200a0 	.word	0x400200a0
 8004968:	400200b8 	.word	0x400200b8
 800496c:	40020410 	.word	0x40020410
 8004970:	40020428 	.word	0x40020428
 8004974:	40020440 	.word	0x40020440
 8004978:	40020458 	.word	0x40020458
 800497c:	40020470 	.word	0x40020470
 8004980:	40020488 	.word	0x40020488
 8004984:	400204a0 	.word	0x400204a0
 8004988:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1c8      	bne.n	800492c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4b83      	ldr	r3, [pc, #524]	; (8004bb4 <HAL_DMA_Init+0x420>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80049b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d107      	bne.n	80049f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	4313      	orrs	r3, r2
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80049f0:	4b71      	ldr	r3, [pc, #452]	; (8004bb8 <HAL_DMA_Init+0x424>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b71      	ldr	r3, [pc, #452]	; (8004bbc <HAL_DMA_Init+0x428>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fc:	d328      	bcc.n	8004a50 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b28      	cmp	r3, #40	; 0x28
 8004a04:	d903      	bls.n	8004a0e <HAL_DMA_Init+0x27a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a0c:	d917      	bls.n	8004a3e <HAL_DMA_Init+0x2aa>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b3e      	cmp	r3, #62	; 0x3e
 8004a14:	d903      	bls.n	8004a1e <HAL_DMA_Init+0x28a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b42      	cmp	r3, #66	; 0x42
 8004a1c:	d90f      	bls.n	8004a3e <HAL_DMA_Init+0x2aa>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b46      	cmp	r3, #70	; 0x46
 8004a24:	d903      	bls.n	8004a2e <HAL_DMA_Init+0x29a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b48      	cmp	r3, #72	; 0x48
 8004a2c:	d907      	bls.n	8004a3e <HAL_DMA_Init+0x2aa>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b4e      	cmp	r3, #78	; 0x4e
 8004a34:	d905      	bls.n	8004a42 <HAL_DMA_Init+0x2ae>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b52      	cmp	r3, #82	; 0x52
 8004a3c:	d801      	bhi.n	8004a42 <HAL_DMA_Init+0x2ae>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <HAL_DMA_Init+0x2b0>
 8004a42:	2300      	movs	r3, #0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a4e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0307 	bic.w	r3, r3, #7
 8004a66:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d117      	bne.n	8004aaa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f002 fb33 	bl	80070f8 <DMA_CheckFifoParam>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e197      	b.n	8004dda <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f002 fa6e 	bl	8006f94 <DMA_CalcBaseAndBitshift>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	223f      	movs	r2, #63	; 0x3f
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	e0cd      	b.n	8004c6a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3b      	ldr	r2, [pc, #236]	; (8004bc0 <HAL_DMA_Init+0x42c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d022      	beq.n	8004b1e <HAL_DMA_Init+0x38a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a39      	ldr	r2, [pc, #228]	; (8004bc4 <HAL_DMA_Init+0x430>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01d      	beq.n	8004b1e <HAL_DMA_Init+0x38a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a38      	ldr	r2, [pc, #224]	; (8004bc8 <HAL_DMA_Init+0x434>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d018      	beq.n	8004b1e <HAL_DMA_Init+0x38a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a36      	ldr	r2, [pc, #216]	; (8004bcc <HAL_DMA_Init+0x438>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <HAL_DMA_Init+0x38a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a35      	ldr	r2, [pc, #212]	; (8004bd0 <HAL_DMA_Init+0x43c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00e      	beq.n	8004b1e <HAL_DMA_Init+0x38a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a33      	ldr	r2, [pc, #204]	; (8004bd4 <HAL_DMA_Init+0x440>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d009      	beq.n	8004b1e <HAL_DMA_Init+0x38a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a32      	ldr	r2, [pc, #200]	; (8004bd8 <HAL_DMA_Init+0x444>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_DMA_Init+0x38a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a30      	ldr	r2, [pc, #192]	; (8004bdc <HAL_DMA_Init+0x448>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_DMA_Init+0x38e>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HAL_DMA_Init+0x390>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8097 	beq.w	8004c58 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a24      	ldr	r2, [pc, #144]	; (8004bc0 <HAL_DMA_Init+0x42c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d021      	beq.n	8004b78 <HAL_DMA_Init+0x3e4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <HAL_DMA_Init+0x430>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01c      	beq.n	8004b78 <HAL_DMA_Init+0x3e4>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a21      	ldr	r2, [pc, #132]	; (8004bc8 <HAL_DMA_Init+0x434>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d017      	beq.n	8004b78 <HAL_DMA_Init+0x3e4>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_DMA_Init+0x438>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d012      	beq.n	8004b78 <HAL_DMA_Init+0x3e4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <HAL_DMA_Init+0x43c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00d      	beq.n	8004b78 <HAL_DMA_Init+0x3e4>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <HAL_DMA_Init+0x440>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d008      	beq.n	8004b78 <HAL_DMA_Init+0x3e4>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1b      	ldr	r2, [pc, #108]	; (8004bd8 <HAL_DMA_Init+0x444>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <HAL_DMA_Init+0x3e4>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_DMA_Init+0x448>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <HAL_DMA_Init+0x44c>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d020      	beq.n	8004be4 <HAL_DMA_Init+0x450>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b80      	cmp	r3, #128	; 0x80
 8004ba8:	d102      	bne.n	8004bb0 <HAL_DMA_Init+0x41c>
 8004baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bae:	e01a      	b.n	8004be6 <HAL_DMA_Init+0x452>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e018      	b.n	8004be6 <HAL_DMA_Init+0x452>
 8004bb4:	fe10803f 	.word	0xfe10803f
 8004bb8:	5c001000 	.word	0x5c001000
 8004bbc:	ffff0000 	.word	0xffff0000
 8004bc0:	58025408 	.word	0x58025408
 8004bc4:	5802541c 	.word	0x5802541c
 8004bc8:	58025430 	.word	0x58025430
 8004bcc:	58025444 	.word	0x58025444
 8004bd0:	58025458 	.word	0x58025458
 8004bd4:	5802546c 	.word	0x5802546c
 8004bd8:	58025480 	.word	0x58025480
 8004bdc:	58025494 	.word	0x58025494
 8004be0:	fffe000f 	.word	0xfffe000f
 8004be4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68d2      	ldr	r2, [r2, #12]
 8004bea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4b6e      	ldr	r3, [pc, #440]	; (8004de4 <HAL_DMA_Init+0x650>)
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4a6e      	ldr	r2, [pc, #440]	; (8004de8 <HAL_DMA_Init+0x654>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	009a      	lsls	r2, r3, #2
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f002 f9a9 	bl	8006f94 <DMA_CalcBaseAndBitshift>
 8004c42:	4603      	mov	r3, r0
 8004c44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2201      	movs	r2, #1
 8004c50:	409a      	lsls	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	e008      	b.n	8004c6a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2240      	movs	r2, #64	; 0x40
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2203      	movs	r2, #3
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e0b7      	b.n	8004dda <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a5f      	ldr	r2, [pc, #380]	; (8004dec <HAL_DMA_Init+0x658>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d072      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a5d      	ldr	r2, [pc, #372]	; (8004df0 <HAL_DMA_Init+0x65c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d06d      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a5c      	ldr	r2, [pc, #368]	; (8004df4 <HAL_DMA_Init+0x660>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d068      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a5a      	ldr	r2, [pc, #360]	; (8004df8 <HAL_DMA_Init+0x664>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d063      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a59      	ldr	r2, [pc, #356]	; (8004dfc <HAL_DMA_Init+0x668>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d05e      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a57      	ldr	r2, [pc, #348]	; (8004e00 <HAL_DMA_Init+0x66c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d059      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a56      	ldr	r2, [pc, #344]	; (8004e04 <HAL_DMA_Init+0x670>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d054      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a54      	ldr	r2, [pc, #336]	; (8004e08 <HAL_DMA_Init+0x674>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d04f      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a53      	ldr	r2, [pc, #332]	; (8004e0c <HAL_DMA_Init+0x678>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d04a      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a51      	ldr	r2, [pc, #324]	; (8004e10 <HAL_DMA_Init+0x67c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d045      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a50      	ldr	r2, [pc, #320]	; (8004e14 <HAL_DMA_Init+0x680>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d040      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a4e      	ldr	r2, [pc, #312]	; (8004e18 <HAL_DMA_Init+0x684>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d03b      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a4d      	ldr	r2, [pc, #308]	; (8004e1c <HAL_DMA_Init+0x688>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d036      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a4b      	ldr	r2, [pc, #300]	; (8004e20 <HAL_DMA_Init+0x68c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d031      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a4a      	ldr	r2, [pc, #296]	; (8004e24 <HAL_DMA_Init+0x690>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d02c      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a48      	ldr	r2, [pc, #288]	; (8004e28 <HAL_DMA_Init+0x694>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d027      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a47      	ldr	r2, [pc, #284]	; (8004e2c <HAL_DMA_Init+0x698>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d022      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a45      	ldr	r2, [pc, #276]	; (8004e30 <HAL_DMA_Init+0x69c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01d      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a44      	ldr	r2, [pc, #272]	; (8004e34 <HAL_DMA_Init+0x6a0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d018      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a42      	ldr	r2, [pc, #264]	; (8004e38 <HAL_DMA_Init+0x6a4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a41      	ldr	r2, [pc, #260]	; (8004e3c <HAL_DMA_Init+0x6a8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00e      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a3f      	ldr	r2, [pc, #252]	; (8004e40 <HAL_DMA_Init+0x6ac>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a3e      	ldr	r2, [pc, #248]	; (8004e44 <HAL_DMA_Init+0x6b0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_DMA_Init+0x5c6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a3c      	ldr	r2, [pc, #240]	; (8004e48 <HAL_DMA_Init+0x6b4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d101      	bne.n	8004d5e <HAL_DMA_Init+0x5ca>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <HAL_DMA_Init+0x5cc>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d032      	beq.n	8004dca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f002 fa43 	bl	80071f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b80      	cmp	r3, #128	; 0x80
 8004d70:	d102      	bne.n	8004d78 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d010      	beq.n	8004db8 <HAL_DMA_Init+0x624>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d80c      	bhi.n	8004db8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f002 fac0 	bl	8007324 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004db4:	605a      	str	r2, [r3, #4]
 8004db6:	e008      	b.n	8004dca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	a7fdabf8 	.word	0xa7fdabf8
 8004de8:	cccccccd 	.word	0xcccccccd
 8004dec:	40020010 	.word	0x40020010
 8004df0:	40020028 	.word	0x40020028
 8004df4:	40020040 	.word	0x40020040
 8004df8:	40020058 	.word	0x40020058
 8004dfc:	40020070 	.word	0x40020070
 8004e00:	40020088 	.word	0x40020088
 8004e04:	400200a0 	.word	0x400200a0
 8004e08:	400200b8 	.word	0x400200b8
 8004e0c:	40020410 	.word	0x40020410
 8004e10:	40020428 	.word	0x40020428
 8004e14:	40020440 	.word	0x40020440
 8004e18:	40020458 	.word	0x40020458
 8004e1c:	40020470 	.word	0x40020470
 8004e20:	40020488 	.word	0x40020488
 8004e24:	400204a0 	.word	0x400204a0
 8004e28:	400204b8 	.word	0x400204b8
 8004e2c:	58025408 	.word	0x58025408
 8004e30:	5802541c 	.word	0x5802541c
 8004e34:	58025430 	.word	0x58025430
 8004e38:	58025444 	.word	0x58025444
 8004e3c:	58025458 	.word	0x58025458
 8004e40:	5802546c 	.word	0x5802546c
 8004e44:	58025480 	.word	0x58025480
 8004e48:	58025494 	.word	0x58025494

08004e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e226      	b.n	80052b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_DMA_Start_IT+0x2a>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e21f      	b.n	80052b6 <HAL_DMA_Start_IT+0x46a>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	f040 820a 	bne.w	80052a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a68      	ldr	r2, [pc, #416]	; (8005040 <HAL_DMA_Start_IT+0x1f4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d04a      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a66      	ldr	r2, [pc, #408]	; (8005044 <HAL_DMA_Start_IT+0x1f8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d045      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a65      	ldr	r2, [pc, #404]	; (8005048 <HAL_DMA_Start_IT+0x1fc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d040      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a63      	ldr	r2, [pc, #396]	; (800504c <HAL_DMA_Start_IT+0x200>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d03b      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a62      	ldr	r2, [pc, #392]	; (8005050 <HAL_DMA_Start_IT+0x204>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d036      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a60      	ldr	r2, [pc, #384]	; (8005054 <HAL_DMA_Start_IT+0x208>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d031      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a5f      	ldr	r2, [pc, #380]	; (8005058 <HAL_DMA_Start_IT+0x20c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d02c      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a5d      	ldr	r2, [pc, #372]	; (800505c <HAL_DMA_Start_IT+0x210>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d027      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a5c      	ldr	r2, [pc, #368]	; (8005060 <HAL_DMA_Start_IT+0x214>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d022      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a5a      	ldr	r2, [pc, #360]	; (8005064 <HAL_DMA_Start_IT+0x218>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01d      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a59      	ldr	r2, [pc, #356]	; (8005068 <HAL_DMA_Start_IT+0x21c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d018      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a57      	ldr	r2, [pc, #348]	; (800506c <HAL_DMA_Start_IT+0x220>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a56      	ldr	r2, [pc, #344]	; (8005070 <HAL_DMA_Start_IT+0x224>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00e      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a54      	ldr	r2, [pc, #336]	; (8005074 <HAL_DMA_Start_IT+0x228>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a53      	ldr	r2, [pc, #332]	; (8005078 <HAL_DMA_Start_IT+0x22c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a51      	ldr	r2, [pc, #324]	; (800507c <HAL_DMA_Start_IT+0x230>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d108      	bne.n	8004f4c <HAL_DMA_Start_IT+0x100>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0201 	bic.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	e007      	b.n	8004f5c <HAL_DMA_Start_IT+0x110>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f001 fe6a 	bl	8006c3c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a34      	ldr	r2, [pc, #208]	; (8005040 <HAL_DMA_Start_IT+0x1f4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d04a      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a33      	ldr	r2, [pc, #204]	; (8005044 <HAL_DMA_Start_IT+0x1f8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d045      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a31      	ldr	r2, [pc, #196]	; (8005048 <HAL_DMA_Start_IT+0x1fc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d040      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a30      	ldr	r2, [pc, #192]	; (800504c <HAL_DMA_Start_IT+0x200>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d03b      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2e      	ldr	r2, [pc, #184]	; (8005050 <HAL_DMA_Start_IT+0x204>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d036      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <HAL_DMA_Start_IT+0x208>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d031      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	; (8005058 <HAL_DMA_Start_IT+0x20c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d02c      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2a      	ldr	r2, [pc, #168]	; (800505c <HAL_DMA_Start_IT+0x210>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d027      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a28      	ldr	r2, [pc, #160]	; (8005060 <HAL_DMA_Start_IT+0x214>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d022      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a27      	ldr	r2, [pc, #156]	; (8005064 <HAL_DMA_Start_IT+0x218>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d01d      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a25      	ldr	r2, [pc, #148]	; (8005068 <HAL_DMA_Start_IT+0x21c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d018      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a24      	ldr	r2, [pc, #144]	; (800506c <HAL_DMA_Start_IT+0x220>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a22      	ldr	r2, [pc, #136]	; (8005070 <HAL_DMA_Start_IT+0x224>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00e      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a21      	ldr	r2, [pc, #132]	; (8005074 <HAL_DMA_Start_IT+0x228>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d009      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1f      	ldr	r2, [pc, #124]	; (8005078 <HAL_DMA_Start_IT+0x22c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1e      	ldr	r2, [pc, #120]	; (800507c <HAL_DMA_Start_IT+0x230>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <HAL_DMA_Start_IT+0x1c0>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <HAL_DMA_Start_IT+0x1c2>
 800500c:	2300      	movs	r3, #0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d036      	beq.n	8005080 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f023 021e 	bic.w	r2, r3, #30
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0216 	orr.w	r2, r2, #22
 8005024:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d03e      	beq.n	80050ac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0208 	orr.w	r2, r2, #8
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e035      	b.n	80050ac <HAL_DMA_Start_IT+0x260>
 8005040:	40020010 	.word	0x40020010
 8005044:	40020028 	.word	0x40020028
 8005048:	40020040 	.word	0x40020040
 800504c:	40020058 	.word	0x40020058
 8005050:	40020070 	.word	0x40020070
 8005054:	40020088 	.word	0x40020088
 8005058:	400200a0 	.word	0x400200a0
 800505c:	400200b8 	.word	0x400200b8
 8005060:	40020410 	.word	0x40020410
 8005064:	40020428 	.word	0x40020428
 8005068:	40020440 	.word	0x40020440
 800506c:	40020458 	.word	0x40020458
 8005070:	40020470 	.word	0x40020470
 8005074:	40020488 	.word	0x40020488
 8005078:	400204a0 	.word	0x400204a0
 800507c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 020e 	bic.w	r2, r3, #14
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 020a 	orr.w	r2, r2, #10
 8005092:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0204 	orr.w	r2, r2, #4
 80050aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a83      	ldr	r2, [pc, #524]	; (80052c0 <HAL_DMA_Start_IT+0x474>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d072      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a82      	ldr	r2, [pc, #520]	; (80052c4 <HAL_DMA_Start_IT+0x478>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d06d      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a80      	ldr	r2, [pc, #512]	; (80052c8 <HAL_DMA_Start_IT+0x47c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d068      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a7f      	ldr	r2, [pc, #508]	; (80052cc <HAL_DMA_Start_IT+0x480>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d063      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a7d      	ldr	r2, [pc, #500]	; (80052d0 <HAL_DMA_Start_IT+0x484>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d05e      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a7c      	ldr	r2, [pc, #496]	; (80052d4 <HAL_DMA_Start_IT+0x488>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d059      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a7a      	ldr	r2, [pc, #488]	; (80052d8 <HAL_DMA_Start_IT+0x48c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d054      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a79      	ldr	r2, [pc, #484]	; (80052dc <HAL_DMA_Start_IT+0x490>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d04f      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a77      	ldr	r2, [pc, #476]	; (80052e0 <HAL_DMA_Start_IT+0x494>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d04a      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a76      	ldr	r2, [pc, #472]	; (80052e4 <HAL_DMA_Start_IT+0x498>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d045      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a74      	ldr	r2, [pc, #464]	; (80052e8 <HAL_DMA_Start_IT+0x49c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d040      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a73      	ldr	r2, [pc, #460]	; (80052ec <HAL_DMA_Start_IT+0x4a0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d03b      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a71      	ldr	r2, [pc, #452]	; (80052f0 <HAL_DMA_Start_IT+0x4a4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d036      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a70      	ldr	r2, [pc, #448]	; (80052f4 <HAL_DMA_Start_IT+0x4a8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d031      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a6e      	ldr	r2, [pc, #440]	; (80052f8 <HAL_DMA_Start_IT+0x4ac>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d02c      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a6d      	ldr	r2, [pc, #436]	; (80052fc <HAL_DMA_Start_IT+0x4b0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d027      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a6b      	ldr	r2, [pc, #428]	; (8005300 <HAL_DMA_Start_IT+0x4b4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d022      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a6a      	ldr	r2, [pc, #424]	; (8005304 <HAL_DMA_Start_IT+0x4b8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d01d      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a68      	ldr	r2, [pc, #416]	; (8005308 <HAL_DMA_Start_IT+0x4bc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d018      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a67      	ldr	r2, [pc, #412]	; (800530c <HAL_DMA_Start_IT+0x4c0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d013      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a65      	ldr	r2, [pc, #404]	; (8005310 <HAL_DMA_Start_IT+0x4c4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00e      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a64      	ldr	r2, [pc, #400]	; (8005314 <HAL_DMA_Start_IT+0x4c8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d009      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a62      	ldr	r2, [pc, #392]	; (8005318 <HAL_DMA_Start_IT+0x4cc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a61      	ldr	r2, [pc, #388]	; (800531c <HAL_DMA_Start_IT+0x4d0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d101      	bne.n	80051a0 <HAL_DMA_Start_IT+0x354>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <HAL_DMA_Start_IT+0x356>
 80051a0:	2300      	movs	r3, #0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01a      	beq.n	80051dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d007      	beq.n	80051dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a37      	ldr	r2, [pc, #220]	; (80052c0 <HAL_DMA_Start_IT+0x474>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d04a      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a36      	ldr	r2, [pc, #216]	; (80052c4 <HAL_DMA_Start_IT+0x478>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d045      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a34      	ldr	r2, [pc, #208]	; (80052c8 <HAL_DMA_Start_IT+0x47c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d040      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a33      	ldr	r2, [pc, #204]	; (80052cc <HAL_DMA_Start_IT+0x480>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d03b      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a31      	ldr	r2, [pc, #196]	; (80052d0 <HAL_DMA_Start_IT+0x484>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d036      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a30      	ldr	r2, [pc, #192]	; (80052d4 <HAL_DMA_Start_IT+0x488>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d031      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2e      	ldr	r2, [pc, #184]	; (80052d8 <HAL_DMA_Start_IT+0x48c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02c      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2d      	ldr	r2, [pc, #180]	; (80052dc <HAL_DMA_Start_IT+0x490>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d027      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2b      	ldr	r2, [pc, #172]	; (80052e0 <HAL_DMA_Start_IT+0x494>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d022      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a2a      	ldr	r2, [pc, #168]	; (80052e4 <HAL_DMA_Start_IT+0x498>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d01d      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a28      	ldr	r2, [pc, #160]	; (80052e8 <HAL_DMA_Start_IT+0x49c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d018      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a27      	ldr	r2, [pc, #156]	; (80052ec <HAL_DMA_Start_IT+0x4a0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a25      	ldr	r2, [pc, #148]	; (80052f0 <HAL_DMA_Start_IT+0x4a4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00e      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a24      	ldr	r2, [pc, #144]	; (80052f4 <HAL_DMA_Start_IT+0x4a8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a22      	ldr	r2, [pc, #136]	; (80052f8 <HAL_DMA_Start_IT+0x4ac>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a21      	ldr	r2, [pc, #132]	; (80052fc <HAL_DMA_Start_IT+0x4b0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d108      	bne.n	800528e <HAL_DMA_Start_IT+0x442>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e012      	b.n	80052b4 <HAL_DMA_Start_IT+0x468>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e009      	b.n	80052b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40020010 	.word	0x40020010
 80052c4:	40020028 	.word	0x40020028
 80052c8:	40020040 	.word	0x40020040
 80052cc:	40020058 	.word	0x40020058
 80052d0:	40020070 	.word	0x40020070
 80052d4:	40020088 	.word	0x40020088
 80052d8:	400200a0 	.word	0x400200a0
 80052dc:	400200b8 	.word	0x400200b8
 80052e0:	40020410 	.word	0x40020410
 80052e4:	40020428 	.word	0x40020428
 80052e8:	40020440 	.word	0x40020440
 80052ec:	40020458 	.word	0x40020458
 80052f0:	40020470 	.word	0x40020470
 80052f4:	40020488 	.word	0x40020488
 80052f8:	400204a0 	.word	0x400204a0
 80052fc:	400204b8 	.word	0x400204b8
 8005300:	58025408 	.word	0x58025408
 8005304:	5802541c 	.word	0x5802541c
 8005308:	58025430 	.word	0x58025430
 800530c:	58025444 	.word	0x58025444
 8005310:	58025458 	.word	0x58025458
 8005314:	5802546c 	.word	0x5802546c
 8005318:	58025480 	.word	0x58025480
 800531c:	58025494 	.word	0x58025494

08005320 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005328:	f7fd fb44 	bl	80029b4 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e2dc      	b.n	80058f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d008      	beq.n	8005356 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2280      	movs	r2, #128	; 0x80
 8005348:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e2cd      	b.n	80058f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a76      	ldr	r2, [pc, #472]	; (8005534 <HAL_DMA_Abort+0x214>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d04a      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a74      	ldr	r2, [pc, #464]	; (8005538 <HAL_DMA_Abort+0x218>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d045      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a73      	ldr	r2, [pc, #460]	; (800553c <HAL_DMA_Abort+0x21c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d040      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a71      	ldr	r2, [pc, #452]	; (8005540 <HAL_DMA_Abort+0x220>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d03b      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a70      	ldr	r2, [pc, #448]	; (8005544 <HAL_DMA_Abort+0x224>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d036      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a6e      	ldr	r2, [pc, #440]	; (8005548 <HAL_DMA_Abort+0x228>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d031      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a6d      	ldr	r2, [pc, #436]	; (800554c <HAL_DMA_Abort+0x22c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d02c      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a6b      	ldr	r2, [pc, #428]	; (8005550 <HAL_DMA_Abort+0x230>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d027      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a6a      	ldr	r2, [pc, #424]	; (8005554 <HAL_DMA_Abort+0x234>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d022      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a68      	ldr	r2, [pc, #416]	; (8005558 <HAL_DMA_Abort+0x238>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01d      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a67      	ldr	r2, [pc, #412]	; (800555c <HAL_DMA_Abort+0x23c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d018      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a65      	ldr	r2, [pc, #404]	; (8005560 <HAL_DMA_Abort+0x240>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a64      	ldr	r2, [pc, #400]	; (8005564 <HAL_DMA_Abort+0x244>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00e      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a62      	ldr	r2, [pc, #392]	; (8005568 <HAL_DMA_Abort+0x248>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d009      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a61      	ldr	r2, [pc, #388]	; (800556c <HAL_DMA_Abort+0x24c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a5f      	ldr	r2, [pc, #380]	; (8005570 <HAL_DMA_Abort+0x250>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d101      	bne.n	80053fa <HAL_DMA_Abort+0xda>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <HAL_DMA_Abort+0xdc>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 021e 	bic.w	r2, r2, #30
 800540e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800541e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	e00a      	b.n	800543e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 020e 	bic.w	r2, r2, #14
 8005436:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a3c      	ldr	r2, [pc, #240]	; (8005534 <HAL_DMA_Abort+0x214>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d072      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a3a      	ldr	r2, [pc, #232]	; (8005538 <HAL_DMA_Abort+0x218>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d06d      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a39      	ldr	r2, [pc, #228]	; (800553c <HAL_DMA_Abort+0x21c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d068      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a37      	ldr	r2, [pc, #220]	; (8005540 <HAL_DMA_Abort+0x220>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d063      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a36      	ldr	r2, [pc, #216]	; (8005544 <HAL_DMA_Abort+0x224>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d05e      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a34      	ldr	r2, [pc, #208]	; (8005548 <HAL_DMA_Abort+0x228>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d059      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a33      	ldr	r2, [pc, #204]	; (800554c <HAL_DMA_Abort+0x22c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d054      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a31      	ldr	r2, [pc, #196]	; (8005550 <HAL_DMA_Abort+0x230>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d04f      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a30      	ldr	r2, [pc, #192]	; (8005554 <HAL_DMA_Abort+0x234>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d04a      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2e      	ldr	r2, [pc, #184]	; (8005558 <HAL_DMA_Abort+0x238>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d045      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2d      	ldr	r2, [pc, #180]	; (800555c <HAL_DMA_Abort+0x23c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d040      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2b      	ldr	r2, [pc, #172]	; (8005560 <HAL_DMA_Abort+0x240>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d03b      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <HAL_DMA_Abort+0x244>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d036      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a28      	ldr	r2, [pc, #160]	; (8005568 <HAL_DMA_Abort+0x248>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d031      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a27      	ldr	r2, [pc, #156]	; (800556c <HAL_DMA_Abort+0x24c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d02c      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a25      	ldr	r2, [pc, #148]	; (8005570 <HAL_DMA_Abort+0x250>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d027      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a24      	ldr	r2, [pc, #144]	; (8005574 <HAL_DMA_Abort+0x254>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d022      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_DMA_Abort+0x258>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01d      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a21      	ldr	r2, [pc, #132]	; (800557c <HAL_DMA_Abort+0x25c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d018      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1f      	ldr	r2, [pc, #124]	; (8005580 <HAL_DMA_Abort+0x260>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1e      	ldr	r2, [pc, #120]	; (8005584 <HAL_DMA_Abort+0x264>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <HAL_DMA_Abort+0x268>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1b      	ldr	r2, [pc, #108]	; (800558c <HAL_DMA_Abort+0x26c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a19      	ldr	r2, [pc, #100]	; (8005590 <HAL_DMA_Abort+0x270>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d132      	bne.n	8005594 <HAL_DMA_Abort+0x274>
 800552e:	2301      	movs	r3, #1
 8005530:	e031      	b.n	8005596 <HAL_DMA_Abort+0x276>
 8005532:	bf00      	nop
 8005534:	40020010 	.word	0x40020010
 8005538:	40020028 	.word	0x40020028
 800553c:	40020040 	.word	0x40020040
 8005540:	40020058 	.word	0x40020058
 8005544:	40020070 	.word	0x40020070
 8005548:	40020088 	.word	0x40020088
 800554c:	400200a0 	.word	0x400200a0
 8005550:	400200b8 	.word	0x400200b8
 8005554:	40020410 	.word	0x40020410
 8005558:	40020428 	.word	0x40020428
 800555c:	40020440 	.word	0x40020440
 8005560:	40020458 	.word	0x40020458
 8005564:	40020470 	.word	0x40020470
 8005568:	40020488 	.word	0x40020488
 800556c:	400204a0 	.word	0x400204a0
 8005570:	400204b8 	.word	0x400204b8
 8005574:	58025408 	.word	0x58025408
 8005578:	5802541c 	.word	0x5802541c
 800557c:	58025430 	.word	0x58025430
 8005580:	58025444 	.word	0x58025444
 8005584:	58025458 	.word	0x58025458
 8005588:	5802546c 	.word	0x5802546c
 800558c:	58025480 	.word	0x58025480
 8005590:	58025494 	.word	0x58025494
 8005594:	2300      	movs	r3, #0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a6d      	ldr	r2, [pc, #436]	; (8005764 <HAL_DMA_Abort+0x444>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d04a      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a6b      	ldr	r2, [pc, #428]	; (8005768 <HAL_DMA_Abort+0x448>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d045      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a6a      	ldr	r2, [pc, #424]	; (800576c <HAL_DMA_Abort+0x44c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d040      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a68      	ldr	r2, [pc, #416]	; (8005770 <HAL_DMA_Abort+0x450>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d03b      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a67      	ldr	r2, [pc, #412]	; (8005774 <HAL_DMA_Abort+0x454>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d036      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a65      	ldr	r2, [pc, #404]	; (8005778 <HAL_DMA_Abort+0x458>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d031      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a64      	ldr	r2, [pc, #400]	; (800577c <HAL_DMA_Abort+0x45c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d02c      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a62      	ldr	r2, [pc, #392]	; (8005780 <HAL_DMA_Abort+0x460>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d027      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a61      	ldr	r2, [pc, #388]	; (8005784 <HAL_DMA_Abort+0x464>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a5f      	ldr	r2, [pc, #380]	; (8005788 <HAL_DMA_Abort+0x468>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a5e      	ldr	r2, [pc, #376]	; (800578c <HAL_DMA_Abort+0x46c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5c      	ldr	r2, [pc, #368]	; (8005790 <HAL_DMA_Abort+0x470>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5b      	ldr	r2, [pc, #364]	; (8005794 <HAL_DMA_Abort+0x474>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a59      	ldr	r2, [pc, #356]	; (8005798 <HAL_DMA_Abort+0x478>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a58      	ldr	r2, [pc, #352]	; (800579c <HAL_DMA_Abort+0x47c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a56      	ldr	r2, [pc, #344]	; (80057a0 <HAL_DMA_Abort+0x480>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d108      	bne.n	800565c <HAL_DMA_Abort+0x33c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	e007      	b.n	800566c <HAL_DMA_Abort+0x34c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0201 	bic.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800566c:	e013      	b.n	8005696 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800566e:	f7fd f9a1 	bl	80029b4 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b05      	cmp	r3, #5
 800567a:	d90c      	bls.n	8005696 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2203      	movs	r2, #3
 8005686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e12d      	b.n	80058f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e5      	bne.n	800566e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a2f      	ldr	r2, [pc, #188]	; (8005764 <HAL_DMA_Abort+0x444>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d04a      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2d      	ldr	r2, [pc, #180]	; (8005768 <HAL_DMA_Abort+0x448>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d045      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2c      	ldr	r2, [pc, #176]	; (800576c <HAL_DMA_Abort+0x44c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d040      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2a      	ldr	r2, [pc, #168]	; (8005770 <HAL_DMA_Abort+0x450>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d03b      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a29      	ldr	r2, [pc, #164]	; (8005774 <HAL_DMA_Abort+0x454>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d036      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a27      	ldr	r2, [pc, #156]	; (8005778 <HAL_DMA_Abort+0x458>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d031      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a26      	ldr	r2, [pc, #152]	; (800577c <HAL_DMA_Abort+0x45c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d02c      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a24      	ldr	r2, [pc, #144]	; (8005780 <HAL_DMA_Abort+0x460>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d027      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a23      	ldr	r2, [pc, #140]	; (8005784 <HAL_DMA_Abort+0x464>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d022      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a21      	ldr	r2, [pc, #132]	; (8005788 <HAL_DMA_Abort+0x468>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01d      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a20      	ldr	r2, [pc, #128]	; (800578c <HAL_DMA_Abort+0x46c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d018      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <HAL_DMA_Abort+0x470>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <HAL_DMA_Abort+0x474>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00e      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <HAL_DMA_Abort+0x478>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d009      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1a      	ldr	r2, [pc, #104]	; (800579c <HAL_DMA_Abort+0x47c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <HAL_DMA_Abort+0x480>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_DMA_Abort+0x426>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <HAL_DMA_Abort+0x428>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02b      	beq.n	80057a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005750:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	223f      	movs	r2, #63	; 0x3f
 800575c:	409a      	lsls	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	609a      	str	r2, [r3, #8]
 8005762:	e02a      	b.n	80057ba <HAL_DMA_Abort+0x49a>
 8005764:	40020010 	.word	0x40020010
 8005768:	40020028 	.word	0x40020028
 800576c:	40020040 	.word	0x40020040
 8005770:	40020058 	.word	0x40020058
 8005774:	40020070 	.word	0x40020070
 8005778:	40020088 	.word	0x40020088
 800577c:	400200a0 	.word	0x400200a0
 8005780:	400200b8 	.word	0x400200b8
 8005784:	40020410 	.word	0x40020410
 8005788:	40020428 	.word	0x40020428
 800578c:	40020440 	.word	0x40020440
 8005790:	40020458 	.word	0x40020458
 8005794:	40020470 	.word	0x40020470
 8005798:	40020488 	.word	0x40020488
 800579c:	400204a0 	.word	0x400204a0
 80057a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	2201      	movs	r2, #1
 80057b4:	409a      	lsls	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a4f      	ldr	r2, [pc, #316]	; (80058fc <HAL_DMA_Abort+0x5dc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d072      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a4d      	ldr	r2, [pc, #308]	; (8005900 <HAL_DMA_Abort+0x5e0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d06d      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a4c      	ldr	r2, [pc, #304]	; (8005904 <HAL_DMA_Abort+0x5e4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d068      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a4a      	ldr	r2, [pc, #296]	; (8005908 <HAL_DMA_Abort+0x5e8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d063      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a49      	ldr	r2, [pc, #292]	; (800590c <HAL_DMA_Abort+0x5ec>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d05e      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a47      	ldr	r2, [pc, #284]	; (8005910 <HAL_DMA_Abort+0x5f0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d059      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a46      	ldr	r2, [pc, #280]	; (8005914 <HAL_DMA_Abort+0x5f4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d054      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a44      	ldr	r2, [pc, #272]	; (8005918 <HAL_DMA_Abort+0x5f8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d04f      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a43      	ldr	r2, [pc, #268]	; (800591c <HAL_DMA_Abort+0x5fc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d04a      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a41      	ldr	r2, [pc, #260]	; (8005920 <HAL_DMA_Abort+0x600>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d045      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a40      	ldr	r2, [pc, #256]	; (8005924 <HAL_DMA_Abort+0x604>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d040      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a3e      	ldr	r2, [pc, #248]	; (8005928 <HAL_DMA_Abort+0x608>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d03b      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a3d      	ldr	r2, [pc, #244]	; (800592c <HAL_DMA_Abort+0x60c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d036      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a3b      	ldr	r2, [pc, #236]	; (8005930 <HAL_DMA_Abort+0x610>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d031      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a3a      	ldr	r2, [pc, #232]	; (8005934 <HAL_DMA_Abort+0x614>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d02c      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a38      	ldr	r2, [pc, #224]	; (8005938 <HAL_DMA_Abort+0x618>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d027      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a37      	ldr	r2, [pc, #220]	; (800593c <HAL_DMA_Abort+0x61c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d022      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a35      	ldr	r2, [pc, #212]	; (8005940 <HAL_DMA_Abort+0x620>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d01d      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a34      	ldr	r2, [pc, #208]	; (8005944 <HAL_DMA_Abort+0x624>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d018      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a32      	ldr	r2, [pc, #200]	; (8005948 <HAL_DMA_Abort+0x628>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a31      	ldr	r2, [pc, #196]	; (800594c <HAL_DMA_Abort+0x62c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00e      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2f      	ldr	r2, [pc, #188]	; (8005950 <HAL_DMA_Abort+0x630>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d009      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2e      	ldr	r2, [pc, #184]	; (8005954 <HAL_DMA_Abort+0x634>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d004      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a2c      	ldr	r2, [pc, #176]	; (8005958 <HAL_DMA_Abort+0x638>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d101      	bne.n	80058ae <HAL_DMA_Abort+0x58e>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <HAL_DMA_Abort+0x590>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d015      	beq.n	80058e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00c      	beq.n	80058e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40020010 	.word	0x40020010
 8005900:	40020028 	.word	0x40020028
 8005904:	40020040 	.word	0x40020040
 8005908:	40020058 	.word	0x40020058
 800590c:	40020070 	.word	0x40020070
 8005910:	40020088 	.word	0x40020088
 8005914:	400200a0 	.word	0x400200a0
 8005918:	400200b8 	.word	0x400200b8
 800591c:	40020410 	.word	0x40020410
 8005920:	40020428 	.word	0x40020428
 8005924:	40020440 	.word	0x40020440
 8005928:	40020458 	.word	0x40020458
 800592c:	40020470 	.word	0x40020470
 8005930:	40020488 	.word	0x40020488
 8005934:	400204a0 	.word	0x400204a0
 8005938:	400204b8 	.word	0x400204b8
 800593c:	58025408 	.word	0x58025408
 8005940:	5802541c 	.word	0x5802541c
 8005944:	58025430 	.word	0x58025430
 8005948:	58025444 	.word	0x58025444
 800594c:	58025458 	.word	0x58025458
 8005950:	5802546c 	.word	0x5802546c
 8005954:	58025480 	.word	0x58025480
 8005958:	58025494 	.word	0x58025494

0800595c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e237      	b.n	8005dde <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d004      	beq.n	8005984 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2280      	movs	r2, #128	; 0x80
 800597e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e22c      	b.n	8005dde <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a5c      	ldr	r2, [pc, #368]	; (8005afc <HAL_DMA_Abort_IT+0x1a0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d04a      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a5b      	ldr	r2, [pc, #364]	; (8005b00 <HAL_DMA_Abort_IT+0x1a4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d045      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a59      	ldr	r2, [pc, #356]	; (8005b04 <HAL_DMA_Abort_IT+0x1a8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d040      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a58      	ldr	r2, [pc, #352]	; (8005b08 <HAL_DMA_Abort_IT+0x1ac>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d03b      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a56      	ldr	r2, [pc, #344]	; (8005b0c <HAL_DMA_Abort_IT+0x1b0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d036      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a55      	ldr	r2, [pc, #340]	; (8005b10 <HAL_DMA_Abort_IT+0x1b4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d031      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a53      	ldr	r2, [pc, #332]	; (8005b14 <HAL_DMA_Abort_IT+0x1b8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d02c      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a52      	ldr	r2, [pc, #328]	; (8005b18 <HAL_DMA_Abort_IT+0x1bc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d027      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a50      	ldr	r2, [pc, #320]	; (8005b1c <HAL_DMA_Abort_IT+0x1c0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d022      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a4f      	ldr	r2, [pc, #316]	; (8005b20 <HAL_DMA_Abort_IT+0x1c4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d01d      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a4d      	ldr	r2, [pc, #308]	; (8005b24 <HAL_DMA_Abort_IT+0x1c8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d018      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a4c      	ldr	r2, [pc, #304]	; (8005b28 <HAL_DMA_Abort_IT+0x1cc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a4a      	ldr	r2, [pc, #296]	; (8005b2c <HAL_DMA_Abort_IT+0x1d0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00e      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a49      	ldr	r2, [pc, #292]	; (8005b30 <HAL_DMA_Abort_IT+0x1d4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d009      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a47      	ldr	r2, [pc, #284]	; (8005b34 <HAL_DMA_Abort_IT+0x1d8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d004      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a46      	ldr	r2, [pc, #280]	; (8005b38 <HAL_DMA_Abort_IT+0x1dc>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d101      	bne.n	8005a28 <HAL_DMA_Abort_IT+0xcc>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <HAL_DMA_Abort_IT+0xce>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8086 	beq.w	8005b3c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2204      	movs	r2, #4
 8005a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2f      	ldr	r2, [pc, #188]	; (8005afc <HAL_DMA_Abort_IT+0x1a0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d04a      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <HAL_DMA_Abort_IT+0x1a4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d045      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2c      	ldr	r2, [pc, #176]	; (8005b04 <HAL_DMA_Abort_IT+0x1a8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d040      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2b      	ldr	r2, [pc, #172]	; (8005b08 <HAL_DMA_Abort_IT+0x1ac>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d03b      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a29      	ldr	r2, [pc, #164]	; (8005b0c <HAL_DMA_Abort_IT+0x1b0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d036      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a28      	ldr	r2, [pc, #160]	; (8005b10 <HAL_DMA_Abort_IT+0x1b4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d031      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <HAL_DMA_Abort_IT+0x1b8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d02c      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a25      	ldr	r2, [pc, #148]	; (8005b18 <HAL_DMA_Abort_IT+0x1bc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d027      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a23      	ldr	r2, [pc, #140]	; (8005b1c <HAL_DMA_Abort_IT+0x1c0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d022      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a22      	ldr	r2, [pc, #136]	; (8005b20 <HAL_DMA_Abort_IT+0x1c4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d01d      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <HAL_DMA_Abort_IT+0x1c8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d018      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1f      	ldr	r2, [pc, #124]	; (8005b28 <HAL_DMA_Abort_IT+0x1cc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d013      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1d      	ldr	r2, [pc, #116]	; (8005b2c <HAL_DMA_Abort_IT+0x1d0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1c      	ldr	r2, [pc, #112]	; (8005b30 <HAL_DMA_Abort_IT+0x1d4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1a      	ldr	r2, [pc, #104]	; (8005b34 <HAL_DMA_Abort_IT+0x1d8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a19      	ldr	r2, [pc, #100]	; (8005b38 <HAL_DMA_Abort_IT+0x1dc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d108      	bne.n	8005aea <HAL_DMA_Abort_IT+0x18e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	e178      	b.n	8005ddc <HAL_DMA_Abort_IT+0x480>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e16f      	b.n	8005ddc <HAL_DMA_Abort_IT+0x480>
 8005afc:	40020010 	.word	0x40020010
 8005b00:	40020028 	.word	0x40020028
 8005b04:	40020040 	.word	0x40020040
 8005b08:	40020058 	.word	0x40020058
 8005b0c:	40020070 	.word	0x40020070
 8005b10:	40020088 	.word	0x40020088
 8005b14:	400200a0 	.word	0x400200a0
 8005b18:	400200b8 	.word	0x400200b8
 8005b1c:	40020410 	.word	0x40020410
 8005b20:	40020428 	.word	0x40020428
 8005b24:	40020440 	.word	0x40020440
 8005b28:	40020458 	.word	0x40020458
 8005b2c:	40020470 	.word	0x40020470
 8005b30:	40020488 	.word	0x40020488
 8005b34:	400204a0 	.word	0x400204a0
 8005b38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 020e 	bic.w	r2, r2, #14
 8005b4a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a6c      	ldr	r2, [pc, #432]	; (8005d04 <HAL_DMA_Abort_IT+0x3a8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d04a      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a6b      	ldr	r2, [pc, #428]	; (8005d08 <HAL_DMA_Abort_IT+0x3ac>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d045      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a69      	ldr	r2, [pc, #420]	; (8005d0c <HAL_DMA_Abort_IT+0x3b0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d040      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a68      	ldr	r2, [pc, #416]	; (8005d10 <HAL_DMA_Abort_IT+0x3b4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d03b      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a66      	ldr	r2, [pc, #408]	; (8005d14 <HAL_DMA_Abort_IT+0x3b8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d036      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <HAL_DMA_Abort_IT+0x3bc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d031      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a63      	ldr	r2, [pc, #396]	; (8005d1c <HAL_DMA_Abort_IT+0x3c0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d02c      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a62      	ldr	r2, [pc, #392]	; (8005d20 <HAL_DMA_Abort_IT+0x3c4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d027      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a60      	ldr	r2, [pc, #384]	; (8005d24 <HAL_DMA_Abort_IT+0x3c8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d022      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a5f      	ldr	r2, [pc, #380]	; (8005d28 <HAL_DMA_Abort_IT+0x3cc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d01d      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a5d      	ldr	r2, [pc, #372]	; (8005d2c <HAL_DMA_Abort_IT+0x3d0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a5c      	ldr	r2, [pc, #368]	; (8005d30 <HAL_DMA_Abort_IT+0x3d4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d013      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a5a      	ldr	r2, [pc, #360]	; (8005d34 <HAL_DMA_Abort_IT+0x3d8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a59      	ldr	r2, [pc, #356]	; (8005d38 <HAL_DMA_Abort_IT+0x3dc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a57      	ldr	r2, [pc, #348]	; (8005d3c <HAL_DMA_Abort_IT+0x3e0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a56      	ldr	r2, [pc, #344]	; (8005d40 <HAL_DMA_Abort_IT+0x3e4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d108      	bne.n	8005bfe <HAL_DMA_Abort_IT+0x2a2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	e007      	b.n	8005c0e <HAL_DMA_Abort_IT+0x2b2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3c      	ldr	r2, [pc, #240]	; (8005d04 <HAL_DMA_Abort_IT+0x3a8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d072      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3a      	ldr	r2, [pc, #232]	; (8005d08 <HAL_DMA_Abort_IT+0x3ac>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d06d      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a39      	ldr	r2, [pc, #228]	; (8005d0c <HAL_DMA_Abort_IT+0x3b0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d068      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a37      	ldr	r2, [pc, #220]	; (8005d10 <HAL_DMA_Abort_IT+0x3b4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d063      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a36      	ldr	r2, [pc, #216]	; (8005d14 <HAL_DMA_Abort_IT+0x3b8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d05e      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a34      	ldr	r2, [pc, #208]	; (8005d18 <HAL_DMA_Abort_IT+0x3bc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d059      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a33      	ldr	r2, [pc, #204]	; (8005d1c <HAL_DMA_Abort_IT+0x3c0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d054      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a31      	ldr	r2, [pc, #196]	; (8005d20 <HAL_DMA_Abort_IT+0x3c4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d04f      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a30      	ldr	r2, [pc, #192]	; (8005d24 <HAL_DMA_Abort_IT+0x3c8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d04a      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a2e      	ldr	r2, [pc, #184]	; (8005d28 <HAL_DMA_Abort_IT+0x3cc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d045      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2d      	ldr	r2, [pc, #180]	; (8005d2c <HAL_DMA_Abort_IT+0x3d0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d040      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2b      	ldr	r2, [pc, #172]	; (8005d30 <HAL_DMA_Abort_IT+0x3d4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d03b      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a2a      	ldr	r2, [pc, #168]	; (8005d34 <HAL_DMA_Abort_IT+0x3d8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d036      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a28      	ldr	r2, [pc, #160]	; (8005d38 <HAL_DMA_Abort_IT+0x3dc>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d031      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a27      	ldr	r2, [pc, #156]	; (8005d3c <HAL_DMA_Abort_IT+0x3e0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d02c      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a25      	ldr	r2, [pc, #148]	; (8005d40 <HAL_DMA_Abort_IT+0x3e4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d027      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a24      	ldr	r2, [pc, #144]	; (8005d44 <HAL_DMA_Abort_IT+0x3e8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d022      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a22      	ldr	r2, [pc, #136]	; (8005d48 <HAL_DMA_Abort_IT+0x3ec>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01d      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a21      	ldr	r2, [pc, #132]	; (8005d4c <HAL_DMA_Abort_IT+0x3f0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d018      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1f      	ldr	r2, [pc, #124]	; (8005d50 <HAL_DMA_Abort_IT+0x3f4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1e      	ldr	r2, [pc, #120]	; (8005d54 <HAL_DMA_Abort_IT+0x3f8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00e      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1c      	ldr	r2, [pc, #112]	; (8005d58 <HAL_DMA_Abort_IT+0x3fc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1b      	ldr	r2, [pc, #108]	; (8005d5c <HAL_DMA_Abort_IT+0x400>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a19      	ldr	r2, [pc, #100]	; (8005d60 <HAL_DMA_Abort_IT+0x404>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d132      	bne.n	8005d64 <HAL_DMA_Abort_IT+0x408>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e031      	b.n	8005d66 <HAL_DMA_Abort_IT+0x40a>
 8005d02:	bf00      	nop
 8005d04:	40020010 	.word	0x40020010
 8005d08:	40020028 	.word	0x40020028
 8005d0c:	40020040 	.word	0x40020040
 8005d10:	40020058 	.word	0x40020058
 8005d14:	40020070 	.word	0x40020070
 8005d18:	40020088 	.word	0x40020088
 8005d1c:	400200a0 	.word	0x400200a0
 8005d20:	400200b8 	.word	0x400200b8
 8005d24:	40020410 	.word	0x40020410
 8005d28:	40020428 	.word	0x40020428
 8005d2c:	40020440 	.word	0x40020440
 8005d30:	40020458 	.word	0x40020458
 8005d34:	40020470 	.word	0x40020470
 8005d38:	40020488 	.word	0x40020488
 8005d3c:	400204a0 	.word	0x400204a0
 8005d40:	400204b8 	.word	0x400204b8
 8005d44:	58025408 	.word	0x58025408
 8005d48:	5802541c 	.word	0x5802541c
 8005d4c:	58025430 	.word	0x58025430
 8005d50:	58025444 	.word	0x58025444
 8005d54:	58025458 	.word	0x58025458
 8005d58:	5802546c 	.word	0x5802546c
 8005d5c:	58025480 	.word	0x58025480
 8005d60:	58025494 	.word	0x58025494
 8005d64:	2300      	movs	r3, #0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d028      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d78:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d84:	f003 031f 	and.w	r3, r3, #31
 8005d88:	2201      	movs	r2, #1
 8005d8a:	409a      	lsls	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d98:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00c      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005db0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005dba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop

08005de8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	; 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005df4:	4b67      	ldr	r3, [pc, #412]	; (8005f94 <HAL_DMA_IRQHandler+0x1ac>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a67      	ldr	r2, [pc, #412]	; (8005f98 <HAL_DMA_IRQHandler+0x1b0>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	0a9b      	lsrs	r3, r3, #10
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a5f      	ldr	r2, [pc, #380]	; (8005f9c <HAL_DMA_IRQHandler+0x1b4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d04a      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a5d      	ldr	r2, [pc, #372]	; (8005fa0 <HAL_DMA_IRQHandler+0x1b8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d045      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a5c      	ldr	r2, [pc, #368]	; (8005fa4 <HAL_DMA_IRQHandler+0x1bc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d040      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a5a      	ldr	r2, [pc, #360]	; (8005fa8 <HAL_DMA_IRQHandler+0x1c0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d03b      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a59      	ldr	r2, [pc, #356]	; (8005fac <HAL_DMA_IRQHandler+0x1c4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d036      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a57      	ldr	r2, [pc, #348]	; (8005fb0 <HAL_DMA_IRQHandler+0x1c8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d031      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a56      	ldr	r2, [pc, #344]	; (8005fb4 <HAL_DMA_IRQHandler+0x1cc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d02c      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a54      	ldr	r2, [pc, #336]	; (8005fb8 <HAL_DMA_IRQHandler+0x1d0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d027      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a53      	ldr	r2, [pc, #332]	; (8005fbc <HAL_DMA_IRQHandler+0x1d4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d022      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a51      	ldr	r2, [pc, #324]	; (8005fc0 <HAL_DMA_IRQHandler+0x1d8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01d      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a50      	ldr	r2, [pc, #320]	; (8005fc4 <HAL_DMA_IRQHandler+0x1dc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d018      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a4e      	ldr	r2, [pc, #312]	; (8005fc8 <HAL_DMA_IRQHandler+0x1e0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a4d      	ldr	r2, [pc, #308]	; (8005fcc <HAL_DMA_IRQHandler+0x1e4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a4b      	ldr	r2, [pc, #300]	; (8005fd0 <HAL_DMA_IRQHandler+0x1e8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a4a      	ldr	r2, [pc, #296]	; (8005fd4 <HAL_DMA_IRQHandler+0x1ec>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a48      	ldr	r2, [pc, #288]	; (8005fd8 <HAL_DMA_IRQHandler+0x1f0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d101      	bne.n	8005ebe <HAL_DMA_IRQHandler+0xd6>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <HAL_DMA_IRQHandler+0xd8>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 842b 	beq.w	800671c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	2208      	movs	r2, #8
 8005ed0:	409a      	lsls	r2, r3
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80a2 	beq.w	8006020 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a2e      	ldr	r2, [pc, #184]	; (8005f9c <HAL_DMA_IRQHandler+0x1b4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d04a      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a2d      	ldr	r2, [pc, #180]	; (8005fa0 <HAL_DMA_IRQHandler+0x1b8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d045      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2b      	ldr	r2, [pc, #172]	; (8005fa4 <HAL_DMA_IRQHandler+0x1bc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d040      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <HAL_DMA_IRQHandler+0x1c0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d03b      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a28      	ldr	r2, [pc, #160]	; (8005fac <HAL_DMA_IRQHandler+0x1c4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d036      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a27      	ldr	r2, [pc, #156]	; (8005fb0 <HAL_DMA_IRQHandler+0x1c8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d031      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a25      	ldr	r2, [pc, #148]	; (8005fb4 <HAL_DMA_IRQHandler+0x1cc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d02c      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a24      	ldr	r2, [pc, #144]	; (8005fb8 <HAL_DMA_IRQHandler+0x1d0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d027      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a22      	ldr	r2, [pc, #136]	; (8005fbc <HAL_DMA_IRQHandler+0x1d4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d022      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a21      	ldr	r2, [pc, #132]	; (8005fc0 <HAL_DMA_IRQHandler+0x1d8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d01d      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1f      	ldr	r2, [pc, #124]	; (8005fc4 <HAL_DMA_IRQHandler+0x1dc>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d018      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a1e      	ldr	r2, [pc, #120]	; (8005fc8 <HAL_DMA_IRQHandler+0x1e0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d013      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <HAL_DMA_IRQHandler+0x1e4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00e      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1b      	ldr	r2, [pc, #108]	; (8005fd0 <HAL_DMA_IRQHandler+0x1e8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d009      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a19      	ldr	r2, [pc, #100]	; (8005fd4 <HAL_DMA_IRQHandler+0x1ec>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a18      	ldr	r2, [pc, #96]	; (8005fd8 <HAL_DMA_IRQHandler+0x1f0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d12f      	bne.n	8005fdc <HAL_DMA_IRQHandler+0x1f4>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bf14      	ite	ne
 8005f8a:	2301      	movne	r3, #1
 8005f8c:	2300      	moveq	r3, #0
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	e02e      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x208>
 8005f92:	bf00      	nop
 8005f94:	24000000 	.word	0x24000000
 8005f98:	1b4e81b5 	.word	0x1b4e81b5
 8005f9c:	40020010 	.word	0x40020010
 8005fa0:	40020028 	.word	0x40020028
 8005fa4:	40020040 	.word	0x40020040
 8005fa8:	40020058 	.word	0x40020058
 8005fac:	40020070 	.word	0x40020070
 8005fb0:	40020088 	.word	0x40020088
 8005fb4:	400200a0 	.word	0x400200a0
 8005fb8:	400200b8 	.word	0x400200b8
 8005fbc:	40020410 	.word	0x40020410
 8005fc0:	40020428 	.word	0x40020428
 8005fc4:	40020440 	.word	0x40020440
 8005fc8:	40020458 	.word	0x40020458
 8005fcc:	40020470 	.word	0x40020470
 8005fd0:	40020488 	.word	0x40020488
 8005fd4:	400204a0 	.word	0x400204a0
 8005fd8:	400204b8 	.word	0x400204b8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bf14      	ite	ne
 8005fea:	2301      	movne	r3, #1
 8005fec:	2300      	moveq	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d015      	beq.n	8006020 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0204 	bic.w	r2, r2, #4
 8006002:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006008:	f003 031f 	and.w	r3, r3, #31
 800600c:	2208      	movs	r2, #8
 800600e:	409a      	lsls	r2, r3
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	f043 0201 	orr.w	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006024:	f003 031f 	and.w	r3, r3, #31
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	fa22 f303 	lsr.w	r3, r2, r3
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d06e      	beq.n	8006114 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a69      	ldr	r2, [pc, #420]	; (80061e0 <HAL_DMA_IRQHandler+0x3f8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d04a      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a67      	ldr	r2, [pc, #412]	; (80061e4 <HAL_DMA_IRQHandler+0x3fc>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d045      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a66      	ldr	r2, [pc, #408]	; (80061e8 <HAL_DMA_IRQHandler+0x400>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d040      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a64      	ldr	r2, [pc, #400]	; (80061ec <HAL_DMA_IRQHandler+0x404>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d03b      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a63      	ldr	r2, [pc, #396]	; (80061f0 <HAL_DMA_IRQHandler+0x408>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d036      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a61      	ldr	r2, [pc, #388]	; (80061f4 <HAL_DMA_IRQHandler+0x40c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d031      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a60      	ldr	r2, [pc, #384]	; (80061f8 <HAL_DMA_IRQHandler+0x410>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d02c      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a5e      	ldr	r2, [pc, #376]	; (80061fc <HAL_DMA_IRQHandler+0x414>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d027      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a5d      	ldr	r2, [pc, #372]	; (8006200 <HAL_DMA_IRQHandler+0x418>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d022      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a5b      	ldr	r2, [pc, #364]	; (8006204 <HAL_DMA_IRQHandler+0x41c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d01d      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a5a      	ldr	r2, [pc, #360]	; (8006208 <HAL_DMA_IRQHandler+0x420>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d018      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a58      	ldr	r2, [pc, #352]	; (800620c <HAL_DMA_IRQHandler+0x424>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d013      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a57      	ldr	r2, [pc, #348]	; (8006210 <HAL_DMA_IRQHandler+0x428>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00e      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a55      	ldr	r2, [pc, #340]	; (8006214 <HAL_DMA_IRQHandler+0x42c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d009      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a54      	ldr	r2, [pc, #336]	; (8006218 <HAL_DMA_IRQHandler+0x430>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d004      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a52      	ldr	r2, [pc, #328]	; (800621c <HAL_DMA_IRQHandler+0x434>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d10a      	bne.n	80060ec <HAL_DMA_IRQHandler+0x304>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	e003      	b.n	80060f4 <HAL_DMA_IRQHandler+0x30c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2300      	movs	r3, #0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00d      	beq.n	8006114 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fc:	f003 031f 	and.w	r3, r3, #31
 8006100:	2201      	movs	r2, #1
 8006102:	409a      	lsls	r2, r3
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610c:	f043 0202 	orr.w	r2, r3, #2
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	2204      	movs	r2, #4
 800611e:	409a      	lsls	r2, r3
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	4013      	ands	r3, r2
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 808f 	beq.w	8006248 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2c      	ldr	r2, [pc, #176]	; (80061e0 <HAL_DMA_IRQHandler+0x3f8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d04a      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2a      	ldr	r2, [pc, #168]	; (80061e4 <HAL_DMA_IRQHandler+0x3fc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d045      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a29      	ldr	r2, [pc, #164]	; (80061e8 <HAL_DMA_IRQHandler+0x400>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d040      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a27      	ldr	r2, [pc, #156]	; (80061ec <HAL_DMA_IRQHandler+0x404>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d03b      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a26      	ldr	r2, [pc, #152]	; (80061f0 <HAL_DMA_IRQHandler+0x408>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d036      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a24      	ldr	r2, [pc, #144]	; (80061f4 <HAL_DMA_IRQHandler+0x40c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d031      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a23      	ldr	r2, [pc, #140]	; (80061f8 <HAL_DMA_IRQHandler+0x410>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d02c      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a21      	ldr	r2, [pc, #132]	; (80061fc <HAL_DMA_IRQHandler+0x414>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d027      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a20      	ldr	r2, [pc, #128]	; (8006200 <HAL_DMA_IRQHandler+0x418>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d022      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1e      	ldr	r2, [pc, #120]	; (8006204 <HAL_DMA_IRQHandler+0x41c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01d      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1d      	ldr	r2, [pc, #116]	; (8006208 <HAL_DMA_IRQHandler+0x420>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d018      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1b      	ldr	r2, [pc, #108]	; (800620c <HAL_DMA_IRQHandler+0x424>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a1a      	ldr	r2, [pc, #104]	; (8006210 <HAL_DMA_IRQHandler+0x428>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00e      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a18      	ldr	r2, [pc, #96]	; (8006214 <HAL_DMA_IRQHandler+0x42c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d009      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a17      	ldr	r2, [pc, #92]	; (8006218 <HAL_DMA_IRQHandler+0x430>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d004      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a15      	ldr	r2, [pc, #84]	; (800621c <HAL_DMA_IRQHandler+0x434>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d12a      	bne.n	8006220 <HAL_DMA_IRQHandler+0x438>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e023      	b.n	8006228 <HAL_DMA_IRQHandler+0x440>
 80061e0:	40020010 	.word	0x40020010
 80061e4:	40020028 	.word	0x40020028
 80061e8:	40020040 	.word	0x40020040
 80061ec:	40020058 	.word	0x40020058
 80061f0:	40020070 	.word	0x40020070
 80061f4:	40020088 	.word	0x40020088
 80061f8:	400200a0 	.word	0x400200a0
 80061fc:	400200b8 	.word	0x400200b8
 8006200:	40020410 	.word	0x40020410
 8006204:	40020428 	.word	0x40020428
 8006208:	40020440 	.word	0x40020440
 800620c:	40020458 	.word	0x40020458
 8006210:	40020470 	.word	0x40020470
 8006214:	40020488 	.word	0x40020488
 8006218:	400204a0 	.word	0x400204a0
 800621c:	400204b8 	.word	0x400204b8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00d      	beq.n	8006248 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	2204      	movs	r2, #4
 8006236:	409a      	lsls	r2, r3
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006240:	f043 0204 	orr.w	r2, r3, #4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	2210      	movs	r2, #16
 8006252:	409a      	lsls	r2, r3
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	4013      	ands	r3, r2
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80a6 	beq.w	80063aa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a85      	ldr	r2, [pc, #532]	; (8006478 <HAL_DMA_IRQHandler+0x690>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d04a      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a83      	ldr	r2, [pc, #524]	; (800647c <HAL_DMA_IRQHandler+0x694>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d045      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a82      	ldr	r2, [pc, #520]	; (8006480 <HAL_DMA_IRQHandler+0x698>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d040      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a80      	ldr	r2, [pc, #512]	; (8006484 <HAL_DMA_IRQHandler+0x69c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d03b      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a7f      	ldr	r2, [pc, #508]	; (8006488 <HAL_DMA_IRQHandler+0x6a0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d036      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a7d      	ldr	r2, [pc, #500]	; (800648c <HAL_DMA_IRQHandler+0x6a4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d031      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a7c      	ldr	r2, [pc, #496]	; (8006490 <HAL_DMA_IRQHandler+0x6a8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d02c      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a7a      	ldr	r2, [pc, #488]	; (8006494 <HAL_DMA_IRQHandler+0x6ac>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d027      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a79      	ldr	r2, [pc, #484]	; (8006498 <HAL_DMA_IRQHandler+0x6b0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d022      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a77      	ldr	r2, [pc, #476]	; (800649c <HAL_DMA_IRQHandler+0x6b4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01d      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a76      	ldr	r2, [pc, #472]	; (80064a0 <HAL_DMA_IRQHandler+0x6b8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d018      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a74      	ldr	r2, [pc, #464]	; (80064a4 <HAL_DMA_IRQHandler+0x6bc>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a73      	ldr	r2, [pc, #460]	; (80064a8 <HAL_DMA_IRQHandler+0x6c0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00e      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a71      	ldr	r2, [pc, #452]	; (80064ac <HAL_DMA_IRQHandler+0x6c4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a70      	ldr	r2, [pc, #448]	; (80064b0 <HAL_DMA_IRQHandler+0x6c8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a6e      	ldr	r2, [pc, #440]	; (80064b4 <HAL_DMA_IRQHandler+0x6cc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d10a      	bne.n	8006314 <HAL_DMA_IRQHandler+0x52c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b00      	cmp	r3, #0
 800630a:	bf14      	ite	ne
 800630c:	2301      	movne	r3, #1
 800630e:	2300      	moveq	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	e009      	b.n	8006328 <HAL_DMA_IRQHandler+0x540>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	bf14      	ite	ne
 8006322:	2301      	movne	r3, #1
 8006324:	2300      	moveq	r3, #0
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d03e      	beq.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006330:	f003 031f 	and.w	r3, r3, #31
 8006334:	2210      	movs	r2, #16
 8006336:	409a      	lsls	r2, r3
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d018      	beq.n	800637c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d108      	bne.n	800636a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d024      	beq.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
 8006368:	e01f      	b.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01b      	beq.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
 800637a:	e016      	b.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006386:	2b00      	cmp	r3, #0
 8006388:	d107      	bne.n	800639a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0208 	bic.w	r2, r2, #8
 8006398:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2220      	movs	r2, #32
 80063b4:	409a      	lsls	r2, r3
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	4013      	ands	r3, r2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 8110 	beq.w	80065e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2c      	ldr	r2, [pc, #176]	; (8006478 <HAL_DMA_IRQHandler+0x690>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04a      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2b      	ldr	r2, [pc, #172]	; (800647c <HAL_DMA_IRQHandler+0x694>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d045      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a29      	ldr	r2, [pc, #164]	; (8006480 <HAL_DMA_IRQHandler+0x698>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d040      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a28      	ldr	r2, [pc, #160]	; (8006484 <HAL_DMA_IRQHandler+0x69c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d03b      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a26      	ldr	r2, [pc, #152]	; (8006488 <HAL_DMA_IRQHandler+0x6a0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d036      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a25      	ldr	r2, [pc, #148]	; (800648c <HAL_DMA_IRQHandler+0x6a4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d031      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a23      	ldr	r2, [pc, #140]	; (8006490 <HAL_DMA_IRQHandler+0x6a8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d02c      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a22      	ldr	r2, [pc, #136]	; (8006494 <HAL_DMA_IRQHandler+0x6ac>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d027      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a20      	ldr	r2, [pc, #128]	; (8006498 <HAL_DMA_IRQHandler+0x6b0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d022      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a1f      	ldr	r2, [pc, #124]	; (800649c <HAL_DMA_IRQHandler+0x6b4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d01d      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1d      	ldr	r2, [pc, #116]	; (80064a0 <HAL_DMA_IRQHandler+0x6b8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1c      	ldr	r2, [pc, #112]	; (80064a4 <HAL_DMA_IRQHandler+0x6bc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1a      	ldr	r2, [pc, #104]	; (80064a8 <HAL_DMA_IRQHandler+0x6c0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a19      	ldr	r2, [pc, #100]	; (80064ac <HAL_DMA_IRQHandler+0x6c4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a17      	ldr	r2, [pc, #92]	; (80064b0 <HAL_DMA_IRQHandler+0x6c8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a16      	ldr	r2, [pc, #88]	; (80064b4 <HAL_DMA_IRQHandler+0x6cc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d12b      	bne.n	80064b8 <HAL_DMA_IRQHandler+0x6d0>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b00      	cmp	r3, #0
 800646c:	bf14      	ite	ne
 800646e:	2301      	movne	r3, #1
 8006470:	2300      	moveq	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	e02a      	b.n	80064cc <HAL_DMA_IRQHandler+0x6e4>
 8006476:	bf00      	nop
 8006478:	40020010 	.word	0x40020010
 800647c:	40020028 	.word	0x40020028
 8006480:	40020040 	.word	0x40020040
 8006484:	40020058 	.word	0x40020058
 8006488:	40020070 	.word	0x40020070
 800648c:	40020088 	.word	0x40020088
 8006490:	400200a0 	.word	0x400200a0
 8006494:	400200b8 	.word	0x400200b8
 8006498:	40020410 	.word	0x40020410
 800649c:	40020428 	.word	0x40020428
 80064a0:	40020440 	.word	0x40020440
 80064a4:	40020458 	.word	0x40020458
 80064a8:	40020470 	.word	0x40020470
 80064ac:	40020488 	.word	0x40020488
 80064b0:	400204a0 	.word	0x400204a0
 80064b4:	400204b8 	.word	0x400204b8
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bf14      	ite	ne
 80064c6:	2301      	movne	r3, #1
 80064c8:	2300      	moveq	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8087 	beq.w	80065e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2220      	movs	r2, #32
 80064dc:	409a      	lsls	r2, r3
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d139      	bne.n	8006562 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0216 	bic.w	r2, r2, #22
 80064fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800650c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <HAL_DMA_IRQHandler+0x736>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0208 	bic.w	r2, r2, #8
 800652c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	223f      	movs	r2, #63	; 0x3f
 8006538:	409a      	lsls	r2, r3
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 834a 	beq.w	8006bec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
          }
          return;
 8006560:	e344      	b.n	8006bec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d018      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d108      	bne.n	8006590 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006582:	2b00      	cmp	r3, #0
 8006584:	d02c      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
 800658e:	e027      	b.n	80065e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d023      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
 80065a0:	e01e      	b.n	80065e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10f      	bne.n	80065d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0210 	bic.w	r2, r2, #16
 80065be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8306 	beq.w	8006bf6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 8088 	beq.w	8006708 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2204      	movs	r2, #4
 80065fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a7a      	ldr	r2, [pc, #488]	; (80067f0 <HAL_DMA_IRQHandler+0xa08>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d04a      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a79      	ldr	r2, [pc, #484]	; (80067f4 <HAL_DMA_IRQHandler+0xa0c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d045      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a77      	ldr	r2, [pc, #476]	; (80067f8 <HAL_DMA_IRQHandler+0xa10>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d040      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a76      	ldr	r2, [pc, #472]	; (80067fc <HAL_DMA_IRQHandler+0xa14>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d03b      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a74      	ldr	r2, [pc, #464]	; (8006800 <HAL_DMA_IRQHandler+0xa18>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d036      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a73      	ldr	r2, [pc, #460]	; (8006804 <HAL_DMA_IRQHandler+0xa1c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d031      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a71      	ldr	r2, [pc, #452]	; (8006808 <HAL_DMA_IRQHandler+0xa20>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d02c      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a70      	ldr	r2, [pc, #448]	; (800680c <HAL_DMA_IRQHandler+0xa24>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d027      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a6e      	ldr	r2, [pc, #440]	; (8006810 <HAL_DMA_IRQHandler+0xa28>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d022      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a6d      	ldr	r2, [pc, #436]	; (8006814 <HAL_DMA_IRQHandler+0xa2c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d01d      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a6b      	ldr	r2, [pc, #428]	; (8006818 <HAL_DMA_IRQHandler+0xa30>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d018      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a6a      	ldr	r2, [pc, #424]	; (800681c <HAL_DMA_IRQHandler+0xa34>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d013      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a68      	ldr	r2, [pc, #416]	; (8006820 <HAL_DMA_IRQHandler+0xa38>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00e      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a67      	ldr	r2, [pc, #412]	; (8006824 <HAL_DMA_IRQHandler+0xa3c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d009      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a65      	ldr	r2, [pc, #404]	; (8006828 <HAL_DMA_IRQHandler+0xa40>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d004      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a64      	ldr	r2, [pc, #400]	; (800682c <HAL_DMA_IRQHandler+0xa44>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d108      	bne.n	80066b2 <HAL_DMA_IRQHandler+0x8ca>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e007      	b.n	80066c2 <HAL_DMA_IRQHandler+0x8da>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0201 	bic.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3301      	adds	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d307      	bcc.n	80066de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1f2      	bne.n	80066c2 <HAL_DMA_IRQHandler+0x8da>
 80066dc:	e000      	b.n	80066e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80066de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2203      	movs	r2, #3
 80066f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80066f6:	e003      	b.n	8006700 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8272 	beq.w	8006bf6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
 800671a:	e26c      	b.n	8006bf6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a43      	ldr	r2, [pc, #268]	; (8006830 <HAL_DMA_IRQHandler+0xa48>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d022      	beq.n	800676c <HAL_DMA_IRQHandler+0x984>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a42      	ldr	r2, [pc, #264]	; (8006834 <HAL_DMA_IRQHandler+0xa4c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d01d      	beq.n	800676c <HAL_DMA_IRQHandler+0x984>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a40      	ldr	r2, [pc, #256]	; (8006838 <HAL_DMA_IRQHandler+0xa50>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d018      	beq.n	800676c <HAL_DMA_IRQHandler+0x984>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a3f      	ldr	r2, [pc, #252]	; (800683c <HAL_DMA_IRQHandler+0xa54>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d013      	beq.n	800676c <HAL_DMA_IRQHandler+0x984>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <HAL_DMA_IRQHandler+0xa58>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00e      	beq.n	800676c <HAL_DMA_IRQHandler+0x984>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a3c      	ldr	r2, [pc, #240]	; (8006844 <HAL_DMA_IRQHandler+0xa5c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d009      	beq.n	800676c <HAL_DMA_IRQHandler+0x984>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a3a      	ldr	r2, [pc, #232]	; (8006848 <HAL_DMA_IRQHandler+0xa60>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d004      	beq.n	800676c <HAL_DMA_IRQHandler+0x984>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a39      	ldr	r2, [pc, #228]	; (800684c <HAL_DMA_IRQHandler+0xa64>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d101      	bne.n	8006770 <HAL_DMA_IRQHandler+0x988>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <HAL_DMA_IRQHandler+0x98a>
 8006770:	2300      	movs	r3, #0
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 823f 	beq.w	8006bf6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	2204      	movs	r2, #4
 800678a:	409a      	lsls	r2, r3
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	4013      	ands	r3, r2
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 80cd 	beq.w	8006930 <HAL_DMA_IRQHandler+0xb48>
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 80c7 	beq.w	8006930 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a6:	f003 031f 	and.w	r3, r3, #31
 80067aa:	2204      	movs	r2, #4
 80067ac:	409a      	lsls	r2, r3
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d049      	beq.n	8006850 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d109      	bne.n	80067da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 8210 	beq.w	8006bf0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067d8:	e20a      	b.n	8006bf0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 8206 	beq.w	8006bf0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067ec:	e200      	b.n	8006bf0 <HAL_DMA_IRQHandler+0xe08>
 80067ee:	bf00      	nop
 80067f0:	40020010 	.word	0x40020010
 80067f4:	40020028 	.word	0x40020028
 80067f8:	40020040 	.word	0x40020040
 80067fc:	40020058 	.word	0x40020058
 8006800:	40020070 	.word	0x40020070
 8006804:	40020088 	.word	0x40020088
 8006808:	400200a0 	.word	0x400200a0
 800680c:	400200b8 	.word	0x400200b8
 8006810:	40020410 	.word	0x40020410
 8006814:	40020428 	.word	0x40020428
 8006818:	40020440 	.word	0x40020440
 800681c:	40020458 	.word	0x40020458
 8006820:	40020470 	.word	0x40020470
 8006824:	40020488 	.word	0x40020488
 8006828:	400204a0 	.word	0x400204a0
 800682c:	400204b8 	.word	0x400204b8
 8006830:	58025408 	.word	0x58025408
 8006834:	5802541c 	.word	0x5802541c
 8006838:	58025430 	.word	0x58025430
 800683c:	58025444 	.word	0x58025444
 8006840:	58025458 	.word	0x58025458
 8006844:	5802546c 	.word	0x5802546c
 8006848:	58025480 	.word	0x58025480
 800684c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d160      	bne.n	800691c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a7f      	ldr	r2, [pc, #508]	; (8006a5c <HAL_DMA_IRQHandler+0xc74>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d04a      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a7d      	ldr	r2, [pc, #500]	; (8006a60 <HAL_DMA_IRQHandler+0xc78>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d045      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a7c      	ldr	r2, [pc, #496]	; (8006a64 <HAL_DMA_IRQHandler+0xc7c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d040      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a7a      	ldr	r2, [pc, #488]	; (8006a68 <HAL_DMA_IRQHandler+0xc80>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d03b      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a79      	ldr	r2, [pc, #484]	; (8006a6c <HAL_DMA_IRQHandler+0xc84>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d036      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a77      	ldr	r2, [pc, #476]	; (8006a70 <HAL_DMA_IRQHandler+0xc88>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d031      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a76      	ldr	r2, [pc, #472]	; (8006a74 <HAL_DMA_IRQHandler+0xc8c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d02c      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a74      	ldr	r2, [pc, #464]	; (8006a78 <HAL_DMA_IRQHandler+0xc90>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d027      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a73      	ldr	r2, [pc, #460]	; (8006a7c <HAL_DMA_IRQHandler+0xc94>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d022      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a71      	ldr	r2, [pc, #452]	; (8006a80 <HAL_DMA_IRQHandler+0xc98>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d01d      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a70      	ldr	r2, [pc, #448]	; (8006a84 <HAL_DMA_IRQHandler+0xc9c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d018      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a6e      	ldr	r2, [pc, #440]	; (8006a88 <HAL_DMA_IRQHandler+0xca0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a6d      	ldr	r2, [pc, #436]	; (8006a8c <HAL_DMA_IRQHandler+0xca4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00e      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a6b      	ldr	r2, [pc, #428]	; (8006a90 <HAL_DMA_IRQHandler+0xca8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d009      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a6a      	ldr	r2, [pc, #424]	; (8006a94 <HAL_DMA_IRQHandler+0xcac>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d004      	beq.n	80068fa <HAL_DMA_IRQHandler+0xb12>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a68      	ldr	r2, [pc, #416]	; (8006a98 <HAL_DMA_IRQHandler+0xcb0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d108      	bne.n	800690c <HAL_DMA_IRQHandler+0xb24>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0208 	bic.w	r2, r2, #8
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	e007      	b.n	800691c <HAL_DMA_IRQHandler+0xb34>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0204 	bic.w	r2, r2, #4
 800691a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8165 	beq.w	8006bf0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800692e:	e15f      	b.n	8006bf0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	2202      	movs	r2, #2
 800693a:	409a      	lsls	r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4013      	ands	r3, r2
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 80c5 	beq.w	8006ad0 <HAL_DMA_IRQHandler+0xce8>
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80bf 	beq.w	8006ad0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	2202      	movs	r2, #2
 800695c:	409a      	lsls	r2, r3
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d018      	beq.n	800699e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 813a 	beq.w	8006bf4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006988:	e134      	b.n	8006bf4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8130 	beq.w	8006bf4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800699c:	e12a      	b.n	8006bf4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f040 8089 	bne.w	8006abc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a2b      	ldr	r2, [pc, #172]	; (8006a5c <HAL_DMA_IRQHandler+0xc74>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d04a      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a29      	ldr	r2, [pc, #164]	; (8006a60 <HAL_DMA_IRQHandler+0xc78>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d045      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a28      	ldr	r2, [pc, #160]	; (8006a64 <HAL_DMA_IRQHandler+0xc7c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d040      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a26      	ldr	r2, [pc, #152]	; (8006a68 <HAL_DMA_IRQHandler+0xc80>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d03b      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a25      	ldr	r2, [pc, #148]	; (8006a6c <HAL_DMA_IRQHandler+0xc84>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d036      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a23      	ldr	r2, [pc, #140]	; (8006a70 <HAL_DMA_IRQHandler+0xc88>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d031      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a22      	ldr	r2, [pc, #136]	; (8006a74 <HAL_DMA_IRQHandler+0xc8c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d02c      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <HAL_DMA_IRQHandler+0xc90>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d027      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a1f      	ldr	r2, [pc, #124]	; (8006a7c <HAL_DMA_IRQHandler+0xc94>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d022      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <HAL_DMA_IRQHandler+0xc98>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01d      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1c      	ldr	r2, [pc, #112]	; (8006a84 <HAL_DMA_IRQHandler+0xc9c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d018      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1a      	ldr	r2, [pc, #104]	; (8006a88 <HAL_DMA_IRQHandler+0xca0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a19      	ldr	r2, [pc, #100]	; (8006a8c <HAL_DMA_IRQHandler+0xca4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a17      	ldr	r2, [pc, #92]	; (8006a90 <HAL_DMA_IRQHandler+0xca8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <HAL_DMA_IRQHandler+0xcac>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xc62>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a14      	ldr	r2, [pc, #80]	; (8006a98 <HAL_DMA_IRQHandler+0xcb0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d128      	bne.n	8006a9c <HAL_DMA_IRQHandler+0xcb4>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0214 	bic.w	r2, r2, #20
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e027      	b.n	8006aac <HAL_DMA_IRQHandler+0xcc4>
 8006a5c:	40020010 	.word	0x40020010
 8006a60:	40020028 	.word	0x40020028
 8006a64:	40020040 	.word	0x40020040
 8006a68:	40020058 	.word	0x40020058
 8006a6c:	40020070 	.word	0x40020070
 8006a70:	40020088 	.word	0x40020088
 8006a74:	400200a0 	.word	0x400200a0
 8006a78:	400200b8 	.word	0x400200b8
 8006a7c:	40020410 	.word	0x40020410
 8006a80:	40020428 	.word	0x40020428
 8006a84:	40020440 	.word	0x40020440
 8006a88:	40020458 	.word	0x40020458
 8006a8c:	40020470 	.word	0x40020470
 8006a90:	40020488 	.word	0x40020488
 8006a94:	400204a0 	.word	0x400204a0
 8006a98:	400204b8 	.word	0x400204b8
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 020a 	bic.w	r2, r2, #10
 8006aaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8097 	beq.w	8006bf4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ace:	e091      	b.n	8006bf4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	2208      	movs	r2, #8
 8006ada:	409a      	lsls	r2, r3
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 8088 	beq.w	8006bf6 <HAL_DMA_IRQHandler+0xe0e>
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 8082 	beq.w	8006bf6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a41      	ldr	r2, [pc, #260]	; (8006bfc <HAL_DMA_IRQHandler+0xe14>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d04a      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a3f      	ldr	r2, [pc, #252]	; (8006c00 <HAL_DMA_IRQHandler+0xe18>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d045      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a3e      	ldr	r2, [pc, #248]	; (8006c04 <HAL_DMA_IRQHandler+0xe1c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d040      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a3c      	ldr	r2, [pc, #240]	; (8006c08 <HAL_DMA_IRQHandler+0xe20>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d03b      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a3b      	ldr	r2, [pc, #236]	; (8006c0c <HAL_DMA_IRQHandler+0xe24>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d036      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a39      	ldr	r2, [pc, #228]	; (8006c10 <HAL_DMA_IRQHandler+0xe28>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d031      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a38      	ldr	r2, [pc, #224]	; (8006c14 <HAL_DMA_IRQHandler+0xe2c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d02c      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a36      	ldr	r2, [pc, #216]	; (8006c18 <HAL_DMA_IRQHandler+0xe30>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d027      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a35      	ldr	r2, [pc, #212]	; (8006c1c <HAL_DMA_IRQHandler+0xe34>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d022      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a33      	ldr	r2, [pc, #204]	; (8006c20 <HAL_DMA_IRQHandler+0xe38>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d01d      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a32      	ldr	r2, [pc, #200]	; (8006c24 <HAL_DMA_IRQHandler+0xe3c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d018      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a30      	ldr	r2, [pc, #192]	; (8006c28 <HAL_DMA_IRQHandler+0xe40>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d013      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a2f      	ldr	r2, [pc, #188]	; (8006c2c <HAL_DMA_IRQHandler+0xe44>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00e      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a2d      	ldr	r2, [pc, #180]	; (8006c30 <HAL_DMA_IRQHandler+0xe48>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d009      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a2c      	ldr	r2, [pc, #176]	; (8006c34 <HAL_DMA_IRQHandler+0xe4c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d004      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xdaa>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a2a      	ldr	r2, [pc, #168]	; (8006c38 <HAL_DMA_IRQHandler+0xe50>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d108      	bne.n	8006ba4 <HAL_DMA_IRQHandler+0xdbc>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 021c 	bic.w	r2, r2, #28
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e007      	b.n	8006bb4 <HAL_DMA_IRQHandler+0xdcc>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 020e 	bic.w	r2, r2, #14
 8006bb2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d009      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
 8006bea:	e004      	b.n	8006bf6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006bec:	bf00      	nop
 8006bee:	e002      	b.n	8006bf6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf0:	bf00      	nop
 8006bf2:	e000      	b.n	8006bf6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bf6:	3728      	adds	r7, #40	; 0x28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	40020010 	.word	0x40020010
 8006c00:	40020028 	.word	0x40020028
 8006c04:	40020040 	.word	0x40020040
 8006c08:	40020058 	.word	0x40020058
 8006c0c:	40020070 	.word	0x40020070
 8006c10:	40020088 	.word	0x40020088
 8006c14:	400200a0 	.word	0x400200a0
 8006c18:	400200b8 	.word	0x400200b8
 8006c1c:	40020410 	.word	0x40020410
 8006c20:	40020428 	.word	0x40020428
 8006c24:	40020440 	.word	0x40020440
 8006c28:	40020458 	.word	0x40020458
 8006c2c:	40020470 	.word	0x40020470
 8006c30:	40020488 	.word	0x40020488
 8006c34:	400204a0 	.word	0x400204a0
 8006c38:	400204b8 	.word	0x400204b8

08006c3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c54:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a7f      	ldr	r2, [pc, #508]	; (8006e58 <DMA_SetConfig+0x21c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d072      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a7d      	ldr	r2, [pc, #500]	; (8006e5c <DMA_SetConfig+0x220>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d06d      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a7c      	ldr	r2, [pc, #496]	; (8006e60 <DMA_SetConfig+0x224>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d068      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a7a      	ldr	r2, [pc, #488]	; (8006e64 <DMA_SetConfig+0x228>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d063      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a79      	ldr	r2, [pc, #484]	; (8006e68 <DMA_SetConfig+0x22c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d05e      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a77      	ldr	r2, [pc, #476]	; (8006e6c <DMA_SetConfig+0x230>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d059      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a76      	ldr	r2, [pc, #472]	; (8006e70 <DMA_SetConfig+0x234>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d054      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a74      	ldr	r2, [pc, #464]	; (8006e74 <DMA_SetConfig+0x238>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d04f      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a73      	ldr	r2, [pc, #460]	; (8006e78 <DMA_SetConfig+0x23c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d04a      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a71      	ldr	r2, [pc, #452]	; (8006e7c <DMA_SetConfig+0x240>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d045      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a70      	ldr	r2, [pc, #448]	; (8006e80 <DMA_SetConfig+0x244>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d040      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a6e      	ldr	r2, [pc, #440]	; (8006e84 <DMA_SetConfig+0x248>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d03b      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a6d      	ldr	r2, [pc, #436]	; (8006e88 <DMA_SetConfig+0x24c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d036      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a6b      	ldr	r2, [pc, #428]	; (8006e8c <DMA_SetConfig+0x250>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d031      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a6a      	ldr	r2, [pc, #424]	; (8006e90 <DMA_SetConfig+0x254>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d02c      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a68      	ldr	r2, [pc, #416]	; (8006e94 <DMA_SetConfig+0x258>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d027      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a67      	ldr	r2, [pc, #412]	; (8006e98 <DMA_SetConfig+0x25c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d022      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a65      	ldr	r2, [pc, #404]	; (8006e9c <DMA_SetConfig+0x260>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d01d      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a64      	ldr	r2, [pc, #400]	; (8006ea0 <DMA_SetConfig+0x264>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d018      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a62      	ldr	r2, [pc, #392]	; (8006ea4 <DMA_SetConfig+0x268>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d013      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a61      	ldr	r2, [pc, #388]	; (8006ea8 <DMA_SetConfig+0x26c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00e      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a5f      	ldr	r2, [pc, #380]	; (8006eac <DMA_SetConfig+0x270>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d009      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a5e      	ldr	r2, [pc, #376]	; (8006eb0 <DMA_SetConfig+0x274>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d004      	beq.n	8006d46 <DMA_SetConfig+0x10a>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a5c      	ldr	r2, [pc, #368]	; (8006eb4 <DMA_SetConfig+0x278>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d101      	bne.n	8006d4a <DMA_SetConfig+0x10e>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <DMA_SetConfig+0x110>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00d      	beq.n	8006d6c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d58:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d6a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a39      	ldr	r2, [pc, #228]	; (8006e58 <DMA_SetConfig+0x21c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d04a      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a38      	ldr	r2, [pc, #224]	; (8006e5c <DMA_SetConfig+0x220>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d045      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a36      	ldr	r2, [pc, #216]	; (8006e60 <DMA_SetConfig+0x224>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d040      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a35      	ldr	r2, [pc, #212]	; (8006e64 <DMA_SetConfig+0x228>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d03b      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a33      	ldr	r2, [pc, #204]	; (8006e68 <DMA_SetConfig+0x22c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d036      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a32      	ldr	r2, [pc, #200]	; (8006e6c <DMA_SetConfig+0x230>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d031      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a30      	ldr	r2, [pc, #192]	; (8006e70 <DMA_SetConfig+0x234>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d02c      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a2f      	ldr	r2, [pc, #188]	; (8006e74 <DMA_SetConfig+0x238>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d027      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a2d      	ldr	r2, [pc, #180]	; (8006e78 <DMA_SetConfig+0x23c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d022      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a2c      	ldr	r2, [pc, #176]	; (8006e7c <DMA_SetConfig+0x240>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d01d      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a2a      	ldr	r2, [pc, #168]	; (8006e80 <DMA_SetConfig+0x244>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d018      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a29      	ldr	r2, [pc, #164]	; (8006e84 <DMA_SetConfig+0x248>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d013      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a27      	ldr	r2, [pc, #156]	; (8006e88 <DMA_SetConfig+0x24c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00e      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a26      	ldr	r2, [pc, #152]	; (8006e8c <DMA_SetConfig+0x250>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d009      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a24      	ldr	r2, [pc, #144]	; (8006e90 <DMA_SetConfig+0x254>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <DMA_SetConfig+0x1d0>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a23      	ldr	r2, [pc, #140]	; (8006e94 <DMA_SetConfig+0x258>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d101      	bne.n	8006e10 <DMA_SetConfig+0x1d4>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <DMA_SetConfig+0x1d6>
 8006e10:	2300      	movs	r3, #0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d059      	beq.n	8006eca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	223f      	movs	r2, #63	; 0x3f
 8006e20:	409a      	lsls	r2, r3
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e34:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d138      	bne.n	8006eb8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e56:	e086      	b.n	8006f66 <DMA_SetConfig+0x32a>
 8006e58:	40020010 	.word	0x40020010
 8006e5c:	40020028 	.word	0x40020028
 8006e60:	40020040 	.word	0x40020040
 8006e64:	40020058 	.word	0x40020058
 8006e68:	40020070 	.word	0x40020070
 8006e6c:	40020088 	.word	0x40020088
 8006e70:	400200a0 	.word	0x400200a0
 8006e74:	400200b8 	.word	0x400200b8
 8006e78:	40020410 	.word	0x40020410
 8006e7c:	40020428 	.word	0x40020428
 8006e80:	40020440 	.word	0x40020440
 8006e84:	40020458 	.word	0x40020458
 8006e88:	40020470 	.word	0x40020470
 8006e8c:	40020488 	.word	0x40020488
 8006e90:	400204a0 	.word	0x400204a0
 8006e94:	400204b8 	.word	0x400204b8
 8006e98:	58025408 	.word	0x58025408
 8006e9c:	5802541c 	.word	0x5802541c
 8006ea0:	58025430 	.word	0x58025430
 8006ea4:	58025444 	.word	0x58025444
 8006ea8:	58025458 	.word	0x58025458
 8006eac:	5802546c 	.word	0x5802546c
 8006eb0:	58025480 	.word	0x58025480
 8006eb4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	60da      	str	r2, [r3, #12]
}
 8006ec8:	e04d      	b.n	8006f66 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a29      	ldr	r2, [pc, #164]	; (8006f74 <DMA_SetConfig+0x338>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d022      	beq.n	8006f1a <DMA_SetConfig+0x2de>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a27      	ldr	r2, [pc, #156]	; (8006f78 <DMA_SetConfig+0x33c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01d      	beq.n	8006f1a <DMA_SetConfig+0x2de>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a26      	ldr	r2, [pc, #152]	; (8006f7c <DMA_SetConfig+0x340>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d018      	beq.n	8006f1a <DMA_SetConfig+0x2de>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a24      	ldr	r2, [pc, #144]	; (8006f80 <DMA_SetConfig+0x344>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <DMA_SetConfig+0x2de>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a23      	ldr	r2, [pc, #140]	; (8006f84 <DMA_SetConfig+0x348>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00e      	beq.n	8006f1a <DMA_SetConfig+0x2de>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a21      	ldr	r2, [pc, #132]	; (8006f88 <DMA_SetConfig+0x34c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <DMA_SetConfig+0x2de>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a20      	ldr	r2, [pc, #128]	; (8006f8c <DMA_SetConfig+0x350>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <DMA_SetConfig+0x2de>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a1e      	ldr	r2, [pc, #120]	; (8006f90 <DMA_SetConfig+0x354>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d101      	bne.n	8006f1e <DMA_SetConfig+0x2e2>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <DMA_SetConfig+0x2e4>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d020      	beq.n	8006f66 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	409a      	lsls	r2, r3
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	2b40      	cmp	r3, #64	; 0x40
 8006f42:	d108      	bne.n	8006f56 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	60da      	str	r2, [r3, #12]
}
 8006f54:	e007      	b.n	8006f66 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	60da      	str	r2, [r3, #12]
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	58025408 	.word	0x58025408
 8006f78:	5802541c 	.word	0x5802541c
 8006f7c:	58025430 	.word	0x58025430
 8006f80:	58025444 	.word	0x58025444
 8006f84:	58025458 	.word	0x58025458
 8006f88:	5802546c 	.word	0x5802546c
 8006f8c:	58025480 	.word	0x58025480
 8006f90:	58025494 	.word	0x58025494

08006f94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a42      	ldr	r2, [pc, #264]	; (80070ac <DMA_CalcBaseAndBitshift+0x118>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d04a      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a41      	ldr	r2, [pc, #260]	; (80070b0 <DMA_CalcBaseAndBitshift+0x11c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d045      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a3f      	ldr	r2, [pc, #252]	; (80070b4 <DMA_CalcBaseAndBitshift+0x120>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d040      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a3e      	ldr	r2, [pc, #248]	; (80070b8 <DMA_CalcBaseAndBitshift+0x124>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d03b      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a3c      	ldr	r2, [pc, #240]	; (80070bc <DMA_CalcBaseAndBitshift+0x128>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d036      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a3b      	ldr	r2, [pc, #236]	; (80070c0 <DMA_CalcBaseAndBitshift+0x12c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d031      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a39      	ldr	r2, [pc, #228]	; (80070c4 <DMA_CalcBaseAndBitshift+0x130>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d02c      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a38      	ldr	r2, [pc, #224]	; (80070c8 <DMA_CalcBaseAndBitshift+0x134>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d027      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a36      	ldr	r2, [pc, #216]	; (80070cc <DMA_CalcBaseAndBitshift+0x138>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d022      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a35      	ldr	r2, [pc, #212]	; (80070d0 <DMA_CalcBaseAndBitshift+0x13c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d01d      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a33      	ldr	r2, [pc, #204]	; (80070d4 <DMA_CalcBaseAndBitshift+0x140>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d018      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a32      	ldr	r2, [pc, #200]	; (80070d8 <DMA_CalcBaseAndBitshift+0x144>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d013      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a30      	ldr	r2, [pc, #192]	; (80070dc <DMA_CalcBaseAndBitshift+0x148>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d00e      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2f      	ldr	r2, [pc, #188]	; (80070e0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d009      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a2d      	ldr	r2, [pc, #180]	; (80070e4 <DMA_CalcBaseAndBitshift+0x150>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d004      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xa8>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a2c      	ldr	r2, [pc, #176]	; (80070e8 <DMA_CalcBaseAndBitshift+0x154>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d101      	bne.n	8007040 <DMA_CalcBaseAndBitshift+0xac>
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <DMA_CalcBaseAndBitshift+0xae>
 8007040:	2300      	movs	r3, #0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d024      	beq.n	8007090 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	b2db      	uxtb	r3, r3
 800704c:	3b10      	subs	r3, #16
 800704e:	4a27      	ldr	r2, [pc, #156]	; (80070ec <DMA_CalcBaseAndBitshift+0x158>)
 8007050:	fba2 2303 	umull	r2, r3, r2, r3
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	4a24      	ldr	r2, [pc, #144]	; (80070f0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007060:	5cd3      	ldrb	r3, [r2, r3]
 8007062:	461a      	mov	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b03      	cmp	r3, #3
 800706c:	d908      	bls.n	8007080 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	4b1f      	ldr	r3, [pc, #124]	; (80070f4 <DMA_CalcBaseAndBitshift+0x160>)
 8007076:	4013      	ands	r3, r2
 8007078:	1d1a      	adds	r2, r3, #4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	659a      	str	r2, [r3, #88]	; 0x58
 800707e:	e00d      	b.n	800709c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	4b1b      	ldr	r3, [pc, #108]	; (80070f4 <DMA_CalcBaseAndBitshift+0x160>)
 8007088:	4013      	ands	r3, r2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6593      	str	r3, [r2, #88]	; 0x58
 800708e:	e005      	b.n	800709c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	40020010 	.word	0x40020010
 80070b0:	40020028 	.word	0x40020028
 80070b4:	40020040 	.word	0x40020040
 80070b8:	40020058 	.word	0x40020058
 80070bc:	40020070 	.word	0x40020070
 80070c0:	40020088 	.word	0x40020088
 80070c4:	400200a0 	.word	0x400200a0
 80070c8:	400200b8 	.word	0x400200b8
 80070cc:	40020410 	.word	0x40020410
 80070d0:	40020428 	.word	0x40020428
 80070d4:	40020440 	.word	0x40020440
 80070d8:	40020458 	.word	0x40020458
 80070dc:	40020470 	.word	0x40020470
 80070e0:	40020488 	.word	0x40020488
 80070e4:	400204a0 	.word	0x400204a0
 80070e8:	400204b8 	.word	0x400204b8
 80070ec:	aaaaaaab 	.word	0xaaaaaaab
 80070f0:	08014310 	.word	0x08014310
 80070f4:	fffffc00 	.word	0xfffffc00

080070f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d120      	bne.n	800714e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	2b03      	cmp	r3, #3
 8007112:	d858      	bhi.n	80071c6 <DMA_CheckFifoParam+0xce>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <DMA_CheckFifoParam+0x24>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	0800712d 	.word	0x0800712d
 8007120:	0800713f 	.word	0x0800713f
 8007124:	0800712d 	.word	0x0800712d
 8007128:	080071c7 	.word	0x080071c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d048      	beq.n	80071ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800713c:	e045      	b.n	80071ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007146:	d142      	bne.n	80071ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800714c:	e03f      	b.n	80071ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007156:	d123      	bne.n	80071a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	2b03      	cmp	r3, #3
 800715e:	d838      	bhi.n	80071d2 <DMA_CheckFifoParam+0xda>
 8007160:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <DMA_CheckFifoParam+0x70>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	08007179 	.word	0x08007179
 800716c:	0800717f 	.word	0x0800717f
 8007170:	08007179 	.word	0x08007179
 8007174:	08007191 	.word	0x08007191
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	73fb      	strb	r3, [r7, #15]
        break;
 800717c:	e030      	b.n	80071e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d025      	beq.n	80071d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800718e:	e022      	b.n	80071d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007198:	d11f      	bne.n	80071da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800719e:	e01c      	b.n	80071da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d902      	bls.n	80071ae <DMA_CheckFifoParam+0xb6>
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d003      	beq.n	80071b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80071ac:	e018      	b.n	80071e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	73fb      	strb	r3, [r7, #15]
        break;
 80071b2:	e015      	b.n	80071e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00e      	beq.n	80071de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
    break;
 80071c4:	e00b      	b.n	80071de <DMA_CheckFifoParam+0xe6>
        break;
 80071c6:	bf00      	nop
 80071c8:	e00a      	b.n	80071e0 <DMA_CheckFifoParam+0xe8>
        break;
 80071ca:	bf00      	nop
 80071cc:	e008      	b.n	80071e0 <DMA_CheckFifoParam+0xe8>
        break;
 80071ce:	bf00      	nop
 80071d0:	e006      	b.n	80071e0 <DMA_CheckFifoParam+0xe8>
        break;
 80071d2:	bf00      	nop
 80071d4:	e004      	b.n	80071e0 <DMA_CheckFifoParam+0xe8>
        break;
 80071d6:	bf00      	nop
 80071d8:	e002      	b.n	80071e0 <DMA_CheckFifoParam+0xe8>
        break;
 80071da:	bf00      	nop
 80071dc:	e000      	b.n	80071e0 <DMA_CheckFifoParam+0xe8>
    break;
 80071de:	bf00      	nop
    }
  }

  return status;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop

080071f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a38      	ldr	r2, [pc, #224]	; (80072e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d022      	beq.n	800724e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a36      	ldr	r2, [pc, #216]	; (80072e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01d      	beq.n	800724e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a35      	ldr	r2, [pc, #212]	; (80072ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d018      	beq.n	800724e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a33      	ldr	r2, [pc, #204]	; (80072f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a32      	ldr	r2, [pc, #200]	; (80072f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00e      	beq.n	800724e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a30      	ldr	r2, [pc, #192]	; (80072f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d009      	beq.n	800724e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a2f      	ldr	r2, [pc, #188]	; (80072fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d004      	beq.n	800724e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a2d      	ldr	r2, [pc, #180]	; (8007300 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d101      	bne.n	8007252 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800724e:	2301      	movs	r3, #1
 8007250:	e000      	b.n	8007254 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007252:	2300      	movs	r3, #0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01a      	beq.n	800728e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	3b08      	subs	r3, #8
 8007260:	4a28      	ldr	r2, [pc, #160]	; (8007304 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	091b      	lsrs	r3, r3, #4
 8007268:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4b26      	ldr	r3, [pc, #152]	; (8007308 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	461a      	mov	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a24      	ldr	r2, [pc, #144]	; (800730c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800727c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	2201      	movs	r2, #1
 8007286:	409a      	lsls	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800728c:	e024      	b.n	80072d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	3b10      	subs	r3, #16
 8007296:	4a1e      	ldr	r2, [pc, #120]	; (8007310 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	091b      	lsrs	r3, r3, #4
 800729e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4a1c      	ldr	r2, [pc, #112]	; (8007314 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d806      	bhi.n	80072b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4a1b      	ldr	r2, [pc, #108]	; (8007318 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d902      	bls.n	80072b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3308      	adds	r3, #8
 80072b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4b18      	ldr	r3, [pc, #96]	; (800731c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	461a      	mov	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a16      	ldr	r2, [pc, #88]	; (8007320 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80072c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f003 031f 	and.w	r3, r3, #31
 80072d0:	2201      	movs	r2, #1
 80072d2:	409a      	lsls	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80072d8:	bf00      	nop
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	58025408 	.word	0x58025408
 80072e8:	5802541c 	.word	0x5802541c
 80072ec:	58025430 	.word	0x58025430
 80072f0:	58025444 	.word	0x58025444
 80072f4:	58025458 	.word	0x58025458
 80072f8:	5802546c 	.word	0x5802546c
 80072fc:	58025480 	.word	0x58025480
 8007300:	58025494 	.word	0x58025494
 8007304:	cccccccd 	.word	0xcccccccd
 8007308:	16009600 	.word	0x16009600
 800730c:	58025880 	.word	0x58025880
 8007310:	aaaaaaab 	.word	0xaaaaaaab
 8007314:	400204b8 	.word	0x400204b8
 8007318:	4002040f 	.word	0x4002040f
 800731c:	10008200 	.word	0x10008200
 8007320:	40020880 	.word	0x40020880

08007324 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d04a      	beq.n	80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b08      	cmp	r3, #8
 800733e:	d847      	bhi.n	80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a25      	ldr	r2, [pc, #148]	; (80073dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d022      	beq.n	8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a24      	ldr	r2, [pc, #144]	; (80073e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d01d      	beq.n	8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a22      	ldr	r2, [pc, #136]	; (80073e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d018      	beq.n	8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a21      	ldr	r2, [pc, #132]	; (80073e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d013      	beq.n	8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a1f      	ldr	r2, [pc, #124]	; (80073ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00e      	beq.n	8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a1e      	ldr	r2, [pc, #120]	; (80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d009      	beq.n	8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a1c      	ldr	r2, [pc, #112]	; (80073f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d004      	beq.n	8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a1b      	ldr	r2, [pc, #108]	; (80073f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d101      	bne.n	8007394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007394:	2300      	movs	r3, #0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4b17      	ldr	r3, [pc, #92]	; (80073fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	461a      	mov	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a15      	ldr	r2, [pc, #84]	; (8007400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80073ac:	671a      	str	r2, [r3, #112]	; 0x70
 80073ae:	e009      	b.n	80073c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4b14      	ldr	r3, [pc, #80]	; (8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	461a      	mov	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a11      	ldr	r2, [pc, #68]	; (8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80073c2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	2201      	movs	r2, #1
 80073ca:	409a      	lsls	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80073d0:	bf00      	nop
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	58025408 	.word	0x58025408
 80073e0:	5802541c 	.word	0x5802541c
 80073e4:	58025430 	.word	0x58025430
 80073e8:	58025444 	.word	0x58025444
 80073ec:	58025458 	.word	0x58025458
 80073f0:	5802546c 	.word	0x5802546c
 80073f4:	58025480 	.word	0x58025480
 80073f8:	58025494 	.word	0x58025494
 80073fc:	1600963f 	.word	0x1600963f
 8007400:	58025940 	.word	0x58025940
 8007404:	1000823f 	.word	0x1000823f
 8007408:	40020940 	.word	0x40020940

0800740c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800740c:	b480      	push	{r7}
 800740e:	b089      	sub	sp, #36	; 0x24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007416:	2300      	movs	r3, #0
 8007418:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800741a:	4b89      	ldr	r3, [pc, #548]	; (8007640 <HAL_GPIO_Init+0x234>)
 800741c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800741e:	e194      	b.n	800774a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	2101      	movs	r1, #1
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	fa01 f303 	lsl.w	r3, r1, r3
 800742c:	4013      	ands	r3, r2
 800742e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8186 	beq.w	8007744 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f003 0303 	and.w	r3, r3, #3
 8007440:	2b01      	cmp	r3, #1
 8007442:	d005      	beq.n	8007450 <HAL_GPIO_Init+0x44>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d130      	bne.n	80074b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	2203      	movs	r2, #3
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	43db      	mvns	r3, r3
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	4013      	ands	r3, r2
 8007466:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	fa02 f303 	lsl.w	r3, r2, r3
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	4313      	orrs	r3, r2
 8007478:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007486:	2201      	movs	r2, #1
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	fa02 f303 	lsl.w	r3, r2, r3
 800748e:	43db      	mvns	r3, r3
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	4013      	ands	r3, r2
 8007494:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	091b      	lsrs	r3, r3, #4
 800749c:	f003 0201 	and.w	r2, r3, #1
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	fa02 f303 	lsl.w	r3, r2, r3
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d017      	beq.n	80074ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	2203      	movs	r2, #3
 80074ca:	fa02 f303 	lsl.w	r3, r2, r3
 80074ce:	43db      	mvns	r3, r3
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	4013      	ands	r3, r2
 80074d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	fa02 f303 	lsl.w	r3, r2, r3
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d123      	bne.n	8007542 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	08da      	lsrs	r2, r3, #3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3208      	adds	r2, #8
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	220f      	movs	r2, #15
 8007512:	fa02 f303 	lsl.w	r3, r2, r3
 8007516:	43db      	mvns	r3, r3
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	4013      	ands	r3, r2
 800751c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	691a      	ldr	r2, [r3, #16]
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	4313      	orrs	r3, r2
 8007532:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	08da      	lsrs	r2, r3, #3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3208      	adds	r2, #8
 800753c:	69b9      	ldr	r1, [r7, #24]
 800753e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	2203      	movs	r2, #3
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	43db      	mvns	r3, r3
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	4013      	ands	r3, r2
 8007558:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f003 0203 	and.w	r2, r3, #3
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	fa02 f303 	lsl.w	r3, r2, r3
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	4313      	orrs	r3, r2
 800756e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 80e0 	beq.w	8007744 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007584:	4b2f      	ldr	r3, [pc, #188]	; (8007644 <HAL_GPIO_Init+0x238>)
 8007586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800758a:	4a2e      	ldr	r2, [pc, #184]	; (8007644 <HAL_GPIO_Init+0x238>)
 800758c:	f043 0302 	orr.w	r3, r3, #2
 8007590:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007594:	4b2b      	ldr	r3, [pc, #172]	; (8007644 <HAL_GPIO_Init+0x238>)
 8007596:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075a2:	4a29      	ldr	r2, [pc, #164]	; (8007648 <HAL_GPIO_Init+0x23c>)
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	089b      	lsrs	r3, r3, #2
 80075a8:	3302      	adds	r3, #2
 80075aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	220f      	movs	r2, #15
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	43db      	mvns	r3, r3
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	4013      	ands	r3, r2
 80075c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a20      	ldr	r2, [pc, #128]	; (800764c <HAL_GPIO_Init+0x240>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d052      	beq.n	8007674 <HAL_GPIO_Init+0x268>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <HAL_GPIO_Init+0x244>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d031      	beq.n	800763a <HAL_GPIO_Init+0x22e>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1e      	ldr	r2, [pc, #120]	; (8007654 <HAL_GPIO_Init+0x248>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d02b      	beq.n	8007636 <HAL_GPIO_Init+0x22a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1d      	ldr	r2, [pc, #116]	; (8007658 <HAL_GPIO_Init+0x24c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d025      	beq.n	8007632 <HAL_GPIO_Init+0x226>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a1c      	ldr	r2, [pc, #112]	; (800765c <HAL_GPIO_Init+0x250>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d01f      	beq.n	800762e <HAL_GPIO_Init+0x222>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a1b      	ldr	r2, [pc, #108]	; (8007660 <HAL_GPIO_Init+0x254>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d019      	beq.n	800762a <HAL_GPIO_Init+0x21e>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a1a      	ldr	r2, [pc, #104]	; (8007664 <HAL_GPIO_Init+0x258>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <HAL_GPIO_Init+0x21a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a19      	ldr	r2, [pc, #100]	; (8007668 <HAL_GPIO_Init+0x25c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00d      	beq.n	8007622 <HAL_GPIO_Init+0x216>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a18      	ldr	r2, [pc, #96]	; (800766c <HAL_GPIO_Init+0x260>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d007      	beq.n	800761e <HAL_GPIO_Init+0x212>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a17      	ldr	r2, [pc, #92]	; (8007670 <HAL_GPIO_Init+0x264>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d101      	bne.n	800761a <HAL_GPIO_Init+0x20e>
 8007616:	2309      	movs	r3, #9
 8007618:	e02d      	b.n	8007676 <HAL_GPIO_Init+0x26a>
 800761a:	230a      	movs	r3, #10
 800761c:	e02b      	b.n	8007676 <HAL_GPIO_Init+0x26a>
 800761e:	2308      	movs	r3, #8
 8007620:	e029      	b.n	8007676 <HAL_GPIO_Init+0x26a>
 8007622:	2307      	movs	r3, #7
 8007624:	e027      	b.n	8007676 <HAL_GPIO_Init+0x26a>
 8007626:	2306      	movs	r3, #6
 8007628:	e025      	b.n	8007676 <HAL_GPIO_Init+0x26a>
 800762a:	2305      	movs	r3, #5
 800762c:	e023      	b.n	8007676 <HAL_GPIO_Init+0x26a>
 800762e:	2304      	movs	r3, #4
 8007630:	e021      	b.n	8007676 <HAL_GPIO_Init+0x26a>
 8007632:	2303      	movs	r3, #3
 8007634:	e01f      	b.n	8007676 <HAL_GPIO_Init+0x26a>
 8007636:	2302      	movs	r3, #2
 8007638:	e01d      	b.n	8007676 <HAL_GPIO_Init+0x26a>
 800763a:	2301      	movs	r3, #1
 800763c:	e01b      	b.n	8007676 <HAL_GPIO_Init+0x26a>
 800763e:	bf00      	nop
 8007640:	58000080 	.word	0x58000080
 8007644:	58024400 	.word	0x58024400
 8007648:	58000400 	.word	0x58000400
 800764c:	58020000 	.word	0x58020000
 8007650:	58020400 	.word	0x58020400
 8007654:	58020800 	.word	0x58020800
 8007658:	58020c00 	.word	0x58020c00
 800765c:	58021000 	.word	0x58021000
 8007660:	58021400 	.word	0x58021400
 8007664:	58021800 	.word	0x58021800
 8007668:	58021c00 	.word	0x58021c00
 800766c:	58022000 	.word	0x58022000
 8007670:	58022400 	.word	0x58022400
 8007674:	2300      	movs	r3, #0
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	f002 0203 	and.w	r2, r2, #3
 800767c:	0092      	lsls	r2, r2, #2
 800767e:	4093      	lsls	r3, r2
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	4313      	orrs	r3, r2
 8007684:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007686:	4938      	ldr	r1, [pc, #224]	; (8007768 <HAL_GPIO_Init+0x35c>)
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	089b      	lsrs	r3, r3, #2
 800768c:	3302      	adds	r3, #2
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	43db      	mvns	r3, r3
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	4013      	ands	r3, r2
 80076a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80076ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80076c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	43db      	mvns	r3, r3
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	4013      	ands	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80076e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	43db      	mvns	r3, r3
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	4013      	ands	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	43db      	mvns	r3, r3
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	4013      	ands	r3, r2
 8007728:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	3301      	adds	r3, #1
 8007748:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	fa22 f303 	lsr.w	r3, r2, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	f47f ae63 	bne.w	8007420 <HAL_GPIO_Init+0x14>
  }
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	3724      	adds	r7, #36	; 0x24
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	58000400 	.word	0x58000400

0800776c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	807b      	strh	r3, [r7, #2]
 8007778:	4613      	mov	r3, r2
 800777a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800777c:	787b      	ldrb	r3, [r7, #1]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007782:	887a      	ldrh	r2, [r7, #2]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007788:	e003      	b.n	8007792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800778a:	887b      	ldrh	r3, [r7, #2]
 800778c:	041a      	lsls	r2, r3, #16
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	619a      	str	r2, [r3, #24]
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e08b      	b.n	80078ca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fa fc08 	bl	8001fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2224      	movs	r2, #36	; 0x24
 80077d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0201 	bic.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007800:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d107      	bne.n	800781a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007816:	609a      	str	r2, [r3, #8]
 8007818:	e006      	b.n	8007828 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007826:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	2b02      	cmp	r3, #2
 800782e:	d108      	bne.n	8007842 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800783e:	605a      	str	r2, [r3, #4]
 8007840:	e007      	b.n	8007852 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007850:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6859      	ldr	r1, [r3, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	4b1d      	ldr	r3, [pc, #116]	; (80078d4 <HAL_I2C_Init+0x134>)
 800785e:	430b      	orrs	r3, r1
 8007860:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007870:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691a      	ldr	r2, [r3, #16]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	69d9      	ldr	r1, [r3, #28]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a1a      	ldr	r2, [r3, #32]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0201 	orr.w	r2, r2, #1
 80078aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	02008000 	.word	0x02008000

080078d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d138      	bne.n	8007960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e032      	b.n	8007962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2224      	movs	r2, #36	; 0x24
 8007908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0201 	bic.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800792a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6819      	ldr	r1, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	e000      	b.n	8007962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007960:	2302      	movs	r3, #2
  }
}
 8007962:	4618      	mov	r0, r3
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b20      	cmp	r3, #32
 8007982:	d139      	bne.n	80079f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800798e:	2302      	movs	r3, #2
 8007990:	e033      	b.n	80079fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2224      	movs	r2, #36	; 0x24
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0201 	bic.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80079c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0201 	orr.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	e000      	b.n	80079fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80079f8:	2302      	movs	r3, #2
  }
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
	...

08007a08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a10:	4b19      	ldr	r3, [pc, #100]	; (8007a78 <HAL_PWREx_ConfigSupply+0x70>)
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d00a      	beq.n	8007a32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a1c:	4b16      	ldr	r3, [pc, #88]	; (8007a78 <HAL_PWREx_ConfigSupply+0x70>)
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d001      	beq.n	8007a2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e01f      	b.n	8007a6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	e01d      	b.n	8007a6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a32:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <HAL_PWREx_ConfigSupply+0x70>)
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f023 0207 	bic.w	r2, r3, #7
 8007a3a:	490f      	ldr	r1, [pc, #60]	; (8007a78 <HAL_PWREx_ConfigSupply+0x70>)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a42:	f7fa ffb7 	bl	80029b4 <HAL_GetTick>
 8007a46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a48:	e009      	b.n	8007a5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a4a:	f7fa ffb3 	bl	80029b4 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a58:	d901      	bls.n	8007a5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e007      	b.n	8007a6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a5e:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <HAL_PWREx_ConfigSupply+0x70>)
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6a:	d1ee      	bne.n	8007a4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	58024800 	.word	0x58024800

08007a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08c      	sub	sp, #48	; 0x30
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d102      	bne.n	8007a90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	f000 bc48 	b.w	8008320 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8088 	beq.w	8007bae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a9e:	4b99      	ldr	r3, [pc, #612]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007aa8:	4b96      	ldr	r3, [pc, #600]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	2b10      	cmp	r3, #16
 8007ab2:	d007      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x48>
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	2b18      	cmp	r3, #24
 8007ab8:	d111      	bne.n	8007ade <HAL_RCC_OscConfig+0x62>
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	f003 0303 	and.w	r3, r3, #3
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d10c      	bne.n	8007ade <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ac4:	4b8f      	ldr	r3, [pc, #572]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d06d      	beq.n	8007bac <HAL_RCC_OscConfig+0x130>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d169      	bne.n	8007bac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f000 bc21 	b.w	8008320 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae6:	d106      	bne.n	8007af6 <HAL_RCC_OscConfig+0x7a>
 8007ae8:	4b86      	ldr	r3, [pc, #536]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a85      	ldr	r2, [pc, #532]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	e02e      	b.n	8007b54 <HAL_RCC_OscConfig+0xd8>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10c      	bne.n	8007b18 <HAL_RCC_OscConfig+0x9c>
 8007afe:	4b81      	ldr	r3, [pc, #516]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a80      	ldr	r2, [pc, #512]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	4b7e      	ldr	r3, [pc, #504]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a7d      	ldr	r2, [pc, #500]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	e01d      	b.n	8007b54 <HAL_RCC_OscConfig+0xd8>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b20:	d10c      	bne.n	8007b3c <HAL_RCC_OscConfig+0xc0>
 8007b22:	4b78      	ldr	r3, [pc, #480]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a77      	ldr	r2, [pc, #476]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	4b75      	ldr	r3, [pc, #468]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a74      	ldr	r2, [pc, #464]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	e00b      	b.n	8007b54 <HAL_RCC_OscConfig+0xd8>
 8007b3c:	4b71      	ldr	r3, [pc, #452]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a70      	ldr	r2, [pc, #448]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	4b6e      	ldr	r3, [pc, #440]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a6d      	ldr	r2, [pc, #436]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d013      	beq.n	8007b84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5c:	f7fa ff2a 	bl	80029b4 <HAL_GetTick>
 8007b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b62:	e008      	b.n	8007b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b64:	f7fa ff26 	bl	80029b4 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b64      	cmp	r3, #100	; 0x64
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e3d4      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b76:	4b63      	ldr	r3, [pc, #396]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0f0      	beq.n	8007b64 <HAL_RCC_OscConfig+0xe8>
 8007b82:	e014      	b.n	8007bae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b84:	f7fa ff16 	bl	80029b4 <HAL_GetTick>
 8007b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b8c:	f7fa ff12 	bl	80029b4 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b64      	cmp	r3, #100	; 0x64
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e3c0      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b9e:	4b59      	ldr	r3, [pc, #356]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1f0      	bne.n	8007b8c <HAL_RCC_OscConfig+0x110>
 8007baa:	e000      	b.n	8007bae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 80ca 	beq.w	8007d50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bbc:	4b51      	ldr	r3, [pc, #324]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bc6:	4b4f      	ldr	r3, [pc, #316]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d007      	beq.n	8007be2 <HAL_RCC_OscConfig+0x166>
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	2b18      	cmp	r3, #24
 8007bd6:	d156      	bne.n	8007c86 <HAL_RCC_OscConfig+0x20a>
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d151      	bne.n	8007c86 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007be2:	4b48      	ldr	r3, [pc, #288]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <HAL_RCC_OscConfig+0x17e>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e392      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007bfa:	4b42      	ldr	r3, [pc, #264]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f023 0219 	bic.w	r2, r3, #25
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	493f      	ldr	r1, [pc, #252]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c0c:	f7fa fed2 	bl	80029b4 <HAL_GetTick>
 8007c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c14:	f7fa fece 	bl	80029b4 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e37c      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c26:	4b37      	ldr	r3, [pc, #220]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0f0      	beq.n	8007c14 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c32:	f7fa fecb 	bl	80029cc <HAL_GetREVID>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d817      	bhi.n	8007c70 <HAL_RCC_OscConfig+0x1f4>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	2b40      	cmp	r3, #64	; 0x40
 8007c46:	d108      	bne.n	8007c5a <HAL_RCC_OscConfig+0x1de>
 8007c48:	4b2e      	ldr	r3, [pc, #184]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c50:	4a2c      	ldr	r2, [pc, #176]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c56:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c58:	e07a      	b.n	8007d50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c5a:	4b2a      	ldr	r3, [pc, #168]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	031b      	lsls	r3, r3, #12
 8007c68:	4926      	ldr	r1, [pc, #152]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c6e:	e06f      	b.n	8007d50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c70:	4b24      	ldr	r3, [pc, #144]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	061b      	lsls	r3, r3, #24
 8007c7e:	4921      	ldr	r1, [pc, #132]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c84:	e064      	b.n	8007d50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d047      	beq.n	8007d1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c8e:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f023 0219 	bic.w	r2, r3, #25
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	491a      	ldr	r1, [pc, #104]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca0:	f7fa fe88 	bl	80029b4 <HAL_GetTick>
 8007ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ca6:	e008      	b.n	8007cba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ca8:	f7fa fe84 	bl	80029b4 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e332      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cba:	4b12      	ldr	r3, [pc, #72]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0f0      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cc6:	f7fa fe81 	bl	80029cc <HAL_GetREVID>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d819      	bhi.n	8007d08 <HAL_RCC_OscConfig+0x28c>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	2b40      	cmp	r3, #64	; 0x40
 8007cda:	d108      	bne.n	8007cee <HAL_RCC_OscConfig+0x272>
 8007cdc:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007ce4:	4a07      	ldr	r2, [pc, #28]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cea:	6053      	str	r3, [r2, #4]
 8007cec:	e030      	b.n	8007d50 <HAL_RCC_OscConfig+0x2d4>
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	031b      	lsls	r3, r3, #12
 8007cfc:	4901      	ldr	r1, [pc, #4]	; (8007d04 <HAL_RCC_OscConfig+0x288>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	604b      	str	r3, [r1, #4]
 8007d02:	e025      	b.n	8007d50 <HAL_RCC_OscConfig+0x2d4>
 8007d04:	58024400 	.word	0x58024400
 8007d08:	4b9a      	ldr	r3, [pc, #616]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	061b      	lsls	r3, r3, #24
 8007d16:	4997      	ldr	r1, [pc, #604]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	604b      	str	r3, [r1, #4]
 8007d1c:	e018      	b.n	8007d50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d1e:	4b95      	ldr	r3, [pc, #596]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a94      	ldr	r2, [pc, #592]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007d24:	f023 0301 	bic.w	r3, r3, #1
 8007d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d2a:	f7fa fe43 	bl	80029b4 <HAL_GetTick>
 8007d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d30:	e008      	b.n	8007d44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d32:	f7fa fe3f 	bl	80029b4 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d901      	bls.n	8007d44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e2ed      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d44:	4b8b      	ldr	r3, [pc, #556]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1f0      	bne.n	8007d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0310 	and.w	r3, r3, #16
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 80a9 	beq.w	8007eb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d5e:	4b85      	ldr	r3, [pc, #532]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d68:	4b82      	ldr	r3, [pc, #520]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d007      	beq.n	8007d84 <HAL_RCC_OscConfig+0x308>
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	2b18      	cmp	r3, #24
 8007d78:	d13a      	bne.n	8007df0 <HAL_RCC_OscConfig+0x374>
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d135      	bne.n	8007df0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d84:	4b7b      	ldr	r3, [pc, #492]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d005      	beq.n	8007d9c <HAL_RCC_OscConfig+0x320>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	2b80      	cmp	r3, #128	; 0x80
 8007d96:	d001      	beq.n	8007d9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e2c1      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d9c:	f7fa fe16 	bl	80029cc <HAL_GetREVID>
 8007da0:	4603      	mov	r3, r0
 8007da2:	f241 0203 	movw	r2, #4099	; 0x1003
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d817      	bhi.n	8007dda <HAL_RCC_OscConfig+0x35e>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	d108      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x348>
 8007db2:	4b70      	ldr	r3, [pc, #448]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007dba:	4a6e      	ldr	r2, [pc, #440]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007dbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dc0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dc2:	e075      	b.n	8007eb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dc4:	4b6b      	ldr	r3, [pc, #428]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	069b      	lsls	r3, r3, #26
 8007dd2:	4968      	ldr	r1, [pc, #416]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dd8:	e06a      	b.n	8007eb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dda:	4b66      	ldr	r3, [pc, #408]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	061b      	lsls	r3, r3, #24
 8007de8:	4962      	ldr	r1, [pc, #392]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dee:	e05f      	b.n	8007eb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d042      	beq.n	8007e7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007df8:	4b5e      	ldr	r3, [pc, #376]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a5d      	ldr	r2, [pc, #372]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e04:	f7fa fdd6 	bl	80029b4 <HAL_GetTick>
 8007e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e0c:	f7fa fdd2 	bl	80029b4 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e280      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e1e:	4b55      	ldr	r3, [pc, #340]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f0      	beq.n	8007e0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e2a:	f7fa fdcf 	bl	80029cc <HAL_GetREVID>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d817      	bhi.n	8007e68 <HAL_RCC_OscConfig+0x3ec>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	2b20      	cmp	r3, #32
 8007e3e:	d108      	bne.n	8007e52 <HAL_RCC_OscConfig+0x3d6>
 8007e40:	4b4c      	ldr	r3, [pc, #304]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e48:	4a4a      	ldr	r2, [pc, #296]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007e4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e4e:	6053      	str	r3, [r2, #4]
 8007e50:	e02e      	b.n	8007eb0 <HAL_RCC_OscConfig+0x434>
 8007e52:	4b48      	ldr	r3, [pc, #288]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	069b      	lsls	r3, r3, #26
 8007e60:	4944      	ldr	r1, [pc, #272]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	604b      	str	r3, [r1, #4]
 8007e66:	e023      	b.n	8007eb0 <HAL_RCC_OscConfig+0x434>
 8007e68:	4b42      	ldr	r3, [pc, #264]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	061b      	lsls	r3, r3, #24
 8007e76:	493f      	ldr	r1, [pc, #252]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60cb      	str	r3, [r1, #12]
 8007e7c:	e018      	b.n	8007eb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e7e:	4b3d      	ldr	r3, [pc, #244]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a3c      	ldr	r2, [pc, #240]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e8a:	f7fa fd93 	bl	80029b4 <HAL_GetTick>
 8007e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e90:	e008      	b.n	8007ea4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e92:	f7fa fd8f 	bl	80029b4 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d901      	bls.n	8007ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e23d      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ea4:	4b33      	ldr	r3, [pc, #204]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1f0      	bne.n	8007e92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0308 	and.w	r3, r3, #8
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d036      	beq.n	8007f2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d019      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ec4:	4b2b      	ldr	r3, [pc, #172]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ec8:	4a2a      	ldr	r2, [pc, #168]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007eca:	f043 0301 	orr.w	r3, r3, #1
 8007ece:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed0:	f7fa fd70 	bl	80029b4 <HAL_GetTick>
 8007ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ed6:	e008      	b.n	8007eea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ed8:	f7fa fd6c 	bl	80029b4 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d901      	bls.n	8007eea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e21a      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007eea:	4b22      	ldr	r3, [pc, #136]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0f0      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x45c>
 8007ef6:	e018      	b.n	8007f2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ef8:	4b1e      	ldr	r3, [pc, #120]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007efc:	4a1d      	ldr	r2, [pc, #116]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007efe:	f023 0301 	bic.w	r3, r3, #1
 8007f02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f04:	f7fa fd56 	bl	80029b4 <HAL_GetTick>
 8007f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f0c:	f7fa fd52 	bl	80029b4 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e200      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f1e:	4b15      	ldr	r3, [pc, #84]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1f0      	bne.n	8007f0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0320 	and.w	r3, r3, #32
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d039      	beq.n	8007faa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01c      	beq.n	8007f78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a0c      	ldr	r2, [pc, #48]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f4a:	f7fa fd33 	bl	80029b4 <HAL_GetTick>
 8007f4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f50:	e008      	b.n	8007f64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f52:	f7fa fd2f 	bl	80029b4 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d901      	bls.n	8007f64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e1dd      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f64:	4b03      	ldr	r3, [pc, #12]	; (8007f74 <HAL_RCC_OscConfig+0x4f8>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d0f0      	beq.n	8007f52 <HAL_RCC_OscConfig+0x4d6>
 8007f70:	e01b      	b.n	8007faa <HAL_RCC_OscConfig+0x52e>
 8007f72:	bf00      	nop
 8007f74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f78:	4b9b      	ldr	r3, [pc, #620]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a9a      	ldr	r2, [pc, #616]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8007f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f84:	f7fa fd16 	bl	80029b4 <HAL_GetTick>
 8007f88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f8a:	e008      	b.n	8007f9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f8c:	f7fa fd12 	bl	80029b4 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e1c0      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f9e:	4b92      	ldr	r3, [pc, #584]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1f0      	bne.n	8007f8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 8081 	beq.w	80080ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fb8:	4b8c      	ldr	r3, [pc, #560]	; (80081ec <HAL_RCC_OscConfig+0x770>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a8b      	ldr	r2, [pc, #556]	; (80081ec <HAL_RCC_OscConfig+0x770>)
 8007fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fc4:	f7fa fcf6 	bl	80029b4 <HAL_GetTick>
 8007fc8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fcc:	f7fa fcf2 	bl	80029b4 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b64      	cmp	r3, #100	; 0x64
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e1a0      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fde:	4b83      	ldr	r3, [pc, #524]	; (80081ec <HAL_RCC_OscConfig+0x770>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0f0      	beq.n	8007fcc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d106      	bne.n	8008000 <HAL_RCC_OscConfig+0x584>
 8007ff2:	4b7d      	ldr	r3, [pc, #500]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff6:	4a7c      	ldr	r2, [pc, #496]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8007ff8:	f043 0301 	orr.w	r3, r3, #1
 8007ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ffe:	e02d      	b.n	800805c <HAL_RCC_OscConfig+0x5e0>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10c      	bne.n	8008022 <HAL_RCC_OscConfig+0x5a6>
 8008008:	4b77      	ldr	r3, [pc, #476]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 800800a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800c:	4a76      	ldr	r2, [pc, #472]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	6713      	str	r3, [r2, #112]	; 0x70
 8008014:	4b74      	ldr	r3, [pc, #464]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008018:	4a73      	ldr	r2, [pc, #460]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 800801a:	f023 0304 	bic.w	r3, r3, #4
 800801e:	6713      	str	r3, [r2, #112]	; 0x70
 8008020:	e01c      	b.n	800805c <HAL_RCC_OscConfig+0x5e0>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	2b05      	cmp	r3, #5
 8008028:	d10c      	bne.n	8008044 <HAL_RCC_OscConfig+0x5c8>
 800802a:	4b6f      	ldr	r3, [pc, #444]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 800802c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802e:	4a6e      	ldr	r2, [pc, #440]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008030:	f043 0304 	orr.w	r3, r3, #4
 8008034:	6713      	str	r3, [r2, #112]	; 0x70
 8008036:	4b6c      	ldr	r3, [pc, #432]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803a:	4a6b      	ldr	r2, [pc, #428]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	6713      	str	r3, [r2, #112]	; 0x70
 8008042:	e00b      	b.n	800805c <HAL_RCC_OscConfig+0x5e0>
 8008044:	4b68      	ldr	r3, [pc, #416]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008048:	4a67      	ldr	r2, [pc, #412]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 800804a:	f023 0301 	bic.w	r3, r3, #1
 800804e:	6713      	str	r3, [r2, #112]	; 0x70
 8008050:	4b65      	ldr	r3, [pc, #404]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008054:	4a64      	ldr	r2, [pc, #400]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008056:	f023 0304 	bic.w	r3, r3, #4
 800805a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d015      	beq.n	8008090 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008064:	f7fa fca6 	bl	80029b4 <HAL_GetTick>
 8008068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800806a:	e00a      	b.n	8008082 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800806c:	f7fa fca2 	bl	80029b4 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	f241 3288 	movw	r2, #5000	; 0x1388
 800807a:	4293      	cmp	r3, r2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e14e      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008082:	4b59      	ldr	r3, [pc, #356]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0ee      	beq.n	800806c <HAL_RCC_OscConfig+0x5f0>
 800808e:	e014      	b.n	80080ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008090:	f7fa fc90 	bl	80029b4 <HAL_GetTick>
 8008094:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008096:	e00a      	b.n	80080ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008098:	f7fa fc8c 	bl	80029b4 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d901      	bls.n	80080ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e138      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080ae:	4b4e      	ldr	r3, [pc, #312]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80080b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1ee      	bne.n	8008098 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 812d 	beq.w	800831e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80080c4:	4b48      	ldr	r3, [pc, #288]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080cc:	2b18      	cmp	r3, #24
 80080ce:	f000 80bd 	beq.w	800824c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	f040 809e 	bne.w	8008218 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080dc:	4b42      	ldr	r3, [pc, #264]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a41      	ldr	r2, [pc, #260]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80080e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e8:	f7fa fc64 	bl	80029b4 <HAL_GetTick>
 80080ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080ee:	e008      	b.n	8008102 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080f0:	f7fa fc60 	bl	80029b4 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e10e      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008102:	4b39      	ldr	r3, [pc, #228]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1f0      	bne.n	80080f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800810e:	4b36      	ldr	r3, [pc, #216]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008112:	4b37      	ldr	r3, [pc, #220]	; (80081f0 <HAL_RCC_OscConfig+0x774>)
 8008114:	4013      	ands	r3, r2
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800811e:	0112      	lsls	r2, r2, #4
 8008120:	430a      	orrs	r2, r1
 8008122:	4931      	ldr	r1, [pc, #196]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008124:	4313      	orrs	r3, r2
 8008126:	628b      	str	r3, [r1, #40]	; 0x28
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812c:	3b01      	subs	r3, #1
 800812e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008136:	3b01      	subs	r3, #1
 8008138:	025b      	lsls	r3, r3, #9
 800813a:	b29b      	uxth	r3, r3
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	3b01      	subs	r3, #1
 8008144:	041b      	lsls	r3, r3, #16
 8008146:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008150:	3b01      	subs	r3, #1
 8008152:	061b      	lsls	r3, r3, #24
 8008154:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008158:	4923      	ldr	r1, [pc, #140]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 800815a:	4313      	orrs	r3, r2
 800815c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800815e:	4b22      	ldr	r3, [pc, #136]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	4a21      	ldr	r2, [pc, #132]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008164:	f023 0301 	bic.w	r3, r3, #1
 8008168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800816a:	4b1f      	ldr	r3, [pc, #124]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 800816c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800816e:	4b21      	ldr	r3, [pc, #132]	; (80081f4 <HAL_RCC_OscConfig+0x778>)
 8008170:	4013      	ands	r3, r2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008176:	00d2      	lsls	r2, r2, #3
 8008178:	491b      	ldr	r1, [pc, #108]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 800817a:	4313      	orrs	r3, r2
 800817c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800817e:	4b1a      	ldr	r3, [pc, #104]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	f023 020c 	bic.w	r2, r3, #12
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	4917      	ldr	r1, [pc, #92]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 800818c:	4313      	orrs	r3, r2
 800818e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008190:	4b15      	ldr	r3, [pc, #84]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 8008192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008194:	f023 0202 	bic.w	r2, r3, #2
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800819c:	4912      	ldr	r1, [pc, #72]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081a2:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	4a10      	ldr	r2, [pc, #64]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80081a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ae:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80081b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b2:	4a0d      	ldr	r2, [pc, #52]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80081b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80081ba:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	4a0a      	ldr	r2, [pc, #40]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80081c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80081c6:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	4a07      	ldr	r2, [pc, #28]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80081cc:	f043 0301 	orr.w	r3, r3, #1
 80081d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081d2:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a04      	ldr	r2, [pc, #16]	; (80081e8 <HAL_RCC_OscConfig+0x76c>)
 80081d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081de:	f7fa fbe9 	bl	80029b4 <HAL_GetTick>
 80081e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081e4:	e011      	b.n	800820a <HAL_RCC_OscConfig+0x78e>
 80081e6:	bf00      	nop
 80081e8:	58024400 	.word	0x58024400
 80081ec:	58024800 	.word	0x58024800
 80081f0:	fffffc0c 	.word	0xfffffc0c
 80081f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081f8:	f7fa fbdc 	bl	80029b4 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d901      	bls.n	800820a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e08a      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800820a:	4b47      	ldr	r3, [pc, #284]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0f0      	beq.n	80081f8 <HAL_RCC_OscConfig+0x77c>
 8008216:	e082      	b.n	800831e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008218:	4b43      	ldr	r3, [pc, #268]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a42      	ldr	r2, [pc, #264]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 800821e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008224:	f7fa fbc6 	bl	80029b4 <HAL_GetTick>
 8008228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800822a:	e008      	b.n	800823e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800822c:	f7fa fbc2 	bl	80029b4 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b02      	cmp	r3, #2
 8008238:	d901      	bls.n	800823e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e070      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800823e:	4b3a      	ldr	r3, [pc, #232]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1f0      	bne.n	800822c <HAL_RCC_OscConfig+0x7b0>
 800824a:	e068      	b.n	800831e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800824c:	4b36      	ldr	r3, [pc, #216]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 800824e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008250:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008252:	4b35      	ldr	r3, [pc, #212]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	2b01      	cmp	r3, #1
 800825e:	d031      	beq.n	80082c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f003 0203 	and.w	r2, r3, #3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800826a:	429a      	cmp	r2, r3
 800826c:	d12a      	bne.n	80082c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	091b      	lsrs	r3, r3, #4
 8008272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800827a:	429a      	cmp	r2, r3
 800827c:	d122      	bne.n	80082c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008288:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800828a:	429a      	cmp	r2, r3
 800828c:	d11a      	bne.n	80082c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	0a5b      	lsrs	r3, r3, #9
 8008292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800829c:	429a      	cmp	r2, r3
 800829e:	d111      	bne.n	80082c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	0c1b      	lsrs	r3, r3, #16
 80082a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d108      	bne.n	80082c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	0e1b      	lsrs	r3, r3, #24
 80082b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d001      	beq.n	80082c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e02b      	b.n	8008320 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80082c8:	4b17      	ldr	r3, [pc, #92]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 80082ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082cc:	08db      	lsrs	r3, r3, #3
 80082ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d01f      	beq.n	800831e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80082de:	4b12      	ldr	r3, [pc, #72]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	4a11      	ldr	r2, [pc, #68]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 80082e4:	f023 0301 	bic.w	r3, r3, #1
 80082e8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80082ea:	f7fa fb63 	bl	80029b4 <HAL_GetTick>
 80082ee:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80082f0:	bf00      	nop
 80082f2:	f7fa fb5f 	bl	80029b4 <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d0f9      	beq.n	80082f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082fe:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 8008300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008302:	4b0a      	ldr	r3, [pc, #40]	; (800832c <HAL_RCC_OscConfig+0x8b0>)
 8008304:	4013      	ands	r3, r2
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800830a:	00d2      	lsls	r2, r2, #3
 800830c:	4906      	ldr	r1, [pc, #24]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 800830e:	4313      	orrs	r3, r2
 8008310:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008312:	4b05      	ldr	r3, [pc, #20]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 8008314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008316:	4a04      	ldr	r2, [pc, #16]	; (8008328 <HAL_RCC_OscConfig+0x8ac>)
 8008318:	f043 0301 	orr.w	r3, r3, #1
 800831c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3730      	adds	r7, #48	; 0x30
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	58024400 	.word	0x58024400
 800832c:	ffff0007 	.word	0xffff0007

08008330 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e19c      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008344:	4b8a      	ldr	r3, [pc, #552]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 030f 	and.w	r3, r3, #15
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d910      	bls.n	8008374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008352:	4b87      	ldr	r3, [pc, #540]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f023 020f 	bic.w	r2, r3, #15
 800835a:	4985      	ldr	r1, [pc, #532]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	4313      	orrs	r3, r2
 8008360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008362:	4b83      	ldr	r3, [pc, #524]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 030f 	and.w	r3, r3, #15
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d001      	beq.n	8008374 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e184      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b00      	cmp	r3, #0
 800837e:	d010      	beq.n	80083a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	4b7b      	ldr	r3, [pc, #492]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800838c:	429a      	cmp	r2, r3
 800838e:	d908      	bls.n	80083a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008390:	4b78      	ldr	r3, [pc, #480]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	4975      	ldr	r1, [pc, #468]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d010      	beq.n	80083d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695a      	ldr	r2, [r3, #20]
 80083b2:	4b70      	ldr	r3, [pc, #448]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d908      	bls.n	80083d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083be:	4b6d      	ldr	r3, [pc, #436]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	496a      	ldr	r1, [pc, #424]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d010      	beq.n	80083fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699a      	ldr	r2, [r3, #24]
 80083e0:	4b64      	ldr	r3, [pc, #400]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d908      	bls.n	80083fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083ec:	4b61      	ldr	r3, [pc, #388]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	495e      	ldr	r1, [pc, #376]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d010      	beq.n	800842c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69da      	ldr	r2, [r3, #28]
 800840e:	4b59      	ldr	r3, [pc, #356]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008416:	429a      	cmp	r2, r3
 8008418:	d908      	bls.n	800842c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800841a:	4b56      	ldr	r3, [pc, #344]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	4953      	ldr	r1, [pc, #332]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008428:	4313      	orrs	r3, r2
 800842a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0302 	and.w	r3, r3, #2
 8008434:	2b00      	cmp	r3, #0
 8008436:	d010      	beq.n	800845a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	4b4d      	ldr	r3, [pc, #308]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	f003 030f 	and.w	r3, r3, #15
 8008444:	429a      	cmp	r2, r3
 8008446:	d908      	bls.n	800845a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008448:	4b4a      	ldr	r3, [pc, #296]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	f023 020f 	bic.w	r2, r3, #15
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	4947      	ldr	r1, [pc, #284]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008456:	4313      	orrs	r3, r2
 8008458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d055      	beq.n	8008512 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008466:	4b43      	ldr	r3, [pc, #268]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	4940      	ldr	r1, [pc, #256]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008474:	4313      	orrs	r3, r2
 8008476:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d107      	bne.n	8008490 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008480:	4b3c      	ldr	r3, [pc, #240]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d121      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e0f6      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b03      	cmp	r3, #3
 8008496:	d107      	bne.n	80084a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008498:	4b36      	ldr	r3, [pc, #216]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d115      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e0ea      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d107      	bne.n	80084c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084b0:	4b30      	ldr	r3, [pc, #192]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d109      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e0de      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084c0:	4b2c      	ldr	r3, [pc, #176]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e0d6      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084d0:	4b28      	ldr	r3, [pc, #160]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f023 0207 	bic.w	r2, r3, #7
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	4925      	ldr	r1, [pc, #148]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e2:	f7fa fa67 	bl	80029b4 <HAL_GetTick>
 80084e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084e8:	e00a      	b.n	8008500 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084ea:	f7fa fa63 	bl	80029b4 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d901      	bls.n	8008500 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e0be      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008500:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	429a      	cmp	r2, r3
 8008510:	d1eb      	bne.n	80084ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d010      	beq.n	8008540 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68da      	ldr	r2, [r3, #12]
 8008522:	4b14      	ldr	r3, [pc, #80]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	429a      	cmp	r2, r3
 800852c:	d208      	bcs.n	8008540 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800852e:	4b11      	ldr	r3, [pc, #68]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	f023 020f 	bic.w	r2, r3, #15
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	490e      	ldr	r1, [pc, #56]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800853c:	4313      	orrs	r3, r2
 800853e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008540:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 030f 	and.w	r3, r3, #15
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	429a      	cmp	r2, r3
 800854c:	d214      	bcs.n	8008578 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800854e:	4b08      	ldr	r3, [pc, #32]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f023 020f 	bic.w	r2, r3, #15
 8008556:	4906      	ldr	r1, [pc, #24]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	4313      	orrs	r3, r2
 800855c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800855e:	4b04      	ldr	r3, [pc, #16]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d005      	beq.n	8008578 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e086      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
 8008570:	52002000 	.word	0x52002000
 8008574:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0304 	and.w	r3, r3, #4
 8008580:	2b00      	cmp	r3, #0
 8008582:	d010      	beq.n	80085a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691a      	ldr	r2, [r3, #16]
 8008588:	4b3f      	ldr	r3, [pc, #252]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008590:	429a      	cmp	r2, r3
 8008592:	d208      	bcs.n	80085a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008594:	4b3c      	ldr	r3, [pc, #240]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	4939      	ldr	r1, [pc, #228]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d010      	beq.n	80085d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	695a      	ldr	r2, [r3, #20]
 80085b6:	4b34      	ldr	r3, [pc, #208]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085be:	429a      	cmp	r2, r3
 80085c0:	d208      	bcs.n	80085d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085c2:	4b31      	ldr	r3, [pc, #196]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	492e      	ldr	r1, [pc, #184]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d010      	beq.n	8008602 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	4b28      	ldr	r3, [pc, #160]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d208      	bcs.n	8008602 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085f0:	4b25      	ldr	r3, [pc, #148]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	4922      	ldr	r1, [pc, #136]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0320 	and.w	r3, r3, #32
 800860a:	2b00      	cmp	r3, #0
 800860c:	d010      	beq.n	8008630 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	69da      	ldr	r2, [r3, #28]
 8008612:	4b1d      	ldr	r3, [pc, #116]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800861a:	429a      	cmp	r2, r3
 800861c:	d208      	bcs.n	8008630 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800861e:	4b1a      	ldr	r3, [pc, #104]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	4917      	ldr	r1, [pc, #92]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 800862c:	4313      	orrs	r3, r2
 800862e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008630:	f000 f834 	bl	800869c <HAL_RCC_GetSysClockFreq>
 8008634:	4602      	mov	r2, r0
 8008636:	4b14      	ldr	r3, [pc, #80]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	0a1b      	lsrs	r3, r3, #8
 800863c:	f003 030f 	and.w	r3, r3, #15
 8008640:	4912      	ldr	r1, [pc, #72]	; (800868c <HAL_RCC_ClockConfig+0x35c>)
 8008642:	5ccb      	ldrb	r3, [r1, r3]
 8008644:	f003 031f 	and.w	r3, r3, #31
 8008648:	fa22 f303 	lsr.w	r3, r2, r3
 800864c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800864e:	4b0e      	ldr	r3, [pc, #56]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	4a0d      	ldr	r2, [pc, #52]	; (800868c <HAL_RCC_ClockConfig+0x35c>)
 8008658:	5cd3      	ldrb	r3, [r2, r3]
 800865a:	f003 031f 	and.w	r3, r3, #31
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	fa22 f303 	lsr.w	r3, r2, r3
 8008664:	4a0a      	ldr	r2, [pc, #40]	; (8008690 <HAL_RCC_ClockConfig+0x360>)
 8008666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008668:	4a0a      	ldr	r2, [pc, #40]	; (8008694 <HAL_RCC_ClockConfig+0x364>)
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800866e:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <HAL_RCC_ClockConfig+0x368>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f7f9 fed6 	bl	8002424 <HAL_InitTick>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	58024400 	.word	0x58024400
 800868c:	08014300 	.word	0x08014300
 8008690:	24000004 	.word	0x24000004
 8008694:	24000000 	.word	0x24000000
 8008698:	24000008 	.word	0x24000008

0800869c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800869c:	b480      	push	{r7}
 800869e:	b089      	sub	sp, #36	; 0x24
 80086a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086a2:	4bb3      	ldr	r3, [pc, #716]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086aa:	2b18      	cmp	r3, #24
 80086ac:	f200 8155 	bhi.w	800895a <HAL_RCC_GetSysClockFreq+0x2be>
 80086b0:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	0800871d 	.word	0x0800871d
 80086bc:	0800895b 	.word	0x0800895b
 80086c0:	0800895b 	.word	0x0800895b
 80086c4:	0800895b 	.word	0x0800895b
 80086c8:	0800895b 	.word	0x0800895b
 80086cc:	0800895b 	.word	0x0800895b
 80086d0:	0800895b 	.word	0x0800895b
 80086d4:	0800895b 	.word	0x0800895b
 80086d8:	08008743 	.word	0x08008743
 80086dc:	0800895b 	.word	0x0800895b
 80086e0:	0800895b 	.word	0x0800895b
 80086e4:	0800895b 	.word	0x0800895b
 80086e8:	0800895b 	.word	0x0800895b
 80086ec:	0800895b 	.word	0x0800895b
 80086f0:	0800895b 	.word	0x0800895b
 80086f4:	0800895b 	.word	0x0800895b
 80086f8:	08008749 	.word	0x08008749
 80086fc:	0800895b 	.word	0x0800895b
 8008700:	0800895b 	.word	0x0800895b
 8008704:	0800895b 	.word	0x0800895b
 8008708:	0800895b 	.word	0x0800895b
 800870c:	0800895b 	.word	0x0800895b
 8008710:	0800895b 	.word	0x0800895b
 8008714:	0800895b 	.word	0x0800895b
 8008718:	0800874f 	.word	0x0800874f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800871c:	4b94      	ldr	r3, [pc, #592]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	d009      	beq.n	800873c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008728:	4b91      	ldr	r3, [pc, #580]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	08db      	lsrs	r3, r3, #3
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	4a90      	ldr	r2, [pc, #576]	; (8008974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008734:	fa22 f303 	lsr.w	r3, r2, r3
 8008738:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800873a:	e111      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800873c:	4b8d      	ldr	r3, [pc, #564]	; (8008974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800873e:	61bb      	str	r3, [r7, #24]
      break;
 8008740:	e10e      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008742:	4b8d      	ldr	r3, [pc, #564]	; (8008978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008744:	61bb      	str	r3, [r7, #24]
      break;
 8008746:	e10b      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008748:	4b8c      	ldr	r3, [pc, #560]	; (800897c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800874a:	61bb      	str	r3, [r7, #24]
      break;
 800874c:	e108      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800874e:	4b88      	ldr	r3, [pc, #544]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008758:	4b85      	ldr	r3, [pc, #532]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	091b      	lsrs	r3, r3, #4
 800875e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008762:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008764:	4b82      	ldr	r3, [pc, #520]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800876e:	4b80      	ldr	r3, [pc, #512]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	08db      	lsrs	r3, r3, #3
 8008774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	fb02 f303 	mul.w	r3, r2, r3
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008786:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80e1 	beq.w	8008954 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b02      	cmp	r3, #2
 8008796:	f000 8083 	beq.w	80088a0 <HAL_RCC_GetSysClockFreq+0x204>
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2b02      	cmp	r3, #2
 800879e:	f200 80a1 	bhi.w	80088e4 <HAL_RCC_GetSysClockFreq+0x248>
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d003      	beq.n	80087b0 <HAL_RCC_GetSysClockFreq+0x114>
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d056      	beq.n	800885c <HAL_RCC_GetSysClockFreq+0x1c0>
 80087ae:	e099      	b.n	80088e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087b0:	4b6f      	ldr	r3, [pc, #444]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d02d      	beq.n	8008818 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087bc:	4b6c      	ldr	r3, [pc, #432]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	08db      	lsrs	r3, r3, #3
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	4a6b      	ldr	r2, [pc, #428]	; (8008974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087c8:	fa22 f303 	lsr.w	r3, r2, r3
 80087cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e6:	4b62      	ldr	r3, [pc, #392]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800880a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008812:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008816:	e087      	b.n	8008928 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008822:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008984 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882a:	4b51      	ldr	r3, [pc, #324]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883a:	ed97 6a02 	vldr	s12, [r7, #8]
 800883e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800884a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800885a:	e065      	b.n	8008928 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008866:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008988 <HAL_RCC_GetSysClockFreq+0x2ec>
 800886a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886e:	4b40      	ldr	r3, [pc, #256]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008882:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800888a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800889e:	e043      	b.n	8008928 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800898c <HAL_RCC_GetSysClockFreq+0x2f0>
 80088ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b2:	4b2f      	ldr	r3, [pc, #188]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088e2:	e021      	b.n	8008928 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008988 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f6:	4b1e      	ldr	r3, [pc, #120]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	ed97 6a02 	vldr	s12, [r7, #8]
 800890a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008980 <HAL_RCC_GetSysClockFreq+0x2e4>
 800890e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008926:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008928:	4b11      	ldr	r3, [pc, #68]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800892a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892c:	0a5b      	lsrs	r3, r3, #9
 800892e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008932:	3301      	adds	r3, #1
 8008934:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	ee07 3a90 	vmov	s15, r3
 800893c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008940:	edd7 6a07 	vldr	s13, [r7, #28]
 8008944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800894c:	ee17 3a90 	vmov	r3, s15
 8008950:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008952:	e005      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	61bb      	str	r3, [r7, #24]
      break;
 8008958:	e002      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800895a:	4b07      	ldr	r3, [pc, #28]	; (8008978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800895c:	61bb      	str	r3, [r7, #24]
      break;
 800895e:	bf00      	nop
  }

  return sysclockfreq;
 8008960:	69bb      	ldr	r3, [r7, #24]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3724      	adds	r7, #36	; 0x24
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	58024400 	.word	0x58024400
 8008974:	03d09000 	.word	0x03d09000
 8008978:	003d0900 	.word	0x003d0900
 800897c:	017d7840 	.word	0x017d7840
 8008980:	46000000 	.word	0x46000000
 8008984:	4c742400 	.word	0x4c742400
 8008988:	4a742400 	.word	0x4a742400
 800898c:	4bbebc20 	.word	0x4bbebc20

08008990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008996:	f7ff fe81 	bl	800869c <HAL_RCC_GetSysClockFreq>
 800899a:	4602      	mov	r2, r0
 800899c:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	0a1b      	lsrs	r3, r3, #8
 80089a2:	f003 030f 	and.w	r3, r3, #15
 80089a6:	490f      	ldr	r1, [pc, #60]	; (80089e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80089a8:	5ccb      	ldrb	r3, [r1, r3]
 80089aa:	f003 031f 	and.w	r3, r3, #31
 80089ae:	fa22 f303 	lsr.w	r3, r2, r3
 80089b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089b4:	4b0a      	ldr	r3, [pc, #40]	; (80089e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	f003 030f 	and.w	r3, r3, #15
 80089bc:	4a09      	ldr	r2, [pc, #36]	; (80089e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80089be:	5cd3      	ldrb	r3, [r2, r3]
 80089c0:	f003 031f 	and.w	r3, r3, #31
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	fa22 f303 	lsr.w	r3, r2, r3
 80089ca:	4a07      	ldr	r2, [pc, #28]	; (80089e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80089cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089ce:	4a07      	ldr	r2, [pc, #28]	; (80089ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80089d4:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80089d6:	681b      	ldr	r3, [r3, #0]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	58024400 	.word	0x58024400
 80089e4:	08014300 	.word	0x08014300
 80089e8:	24000004 	.word	0x24000004
 80089ec:	24000000 	.word	0x24000000

080089f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80089f4:	f7ff ffcc 	bl	8008990 <HAL_RCC_GetHCLKFreq>
 80089f8:	4602      	mov	r2, r0
 80089fa:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	091b      	lsrs	r3, r3, #4
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	4904      	ldr	r1, [pc, #16]	; (8008a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a06:	5ccb      	ldrb	r3, [r1, r3]
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	58024400 	.word	0x58024400
 8008a18:	08014300 	.word	0x08014300

08008a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a20:	f7ff ffb6 	bl	8008990 <HAL_RCC_GetHCLKFreq>
 8008a24:	4602      	mov	r2, r0
 8008a26:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	0a1b      	lsrs	r3, r3, #8
 8008a2c:	f003 0307 	and.w	r3, r3, #7
 8008a30:	4904      	ldr	r1, [pc, #16]	; (8008a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a32:	5ccb      	ldrb	r3, [r1, r3]
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	58024400 	.word	0x58024400
 8008a44:	08014300 	.word	0x08014300

08008a48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	223f      	movs	r2, #63	; 0x3f
 8008a56:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008a58:	4b1a      	ldr	r3, [pc, #104]	; (8008ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f003 0207 	and.w	r2, r3, #7
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008a64:	4b17      	ldr	r3, [pc, #92]	; (8008ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008a70:	4b14      	ldr	r3, [pc, #80]	; (8008ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	f003 020f 	and.w	r2, r3, #15
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008a7c:	4b11      	ldr	r3, [pc, #68]	; (8008ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008a88:	4b0e      	ldr	r3, [pc, #56]	; (8008ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008a94:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008aa0:	4b08      	ldr	r3, [pc, #32]	; (8008ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008aac:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <HAL_RCC_GetClockConfig+0x80>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 020f 	and.w	r2, r3, #15
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	601a      	str	r2, [r3, #0]
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	58024400 	.word	0x58024400
 8008ac8:	52002000 	.word	0x52002000

08008acc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ad0:	b0ca      	sub	sp, #296	; 0x128
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008af0:	2500      	movs	r5, #0
 8008af2:	ea54 0305 	orrs.w	r3, r4, r5
 8008af6:	d049      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008afe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b02:	d02f      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008b04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b08:	d828      	bhi.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b0e:	d01a      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b14:	d822      	bhi.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b1e:	d007      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b20:	e01c      	b.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b22:	4bb8      	ldr	r3, [pc, #736]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	4ab7      	ldr	r2, [pc, #732]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b2e:	e01a      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b34:	3308      	adds	r3, #8
 8008b36:	2102      	movs	r1, #2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f002 fb61 	bl	800b200 <RCCEx_PLL2_Config>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b44:	e00f      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b4a:	3328      	adds	r3, #40	; 0x28
 8008b4c:	2102      	movs	r1, #2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f002 fc08 	bl	800b364 <RCCEx_PLL3_Config>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b5a:	e004      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b62:	e000      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b6e:	4ba5      	ldr	r3, [pc, #660]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b72:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b7c:	4aa1      	ldr	r2, [pc, #644]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	6513      	str	r3, [r2, #80]	; 0x50
 8008b82:	e003      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008b98:	f04f 0900 	mov.w	r9, #0
 8008b9c:	ea58 0309 	orrs.w	r3, r8, r9
 8008ba0:	d047      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	d82a      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008bac:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb2:	bf00      	nop
 8008bb4:	08008bc9 	.word	0x08008bc9
 8008bb8:	08008bd7 	.word	0x08008bd7
 8008bbc:	08008bed 	.word	0x08008bed
 8008bc0:	08008c0b 	.word	0x08008c0b
 8008bc4:	08008c0b 	.word	0x08008c0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc8:	4b8e      	ldr	r3, [pc, #568]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	4a8d      	ldr	r2, [pc, #564]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bd4:	e01a      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bda:	3308      	adds	r3, #8
 8008bdc:	2100      	movs	r1, #0
 8008bde:	4618      	mov	r0, r3
 8008be0:	f002 fb0e 	bl	800b200 <RCCEx_PLL2_Config>
 8008be4:	4603      	mov	r3, r0
 8008be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bea:	e00f      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf0:	3328      	adds	r3, #40	; 0x28
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f002 fbb5 	bl	800b364 <RCCEx_PLL3_Config>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c00:	e004      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c08:	e000      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c14:	4b7b      	ldr	r3, [pc, #492]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c18:	f023 0107 	bic.w	r1, r3, #7
 8008c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c22:	4a78      	ldr	r2, [pc, #480]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c24:	430b      	orrs	r3, r1
 8008c26:	6513      	str	r3, [r2, #80]	; 0x50
 8008c28:	e003      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008c3e:	f04f 0b00 	mov.w	fp, #0
 8008c42:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c46:	d04c      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c52:	d030      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c58:	d829      	bhi.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8008c5c:	d02d      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8008c60:	d825      	bhi.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c62:	2b80      	cmp	r3, #128	; 0x80
 8008c64:	d018      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008c66:	2b80      	cmp	r3, #128	; 0x80
 8008c68:	d821      	bhi.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008c6e:	2b40      	cmp	r3, #64	; 0x40
 8008c70:	d007      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008c72:	e01c      	b.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c74:	4b63      	ldr	r3, [pc, #396]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	4a62      	ldr	r2, [pc, #392]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c80:	e01c      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c86:	3308      	adds	r3, #8
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f002 fab8 	bl	800b200 <RCCEx_PLL2_Config>
 8008c90:	4603      	mov	r3, r0
 8008c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c96:	e011      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c9c:	3328      	adds	r3, #40	; 0x28
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f002 fb5f 	bl	800b364 <RCCEx_PLL3_Config>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008cac:	e006      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cb4:	e002      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008cb6:	bf00      	nop
 8008cb8:	e000      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008cc4:	4b4f      	ldr	r3, [pc, #316]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd2:	4a4c      	ldr	r2, [pc, #304]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	6513      	str	r3, [r2, #80]	; 0x50
 8008cd8:	e003      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008cee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008cf8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	d053      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d0e:	d035      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008d10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d14:	d82e      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d1a:	d031      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008d1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d20:	d828      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d26:	d01a      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d2c:	d822      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008d32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d36:	d007      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008d38:	e01c      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d3a:	4b32      	ldr	r3, [pc, #200]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3e:	4a31      	ldr	r2, [pc, #196]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d46:	e01c      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	2100      	movs	r1, #0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f002 fa55 	bl	800b200 <RCCEx_PLL2_Config>
 8008d56:	4603      	mov	r3, r0
 8008d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008d5c:	e011      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d62:	3328      	adds	r3, #40	; 0x28
 8008d64:	2100      	movs	r1, #0
 8008d66:	4618      	mov	r0, r3
 8008d68:	f002 fafc 	bl	800b364 <RCCEx_PLL3_Config>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d72:	e006      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d7a:	e002      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008d7c:	bf00      	nop
 8008d7e:	e000      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10b      	bne.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d8a:	4b1e      	ldr	r3, [pc, #120]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d9a:	4a1a      	ldr	r2, [pc, #104]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8008da0:	e003      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008da6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008db6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008dc0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	d056      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dd6:	d038      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ddc:	d831      	bhi.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008dde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008de2:	d034      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008de4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008de8:	d82b      	bhi.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dee:	d01d      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008df4:	d825      	bhi.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d006      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008dfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008dfe:	d00a      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008e00:	e01f      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e02:	bf00      	nop
 8008e04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e08:	4ba2      	ldr	r3, [pc, #648]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0c:	4aa1      	ldr	r2, [pc, #644]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e14:	e01c      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f002 f9ee 	bl	800b200 <RCCEx_PLL2_Config>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e2a:	e011      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e30:	3328      	adds	r3, #40	; 0x28
 8008e32:	2100      	movs	r1, #0
 8008e34:	4618      	mov	r0, r3
 8008e36:	f002 fa95 	bl	800b364 <RCCEx_PLL3_Config>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e40:	e006      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e48:	e002      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e4a:	bf00      	nop
 8008e4c:	e000      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10b      	bne.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e58:	4b8e      	ldr	r3, [pc, #568]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e5c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e68:	4a8a      	ldr	r2, [pc, #552]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e6a:	430b      	orrs	r3, r1
 8008e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8008e6e:	e003      	b.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008e84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008e92:	460b      	mov	r3, r1
 8008e94:	4313      	orrs	r3, r2
 8008e96:	d03a      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9e:	2b30      	cmp	r3, #48	; 0x30
 8008ea0:	d01f      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008ea2:	2b30      	cmp	r3, #48	; 0x30
 8008ea4:	d819      	bhi.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008ea6:	2b20      	cmp	r3, #32
 8008ea8:	d00c      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008eaa:	2b20      	cmp	r3, #32
 8008eac:	d815      	bhi.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d019      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008eb2:	2b10      	cmp	r3, #16
 8008eb4:	d111      	bne.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb6:	4b77      	ldr	r3, [pc, #476]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eba:	4a76      	ldr	r2, [pc, #472]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ec2:	e011      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ec8:	3308      	adds	r3, #8
 8008eca:	2102      	movs	r1, #2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f002 f997 	bl	800b200 <RCCEx_PLL2_Config>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ed8:	e006      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ee0:	e002      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ee2:	bf00      	nop
 8008ee4:	e000      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10a      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008ef0:	4b68      	ldr	r3, [pc, #416]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008efe:	4a65      	ldr	r2, [pc, #404]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f00:	430b      	orrs	r3, r1
 8008f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f04:	e003      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008f1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	d051      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f38:	d035      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f3e:	d82e      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f44:	d031      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008f46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f4a:	d828      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f50:	d01a      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f56:	d822      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d003      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f60:	d007      	beq.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008f62:	e01c      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f64:	4b4b      	ldr	r3, [pc, #300]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f68:	4a4a      	ldr	r2, [pc, #296]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f70:	e01c      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f76:	3308      	adds	r3, #8
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f002 f940 	bl	800b200 <RCCEx_PLL2_Config>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f86:	e011      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f8c:	3328      	adds	r3, #40	; 0x28
 8008f8e:	2100      	movs	r1, #0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 f9e7 	bl	800b364 <RCCEx_PLL3_Config>
 8008f96:	4603      	mov	r3, r0
 8008f98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f9c:	e006      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fa4:	e002      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008fa6:	bf00      	nop
 8008fa8:	e000      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10a      	bne.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008fb4:	4b37      	ldr	r3, [pc, #220]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc2:	4a34      	ldr	r2, [pc, #208]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	6513      	str	r3, [r2, #80]	; 0x50
 8008fc8:	e003      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008fde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008fe8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008fec:	460b      	mov	r3, r1
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	d056      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ffc:	d033      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009002:	d82c      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009004:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009008:	d02f      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800900a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800900e:	d826      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009010:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009014:	d02b      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009016:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800901a:	d820      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800901c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009020:	d012      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009026:	d81a      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d022      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800902c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009030:	d115      	bne.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009036:	3308      	adds	r3, #8
 8009038:	2101      	movs	r1, #1
 800903a:	4618      	mov	r0, r3
 800903c:	f002 f8e0 	bl	800b200 <RCCEx_PLL2_Config>
 8009040:	4603      	mov	r3, r0
 8009042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009046:	e015      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904c:	3328      	adds	r3, #40	; 0x28
 800904e:	2101      	movs	r1, #1
 8009050:	4618      	mov	r0, r3
 8009052:	f002 f987 	bl	800b364 <RCCEx_PLL3_Config>
 8009056:	4603      	mov	r3, r0
 8009058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800905c:	e00a      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009064:	e006      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009066:	bf00      	nop
 8009068:	e004      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800906a:	bf00      	nop
 800906c:	e002      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800906e:	bf00      	nop
 8009070:	e000      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009074:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10d      	bne.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800907e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009080:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800908a:	4a02      	ldr	r2, [pc, #8]	; (8009094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800908c:	430b      	orrs	r3, r1
 800908e:	6513      	str	r3, [r2, #80]	; 0x50
 8009090:	e006      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009092:	bf00      	nop
 8009094:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800909c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80090ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090b0:	2300      	movs	r3, #0
 80090b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4313      	orrs	r3, r2
 80090be:	d055      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80090c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090cc:	d033      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80090ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090d2:	d82c      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090d8:	d02f      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80090da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090de:	d826      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090e4:	d02b      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80090e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090ea:	d820      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090f0:	d012      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80090f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090f6:	d81a      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d022      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80090fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009100:	d115      	bne.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009106:	3308      	adds	r3, #8
 8009108:	2101      	movs	r1, #1
 800910a:	4618      	mov	r0, r3
 800910c:	f002 f878 	bl	800b200 <RCCEx_PLL2_Config>
 8009110:	4603      	mov	r3, r0
 8009112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009116:	e015      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800911c:	3328      	adds	r3, #40	; 0x28
 800911e:	2101      	movs	r1, #1
 8009120:	4618      	mov	r0, r3
 8009122:	f002 f91f 	bl	800b364 <RCCEx_PLL3_Config>
 8009126:	4603      	mov	r3, r0
 8009128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800912c:	e00a      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009134:	e006      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009136:	bf00      	nop
 8009138:	e004      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800913a:	bf00      	nop
 800913c:	e002      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800913e:	bf00      	nop
 8009140:	e000      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009144:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10b      	bne.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800914c:	4ba3      	ldr	r3, [pc, #652]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800914e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009150:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009158:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800915c:	4a9f      	ldr	r2, [pc, #636]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800915e:	430b      	orrs	r3, r1
 8009160:	6593      	str	r3, [r2, #88]	; 0x58
 8009162:	e003      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009168:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800916c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800917c:	2300      	movs	r3, #0
 800917e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009186:	460b      	mov	r3, r1
 8009188:	4313      	orrs	r3, r2
 800918a:	d037      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800918c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009196:	d00e      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800919c:	d816      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d018      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80091a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091a6:	d111      	bne.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091a8:	4b8c      	ldr	r3, [pc, #560]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ac:	4a8b      	ldr	r2, [pc, #556]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091b4:	e00f      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ba:	3308      	adds	r3, #8
 80091bc:	2101      	movs	r1, #1
 80091be:	4618      	mov	r0, r3
 80091c0:	f002 f81e 	bl	800b200 <RCCEx_PLL2_Config>
 80091c4:	4603      	mov	r3, r0
 80091c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091ca:	e004      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091d2:	e000      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80091d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80091de:	4b7f      	ldr	r3, [pc, #508]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80091e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ec:	4a7b      	ldr	r2, [pc, #492]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091ee:	430b      	orrs	r3, r1
 80091f0:	6513      	str	r3, [r2, #80]	; 0x50
 80091f2:	e003      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80091fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800920c:	2300      	movs	r3, #0
 800920e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009212:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009216:	460b      	mov	r3, r1
 8009218:	4313      	orrs	r3, r2
 800921a:	d039      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800921c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009222:	2b03      	cmp	r3, #3
 8009224:	d81c      	bhi.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009226:	a201      	add	r2, pc, #4	; (adr r2, 800922c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922c:	08009269 	.word	0x08009269
 8009230:	0800923d 	.word	0x0800923d
 8009234:	0800924b 	.word	0x0800924b
 8009238:	08009269 	.word	0x08009269
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800923c:	4b67      	ldr	r3, [pc, #412]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	4a66      	ldr	r2, [pc, #408]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009246:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009248:	e00f      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800924a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800924e:	3308      	adds	r3, #8
 8009250:	2102      	movs	r1, #2
 8009252:	4618      	mov	r0, r3
 8009254:	f001 ffd4 	bl	800b200 <RCCEx_PLL2_Config>
 8009258:	4603      	mov	r3, r0
 800925a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800925e:	e004      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009266:	e000      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800926a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10a      	bne.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009272:	4b5a      	ldr	r3, [pc, #360]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009276:	f023 0103 	bic.w	r1, r3, #3
 800927a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800927e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009280:	4a56      	ldr	r2, [pc, #344]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009282:	430b      	orrs	r3, r1
 8009284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009286:	e003      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009288:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800928c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800929c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092a0:	2300      	movs	r3, #0
 80092a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80092aa:	460b      	mov	r3, r1
 80092ac:	4313      	orrs	r3, r2
 80092ae:	f000 809f 	beq.w	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092b2:	4b4b      	ldr	r3, [pc, #300]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a4a      	ldr	r2, [pc, #296]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092be:	f7f9 fb79 	bl	80029b4 <HAL_GetTick>
 80092c2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092c6:	e00b      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092c8:	f7f9 fb74 	bl	80029b4 <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	2b64      	cmp	r3, #100	; 0x64
 80092d6:	d903      	bls.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092de:	e005      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092e0:	4b3f      	ldr	r3, [pc, #252]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0ed      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80092ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d179      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80092f4:	4b39      	ldr	r3, [pc, #228]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009300:	4053      	eors	r3, r2
 8009302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009306:	2b00      	cmp	r3, #0
 8009308:	d015      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800930a:	4b34      	ldr	r3, [pc, #208]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800930c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009312:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009316:	4b31      	ldr	r3, [pc, #196]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931a:	4a30      	ldr	r2, [pc, #192]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800931c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009320:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009322:	4b2e      	ldr	r3, [pc, #184]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009326:	4a2d      	ldr	r2, [pc, #180]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800932c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800932e:	4a2b      	ldr	r2, [pc, #172]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009330:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009334:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800933a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800933e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009342:	d118      	bne.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009344:	f7f9 fb36 	bl	80029b4 <HAL_GetTick>
 8009348:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800934c:	e00d      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800934e:	f7f9 fb31 	bl	80029b4 <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009358:	1ad2      	subs	r2, r2, r3
 800935a:	f241 3388 	movw	r3, #5000	; 0x1388
 800935e:	429a      	cmp	r2, r3
 8009360:	d903      	bls.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009368:	e005      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800936a:	4b1c      	ldr	r3, [pc, #112]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800936c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936e:	f003 0302 	and.w	r3, r3, #2
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0eb      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800937a:	2b00      	cmp	r3, #0
 800937c:	d129      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800937e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009382:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800938e:	d10e      	bne.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009390:	4b12      	ldr	r3, [pc, #72]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800939c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093a0:	091a      	lsrs	r2, r3, #4
 80093a2:	4b10      	ldr	r3, [pc, #64]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80093a4:	4013      	ands	r3, r2
 80093a6:	4a0d      	ldr	r2, [pc, #52]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093a8:	430b      	orrs	r3, r1
 80093aa:	6113      	str	r3, [r2, #16]
 80093ac:	e005      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80093ae:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	4a0a      	ldr	r2, [pc, #40]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80093b8:	6113      	str	r3, [r2, #16]
 80093ba:	4b08      	ldr	r3, [pc, #32]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80093be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093ca:	4a04      	ldr	r2, [pc, #16]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093cc:	430b      	orrs	r3, r1
 80093ce:	6713      	str	r3, [r2, #112]	; 0x70
 80093d0:	e00e      	b.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80093da:	e009      	b.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80093dc:	58024400 	.word	0x58024400
 80093e0:	58024800 	.word	0x58024800
 80093e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	f002 0301 	and.w	r3, r2, #1
 80093fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009400:	2300      	movs	r3, #0
 8009402:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009406:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800940a:	460b      	mov	r3, r1
 800940c:	4313      	orrs	r3, r2
 800940e:	f000 8089 	beq.w	8009524 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009418:	2b28      	cmp	r3, #40	; 0x28
 800941a:	d86b      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	080094fd 	.word	0x080094fd
 8009428:	080094f5 	.word	0x080094f5
 800942c:	080094f5 	.word	0x080094f5
 8009430:	080094f5 	.word	0x080094f5
 8009434:	080094f5 	.word	0x080094f5
 8009438:	080094f5 	.word	0x080094f5
 800943c:	080094f5 	.word	0x080094f5
 8009440:	080094f5 	.word	0x080094f5
 8009444:	080094c9 	.word	0x080094c9
 8009448:	080094f5 	.word	0x080094f5
 800944c:	080094f5 	.word	0x080094f5
 8009450:	080094f5 	.word	0x080094f5
 8009454:	080094f5 	.word	0x080094f5
 8009458:	080094f5 	.word	0x080094f5
 800945c:	080094f5 	.word	0x080094f5
 8009460:	080094f5 	.word	0x080094f5
 8009464:	080094df 	.word	0x080094df
 8009468:	080094f5 	.word	0x080094f5
 800946c:	080094f5 	.word	0x080094f5
 8009470:	080094f5 	.word	0x080094f5
 8009474:	080094f5 	.word	0x080094f5
 8009478:	080094f5 	.word	0x080094f5
 800947c:	080094f5 	.word	0x080094f5
 8009480:	080094f5 	.word	0x080094f5
 8009484:	080094fd 	.word	0x080094fd
 8009488:	080094f5 	.word	0x080094f5
 800948c:	080094f5 	.word	0x080094f5
 8009490:	080094f5 	.word	0x080094f5
 8009494:	080094f5 	.word	0x080094f5
 8009498:	080094f5 	.word	0x080094f5
 800949c:	080094f5 	.word	0x080094f5
 80094a0:	080094f5 	.word	0x080094f5
 80094a4:	080094fd 	.word	0x080094fd
 80094a8:	080094f5 	.word	0x080094f5
 80094ac:	080094f5 	.word	0x080094f5
 80094b0:	080094f5 	.word	0x080094f5
 80094b4:	080094f5 	.word	0x080094f5
 80094b8:	080094f5 	.word	0x080094f5
 80094bc:	080094f5 	.word	0x080094f5
 80094c0:	080094f5 	.word	0x080094f5
 80094c4:	080094fd 	.word	0x080094fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094cc:	3308      	adds	r3, #8
 80094ce:	2101      	movs	r1, #1
 80094d0:	4618      	mov	r0, r3
 80094d2:	f001 fe95 	bl	800b200 <RCCEx_PLL2_Config>
 80094d6:	4603      	mov	r3, r0
 80094d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80094dc:	e00f      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e2:	3328      	adds	r3, #40	; 0x28
 80094e4:	2101      	movs	r1, #1
 80094e6:	4618      	mov	r0, r3
 80094e8:	f001 ff3c 	bl	800b364 <RCCEx_PLL3_Config>
 80094ec:	4603      	mov	r3, r0
 80094ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80094f2:	e004      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094fa:	e000      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80094fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10a      	bne.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009506:	4bbf      	ldr	r3, [pc, #764]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800950e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009514:	4abb      	ldr	r2, [pc, #748]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009516:	430b      	orrs	r3, r1
 8009518:	6553      	str	r3, [r2, #84]	; 0x54
 800951a:	e003      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800951c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009520:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	f002 0302 	and.w	r3, r2, #2
 8009530:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009534:	2300      	movs	r3, #0
 8009536:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800953a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800953e:	460b      	mov	r3, r1
 8009540:	4313      	orrs	r3, r2
 8009542:	d041      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800954a:	2b05      	cmp	r3, #5
 800954c:	d824      	bhi.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800954e:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009554:	080095a1 	.word	0x080095a1
 8009558:	0800956d 	.word	0x0800956d
 800955c:	08009583 	.word	0x08009583
 8009560:	080095a1 	.word	0x080095a1
 8009564:	080095a1 	.word	0x080095a1
 8009568:	080095a1 	.word	0x080095a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800956c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009570:	3308      	adds	r3, #8
 8009572:	2101      	movs	r1, #1
 8009574:	4618      	mov	r0, r3
 8009576:	f001 fe43 	bl	800b200 <RCCEx_PLL2_Config>
 800957a:	4603      	mov	r3, r0
 800957c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009580:	e00f      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009586:	3328      	adds	r3, #40	; 0x28
 8009588:	2101      	movs	r1, #1
 800958a:	4618      	mov	r0, r3
 800958c:	f001 feea 	bl	800b364 <RCCEx_PLL3_Config>
 8009590:	4603      	mov	r3, r0
 8009592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009596:	e004      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800959e:	e000      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80095a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10a      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095aa:	4b96      	ldr	r3, [pc, #600]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ae:	f023 0107 	bic.w	r1, r3, #7
 80095b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095b8:	4a92      	ldr	r2, [pc, #584]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095ba:	430b      	orrs	r3, r1
 80095bc:	6553      	str	r3, [r2, #84]	; 0x54
 80095be:	e003      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f002 0304 	and.w	r3, r2, #4
 80095d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095d8:	2300      	movs	r3, #0
 80095da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4313      	orrs	r3, r2
 80095e6:	d044      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80095e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095f0:	2b05      	cmp	r3, #5
 80095f2:	d825      	bhi.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80095f4:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80095f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fa:	bf00      	nop
 80095fc:	08009649 	.word	0x08009649
 8009600:	08009615 	.word	0x08009615
 8009604:	0800962b 	.word	0x0800962b
 8009608:	08009649 	.word	0x08009649
 800960c:	08009649 	.word	0x08009649
 8009610:	08009649 	.word	0x08009649
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009618:	3308      	adds	r3, #8
 800961a:	2101      	movs	r1, #1
 800961c:	4618      	mov	r0, r3
 800961e:	f001 fdef 	bl	800b200 <RCCEx_PLL2_Config>
 8009622:	4603      	mov	r3, r0
 8009624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009628:	e00f      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800962a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800962e:	3328      	adds	r3, #40	; 0x28
 8009630:	2101      	movs	r1, #1
 8009632:	4618      	mov	r0, r3
 8009634:	f001 fe96 	bl	800b364 <RCCEx_PLL3_Config>
 8009638:	4603      	mov	r3, r0
 800963a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800963e:	e004      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009646:	e000      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800964a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10b      	bne.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009652:	4b6c      	ldr	r3, [pc, #432]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009656:	f023 0107 	bic.w	r1, r3, #7
 800965a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800965e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009662:	4a68      	ldr	r2, [pc, #416]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009664:	430b      	orrs	r3, r1
 8009666:	6593      	str	r3, [r2, #88]	; 0x58
 8009668:	e003      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800966e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	f002 0320 	and.w	r3, r2, #32
 800967e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009682:	2300      	movs	r3, #0
 8009684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009688:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800968c:	460b      	mov	r3, r1
 800968e:	4313      	orrs	r3, r2
 8009690:	d055      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800969a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800969e:	d033      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80096a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096a4:	d82c      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096aa:	d02f      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80096ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b0:	d826      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096b6:	d02b      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80096b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096bc:	d820      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096c2:	d012      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80096c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096c8:	d81a      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d022      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80096ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096d2:	d115      	bne.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d8:	3308      	adds	r3, #8
 80096da:	2100      	movs	r1, #0
 80096dc:	4618      	mov	r0, r3
 80096de:	f001 fd8f 	bl	800b200 <RCCEx_PLL2_Config>
 80096e2:	4603      	mov	r3, r0
 80096e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80096e8:	e015      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ee:	3328      	adds	r3, #40	; 0x28
 80096f0:	2102      	movs	r1, #2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f001 fe36 	bl	800b364 <RCCEx_PLL3_Config>
 80096f8:	4603      	mov	r3, r0
 80096fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80096fe:	e00a      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009706:	e006      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009708:	bf00      	nop
 800970a:	e004      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800970c:	bf00      	nop
 800970e:	e002      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009710:	bf00      	nop
 8009712:	e000      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10b      	bne.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800971e:	4b39      	ldr	r3, [pc, #228]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009722:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800972e:	4a35      	ldr	r2, [pc, #212]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009730:	430b      	orrs	r3, r1
 8009732:	6553      	str	r3, [r2, #84]	; 0x54
 8009734:	e003      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800973a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800973e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800974a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800974e:	2300      	movs	r3, #0
 8009750:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009754:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009758:	460b      	mov	r3, r1
 800975a:	4313      	orrs	r3, r2
 800975c:	d058      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800975e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009762:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009766:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800976a:	d033      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800976c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009770:	d82c      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009776:	d02f      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800977c:	d826      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800977e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009782:	d02b      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009784:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009788:	d820      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800978a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800978e:	d012      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009794:	d81a      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009796:	2b00      	cmp	r3, #0
 8009798:	d022      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800979a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800979e:	d115      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a4:	3308      	adds	r3, #8
 80097a6:	2100      	movs	r1, #0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f001 fd29 	bl	800b200 <RCCEx_PLL2_Config>
 80097ae:	4603      	mov	r3, r0
 80097b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097b4:	e015      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ba:	3328      	adds	r3, #40	; 0x28
 80097bc:	2102      	movs	r1, #2
 80097be:	4618      	mov	r0, r3
 80097c0:	f001 fdd0 	bl	800b364 <RCCEx_PLL3_Config>
 80097c4:	4603      	mov	r3, r0
 80097c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097ca:	e00a      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097d2:	e006      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097d4:	bf00      	nop
 80097d6:	e004      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097d8:	bf00      	nop
 80097da:	e002      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097dc:	bf00      	nop
 80097de:	e000      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10e      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097ea:	4b06      	ldr	r3, [pc, #24]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ee:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80097f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097fa:	4a02      	ldr	r2, [pc, #8]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097fc:	430b      	orrs	r3, r1
 80097fe:	6593      	str	r3, [r2, #88]	; 0x58
 8009800:	e006      	b.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009802:	bf00      	nop
 8009804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800980c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800981c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009820:	2300      	movs	r3, #0
 8009822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009826:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800982a:	460b      	mov	r3, r1
 800982c:	4313      	orrs	r3, r2
 800982e:	d055      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009834:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009838:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800983c:	d033      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800983e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009842:	d82c      	bhi.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009848:	d02f      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800984a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800984e:	d826      	bhi.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009850:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009854:	d02b      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009856:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800985a:	d820      	bhi.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800985c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009860:	d012      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009862:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009866:	d81a      	bhi.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009868:	2b00      	cmp	r3, #0
 800986a:	d022      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800986c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009870:	d115      	bne.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009876:	3308      	adds	r3, #8
 8009878:	2100      	movs	r1, #0
 800987a:	4618      	mov	r0, r3
 800987c:	f001 fcc0 	bl	800b200 <RCCEx_PLL2_Config>
 8009880:	4603      	mov	r3, r0
 8009882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009886:	e015      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988c:	3328      	adds	r3, #40	; 0x28
 800988e:	2102      	movs	r1, #2
 8009890:	4618      	mov	r0, r3
 8009892:	f001 fd67 	bl	800b364 <RCCEx_PLL3_Config>
 8009896:	4603      	mov	r3, r0
 8009898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800989c:	e00a      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098a4:	e006      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098a6:	bf00      	nop
 80098a8:	e004      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098aa:	bf00      	nop
 80098ac:	e002      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098ae:	bf00      	nop
 80098b0:	e000      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10b      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80098bc:	4ba1      	ldr	r3, [pc, #644]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098c0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80098c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80098cc:	4a9d      	ldr	r2, [pc, #628]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098ce:	430b      	orrs	r3, r1
 80098d0:	6593      	str	r3, [r2, #88]	; 0x58
 80098d2:	e003      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80098dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f002 0308 	and.w	r3, r2, #8
 80098e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80098f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80098f6:	460b      	mov	r3, r1
 80098f8:	4313      	orrs	r3, r2
 80098fa:	d01e      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80098fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009908:	d10c      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800990a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990e:	3328      	adds	r3, #40	; 0x28
 8009910:	2102      	movs	r1, #2
 8009912:	4618      	mov	r0, r3
 8009914:	f001 fd26 	bl	800b364 <RCCEx_PLL3_Config>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009924:	4b87      	ldr	r3, [pc, #540]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009928:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800992c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009934:	4a83      	ldr	r2, [pc, #524]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009936:	430b      	orrs	r3, r1
 8009938:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800993a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f002 0310 	and.w	r3, r2, #16
 8009946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800994a:	2300      	movs	r3, #0
 800994c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009950:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009954:	460b      	mov	r3, r1
 8009956:	4313      	orrs	r3, r2
 8009958:	d01e      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800995a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009966:	d10c      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996c:	3328      	adds	r3, #40	; 0x28
 800996e:	2102      	movs	r1, #2
 8009970:	4618      	mov	r0, r3
 8009972:	f001 fcf7 	bl	800b364 <RCCEx_PLL3_Config>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009982:	4b70      	ldr	r3, [pc, #448]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009986:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800998e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009992:	4a6c      	ldr	r2, [pc, #432]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009994:	430b      	orrs	r3, r1
 8009996:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80099a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099a8:	2300      	movs	r3, #0
 80099aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80099b2:	460b      	mov	r3, r1
 80099b4:	4313      	orrs	r3, r2
 80099b6:	d03e      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80099b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099c4:	d022      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80099c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099ca:	d81b      	bhi.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80099d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099d4:	d00b      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80099d6:	e015      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099dc:	3308      	adds	r3, #8
 80099de:	2100      	movs	r1, #0
 80099e0:	4618      	mov	r0, r3
 80099e2:	f001 fc0d 	bl	800b200 <RCCEx_PLL2_Config>
 80099e6:	4603      	mov	r3, r0
 80099e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80099ec:	e00f      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f2:	3328      	adds	r3, #40	; 0x28
 80099f4:	2102      	movs	r1, #2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f001 fcb4 	bl	800b364 <RCCEx_PLL3_Config>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a02:	e004      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a0a:	e000      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10b      	bne.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a16:	4b4b      	ldr	r3, [pc, #300]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a1a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a26:	4a47      	ldr	r2, [pc, #284]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a28:	430b      	orrs	r3, r1
 8009a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8009a2c:	e003      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009a42:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a44:	2300      	movs	r3, #0
 8009a46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	d03b      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a5e:	d01f      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009a60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a64:	d818      	bhi.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a6a:	d003      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a70:	d007      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009a72:	e011      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a74:	4b33      	ldr	r3, [pc, #204]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	4a32      	ldr	r2, [pc, #200]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a80:	e00f      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a86:	3328      	adds	r3, #40	; 0x28
 8009a88:	2101      	movs	r1, #1
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f001 fc6a 	bl	800b364 <RCCEx_PLL3_Config>
 8009a90:	4603      	mov	r3, r0
 8009a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a96:	e004      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a9e:	e000      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10b      	bne.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009aaa:	4b26      	ldr	r3, [pc, #152]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aba:	4a22      	ldr	r2, [pc, #136]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009abc:	430b      	orrs	r3, r1
 8009abe:	6553      	str	r3, [r2, #84]	; 0x54
 8009ac0:	e003      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ac6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009ad6:	673b      	str	r3, [r7, #112]	; 0x70
 8009ad8:	2300      	movs	r3, #0
 8009ada:	677b      	str	r3, [r7, #116]	; 0x74
 8009adc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	d034      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d003      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af4:	d007      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009af6:	e011      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009af8:	4b12      	ldr	r3, [pc, #72]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afc:	4a11      	ldr	r2, [pc, #68]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b04:	e00e      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	2102      	movs	r1, #2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f001 fb76 	bl	800b200 <RCCEx_PLL2_Config>
 8009b14:	4603      	mov	r3, r0
 8009b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b1a:	e003      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10d      	bne.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b2c:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b3a:	4a02      	ldr	r2, [pc, #8]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b40:	e006      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009b42:	bf00      	nop
 8009b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009b5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b5e:	2300      	movs	r3, #0
 8009b60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b62:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009b66:	460b      	mov	r3, r1
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	d00c      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b70:	3328      	adds	r3, #40	; 0x28
 8009b72:	2102      	movs	r1, #2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f001 fbf5 	bl	800b364 <RCCEx_PLL3_Config>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009b92:	663b      	str	r3, [r7, #96]	; 0x60
 8009b94:	2300      	movs	r3, #0
 8009b96:	667b      	str	r3, [r7, #100]	; 0x64
 8009b98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	d038      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bae:	d018      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bb4:	d811      	bhi.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bba:	d014      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bc0:	d80b      	bhi.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d011      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bca:	d106      	bne.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bcc:	4bc3      	ldr	r3, [pc, #780]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	4ac2      	ldr	r2, [pc, #776]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009bd8:	e008      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009be0:	e004      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009be2:	bf00      	nop
 8009be4:	e002      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009be6:	bf00      	nop
 8009be8:	e000      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10b      	bne.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009bf4:	4bb9      	ldr	r3, [pc, #740]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c04:	4ab5      	ldr	r2, [pc, #724]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c06:	430b      	orrs	r3, r1
 8009c08:	6553      	str	r3, [r2, #84]	; 0x54
 8009c0a:	e003      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009c20:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c22:	2300      	movs	r3, #0
 8009c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	d009      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c30:	4baa      	ldr	r3, [pc, #680]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c3e:	4aa7      	ldr	r2, [pc, #668]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c40:	430b      	orrs	r3, r1
 8009c42:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009c50:	653b      	str	r3, [r7, #80]	; 0x50
 8009c52:	2300      	movs	r3, #0
 8009c54:	657b      	str	r3, [r7, #84]	; 0x54
 8009c56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	d00a      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009c60:	4b9e      	ldr	r3, [pc, #632]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009c70:	4a9a      	ldr	r2, [pc, #616]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c72:	430b      	orrs	r3, r1
 8009c74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c84:	2300      	movs	r3, #0
 8009c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	d009      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c92:	4b92      	ldr	r3, [pc, #584]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c96:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ca0:	4a8e      	ldr	r2, [pc, #568]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ca2:	430b      	orrs	r3, r1
 8009ca4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8009cb8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	d00e      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009cc2:	4b86      	ldr	r3, [pc, #536]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	4a85      	ldr	r2, [pc, #532]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ccc:	6113      	str	r3, [r2, #16]
 8009cce:	4b83      	ldr	r3, [pc, #524]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cd0:	6919      	ldr	r1, [r3, #16]
 8009cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009cda:	4a80      	ldr	r2, [pc, #512]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cdc:	430b      	orrs	r3, r1
 8009cde:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cee:	2300      	movs	r3, #0
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	d009      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009cfc:	4b77      	ldr	r3, [pc, #476]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d00:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0a:	4a74      	ldr	r2, [pc, #464]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d0c:	430b      	orrs	r3, r1
 8009d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d18:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8009d1e:	2300      	movs	r3, #0
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
 8009d22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009d26:	460b      	mov	r3, r1
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	d00a      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d2c:	4b6b      	ldr	r3, [pc, #428]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d30:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d3c:	4a67      	ldr	r2, [pc, #412]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d3e:	430b      	orrs	r3, r1
 8009d40:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d4e:	f003 0301 	and.w	r3, r3, #1
 8009d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	d011      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d62:	3308      	adds	r3, #8
 8009d64:	2100      	movs	r1, #0
 8009d66:	4618      	mov	r0, r3
 8009d68:	f001 fa4a 	bl	800b200 <RCCEx_PLL2_Config>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	6239      	str	r1, [r7, #32]
 8009d8e:	f003 0302 	and.w	r3, r3, #2
 8009d92:	627b      	str	r3, [r7, #36]	; 0x24
 8009d94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	d011      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da2:	3308      	adds	r3, #8
 8009da4:	2101      	movs	r1, #1
 8009da6:	4618      	mov	r0, r3
 8009da8:	f001 fa2a 	bl	800b200 <RCCEx_PLL2_Config>
 8009dac:	4603      	mov	r3, r0
 8009dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	2100      	movs	r1, #0
 8009dcc:	61b9      	str	r1, [r7, #24]
 8009dce:	f003 0304 	and.w	r3, r3, #4
 8009dd2:	61fb      	str	r3, [r7, #28]
 8009dd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	d011      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de2:	3308      	adds	r3, #8
 8009de4:	2102      	movs	r1, #2
 8009de6:	4618      	mov	r0, r3
 8009de8:	f001 fa0a 	bl	800b200 <RCCEx_PLL2_Config>
 8009dec:	4603      	mov	r3, r0
 8009dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	6139      	str	r1, [r7, #16]
 8009e0e:	f003 0308 	and.w	r3, r3, #8
 8009e12:	617b      	str	r3, [r7, #20]
 8009e14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	d011      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e22:	3328      	adds	r3, #40	; 0x28
 8009e24:	2100      	movs	r1, #0
 8009e26:	4618      	mov	r0, r3
 8009e28:	f001 fa9c 	bl	800b364 <RCCEx_PLL3_Config>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d003      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	f003 0310 	and.w	r3, r3, #16
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	d011      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e62:	3328      	adds	r3, #40	; 0x28
 8009e64:	2101      	movs	r1, #1
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 fa7c 	bl	800b364 <RCCEx_PLL3_Config>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	6039      	str	r1, [r7, #0]
 8009e8e:	f003 0320 	and.w	r3, r3, #32
 8009e92:	607b      	str	r3, [r7, #4]
 8009e94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	d011      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea2:	3328      	adds	r3, #40	; 0x28
 8009ea4:	2102      	movs	r1, #2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f001 fa5c 	bl	800b364 <RCCEx_PLL3_Config>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ebe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009ec2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d101      	bne.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e000      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009edc:	58024400 	.word	0x58024400

08009ee0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b090      	sub	sp, #64	; 0x40
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eee:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009ef2:	430b      	orrs	r3, r1
 8009ef4:	f040 8094 	bne.w	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009ef8:	4b9e      	ldr	r3, [pc, #632]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009efc:	f003 0307 	and.w	r3, r3, #7
 8009f00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	f200 8087 	bhi.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009f0a:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f25 	.word	0x08009f25
 8009f14:	08009f4d 	.word	0x08009f4d
 8009f18:	08009f75 	.word	0x08009f75
 8009f1c:	0800a011 	.word	0x0800a011
 8009f20:	08009f9d 	.word	0x08009f9d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f24:	4b93      	ldr	r3, [pc, #588]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f30:	d108      	bne.n	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f36:	4618      	mov	r0, r3
 8009f38:	f001 f810 	bl	800af5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f40:	f000 bd45 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f48:	f000 bd41 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f4c:	4b89      	ldr	r3, [pc, #548]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f58:	d108      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f5a:	f107 0318 	add.w	r3, r7, #24
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 fd54 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f68:	f000 bd31 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f70:	f000 bd2d 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f74:	4b7f      	ldr	r3, [pc, #508]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f80:	d108      	bne.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f82:	f107 030c 	add.w	r3, r7, #12
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 fe94 	bl	800acb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f90:	f000 bd1d 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f94:	2300      	movs	r3, #0
 8009f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f98:	f000 bd19 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f9c:	4b75      	ldr	r3, [pc, #468]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fa4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fa6:	4b73      	ldr	r3, [pc, #460]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0304 	and.w	r3, r3, #4
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d10c      	bne.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d109      	bne.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fb8:	4b6e      	ldr	r3, [pc, #440]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	08db      	lsrs	r3, r3, #3
 8009fbe:	f003 0303 	and.w	r3, r3, #3
 8009fc2:	4a6d      	ldr	r2, [pc, #436]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fca:	e01f      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fcc:	4b69      	ldr	r3, [pc, #420]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd8:	d106      	bne.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fe0:	d102      	bne.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fe2:	4b66      	ldr	r3, [pc, #408]	; (800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fe6:	e011      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fe8:	4b62      	ldr	r3, [pc, #392]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ff4:	d106      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ffc:	d102      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ffe:	4b60      	ldr	r3, [pc, #384]	; (800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a000:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a002:	e003      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a008:	f000 bce1 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a00c:	f000 bcdf 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a010:	4b5c      	ldr	r3, [pc, #368]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a014:	f000 bcdb 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a018:	2300      	movs	r3, #0
 800a01a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a01c:	f000 bcd7 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a020:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a024:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a028:	430b      	orrs	r3, r1
 800a02a:	f040 80ad 	bne.w	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a02e:	4b51      	ldr	r3, [pc, #324]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a032:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a036:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a03e:	d056      	beq.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a046:	f200 8090 	bhi.w	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	2bc0      	cmp	r3, #192	; 0xc0
 800a04e:	f000 8088 	beq.w	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a054:	2bc0      	cmp	r3, #192	; 0xc0
 800a056:	f200 8088 	bhi.w	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	2b80      	cmp	r3, #128	; 0x80
 800a05e:	d032      	beq.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	2b80      	cmp	r3, #128	; 0x80
 800a064:	f200 8081 	bhi.w	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	2b40      	cmp	r3, #64	; 0x40
 800a072:	d014      	beq.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a074:	e079      	b.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a076:	4b3f      	ldr	r3, [pc, #252]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a07e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a082:	d108      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 ff67 	bl	800af5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a092:	f000 bc9c 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a09a:	f000 bc98 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a09e:	4b35      	ldr	r3, [pc, #212]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0aa:	d108      	bne.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ac:	f107 0318 	add.w	r3, r7, #24
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fcab 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ba:	f000 bc88 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0c2:	f000 bc84 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0c6:	4b2b      	ldr	r3, [pc, #172]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0d2:	d108      	bne.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0d4:	f107 030c 	add.w	r3, r7, #12
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 fdeb 	bl	800acb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0e2:	f000 bc74 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ea:	f000 bc70 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0ee:	4b21      	ldr	r3, [pc, #132]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0f8:	4b1e      	ldr	r3, [pc, #120]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0304 	and.w	r3, r3, #4
 800a100:	2b04      	cmp	r3, #4
 800a102:	d10c      	bne.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a106:	2b00      	cmp	r3, #0
 800a108:	d109      	bne.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a10a:	4b1a      	ldr	r3, [pc, #104]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	08db      	lsrs	r3, r3, #3
 800a110:	f003 0303 	and.w	r3, r3, #3
 800a114:	4a18      	ldr	r2, [pc, #96]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a116:	fa22 f303 	lsr.w	r3, r2, r3
 800a11a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a11c:	e01f      	b.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a11e:	4b15      	ldr	r3, [pc, #84]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a12a:	d106      	bne.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a132:	d102      	bne.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a134:	4b11      	ldr	r3, [pc, #68]	; (800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a136:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a138:	e011      	b.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a13a:	4b0e      	ldr	r3, [pc, #56]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a146:	d106      	bne.n	800a156 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a14e:	d102      	bne.n	800a156 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a150:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a154:	e003      	b.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a156:	2300      	movs	r3, #0
 800a158:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a15a:	f000 bc38 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a15e:	f000 bc36 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a162:	4b08      	ldr	r3, [pc, #32]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a166:	f000 bc32 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a16e:	f000 bc2e 	b.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a172:	bf00      	nop
 800a174:	58024400 	.word	0x58024400
 800a178:	03d09000 	.word	0x03d09000
 800a17c:	003d0900 	.word	0x003d0900
 800a180:	017d7840 	.word	0x017d7840
 800a184:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a18c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a190:	430b      	orrs	r3, r1
 800a192:	f040 809c 	bne.w	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a196:	4b9e      	ldr	r3, [pc, #632]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a19a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a19e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1a6:	d054      	beq.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1ae:	f200 808b 	bhi.w	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a1b8:	f000 8083 	beq.w	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a1c2:	f200 8081 	bhi.w	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1cc:	d02f      	beq.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1d4:	d878      	bhi.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d004      	beq.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1e2:	d012      	beq.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a1e4:	e070      	b.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1e6:	4b8a      	ldr	r3, [pc, #552]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1f2:	d107      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 feaf 	bl	800af5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a202:	e3e4      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a208:	e3e1      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a20a:	4b81      	ldr	r3, [pc, #516]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a216:	d107      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a218:	f107 0318 	add.w	r3, r7, #24
 800a21c:	4618      	mov	r0, r3
 800a21e:	f000 fbf5 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a226:	e3d2      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a22c:	e3cf      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a22e:	4b78      	ldr	r3, [pc, #480]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a23a:	d107      	bne.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a23c:	f107 030c 	add.w	r3, r7, #12
 800a240:	4618      	mov	r0, r3
 800a242:	f000 fd37 	bl	800acb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a24a:	e3c0      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a250:	e3bd      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a252:	4b6f      	ldr	r3, [pc, #444]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a25a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a25c:	4b6c      	ldr	r3, [pc, #432]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b04      	cmp	r3, #4
 800a266:	d10c      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a26e:	4b68      	ldr	r3, [pc, #416]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	08db      	lsrs	r3, r3, #3
 800a274:	f003 0303 	and.w	r3, r3, #3
 800a278:	4a66      	ldr	r2, [pc, #408]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a27a:	fa22 f303 	lsr.w	r3, r2, r3
 800a27e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a280:	e01e      	b.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a282:	4b63      	ldr	r3, [pc, #396]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a28e:	d106      	bne.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a296:	d102      	bne.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a298:	4b5f      	ldr	r3, [pc, #380]	; (800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a29a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a29c:	e010      	b.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a29e:	4b5c      	ldr	r3, [pc, #368]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2aa:	d106      	bne.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2b2:	d102      	bne.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2b4:	4b59      	ldr	r3, [pc, #356]	; (800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2b8:	e002      	b.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a2be:	e386      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2c0:	e385      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2c2:	4b57      	ldr	r3, [pc, #348]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2c6:	e382      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2cc:	e37f      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a2ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2d2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a2d6:	430b      	orrs	r3, r1
 800a2d8:	f040 80a7 	bne.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a2dc:	4b4c      	ldr	r3, [pc, #304]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2e0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a2e4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2ec:	d055      	beq.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2f4:	f200 8096 	bhi.w	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2fe:	f000 8084 	beq.w	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a308:	f200 808c 	bhi.w	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a312:	d030      	beq.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a31a:	f200 8083 	bhi.w	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a326:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a32a:	d012      	beq.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a32c:	e07a      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a32e:	4b38      	ldr	r3, [pc, #224]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a33a:	d107      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a33c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a340:	4618      	mov	r0, r3
 800a342:	f000 fe0b 	bl	800af5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a348:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a34a:	e340      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a34c:	2300      	movs	r3, #0
 800a34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a350:	e33d      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a352:	4b2f      	ldr	r3, [pc, #188]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a35a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a35e:	d107      	bne.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a360:	f107 0318 	add.w	r3, r7, #24
 800a364:	4618      	mov	r0, r3
 800a366:	f000 fb51 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a36e:	e32e      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a370:	2300      	movs	r3, #0
 800a372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a374:	e32b      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a376:	4b26      	ldr	r3, [pc, #152]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a37e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a382:	d107      	bne.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a384:	f107 030c 	add.w	r3, r7, #12
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 fc93 	bl	800acb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a392:	e31c      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a398:	e319      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a39a:	4b1d      	ldr	r3, [pc, #116]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a39c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a39e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3a4:	4b1a      	ldr	r3, [pc, #104]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	d10c      	bne.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d109      	bne.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3b6:	4b16      	ldr	r3, [pc, #88]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	08db      	lsrs	r3, r3, #3
 800a3bc:	f003 0303 	and.w	r3, r3, #3
 800a3c0:	4a14      	ldr	r2, [pc, #80]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c8:	e01e      	b.n	800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3ca:	4b11      	ldr	r3, [pc, #68]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d6:	d106      	bne.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3de:	d102      	bne.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3e0:	4b0d      	ldr	r3, [pc, #52]	; (800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3e4:	e010      	b.n	800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3e6:	4b0a      	ldr	r3, [pc, #40]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3f2:	d106      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3fa:	d102      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3fc:	4b07      	ldr	r3, [pc, #28]	; (800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a400:	e002      	b.n	800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a402:	2300      	movs	r3, #0
 800a404:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a406:	e2e2      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a408:	e2e1      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a40a:	4b05      	ldr	r3, [pc, #20]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a40e:	e2de      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a410:	58024400 	.word	0x58024400
 800a414:	03d09000 	.word	0x03d09000
 800a418:	003d0900 	.word	0x003d0900
 800a41c:	017d7840 	.word	0x017d7840
 800a420:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a428:	e2d1      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a42a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a42e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a432:	430b      	orrs	r3, r1
 800a434:	f040 809c 	bne.w	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a438:	4b93      	ldr	r3, [pc, #588]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a43a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a43c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a440:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a448:	d054      	beq.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a450:	f200 808b 	bhi.w	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a45a:	f000 8083 	beq.w	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a460:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a464:	f200 8081 	bhi.w	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a46e:	d02f      	beq.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a476:	d878      	bhi.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d004      	beq.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a484:	d012      	beq.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a486:	e070      	b.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a488:	4b7f      	ldr	r3, [pc, #508]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a494:	d107      	bne.n	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fd5e 	bl	800af5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a4:	e293      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4aa:	e290      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4ac:	4b76      	ldr	r3, [pc, #472]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4b8:	d107      	bne.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4ba:	f107 0318 	add.w	r3, r7, #24
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 faa4 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4c8:	e281      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4ce:	e27e      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4d0:	4b6d      	ldr	r3, [pc, #436]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4dc:	d107      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4de:	f107 030c 	add.w	r3, r7, #12
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 fbe6 	bl	800acb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ec:	e26f      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4f2:	e26c      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4f4:	4b64      	ldr	r3, [pc, #400]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4fe:	4b62      	ldr	r3, [pc, #392]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0304 	and.w	r3, r3, #4
 800a506:	2b04      	cmp	r3, #4
 800a508:	d10c      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d109      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a510:	4b5d      	ldr	r3, [pc, #372]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	08db      	lsrs	r3, r3, #3
 800a516:	f003 0303 	and.w	r3, r3, #3
 800a51a:	4a5c      	ldr	r2, [pc, #368]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a51c:	fa22 f303 	lsr.w	r3, r2, r3
 800a520:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a522:	e01e      	b.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a524:	4b58      	ldr	r3, [pc, #352]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a52c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a530:	d106      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a538:	d102      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a53a:	4b55      	ldr	r3, [pc, #340]	; (800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a53c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a53e:	e010      	b.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a540:	4b51      	ldr	r3, [pc, #324]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a54c:	d106      	bne.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a554:	d102      	bne.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a556:	4b4f      	ldr	r3, [pc, #316]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a55a:	e002      	b.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a55c:	2300      	movs	r3, #0
 800a55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a560:	e235      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a562:	e234      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a564:	4b4c      	ldr	r3, [pc, #304]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a568:	e231      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a56e:	e22e      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a570:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a574:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a578:	430b      	orrs	r3, r1
 800a57a:	f040 808f 	bne.w	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a57e:	4b42      	ldr	r3, [pc, #264]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a582:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a586:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a58e:	d06b      	beq.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a596:	d874      	bhi.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a59e:	d056      	beq.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5a6:	d86c      	bhi.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a5ae:	d03b      	beq.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a5b6:	d864      	bhi.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5be:	d021      	beq.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5c6:	d85c      	bhi.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d004      	beq.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d4:	d004      	beq.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a5d6:	e054      	b.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a5d8:	f7fe fa0a 	bl	80089f0 <HAL_RCC_GetPCLK1Freq>
 800a5dc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5de:	e1f6      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5e0:	4b29      	ldr	r3, [pc, #164]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5ec:	d107      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5ee:	f107 0318 	add.w	r3, r7, #24
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 fa0a 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5fc:	e1e7      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a602:	e1e4      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a604:	4b20      	ldr	r3, [pc, #128]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a60c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a610:	d107      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a612:	f107 030c 	add.w	r3, r7, #12
 800a616:	4618      	mov	r0, r3
 800a618:	f000 fb4c 	bl	800acb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a620:	e1d5      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a626:	e1d2      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a628:	4b17      	ldr	r3, [pc, #92]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b04      	cmp	r3, #4
 800a632:	d109      	bne.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a634:	4b14      	ldr	r3, [pc, #80]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	08db      	lsrs	r3, r3, #3
 800a63a:	f003 0303 	and.w	r3, r3, #3
 800a63e:	4a13      	ldr	r2, [pc, #76]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a640:	fa22 f303 	lsr.w	r3, r2, r3
 800a644:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a646:	e1c2      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a648:	2300      	movs	r3, #0
 800a64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a64c:	e1bf      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a64e:	4b0e      	ldr	r3, [pc, #56]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a65a:	d102      	bne.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a65c:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a660:	e1b5      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a666:	e1b2      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a668:	4b07      	ldr	r3, [pc, #28]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a674:	d102      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a676:	4b07      	ldr	r3, [pc, #28]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a67a:	e1a8      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a680:	e1a5      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a686:	e1a2      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a688:	58024400 	.word	0x58024400
 800a68c:	03d09000 	.word	0x03d09000
 800a690:	003d0900 	.word	0x003d0900
 800a694:	017d7840 	.word	0x017d7840
 800a698:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a69c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6a0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a6a4:	430b      	orrs	r3, r1
 800a6a6:	d173      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a6a8:	4b9c      	ldr	r3, [pc, #624]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a6b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6b8:	d02f      	beq.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6c0:	d863      	bhi.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d004      	beq.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6ce:	d012      	beq.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a6d0:	e05b      	b.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6d2:	4b92      	ldr	r3, [pc, #584]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6de:	d107      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e0:	f107 0318 	add.w	r3, r7, #24
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 f991 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ee:	e16e      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6f4:	e16b      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6f6:	4b89      	ldr	r3, [pc, #548]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a702:	d107      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a704:	f107 030c 	add.w	r3, r7, #12
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fad3 	bl	800acb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a712:	e15c      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a718:	e159      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a71a:	4b80      	ldr	r3, [pc, #512]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a71e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a722:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a724:	4b7d      	ldr	r3, [pc, #500]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 0304 	and.w	r3, r3, #4
 800a72c:	2b04      	cmp	r3, #4
 800a72e:	d10c      	bne.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a732:	2b00      	cmp	r3, #0
 800a734:	d109      	bne.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a736:	4b79      	ldr	r3, [pc, #484]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	08db      	lsrs	r3, r3, #3
 800a73c:	f003 0303 	and.w	r3, r3, #3
 800a740:	4a77      	ldr	r2, [pc, #476]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a742:	fa22 f303 	lsr.w	r3, r2, r3
 800a746:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a748:	e01e      	b.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a74a:	4b74      	ldr	r3, [pc, #464]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a756:	d106      	bne.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a75a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a75e:	d102      	bne.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a760:	4b70      	ldr	r3, [pc, #448]	; (800a924 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a764:	e010      	b.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a766:	4b6d      	ldr	r3, [pc, #436]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a76e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a772:	d106      	bne.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a77a:	d102      	bne.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a77c:	4b6a      	ldr	r3, [pc, #424]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a780:	e002      	b.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a786:	e122      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a788:	e121      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a78e:	e11e      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a794:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a798:	430b      	orrs	r3, r1
 800a79a:	d133      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a79c:	4b5f      	ldr	r3, [pc, #380]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a79e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d004      	beq.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7b2:	d012      	beq.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a7b4:	e023      	b.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7b6:	4b59      	ldr	r3, [pc, #356]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7c2:	d107      	bne.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 fbc7 	bl	800af5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d2:	e0fc      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7d8:	e0f9      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7da:	4b50      	ldr	r3, [pc, #320]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7e6:	d107      	bne.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7e8:	f107 0318 	add.w	r3, r7, #24
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f000 f90d 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7f6:	e0ea      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7fc:	e0e7      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a802:	e0e4      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a804:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a808:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a80c:	430b      	orrs	r3, r1
 800a80e:	f040 808d 	bne.w	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a812:	4b42      	ldr	r3, [pc, #264]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a816:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a81a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a822:	d06b      	beq.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a82a:	d874      	bhi.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a832:	d056      	beq.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83a:	d86c      	bhi.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a842:	d03b      	beq.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a846:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a84a:	d864      	bhi.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a852:	d021      	beq.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a85a:	d85c      	bhi.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d004      	beq.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a868:	d004      	beq.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a86a:	e054      	b.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a86c:	f000 f8b8 	bl	800a9e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a870:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a872:	e0ac      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a874:	4b29      	ldr	r3, [pc, #164]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a87c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a880:	d107      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a882:	f107 0318 	add.w	r3, r7, #24
 800a886:	4618      	mov	r0, r3
 800a888:	f000 f8c0 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a890:	e09d      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a896:	e09a      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a898:	4b20      	ldr	r3, [pc, #128]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8a4:	d107      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8a6:	f107 030c 	add.w	r3, r7, #12
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fa02 	bl	800acb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b4:	e08b      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ba:	e088      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8bc:	4b17      	ldr	r3, [pc, #92]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0304 	and.w	r3, r3, #4
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d109      	bne.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8c8:	4b14      	ldr	r3, [pc, #80]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	08db      	lsrs	r3, r3, #3
 800a8ce:	f003 0303 	and.w	r3, r3, #3
 800a8d2:	4a13      	ldr	r2, [pc, #76]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a8d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8da:	e078      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e0:	e075      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a8e2:	4b0e      	ldr	r3, [pc, #56]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ee:	d102      	bne.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a8f0:	4b0c      	ldr	r3, [pc, #48]	; (800a924 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f4:	e06b      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8fa:	e068      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8fc:	4b07      	ldr	r3, [pc, #28]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a908:	d102      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a90a:	4b07      	ldr	r3, [pc, #28]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a90c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a90e:	e05e      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a914:	e05b      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a91a:	e058      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a91c:	58024400 	.word	0x58024400
 800a920:	03d09000 	.word	0x03d09000
 800a924:	003d0900 	.word	0x003d0900
 800a928:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a92c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a930:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a934:	430b      	orrs	r3, r1
 800a936:	d148      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a938:	4b27      	ldr	r3, [pc, #156]	; (800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a93c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a940:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a948:	d02a      	beq.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a950:	d838      	bhi.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a95e:	d00d      	beq.n	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a960:	e030      	b.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a962:	4b1d      	ldr	r3, [pc, #116]	; (800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a96e:	d102      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a970:	4b1a      	ldr	r3, [pc, #104]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a972:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a974:	e02b      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a976:	2300      	movs	r3, #0
 800a978:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a97a:	e028      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a97c:	4b16      	ldr	r3, [pc, #88]	; (800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a984:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a988:	d107      	bne.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a98a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 fae4 	bl	800af5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a998:	e019      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a99e:	e016      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9a0:	4b0d      	ldr	r3, [pc, #52]	; (800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9ac:	d107      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ae:	f107 0318 	add.w	r3, r7, #24
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 f82a 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9bc:	e007      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9c2:	e004      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9c8:	e001      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3740      	adds	r7, #64	; 0x40
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	58024400 	.word	0x58024400
 800a9dc:	017d7840 	.word	0x017d7840

0800a9e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a9e4:	f7fd ffd4 	bl	8008990 <HAL_RCC_GetHCLKFreq>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	091b      	lsrs	r3, r3, #4
 800a9f0:	f003 0307 	and.w	r3, r3, #7
 800a9f4:	4904      	ldr	r1, [pc, #16]	; (800aa08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a9f6:	5ccb      	ldrb	r3, [r1, r3]
 800a9f8:	f003 031f 	and.w	r3, r3, #31
 800a9fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	58024400 	.word	0x58024400
 800aa08:	08014300 	.word	0x08014300

0800aa0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b089      	sub	sp, #36	; 0x24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa14:	4ba1      	ldr	r3, [pc, #644]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa18:	f003 0303 	and.w	r3, r3, #3
 800aa1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aa1e:	4b9f      	ldr	r3, [pc, #636]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa22:	0b1b      	lsrs	r3, r3, #12
 800aa24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa2a:	4b9c      	ldr	r3, [pc, #624]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2e:	091b      	lsrs	r3, r3, #4
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aa36:	4b99      	ldr	r3, [pc, #612]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3a:	08db      	lsrs	r3, r3, #3
 800aa3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	fb02 f303 	mul.w	r3, r2, r3
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 8111 	beq.w	800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	f000 8083 	beq.w	800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	f200 80a1 	bhi.w	800abac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d003      	beq.n	800aa78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d056      	beq.n	800ab24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa76:	e099      	b.n	800abac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa78:	4b88      	ldr	r3, [pc, #544]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0320 	and.w	r3, r3, #32
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d02d      	beq.n	800aae0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa84:	4b85      	ldr	r3, [pc, #532]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	08db      	lsrs	r3, r3, #3
 800aa8a:	f003 0303 	and.w	r3, r3, #3
 800aa8e:	4a84      	ldr	r2, [pc, #528]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa90:	fa22 f303 	lsr.w	r3, r2, r3
 800aa94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	ee07 3a90 	vmov	s15, r3
 800aa9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaae:	4b7b      	ldr	r3, [pc, #492]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aabe:	ed97 6a03 	vldr	s12, [r7, #12]
 800aac2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aada:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aade:	e087      	b.n	800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aaee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaf2:	4b6a      	ldr	r3, [pc, #424]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab06:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab22:	e065      	b.n	800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab36:	4b59      	ldr	r3, [pc, #356]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab3e:	ee07 3a90 	vmov	s15, r3
 800ab42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab66:	e043      	b.n	800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab7a:	4b48      	ldr	r3, [pc, #288]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab82:	ee07 3a90 	vmov	s15, r3
 800ab86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abaa:	e021      	b.n	800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abbe:	4b37      	ldr	r3, [pc, #220]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc6:	ee07 3a90 	vmov	s15, r3
 800abca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abce:	ed97 6a03 	vldr	s12, [r7, #12]
 800abd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800abf0:	4b2a      	ldr	r3, [pc, #168]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf4:	0a5b      	lsrs	r3, r3, #9
 800abf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac16:	ee17 2a90 	vmov	r2, s15
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ac1e:	4b1f      	ldr	r3, [pc, #124]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac22:	0c1b      	lsrs	r3, r3, #16
 800ac24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac28:	ee07 3a90 	vmov	s15, r3
 800ac2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac44:	ee17 2a90 	vmov	r2, s15
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ac4c:	4b13      	ldr	r3, [pc, #76]	; (800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac50:	0e1b      	lsrs	r3, r3, #24
 800ac52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac66:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac72:	ee17 2a90 	vmov	r2, s15
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac7a:	e008      	b.n	800ac8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	609a      	str	r2, [r3, #8]
}
 800ac8e:	bf00      	nop
 800ac90:	3724      	adds	r7, #36	; 0x24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	58024400 	.word	0x58024400
 800aca0:	03d09000 	.word	0x03d09000
 800aca4:	46000000 	.word	0x46000000
 800aca8:	4c742400 	.word	0x4c742400
 800acac:	4a742400 	.word	0x4a742400
 800acb0:	4bbebc20 	.word	0x4bbebc20

0800acb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b089      	sub	sp, #36	; 0x24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acbc:	4ba1      	ldr	r3, [pc, #644]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc0:	f003 0303 	and.w	r3, r3, #3
 800acc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800acc6:	4b9f      	ldr	r3, [pc, #636]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acca:	0d1b      	lsrs	r3, r3, #20
 800accc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800acd2:	4b9c      	ldr	r3, [pc, #624]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd6:	0a1b      	lsrs	r3, r3, #8
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800acde:	4b99      	ldr	r3, [pc, #612]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ace2:	08db      	lsrs	r3, r3, #3
 800ace4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	fb02 f303 	mul.w	r3, r2, r3
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 8111 	beq.w	800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	f000 8083 	beq.w	800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	f200 80a1 	bhi.w	800ae54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d003      	beq.n	800ad20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d056      	beq.n	800adcc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad1e:	e099      	b.n	800ae54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad20:	4b88      	ldr	r3, [pc, #544]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0320 	and.w	r3, r3, #32
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d02d      	beq.n	800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad2c:	4b85      	ldr	r3, [pc, #532]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	08db      	lsrs	r3, r3, #3
 800ad32:	f003 0303 	and.w	r3, r3, #3
 800ad36:	4a84      	ldr	r2, [pc, #528]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad38:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	ee07 3a90 	vmov	s15, r3
 800ad44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad56:	4b7b      	ldr	r3, [pc, #492]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad5e:	ee07 3a90 	vmov	s15, r3
 800ad62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad86:	e087      	b.n	800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	ee07 3a90 	vmov	s15, r3
 800ad8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad9a:	4b6a      	ldr	r3, [pc, #424]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ada2:	ee07 3a90 	vmov	s15, r3
 800ada6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800adae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adca:	e065      	b.n	800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	ee07 3a90 	vmov	s15, r3
 800add2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adde:	4b59      	ldr	r3, [pc, #356]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade6:	ee07 3a90 	vmov	s15, r3
 800adea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adee:	ed97 6a03 	vldr	s12, [r7, #12]
 800adf2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae0e:	e043      	b.n	800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae22:	4b48      	ldr	r3, [pc, #288]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae2a:	ee07 3a90 	vmov	s15, r3
 800ae2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae36:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae52:	e021      	b.n	800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae66:	4b37      	ldr	r3, [pc, #220]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae6e:	ee07 3a90 	vmov	s15, r3
 800ae72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae98:	4b2a      	ldr	r3, [pc, #168]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9c:	0a5b      	lsrs	r3, r3, #9
 800ae9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aea2:	ee07 3a90 	vmov	s15, r3
 800aea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aeae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aeb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aebe:	ee17 2a90 	vmov	r2, s15
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aec6:	4b1f      	ldr	r3, [pc, #124]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeca:	0c1b      	lsrs	r3, r3, #16
 800aecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed0:	ee07 3a90 	vmov	s15, r3
 800aed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aedc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aee0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeec:	ee17 2a90 	vmov	r2, s15
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aef4:	4b13      	ldr	r3, [pc, #76]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef8:	0e1b      	lsrs	r3, r3, #24
 800aefa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800af12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af1a:	ee17 2a90 	vmov	r2, s15
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af22:	e008      	b.n	800af36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	609a      	str	r2, [r3, #8]
}
 800af36:	bf00      	nop
 800af38:	3724      	adds	r7, #36	; 0x24
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	58024400 	.word	0x58024400
 800af48:	03d09000 	.word	0x03d09000
 800af4c:	46000000 	.word	0x46000000
 800af50:	4c742400 	.word	0x4c742400
 800af54:	4a742400 	.word	0x4a742400
 800af58:	4bbebc20 	.word	0x4bbebc20

0800af5c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b089      	sub	sp, #36	; 0x24
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af64:	4ba0      	ldr	r3, [pc, #640]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af68:	f003 0303 	and.w	r3, r3, #3
 800af6c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800af6e:	4b9e      	ldr	r3, [pc, #632]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af72:	091b      	lsrs	r3, r3, #4
 800af74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af78:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af7a:	4b9b      	ldr	r3, [pc, #620]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af84:	4b98      	ldr	r3, [pc, #608]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af88:	08db      	lsrs	r3, r3, #3
 800af8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	fb02 f303 	mul.w	r3, r2, r3
 800af94:	ee07 3a90 	vmov	s15, r3
 800af98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 8111 	beq.w	800b1ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	2b02      	cmp	r3, #2
 800afac:	f000 8083 	beq.w	800b0b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	f200 80a1 	bhi.w	800b0fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d003      	beq.n	800afc6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d056      	beq.n	800b072 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800afc4:	e099      	b.n	800b0fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afc6:	4b88      	ldr	r3, [pc, #544]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 0320 	and.w	r3, r3, #32
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d02d      	beq.n	800b02e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afd2:	4b85      	ldr	r3, [pc, #532]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	08db      	lsrs	r3, r3, #3
 800afd8:	f003 0303 	and.w	r3, r3, #3
 800afdc:	4a83      	ldr	r2, [pc, #524]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800afde:	fa22 f303 	lsr.w	r3, r2, r3
 800afe2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	ee07 3a90 	vmov	s15, r3
 800afea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	ee07 3a90 	vmov	s15, r3
 800aff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800affc:	4b7a      	ldr	r3, [pc, #488]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800affe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b004:	ee07 3a90 	vmov	s15, r3
 800b008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b00c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b010:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b01c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b024:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b028:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b02c:	e087      	b.n	800b13e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	ee07 3a90 	vmov	s15, r3
 800b034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b038:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b03c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b040:	4b69      	ldr	r3, [pc, #420]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b048:	ee07 3a90 	vmov	s15, r3
 800b04c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b050:	ed97 6a03 	vldr	s12, [r7, #12]
 800b054:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b05c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b06c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b070:	e065      	b.n	800b13e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	ee07 3a90 	vmov	s15, r3
 800b078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b07c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b084:	4b58      	ldr	r3, [pc, #352]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b08c:	ee07 3a90 	vmov	s15, r3
 800b090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b094:	ed97 6a03 	vldr	s12, [r7, #12]
 800b098:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b09c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0b4:	e043      	b.n	800b13e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	ee07 3a90 	vmov	s15, r3
 800b0bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b1fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b0c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0c8:	4b47      	ldr	r3, [pc, #284]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d0:	ee07 3a90 	vmov	s15, r3
 800b0d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0f8:	e021      	b.n	800b13e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	ee07 3a90 	vmov	s15, r3
 800b100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b104:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b10c:	4b36      	ldr	r3, [pc, #216]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b114:	ee07 3a90 	vmov	s15, r3
 800b118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b120:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b12c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b134:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b138:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b13c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b13e:	4b2a      	ldr	r3, [pc, #168]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b142:	0a5b      	lsrs	r3, r3, #9
 800b144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b148:	ee07 3a90 	vmov	s15, r3
 800b14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b154:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b158:	edd7 6a07 	vldr	s13, [r7, #28]
 800b15c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b164:	ee17 2a90 	vmov	r2, s15
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b16c:	4b1e      	ldr	r3, [pc, #120]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b170:	0c1b      	lsrs	r3, r3, #16
 800b172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b182:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b186:	edd7 6a07 	vldr	s13, [r7, #28]
 800b18a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b18e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b192:	ee17 2a90 	vmov	r2, s15
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b19a:	4b13      	ldr	r3, [pc, #76]	; (800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19e:	0e1b      	lsrs	r3, r3, #24
 800b1a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1a4:	ee07 3a90 	vmov	s15, r3
 800b1a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c0:	ee17 2a90 	vmov	r2, s15
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b1c8:	e008      	b.n	800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	609a      	str	r2, [r3, #8]
}
 800b1dc:	bf00      	nop
 800b1de:	3724      	adds	r7, #36	; 0x24
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr
 800b1e8:	58024400 	.word	0x58024400
 800b1ec:	03d09000 	.word	0x03d09000
 800b1f0:	46000000 	.word	0x46000000
 800b1f4:	4c742400 	.word	0x4c742400
 800b1f8:	4a742400 	.word	0x4a742400
 800b1fc:	4bbebc20 	.word	0x4bbebc20

0800b200 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b20e:	4b53      	ldr	r3, [pc, #332]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b212:	f003 0303 	and.w	r3, r3, #3
 800b216:	2b03      	cmp	r3, #3
 800b218:	d101      	bne.n	800b21e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e099      	b.n	800b352 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b21e:	4b4f      	ldr	r3, [pc, #316]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a4e      	ldr	r2, [pc, #312]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b224:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b22a:	f7f7 fbc3 	bl	80029b4 <HAL_GetTick>
 800b22e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b230:	e008      	b.n	800b244 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b232:	f7f7 fbbf 	bl	80029b4 <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d901      	bls.n	800b244 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e086      	b.n	800b352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b244:	4b45      	ldr	r3, [pc, #276]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1f0      	bne.n	800b232 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b250:	4b42      	ldr	r3, [pc, #264]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b254:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	031b      	lsls	r3, r3, #12
 800b25e:	493f      	ldr	r1, [pc, #252]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b260:	4313      	orrs	r3, r2
 800b262:	628b      	str	r3, [r1, #40]	; 0x28
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	3b01      	subs	r3, #1
 800b26a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	3b01      	subs	r3, #1
 800b274:	025b      	lsls	r3, r3, #9
 800b276:	b29b      	uxth	r3, r3
 800b278:	431a      	orrs	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	3b01      	subs	r3, #1
 800b280:	041b      	lsls	r3, r3, #16
 800b282:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b286:	431a      	orrs	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	061b      	lsls	r3, r3, #24
 800b290:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b294:	4931      	ldr	r1, [pc, #196]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b296:	4313      	orrs	r3, r2
 800b298:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b29a:	4b30      	ldr	r3, [pc, #192]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	492d      	ldr	r1, [pc, #180]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b2ac:	4b2b      	ldr	r3, [pc, #172]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b0:	f023 0220 	bic.w	r2, r3, #32
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	4928      	ldr	r1, [pc, #160]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b2be:	4b27      	ldr	r3, [pc, #156]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c2:	4a26      	ldr	r2, [pc, #152]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b2c4:	f023 0310 	bic.w	r3, r3, #16
 800b2c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2ca:	4b24      	ldr	r3, [pc, #144]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b2cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2ce:	4b24      	ldr	r3, [pc, #144]	; (800b360 <RCCEx_PLL2_Config+0x160>)
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	69d2      	ldr	r2, [r2, #28]
 800b2d6:	00d2      	lsls	r2, r2, #3
 800b2d8:	4920      	ldr	r1, [pc, #128]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b2de:	4b1f      	ldr	r3, [pc, #124]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e2:	4a1e      	ldr	r2, [pc, #120]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b2e4:	f043 0310 	orr.w	r3, r3, #16
 800b2e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d106      	bne.n	800b2fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2f0:	4b1a      	ldr	r3, [pc, #104]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	4a19      	ldr	r2, [pc, #100]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b2f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2fc:	e00f      	b.n	800b31e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d106      	bne.n	800b312 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b304:	4b15      	ldr	r3, [pc, #84]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	4a14      	ldr	r2, [pc, #80]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b30a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b30e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b310:	e005      	b.n	800b31e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b312:	4b12      	ldr	r3, [pc, #72]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b316:	4a11      	ldr	r2, [pc, #68]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b31c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b31e:	4b0f      	ldr	r3, [pc, #60]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a0e      	ldr	r2, [pc, #56]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b324:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b32a:	f7f7 fb43 	bl	80029b4 <HAL_GetTick>
 800b32e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b330:	e008      	b.n	800b344 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b332:	f7f7 fb3f 	bl	80029b4 <HAL_GetTick>
 800b336:	4602      	mov	r2, r0
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d901      	bls.n	800b344 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b340:	2303      	movs	r3, #3
 800b342:	e006      	b.n	800b352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b344:	4b05      	ldr	r3, [pc, #20]	; (800b35c <RCCEx_PLL2_Config+0x15c>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d0f0      	beq.n	800b332 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b350:	7bfb      	ldrb	r3, [r7, #15]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	58024400 	.word	0x58024400
 800b360:	ffff0007 	.word	0xffff0007

0800b364 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b36e:	2300      	movs	r3, #0
 800b370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b372:	4b53      	ldr	r3, [pc, #332]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b376:	f003 0303 	and.w	r3, r3, #3
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	d101      	bne.n	800b382 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e099      	b.n	800b4b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b382:	4b4f      	ldr	r3, [pc, #316]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a4e      	ldr	r2, [pc, #312]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b38c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b38e:	f7f7 fb11 	bl	80029b4 <HAL_GetTick>
 800b392:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b394:	e008      	b.n	800b3a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b396:	f7f7 fb0d 	bl	80029b4 <HAL_GetTick>
 800b39a:	4602      	mov	r2, r0
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d901      	bls.n	800b3a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e086      	b.n	800b4b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3a8:	4b45      	ldr	r3, [pc, #276]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1f0      	bne.n	800b396 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b3b4:	4b42      	ldr	r3, [pc, #264]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	051b      	lsls	r3, r3, #20
 800b3c2:	493f      	ldr	r1, [pc, #252]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	628b      	str	r3, [r1, #40]	; 0x28
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	025b      	lsls	r3, r3, #9
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	431a      	orrs	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	041b      	lsls	r3, r3, #16
 800b3e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3ea:	431a      	orrs	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	061b      	lsls	r3, r3, #24
 800b3f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3f8:	4931      	ldr	r1, [pc, #196]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3fe:	4b30      	ldr	r3, [pc, #192]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	492d      	ldr	r1, [pc, #180]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b40c:	4313      	orrs	r3, r2
 800b40e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b410:	4b2b      	ldr	r3, [pc, #172]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b414:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	699b      	ldr	r3, [r3, #24]
 800b41c:	4928      	ldr	r1, [pc, #160]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b422:	4b27      	ldr	r3, [pc, #156]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b426:	4a26      	ldr	r2, [pc, #152]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b42c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b42e:	4b24      	ldr	r3, [pc, #144]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b432:	4b24      	ldr	r3, [pc, #144]	; (800b4c4 <RCCEx_PLL3_Config+0x160>)
 800b434:	4013      	ands	r3, r2
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	69d2      	ldr	r2, [r2, #28]
 800b43a:	00d2      	lsls	r2, r2, #3
 800b43c:	4920      	ldr	r1, [pc, #128]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b43e:	4313      	orrs	r3, r2
 800b440:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b442:	4b1f      	ldr	r3, [pc, #124]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b446:	4a1e      	ldr	r2, [pc, #120]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b44c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d106      	bne.n	800b462 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b454:	4b1a      	ldr	r3, [pc, #104]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b458:	4a19      	ldr	r2, [pc, #100]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b45a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b45e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b460:	e00f      	b.n	800b482 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d106      	bne.n	800b476 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b468:	4b15      	ldr	r3, [pc, #84]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46c:	4a14      	ldr	r2, [pc, #80]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b46e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b472:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b474:	e005      	b.n	800b482 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b476:	4b12      	ldr	r3, [pc, #72]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47a:	4a11      	ldr	r2, [pc, #68]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b47c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b480:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b482:	4b0f      	ldr	r3, [pc, #60]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a0e      	ldr	r2, [pc, #56]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b48c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b48e:	f7f7 fa91 	bl	80029b4 <HAL_GetTick>
 800b492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b494:	e008      	b.n	800b4a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b496:	f7f7 fa8d 	bl	80029b4 <HAL_GetTick>
 800b49a:	4602      	mov	r2, r0
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d901      	bls.n	800b4a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	e006      	b.n	800b4b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4a8:	4b05      	ldr	r3, [pc, #20]	; (800b4c0 <RCCEx_PLL3_Config+0x15c>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d0f0      	beq.n	800b496 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	58024400 	.word	0x58024400
 800b4c4:	ffff0007 	.word	0xffff0007

0800b4c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e10f      	b.n	800b6fa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a87      	ldr	r2, [pc, #540]	; (800b704 <HAL_SPI_Init+0x23c>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d00f      	beq.n	800b50a <HAL_SPI_Init+0x42>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a86      	ldr	r2, [pc, #536]	; (800b708 <HAL_SPI_Init+0x240>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d00a      	beq.n	800b50a <HAL_SPI_Init+0x42>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a84      	ldr	r2, [pc, #528]	; (800b70c <HAL_SPI_Init+0x244>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d005      	beq.n	800b50a <HAL_SPI_Init+0x42>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	2b0f      	cmp	r3, #15
 800b504:	d901      	bls.n	800b50a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e0f7      	b.n	800b6fa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f900 	bl	800b710 <SPI_GetPacketSize>
 800b510:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a7b      	ldr	r2, [pc, #492]	; (800b704 <HAL_SPI_Init+0x23c>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d00c      	beq.n	800b536 <HAL_SPI_Init+0x6e>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a79      	ldr	r2, [pc, #484]	; (800b708 <HAL_SPI_Init+0x240>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d007      	beq.n	800b536 <HAL_SPI_Init+0x6e>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a78      	ldr	r2, [pc, #480]	; (800b70c <HAL_SPI_Init+0x244>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d002      	beq.n	800b536 <HAL_SPI_Init+0x6e>
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b08      	cmp	r3, #8
 800b534:	d811      	bhi.n	800b55a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b53a:	4a72      	ldr	r2, [pc, #456]	; (800b704 <HAL_SPI_Init+0x23c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d009      	beq.n	800b554 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a70      	ldr	r2, [pc, #448]	; (800b708 <HAL_SPI_Init+0x240>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d004      	beq.n	800b554 <HAL_SPI_Init+0x8c>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a6f      	ldr	r2, [pc, #444]	; (800b70c <HAL_SPI_Init+0x244>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d104      	bne.n	800b55e <HAL_SPI_Init+0x96>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b10      	cmp	r3, #16
 800b558:	d901      	bls.n	800b55e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e0cd      	b.n	800b6fa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7f6 fd9c 	bl	80020b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2202      	movs	r2, #2
 800b57c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f022 0201 	bic.w	r2, r2, #1
 800b58e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b59a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b5a4:	d119      	bne.n	800b5da <HAL_SPI_Init+0x112>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5ae:	d103      	bne.n	800b5b8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d008      	beq.n	800b5ca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10c      	bne.n	800b5da <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5c8:	d107      	bne.n	800b5da <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b5d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00f      	beq.n	800b606 <HAL_SPI_Init+0x13e>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	2b06      	cmp	r3, #6
 800b5ec:	d90b      	bls.n	800b606 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	430a      	orrs	r2, r1
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	e007      	b.n	800b616 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b614:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	69da      	ldr	r2, [r3, #28]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61e:	431a      	orrs	r2, r3
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	431a      	orrs	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b628:	ea42 0103 	orr.w	r1, r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68da      	ldr	r2, [r3, #12]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	430a      	orrs	r2, r1
 800b636:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b640:	431a      	orrs	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b646:	431a      	orrs	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	431a      	orrs	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	431a      	orrs	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	431a      	orrs	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	431a      	orrs	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	431a      	orrs	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b66a:	431a      	orrs	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	431a      	orrs	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b676:	ea42 0103 	orr.w	r1, r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	430a      	orrs	r2, r1
 800b684:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d113      	bne.n	800b6b6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6a0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b6b4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f022 0201 	bic.w	r2, r2, #1
 800b6c4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00a      	beq.n	800b6e8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	430a      	orrs	r2, r1
 800b6e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	40013000 	.word	0x40013000
 800b708:	40003800 	.word	0x40003800
 800b70c:	40003c00 	.word	0x40003c00

0800b710 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b71c:	095b      	lsrs	r3, r3, #5
 800b71e:	3301      	adds	r3, #1
 800b720:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	3301      	adds	r3, #1
 800b728:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	3307      	adds	r3, #7
 800b72e:	08db      	lsrs	r3, r3, #3
 800b730:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	fb02 f303 	mul.w	r3, r2, r3
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b082      	sub	sp, #8
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	e049      	b.n	800b7ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b00      	cmp	r3, #0
 800b762:	d106      	bne.n	800b772 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7f6 fd07 	bl	8002180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2202      	movs	r2, #2
 800b776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3304      	adds	r3, #4
 800b782:	4619      	mov	r1, r3
 800b784:	4610      	mov	r0, r2
 800b786:	f000 fea9 	bl	800c4dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2201      	movs	r2, #1
 800b78e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b802:	b2db      	uxtb	r3, r3
 800b804:	2b01      	cmp	r3, #1
 800b806:	d001      	beq.n	800b80c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	e054      	b.n	800b8b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68da      	ldr	r2, [r3, #12]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f042 0201 	orr.w	r2, r2, #1
 800b822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a26      	ldr	r2, [pc, #152]	; (800b8c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d022      	beq.n	800b874 <HAL_TIM_Base_Start_IT+0x80>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b836:	d01d      	beq.n	800b874 <HAL_TIM_Base_Start_IT+0x80>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a22      	ldr	r2, [pc, #136]	; (800b8c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d018      	beq.n	800b874 <HAL_TIM_Base_Start_IT+0x80>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a21      	ldr	r2, [pc, #132]	; (800b8cc <HAL_TIM_Base_Start_IT+0xd8>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d013      	beq.n	800b874 <HAL_TIM_Base_Start_IT+0x80>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a1f      	ldr	r2, [pc, #124]	; (800b8d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d00e      	beq.n	800b874 <HAL_TIM_Base_Start_IT+0x80>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a1e      	ldr	r2, [pc, #120]	; (800b8d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d009      	beq.n	800b874 <HAL_TIM_Base_Start_IT+0x80>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a1c      	ldr	r2, [pc, #112]	; (800b8d8 <HAL_TIM_Base_Start_IT+0xe4>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d004      	beq.n	800b874 <HAL_TIM_Base_Start_IT+0x80>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a1b      	ldr	r2, [pc, #108]	; (800b8dc <HAL_TIM_Base_Start_IT+0xe8>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d115      	bne.n	800b8a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689a      	ldr	r2, [r3, #8]
 800b87a:	4b19      	ldr	r3, [pc, #100]	; (800b8e0 <HAL_TIM_Base_Start_IT+0xec>)
 800b87c:	4013      	ands	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2b06      	cmp	r3, #6
 800b884:	d015      	beq.n	800b8b2 <HAL_TIM_Base_Start_IT+0xbe>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b88c:	d011      	beq.n	800b8b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f042 0201 	orr.w	r2, r2, #1
 800b89c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b89e:	e008      	b.n	800b8b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f042 0201 	orr.w	r2, r2, #1
 800b8ae:	601a      	str	r2, [r3, #0]
 800b8b0:	e000      	b.n	800b8b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	40010000 	.word	0x40010000
 800b8c8:	40000400 	.word	0x40000400
 800b8cc:	40000800 	.word	0x40000800
 800b8d0:	40000c00 	.word	0x40000c00
 800b8d4:	40010400 	.word	0x40010400
 800b8d8:	40001800 	.word	0x40001800
 800b8dc:	40014000 	.word	0x40014000
 800b8e0:	00010007 	.word	0x00010007

0800b8e4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d109      	bne.n	800b90c <HAL_TIM_OC_Start_IT+0x28>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	2b01      	cmp	r3, #1
 800b902:	bf14      	ite	ne
 800b904:	2301      	movne	r3, #1
 800b906:	2300      	moveq	r3, #0
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	e03c      	b.n	800b986 <HAL_TIM_OC_Start_IT+0xa2>
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2b04      	cmp	r3, #4
 800b910:	d109      	bne.n	800b926 <HAL_TIM_OC_Start_IT+0x42>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	bf14      	ite	ne
 800b91e:	2301      	movne	r3, #1
 800b920:	2300      	moveq	r3, #0
 800b922:	b2db      	uxtb	r3, r3
 800b924:	e02f      	b.n	800b986 <HAL_TIM_OC_Start_IT+0xa2>
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2b08      	cmp	r3, #8
 800b92a:	d109      	bne.n	800b940 <HAL_TIM_OC_Start_IT+0x5c>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b932:	b2db      	uxtb	r3, r3
 800b934:	2b01      	cmp	r3, #1
 800b936:	bf14      	ite	ne
 800b938:	2301      	movne	r3, #1
 800b93a:	2300      	moveq	r3, #0
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	e022      	b.n	800b986 <HAL_TIM_OC_Start_IT+0xa2>
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b0c      	cmp	r3, #12
 800b944:	d109      	bne.n	800b95a <HAL_TIM_OC_Start_IT+0x76>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b01      	cmp	r3, #1
 800b950:	bf14      	ite	ne
 800b952:	2301      	movne	r3, #1
 800b954:	2300      	moveq	r3, #0
 800b956:	b2db      	uxtb	r3, r3
 800b958:	e015      	b.n	800b986 <HAL_TIM_OC_Start_IT+0xa2>
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2b10      	cmp	r3, #16
 800b95e:	d109      	bne.n	800b974 <HAL_TIM_OC_Start_IT+0x90>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b01      	cmp	r3, #1
 800b96a:	bf14      	ite	ne
 800b96c:	2301      	movne	r3, #1
 800b96e:	2300      	moveq	r3, #0
 800b970:	b2db      	uxtb	r3, r3
 800b972:	e008      	b.n	800b986 <HAL_TIM_OC_Start_IT+0xa2>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	bf14      	ite	ne
 800b980:	2301      	movne	r3, #1
 800b982:	2300      	moveq	r3, #0
 800b984:	b2db      	uxtb	r3, r3
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e0ec      	b.n	800bb68 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d104      	bne.n	800b99e <HAL_TIM_OC_Start_IT+0xba>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2202      	movs	r2, #2
 800b998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b99c:	e023      	b.n	800b9e6 <HAL_TIM_OC_Start_IT+0x102>
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2b04      	cmp	r3, #4
 800b9a2:	d104      	bne.n	800b9ae <HAL_TIM_OC_Start_IT+0xca>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9ac:	e01b      	b.n	800b9e6 <HAL_TIM_OC_Start_IT+0x102>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b08      	cmp	r3, #8
 800b9b2:	d104      	bne.n	800b9be <HAL_TIM_OC_Start_IT+0xda>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9bc:	e013      	b.n	800b9e6 <HAL_TIM_OC_Start_IT+0x102>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b0c      	cmp	r3, #12
 800b9c2:	d104      	bne.n	800b9ce <HAL_TIM_OC_Start_IT+0xea>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9cc:	e00b      	b.n	800b9e6 <HAL_TIM_OC_Start_IT+0x102>
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b10      	cmp	r3, #16
 800b9d2:	d104      	bne.n	800b9de <HAL_TIM_OC_Start_IT+0xfa>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9dc:	e003      	b.n	800b9e6 <HAL_TIM_OC_Start_IT+0x102>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2b0c      	cmp	r3, #12
 800b9ea:	d841      	bhi.n	800ba70 <HAL_TIM_OC_Start_IT+0x18c>
 800b9ec:	a201      	add	r2, pc, #4	; (adr r2, 800b9f4 <HAL_TIM_OC_Start_IT+0x110>)
 800b9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f2:	bf00      	nop
 800b9f4:	0800ba29 	.word	0x0800ba29
 800b9f8:	0800ba71 	.word	0x0800ba71
 800b9fc:	0800ba71 	.word	0x0800ba71
 800ba00:	0800ba71 	.word	0x0800ba71
 800ba04:	0800ba3b 	.word	0x0800ba3b
 800ba08:	0800ba71 	.word	0x0800ba71
 800ba0c:	0800ba71 	.word	0x0800ba71
 800ba10:	0800ba71 	.word	0x0800ba71
 800ba14:	0800ba4d 	.word	0x0800ba4d
 800ba18:	0800ba71 	.word	0x0800ba71
 800ba1c:	0800ba71 	.word	0x0800ba71
 800ba20:	0800ba71 	.word	0x0800ba71
 800ba24:	0800ba5f 	.word	0x0800ba5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68da      	ldr	r2, [r3, #12]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f042 0202 	orr.w	r2, r2, #2
 800ba36:	60da      	str	r2, [r3, #12]
      break;
 800ba38:	e01d      	b.n	800ba76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68da      	ldr	r2, [r3, #12]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f042 0204 	orr.w	r2, r2, #4
 800ba48:	60da      	str	r2, [r3, #12]
      break;
 800ba4a:	e014      	b.n	800ba76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68da      	ldr	r2, [r3, #12]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f042 0208 	orr.w	r2, r2, #8
 800ba5a:	60da      	str	r2, [r3, #12]
      break;
 800ba5c:	e00b      	b.n	800ba76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68da      	ldr	r2, [r3, #12]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f042 0210 	orr.w	r2, r2, #16
 800ba6c:	60da      	str	r2, [r3, #12]
      break;
 800ba6e:	e002      	b.n	800ba76 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	73fb      	strb	r3, [r7, #15]
      break;
 800ba74:	bf00      	nop
  }

  if (status == HAL_OK)
 800ba76:	7bfb      	ldrb	r3, [r7, #15]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d174      	bne.n	800bb66 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2201      	movs	r2, #1
 800ba82:	6839      	ldr	r1, [r7, #0]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f001 f943 	bl	800cd10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a38      	ldr	r2, [pc, #224]	; (800bb70 <HAL_TIM_OC_Start_IT+0x28c>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d013      	beq.n	800babc <HAL_TIM_OC_Start_IT+0x1d8>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a36      	ldr	r2, [pc, #216]	; (800bb74 <HAL_TIM_OC_Start_IT+0x290>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d00e      	beq.n	800babc <HAL_TIM_OC_Start_IT+0x1d8>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a35      	ldr	r2, [pc, #212]	; (800bb78 <HAL_TIM_OC_Start_IT+0x294>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d009      	beq.n	800babc <HAL_TIM_OC_Start_IT+0x1d8>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a33      	ldr	r2, [pc, #204]	; (800bb7c <HAL_TIM_OC_Start_IT+0x298>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d004      	beq.n	800babc <HAL_TIM_OC_Start_IT+0x1d8>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a32      	ldr	r2, [pc, #200]	; (800bb80 <HAL_TIM_OC_Start_IT+0x29c>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d101      	bne.n	800bac0 <HAL_TIM_OC_Start_IT+0x1dc>
 800babc:	2301      	movs	r3, #1
 800babe:	e000      	b.n	800bac2 <HAL_TIM_OC_Start_IT+0x1de>
 800bac0:	2300      	movs	r3, #0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d007      	beq.n	800bad6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bad4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a25      	ldr	r2, [pc, #148]	; (800bb70 <HAL_TIM_OC_Start_IT+0x28c>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d022      	beq.n	800bb26 <HAL_TIM_OC_Start_IT+0x242>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bae8:	d01d      	beq.n	800bb26 <HAL_TIM_OC_Start_IT+0x242>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a25      	ldr	r2, [pc, #148]	; (800bb84 <HAL_TIM_OC_Start_IT+0x2a0>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d018      	beq.n	800bb26 <HAL_TIM_OC_Start_IT+0x242>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a23      	ldr	r2, [pc, #140]	; (800bb88 <HAL_TIM_OC_Start_IT+0x2a4>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d013      	beq.n	800bb26 <HAL_TIM_OC_Start_IT+0x242>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a22      	ldr	r2, [pc, #136]	; (800bb8c <HAL_TIM_OC_Start_IT+0x2a8>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d00e      	beq.n	800bb26 <HAL_TIM_OC_Start_IT+0x242>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a19      	ldr	r2, [pc, #100]	; (800bb74 <HAL_TIM_OC_Start_IT+0x290>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d009      	beq.n	800bb26 <HAL_TIM_OC_Start_IT+0x242>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a1e      	ldr	r2, [pc, #120]	; (800bb90 <HAL_TIM_OC_Start_IT+0x2ac>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d004      	beq.n	800bb26 <HAL_TIM_OC_Start_IT+0x242>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a15      	ldr	r2, [pc, #84]	; (800bb78 <HAL_TIM_OC_Start_IT+0x294>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d115      	bne.n	800bb52 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	689a      	ldr	r2, [r3, #8]
 800bb2c:	4b19      	ldr	r3, [pc, #100]	; (800bb94 <HAL_TIM_OC_Start_IT+0x2b0>)
 800bb2e:	4013      	ands	r3, r2
 800bb30:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b06      	cmp	r3, #6
 800bb36:	d015      	beq.n	800bb64 <HAL_TIM_OC_Start_IT+0x280>
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb3e:	d011      	beq.n	800bb64 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f042 0201 	orr.w	r2, r2, #1
 800bb4e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb50:	e008      	b.n	800bb64 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f042 0201 	orr.w	r2, r2, #1
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	e000      	b.n	800bb66 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb64:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	40010000 	.word	0x40010000
 800bb74:	40010400 	.word	0x40010400
 800bb78:	40014000 	.word	0x40014000
 800bb7c:	40014400 	.word	0x40014400
 800bb80:	40014800 	.word	0x40014800
 800bb84:	40000400 	.word	0x40000400
 800bb88:	40000800 	.word	0x40000800
 800bb8c:	40000c00 	.word	0x40000c00
 800bb90:	40001800 	.word	0x40001800
 800bb94:	00010007 	.word	0x00010007

0800bb98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e049      	b.n	800bc3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d106      	bne.n	800bbc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f841 	bl	800bc46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3304      	adds	r3, #4
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	f000 fc80 	bl	800c4dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bc46:	b480      	push	{r7}
 800bc48:	b083      	sub	sp, #12
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bc4e:	bf00      	nop
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
	...

0800bc5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d109      	bne.n	800bc80 <HAL_TIM_PWM_Start+0x24>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	bf14      	ite	ne
 800bc78:	2301      	movne	r3, #1
 800bc7a:	2300      	moveq	r3, #0
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	e03c      	b.n	800bcfa <HAL_TIM_PWM_Start+0x9e>
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2b04      	cmp	r3, #4
 800bc84:	d109      	bne.n	800bc9a <HAL_TIM_PWM_Start+0x3e>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	bf14      	ite	ne
 800bc92:	2301      	movne	r3, #1
 800bc94:	2300      	moveq	r3, #0
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	e02f      	b.n	800bcfa <HAL_TIM_PWM_Start+0x9e>
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2b08      	cmp	r3, #8
 800bc9e:	d109      	bne.n	800bcb4 <HAL_TIM_PWM_Start+0x58>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	bf14      	ite	ne
 800bcac:	2301      	movne	r3, #1
 800bcae:	2300      	moveq	r3, #0
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	e022      	b.n	800bcfa <HAL_TIM_PWM_Start+0x9e>
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	2b0c      	cmp	r3, #12
 800bcb8:	d109      	bne.n	800bcce <HAL_TIM_PWM_Start+0x72>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	bf14      	ite	ne
 800bcc6:	2301      	movne	r3, #1
 800bcc8:	2300      	moveq	r3, #0
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	e015      	b.n	800bcfa <HAL_TIM_PWM_Start+0x9e>
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	2b10      	cmp	r3, #16
 800bcd2:	d109      	bne.n	800bce8 <HAL_TIM_PWM_Start+0x8c>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	bf14      	ite	ne
 800bce0:	2301      	movne	r3, #1
 800bce2:	2300      	moveq	r3, #0
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	e008      	b.n	800bcfa <HAL_TIM_PWM_Start+0x9e>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	bf14      	ite	ne
 800bcf4:	2301      	movne	r3, #1
 800bcf6:	2300      	moveq	r3, #0
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e0a1      	b.n	800be46 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d104      	bne.n	800bd12 <HAL_TIM_PWM_Start+0xb6>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2202      	movs	r2, #2
 800bd0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd10:	e023      	b.n	800bd5a <HAL_TIM_PWM_Start+0xfe>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2b04      	cmp	r3, #4
 800bd16:	d104      	bne.n	800bd22 <HAL_TIM_PWM_Start+0xc6>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2202      	movs	r2, #2
 800bd1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd20:	e01b      	b.n	800bd5a <HAL_TIM_PWM_Start+0xfe>
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	2b08      	cmp	r3, #8
 800bd26:	d104      	bne.n	800bd32 <HAL_TIM_PWM_Start+0xd6>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd30:	e013      	b.n	800bd5a <HAL_TIM_PWM_Start+0xfe>
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2b0c      	cmp	r3, #12
 800bd36:	d104      	bne.n	800bd42 <HAL_TIM_PWM_Start+0xe6>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2202      	movs	r2, #2
 800bd3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd40:	e00b      	b.n	800bd5a <HAL_TIM_PWM_Start+0xfe>
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b10      	cmp	r3, #16
 800bd46:	d104      	bne.n	800bd52 <HAL_TIM_PWM_Start+0xf6>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd50:	e003      	b.n	800bd5a <HAL_TIM_PWM_Start+0xfe>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2202      	movs	r2, #2
 800bd56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	6839      	ldr	r1, [r7, #0]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 ffd4 	bl	800cd10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a38      	ldr	r2, [pc, #224]	; (800be50 <HAL_TIM_PWM_Start+0x1f4>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d013      	beq.n	800bd9a <HAL_TIM_PWM_Start+0x13e>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a37      	ldr	r2, [pc, #220]	; (800be54 <HAL_TIM_PWM_Start+0x1f8>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d00e      	beq.n	800bd9a <HAL_TIM_PWM_Start+0x13e>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a35      	ldr	r2, [pc, #212]	; (800be58 <HAL_TIM_PWM_Start+0x1fc>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d009      	beq.n	800bd9a <HAL_TIM_PWM_Start+0x13e>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a34      	ldr	r2, [pc, #208]	; (800be5c <HAL_TIM_PWM_Start+0x200>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d004      	beq.n	800bd9a <HAL_TIM_PWM_Start+0x13e>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a32      	ldr	r2, [pc, #200]	; (800be60 <HAL_TIM_PWM_Start+0x204>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d101      	bne.n	800bd9e <HAL_TIM_PWM_Start+0x142>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e000      	b.n	800bda0 <HAL_TIM_PWM_Start+0x144>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d007      	beq.n	800bdb4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bdb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a25      	ldr	r2, [pc, #148]	; (800be50 <HAL_TIM_PWM_Start+0x1f4>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d022      	beq.n	800be04 <HAL_TIM_PWM_Start+0x1a8>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdc6:	d01d      	beq.n	800be04 <HAL_TIM_PWM_Start+0x1a8>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a25      	ldr	r2, [pc, #148]	; (800be64 <HAL_TIM_PWM_Start+0x208>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d018      	beq.n	800be04 <HAL_TIM_PWM_Start+0x1a8>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a24      	ldr	r2, [pc, #144]	; (800be68 <HAL_TIM_PWM_Start+0x20c>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d013      	beq.n	800be04 <HAL_TIM_PWM_Start+0x1a8>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a22      	ldr	r2, [pc, #136]	; (800be6c <HAL_TIM_PWM_Start+0x210>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d00e      	beq.n	800be04 <HAL_TIM_PWM_Start+0x1a8>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a1a      	ldr	r2, [pc, #104]	; (800be54 <HAL_TIM_PWM_Start+0x1f8>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d009      	beq.n	800be04 <HAL_TIM_PWM_Start+0x1a8>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a1e      	ldr	r2, [pc, #120]	; (800be70 <HAL_TIM_PWM_Start+0x214>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d004      	beq.n	800be04 <HAL_TIM_PWM_Start+0x1a8>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a16      	ldr	r2, [pc, #88]	; (800be58 <HAL_TIM_PWM_Start+0x1fc>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d115      	bne.n	800be30 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689a      	ldr	r2, [r3, #8]
 800be0a:	4b1a      	ldr	r3, [pc, #104]	; (800be74 <HAL_TIM_PWM_Start+0x218>)
 800be0c:	4013      	ands	r3, r2
 800be0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2b06      	cmp	r3, #6
 800be14:	d015      	beq.n	800be42 <HAL_TIM_PWM_Start+0x1e6>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be1c:	d011      	beq.n	800be42 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f042 0201 	orr.w	r2, r2, #1
 800be2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be2e:	e008      	b.n	800be42 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f042 0201 	orr.w	r2, r2, #1
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	e000      	b.n	800be44 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	40010000 	.word	0x40010000
 800be54:	40010400 	.word	0x40010400
 800be58:	40014000 	.word	0x40014000
 800be5c:	40014400 	.word	0x40014400
 800be60:	40014800 	.word	0x40014800
 800be64:	40000400 	.word	0x40000400
 800be68:	40000800 	.word	0x40000800
 800be6c:	40000c00 	.word	0x40000c00
 800be70:	40001800 	.word	0x40001800
 800be74:	00010007 	.word	0x00010007

0800be78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f003 0302 	and.w	r3, r3, #2
 800be96:	2b00      	cmp	r3, #0
 800be98:	d020      	beq.n	800bedc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f003 0302 	and.w	r3, r3, #2
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d01b      	beq.n	800bedc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f06f 0202 	mvn.w	r2, #2
 800beac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2201      	movs	r2, #1
 800beb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	699b      	ldr	r3, [r3, #24]
 800beba:	f003 0303 	and.w	r3, r3, #3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d003      	beq.n	800beca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 faec 	bl	800c4a0 <HAL_TIM_IC_CaptureCallback>
 800bec8:	e005      	b.n	800bed6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7f4 fbda 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 faef 	bl	800c4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	f003 0304 	and.w	r3, r3, #4
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d020      	beq.n	800bf28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f003 0304 	and.w	r3, r3, #4
 800beec:	2b00      	cmp	r3, #0
 800beee:	d01b      	beq.n	800bf28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f06f 0204 	mvn.w	r2, #4
 800bef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2202      	movs	r2, #2
 800befe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	699b      	ldr	r3, [r3, #24]
 800bf06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d003      	beq.n	800bf16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fac6 	bl	800c4a0 <HAL_TIM_IC_CaptureCallback>
 800bf14:	e005      	b.n	800bf22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7f4 fbb4 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fac9 	bl	800c4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	f003 0308 	and.w	r3, r3, #8
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d020      	beq.n	800bf74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f003 0308 	and.w	r3, r3, #8
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d01b      	beq.n	800bf74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f06f 0208 	mvn.w	r2, #8
 800bf44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2204      	movs	r2, #4
 800bf4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	69db      	ldr	r3, [r3, #28]
 800bf52:	f003 0303 	and.w	r3, r3, #3
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 faa0 	bl	800c4a0 <HAL_TIM_IC_CaptureCallback>
 800bf60:	e005      	b.n	800bf6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7f4 fb8e 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 faa3 	bl	800c4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	f003 0310 	and.w	r3, r3, #16
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d020      	beq.n	800bfc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f003 0310 	and.w	r3, r3, #16
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d01b      	beq.n	800bfc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f06f 0210 	mvn.w	r2, #16
 800bf90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2208      	movs	r2, #8
 800bf96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	69db      	ldr	r3, [r3, #28]
 800bf9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d003      	beq.n	800bfae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fa7a 	bl	800c4a0 <HAL_TIM_IC_CaptureCallback>
 800bfac:	e005      	b.n	800bfba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7f4 fb68 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fa7d 	bl	800c4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00c      	beq.n	800bfe4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f003 0301 	and.w	r3, r3, #1
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d007      	beq.n	800bfe4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f06f 0201 	mvn.w	r2, #1
 800bfdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7f5 fe2a 	bl	8001c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d104      	bne.n	800bff8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00c      	beq.n	800c012 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d007      	beq.n	800c012 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c00a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 ffbb 	bl	800cf88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00c      	beq.n	800c036 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c022:	2b00      	cmp	r3, #0
 800c024:	d007      	beq.n	800c036 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c02e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 ffb3 	bl	800cf9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00c      	beq.n	800c05a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c046:	2b00      	cmp	r3, #0
 800c048:	d007      	beq.n	800c05a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fa37 	bl	800c4c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	f003 0320 	and.w	r3, r3, #32
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00c      	beq.n	800c07e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f003 0320 	and.w	r3, r3, #32
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d007      	beq.n	800c07e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f06f 0220 	mvn.w	r2, #32
 800c076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 ff7b 	bl	800cf74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c07e:	bf00      	nop
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
	...

0800c088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b086      	sub	sp, #24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c094:	2300      	movs	r3, #0
 800c096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d101      	bne.n	800c0a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	e0ff      	b.n	800c2a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b14      	cmp	r3, #20
 800c0b2:	f200 80f0 	bhi.w	800c296 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c0b6:	a201      	add	r2, pc, #4	; (adr r2, 800c0bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0bc:	0800c111 	.word	0x0800c111
 800c0c0:	0800c297 	.word	0x0800c297
 800c0c4:	0800c297 	.word	0x0800c297
 800c0c8:	0800c297 	.word	0x0800c297
 800c0cc:	0800c151 	.word	0x0800c151
 800c0d0:	0800c297 	.word	0x0800c297
 800c0d4:	0800c297 	.word	0x0800c297
 800c0d8:	0800c297 	.word	0x0800c297
 800c0dc:	0800c193 	.word	0x0800c193
 800c0e0:	0800c297 	.word	0x0800c297
 800c0e4:	0800c297 	.word	0x0800c297
 800c0e8:	0800c297 	.word	0x0800c297
 800c0ec:	0800c1d3 	.word	0x0800c1d3
 800c0f0:	0800c297 	.word	0x0800c297
 800c0f4:	0800c297 	.word	0x0800c297
 800c0f8:	0800c297 	.word	0x0800c297
 800c0fc:	0800c215 	.word	0x0800c215
 800c100:	0800c297 	.word	0x0800c297
 800c104:	0800c297 	.word	0x0800c297
 800c108:	0800c297 	.word	0x0800c297
 800c10c:	0800c255 	.word	0x0800c255
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68b9      	ldr	r1, [r7, #8]
 800c116:	4618      	mov	r0, r3
 800c118:	f000 fa86 	bl	800c628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	699a      	ldr	r2, [r3, #24]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f042 0208 	orr.w	r2, r2, #8
 800c12a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	699a      	ldr	r2, [r3, #24]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f022 0204 	bic.w	r2, r2, #4
 800c13a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	6999      	ldr	r1, [r3, #24]
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	691a      	ldr	r2, [r3, #16]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	430a      	orrs	r2, r1
 800c14c:	619a      	str	r2, [r3, #24]
      break;
 800c14e:	e0a5      	b.n	800c29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68b9      	ldr	r1, [r7, #8]
 800c156:	4618      	mov	r0, r3
 800c158:	f000 faf6 	bl	800c748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	699a      	ldr	r2, [r3, #24]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c16a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	699a      	ldr	r2, [r3, #24]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c17a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6999      	ldr	r1, [r3, #24]
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	021a      	lsls	r2, r3, #8
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	430a      	orrs	r2, r1
 800c18e:	619a      	str	r2, [r3, #24]
      break;
 800c190:	e084      	b.n	800c29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68b9      	ldr	r1, [r7, #8]
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 fb5f 	bl	800c85c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	69da      	ldr	r2, [r3, #28]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f042 0208 	orr.w	r2, r2, #8
 800c1ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	69da      	ldr	r2, [r3, #28]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f022 0204 	bic.w	r2, r2, #4
 800c1bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	69d9      	ldr	r1, [r3, #28]
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	691a      	ldr	r2, [r3, #16]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	61da      	str	r2, [r3, #28]
      break;
 800c1d0:	e064      	b.n	800c29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	68b9      	ldr	r1, [r7, #8]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fbc7 	bl	800c96c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	69da      	ldr	r2, [r3, #28]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	69da      	ldr	r2, [r3, #28]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	69d9      	ldr	r1, [r3, #28]
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	021a      	lsls	r2, r3, #8
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	430a      	orrs	r2, r1
 800c210:	61da      	str	r2, [r3, #28]
      break;
 800c212:	e043      	b.n	800c29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68b9      	ldr	r1, [r7, #8]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 fc10 	bl	800ca40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f042 0208 	orr.w	r2, r2, #8
 800c22e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f022 0204 	bic.w	r2, r2, #4
 800c23e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	691a      	ldr	r2, [r3, #16]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	430a      	orrs	r2, r1
 800c250:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c252:	e023      	b.n	800c29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68b9      	ldr	r1, [r7, #8]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 fc54 	bl	800cb08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c26e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c27e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	691b      	ldr	r3, [r3, #16]
 800c28a:	021a      	lsls	r2, r3, #8
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	430a      	orrs	r2, r1
 800c292:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c294:	e002      	b.n	800c29c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	75fb      	strb	r3, [r7, #23]
      break;
 800c29a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c2a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3718      	adds	r7, #24
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop

0800c2b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d101      	bne.n	800c2cc <HAL_TIM_ConfigClockSource+0x1c>
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	e0dc      	b.n	800c486 <HAL_TIM_ConfigClockSource+0x1d6>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2202      	movs	r2, #2
 800c2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	4b6a      	ldr	r3, [pc, #424]	; (800c490 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a64      	ldr	r2, [pc, #400]	; (800c494 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c302:	4293      	cmp	r3, r2
 800c304:	f000 80a9 	beq.w	800c45a <HAL_TIM_ConfigClockSource+0x1aa>
 800c308:	4a62      	ldr	r2, [pc, #392]	; (800c494 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	f200 80ae 	bhi.w	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c310:	4a61      	ldr	r2, [pc, #388]	; (800c498 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c312:	4293      	cmp	r3, r2
 800c314:	f000 80a1 	beq.w	800c45a <HAL_TIM_ConfigClockSource+0x1aa>
 800c318:	4a5f      	ldr	r2, [pc, #380]	; (800c498 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	f200 80a6 	bhi.w	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c320:	4a5e      	ldr	r2, [pc, #376]	; (800c49c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c322:	4293      	cmp	r3, r2
 800c324:	f000 8099 	beq.w	800c45a <HAL_TIM_ConfigClockSource+0x1aa>
 800c328:	4a5c      	ldr	r2, [pc, #368]	; (800c49c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	f200 809e 	bhi.w	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c330:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c334:	f000 8091 	beq.w	800c45a <HAL_TIM_ConfigClockSource+0x1aa>
 800c338:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c33c:	f200 8096 	bhi.w	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c344:	f000 8089 	beq.w	800c45a <HAL_TIM_ConfigClockSource+0x1aa>
 800c348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c34c:	f200 808e 	bhi.w	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c354:	d03e      	beq.n	800c3d4 <HAL_TIM_ConfigClockSource+0x124>
 800c356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c35a:	f200 8087 	bhi.w	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c35e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c362:	f000 8086 	beq.w	800c472 <HAL_TIM_ConfigClockSource+0x1c2>
 800c366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c36a:	d87f      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c36c:	2b70      	cmp	r3, #112	; 0x70
 800c36e:	d01a      	beq.n	800c3a6 <HAL_TIM_ConfigClockSource+0xf6>
 800c370:	2b70      	cmp	r3, #112	; 0x70
 800c372:	d87b      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c374:	2b60      	cmp	r3, #96	; 0x60
 800c376:	d050      	beq.n	800c41a <HAL_TIM_ConfigClockSource+0x16a>
 800c378:	2b60      	cmp	r3, #96	; 0x60
 800c37a:	d877      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c37c:	2b50      	cmp	r3, #80	; 0x50
 800c37e:	d03c      	beq.n	800c3fa <HAL_TIM_ConfigClockSource+0x14a>
 800c380:	2b50      	cmp	r3, #80	; 0x50
 800c382:	d873      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c384:	2b40      	cmp	r3, #64	; 0x40
 800c386:	d058      	beq.n	800c43a <HAL_TIM_ConfigClockSource+0x18a>
 800c388:	2b40      	cmp	r3, #64	; 0x40
 800c38a:	d86f      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c38c:	2b30      	cmp	r3, #48	; 0x30
 800c38e:	d064      	beq.n	800c45a <HAL_TIM_ConfigClockSource+0x1aa>
 800c390:	2b30      	cmp	r3, #48	; 0x30
 800c392:	d86b      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c394:	2b20      	cmp	r3, #32
 800c396:	d060      	beq.n	800c45a <HAL_TIM_ConfigClockSource+0x1aa>
 800c398:	2b20      	cmp	r3, #32
 800c39a:	d867      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d05c      	beq.n	800c45a <HAL_TIM_ConfigClockSource+0x1aa>
 800c3a0:	2b10      	cmp	r3, #16
 800c3a2:	d05a      	beq.n	800c45a <HAL_TIM_ConfigClockSource+0x1aa>
 800c3a4:	e062      	b.n	800c46c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6818      	ldr	r0, [r3, #0]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	6899      	ldr	r1, [r3, #8]
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	685a      	ldr	r2, [r3, #4]
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	f000 fc8b 	bl	800ccd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	609a      	str	r2, [r3, #8]
      break;
 800c3d2:	e04f      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6818      	ldr	r0, [r3, #0]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	6899      	ldr	r1, [r3, #8]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	685a      	ldr	r2, [r3, #4]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	f000 fc74 	bl	800ccd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	689a      	ldr	r2, [r3, #8]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3f6:	609a      	str	r2, [r3, #8]
      break;
 800c3f8:	e03c      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6818      	ldr	r0, [r3, #0]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	6859      	ldr	r1, [r3, #4]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	461a      	mov	r2, r3
 800c408:	f000 fbe4 	bl	800cbd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2150      	movs	r1, #80	; 0x50
 800c412:	4618      	mov	r0, r3
 800c414:	f000 fc3e 	bl	800cc94 <TIM_ITRx_SetConfig>
      break;
 800c418:	e02c      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6818      	ldr	r0, [r3, #0]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	6859      	ldr	r1, [r3, #4]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	461a      	mov	r2, r3
 800c428:	f000 fc03 	bl	800cc32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2160      	movs	r1, #96	; 0x60
 800c432:	4618      	mov	r0, r3
 800c434:	f000 fc2e 	bl	800cc94 <TIM_ITRx_SetConfig>
      break;
 800c438:	e01c      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6818      	ldr	r0, [r3, #0]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	6859      	ldr	r1, [r3, #4]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	461a      	mov	r2, r3
 800c448:	f000 fbc4 	bl	800cbd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2140      	movs	r1, #64	; 0x40
 800c452:	4618      	mov	r0, r3
 800c454:	f000 fc1e 	bl	800cc94 <TIM_ITRx_SetConfig>
      break;
 800c458:	e00c      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4619      	mov	r1, r3
 800c464:	4610      	mov	r0, r2
 800c466:	f000 fc15 	bl	800cc94 <TIM_ITRx_SetConfig>
      break;
 800c46a:	e003      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	73fb      	strb	r3, [r7, #15]
      break;
 800c470:	e000      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c484:	7bfb      	ldrb	r3, [r7, #15]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	ffceff88 	.word	0xffceff88
 800c494:	00100040 	.word	0x00100040
 800c498:	00100030 	.word	0x00100030
 800c49c:	00100020 	.word	0x00100020

0800c4a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4a46      	ldr	r2, [pc, #280]	; (800c608 <TIM_Base_SetConfig+0x12c>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d013      	beq.n	800c51c <TIM_Base_SetConfig+0x40>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4fa:	d00f      	beq.n	800c51c <TIM_Base_SetConfig+0x40>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4a43      	ldr	r2, [pc, #268]	; (800c60c <TIM_Base_SetConfig+0x130>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d00b      	beq.n	800c51c <TIM_Base_SetConfig+0x40>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4a42      	ldr	r2, [pc, #264]	; (800c610 <TIM_Base_SetConfig+0x134>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d007      	beq.n	800c51c <TIM_Base_SetConfig+0x40>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4a41      	ldr	r2, [pc, #260]	; (800c614 <TIM_Base_SetConfig+0x138>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d003      	beq.n	800c51c <TIM_Base_SetConfig+0x40>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4a40      	ldr	r2, [pc, #256]	; (800c618 <TIM_Base_SetConfig+0x13c>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d108      	bne.n	800c52e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a35      	ldr	r2, [pc, #212]	; (800c608 <TIM_Base_SetConfig+0x12c>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d01f      	beq.n	800c576 <TIM_Base_SetConfig+0x9a>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c53c:	d01b      	beq.n	800c576 <TIM_Base_SetConfig+0x9a>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a32      	ldr	r2, [pc, #200]	; (800c60c <TIM_Base_SetConfig+0x130>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d017      	beq.n	800c576 <TIM_Base_SetConfig+0x9a>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a31      	ldr	r2, [pc, #196]	; (800c610 <TIM_Base_SetConfig+0x134>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d013      	beq.n	800c576 <TIM_Base_SetConfig+0x9a>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a30      	ldr	r2, [pc, #192]	; (800c614 <TIM_Base_SetConfig+0x138>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d00f      	beq.n	800c576 <TIM_Base_SetConfig+0x9a>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a2f      	ldr	r2, [pc, #188]	; (800c618 <TIM_Base_SetConfig+0x13c>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d00b      	beq.n	800c576 <TIM_Base_SetConfig+0x9a>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a2e      	ldr	r2, [pc, #184]	; (800c61c <TIM_Base_SetConfig+0x140>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d007      	beq.n	800c576 <TIM_Base_SetConfig+0x9a>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a2d      	ldr	r2, [pc, #180]	; (800c620 <TIM_Base_SetConfig+0x144>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d003      	beq.n	800c576 <TIM_Base_SetConfig+0x9a>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4a2c      	ldr	r2, [pc, #176]	; (800c624 <TIM_Base_SetConfig+0x148>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d108      	bne.n	800c588 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c57c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	4313      	orrs	r3, r2
 800c586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	695b      	ldr	r3, [r3, #20]
 800c592:	4313      	orrs	r3, r2
 800c594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	689a      	ldr	r2, [r3, #8]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a16      	ldr	r2, [pc, #88]	; (800c608 <TIM_Base_SetConfig+0x12c>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d00f      	beq.n	800c5d4 <TIM_Base_SetConfig+0xf8>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a18      	ldr	r2, [pc, #96]	; (800c618 <TIM_Base_SetConfig+0x13c>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d00b      	beq.n	800c5d4 <TIM_Base_SetConfig+0xf8>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a17      	ldr	r2, [pc, #92]	; (800c61c <TIM_Base_SetConfig+0x140>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d007      	beq.n	800c5d4 <TIM_Base_SetConfig+0xf8>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a16      	ldr	r2, [pc, #88]	; (800c620 <TIM_Base_SetConfig+0x144>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d003      	beq.n	800c5d4 <TIM_Base_SetConfig+0xf8>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a15      	ldr	r2, [pc, #84]	; (800c624 <TIM_Base_SetConfig+0x148>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d103      	bne.n	800c5dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	691a      	ldr	r2, [r3, #16]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d105      	bne.n	800c5fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	f023 0201 	bic.w	r2, r3, #1
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	611a      	str	r2, [r3, #16]
  }
}
 800c5fa:	bf00      	nop
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	40010000 	.word	0x40010000
 800c60c:	40000400 	.word	0x40000400
 800c610:	40000800 	.word	0x40000800
 800c614:	40000c00 	.word	0x40000c00
 800c618:	40010400 	.word	0x40010400
 800c61c:	40014000 	.word	0x40014000
 800c620:	40014400 	.word	0x40014400
 800c624:	40014800 	.word	0x40014800

0800c628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c628:	b480      	push	{r7}
 800c62a:	b087      	sub	sp, #28
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6a1b      	ldr	r3, [r3, #32]
 800c63c:	f023 0201 	bic.w	r2, r3, #1
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	4b37      	ldr	r3, [pc, #220]	; (800c730 <TIM_OC1_SetConfig+0x108>)
 800c654:	4013      	ands	r3, r2
 800c656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f023 0303 	bic.w	r3, r3, #3
 800c65e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	4313      	orrs	r3, r2
 800c668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	f023 0302 	bic.w	r3, r3, #2
 800c670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	4313      	orrs	r3, r2
 800c67a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a2d      	ldr	r2, [pc, #180]	; (800c734 <TIM_OC1_SetConfig+0x10c>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d00f      	beq.n	800c6a4 <TIM_OC1_SetConfig+0x7c>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a2c      	ldr	r2, [pc, #176]	; (800c738 <TIM_OC1_SetConfig+0x110>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d00b      	beq.n	800c6a4 <TIM_OC1_SetConfig+0x7c>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a2b      	ldr	r2, [pc, #172]	; (800c73c <TIM_OC1_SetConfig+0x114>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d007      	beq.n	800c6a4 <TIM_OC1_SetConfig+0x7c>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a2a      	ldr	r2, [pc, #168]	; (800c740 <TIM_OC1_SetConfig+0x118>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d003      	beq.n	800c6a4 <TIM_OC1_SetConfig+0x7c>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a29      	ldr	r2, [pc, #164]	; (800c744 <TIM_OC1_SetConfig+0x11c>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d10c      	bne.n	800c6be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	f023 0308 	bic.w	r3, r3, #8
 800c6aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f023 0304 	bic.w	r3, r3, #4
 800c6bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a1c      	ldr	r2, [pc, #112]	; (800c734 <TIM_OC1_SetConfig+0x10c>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d00f      	beq.n	800c6e6 <TIM_OC1_SetConfig+0xbe>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a1b      	ldr	r2, [pc, #108]	; (800c738 <TIM_OC1_SetConfig+0x110>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d00b      	beq.n	800c6e6 <TIM_OC1_SetConfig+0xbe>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a1a      	ldr	r2, [pc, #104]	; (800c73c <TIM_OC1_SetConfig+0x114>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d007      	beq.n	800c6e6 <TIM_OC1_SetConfig+0xbe>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a19      	ldr	r2, [pc, #100]	; (800c740 <TIM_OC1_SetConfig+0x118>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d003      	beq.n	800c6e6 <TIM_OC1_SetConfig+0xbe>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a18      	ldr	r2, [pc, #96]	; (800c744 <TIM_OC1_SetConfig+0x11c>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d111      	bne.n	800c70a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	695b      	ldr	r3, [r3, #20]
 800c6fa:	693a      	ldr	r2, [r7, #16]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	699b      	ldr	r3, [r3, #24]
 800c704:	693a      	ldr	r2, [r7, #16]
 800c706:	4313      	orrs	r3, r2
 800c708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	685a      	ldr	r2, [r3, #4]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	697a      	ldr	r2, [r7, #20]
 800c722:	621a      	str	r2, [r3, #32]
}
 800c724:	bf00      	nop
 800c726:	371c      	adds	r7, #28
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr
 800c730:	fffeff8f 	.word	0xfffeff8f
 800c734:	40010000 	.word	0x40010000
 800c738:	40010400 	.word	0x40010400
 800c73c:	40014000 	.word	0x40014000
 800c740:	40014400 	.word	0x40014400
 800c744:	40014800 	.word	0x40014800

0800c748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c748:	b480      	push	{r7}
 800c74a:	b087      	sub	sp, #28
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a1b      	ldr	r3, [r3, #32]
 800c756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6a1b      	ldr	r3, [r3, #32]
 800c75c:	f023 0210 	bic.w	r2, r3, #16
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	699b      	ldr	r3, [r3, #24]
 800c76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	4b34      	ldr	r3, [pc, #208]	; (800c844 <TIM_OC2_SetConfig+0xfc>)
 800c774:	4013      	ands	r3, r2
 800c776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	021b      	lsls	r3, r3, #8
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	4313      	orrs	r3, r2
 800c78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	f023 0320 	bic.w	r3, r3, #32
 800c792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	011b      	lsls	r3, r3, #4
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a29      	ldr	r2, [pc, #164]	; (800c848 <TIM_OC2_SetConfig+0x100>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d003      	beq.n	800c7b0 <TIM_OC2_SetConfig+0x68>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a28      	ldr	r2, [pc, #160]	; (800c84c <TIM_OC2_SetConfig+0x104>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d10d      	bne.n	800c7cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	011b      	lsls	r3, r3, #4
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4a1e      	ldr	r2, [pc, #120]	; (800c848 <TIM_OC2_SetConfig+0x100>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d00f      	beq.n	800c7f4 <TIM_OC2_SetConfig+0xac>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4a1d      	ldr	r2, [pc, #116]	; (800c84c <TIM_OC2_SetConfig+0x104>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d00b      	beq.n	800c7f4 <TIM_OC2_SetConfig+0xac>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4a1c      	ldr	r2, [pc, #112]	; (800c850 <TIM_OC2_SetConfig+0x108>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d007      	beq.n	800c7f4 <TIM_OC2_SetConfig+0xac>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4a1b      	ldr	r2, [pc, #108]	; (800c854 <TIM_OC2_SetConfig+0x10c>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d003      	beq.n	800c7f4 <TIM_OC2_SetConfig+0xac>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4a1a      	ldr	r2, [pc, #104]	; (800c858 <TIM_OC2_SetConfig+0x110>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d113      	bne.n	800c81c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	695b      	ldr	r3, [r3, #20]
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	693a      	ldr	r2, [r7, #16]
 800c80c:	4313      	orrs	r3, r2
 800c80e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	693a      	ldr	r2, [r7, #16]
 800c818:	4313      	orrs	r3, r2
 800c81a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	693a      	ldr	r2, [r7, #16]
 800c820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	697a      	ldr	r2, [r7, #20]
 800c834:	621a      	str	r2, [r3, #32]
}
 800c836:	bf00      	nop
 800c838:	371c      	adds	r7, #28
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	feff8fff 	.word	0xfeff8fff
 800c848:	40010000 	.word	0x40010000
 800c84c:	40010400 	.word	0x40010400
 800c850:	40014000 	.word	0x40014000
 800c854:	40014400 	.word	0x40014400
 800c858:	40014800 	.word	0x40014800

0800c85c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b087      	sub	sp, #28
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a1b      	ldr	r3, [r3, #32]
 800c870:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	69db      	ldr	r3, [r3, #28]
 800c882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	4b33      	ldr	r3, [pc, #204]	; (800c954 <TIM_OC3_SetConfig+0xf8>)
 800c888:	4013      	ands	r3, r2
 800c88a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f023 0303 	bic.w	r3, r3, #3
 800c892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	4313      	orrs	r3, r2
 800c89c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c8a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	021b      	lsls	r3, r3, #8
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4a28      	ldr	r2, [pc, #160]	; (800c958 <TIM_OC3_SetConfig+0xfc>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d003      	beq.n	800c8c2 <TIM_OC3_SetConfig+0x66>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4a27      	ldr	r2, [pc, #156]	; (800c95c <TIM_OC3_SetConfig+0x100>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d10d      	bne.n	800c8de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	021b      	lsls	r3, r3, #8
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a1d      	ldr	r2, [pc, #116]	; (800c958 <TIM_OC3_SetConfig+0xfc>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d00f      	beq.n	800c906 <TIM_OC3_SetConfig+0xaa>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a1c      	ldr	r2, [pc, #112]	; (800c95c <TIM_OC3_SetConfig+0x100>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d00b      	beq.n	800c906 <TIM_OC3_SetConfig+0xaa>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a1b      	ldr	r2, [pc, #108]	; (800c960 <TIM_OC3_SetConfig+0x104>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d007      	beq.n	800c906 <TIM_OC3_SetConfig+0xaa>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a1a      	ldr	r2, [pc, #104]	; (800c964 <TIM_OC3_SetConfig+0x108>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d003      	beq.n	800c906 <TIM_OC3_SetConfig+0xaa>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4a19      	ldr	r2, [pc, #100]	; (800c968 <TIM_OC3_SetConfig+0x10c>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d113      	bne.n	800c92e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c90c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	695b      	ldr	r3, [r3, #20]
 800c91a:	011b      	lsls	r3, r3, #4
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	4313      	orrs	r3, r2
 800c920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	699b      	ldr	r3, [r3, #24]
 800c926:	011b      	lsls	r3, r3, #4
 800c928:	693a      	ldr	r2, [r7, #16]
 800c92a:	4313      	orrs	r3, r2
 800c92c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	685a      	ldr	r2, [r3, #4]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	697a      	ldr	r2, [r7, #20]
 800c946:	621a      	str	r2, [r3, #32]
}
 800c948:	bf00      	nop
 800c94a:	371c      	adds	r7, #28
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr
 800c954:	fffeff8f 	.word	0xfffeff8f
 800c958:	40010000 	.word	0x40010000
 800c95c:	40010400 	.word	0x40010400
 800c960:	40014000 	.word	0x40014000
 800c964:	40014400 	.word	0x40014400
 800c968:	40014800 	.word	0x40014800

0800c96c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b087      	sub	sp, #28
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6a1b      	ldr	r3, [r3, #32]
 800c980:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	69db      	ldr	r3, [r3, #28]
 800c992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	4b24      	ldr	r3, [pc, #144]	; (800ca28 <TIM_OC4_SetConfig+0xbc>)
 800c998:	4013      	ands	r3, r2
 800c99a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	021b      	lsls	r3, r3, #8
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	031b      	lsls	r3, r3, #12
 800c9be:	693a      	ldr	r2, [r7, #16]
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a19      	ldr	r2, [pc, #100]	; (800ca2c <TIM_OC4_SetConfig+0xc0>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d00f      	beq.n	800c9ec <TIM_OC4_SetConfig+0x80>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a18      	ldr	r2, [pc, #96]	; (800ca30 <TIM_OC4_SetConfig+0xc4>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d00b      	beq.n	800c9ec <TIM_OC4_SetConfig+0x80>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a17      	ldr	r2, [pc, #92]	; (800ca34 <TIM_OC4_SetConfig+0xc8>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d007      	beq.n	800c9ec <TIM_OC4_SetConfig+0x80>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a16      	ldr	r2, [pc, #88]	; (800ca38 <TIM_OC4_SetConfig+0xcc>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d003      	beq.n	800c9ec <TIM_OC4_SetConfig+0x80>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a15      	ldr	r2, [pc, #84]	; (800ca3c <TIM_OC4_SetConfig+0xd0>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d109      	bne.n	800ca00 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	695b      	ldr	r3, [r3, #20]
 800c9f8:	019b      	lsls	r3, r3, #6
 800c9fa:	697a      	ldr	r2, [r7, #20]
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	697a      	ldr	r2, [r7, #20]
 800ca04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	685a      	ldr	r2, [r3, #4]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	621a      	str	r2, [r3, #32]
}
 800ca1a:	bf00      	nop
 800ca1c:	371c      	adds	r7, #28
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	feff8fff 	.word	0xfeff8fff
 800ca2c:	40010000 	.word	0x40010000
 800ca30:	40010400 	.word	0x40010400
 800ca34:	40014000 	.word	0x40014000
 800ca38:	40014400 	.word	0x40014400
 800ca3c:	40014800 	.word	0x40014800

0800ca40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b087      	sub	sp, #28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6a1b      	ldr	r3, [r3, #32]
 800ca4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	4b21      	ldr	r3, [pc, #132]	; (800caf0 <TIM_OC5_SetConfig+0xb0>)
 800ca6c:	4013      	ands	r3, r2
 800ca6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	4313      	orrs	r3, r2
 800ca78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ca80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	041b      	lsls	r3, r3, #16
 800ca88:	693a      	ldr	r2, [r7, #16]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4a18      	ldr	r2, [pc, #96]	; (800caf4 <TIM_OC5_SetConfig+0xb4>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d00f      	beq.n	800cab6 <TIM_OC5_SetConfig+0x76>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a17      	ldr	r2, [pc, #92]	; (800caf8 <TIM_OC5_SetConfig+0xb8>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d00b      	beq.n	800cab6 <TIM_OC5_SetConfig+0x76>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a16      	ldr	r2, [pc, #88]	; (800cafc <TIM_OC5_SetConfig+0xbc>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d007      	beq.n	800cab6 <TIM_OC5_SetConfig+0x76>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4a15      	ldr	r2, [pc, #84]	; (800cb00 <TIM_OC5_SetConfig+0xc0>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d003      	beq.n	800cab6 <TIM_OC5_SetConfig+0x76>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a14      	ldr	r2, [pc, #80]	; (800cb04 <TIM_OC5_SetConfig+0xc4>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d109      	bne.n	800caca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cabc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	695b      	ldr	r3, [r3, #20]
 800cac2:	021b      	lsls	r3, r3, #8
 800cac4:	697a      	ldr	r2, [r7, #20]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	685a      	ldr	r2, [r3, #4]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	621a      	str	r2, [r3, #32]
}
 800cae4:	bf00      	nop
 800cae6:	371c      	adds	r7, #28
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	fffeff8f 	.word	0xfffeff8f
 800caf4:	40010000 	.word	0x40010000
 800caf8:	40010400 	.word	0x40010400
 800cafc:	40014000 	.word	0x40014000
 800cb00:	40014400 	.word	0x40014400
 800cb04:	40014800 	.word	0x40014800

0800cb08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a1b      	ldr	r3, [r3, #32]
 800cb16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6a1b      	ldr	r3, [r3, #32]
 800cb1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	4b22      	ldr	r3, [pc, #136]	; (800cbbc <TIM_OC6_SetConfig+0xb4>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	021b      	lsls	r3, r3, #8
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	051b      	lsls	r3, r3, #20
 800cb52:	693a      	ldr	r2, [r7, #16]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4a19      	ldr	r2, [pc, #100]	; (800cbc0 <TIM_OC6_SetConfig+0xb8>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d00f      	beq.n	800cb80 <TIM_OC6_SetConfig+0x78>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a18      	ldr	r2, [pc, #96]	; (800cbc4 <TIM_OC6_SetConfig+0xbc>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d00b      	beq.n	800cb80 <TIM_OC6_SetConfig+0x78>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a17      	ldr	r2, [pc, #92]	; (800cbc8 <TIM_OC6_SetConfig+0xc0>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d007      	beq.n	800cb80 <TIM_OC6_SetConfig+0x78>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4a16      	ldr	r2, [pc, #88]	; (800cbcc <TIM_OC6_SetConfig+0xc4>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d003      	beq.n	800cb80 <TIM_OC6_SetConfig+0x78>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a15      	ldr	r2, [pc, #84]	; (800cbd0 <TIM_OC6_SetConfig+0xc8>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d109      	bne.n	800cb94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	695b      	ldr	r3, [r3, #20]
 800cb8c:	029b      	lsls	r3, r3, #10
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	693a      	ldr	r2, [r7, #16]
 800cbac:	621a      	str	r2, [r3, #32]
}
 800cbae:	bf00      	nop
 800cbb0:	371c      	adds	r7, #28
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	feff8fff 	.word	0xfeff8fff
 800cbc0:	40010000 	.word	0x40010000
 800cbc4:	40010400 	.word	0x40010400
 800cbc8:	40014000 	.word	0x40014000
 800cbcc:	40014400 	.word	0x40014400
 800cbd0:	40014800 	.word	0x40014800

0800cbd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b087      	sub	sp, #28
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	6a1b      	ldr	r3, [r3, #32]
 800cbea:	f023 0201 	bic.w	r2, r3, #1
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	699b      	ldr	r3, [r3, #24]
 800cbf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	011b      	lsls	r3, r3, #4
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	f023 030a 	bic.w	r3, r3, #10
 800cc10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	4313      	orrs	r3, r2
 800cc18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	693a      	ldr	r2, [r7, #16]
 800cc1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	697a      	ldr	r2, [r7, #20]
 800cc24:	621a      	str	r2, [r3, #32]
}
 800cc26:	bf00      	nop
 800cc28:	371c      	adds	r7, #28
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr

0800cc32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc32:	b480      	push	{r7}
 800cc34:	b087      	sub	sp, #28
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	60f8      	str	r0, [r7, #12]
 800cc3a:	60b9      	str	r1, [r7, #8]
 800cc3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6a1b      	ldr	r3, [r3, #32]
 800cc42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6a1b      	ldr	r3, [r3, #32]
 800cc48:	f023 0210 	bic.w	r2, r3, #16
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	699b      	ldr	r3, [r3, #24]
 800cc54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	031b      	lsls	r3, r3, #12
 800cc62:	693a      	ldr	r2, [r7, #16]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	011b      	lsls	r3, r3, #4
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	4313      	orrs	r3, r2
 800cc78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	621a      	str	r2, [r3, #32]
}
 800cc86:	bf00      	nop
 800cc88:	371c      	adds	r7, #28
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
	...

0800cc94 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	4b09      	ldr	r3, [pc, #36]	; (800cccc <TIM_ITRx_SetConfig+0x38>)
 800cca8:	4013      	ands	r3, r2
 800ccaa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	f043 0307 	orr.w	r3, r3, #7
 800ccb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	609a      	str	r2, [r3, #8]
}
 800ccbe:	bf00      	nop
 800ccc0:	3714      	adds	r7, #20
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	ffcfff8f 	.word	0xffcfff8f

0800ccd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b087      	sub	sp, #28
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	021a      	lsls	r2, r3, #8
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	431a      	orrs	r2, r3
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	697a      	ldr	r2, [r7, #20]
 800cd02:	609a      	str	r2, [r3, #8]
}
 800cd04:	bf00      	nop
 800cd06:	371c      	adds	r7, #28
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b087      	sub	sp, #28
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f003 031f 	and.w	r3, r3, #31
 800cd22:	2201      	movs	r2, #1
 800cd24:	fa02 f303 	lsl.w	r3, r2, r3
 800cd28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6a1a      	ldr	r2, [r3, #32]
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	43db      	mvns	r3, r3
 800cd32:	401a      	ands	r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6a1a      	ldr	r2, [r3, #32]
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	f003 031f 	and.w	r3, r3, #31
 800cd42:	6879      	ldr	r1, [r7, #4]
 800cd44:	fa01 f303 	lsl.w	r3, r1, r3
 800cd48:	431a      	orrs	r2, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	621a      	str	r2, [r3, #32]
}
 800cd4e:	bf00      	nop
 800cd50:	371c      	adds	r7, #28
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr
	...

0800cd5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d101      	bne.n	800cd74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd70:	2302      	movs	r3, #2
 800cd72:	e06d      	b.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2201      	movs	r2, #1
 800cd78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2202      	movs	r2, #2
 800cd80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a30      	ldr	r2, [pc, #192]	; (800ce5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d004      	beq.n	800cda8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a2f      	ldr	r2, [pc, #188]	; (800ce60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d108      	bne.n	800cdba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cdae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a20      	ldr	r2, [pc, #128]	; (800ce5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d022      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cde6:	d01d      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a1d      	ldr	r2, [pc, #116]	; (800ce64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d018      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a1c      	ldr	r2, [pc, #112]	; (800ce68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d013      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a1a      	ldr	r2, [pc, #104]	; (800ce6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d00e      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a15      	ldr	r2, [pc, #84]	; (800ce60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d009      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a16      	ldr	r2, [pc, #88]	; (800ce70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d004      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a15      	ldr	r2, [pc, #84]	; (800ce74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d10c      	bne.n	800ce3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce4e:	2300      	movs	r3, #0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	40010000 	.word	0x40010000
 800ce60:	40010400 	.word	0x40010400
 800ce64:	40000400 	.word	0x40000400
 800ce68:	40000800 	.word	0x40000800
 800ce6c:	40000c00 	.word	0x40000c00
 800ce70:	40001800 	.word	0x40001800
 800ce74:	40014000 	.word	0x40014000

0800ce78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ce82:	2300      	movs	r3, #0
 800ce84:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d101      	bne.n	800ce94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ce90:	2302      	movs	r3, #2
 800ce92:	e065      	b.n	800cf60 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	4313      	orrs	r3, r2
 800cea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	4313      	orrs	r3, r2
 800cec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4313      	orrs	r3, r2
 800ced2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	691b      	ldr	r3, [r3, #16]
 800cede:	4313      	orrs	r3, r2
 800cee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	695b      	ldr	r3, [r3, #20]
 800ceec:	4313      	orrs	r3, r2
 800ceee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefa:	4313      	orrs	r3, r2
 800cefc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	699b      	ldr	r3, [r3, #24]
 800cf08:	041b      	lsls	r3, r3, #16
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a16      	ldr	r2, [pc, #88]	; (800cf6c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d004      	beq.n	800cf22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a14      	ldr	r2, [pc, #80]	; (800cf70 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d115      	bne.n	800cf4e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2c:	051b      	lsls	r3, r3, #20
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	69db      	ldr	r3, [r3, #28]
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	6a1b      	ldr	r3, [r3, #32]
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3714      	adds	r7, #20
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	40010000 	.word	0x40010000
 800cf70:	40010400 	.word	0x40010400

0800cf74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf7c:	bf00      	nop
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d101      	bne.n	800cfc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e042      	b.n	800d048 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d106      	bne.n	800cfda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7f5 f9b3 	bl	8002340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2224      	movs	r2, #36	; 0x24
 800cfde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f022 0201 	bic.w	r2, r2, #1
 800cff0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d002      	beq.n	800d000 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f001 fa44 	bl	800e488 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fcd9 	bl	800d9b8 <UART_SetConfig>
 800d006:	4603      	mov	r3, r0
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d101      	bne.n	800d010 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d00c:	2301      	movs	r3, #1
 800d00e:	e01b      	b.n	800d048 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d01e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	689a      	ldr	r2, [r3, #8]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d02e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f042 0201 	orr.w	r2, r2, #1
 800d03e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f001 fac3 	bl	800e5cc <UART_CheckIdleState>
 800d046:	4603      	mov	r3, r0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b08a      	sub	sp, #40	; 0x28
 800d054:	af02      	add	r7, sp, #8
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	603b      	str	r3, [r7, #0]
 800d05c:	4613      	mov	r3, r2
 800d05e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d066:	2b20      	cmp	r3, #32
 800d068:	d17b      	bne.n	800d162 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <HAL_UART_Transmit+0x26>
 800d070:	88fb      	ldrh	r3, [r7, #6]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e074      	b.n	800d164 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2200      	movs	r2, #0
 800d07e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2221      	movs	r2, #33	; 0x21
 800d086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d08a:	f7f5 fc93 	bl	80029b4 <HAL_GetTick>
 800d08e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	88fa      	ldrh	r2, [r7, #6]
 800d094:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	88fa      	ldrh	r2, [r7, #6]
 800d09c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0a8:	d108      	bne.n	800d0bc <HAL_UART_Transmit+0x6c>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	691b      	ldr	r3, [r3, #16]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d104      	bne.n	800d0bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	61bb      	str	r3, [r7, #24]
 800d0ba:	e003      	b.n	800d0c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d0c4:	e030      	b.n	800d128 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	9300      	str	r3, [sp, #0]
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	2180      	movs	r1, #128	; 0x80
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	f001 fb25 	bl	800e720 <UART_WaitOnFlagUntilTimeout>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d005      	beq.n	800d0e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2220      	movs	r2, #32
 800d0e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d0e4:	2303      	movs	r3, #3
 800d0e6:	e03d      	b.n	800d164 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10b      	bne.n	800d106 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	881b      	ldrh	r3, [r3, #0]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	3302      	adds	r3, #2
 800d102:	61bb      	str	r3, [r7, #24]
 800d104:	e007      	b.n	800d116 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	781a      	ldrb	r2, [r3, #0]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	3301      	adds	r3, #1
 800d114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	3b01      	subs	r3, #1
 800d120:	b29a      	uxth	r2, r3
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d12e:	b29b      	uxth	r3, r3
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1c8      	bne.n	800d0c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	2200      	movs	r2, #0
 800d13c:	2140      	movs	r1, #64	; 0x40
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f001 faee 	bl	800e720 <UART_WaitOnFlagUntilTimeout>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d005      	beq.n	800d156 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2220      	movs	r2, #32
 800d14e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d152:	2303      	movs	r3, #3
 800d154:	e006      	b.n	800d164 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2220      	movs	r2, #32
 800d15a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d15e:	2300      	movs	r3, #0
 800d160:	e000      	b.n	800d164 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d162:	2302      	movs	r3, #2
  }
}
 800d164:	4618      	mov	r0, r3
 800d166:	3720      	adds	r7, #32
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08a      	sub	sp, #40	; 0x28
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	4613      	mov	r3, r2
 800d178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d180:	2b20      	cmp	r3, #32
 800d182:	d137      	bne.n	800d1f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d002      	beq.n	800d190 <HAL_UART_Receive_IT+0x24>
 800d18a:	88fb      	ldrh	r3, [r7, #6]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	e030      	b.n	800d1f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a18      	ldr	r2, [pc, #96]	; (800d200 <HAL_UART_Receive_IT+0x94>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d01f      	beq.n	800d1e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d018      	beq.n	800d1e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	e853 3f00 	ldrex	r3, [r3]
 800d1be:	613b      	str	r3, [r7, #16]
   return(result);
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d1c6:	627b      	str	r3, [r7, #36]	; 0x24
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d0:	623b      	str	r3, [r7, #32]
 800d1d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d4:	69f9      	ldr	r1, [r7, #28]
 800d1d6:	6a3a      	ldr	r2, [r7, #32]
 800d1d8:	e841 2300 	strex	r3, r2, [r1]
 800d1dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1e6      	bne.n	800d1b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d1e4:	88fb      	ldrh	r3, [r7, #6]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	68b9      	ldr	r1, [r7, #8]
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f001 fb06 	bl	800e7fc <UART_Start_Receive_IT>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	e000      	b.n	800d1f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d1f4:	2302      	movs	r3, #2
  }
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3728      	adds	r7, #40	; 0x28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	58000c00 	.word	0x58000c00

0800d204 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b0ba      	sub	sp, #232	; 0xe8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	69db      	ldr	r3, [r3, #28]
 800d212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d22a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d22e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d232:	4013      	ands	r3, r2
 800d234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d11b      	bne.n	800d278 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d244:	f003 0320 	and.w	r3, r3, #32
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d015      	beq.n	800d278 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d250:	f003 0320 	and.w	r3, r3, #32
 800d254:	2b00      	cmp	r3, #0
 800d256:	d105      	bne.n	800d264 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d25c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d009      	beq.n	800d278 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 8377 	beq.w	800d95c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	4798      	blx	r3
      }
      return;
 800d276:	e371      	b.n	800d95c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 8123 	beq.w	800d4c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d282:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d286:	4b8d      	ldr	r3, [pc, #564]	; (800d4bc <HAL_UART_IRQHandler+0x2b8>)
 800d288:	4013      	ands	r3, r2
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d106      	bne.n	800d29c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d28e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d292:	4b8b      	ldr	r3, [pc, #556]	; (800d4c0 <HAL_UART_IRQHandler+0x2bc>)
 800d294:	4013      	ands	r3, r2
 800d296:	2b00      	cmp	r3, #0
 800d298:	f000 8116 	beq.w	800d4c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d011      	beq.n	800d2cc <HAL_UART_IRQHandler+0xc8>
 800d2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00b      	beq.n	800d2cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2c2:	f043 0201 	orr.w	r2, r3, #1
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2d0:	f003 0302 	and.w	r3, r3, #2
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d011      	beq.n	800d2fc <HAL_UART_IRQHandler+0xf8>
 800d2d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2dc:	f003 0301 	and.w	r3, r3, #1
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00b      	beq.n	800d2fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2f2:	f043 0204 	orr.w	r2, r3, #4
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d300:	f003 0304 	and.w	r3, r3, #4
 800d304:	2b00      	cmp	r3, #0
 800d306:	d011      	beq.n	800d32c <HAL_UART_IRQHandler+0x128>
 800d308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d30c:	f003 0301 	and.w	r3, r3, #1
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00b      	beq.n	800d32c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2204      	movs	r2, #4
 800d31a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d322:	f043 0202 	orr.w	r2, r3, #2
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d330:	f003 0308 	and.w	r3, r3, #8
 800d334:	2b00      	cmp	r3, #0
 800d336:	d017      	beq.n	800d368 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d33c:	f003 0320 	and.w	r3, r3, #32
 800d340:	2b00      	cmp	r3, #0
 800d342:	d105      	bne.n	800d350 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d344:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d348:	4b5c      	ldr	r3, [pc, #368]	; (800d4bc <HAL_UART_IRQHandler+0x2b8>)
 800d34a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00b      	beq.n	800d368 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2208      	movs	r2, #8
 800d356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d35e:	f043 0208 	orr.w	r2, r3, #8
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d36c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d370:	2b00      	cmp	r3, #0
 800d372:	d012      	beq.n	800d39a <HAL_UART_IRQHandler+0x196>
 800d374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00c      	beq.n	800d39a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d388:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d390:	f043 0220 	orr.w	r2, r3, #32
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f000 82dd 	beq.w	800d960 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d3a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3aa:	f003 0320 	and.w	r3, r3, #32
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d013      	beq.n	800d3da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d3b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3b6:	f003 0320 	and.w	r3, r3, #32
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d105      	bne.n	800d3ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d3be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d007      	beq.n	800d3da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d003      	beq.n	800d3da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ee:	2b40      	cmp	r3, #64	; 0x40
 800d3f0:	d005      	beq.n	800d3fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d3f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d3f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d054      	beq.n	800d4a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f001 fb1e 	bl	800ea40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d40e:	2b40      	cmp	r3, #64	; 0x40
 800d410:	d146      	bne.n	800d4a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3308      	adds	r3, #8
 800d418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d420:	e853 3f00 	ldrex	r3, [r3]
 800d424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d42c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3308      	adds	r3, #8
 800d43a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d43e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d446:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d44a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d44e:	e841 2300 	strex	r3, r2, [r1]
 800d452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1d9      	bne.n	800d412 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d464:	2b00      	cmp	r3, #0
 800d466:	d017      	beq.n	800d498 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d46e:	4a15      	ldr	r2, [pc, #84]	; (800d4c4 <HAL_UART_IRQHandler+0x2c0>)
 800d470:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d478:	4618      	mov	r0, r3
 800d47a:	f7f8 fa6f 	bl	800595c <HAL_DMA_Abort_IT>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d019      	beq.n	800d4b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d48a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d492:	4610      	mov	r0, r2
 800d494:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d496:	e00f      	b.n	800d4b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 fa77 	bl	800d98c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d49e:	e00b      	b.n	800d4b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 fa73 	bl	800d98c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4a6:	e007      	b.n	800d4b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 fa6f 	bl	800d98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d4b6:	e253      	b.n	800d960 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4b8:	bf00      	nop
    return;
 800d4ba:	e251      	b.n	800d960 <HAL_UART_IRQHandler+0x75c>
 800d4bc:	10000001 	.word	0x10000001
 800d4c0:	04000120 	.word	0x04000120
 800d4c4:	0800eb0d 	.word	0x0800eb0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	f040 81e7 	bne.w	800d8a0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4d6:	f003 0310 	and.w	r3, r3, #16
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f000 81e0 	beq.w	800d8a0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4e4:	f003 0310 	and.w	r3, r3, #16
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	f000 81d9 	beq.w	800d8a0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2210      	movs	r2, #16
 800d4f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d500:	2b40      	cmp	r3, #64	; 0x40
 800d502:	f040 8151 	bne.w	800d7a8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a96      	ldr	r2, [pc, #600]	; (800d768 <HAL_UART_IRQHandler+0x564>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d068      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a93      	ldr	r2, [pc, #588]	; (800d76c <HAL_UART_IRQHandler+0x568>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d061      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a91      	ldr	r2, [pc, #580]	; (800d770 <HAL_UART_IRQHandler+0x56c>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d05a      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a8e      	ldr	r2, [pc, #568]	; (800d774 <HAL_UART_IRQHandler+0x570>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d053      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4a8c      	ldr	r2, [pc, #560]	; (800d778 <HAL_UART_IRQHandler+0x574>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d04c      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a89      	ldr	r2, [pc, #548]	; (800d77c <HAL_UART_IRQHandler+0x578>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d045      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a87      	ldr	r2, [pc, #540]	; (800d780 <HAL_UART_IRQHandler+0x57c>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d03e      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a84      	ldr	r2, [pc, #528]	; (800d784 <HAL_UART_IRQHandler+0x580>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d037      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a82      	ldr	r2, [pc, #520]	; (800d788 <HAL_UART_IRQHandler+0x584>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d030      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a7f      	ldr	r2, [pc, #508]	; (800d78c <HAL_UART_IRQHandler+0x588>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d029      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a7d      	ldr	r2, [pc, #500]	; (800d790 <HAL_UART_IRQHandler+0x58c>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d022      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a7a      	ldr	r2, [pc, #488]	; (800d794 <HAL_UART_IRQHandler+0x590>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d01b      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4a78      	ldr	r2, [pc, #480]	; (800d798 <HAL_UART_IRQHandler+0x594>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d014      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a75      	ldr	r2, [pc, #468]	; (800d79c <HAL_UART_IRQHandler+0x598>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d00d      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a73      	ldr	r2, [pc, #460]	; (800d7a0 <HAL_UART_IRQHandler+0x59c>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d006      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x3e2>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a70      	ldr	r2, [pc, #448]	; (800d7a4 <HAL_UART_IRQHandler+0x5a0>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d106      	bne.n	800d5f4 <HAL_UART_IRQHandler+0x3f0>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	e005      	b.n	800d600 <HAL_UART_IRQHandler+0x3fc>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d604:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d608:	2b00      	cmp	r3, #0
 800d60a:	f000 81ab 	beq.w	800d964 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d614:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d618:	429a      	cmp	r2, r3
 800d61a:	f080 81a3 	bcs.w	800d964 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d624:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d62e:	69db      	ldr	r3, [r3, #28]
 800d630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d634:	f000 8087 	beq.w	800d746 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d644:	e853 3f00 	ldrex	r3, [r3]
 800d648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d64c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	461a      	mov	r2, r3
 800d65e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d666:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d66e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d672:	e841 2300 	strex	r3, r2, [r1]
 800d676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d67a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1da      	bne.n	800d638 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3308      	adds	r3, #8
 800d688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d68c:	e853 3f00 	ldrex	r3, [r3]
 800d690:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d694:	f023 0301 	bic.w	r3, r3, #1
 800d698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	3308      	adds	r3, #8
 800d6a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d6a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d6aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d6ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d6b2:	e841 2300 	strex	r3, r2, [r1]
 800d6b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d6b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1e1      	bne.n	800d682 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	3308      	adds	r3, #8
 800d6c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6c8:	e853 3f00 	ldrex	r3, [r3]
 800d6cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d6ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	3308      	adds	r3, #8
 800d6de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d6e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d6e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d6e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6ea:	e841 2300 	strex	r3, r2, [r1]
 800d6ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d6f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d1e3      	bne.n	800d6be <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2220      	movs	r2, #32
 800d6fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d70c:	e853 3f00 	ldrex	r3, [r3]
 800d710:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d714:	f023 0310 	bic.w	r3, r3, #16
 800d718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	461a      	mov	r2, r3
 800d722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d726:	65bb      	str	r3, [r7, #88]	; 0x58
 800d728:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d72c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d72e:	e841 2300 	strex	r3, r2, [r1]
 800d732:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d736:	2b00      	cmp	r3, #0
 800d738:	d1e4      	bne.n	800d704 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d740:	4618      	mov	r0, r3
 800d742:	f7f7 fded 	bl	8005320 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2202      	movs	r2, #2
 800d74a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d758:	b29b      	uxth	r3, r3
 800d75a:	1ad3      	subs	r3, r2, r3
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	4619      	mov	r1, r3
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f91d 	bl	800d9a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d766:	e0fd      	b.n	800d964 <HAL_UART_IRQHandler+0x760>
 800d768:	40020010 	.word	0x40020010
 800d76c:	40020028 	.word	0x40020028
 800d770:	40020040 	.word	0x40020040
 800d774:	40020058 	.word	0x40020058
 800d778:	40020070 	.word	0x40020070
 800d77c:	40020088 	.word	0x40020088
 800d780:	400200a0 	.word	0x400200a0
 800d784:	400200b8 	.word	0x400200b8
 800d788:	40020410 	.word	0x40020410
 800d78c:	40020428 	.word	0x40020428
 800d790:	40020440 	.word	0x40020440
 800d794:	40020458 	.word	0x40020458
 800d798:	40020470 	.word	0x40020470
 800d79c:	40020488 	.word	0x40020488
 800d7a0:	400204a0 	.word	0x400204a0
 800d7a4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f000 80cf 	beq.w	800d968 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d7ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	f000 80ca 	beq.w	800d968 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7dc:	e853 3f00 	ldrex	r3, [r3]
 800d7e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d7f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d7f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d7fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7fe:	e841 2300 	strex	r3, r2, [r1]
 800d802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1e4      	bne.n	800d7d4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	3308      	adds	r3, #8
 800d810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d814:	e853 3f00 	ldrex	r3, [r3]
 800d818:	623b      	str	r3, [r7, #32]
   return(result);
 800d81a:	6a3a      	ldr	r2, [r7, #32]
 800d81c:	4b55      	ldr	r3, [pc, #340]	; (800d974 <HAL_UART_IRQHandler+0x770>)
 800d81e:	4013      	ands	r3, r2
 800d820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	3308      	adds	r3, #8
 800d82a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d82e:	633a      	str	r2, [r7, #48]	; 0x30
 800d830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d836:	e841 2300 	strex	r3, r2, [r1]
 800d83a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1e3      	bne.n	800d80a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2220      	movs	r2, #32
 800d846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	e853 3f00 	ldrex	r3, [r3]
 800d862:	60fb      	str	r3, [r7, #12]
   return(result);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f023 0310 	bic.w	r3, r3, #16
 800d86a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	461a      	mov	r2, r3
 800d874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d878:	61fb      	str	r3, [r7, #28]
 800d87a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87c:	69b9      	ldr	r1, [r7, #24]
 800d87e:	69fa      	ldr	r2, [r7, #28]
 800d880:	e841 2300 	strex	r3, r2, [r1]
 800d884:	617b      	str	r3, [r7, #20]
   return(result);
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1e4      	bne.n	800d856 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2202      	movs	r2, #2
 800d890:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d896:	4619      	mov	r1, r3
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 f881 	bl	800d9a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d89e:	e063      	b.n	800d968 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00e      	beq.n	800d8ca <HAL_UART_IRQHandler+0x6c6>
 800d8ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d008      	beq.n	800d8ca <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d8c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f001 fe80 	bl	800f5c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8c8:	e051      	b.n	800d96e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d014      	beq.n	800d900 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d8d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d105      	bne.n	800d8ee <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d8e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d008      	beq.n	800d900 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d03a      	beq.n	800d96c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	4798      	blx	r3
    }
    return;
 800d8fe:	e035      	b.n	800d96c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d009      	beq.n	800d920 <HAL_UART_IRQHandler+0x71c>
 800d90c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d914:	2b00      	cmp	r3, #0
 800d916:	d003      	beq.n	800d920 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f001 f90d 	bl	800eb38 <UART_EndTransmit_IT>
    return;
 800d91e:	e026      	b.n	800d96e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d009      	beq.n	800d940 <HAL_UART_IRQHandler+0x73c>
 800d92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d934:	2b00      	cmp	r3, #0
 800d936:	d003      	beq.n	800d940 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f001 fe59 	bl	800f5f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d93e:	e016      	b.n	800d96e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d010      	beq.n	800d96e <HAL_UART_IRQHandler+0x76a>
 800d94c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d950:	2b00      	cmp	r3, #0
 800d952:	da0c      	bge.n	800d96e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f001 fe41 	bl	800f5dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d95a:	e008      	b.n	800d96e <HAL_UART_IRQHandler+0x76a>
      return;
 800d95c:	bf00      	nop
 800d95e:	e006      	b.n	800d96e <HAL_UART_IRQHandler+0x76a>
    return;
 800d960:	bf00      	nop
 800d962:	e004      	b.n	800d96e <HAL_UART_IRQHandler+0x76a>
      return;
 800d964:	bf00      	nop
 800d966:	e002      	b.n	800d96e <HAL_UART_IRQHandler+0x76a>
      return;
 800d968:	bf00      	nop
 800d96a:	e000      	b.n	800d96e <HAL_UART_IRQHandler+0x76a>
    return;
 800d96c:	bf00      	nop
  }
}
 800d96e:	37e8      	adds	r7, #232	; 0xe8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	effffffe 	.word	0xeffffffe

0800d978 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d980:	bf00      	nop
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d994:	bf00      	nop
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9ac:	bf00      	nop
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9bc:	b092      	sub	sp, #72	; 0x48
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	689a      	ldr	r2, [r3, #8]
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	691b      	ldr	r3, [r3, #16]
 800d9d0:	431a      	orrs	r2, r3
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	695b      	ldr	r3, [r3, #20]
 800d9d6:	431a      	orrs	r2, r3
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	69db      	ldr	r3, [r3, #28]
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	4bbe      	ldr	r3, [pc, #760]	; (800dce0 <UART_SetConfig+0x328>)
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	697a      	ldr	r2, [r7, #20]
 800d9ec:	6812      	ldr	r2, [r2, #0]
 800d9ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9f0:	430b      	orrs	r3, r1
 800d9f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	68da      	ldr	r2, [r3, #12]
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	430a      	orrs	r2, r1
 800da08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	699b      	ldr	r3, [r3, #24]
 800da0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4ab3      	ldr	r2, [pc, #716]	; (800dce4 <UART_SetConfig+0x32c>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d004      	beq.n	800da24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	6a1b      	ldr	r3, [r3, #32]
 800da1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da20:	4313      	orrs	r3, r2
 800da22:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	689a      	ldr	r2, [r3, #8]
 800da2a:	4baf      	ldr	r3, [pc, #700]	; (800dce8 <UART_SetConfig+0x330>)
 800da2c:	4013      	ands	r3, r2
 800da2e:	697a      	ldr	r2, [r7, #20]
 800da30:	6812      	ldr	r2, [r2, #0]
 800da32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da34:	430b      	orrs	r3, r1
 800da36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3e:	f023 010f 	bic.w	r1, r3, #15
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	430a      	orrs	r2, r1
 800da4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	4aa6      	ldr	r2, [pc, #664]	; (800dcec <UART_SetConfig+0x334>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d177      	bne.n	800db48 <UART_SetConfig+0x190>
 800da58:	4ba5      	ldr	r3, [pc, #660]	; (800dcf0 <UART_SetConfig+0x338>)
 800da5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da60:	2b28      	cmp	r3, #40	; 0x28
 800da62:	d86d      	bhi.n	800db40 <UART_SetConfig+0x188>
 800da64:	a201      	add	r2, pc, #4	; (adr r2, 800da6c <UART_SetConfig+0xb4>)
 800da66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da6a:	bf00      	nop
 800da6c:	0800db11 	.word	0x0800db11
 800da70:	0800db41 	.word	0x0800db41
 800da74:	0800db41 	.word	0x0800db41
 800da78:	0800db41 	.word	0x0800db41
 800da7c:	0800db41 	.word	0x0800db41
 800da80:	0800db41 	.word	0x0800db41
 800da84:	0800db41 	.word	0x0800db41
 800da88:	0800db41 	.word	0x0800db41
 800da8c:	0800db19 	.word	0x0800db19
 800da90:	0800db41 	.word	0x0800db41
 800da94:	0800db41 	.word	0x0800db41
 800da98:	0800db41 	.word	0x0800db41
 800da9c:	0800db41 	.word	0x0800db41
 800daa0:	0800db41 	.word	0x0800db41
 800daa4:	0800db41 	.word	0x0800db41
 800daa8:	0800db41 	.word	0x0800db41
 800daac:	0800db21 	.word	0x0800db21
 800dab0:	0800db41 	.word	0x0800db41
 800dab4:	0800db41 	.word	0x0800db41
 800dab8:	0800db41 	.word	0x0800db41
 800dabc:	0800db41 	.word	0x0800db41
 800dac0:	0800db41 	.word	0x0800db41
 800dac4:	0800db41 	.word	0x0800db41
 800dac8:	0800db41 	.word	0x0800db41
 800dacc:	0800db29 	.word	0x0800db29
 800dad0:	0800db41 	.word	0x0800db41
 800dad4:	0800db41 	.word	0x0800db41
 800dad8:	0800db41 	.word	0x0800db41
 800dadc:	0800db41 	.word	0x0800db41
 800dae0:	0800db41 	.word	0x0800db41
 800dae4:	0800db41 	.word	0x0800db41
 800dae8:	0800db41 	.word	0x0800db41
 800daec:	0800db31 	.word	0x0800db31
 800daf0:	0800db41 	.word	0x0800db41
 800daf4:	0800db41 	.word	0x0800db41
 800daf8:	0800db41 	.word	0x0800db41
 800dafc:	0800db41 	.word	0x0800db41
 800db00:	0800db41 	.word	0x0800db41
 800db04:	0800db41 	.word	0x0800db41
 800db08:	0800db41 	.word	0x0800db41
 800db0c:	0800db39 	.word	0x0800db39
 800db10:	2301      	movs	r3, #1
 800db12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db16:	e222      	b.n	800df5e <UART_SetConfig+0x5a6>
 800db18:	2304      	movs	r3, #4
 800db1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1e:	e21e      	b.n	800df5e <UART_SetConfig+0x5a6>
 800db20:	2308      	movs	r3, #8
 800db22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db26:	e21a      	b.n	800df5e <UART_SetConfig+0x5a6>
 800db28:	2310      	movs	r3, #16
 800db2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2e:	e216      	b.n	800df5e <UART_SetConfig+0x5a6>
 800db30:	2320      	movs	r3, #32
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db36:	e212      	b.n	800df5e <UART_SetConfig+0x5a6>
 800db38:	2340      	movs	r3, #64	; 0x40
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db3e:	e20e      	b.n	800df5e <UART_SetConfig+0x5a6>
 800db40:	2380      	movs	r3, #128	; 0x80
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db46:	e20a      	b.n	800df5e <UART_SetConfig+0x5a6>
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a69      	ldr	r2, [pc, #420]	; (800dcf4 <UART_SetConfig+0x33c>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d130      	bne.n	800dbb4 <UART_SetConfig+0x1fc>
 800db52:	4b67      	ldr	r3, [pc, #412]	; (800dcf0 <UART_SetConfig+0x338>)
 800db54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db56:	f003 0307 	and.w	r3, r3, #7
 800db5a:	2b05      	cmp	r3, #5
 800db5c:	d826      	bhi.n	800dbac <UART_SetConfig+0x1f4>
 800db5e:	a201      	add	r2, pc, #4	; (adr r2, 800db64 <UART_SetConfig+0x1ac>)
 800db60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db64:	0800db7d 	.word	0x0800db7d
 800db68:	0800db85 	.word	0x0800db85
 800db6c:	0800db8d 	.word	0x0800db8d
 800db70:	0800db95 	.word	0x0800db95
 800db74:	0800db9d 	.word	0x0800db9d
 800db78:	0800dba5 	.word	0x0800dba5
 800db7c:	2300      	movs	r3, #0
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db82:	e1ec      	b.n	800df5e <UART_SetConfig+0x5a6>
 800db84:	2304      	movs	r3, #4
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8a:	e1e8      	b.n	800df5e <UART_SetConfig+0x5a6>
 800db8c:	2308      	movs	r3, #8
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db92:	e1e4      	b.n	800df5e <UART_SetConfig+0x5a6>
 800db94:	2310      	movs	r3, #16
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9a:	e1e0      	b.n	800df5e <UART_SetConfig+0x5a6>
 800db9c:	2320      	movs	r3, #32
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba2:	e1dc      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dba4:	2340      	movs	r3, #64	; 0x40
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbaa:	e1d8      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dbac:	2380      	movs	r3, #128	; 0x80
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbb2:	e1d4      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a4f      	ldr	r2, [pc, #316]	; (800dcf8 <UART_SetConfig+0x340>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d130      	bne.n	800dc20 <UART_SetConfig+0x268>
 800dbbe:	4b4c      	ldr	r3, [pc, #304]	; (800dcf0 <UART_SetConfig+0x338>)
 800dbc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbc2:	f003 0307 	and.w	r3, r3, #7
 800dbc6:	2b05      	cmp	r3, #5
 800dbc8:	d826      	bhi.n	800dc18 <UART_SetConfig+0x260>
 800dbca:	a201      	add	r2, pc, #4	; (adr r2, 800dbd0 <UART_SetConfig+0x218>)
 800dbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd0:	0800dbe9 	.word	0x0800dbe9
 800dbd4:	0800dbf1 	.word	0x0800dbf1
 800dbd8:	0800dbf9 	.word	0x0800dbf9
 800dbdc:	0800dc01 	.word	0x0800dc01
 800dbe0:	0800dc09 	.word	0x0800dc09
 800dbe4:	0800dc11 	.word	0x0800dc11
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e1b6      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dbf0:	2304      	movs	r3, #4
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e1b2      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dbf8:	2308      	movs	r3, #8
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e1ae      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc00:	2310      	movs	r3, #16
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e1aa      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc08:	2320      	movs	r3, #32
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e1a6      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc10:	2340      	movs	r3, #64	; 0x40
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e1a2      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc18:	2380      	movs	r3, #128	; 0x80
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1e:	e19e      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a35      	ldr	r2, [pc, #212]	; (800dcfc <UART_SetConfig+0x344>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d130      	bne.n	800dc8c <UART_SetConfig+0x2d4>
 800dc2a:	4b31      	ldr	r3, [pc, #196]	; (800dcf0 <UART_SetConfig+0x338>)
 800dc2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc2e:	f003 0307 	and.w	r3, r3, #7
 800dc32:	2b05      	cmp	r3, #5
 800dc34:	d826      	bhi.n	800dc84 <UART_SetConfig+0x2cc>
 800dc36:	a201      	add	r2, pc, #4	; (adr r2, 800dc3c <UART_SetConfig+0x284>)
 800dc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc3c:	0800dc55 	.word	0x0800dc55
 800dc40:	0800dc5d 	.word	0x0800dc5d
 800dc44:	0800dc65 	.word	0x0800dc65
 800dc48:	0800dc6d 	.word	0x0800dc6d
 800dc4c:	0800dc75 	.word	0x0800dc75
 800dc50:	0800dc7d 	.word	0x0800dc7d
 800dc54:	2300      	movs	r3, #0
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5a:	e180      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc5c:	2304      	movs	r3, #4
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc62:	e17c      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc64:	2308      	movs	r3, #8
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6a:	e178      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc6c:	2310      	movs	r3, #16
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc72:	e174      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc74:	2320      	movs	r3, #32
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7a:	e170      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc7c:	2340      	movs	r3, #64	; 0x40
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc82:	e16c      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc84:	2380      	movs	r3, #128	; 0x80
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc8a:	e168      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a1b      	ldr	r2, [pc, #108]	; (800dd00 <UART_SetConfig+0x348>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d142      	bne.n	800dd1c <UART_SetConfig+0x364>
 800dc96:	4b16      	ldr	r3, [pc, #88]	; (800dcf0 <UART_SetConfig+0x338>)
 800dc98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc9a:	f003 0307 	and.w	r3, r3, #7
 800dc9e:	2b05      	cmp	r3, #5
 800dca0:	d838      	bhi.n	800dd14 <UART_SetConfig+0x35c>
 800dca2:	a201      	add	r2, pc, #4	; (adr r2, 800dca8 <UART_SetConfig+0x2f0>)
 800dca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca8:	0800dcc1 	.word	0x0800dcc1
 800dcac:	0800dcc9 	.word	0x0800dcc9
 800dcb0:	0800dcd1 	.word	0x0800dcd1
 800dcb4:	0800dcd9 	.word	0x0800dcd9
 800dcb8:	0800dd05 	.word	0x0800dd05
 800dcbc:	0800dd0d 	.word	0x0800dd0d
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc6:	e14a      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dcc8:	2304      	movs	r3, #4
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcce:	e146      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dcd0:	2308      	movs	r3, #8
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd6:	e142      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dcd8:	2310      	movs	r3, #16
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcde:	e13e      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dce0:	cfff69f3 	.word	0xcfff69f3
 800dce4:	58000c00 	.word	0x58000c00
 800dce8:	11fff4ff 	.word	0x11fff4ff
 800dcec:	40011000 	.word	0x40011000
 800dcf0:	58024400 	.word	0x58024400
 800dcf4:	40004400 	.word	0x40004400
 800dcf8:	40004800 	.word	0x40004800
 800dcfc:	40004c00 	.word	0x40004c00
 800dd00:	40005000 	.word	0x40005000
 800dd04:	2320      	movs	r3, #32
 800dd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0a:	e128      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dd0c:	2340      	movs	r3, #64	; 0x40
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd12:	e124      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dd14:	2380      	movs	r3, #128	; 0x80
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1a:	e120      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4acb      	ldr	r2, [pc, #812]	; (800e050 <UART_SetConfig+0x698>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d176      	bne.n	800de14 <UART_SetConfig+0x45c>
 800dd26:	4bcb      	ldr	r3, [pc, #812]	; (800e054 <UART_SetConfig+0x69c>)
 800dd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd2e:	2b28      	cmp	r3, #40	; 0x28
 800dd30:	d86c      	bhi.n	800de0c <UART_SetConfig+0x454>
 800dd32:	a201      	add	r2, pc, #4	; (adr r2, 800dd38 <UART_SetConfig+0x380>)
 800dd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd38:	0800dddd 	.word	0x0800dddd
 800dd3c:	0800de0d 	.word	0x0800de0d
 800dd40:	0800de0d 	.word	0x0800de0d
 800dd44:	0800de0d 	.word	0x0800de0d
 800dd48:	0800de0d 	.word	0x0800de0d
 800dd4c:	0800de0d 	.word	0x0800de0d
 800dd50:	0800de0d 	.word	0x0800de0d
 800dd54:	0800de0d 	.word	0x0800de0d
 800dd58:	0800dde5 	.word	0x0800dde5
 800dd5c:	0800de0d 	.word	0x0800de0d
 800dd60:	0800de0d 	.word	0x0800de0d
 800dd64:	0800de0d 	.word	0x0800de0d
 800dd68:	0800de0d 	.word	0x0800de0d
 800dd6c:	0800de0d 	.word	0x0800de0d
 800dd70:	0800de0d 	.word	0x0800de0d
 800dd74:	0800de0d 	.word	0x0800de0d
 800dd78:	0800dded 	.word	0x0800dded
 800dd7c:	0800de0d 	.word	0x0800de0d
 800dd80:	0800de0d 	.word	0x0800de0d
 800dd84:	0800de0d 	.word	0x0800de0d
 800dd88:	0800de0d 	.word	0x0800de0d
 800dd8c:	0800de0d 	.word	0x0800de0d
 800dd90:	0800de0d 	.word	0x0800de0d
 800dd94:	0800de0d 	.word	0x0800de0d
 800dd98:	0800ddf5 	.word	0x0800ddf5
 800dd9c:	0800de0d 	.word	0x0800de0d
 800dda0:	0800de0d 	.word	0x0800de0d
 800dda4:	0800de0d 	.word	0x0800de0d
 800dda8:	0800de0d 	.word	0x0800de0d
 800ddac:	0800de0d 	.word	0x0800de0d
 800ddb0:	0800de0d 	.word	0x0800de0d
 800ddb4:	0800de0d 	.word	0x0800de0d
 800ddb8:	0800ddfd 	.word	0x0800ddfd
 800ddbc:	0800de0d 	.word	0x0800de0d
 800ddc0:	0800de0d 	.word	0x0800de0d
 800ddc4:	0800de0d 	.word	0x0800de0d
 800ddc8:	0800de0d 	.word	0x0800de0d
 800ddcc:	0800de0d 	.word	0x0800de0d
 800ddd0:	0800de0d 	.word	0x0800de0d
 800ddd4:	0800de0d 	.word	0x0800de0d
 800ddd8:	0800de05 	.word	0x0800de05
 800dddc:	2301      	movs	r3, #1
 800ddde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde2:	e0bc      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dde4:	2304      	movs	r3, #4
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddea:	e0b8      	b.n	800df5e <UART_SetConfig+0x5a6>
 800ddec:	2308      	movs	r3, #8
 800ddee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf2:	e0b4      	b.n	800df5e <UART_SetConfig+0x5a6>
 800ddf4:	2310      	movs	r3, #16
 800ddf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfa:	e0b0      	b.n	800df5e <UART_SetConfig+0x5a6>
 800ddfc:	2320      	movs	r3, #32
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de02:	e0ac      	b.n	800df5e <UART_SetConfig+0x5a6>
 800de04:	2340      	movs	r3, #64	; 0x40
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de0a:	e0a8      	b.n	800df5e <UART_SetConfig+0x5a6>
 800de0c:	2380      	movs	r3, #128	; 0x80
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de12:	e0a4      	b.n	800df5e <UART_SetConfig+0x5a6>
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4a8f      	ldr	r2, [pc, #572]	; (800e058 <UART_SetConfig+0x6a0>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d130      	bne.n	800de80 <UART_SetConfig+0x4c8>
 800de1e:	4b8d      	ldr	r3, [pc, #564]	; (800e054 <UART_SetConfig+0x69c>)
 800de20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de22:	f003 0307 	and.w	r3, r3, #7
 800de26:	2b05      	cmp	r3, #5
 800de28:	d826      	bhi.n	800de78 <UART_SetConfig+0x4c0>
 800de2a:	a201      	add	r2, pc, #4	; (adr r2, 800de30 <UART_SetConfig+0x478>)
 800de2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de30:	0800de49 	.word	0x0800de49
 800de34:	0800de51 	.word	0x0800de51
 800de38:	0800de59 	.word	0x0800de59
 800de3c:	0800de61 	.word	0x0800de61
 800de40:	0800de69 	.word	0x0800de69
 800de44:	0800de71 	.word	0x0800de71
 800de48:	2300      	movs	r3, #0
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4e:	e086      	b.n	800df5e <UART_SetConfig+0x5a6>
 800de50:	2304      	movs	r3, #4
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e082      	b.n	800df5e <UART_SetConfig+0x5a6>
 800de58:	2308      	movs	r3, #8
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5e:	e07e      	b.n	800df5e <UART_SetConfig+0x5a6>
 800de60:	2310      	movs	r3, #16
 800de62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de66:	e07a      	b.n	800df5e <UART_SetConfig+0x5a6>
 800de68:	2320      	movs	r3, #32
 800de6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6e:	e076      	b.n	800df5e <UART_SetConfig+0x5a6>
 800de70:	2340      	movs	r3, #64	; 0x40
 800de72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de76:	e072      	b.n	800df5e <UART_SetConfig+0x5a6>
 800de78:	2380      	movs	r3, #128	; 0x80
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de7e:	e06e      	b.n	800df5e <UART_SetConfig+0x5a6>
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a75      	ldr	r2, [pc, #468]	; (800e05c <UART_SetConfig+0x6a4>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d130      	bne.n	800deec <UART_SetConfig+0x534>
 800de8a:	4b72      	ldr	r3, [pc, #456]	; (800e054 <UART_SetConfig+0x69c>)
 800de8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de8e:	f003 0307 	and.w	r3, r3, #7
 800de92:	2b05      	cmp	r3, #5
 800de94:	d826      	bhi.n	800dee4 <UART_SetConfig+0x52c>
 800de96:	a201      	add	r2, pc, #4	; (adr r2, 800de9c <UART_SetConfig+0x4e4>)
 800de98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9c:	0800deb5 	.word	0x0800deb5
 800dea0:	0800debd 	.word	0x0800debd
 800dea4:	0800dec5 	.word	0x0800dec5
 800dea8:	0800decd 	.word	0x0800decd
 800deac:	0800ded5 	.word	0x0800ded5
 800deb0:	0800dedd 	.word	0x0800dedd
 800deb4:	2300      	movs	r3, #0
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e050      	b.n	800df5e <UART_SetConfig+0x5a6>
 800debc:	2304      	movs	r3, #4
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e04c      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dec4:	2308      	movs	r3, #8
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deca:	e048      	b.n	800df5e <UART_SetConfig+0x5a6>
 800decc:	2310      	movs	r3, #16
 800dece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded2:	e044      	b.n	800df5e <UART_SetConfig+0x5a6>
 800ded4:	2320      	movs	r3, #32
 800ded6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deda:	e040      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dedc:	2340      	movs	r3, #64	; 0x40
 800dede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dee2:	e03c      	b.n	800df5e <UART_SetConfig+0x5a6>
 800dee4:	2380      	movs	r3, #128	; 0x80
 800dee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deea:	e038      	b.n	800df5e <UART_SetConfig+0x5a6>
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a5b      	ldr	r2, [pc, #364]	; (800e060 <UART_SetConfig+0x6a8>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d130      	bne.n	800df58 <UART_SetConfig+0x5a0>
 800def6:	4b57      	ldr	r3, [pc, #348]	; (800e054 <UART_SetConfig+0x69c>)
 800def8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800defa:	f003 0307 	and.w	r3, r3, #7
 800defe:	2b05      	cmp	r3, #5
 800df00:	d826      	bhi.n	800df50 <UART_SetConfig+0x598>
 800df02:	a201      	add	r2, pc, #4	; (adr r2, 800df08 <UART_SetConfig+0x550>)
 800df04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df08:	0800df21 	.word	0x0800df21
 800df0c:	0800df29 	.word	0x0800df29
 800df10:	0800df31 	.word	0x0800df31
 800df14:	0800df39 	.word	0x0800df39
 800df18:	0800df41 	.word	0x0800df41
 800df1c:	0800df49 	.word	0x0800df49
 800df20:	2302      	movs	r3, #2
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df26:	e01a      	b.n	800df5e <UART_SetConfig+0x5a6>
 800df28:	2304      	movs	r3, #4
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2e:	e016      	b.n	800df5e <UART_SetConfig+0x5a6>
 800df30:	2308      	movs	r3, #8
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df36:	e012      	b.n	800df5e <UART_SetConfig+0x5a6>
 800df38:	2310      	movs	r3, #16
 800df3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3e:	e00e      	b.n	800df5e <UART_SetConfig+0x5a6>
 800df40:	2320      	movs	r3, #32
 800df42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df46:	e00a      	b.n	800df5e <UART_SetConfig+0x5a6>
 800df48:	2340      	movs	r3, #64	; 0x40
 800df4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df4e:	e006      	b.n	800df5e <UART_SetConfig+0x5a6>
 800df50:	2380      	movs	r3, #128	; 0x80
 800df52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df56:	e002      	b.n	800df5e <UART_SetConfig+0x5a6>
 800df58:	2380      	movs	r3, #128	; 0x80
 800df5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a3f      	ldr	r2, [pc, #252]	; (800e060 <UART_SetConfig+0x6a8>)
 800df64:	4293      	cmp	r3, r2
 800df66:	f040 80f8 	bne.w	800e15a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800df6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df6e:	2b20      	cmp	r3, #32
 800df70:	dc46      	bgt.n	800e000 <UART_SetConfig+0x648>
 800df72:	2b02      	cmp	r3, #2
 800df74:	f2c0 8082 	blt.w	800e07c <UART_SetConfig+0x6c4>
 800df78:	3b02      	subs	r3, #2
 800df7a:	2b1e      	cmp	r3, #30
 800df7c:	d87e      	bhi.n	800e07c <UART_SetConfig+0x6c4>
 800df7e:	a201      	add	r2, pc, #4	; (adr r2, 800df84 <UART_SetConfig+0x5cc>)
 800df80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df84:	0800e007 	.word	0x0800e007
 800df88:	0800e07d 	.word	0x0800e07d
 800df8c:	0800e00f 	.word	0x0800e00f
 800df90:	0800e07d 	.word	0x0800e07d
 800df94:	0800e07d 	.word	0x0800e07d
 800df98:	0800e07d 	.word	0x0800e07d
 800df9c:	0800e01f 	.word	0x0800e01f
 800dfa0:	0800e07d 	.word	0x0800e07d
 800dfa4:	0800e07d 	.word	0x0800e07d
 800dfa8:	0800e07d 	.word	0x0800e07d
 800dfac:	0800e07d 	.word	0x0800e07d
 800dfb0:	0800e07d 	.word	0x0800e07d
 800dfb4:	0800e07d 	.word	0x0800e07d
 800dfb8:	0800e07d 	.word	0x0800e07d
 800dfbc:	0800e02f 	.word	0x0800e02f
 800dfc0:	0800e07d 	.word	0x0800e07d
 800dfc4:	0800e07d 	.word	0x0800e07d
 800dfc8:	0800e07d 	.word	0x0800e07d
 800dfcc:	0800e07d 	.word	0x0800e07d
 800dfd0:	0800e07d 	.word	0x0800e07d
 800dfd4:	0800e07d 	.word	0x0800e07d
 800dfd8:	0800e07d 	.word	0x0800e07d
 800dfdc:	0800e07d 	.word	0x0800e07d
 800dfe0:	0800e07d 	.word	0x0800e07d
 800dfe4:	0800e07d 	.word	0x0800e07d
 800dfe8:	0800e07d 	.word	0x0800e07d
 800dfec:	0800e07d 	.word	0x0800e07d
 800dff0:	0800e07d 	.word	0x0800e07d
 800dff4:	0800e07d 	.word	0x0800e07d
 800dff8:	0800e07d 	.word	0x0800e07d
 800dffc:	0800e06f 	.word	0x0800e06f
 800e000:	2b40      	cmp	r3, #64	; 0x40
 800e002:	d037      	beq.n	800e074 <UART_SetConfig+0x6bc>
 800e004:	e03a      	b.n	800e07c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e006:	f7fc fceb 	bl	800a9e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e00a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e00c:	e03c      	b.n	800e088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e00e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e012:	4618      	mov	r0, r3
 800e014:	f7fc fcfa 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e01c:	e034      	b.n	800e088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e01e:	f107 0318 	add.w	r3, r7, #24
 800e022:	4618      	mov	r0, r3
 800e024:	f7fc fe46 	bl	800acb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e02c:	e02c      	b.n	800e088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e02e:	4b09      	ldr	r3, [pc, #36]	; (800e054 <UART_SetConfig+0x69c>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f003 0320 	and.w	r3, r3, #32
 800e036:	2b00      	cmp	r3, #0
 800e038:	d016      	beq.n	800e068 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e03a:	4b06      	ldr	r3, [pc, #24]	; (800e054 <UART_SetConfig+0x69c>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	08db      	lsrs	r3, r3, #3
 800e040:	f003 0303 	and.w	r3, r3, #3
 800e044:	4a07      	ldr	r2, [pc, #28]	; (800e064 <UART_SetConfig+0x6ac>)
 800e046:	fa22 f303 	lsr.w	r3, r2, r3
 800e04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e04c:	e01c      	b.n	800e088 <UART_SetConfig+0x6d0>
 800e04e:	bf00      	nop
 800e050:	40011400 	.word	0x40011400
 800e054:	58024400 	.word	0x58024400
 800e058:	40007800 	.word	0x40007800
 800e05c:	40007c00 	.word	0x40007c00
 800e060:	58000c00 	.word	0x58000c00
 800e064:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e068:	4b9d      	ldr	r3, [pc, #628]	; (800e2e0 <UART_SetConfig+0x928>)
 800e06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e06c:	e00c      	b.n	800e088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e06e:	4b9d      	ldr	r3, [pc, #628]	; (800e2e4 <UART_SetConfig+0x92c>)
 800e070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e072:	e009      	b.n	800e088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e07a:	e005      	b.n	800e088 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e07c:	2300      	movs	r3, #0
 800e07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e080:	2301      	movs	r3, #1
 800e082:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e086:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f000 81de 	beq.w	800e44c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e094:	4a94      	ldr	r2, [pc, #592]	; (800e2e8 <UART_SetConfig+0x930>)
 800e096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e09a:	461a      	mov	r2, r3
 800e09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	685a      	ldr	r2, [r3, #4]
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	005b      	lsls	r3, r3, #1
 800e0ac:	4413      	add	r3, r2
 800e0ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d305      	bcc.n	800e0c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d903      	bls.n	800e0c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e0c6:	e1c1      	b.n	800e44c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	60bb      	str	r3, [r7, #8]
 800e0ce:	60fa      	str	r2, [r7, #12]
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	4a84      	ldr	r2, [pc, #528]	; (800e2e8 <UART_SetConfig+0x930>)
 800e0d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	2200      	movs	r2, #0
 800e0de:	603b      	str	r3, [r7, #0]
 800e0e0:	607a      	str	r2, [r7, #4]
 800e0e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e0ea:	f7f2 f949 	bl	8000380 <__aeabi_uldivmod>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	4610      	mov	r0, r2
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	f04f 0200 	mov.w	r2, #0
 800e0fa:	f04f 0300 	mov.w	r3, #0
 800e0fe:	020b      	lsls	r3, r1, #8
 800e100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e104:	0202      	lsls	r2, r0, #8
 800e106:	6979      	ldr	r1, [r7, #20]
 800e108:	6849      	ldr	r1, [r1, #4]
 800e10a:	0849      	lsrs	r1, r1, #1
 800e10c:	2000      	movs	r0, #0
 800e10e:	460c      	mov	r4, r1
 800e110:	4605      	mov	r5, r0
 800e112:	eb12 0804 	adds.w	r8, r2, r4
 800e116:	eb43 0905 	adc.w	r9, r3, r5
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	2200      	movs	r2, #0
 800e120:	469a      	mov	sl, r3
 800e122:	4693      	mov	fp, r2
 800e124:	4652      	mov	r2, sl
 800e126:	465b      	mov	r3, fp
 800e128:	4640      	mov	r0, r8
 800e12a:	4649      	mov	r1, r9
 800e12c:	f7f2 f928 	bl	8000380 <__aeabi_uldivmod>
 800e130:	4602      	mov	r2, r0
 800e132:	460b      	mov	r3, r1
 800e134:	4613      	mov	r3, r2
 800e136:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e13e:	d308      	bcc.n	800e152 <UART_SetConfig+0x79a>
 800e140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e146:	d204      	bcs.n	800e152 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e14e:	60da      	str	r2, [r3, #12]
 800e150:	e17c      	b.n	800e44c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e158:	e178      	b.n	800e44c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	69db      	ldr	r3, [r3, #28]
 800e15e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e162:	f040 80c5 	bne.w	800e2f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e166:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e16a:	2b20      	cmp	r3, #32
 800e16c:	dc48      	bgt.n	800e200 <UART_SetConfig+0x848>
 800e16e:	2b00      	cmp	r3, #0
 800e170:	db7b      	blt.n	800e26a <UART_SetConfig+0x8b2>
 800e172:	2b20      	cmp	r3, #32
 800e174:	d879      	bhi.n	800e26a <UART_SetConfig+0x8b2>
 800e176:	a201      	add	r2, pc, #4	; (adr r2, 800e17c <UART_SetConfig+0x7c4>)
 800e178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e17c:	0800e207 	.word	0x0800e207
 800e180:	0800e20f 	.word	0x0800e20f
 800e184:	0800e26b 	.word	0x0800e26b
 800e188:	0800e26b 	.word	0x0800e26b
 800e18c:	0800e217 	.word	0x0800e217
 800e190:	0800e26b 	.word	0x0800e26b
 800e194:	0800e26b 	.word	0x0800e26b
 800e198:	0800e26b 	.word	0x0800e26b
 800e19c:	0800e227 	.word	0x0800e227
 800e1a0:	0800e26b 	.word	0x0800e26b
 800e1a4:	0800e26b 	.word	0x0800e26b
 800e1a8:	0800e26b 	.word	0x0800e26b
 800e1ac:	0800e26b 	.word	0x0800e26b
 800e1b0:	0800e26b 	.word	0x0800e26b
 800e1b4:	0800e26b 	.word	0x0800e26b
 800e1b8:	0800e26b 	.word	0x0800e26b
 800e1bc:	0800e237 	.word	0x0800e237
 800e1c0:	0800e26b 	.word	0x0800e26b
 800e1c4:	0800e26b 	.word	0x0800e26b
 800e1c8:	0800e26b 	.word	0x0800e26b
 800e1cc:	0800e26b 	.word	0x0800e26b
 800e1d0:	0800e26b 	.word	0x0800e26b
 800e1d4:	0800e26b 	.word	0x0800e26b
 800e1d8:	0800e26b 	.word	0x0800e26b
 800e1dc:	0800e26b 	.word	0x0800e26b
 800e1e0:	0800e26b 	.word	0x0800e26b
 800e1e4:	0800e26b 	.word	0x0800e26b
 800e1e8:	0800e26b 	.word	0x0800e26b
 800e1ec:	0800e26b 	.word	0x0800e26b
 800e1f0:	0800e26b 	.word	0x0800e26b
 800e1f4:	0800e26b 	.word	0x0800e26b
 800e1f8:	0800e26b 	.word	0x0800e26b
 800e1fc:	0800e25d 	.word	0x0800e25d
 800e200:	2b40      	cmp	r3, #64	; 0x40
 800e202:	d02e      	beq.n	800e262 <UART_SetConfig+0x8aa>
 800e204:	e031      	b.n	800e26a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e206:	f7fa fbf3 	bl	80089f0 <HAL_RCC_GetPCLK1Freq>
 800e20a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e20c:	e033      	b.n	800e276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e20e:	f7fa fc05 	bl	8008a1c <HAL_RCC_GetPCLK2Freq>
 800e212:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e214:	e02f      	b.n	800e276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fc fbf6 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e224:	e027      	b.n	800e276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e226:	f107 0318 	add.w	r3, r7, #24
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fc fd42 	bl	800acb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e234:	e01f      	b.n	800e276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e236:	4b2d      	ldr	r3, [pc, #180]	; (800e2ec <UART_SetConfig+0x934>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f003 0320 	and.w	r3, r3, #32
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d009      	beq.n	800e256 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e242:	4b2a      	ldr	r3, [pc, #168]	; (800e2ec <UART_SetConfig+0x934>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	08db      	lsrs	r3, r3, #3
 800e248:	f003 0303 	and.w	r3, r3, #3
 800e24c:	4a24      	ldr	r2, [pc, #144]	; (800e2e0 <UART_SetConfig+0x928>)
 800e24e:	fa22 f303 	lsr.w	r3, r2, r3
 800e252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e254:	e00f      	b.n	800e276 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e256:	4b22      	ldr	r3, [pc, #136]	; (800e2e0 <UART_SetConfig+0x928>)
 800e258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e25a:	e00c      	b.n	800e276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e25c:	4b21      	ldr	r3, [pc, #132]	; (800e2e4 <UART_SetConfig+0x92c>)
 800e25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e260:	e009      	b.n	800e276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e268:	e005      	b.n	800e276 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e26a:	2300      	movs	r3, #0
 800e26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e26e:	2301      	movs	r3, #1
 800e270:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f000 80e7 	beq.w	800e44c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e282:	4a19      	ldr	r2, [pc, #100]	; (800e2e8 <UART_SetConfig+0x930>)
 800e284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e288:	461a      	mov	r2, r3
 800e28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e28c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e290:	005a      	lsls	r2, r3, #1
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	085b      	lsrs	r3, r3, #1
 800e298:	441a      	add	r2, r3
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a6:	2b0f      	cmp	r3, #15
 800e2a8:	d916      	bls.n	800e2d8 <UART_SetConfig+0x920>
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2b0:	d212      	bcs.n	800e2d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	f023 030f 	bic.w	r3, r3, #15
 800e2ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2be:	085b      	lsrs	r3, r3, #1
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	f003 0307 	and.w	r3, r3, #7
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e2d4:	60da      	str	r2, [r3, #12]
 800e2d6:	e0b9      	b.n	800e44c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e2de:	e0b5      	b.n	800e44c <UART_SetConfig+0xa94>
 800e2e0:	03d09000 	.word	0x03d09000
 800e2e4:	003d0900 	.word	0x003d0900
 800e2e8:	08014318 	.word	0x08014318
 800e2ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e2f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e2f4:	2b20      	cmp	r3, #32
 800e2f6:	dc49      	bgt.n	800e38c <UART_SetConfig+0x9d4>
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	db7c      	blt.n	800e3f6 <UART_SetConfig+0xa3e>
 800e2fc:	2b20      	cmp	r3, #32
 800e2fe:	d87a      	bhi.n	800e3f6 <UART_SetConfig+0xa3e>
 800e300:	a201      	add	r2, pc, #4	; (adr r2, 800e308 <UART_SetConfig+0x950>)
 800e302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e306:	bf00      	nop
 800e308:	0800e393 	.word	0x0800e393
 800e30c:	0800e39b 	.word	0x0800e39b
 800e310:	0800e3f7 	.word	0x0800e3f7
 800e314:	0800e3f7 	.word	0x0800e3f7
 800e318:	0800e3a3 	.word	0x0800e3a3
 800e31c:	0800e3f7 	.word	0x0800e3f7
 800e320:	0800e3f7 	.word	0x0800e3f7
 800e324:	0800e3f7 	.word	0x0800e3f7
 800e328:	0800e3b3 	.word	0x0800e3b3
 800e32c:	0800e3f7 	.word	0x0800e3f7
 800e330:	0800e3f7 	.word	0x0800e3f7
 800e334:	0800e3f7 	.word	0x0800e3f7
 800e338:	0800e3f7 	.word	0x0800e3f7
 800e33c:	0800e3f7 	.word	0x0800e3f7
 800e340:	0800e3f7 	.word	0x0800e3f7
 800e344:	0800e3f7 	.word	0x0800e3f7
 800e348:	0800e3c3 	.word	0x0800e3c3
 800e34c:	0800e3f7 	.word	0x0800e3f7
 800e350:	0800e3f7 	.word	0x0800e3f7
 800e354:	0800e3f7 	.word	0x0800e3f7
 800e358:	0800e3f7 	.word	0x0800e3f7
 800e35c:	0800e3f7 	.word	0x0800e3f7
 800e360:	0800e3f7 	.word	0x0800e3f7
 800e364:	0800e3f7 	.word	0x0800e3f7
 800e368:	0800e3f7 	.word	0x0800e3f7
 800e36c:	0800e3f7 	.word	0x0800e3f7
 800e370:	0800e3f7 	.word	0x0800e3f7
 800e374:	0800e3f7 	.word	0x0800e3f7
 800e378:	0800e3f7 	.word	0x0800e3f7
 800e37c:	0800e3f7 	.word	0x0800e3f7
 800e380:	0800e3f7 	.word	0x0800e3f7
 800e384:	0800e3f7 	.word	0x0800e3f7
 800e388:	0800e3e9 	.word	0x0800e3e9
 800e38c:	2b40      	cmp	r3, #64	; 0x40
 800e38e:	d02e      	beq.n	800e3ee <UART_SetConfig+0xa36>
 800e390:	e031      	b.n	800e3f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e392:	f7fa fb2d 	bl	80089f0 <HAL_RCC_GetPCLK1Freq>
 800e396:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e398:	e033      	b.n	800e402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e39a:	f7fa fb3f 	bl	8008a1c <HAL_RCC_GetPCLK2Freq>
 800e39e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3a0:	e02f      	b.n	800e402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fc fb30 	bl	800aa0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3b0:	e027      	b.n	800e402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3b2:	f107 0318 	add.w	r3, r7, #24
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fc fc7c 	bl	800acb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3c0:	e01f      	b.n	800e402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3c2:	4b2d      	ldr	r3, [pc, #180]	; (800e478 <UART_SetConfig+0xac0>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f003 0320 	and.w	r3, r3, #32
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d009      	beq.n	800e3e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3ce:	4b2a      	ldr	r3, [pc, #168]	; (800e478 <UART_SetConfig+0xac0>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	08db      	lsrs	r3, r3, #3
 800e3d4:	f003 0303 	and.w	r3, r3, #3
 800e3d8:	4a28      	ldr	r2, [pc, #160]	; (800e47c <UART_SetConfig+0xac4>)
 800e3da:	fa22 f303 	lsr.w	r3, r2, r3
 800e3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3e0:	e00f      	b.n	800e402 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e3e2:	4b26      	ldr	r3, [pc, #152]	; (800e47c <UART_SetConfig+0xac4>)
 800e3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3e6:	e00c      	b.n	800e402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3e8:	4b25      	ldr	r3, [pc, #148]	; (800e480 <UART_SetConfig+0xac8>)
 800e3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3ec:	e009      	b.n	800e402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3f4:	e005      	b.n	800e402 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e400:	bf00      	nop
    }

    if (pclk != 0U)
 800e402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e404:	2b00      	cmp	r3, #0
 800e406:	d021      	beq.n	800e44c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e40c:	4a1d      	ldr	r2, [pc, #116]	; (800e484 <UART_SetConfig+0xacc>)
 800e40e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e412:	461a      	mov	r2, r3
 800e414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e416:	fbb3 f2f2 	udiv	r2, r3, r2
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	085b      	lsrs	r3, r3, #1
 800e420:	441a      	add	r2, r3
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	fbb2 f3f3 	udiv	r3, r2, r3
 800e42a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42e:	2b0f      	cmp	r3, #15
 800e430:	d909      	bls.n	800e446 <UART_SetConfig+0xa8e>
 800e432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e438:	d205      	bcs.n	800e446 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	60da      	str	r2, [r3, #12]
 800e444:	e002      	b.n	800e44c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e446:	2301      	movs	r3, #1
 800e448:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	2201      	movs	r2, #1
 800e450:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	2201      	movs	r2, #1
 800e458:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	2200      	movs	r2, #0
 800e460:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	2200      	movs	r2, #0
 800e466:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e468:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3748      	adds	r7, #72	; 0x48
 800e470:	46bd      	mov	sp, r7
 800e472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e476:	bf00      	nop
 800e478:	58024400 	.word	0x58024400
 800e47c:	03d09000 	.word	0x03d09000
 800e480:	003d0900 	.word	0x003d0900
 800e484:	08014318 	.word	0x08014318

0800e488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e494:	f003 0308 	and.w	r3, r3, #8
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00a      	beq.n	800e4b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	430a      	orrs	r2, r1
 800e4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b6:	f003 0301 	and.w	r3, r3, #1
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00a      	beq.n	800e4d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	430a      	orrs	r2, r1
 800e4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d8:	f003 0302 	and.w	r3, r3, #2
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00a      	beq.n	800e4f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	430a      	orrs	r2, r1
 800e4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4fa:	f003 0304 	and.w	r3, r3, #4
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00a      	beq.n	800e518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	430a      	orrs	r2, r1
 800e516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e51c:	f003 0310 	and.w	r3, r3, #16
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00a      	beq.n	800e53a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	430a      	orrs	r2, r1
 800e538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e53e:	f003 0320 	and.w	r3, r3, #32
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00a      	beq.n	800e55c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	430a      	orrs	r2, r1
 800e55a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e564:	2b00      	cmp	r3, #0
 800e566:	d01a      	beq.n	800e59e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	430a      	orrs	r2, r1
 800e57c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e586:	d10a      	bne.n	800e59e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	430a      	orrs	r2, r1
 800e59c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00a      	beq.n	800e5c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	430a      	orrs	r2, r1
 800e5be:	605a      	str	r2, [r3, #4]
  }
}
 800e5c0:	bf00      	nop
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b098      	sub	sp, #96	; 0x60
 800e5d0:	af02      	add	r7, sp, #8
 800e5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e5dc:	f7f4 f9ea 	bl	80029b4 <HAL_GetTick>
 800e5e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f003 0308 	and.w	r3, r3, #8
 800e5ec:	2b08      	cmp	r3, #8
 800e5ee:	d12f      	bne.n	800e650 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e5f4:	9300      	str	r3, [sp, #0]
 800e5f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f000 f88e 	bl	800e720 <UART_WaitOnFlagUntilTimeout>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d022      	beq.n	800e650 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e612:	e853 3f00 	ldrex	r3, [r3]
 800e616:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e61e:	653b      	str	r3, [r7, #80]	; 0x50
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	461a      	mov	r2, r3
 800e626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e628:	647b      	str	r3, [r7, #68]	; 0x44
 800e62a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e62e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e630:	e841 2300 	strex	r3, r2, [r1]
 800e634:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d1e6      	bne.n	800e60a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2220      	movs	r2, #32
 800e640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e64c:	2303      	movs	r3, #3
 800e64e:	e063      	b.n	800e718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f003 0304 	and.w	r3, r3, #4
 800e65a:	2b04      	cmp	r3, #4
 800e65c:	d149      	bne.n	800e6f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e65e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e666:	2200      	movs	r2, #0
 800e668:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f000 f857 	bl	800e720 <UART_WaitOnFlagUntilTimeout>
 800e672:	4603      	mov	r3, r0
 800e674:	2b00      	cmp	r3, #0
 800e676:	d03c      	beq.n	800e6f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	e853 3f00 	ldrex	r3, [r3]
 800e684:	623b      	str	r3, [r7, #32]
   return(result);
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e68c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	461a      	mov	r2, r3
 800e694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e696:	633b      	str	r3, [r7, #48]	; 0x30
 800e698:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e69a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e69e:	e841 2300 	strex	r3, r2, [r1]
 800e6a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d1e6      	bne.n	800e678 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	3308      	adds	r3, #8
 800e6b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	e853 3f00 	ldrex	r3, [r3]
 800e6b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f023 0301 	bic.w	r3, r3, #1
 800e6c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	3308      	adds	r3, #8
 800e6c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6ca:	61fa      	str	r2, [r7, #28]
 800e6cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ce:	69b9      	ldr	r1, [r7, #24]
 800e6d0:	69fa      	ldr	r2, [r7, #28]
 800e6d2:	e841 2300 	strex	r3, r2, [r1]
 800e6d6:	617b      	str	r3, [r7, #20]
   return(result);
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d1e5      	bne.n	800e6aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2220      	movs	r2, #32
 800e6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6ee:	2303      	movs	r3, #3
 800e6f0:	e012      	b.n	800e718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2220      	movs	r2, #32
 800e6f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2220      	movs	r2, #32
 800e6fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e716:	2300      	movs	r3, #0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3758      	adds	r7, #88	; 0x58
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	603b      	str	r3, [r7, #0]
 800e72c:	4613      	mov	r3, r2
 800e72e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e730:	e04f      	b.n	800e7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e738:	d04b      	beq.n	800e7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e73a:	f7f4 f93b 	bl	80029b4 <HAL_GetTick>
 800e73e:	4602      	mov	r2, r0
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	1ad3      	subs	r3, r2, r3
 800e744:	69ba      	ldr	r2, [r7, #24]
 800e746:	429a      	cmp	r2, r3
 800e748:	d302      	bcc.n	800e750 <UART_WaitOnFlagUntilTimeout+0x30>
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d101      	bne.n	800e754 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e750:	2303      	movs	r3, #3
 800e752:	e04e      	b.n	800e7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f003 0304 	and.w	r3, r3, #4
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d037      	beq.n	800e7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	2b80      	cmp	r3, #128	; 0x80
 800e766:	d034      	beq.n	800e7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	2b40      	cmp	r3, #64	; 0x40
 800e76c:	d031      	beq.n	800e7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	69db      	ldr	r3, [r3, #28]
 800e774:	f003 0308 	and.w	r3, r3, #8
 800e778:	2b08      	cmp	r3, #8
 800e77a:	d110      	bne.n	800e79e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2208      	movs	r2, #8
 800e782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e784:	68f8      	ldr	r0, [r7, #12]
 800e786:	f000 f95b 	bl	800ea40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2208      	movs	r2, #8
 800e78e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2200      	movs	r2, #0
 800e796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e79a:	2301      	movs	r3, #1
 800e79c:	e029      	b.n	800e7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	69db      	ldr	r3, [r3, #28]
 800e7a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7ac:	d111      	bne.n	800e7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e7b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f000 f941 	bl	800ea40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2220      	movs	r2, #32
 800e7c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e7ce:	2303      	movs	r3, #3
 800e7d0:	e00f      	b.n	800e7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	69da      	ldr	r2, [r3, #28]
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	4013      	ands	r3, r2
 800e7dc:	68ba      	ldr	r2, [r7, #8]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	bf0c      	ite	eq
 800e7e2:	2301      	moveq	r3, #1
 800e7e4:	2300      	movne	r3, #0
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	79fb      	ldrb	r3, [r7, #7]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d0a0      	beq.n	800e732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e7f0:	2300      	movs	r3, #0
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
	...

0800e7fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b0a3      	sub	sp, #140	; 0x8c
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	4613      	mov	r3, r2
 800e808:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	88fa      	ldrh	r2, [r7, #6]
 800e814:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	88fa      	ldrh	r2, [r7, #6]
 800e81c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2200      	movs	r2, #0
 800e824:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e82e:	d10e      	bne.n	800e84e <UART_Start_Receive_IT+0x52>
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	691b      	ldr	r3, [r3, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d105      	bne.n	800e844 <UART_Start_Receive_IT+0x48>
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e83e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e842:	e02d      	b.n	800e8a0 <UART_Start_Receive_IT+0xa4>
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	22ff      	movs	r2, #255	; 0xff
 800e848:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e84c:	e028      	b.n	800e8a0 <UART_Start_Receive_IT+0xa4>
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	689b      	ldr	r3, [r3, #8]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d10d      	bne.n	800e872 <UART_Start_Receive_IT+0x76>
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	691b      	ldr	r3, [r3, #16]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d104      	bne.n	800e868 <UART_Start_Receive_IT+0x6c>
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	22ff      	movs	r2, #255	; 0xff
 800e862:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e866:	e01b      	b.n	800e8a0 <UART_Start_Receive_IT+0xa4>
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	227f      	movs	r2, #127	; 0x7f
 800e86c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e870:	e016      	b.n	800e8a0 <UART_Start_Receive_IT+0xa4>
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e87a:	d10d      	bne.n	800e898 <UART_Start_Receive_IT+0x9c>
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d104      	bne.n	800e88e <UART_Start_Receive_IT+0x92>
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	227f      	movs	r2, #127	; 0x7f
 800e888:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e88c:	e008      	b.n	800e8a0 <UART_Start_Receive_IT+0xa4>
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	223f      	movs	r2, #63	; 0x3f
 800e892:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e896:	e003      	b.n	800e8a0 <UART_Start_Receive_IT+0xa4>
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2200      	movs	r2, #0
 800e89c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2222      	movs	r2, #34	; 0x22
 800e8ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	3308      	adds	r3, #8
 800e8b6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8ba:	e853 3f00 	ldrex	r3, [r3]
 800e8be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e8c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8c2:	f043 0301 	orr.w	r3, r3, #1
 800e8c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	3308      	adds	r3, #8
 800e8d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e8d4:	673a      	str	r2, [r7, #112]	; 0x70
 800e8d6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e8da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e8dc:	e841 2300 	strex	r3, r2, [r1]
 800e8e0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e8e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d1e3      	bne.n	800e8b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8f0:	d14f      	bne.n	800e992 <UART_Start_Receive_IT+0x196>
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e8f8:	88fa      	ldrh	r2, [r7, #6]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d349      	bcc.n	800e992 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e906:	d107      	bne.n	800e918 <UART_Start_Receive_IT+0x11c>
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	691b      	ldr	r3, [r3, #16]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d103      	bne.n	800e918 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	4a47      	ldr	r2, [pc, #284]	; (800ea30 <UART_Start_Receive_IT+0x234>)
 800e914:	675a      	str	r2, [r3, #116]	; 0x74
 800e916:	e002      	b.n	800e91e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	4a46      	ldr	r2, [pc, #280]	; (800ea34 <UART_Start_Receive_IT+0x238>)
 800e91c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	691b      	ldr	r3, [r3, #16]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d01a      	beq.n	800e95c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e92e:	e853 3f00 	ldrex	r3, [r3]
 800e932:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e93a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	461a      	mov	r2, r3
 800e944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e94a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e94c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e94e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e950:	e841 2300 	strex	r3, r2, [r1]
 800e954:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d1e4      	bne.n	800e926 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	3308      	adds	r3, #8
 800e962:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e966:	e853 3f00 	ldrex	r3, [r3]
 800e96a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e972:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	3308      	adds	r3, #8
 800e97a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e97c:	64ba      	str	r2, [r7, #72]	; 0x48
 800e97e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e980:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e984:	e841 2300 	strex	r3, r2, [r1]
 800e988:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d1e5      	bne.n	800e95c <UART_Start_Receive_IT+0x160>
 800e990:	e046      	b.n	800ea20 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e99a:	d107      	bne.n	800e9ac <UART_Start_Receive_IT+0x1b0>
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	691b      	ldr	r3, [r3, #16]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d103      	bne.n	800e9ac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	4a24      	ldr	r2, [pc, #144]	; (800ea38 <UART_Start_Receive_IT+0x23c>)
 800e9a8:	675a      	str	r2, [r3, #116]	; 0x74
 800e9aa:	e002      	b.n	800e9b2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	4a23      	ldr	r2, [pc, #140]	; (800ea3c <UART_Start_Receive_IT+0x240>)
 800e9b0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	691b      	ldr	r3, [r3, #16]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d019      	beq.n	800e9ee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c2:	e853 3f00 	ldrex	r3, [r3]
 800e9c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e9ce:	677b      	str	r3, [r7, #116]	; 0x74
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9d8:	637b      	str	r3, [r7, #52]	; 0x34
 800e9da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9e0:	e841 2300 	strex	r3, r2, [r1]
 800e9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1e6      	bne.n	800e9ba <UART_Start_Receive_IT+0x1be>
 800e9ec:	e018      	b.n	800ea20 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	e853 3f00 	ldrex	r3, [r3]
 800e9fa:	613b      	str	r3, [r7, #16]
   return(result);
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	f043 0320 	orr.w	r3, r3, #32
 800ea02:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	461a      	mov	r2, r3
 800ea0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea0c:	623b      	str	r3, [r7, #32]
 800ea0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea10:	69f9      	ldr	r1, [r7, #28]
 800ea12:	6a3a      	ldr	r2, [r7, #32]
 800ea14:	e841 2300 	strex	r3, r2, [r1]
 800ea18:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea1a:	69bb      	ldr	r3, [r7, #24]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1e6      	bne.n	800e9ee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	378c      	adds	r7, #140	; 0x8c
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	0800f261 	.word	0x0800f261
 800ea34:	0800ef01 	.word	0x0800ef01
 800ea38:	0800ed49 	.word	0x0800ed49
 800ea3c:	0800eb91 	.word	0x0800eb91

0800ea40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b095      	sub	sp, #84	; 0x54
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea50:	e853 3f00 	ldrex	r3, [r3]
 800ea54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	461a      	mov	r2, r3
 800ea64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea66:	643b      	str	r3, [r7, #64]	; 0x40
 800ea68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea6e:	e841 2300 	strex	r3, r2, [r1]
 800ea72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1e6      	bne.n	800ea48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	3308      	adds	r3, #8
 800ea80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea82:	6a3b      	ldr	r3, [r7, #32]
 800ea84:	e853 3f00 	ldrex	r3, [r3]
 800ea88:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea8a:	69fa      	ldr	r2, [r7, #28]
 800ea8c:	4b1e      	ldr	r3, [pc, #120]	; (800eb08 <UART_EndRxTransfer+0xc8>)
 800ea8e:	4013      	ands	r3, r2
 800ea90:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	3308      	adds	r3, #8
 800ea98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eaa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaa2:	e841 2300 	strex	r3, r2, [r1]
 800eaa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d1e5      	bne.n	800ea7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d118      	bne.n	800eae8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	e853 3f00 	ldrex	r3, [r3]
 800eac2:	60bb      	str	r3, [r7, #8]
   return(result);
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	f023 0310 	bic.w	r3, r3, #16
 800eaca:	647b      	str	r3, [r7, #68]	; 0x44
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	461a      	mov	r2, r3
 800ead2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ead4:	61bb      	str	r3, [r7, #24]
 800ead6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead8:	6979      	ldr	r1, [r7, #20]
 800eada:	69ba      	ldr	r2, [r7, #24]
 800eadc:	e841 2300 	strex	r3, r2, [r1]
 800eae0:	613b      	str	r3, [r7, #16]
   return(result);
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d1e6      	bne.n	800eab6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2220      	movs	r2, #32
 800eaec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	675a      	str	r2, [r3, #116]	; 0x74
}
 800eafc:	bf00      	nop
 800eafe:	3754      	adds	r7, #84	; 0x54
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr
 800eb08:	effffffe 	.word	0xeffffffe

0800eb0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f7fe ff2e 	bl	800d98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb30:	bf00      	nop
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b088      	sub	sp, #32
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	e853 3f00 	ldrex	r3, [r3]
 800eb4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb54:	61fb      	str	r3, [r7, #28]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	61bb      	str	r3, [r7, #24]
 800eb60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb62:	6979      	ldr	r1, [r7, #20]
 800eb64:	69ba      	ldr	r2, [r7, #24]
 800eb66:	e841 2300 	strex	r3, r2, [r1]
 800eb6a:	613b      	str	r3, [r7, #16]
   return(result);
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1e6      	bne.n	800eb40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2220      	movs	r2, #32
 800eb76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7fe fef9 	bl	800d978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb86:	bf00      	nop
 800eb88:	3720      	adds	r7, #32
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
	...

0800eb90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b09c      	sub	sp, #112	; 0x70
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb9e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eba8:	2b22      	cmp	r3, #34	; 0x22
 800ebaa:	f040 80be 	bne.w	800ed2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ebb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ebbc:	b2d9      	uxtb	r1, r3
 800ebbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ebc2:	b2da      	uxtb	r2, r3
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebc8:	400a      	ands	r2, r1
 800ebca:	b2d2      	uxtb	r2, r2
 800ebcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebd2:	1c5a      	adds	r2, r3, #1
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	3b01      	subs	r3, #1
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f040 80a1 	bne.w	800ed3a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec00:	e853 3f00 	ldrex	r3, [r3]
 800ec04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ec06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	461a      	mov	r2, r3
 800ec14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec16:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ec1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec1e:	e841 2300 	strex	r3, r2, [r1]
 800ec22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ec24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d1e6      	bne.n	800ebf8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	3308      	adds	r3, #8
 800ec30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec34:	e853 3f00 	ldrex	r3, [r3]
 800ec38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec3c:	f023 0301 	bic.w	r3, r3, #1
 800ec40:	667b      	str	r3, [r7, #100]	; 0x64
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	3308      	adds	r3, #8
 800ec48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ec4a:	647a      	str	r2, [r7, #68]	; 0x44
 800ec4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec52:	e841 2300 	strex	r3, r2, [r1]
 800ec56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1e5      	bne.n	800ec2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2220      	movs	r2, #32
 800ec62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a33      	ldr	r2, [pc, #204]	; (800ed44 <UART_RxISR_8BIT+0x1b4>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d01f      	beq.n	800ecbc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d018      	beq.n	800ecbc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec92:	e853 3f00 	ldrex	r3, [r3]
 800ec96:	623b      	str	r3, [r7, #32]
   return(result);
 800ec98:	6a3b      	ldr	r3, [r7, #32]
 800ec9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ec9e:	663b      	str	r3, [r7, #96]	; 0x60
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	461a      	mov	r2, r3
 800eca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eca8:	633b      	str	r3, [r7, #48]	; 0x30
 800ecaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecb0:	e841 2300 	strex	r3, r2, [r1]
 800ecb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ecb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d1e6      	bne.n	800ec8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d12e      	bne.n	800ed22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	e853 3f00 	ldrex	r3, [r3]
 800ecd6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f023 0310 	bic.w	r3, r3, #16
 800ecde:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	461a      	mov	r2, r3
 800ece6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ece8:	61fb      	str	r3, [r7, #28]
 800ecea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecec:	69b9      	ldr	r1, [r7, #24]
 800ecee:	69fa      	ldr	r2, [r7, #28]
 800ecf0:	e841 2300 	strex	r3, r2, [r1]
 800ecf4:	617b      	str	r3, [r7, #20]
   return(result);
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1e6      	bne.n	800ecca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	69db      	ldr	r3, [r3, #28]
 800ed02:	f003 0310 	and.w	r3, r3, #16
 800ed06:	2b10      	cmp	r3, #16
 800ed08:	d103      	bne.n	800ed12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2210      	movs	r2, #16
 800ed10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed18:	4619      	mov	r1, r3
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f7fe fe40 	bl	800d9a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed20:	e00b      	b.n	800ed3a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7f1 fce4 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800ed28:	e007      	b.n	800ed3a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	699a      	ldr	r2, [r3, #24]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f042 0208 	orr.w	r2, r2, #8
 800ed38:	619a      	str	r2, [r3, #24]
}
 800ed3a:	bf00      	nop
 800ed3c:	3770      	adds	r7, #112	; 0x70
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	58000c00 	.word	0x58000c00

0800ed48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b09c      	sub	sp, #112	; 0x70
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed56:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed60:	2b22      	cmp	r3, #34	; 0x22
 800ed62:	f040 80be 	bne.w	800eee2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed74:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ed76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ed7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ed7e:	4013      	ands	r3, r2
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed8a:	1c9a      	adds	r2, r3, #2
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	3b01      	subs	r3, #1
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f040 80a1 	bne.w	800eef2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edb8:	e853 3f00 	ldrex	r3, [r3]
 800edbc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800edbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800edc4:	667b      	str	r3, [r7, #100]	; 0x64
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	461a      	mov	r2, r3
 800edcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edce:	657b      	str	r3, [r7, #84]	; 0x54
 800edd0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800edd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800edd6:	e841 2300 	strex	r3, r2, [r1]
 800edda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1e6      	bne.n	800edb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	3308      	adds	r3, #8
 800ede8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edec:	e853 3f00 	ldrex	r3, [r3]
 800edf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800edf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf4:	f023 0301 	bic.w	r3, r3, #1
 800edf8:	663b      	str	r3, [r7, #96]	; 0x60
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	3308      	adds	r3, #8
 800ee00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee02:	643a      	str	r2, [r7, #64]	; 0x40
 800ee04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee0a:	e841 2300 	strex	r3, r2, [r1]
 800ee0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1e5      	bne.n	800ede2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2220      	movs	r2, #32
 800ee1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	4a33      	ldr	r2, [pc, #204]	; (800eefc <UART_RxISR_16BIT+0x1b4>)
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d01f      	beq.n	800ee74 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d018      	beq.n	800ee74 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee48:	6a3b      	ldr	r3, [r7, #32]
 800ee4a:	e853 3f00 	ldrex	r3, [r3]
 800ee4e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ee56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee62:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee68:	e841 2300 	strex	r3, r2, [r1]
 800ee6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d1e6      	bne.n	800ee42 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d12e      	bne.n	800eeda <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	e853 3f00 	ldrex	r3, [r3]
 800ee8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	f023 0310 	bic.w	r3, r3, #16
 800ee96:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eea0:	61bb      	str	r3, [r7, #24]
 800eea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea4:	6979      	ldr	r1, [r7, #20]
 800eea6:	69ba      	ldr	r2, [r7, #24]
 800eea8:	e841 2300 	strex	r3, r2, [r1]
 800eeac:	613b      	str	r3, [r7, #16]
   return(result);
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d1e6      	bne.n	800ee82 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	69db      	ldr	r3, [r3, #28]
 800eeba:	f003 0310 	and.w	r3, r3, #16
 800eebe:	2b10      	cmp	r3, #16
 800eec0:	d103      	bne.n	800eeca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2210      	movs	r2, #16
 800eec8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eed0:	4619      	mov	r1, r3
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7fe fd64 	bl	800d9a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eed8:	e00b      	b.n	800eef2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f7f1 fc08 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800eee0:	e007      	b.n	800eef2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	699a      	ldr	r2, [r3, #24]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f042 0208 	orr.w	r2, r2, #8
 800eef0:	619a      	str	r2, [r3, #24]
}
 800eef2:	bf00      	nop
 800eef4:	3770      	adds	r7, #112	; 0x70
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	58000c00 	.word	0x58000c00

0800ef00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b0ac      	sub	sp, #176	; 0xb0
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef0e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	69db      	ldr	r3, [r3, #28]
 800ef18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef36:	2b22      	cmp	r3, #34	; 0x22
 800ef38:	f040 8180 	bne.w	800f23c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ef42:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef46:	e123      	b.n	800f190 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef4e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef52:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ef56:	b2d9      	uxtb	r1, r3
 800ef58:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ef5c:	b2da      	uxtb	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef62:	400a      	ands	r2, r1
 800ef64:	b2d2      	uxtb	r2, r2
 800ef66:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef6c:	1c5a      	adds	r2, r3, #1
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	69db      	ldr	r3, [r3, #28]
 800ef8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ef8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef92:	f003 0307 	and.w	r3, r3, #7
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d053      	beq.n	800f042 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef9e:	f003 0301 	and.w	r3, r3, #1
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d011      	beq.n	800efca <UART_RxISR_8BIT_FIFOEN+0xca>
 800efa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800efaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d00b      	beq.n	800efca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2201      	movs	r2, #1
 800efb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efc0:	f043 0201 	orr.w	r2, r3, #1
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800efce:	f003 0302 	and.w	r3, r3, #2
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d011      	beq.n	800effa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800efd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800efda:	f003 0301 	and.w	r3, r3, #1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d00b      	beq.n	800effa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2202      	movs	r2, #2
 800efe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eff0:	f043 0204 	orr.w	r2, r3, #4
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800effa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800effe:	f003 0304 	and.w	r3, r3, #4
 800f002:	2b00      	cmp	r3, #0
 800f004:	d011      	beq.n	800f02a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f00a:	f003 0301 	and.w	r3, r3, #1
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00b      	beq.n	800f02a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2204      	movs	r2, #4
 800f018:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f020:	f043 0202 	orr.w	r2, r3, #2
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f030:	2b00      	cmp	r3, #0
 800f032:	d006      	beq.n	800f042 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7fe fca9 	bl	800d98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f048:	b29b      	uxth	r3, r3
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	f040 80a0 	bne.w	800f190 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f058:	e853 3f00 	ldrex	r3, [r3]
 800f05c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f05e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	461a      	mov	r2, r3
 800f06e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f072:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f074:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f076:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f078:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f07a:	e841 2300 	strex	r3, r2, [r1]
 800f07e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f082:	2b00      	cmp	r3, #0
 800f084:	d1e4      	bne.n	800f050 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	3308      	adds	r3, #8
 800f08c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f08e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f090:	e853 3f00 	ldrex	r3, [r3]
 800f094:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f096:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f098:	4b6e      	ldr	r3, [pc, #440]	; (800f254 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f09a:	4013      	ands	r3, r2
 800f09c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	3308      	adds	r3, #8
 800f0a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f0aa:	66ba      	str	r2, [r7, #104]	; 0x68
 800f0ac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f0b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f0b2:	e841 2300 	strex	r3, r2, [r1]
 800f0b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f0b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d1e3      	bne.n	800f086 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2220      	movs	r2, #32
 800f0c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4a60      	ldr	r2, [pc, #384]	; (800f258 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d021      	beq.n	800f120 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d01a      	beq.n	800f120 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0f2:	e853 3f00 	ldrex	r3, [r3]
 800f0f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f0f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f0fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	461a      	mov	r2, r3
 800f108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f10c:	657b      	str	r3, [r7, #84]	; 0x54
 800f10e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f110:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f112:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f114:	e841 2300 	strex	r3, r2, [r1]
 800f118:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d1e4      	bne.n	800f0ea <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f124:	2b01      	cmp	r3, #1
 800f126:	d130      	bne.n	800f18a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f136:	e853 3f00 	ldrex	r3, [r3]
 800f13a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13e:	f023 0310 	bic.w	r3, r3, #16
 800f142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	461a      	mov	r2, r3
 800f14c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f150:	643b      	str	r3, [r7, #64]	; 0x40
 800f152:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f154:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f156:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f158:	e841 2300 	strex	r3, r2, [r1]
 800f15c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f160:	2b00      	cmp	r3, #0
 800f162:	d1e4      	bne.n	800f12e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	69db      	ldr	r3, [r3, #28]
 800f16a:	f003 0310 	and.w	r3, r3, #16
 800f16e:	2b10      	cmp	r3, #16
 800f170:	d103      	bne.n	800f17a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2210      	movs	r2, #16
 800f178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f180:	4619      	mov	r1, r3
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f7fe fc0c 	bl	800d9a0 <HAL_UARTEx_RxEventCallback>
 800f188:	e002      	b.n	800f190 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7f1 fab0 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f190:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f194:	2b00      	cmp	r3, #0
 800f196:	d006      	beq.n	800f1a6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f19c:	f003 0320 	and.w	r3, r3, #32
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f47f aed1 	bne.w	800ef48 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f1b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d049      	beq.n	800f24c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f1be:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d242      	bcs.n	800f24c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	3308      	adds	r3, #8
 800f1cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ce:	6a3b      	ldr	r3, [r7, #32]
 800f1d0:	e853 3f00 	ldrex	r3, [r3]
 800f1d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f1dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	3308      	adds	r3, #8
 800f1e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f1ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1f2:	e841 2300 	strex	r3, r2, [r1]
 800f1f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d1e3      	bne.n	800f1c6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4a16      	ldr	r2, [pc, #88]	; (800f25c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f202:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	e853 3f00 	ldrex	r3, [r3]
 800f210:	60bb      	str	r3, [r7, #8]
   return(result);
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	f043 0320 	orr.w	r3, r3, #32
 800f218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	461a      	mov	r2, r3
 800f222:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f226:	61bb      	str	r3, [r7, #24]
 800f228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f22a:	6979      	ldr	r1, [r7, #20]
 800f22c:	69ba      	ldr	r2, [r7, #24]
 800f22e:	e841 2300 	strex	r3, r2, [r1]
 800f232:	613b      	str	r3, [r7, #16]
   return(result);
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d1e4      	bne.n	800f204 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f23a:	e007      	b.n	800f24c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	699a      	ldr	r2, [r3, #24]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f042 0208 	orr.w	r2, r2, #8
 800f24a:	619a      	str	r2, [r3, #24]
}
 800f24c:	bf00      	nop
 800f24e:	37b0      	adds	r7, #176	; 0xb0
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	effffffe 	.word	0xeffffffe
 800f258:	58000c00 	.word	0x58000c00
 800f25c:	0800eb91 	.word	0x0800eb91

0800f260 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b0ae      	sub	sp, #184	; 0xb8
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f26e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	69db      	ldr	r3, [r3, #28]
 800f278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	689b      	ldr	r3, [r3, #8]
 800f28c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f296:	2b22      	cmp	r3, #34	; 0x22
 800f298:	f040 8184 	bne.w	800f5a4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f2a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f2a6:	e127      	b.n	800f4f8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f2ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800f2be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f2c2:	4013      	ands	r3, r2
 800f2c4:	b29a      	uxth	r2, r3
 800f2c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f2ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2d0:	1c9a      	adds	r2, r3, #2
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	69db      	ldr	r3, [r3, #28]
 800f2ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f2f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f2f6:	f003 0307 	and.w	r3, r3, #7
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d053      	beq.n	800f3a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f2fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f302:	f003 0301 	and.w	r3, r3, #1
 800f306:	2b00      	cmp	r3, #0
 800f308:	d011      	beq.n	800f32e <UART_RxISR_16BIT_FIFOEN+0xce>
 800f30a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f30e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f312:	2b00      	cmp	r3, #0
 800f314:	d00b      	beq.n	800f32e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2201      	movs	r2, #1
 800f31c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f324:	f043 0201 	orr.w	r2, r3, #1
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f32e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f332:	f003 0302 	and.w	r3, r3, #2
 800f336:	2b00      	cmp	r3, #0
 800f338:	d011      	beq.n	800f35e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f33a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f33e:	f003 0301 	and.w	r3, r3, #1
 800f342:	2b00      	cmp	r3, #0
 800f344:	d00b      	beq.n	800f35e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2202      	movs	r2, #2
 800f34c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f354:	f043 0204 	orr.w	r2, r3, #4
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f35e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f362:	f003 0304 	and.w	r3, r3, #4
 800f366:	2b00      	cmp	r3, #0
 800f368:	d011      	beq.n	800f38e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f36a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f36e:	f003 0301 	and.w	r3, r3, #1
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00b      	beq.n	800f38e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2204      	movs	r2, #4
 800f37c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f384:	f043 0202 	orr.w	r2, r3, #2
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f394:	2b00      	cmp	r3, #0
 800f396:	d006      	beq.n	800f3a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f7fe faf7 	bl	800d98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	f040 80a2 	bne.w	800f4f8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3bc:	e853 3f00 	ldrex	r3, [r3]
 800f3c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f3c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f3c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f3c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f3da:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f3de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f3e2:	e841 2300 	strex	r3, r2, [r1]
 800f3e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f3e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d1e2      	bne.n	800f3b4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	3308      	adds	r3, #8
 800f3f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3f8:	e853 3f00 	ldrex	r3, [r3]
 800f3fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f3fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f400:	4b6e      	ldr	r3, [pc, #440]	; (800f5bc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f402:	4013      	ands	r3, r2
 800f404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	3308      	adds	r3, #8
 800f40e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f412:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f414:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f416:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f418:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f41a:	e841 2300 	strex	r3, r2, [r1]
 800f41e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1e3      	bne.n	800f3ee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2220      	movs	r2, #32
 800f42a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2200      	movs	r2, #0
 800f432:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	4a60      	ldr	r2, [pc, #384]	; (800f5c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d021      	beq.n	800f488 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d01a      	beq.n	800f488 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f45a:	e853 3f00 	ldrex	r3, [r3]
 800f45e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f462:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	461a      	mov	r2, r3
 800f470:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f474:	65bb      	str	r3, [r7, #88]	; 0x58
 800f476:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f47a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f47c:	e841 2300 	strex	r3, r2, [r1]
 800f480:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1e4      	bne.n	800f452 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d130      	bne.n	800f4f2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2200      	movs	r2, #0
 800f494:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49e:	e853 3f00 	ldrex	r3, [r3]
 800f4a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4a6:	f023 0310 	bic.w	r3, r3, #16
 800f4aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f4b8:	647b      	str	r3, [r7, #68]	; 0x44
 800f4ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4c0:	e841 2300 	strex	r3, r2, [r1]
 800f4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d1e4      	bne.n	800f496 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	69db      	ldr	r3, [r3, #28]
 800f4d2:	f003 0310 	and.w	r3, r3, #16
 800f4d6:	2b10      	cmp	r3, #16
 800f4d8:	d103      	bne.n	800f4e2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2210      	movs	r2, #16
 800f4e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f7fe fa58 	bl	800d9a0 <HAL_UARTEx_RxEventCallback>
 800f4f0:	e002      	b.n	800f4f8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f7f1 f8fc 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f4f8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d006      	beq.n	800f50e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f500:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f504:	f003 0320 	and.w	r3, r3, #32
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f47f aecd 	bne.w	800f2a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f514:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f518:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d049      	beq.n	800f5b4 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f526:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d242      	bcs.n	800f5b4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	3308      	adds	r3, #8
 800f534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f538:	e853 3f00 	ldrex	r3, [r3]
 800f53c:	623b      	str	r3, [r7, #32]
   return(result);
 800f53e:	6a3b      	ldr	r3, [r7, #32]
 800f540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	3308      	adds	r3, #8
 800f54e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f552:	633a      	str	r2, [r7, #48]	; 0x30
 800f554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f55a:	e841 2300 	strex	r3, r2, [r1]
 800f55e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f562:	2b00      	cmp	r3, #0
 800f564:	d1e3      	bne.n	800f52e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a16      	ldr	r2, [pc, #88]	; (800f5c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f56a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	e853 3f00 	ldrex	r3, [r3]
 800f578:	60fb      	str	r3, [r7, #12]
   return(result);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f043 0320 	orr.w	r3, r3, #32
 800f580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	461a      	mov	r2, r3
 800f58a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f58e:	61fb      	str	r3, [r7, #28]
 800f590:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f592:	69b9      	ldr	r1, [r7, #24]
 800f594:	69fa      	ldr	r2, [r7, #28]
 800f596:	e841 2300 	strex	r3, r2, [r1]
 800f59a:	617b      	str	r3, [r7, #20]
   return(result);
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d1e4      	bne.n	800f56c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5a2:	e007      	b.n	800f5b4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	699a      	ldr	r2, [r3, #24]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f042 0208 	orr.w	r2, r2, #8
 800f5b2:	619a      	str	r2, [r3, #24]
}
 800f5b4:	bf00      	nop
 800f5b6:	37b8      	adds	r7, #184	; 0xb8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	effffffe 	.word	0xeffffffe
 800f5c0:	58000c00 	.word	0x58000c00
 800f5c4:	0800ed49 	.word	0x0800ed49

0800f5c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b083      	sub	sp, #12
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f5d0:	bf00      	nop
 800f5d2:	370c      	adds	r7, #12
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr

0800f5dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f5e4:	bf00      	nop
 800f5e6:	370c      	adds	r7, #12
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr

0800f5f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f5f8:	bf00      	nop
 800f5fa:	370c      	adds	r7, #12
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr

0800f604 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f604:	b480      	push	{r7}
 800f606:	b085      	sub	sp, #20
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f612:	2b01      	cmp	r3, #1
 800f614:	d101      	bne.n	800f61a <HAL_UARTEx_DisableFifoMode+0x16>
 800f616:	2302      	movs	r3, #2
 800f618:	e027      	b.n	800f66a <HAL_UARTEx_DisableFifoMode+0x66>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2201      	movs	r2, #1
 800f61e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2224      	movs	r2, #36	; 0x24
 800f626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f022 0201 	bic.w	r2, r2, #1
 800f640:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f648:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2200      	movs	r2, #0
 800f64e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	68fa      	ldr	r2, [r7, #12]
 800f656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2220      	movs	r2, #32
 800f65c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2200      	movs	r2, #0
 800f664:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f668:	2300      	movs	r3, #0
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3714      	adds	r7, #20
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr

0800f676 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f676:	b580      	push	{r7, lr}
 800f678:	b084      	sub	sp, #16
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
 800f67e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f686:	2b01      	cmp	r3, #1
 800f688:	d101      	bne.n	800f68e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f68a:	2302      	movs	r3, #2
 800f68c:	e02d      	b.n	800f6ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2201      	movs	r2, #1
 800f692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2224      	movs	r2, #36	; 0x24
 800f69a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	681a      	ldr	r2, [r3, #0]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	f022 0201 	bic.w	r2, r2, #1
 800f6b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	683a      	ldr	r2, [r7, #0]
 800f6c6:	430a      	orrs	r2, r1
 800f6c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f000 f850 	bl	800f770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2220      	movs	r2, #32
 800f6dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3710      	adds	r7, #16
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}

0800f6f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6f2:	b580      	push	{r7, lr}
 800f6f4:	b084      	sub	sp, #16
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
 800f6fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f702:	2b01      	cmp	r3, #1
 800f704:	d101      	bne.n	800f70a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f706:	2302      	movs	r3, #2
 800f708:	e02d      	b.n	800f766 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2201      	movs	r2, #1
 800f70e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2224      	movs	r2, #36	; 0x24
 800f716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	681a      	ldr	r2, [r3, #0]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f022 0201 	bic.w	r2, r2, #1
 800f730:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	689b      	ldr	r3, [r3, #8]
 800f738:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	683a      	ldr	r2, [r7, #0]
 800f742:	430a      	orrs	r2, r1
 800f744:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 f812 	bl	800f770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68fa      	ldr	r2, [r7, #12]
 800f752:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2220      	movs	r2, #32
 800f758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f764:	2300      	movs	r3, #0
}
 800f766:	4618      	mov	r0, r3
 800f768:	3710      	adds	r7, #16
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
	...

0800f770 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f770:	b480      	push	{r7}
 800f772:	b085      	sub	sp, #20
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d108      	bne.n	800f792 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2201      	movs	r2, #1
 800f784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2201      	movs	r2, #1
 800f78c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f790:	e031      	b.n	800f7f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f792:	2310      	movs	r3, #16
 800f794:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f796:	2310      	movs	r3, #16
 800f798:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	689b      	ldr	r3, [r3, #8]
 800f7a0:	0e5b      	lsrs	r3, r3, #25
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	f003 0307 	and.w	r3, r3, #7
 800f7a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	0f5b      	lsrs	r3, r3, #29
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	f003 0307 	and.w	r3, r3, #7
 800f7b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f7ba:	7bbb      	ldrb	r3, [r7, #14]
 800f7bc:	7b3a      	ldrb	r2, [r7, #12]
 800f7be:	4911      	ldr	r1, [pc, #68]	; (800f804 <UARTEx_SetNbDataToProcess+0x94>)
 800f7c0:	5c8a      	ldrb	r2, [r1, r2]
 800f7c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f7c6:	7b3a      	ldrb	r2, [r7, #12]
 800f7c8:	490f      	ldr	r1, [pc, #60]	; (800f808 <UARTEx_SetNbDataToProcess+0x98>)
 800f7ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f7cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7d8:	7bfb      	ldrb	r3, [r7, #15]
 800f7da:	7b7a      	ldrb	r2, [r7, #13]
 800f7dc:	4909      	ldr	r1, [pc, #36]	; (800f804 <UARTEx_SetNbDataToProcess+0x94>)
 800f7de:	5c8a      	ldrb	r2, [r1, r2]
 800f7e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f7e4:	7b7a      	ldrb	r2, [r7, #13]
 800f7e6:	4908      	ldr	r1, [pc, #32]	; (800f808 <UARTEx_SetNbDataToProcess+0x98>)
 800f7e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f7f6:	bf00      	nop
 800f7f8:	3714      	adds	r7, #20
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	08014330 	.word	0x08014330
 800f808:	08014338 	.word	0x08014338

0800f80c <__NVIC_SetPriority>:
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	4603      	mov	r3, r0
 800f814:	6039      	str	r1, [r7, #0]
 800f816:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	db0a      	blt.n	800f836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	b2da      	uxtb	r2, r3
 800f824:	490c      	ldr	r1, [pc, #48]	; (800f858 <__NVIC_SetPriority+0x4c>)
 800f826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f82a:	0112      	lsls	r2, r2, #4
 800f82c:	b2d2      	uxtb	r2, r2
 800f82e:	440b      	add	r3, r1
 800f830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f834:	e00a      	b.n	800f84c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	4908      	ldr	r1, [pc, #32]	; (800f85c <__NVIC_SetPriority+0x50>)
 800f83c:	88fb      	ldrh	r3, [r7, #6]
 800f83e:	f003 030f 	and.w	r3, r3, #15
 800f842:	3b04      	subs	r3, #4
 800f844:	0112      	lsls	r2, r2, #4
 800f846:	b2d2      	uxtb	r2, r2
 800f848:	440b      	add	r3, r1
 800f84a:	761a      	strb	r2, [r3, #24]
}
 800f84c:	bf00      	nop
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr
 800f858:	e000e100 	.word	0xe000e100
 800f85c:	e000ed00 	.word	0xe000ed00

0800f860 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f860:	b580      	push	{r7, lr}
 800f862:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f864:	4b05      	ldr	r3, [pc, #20]	; (800f87c <SysTick_Handler+0x1c>)
 800f866:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f868:	f002 fa7e 	bl	8011d68 <xTaskGetSchedulerState>
 800f86c:	4603      	mov	r3, r0
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d001      	beq.n	800f876 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f872:	f003 f8a1 	bl	80129b8 <xPortSysTickHandler>
  }
}
 800f876:	bf00      	nop
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	e000e010 	.word	0xe000e010

0800f880 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f880:	b580      	push	{r7, lr}
 800f882:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f884:	2100      	movs	r1, #0
 800f886:	f06f 0004 	mvn.w	r0, #4
 800f88a:	f7ff ffbf 	bl	800f80c <__NVIC_SetPriority>
#endif
}
 800f88e:	bf00      	nop
 800f890:	bd80      	pop	{r7, pc}
	...

0800f894 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f89a:	f3ef 8305 	mrs	r3, IPSR
 800f89e:	603b      	str	r3, [r7, #0]
  return(result);
 800f8a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d003      	beq.n	800f8ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f8a6:	f06f 0305 	mvn.w	r3, #5
 800f8aa:	607b      	str	r3, [r7, #4]
 800f8ac:	e00c      	b.n	800f8c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f8ae:	4b0a      	ldr	r3, [pc, #40]	; (800f8d8 <osKernelInitialize+0x44>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d105      	bne.n	800f8c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f8b6:	4b08      	ldr	r3, [pc, #32]	; (800f8d8 <osKernelInitialize+0x44>)
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	607b      	str	r3, [r7, #4]
 800f8c0:	e002      	b.n	800f8c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f8c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f8c8:	687b      	ldr	r3, [r7, #4]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	370c      	adds	r7, #12
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr
 800f8d6:	bf00      	nop
 800f8d8:	2400063c 	.word	0x2400063c

0800f8dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8e2:	f3ef 8305 	mrs	r3, IPSR
 800f8e6:	603b      	str	r3, [r7, #0]
  return(result);
 800f8e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d003      	beq.n	800f8f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f8ee:	f06f 0305 	mvn.w	r3, #5
 800f8f2:	607b      	str	r3, [r7, #4]
 800f8f4:	e010      	b.n	800f918 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f8f6:	4b0b      	ldr	r3, [pc, #44]	; (800f924 <osKernelStart+0x48>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d109      	bne.n	800f912 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f8fe:	f7ff ffbf 	bl	800f880 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f902:	4b08      	ldr	r3, [pc, #32]	; (800f924 <osKernelStart+0x48>)
 800f904:	2202      	movs	r2, #2
 800f906:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f908:	f001 fd48 	bl	801139c <vTaskStartScheduler>
      stat = osOK;
 800f90c:	2300      	movs	r3, #0
 800f90e:	607b      	str	r3, [r7, #4]
 800f910:	e002      	b.n	800f918 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f916:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f918:	687b      	ldr	r3, [r7, #4]
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	2400063c 	.word	0x2400063c

0800f928 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f928:	b580      	push	{r7, lr}
 800f92a:	b08e      	sub	sp, #56	; 0x38
 800f92c:	af04      	add	r7, sp, #16
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f934:	2300      	movs	r3, #0
 800f936:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f938:	f3ef 8305 	mrs	r3, IPSR
 800f93c:	617b      	str	r3, [r7, #20]
  return(result);
 800f93e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f940:	2b00      	cmp	r3, #0
 800f942:	d17e      	bne.n	800fa42 <osThreadNew+0x11a>
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d07b      	beq.n	800fa42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f94a:	2380      	movs	r3, #128	; 0x80
 800f94c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f94e:	2318      	movs	r3, #24
 800f950:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f952:	2300      	movs	r3, #0
 800f954:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f95a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d045      	beq.n	800f9ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d002      	beq.n	800f970 <osThreadNew+0x48>
        name = attr->name;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	699b      	ldr	r3, [r3, #24]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d002      	beq.n	800f97e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	699b      	ldr	r3, [r3, #24]
 800f97c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d008      	beq.n	800f996 <osThreadNew+0x6e>
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	2b38      	cmp	r3, #56	; 0x38
 800f988:	d805      	bhi.n	800f996 <osThreadNew+0x6e>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	f003 0301 	and.w	r3, r3, #1
 800f992:	2b00      	cmp	r3, #0
 800f994:	d001      	beq.n	800f99a <osThreadNew+0x72>
        return (NULL);
 800f996:	2300      	movs	r3, #0
 800f998:	e054      	b.n	800fa44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	695b      	ldr	r3, [r3, #20]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d003      	beq.n	800f9aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	695b      	ldr	r3, [r3, #20]
 800f9a6:	089b      	lsrs	r3, r3, #2
 800f9a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d00e      	beq.n	800f9d0 <osThreadNew+0xa8>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	2b5b      	cmp	r3, #91	; 0x5b
 800f9b8:	d90a      	bls.n	800f9d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d006      	beq.n	800f9d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	695b      	ldr	r3, [r3, #20]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d002      	beq.n	800f9d0 <osThreadNew+0xa8>
        mem = 1;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	61bb      	str	r3, [r7, #24]
 800f9ce:	e010      	b.n	800f9f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d10c      	bne.n	800f9f2 <osThreadNew+0xca>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d108      	bne.n	800f9f2 <osThreadNew+0xca>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d104      	bne.n	800f9f2 <osThreadNew+0xca>
          mem = 0;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	61bb      	str	r3, [r7, #24]
 800f9ec:	e001      	b.n	800f9f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d110      	bne.n	800fa1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fa00:	9202      	str	r2, [sp, #8]
 800fa02:	9301      	str	r3, [sp, #4]
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	9300      	str	r3, [sp, #0]
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	6a3a      	ldr	r2, [r7, #32]
 800fa0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f001 faee 	bl	8010ff0 <xTaskCreateStatic>
 800fa14:	4603      	mov	r3, r0
 800fa16:	613b      	str	r3, [r7, #16]
 800fa18:	e013      	b.n	800fa42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d110      	bne.n	800fa42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fa20:	6a3b      	ldr	r3, [r7, #32]
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	f107 0310 	add.w	r3, r7, #16
 800fa28:	9301      	str	r3, [sp, #4]
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa32:	68f8      	ldr	r0, [r7, #12]
 800fa34:	f001 fb39 	bl	80110aa <xTaskCreate>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d001      	beq.n	800fa42 <osThreadNew+0x11a>
            hTask = NULL;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fa42:	693b      	ldr	r3, [r7, #16]
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3728      	adds	r7, #40	; 0x28
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa52:	f3ef 8305 	mrs	r3, IPSR
 800fa56:	603b      	str	r3, [r7, #0]
  return(result);
 800fa58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d003      	beq.n	800fa66 <osThreadYield+0x1a>
    stat = osErrorISR;
 800fa5e:	f06f 0305 	mvn.w	r3, #5
 800fa62:	607b      	str	r3, [r7, #4]
 800fa64:	e009      	b.n	800fa7a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800fa66:	2300      	movs	r3, #0
 800fa68:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800fa6a:	4b07      	ldr	r3, [pc, #28]	; (800fa88 <osThreadYield+0x3c>)
 800fa6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa70:	601a      	str	r2, [r3, #0]
 800fa72:	f3bf 8f4f 	dsb	sy
 800fa76:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800fa7a:	687b      	ldr	r3, [r7, #4]
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	370c      	adds	r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr
 800fa88:	e000ed04 	.word	0xe000ed04

0800fa8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa94:	f3ef 8305 	mrs	r3, IPSR
 800fa98:	60bb      	str	r3, [r7, #8]
  return(result);
 800fa9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d003      	beq.n	800faa8 <osDelay+0x1c>
    stat = osErrorISR;
 800faa0:	f06f 0305 	mvn.w	r3, #5
 800faa4:	60fb      	str	r3, [r7, #12]
 800faa6:	e007      	b.n	800fab8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800faa8:	2300      	movs	r3, #0
 800faaa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d002      	beq.n	800fab8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f001 fc3e 	bl	8011334 <vTaskDelay>
    }
  }

  return (stat);
 800fab8:	68fb      	ldr	r3, [r7, #12]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b086      	sub	sp, #24
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800faca:	2300      	movs	r3, #0
 800facc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800face:	f3ef 8305 	mrs	r3, IPSR
 800fad2:	60fb      	str	r3, [r7, #12]
  return(result);
 800fad4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d12d      	bne.n	800fb36 <osEventFlagsNew+0x74>
    mem = -1;
 800fada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fade:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d015      	beq.n	800fb12 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	689b      	ldr	r3, [r3, #8]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d006      	beq.n	800fafc <osEventFlagsNew+0x3a>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	2b1f      	cmp	r3, #31
 800faf4:	d902      	bls.n	800fafc <osEventFlagsNew+0x3a>
        mem = 1;
 800faf6:	2301      	movs	r3, #1
 800faf8:	613b      	str	r3, [r7, #16]
 800fafa:	e00c      	b.n	800fb16 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	689b      	ldr	r3, [r3, #8]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d108      	bne.n	800fb16 <osEventFlagsNew+0x54>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d104      	bne.n	800fb16 <osEventFlagsNew+0x54>
          mem = 0;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	613b      	str	r3, [r7, #16]
 800fb10:	e001      	b.n	800fb16 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800fb12:	2300      	movs	r3, #0
 800fb14:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d106      	bne.n	800fb2a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	689b      	ldr	r3, [r3, #8]
 800fb20:	4618      	mov	r0, r3
 800fb22:	f000 fa1d 	bl	800ff60 <xEventGroupCreateStatic>
 800fb26:	6178      	str	r0, [r7, #20]
 800fb28:	e005      	b.n	800fb36 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d102      	bne.n	800fb36 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800fb30:	f000 fa4d 	bl	800ffce <xEventGroupCreate>
 800fb34:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800fb36:	697b      	ldr	r3, [r7, #20]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3718      	adds	r7, #24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b086      	sub	sp, #24
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d004      	beq.n	800fb5e <osEventFlagsSet+0x1e>
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d003      	beq.n	800fb66 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800fb5e:	f06f 0303 	mvn.w	r3, #3
 800fb62:	617b      	str	r3, [r7, #20]
 800fb64:	e028      	b.n	800fbb8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb66:	f3ef 8305 	mrs	r3, IPSR
 800fb6a:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d01d      	beq.n	800fbae <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800fb72:	2300      	movs	r3, #0
 800fb74:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800fb76:	f107 0308 	add.w	r3, r7, #8
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	6839      	ldr	r1, [r7, #0]
 800fb7e:	6938      	ldr	r0, [r7, #16]
 800fb80:	f000 fbc8 	bl	8010314 <xEventGroupSetBitsFromISR>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d103      	bne.n	800fb92 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800fb8a:	f06f 0302 	mvn.w	r3, #2
 800fb8e:	617b      	str	r3, [r7, #20]
 800fb90:	e012      	b.n	800fbb8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d00d      	beq.n	800fbb8 <osEventFlagsSet+0x78>
 800fb9c:	4b09      	ldr	r3, [pc, #36]	; (800fbc4 <osEventFlagsSet+0x84>)
 800fb9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fba2:	601a      	str	r2, [r3, #0]
 800fba4:	f3bf 8f4f 	dsb	sy
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	e004      	b.n	800fbb8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800fbae:	6839      	ldr	r1, [r7, #0]
 800fbb0:	6938      	ldr	r0, [r7, #16]
 800fbb2:	f000 faf5 	bl	80101a0 <xEventGroupSetBits>
 800fbb6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800fbb8:	697b      	ldr	r3, [r7, #20]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3718      	adds	r7, #24
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	e000ed04 	.word	0xe000ed04

0800fbc8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b08c      	sub	sp, #48	; 0x30
 800fbcc:	af02      	add	r7, sp, #8
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]
 800fbd4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800fbda:	69bb      	ldr	r3, [r7, #24]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d004      	beq.n	800fbea <osEventFlagsWait+0x22>
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d003      	beq.n	800fbf2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800fbea:	f06f 0303 	mvn.w	r3, #3
 800fbee:	61fb      	str	r3, [r7, #28]
 800fbf0:	e04b      	b.n	800fc8a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbf2:	f3ef 8305 	mrs	r3, IPSR
 800fbf6:	617b      	str	r3, [r7, #20]
  return(result);
 800fbf8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d003      	beq.n	800fc06 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800fbfe:	f06f 0305 	mvn.w	r3, #5
 800fc02:	61fb      	str	r3, [r7, #28]
 800fc04:	e041      	b.n	800fc8a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f003 0301 	and.w	r3, r3, #1
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d002      	beq.n	800fc16 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800fc10:	2301      	movs	r3, #1
 800fc12:	627b      	str	r3, [r7, #36]	; 0x24
 800fc14:	e001      	b.n	800fc1a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800fc16:	2300      	movs	r3, #0
 800fc18:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f003 0302 	and.w	r3, r3, #2
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d002      	beq.n	800fc2a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800fc24:	2300      	movs	r3, #0
 800fc26:	623b      	str	r3, [r7, #32]
 800fc28:	e001      	b.n	800fc2e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	9300      	str	r3, [sp, #0]
 800fc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc34:	6a3a      	ldr	r2, [r7, #32]
 800fc36:	68b9      	ldr	r1, [r7, #8]
 800fc38:	69b8      	ldr	r0, [r7, #24]
 800fc3a:	f000 f9e3 	bl	8010004 <xEventGroupWaitBits>
 800fc3e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f003 0301 	and.w	r3, r3, #1
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d010      	beq.n	800fc6c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800fc4a:	68ba      	ldr	r2, [r7, #8]
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	4013      	ands	r3, r2
 800fc50:	68ba      	ldr	r2, [r7, #8]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d019      	beq.n	800fc8a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d003      	beq.n	800fc64 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800fc5c:	f06f 0301 	mvn.w	r3, #1
 800fc60:	61fb      	str	r3, [r7, #28]
 800fc62:	e012      	b.n	800fc8a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800fc64:	f06f 0302 	mvn.w	r3, #2
 800fc68:	61fb      	str	r3, [r7, #28]
 800fc6a:	e00e      	b.n	800fc8a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800fc6c:	68ba      	ldr	r2, [r7, #8]
 800fc6e:	69fb      	ldr	r3, [r7, #28]
 800fc70:	4013      	ands	r3, r2
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d109      	bne.n	800fc8a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d003      	beq.n	800fc84 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800fc7c:	f06f 0301 	mvn.w	r3, #1
 800fc80:	61fb      	str	r3, [r7, #28]
 800fc82:	e002      	b.n	800fc8a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800fc84:	f06f 0302 	mvn.w	r3, #2
 800fc88:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800fc8a:	69fb      	ldr	r3, [r7, #28]
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3728      	adds	r7, #40	; 0x28
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b08a      	sub	sp, #40	; 0x28
 800fc98:	af02      	add	r7, sp, #8
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fca0:	2300      	movs	r3, #0
 800fca2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fca4:	f3ef 8305 	mrs	r3, IPSR
 800fca8:	613b      	str	r3, [r7, #16]
  return(result);
 800fcaa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d15f      	bne.n	800fd70 <osMessageQueueNew+0xdc>
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d05c      	beq.n	800fd70 <osMessageQueueNew+0xdc>
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d059      	beq.n	800fd70 <osMessageQueueNew+0xdc>
    mem = -1;
 800fcbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fcc0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d029      	beq.n	800fd1c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d012      	beq.n	800fcf6 <osMessageQueueNew+0x62>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	2b4f      	cmp	r3, #79	; 0x4f
 800fcd6:	d90e      	bls.n	800fcf6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d00a      	beq.n	800fcf6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	695a      	ldr	r2, [r3, #20]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	68b9      	ldr	r1, [r7, #8]
 800fce8:	fb01 f303 	mul.w	r3, r1, r3
 800fcec:	429a      	cmp	r2, r3
 800fcee:	d302      	bcc.n	800fcf6 <osMessageQueueNew+0x62>
        mem = 1;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	61bb      	str	r3, [r7, #24]
 800fcf4:	e014      	b.n	800fd20 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d110      	bne.n	800fd20 <osMessageQueueNew+0x8c>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d10c      	bne.n	800fd20 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d108      	bne.n	800fd20 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	695b      	ldr	r3, [r3, #20]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d104      	bne.n	800fd20 <osMessageQueueNew+0x8c>
          mem = 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	61bb      	str	r3, [r7, #24]
 800fd1a:	e001      	b.n	800fd20 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fd20:	69bb      	ldr	r3, [r7, #24]
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d10b      	bne.n	800fd3e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	691a      	ldr	r2, [r3, #16]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	689b      	ldr	r3, [r3, #8]
 800fd2e:	2100      	movs	r1, #0
 800fd30:	9100      	str	r1, [sp, #0]
 800fd32:	68b9      	ldr	r1, [r7, #8]
 800fd34:	68f8      	ldr	r0, [r7, #12]
 800fd36:	f000 fc1d 	bl	8010574 <xQueueGenericCreateStatic>
 800fd3a:	61f8      	str	r0, [r7, #28]
 800fd3c:	e008      	b.n	800fd50 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d105      	bne.n	800fd50 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fd44:	2200      	movs	r2, #0
 800fd46:	68b9      	ldr	r1, [r7, #8]
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f000 fc8b 	bl	8010664 <xQueueGenericCreate>
 800fd4e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00c      	beq.n	800fd70 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d003      	beq.n	800fd64 <osMessageQueueNew+0xd0>
        name = attr->name;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	617b      	str	r3, [r7, #20]
 800fd62:	e001      	b.n	800fd68 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800fd64:	2300      	movs	r3, #0
 800fd66:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800fd68:	6979      	ldr	r1, [r7, #20]
 800fd6a:	69f8      	ldr	r0, [r7, #28]
 800fd6c:	f001 f8e2 	bl	8010f34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fd70:	69fb      	ldr	r3, [r7, #28]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3720      	adds	r7, #32
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
	...

0800fd7c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b088      	sub	sp, #32
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	603b      	str	r3, [r7, #0]
 800fd88:	4613      	mov	r3, r2
 800fd8a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fd90:	2300      	movs	r3, #0
 800fd92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd94:	f3ef 8305 	mrs	r3, IPSR
 800fd98:	617b      	str	r3, [r7, #20]
  return(result);
 800fd9a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d028      	beq.n	800fdf2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d005      	beq.n	800fdb2 <osMessageQueuePut+0x36>
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d002      	beq.n	800fdb2 <osMessageQueuePut+0x36>
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d003      	beq.n	800fdba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800fdb2:	f06f 0303 	mvn.w	r3, #3
 800fdb6:	61fb      	str	r3, [r7, #28]
 800fdb8:	e038      	b.n	800fe2c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fdbe:	f107 0210 	add.w	r2, r7, #16
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	68b9      	ldr	r1, [r7, #8]
 800fdc6:	69b8      	ldr	r0, [r7, #24]
 800fdc8:	f000 fda8 	bl	801091c <xQueueGenericSendFromISR>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d003      	beq.n	800fdda <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800fdd2:	f06f 0302 	mvn.w	r3, #2
 800fdd6:	61fb      	str	r3, [r7, #28]
 800fdd8:	e028      	b.n	800fe2c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d025      	beq.n	800fe2c <osMessageQueuePut+0xb0>
 800fde0:	4b15      	ldr	r3, [pc, #84]	; (800fe38 <osMessageQueuePut+0xbc>)
 800fde2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fde6:	601a      	str	r2, [r3, #0]
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	f3bf 8f6f 	isb	sy
 800fdf0:	e01c      	b.n	800fe2c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d002      	beq.n	800fdfe <osMessageQueuePut+0x82>
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d103      	bne.n	800fe06 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800fdfe:	f06f 0303 	mvn.w	r3, #3
 800fe02:	61fb      	str	r3, [r7, #28]
 800fe04:	e012      	b.n	800fe2c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fe06:	2300      	movs	r3, #0
 800fe08:	683a      	ldr	r2, [r7, #0]
 800fe0a:	68b9      	ldr	r1, [r7, #8]
 800fe0c:	69b8      	ldr	r0, [r7, #24]
 800fe0e:	f000 fc87 	bl	8010720 <xQueueGenericSend>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d009      	beq.n	800fe2c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d003      	beq.n	800fe26 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800fe1e:	f06f 0301 	mvn.w	r3, #1
 800fe22:	61fb      	str	r3, [r7, #28]
 800fe24:	e002      	b.n	800fe2c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800fe26:	f06f 0302 	mvn.w	r3, #2
 800fe2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fe2c:	69fb      	ldr	r3, [r7, #28]
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3720      	adds	r7, #32
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	e000ed04 	.word	0xe000ed04

0800fe3c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b088      	sub	sp, #32
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	607a      	str	r2, [r7, #4]
 800fe48:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe52:	f3ef 8305 	mrs	r3, IPSR
 800fe56:	617b      	str	r3, [r7, #20]
  return(result);
 800fe58:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d028      	beq.n	800feb0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d005      	beq.n	800fe70 <osMessageQueueGet+0x34>
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d002      	beq.n	800fe70 <osMessageQueueGet+0x34>
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d003      	beq.n	800fe78 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800fe70:	f06f 0303 	mvn.w	r3, #3
 800fe74:	61fb      	str	r3, [r7, #28]
 800fe76:	e037      	b.n	800fee8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fe7c:	f107 0310 	add.w	r3, r7, #16
 800fe80:	461a      	mov	r2, r3
 800fe82:	68b9      	ldr	r1, [r7, #8]
 800fe84:	69b8      	ldr	r0, [r7, #24]
 800fe86:	f000 fec5 	bl	8010c14 <xQueueReceiveFromISR>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d003      	beq.n	800fe98 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fe90:	f06f 0302 	mvn.w	r3, #2
 800fe94:	61fb      	str	r3, [r7, #28]
 800fe96:	e027      	b.n	800fee8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d024      	beq.n	800fee8 <osMessageQueueGet+0xac>
 800fe9e:	4b15      	ldr	r3, [pc, #84]	; (800fef4 <osMessageQueueGet+0xb8>)
 800fea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fea4:	601a      	str	r2, [r3, #0]
 800fea6:	f3bf 8f4f 	dsb	sy
 800feaa:	f3bf 8f6f 	isb	sy
 800feae:	e01b      	b.n	800fee8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800feb0:	69bb      	ldr	r3, [r7, #24]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d002      	beq.n	800febc <osMessageQueueGet+0x80>
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d103      	bne.n	800fec4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800febc:	f06f 0303 	mvn.w	r3, #3
 800fec0:	61fb      	str	r3, [r7, #28]
 800fec2:	e011      	b.n	800fee8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fec4:	683a      	ldr	r2, [r7, #0]
 800fec6:	68b9      	ldr	r1, [r7, #8]
 800fec8:	69b8      	ldr	r0, [r7, #24]
 800feca:	f000 fdc3 	bl	8010a54 <xQueueReceive>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d009      	beq.n	800fee8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d003      	beq.n	800fee2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800feda:	f06f 0301 	mvn.w	r3, #1
 800fede:	61fb      	str	r3, [r7, #28]
 800fee0:	e002      	b.n	800fee8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fee2:	f06f 0302 	mvn.w	r3, #2
 800fee6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fee8:	69fb      	ldr	r3, [r7, #28]
}
 800feea:	4618      	mov	r0, r3
 800feec:	3720      	adds	r7, #32
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}
 800fef2:	bf00      	nop
 800fef4:	e000ed04 	.word	0xe000ed04

0800fef8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fef8:	b480      	push	{r7}
 800fefa:	b085      	sub	sp, #20
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	4a07      	ldr	r2, [pc, #28]	; (800ff24 <vApplicationGetIdleTaskMemory+0x2c>)
 800ff08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	4a06      	ldr	r2, [pc, #24]	; (800ff28 <vApplicationGetIdleTaskMemory+0x30>)
 800ff0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2280      	movs	r2, #128	; 0x80
 800ff14:	601a      	str	r2, [r3, #0]
}
 800ff16:	bf00      	nop
 800ff18:	3714      	adds	r7, #20
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	24000640 	.word	0x24000640
 800ff28:	2400069c 	.word	0x2400069c

0800ff2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ff2c:	b480      	push	{r7}
 800ff2e:	b085      	sub	sp, #20
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	60b9      	str	r1, [r7, #8]
 800ff36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	4a07      	ldr	r2, [pc, #28]	; (800ff58 <vApplicationGetTimerTaskMemory+0x2c>)
 800ff3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	4a06      	ldr	r2, [pc, #24]	; (800ff5c <vApplicationGetTimerTaskMemory+0x30>)
 800ff42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff4a:	601a      	str	r2, [r3, #0]
}
 800ff4c:	bf00      	nop
 800ff4e:	3714      	adds	r7, #20
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr
 800ff58:	2400089c 	.word	0x2400089c
 800ff5c:	240008f8 	.word	0x240008f8

0800ff60 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b086      	sub	sp, #24
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d10a      	bne.n	800ff84 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ff6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ff80:	bf00      	nop
 800ff82:	e7fe      	b.n	800ff82 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800ff84:	2320      	movs	r3, #32
 800ff86:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	2b20      	cmp	r3, #32
 800ff8c:	d00a      	beq.n	800ffa4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800ff8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff92:	f383 8811 	msr	BASEPRI, r3
 800ff96:	f3bf 8f6f 	isb	sy
 800ff9a:	f3bf 8f4f 	dsb	sy
 800ff9e:	60fb      	str	r3, [r7, #12]
}
 800ffa0:	bf00      	nop
 800ffa2:	e7fe      	b.n	800ffa2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d00a      	beq.n	800ffc4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	3304      	adds	r3, #4
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f000 f9bf 	bl	801033c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800ffc4:	697b      	ldr	r3, [r7, #20]
	}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3718      	adds	r7, #24
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}

0800ffce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ffce:	b580      	push	{r7, lr}
 800ffd0:	b082      	sub	sp, #8
 800ffd2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800ffd4:	2020      	movs	r0, #32
 800ffd6:	f002 fd7f 	bl	8012ad8 <pvPortMalloc>
 800ffda:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00a      	beq.n	800fff8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	3304      	adds	r3, #4
 800ffec:	4618      	mov	r0, r3
 800ffee:	f000 f9a5 	bl	801033c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800fff8:	687b      	ldr	r3, [r7, #4]
	}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3708      	adds	r7, #8
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
	...

08010004 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b090      	sub	sp, #64	; 0x40
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	607a      	str	r2, [r7, #4]
 8010010:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8010016:	2300      	movs	r3, #0
 8010018:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801001a:	2300      	movs	r3, #0
 801001c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d10a      	bne.n	801003a <xEventGroupWaitBits+0x36>
	__asm volatile
 8010024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010028:	f383 8811 	msr	BASEPRI, r3
 801002c:	f3bf 8f6f 	isb	sy
 8010030:	f3bf 8f4f 	dsb	sy
 8010034:	623b      	str	r3, [r7, #32]
}
 8010036:	bf00      	nop
 8010038:	e7fe      	b.n	8010038 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010040:	2b00      	cmp	r3, #0
 8010042:	d00a      	beq.n	801005a <xEventGroupWaitBits+0x56>
	__asm volatile
 8010044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010048:	f383 8811 	msr	BASEPRI, r3
 801004c:	f3bf 8f6f 	isb	sy
 8010050:	f3bf 8f4f 	dsb	sy
 8010054:	61fb      	str	r3, [r7, #28]
}
 8010056:	bf00      	nop
 8010058:	e7fe      	b.n	8010058 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d10a      	bne.n	8010076 <xEventGroupWaitBits+0x72>
	__asm volatile
 8010060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010064:	f383 8811 	msr	BASEPRI, r3
 8010068:	f3bf 8f6f 	isb	sy
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	61bb      	str	r3, [r7, #24]
}
 8010072:	bf00      	nop
 8010074:	e7fe      	b.n	8010074 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010076:	f001 fe77 	bl	8011d68 <xTaskGetSchedulerState>
 801007a:	4603      	mov	r3, r0
 801007c:	2b00      	cmp	r3, #0
 801007e:	d102      	bne.n	8010086 <xEventGroupWaitBits+0x82>
 8010080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010082:	2b00      	cmp	r3, #0
 8010084:	d101      	bne.n	801008a <xEventGroupWaitBits+0x86>
 8010086:	2301      	movs	r3, #1
 8010088:	e000      	b.n	801008c <xEventGroupWaitBits+0x88>
 801008a:	2300      	movs	r3, #0
 801008c:	2b00      	cmp	r3, #0
 801008e:	d10a      	bne.n	80100a6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8010090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010094:	f383 8811 	msr	BASEPRI, r3
 8010098:	f3bf 8f6f 	isb	sy
 801009c:	f3bf 8f4f 	dsb	sy
 80100a0:	617b      	str	r3, [r7, #20]
}
 80100a2:	bf00      	nop
 80100a4:	e7fe      	b.n	80100a4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80100a6:	f001 f9df 	bl	8011468 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80100aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80100b0:	683a      	ldr	r2, [r7, #0]
 80100b2:	68b9      	ldr	r1, [r7, #8]
 80100b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100b6:	f000 f90b 	bl	80102d0 <prvTestWaitCondition>
 80100ba:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80100bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d00e      	beq.n	80100e0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80100c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80100c6:	2300      	movs	r3, #0
 80100c8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d028      	beq.n	8010122 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80100d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d2:	681a      	ldr	r2, [r3, #0]
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	43db      	mvns	r3, r3
 80100d8:	401a      	ands	r2, r3
 80100da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100dc:	601a      	str	r2, [r3, #0]
 80100de:	e020      	b.n	8010122 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80100e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d104      	bne.n	80100f0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80100e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80100ea:	2301      	movs	r3, #1
 80100ec:	633b      	str	r3, [r7, #48]	; 0x30
 80100ee:	e018      	b.n	8010122 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d003      	beq.n	80100fe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80100f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80100fc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d003      	beq.n	801010c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8010104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801010a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801010c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801010e:	1d18      	adds	r0, r3, #4
 8010110:	68ba      	ldr	r2, [r7, #8]
 8010112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010114:	4313      	orrs	r3, r2
 8010116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010118:	4619      	mov	r1, r3
 801011a:	f001 fb9d 	bl	8011858 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801011e:	2300      	movs	r3, #0
 8010120:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8010122:	f001 f9af 	bl	8011484 <xTaskResumeAll>
 8010126:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8010128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801012a:	2b00      	cmp	r3, #0
 801012c:	d031      	beq.n	8010192 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801012e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010130:	2b00      	cmp	r3, #0
 8010132:	d107      	bne.n	8010144 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8010134:	4b19      	ldr	r3, [pc, #100]	; (801019c <xEventGroupWaitBits+0x198>)
 8010136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801013a:	601a      	str	r2, [r3, #0]
 801013c:	f3bf 8f4f 	dsb	sy
 8010140:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8010144:	f001 fe9c 	bl	8011e80 <uxTaskResetEventItemValue>
 8010148:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801014a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801014c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010150:	2b00      	cmp	r3, #0
 8010152:	d11a      	bne.n	801018a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8010154:	f002 fb9e 	bl	8012894 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8010158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801015e:	683a      	ldr	r2, [r7, #0]
 8010160:	68b9      	ldr	r1, [r7, #8]
 8010162:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010164:	f000 f8b4 	bl	80102d0 <prvTestWaitCondition>
 8010168:	4603      	mov	r3, r0
 801016a:	2b00      	cmp	r3, #0
 801016c:	d009      	beq.n	8010182 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d006      	beq.n	8010182 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	43db      	mvns	r3, r3
 801017c:	401a      	ands	r2, r3
 801017e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010180:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8010182:	2301      	movs	r3, #1
 8010184:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8010186:	f002 fbb5 	bl	80128f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801018a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801018c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010190:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8010192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010194:	4618      	mov	r0, r3
 8010196:	3740      	adds	r7, #64	; 0x40
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}
 801019c:	e000ed04 	.word	0xe000ed04

080101a0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b08e      	sub	sp, #56	; 0x38
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80101aa:	2300      	movs	r3, #0
 80101ac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80101b2:	2300      	movs	r3, #0
 80101b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d10a      	bne.n	80101d2 <xEventGroupSetBits+0x32>
	__asm volatile
 80101bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c0:	f383 8811 	msr	BASEPRI, r3
 80101c4:	f3bf 8f6f 	isb	sy
 80101c8:	f3bf 8f4f 	dsb	sy
 80101cc:	613b      	str	r3, [r7, #16]
}
 80101ce:	bf00      	nop
 80101d0:	e7fe      	b.n	80101d0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00a      	beq.n	80101f2 <xEventGroupSetBits+0x52>
	__asm volatile
 80101dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e0:	f383 8811 	msr	BASEPRI, r3
 80101e4:	f3bf 8f6f 	isb	sy
 80101e8:	f3bf 8f4f 	dsb	sy
 80101ec:	60fb      	str	r3, [r7, #12]
}
 80101ee:	bf00      	nop
 80101f0:	e7fe      	b.n	80101f0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80101f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f4:	3304      	adds	r3, #4
 80101f6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fa:	3308      	adds	r3, #8
 80101fc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80101fe:	f001 f933 	bl	8011468 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8010202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8010208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020a:	681a      	ldr	r2, [r3, #0]
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	431a      	orrs	r2, r3
 8010210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010212:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8010214:	e03c      	b.n	8010290 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8010216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801021c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8010222:	2300      	movs	r3, #0
 8010224:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801022c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801022e:	69bb      	ldr	r3, [r7, #24]
 8010230:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010234:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801023c:	2b00      	cmp	r3, #0
 801023e:	d108      	bne.n	8010252 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8010240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	4013      	ands	r3, r2
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00b      	beq.n	8010264 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 801024c:	2301      	movs	r3, #1
 801024e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010250:	e008      	b.n	8010264 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8010252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010254:	681a      	ldr	r2, [r3, #0]
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	4013      	ands	r3, r2
 801025a:	69ba      	ldr	r2, [r7, #24]
 801025c:	429a      	cmp	r2, r3
 801025e:	d101      	bne.n	8010264 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8010260:	2301      	movs	r3, #1
 8010262:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8010264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010266:	2b00      	cmp	r3, #0
 8010268:	d010      	beq.n	801028c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010270:	2b00      	cmp	r3, #0
 8010272:	d003      	beq.n	801027c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8010274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	4313      	orrs	r3, r2
 801027a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801027c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010284:	4619      	mov	r1, r3
 8010286:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010288:	f001 fbb2 	bl	80119f0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8010290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010292:	6a3b      	ldr	r3, [r7, #32]
 8010294:	429a      	cmp	r2, r3
 8010296:	d1be      	bne.n	8010216 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029e:	43db      	mvns	r3, r3
 80102a0:	401a      	ands	r2, r3
 80102a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80102a6:	f001 f8ed 	bl	8011484 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80102aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ac:	681b      	ldr	r3, [r3, #0]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3738      	adds	r7, #56	; 0x38
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b082      	sub	sp, #8
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80102c0:	6839      	ldr	r1, [r7, #0]
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f7ff ff6c 	bl	80101a0 <xEventGroupSetBits>
}
 80102c8:	bf00      	nop
 80102ca:	3708      	adds	r7, #8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80102d0:	b480      	push	{r7}
 80102d2:	b087      	sub	sp, #28
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80102dc:	2300      	movs	r3, #0
 80102de:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d107      	bne.n	80102f6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80102e6:	68fa      	ldr	r2, [r7, #12]
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	4013      	ands	r3, r2
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00a      	beq.n	8010306 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80102f0:	2301      	movs	r3, #1
 80102f2:	617b      	str	r3, [r7, #20]
 80102f4:	e007      	b.n	8010306 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80102f6:	68fa      	ldr	r2, [r7, #12]
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	4013      	ands	r3, r2
 80102fc:	68ba      	ldr	r2, [r7, #8]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d101      	bne.n	8010306 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010302:	2301      	movs	r3, #1
 8010304:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8010306:	697b      	ldr	r3, [r7, #20]
}
 8010308:	4618      	mov	r0, r3
 801030a:	371c      	adds	r7, #28
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010314:	b580      	push	{r7, lr}
 8010316:	b086      	sub	sp, #24
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	68ba      	ldr	r2, [r7, #8]
 8010324:	68f9      	ldr	r1, [r7, #12]
 8010326:	4804      	ldr	r0, [pc, #16]	; (8010338 <xEventGroupSetBitsFromISR+0x24>)
 8010328:	f002 f964 	bl	80125f4 <xTimerPendFunctionCallFromISR>
 801032c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801032e:	697b      	ldr	r3, [r7, #20]
	}
 8010330:	4618      	mov	r0, r3
 8010332:	3718      	adds	r7, #24
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}
 8010338:	080102b7 	.word	0x080102b7

0801033c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f103 0208 	add.w	r2, r3, #8
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010354:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f103 0208 	add.w	r2, r3, #8
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f103 0208 	add.w	r2, r3, #8
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2200      	movs	r2, #0
 801036e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010370:	bf00      	nop
 8010372:	370c      	adds	r7, #12
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr

0801037c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801037c:	b480      	push	{r7}
 801037e:	b083      	sub	sp, #12
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2200      	movs	r2, #0
 8010388:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801038a:	bf00      	nop
 801038c:	370c      	adds	r7, #12
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr

08010396 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010396:	b480      	push	{r7}
 8010398:	b085      	sub	sp, #20
 801039a:	af00      	add	r7, sp, #0
 801039c:	6078      	str	r0, [r7, #4]
 801039e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	689a      	ldr	r2, [r3, #8]
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	683a      	ldr	r2, [r7, #0]
 80103ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	683a      	ldr	r2, [r7, #0]
 80103c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	687a      	ldr	r2, [r7, #4]
 80103c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	1c5a      	adds	r2, r3, #1
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	601a      	str	r2, [r3, #0]
}
 80103d2:	bf00      	nop
 80103d4:	3714      	adds	r7, #20
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr

080103de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80103de:	b480      	push	{r7}
 80103e0:	b085      	sub	sp, #20
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103f4:	d103      	bne.n	80103fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	691b      	ldr	r3, [r3, #16]
 80103fa:	60fb      	str	r3, [r7, #12]
 80103fc:	e00c      	b.n	8010418 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	3308      	adds	r3, #8
 8010402:	60fb      	str	r3, [r7, #12]
 8010404:	e002      	b.n	801040c <vListInsert+0x2e>
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	60fb      	str	r3, [r7, #12]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	68ba      	ldr	r2, [r7, #8]
 8010414:	429a      	cmp	r2, r3
 8010416:	d2f6      	bcs.n	8010406 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	685a      	ldr	r2, [r3, #4]
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	683a      	ldr	r2, [r7, #0]
 8010426:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	68fa      	ldr	r2, [r7, #12]
 801042c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	683a      	ldr	r2, [r7, #0]
 8010432:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	1c5a      	adds	r2, r3, #1
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	601a      	str	r2, [r3, #0]
}
 8010444:	bf00      	nop
 8010446:	3714      	adds	r7, #20
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr

08010450 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010450:	b480      	push	{r7}
 8010452:	b085      	sub	sp, #20
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	691b      	ldr	r3, [r3, #16]
 801045c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	6892      	ldr	r2, [r2, #8]
 8010466:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	6852      	ldr	r2, [r2, #4]
 8010470:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	429a      	cmp	r2, r3
 801047a:	d103      	bne.n	8010484 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	689a      	ldr	r2, [r3, #8]
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2200      	movs	r2, #0
 8010488:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	1e5a      	subs	r2, r3, #1
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3714      	adds	r7, #20
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d10a      	bne.n	80104ce <xQueueGenericReset+0x2a>
	__asm volatile
 80104b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104bc:	f383 8811 	msr	BASEPRI, r3
 80104c0:	f3bf 8f6f 	isb	sy
 80104c4:	f3bf 8f4f 	dsb	sy
 80104c8:	60bb      	str	r3, [r7, #8]
}
 80104ca:	bf00      	nop
 80104cc:	e7fe      	b.n	80104cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80104ce:	f002 f9e1 	bl	8012894 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104da:	68f9      	ldr	r1, [r7, #12]
 80104dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80104de:	fb01 f303 	mul.w	r3, r1, r3
 80104e2:	441a      	add	r2, r3
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2200      	movs	r2, #0
 80104ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	681a      	ldr	r2, [r3, #0]
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104fe:	3b01      	subs	r3, #1
 8010500:	68f9      	ldr	r1, [r7, #12]
 8010502:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010504:	fb01 f303 	mul.w	r3, r1, r3
 8010508:	441a      	add	r2, r3
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	22ff      	movs	r2, #255	; 0xff
 8010512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	22ff      	movs	r2, #255	; 0xff
 801051a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d114      	bne.n	801054e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	691b      	ldr	r3, [r3, #16]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d01a      	beq.n	8010562 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	3310      	adds	r3, #16
 8010530:	4618      	mov	r0, r3
 8010532:	f001 f9f9 	bl	8011928 <xTaskRemoveFromEventList>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d012      	beq.n	8010562 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801053c:	4b0c      	ldr	r3, [pc, #48]	; (8010570 <xQueueGenericReset+0xcc>)
 801053e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010542:	601a      	str	r2, [r3, #0]
 8010544:	f3bf 8f4f 	dsb	sy
 8010548:	f3bf 8f6f 	isb	sy
 801054c:	e009      	b.n	8010562 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	3310      	adds	r3, #16
 8010552:	4618      	mov	r0, r3
 8010554:	f7ff fef2 	bl	801033c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	3324      	adds	r3, #36	; 0x24
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff feed 	bl	801033c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010562:	f002 f9c7 	bl	80128f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010566:	2301      	movs	r3, #1
}
 8010568:	4618      	mov	r0, r3
 801056a:	3710      	adds	r7, #16
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	e000ed04 	.word	0xe000ed04

08010574 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010574:	b580      	push	{r7, lr}
 8010576:	b08e      	sub	sp, #56	; 0x38
 8010578:	af02      	add	r7, sp, #8
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
 8010580:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d10a      	bne.n	801059e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058c:	f383 8811 	msr	BASEPRI, r3
 8010590:	f3bf 8f6f 	isb	sy
 8010594:	f3bf 8f4f 	dsb	sy
 8010598:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801059a:	bf00      	nop
 801059c:	e7fe      	b.n	801059c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d10a      	bne.n	80105ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80105a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a8:	f383 8811 	msr	BASEPRI, r3
 80105ac:	f3bf 8f6f 	isb	sy
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80105b6:	bf00      	nop
 80105b8:	e7fe      	b.n	80105b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d002      	beq.n	80105c6 <xQueueGenericCreateStatic+0x52>
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d001      	beq.n	80105ca <xQueueGenericCreateStatic+0x56>
 80105c6:	2301      	movs	r3, #1
 80105c8:	e000      	b.n	80105cc <xQueueGenericCreateStatic+0x58>
 80105ca:	2300      	movs	r3, #0
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d10a      	bne.n	80105e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80105d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d4:	f383 8811 	msr	BASEPRI, r3
 80105d8:	f3bf 8f6f 	isb	sy
 80105dc:	f3bf 8f4f 	dsb	sy
 80105e0:	623b      	str	r3, [r7, #32]
}
 80105e2:	bf00      	nop
 80105e4:	e7fe      	b.n	80105e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d102      	bne.n	80105f2 <xQueueGenericCreateStatic+0x7e>
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d101      	bne.n	80105f6 <xQueueGenericCreateStatic+0x82>
 80105f2:	2301      	movs	r3, #1
 80105f4:	e000      	b.n	80105f8 <xQueueGenericCreateStatic+0x84>
 80105f6:	2300      	movs	r3, #0
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d10a      	bne.n	8010612 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80105fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010600:	f383 8811 	msr	BASEPRI, r3
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	f3bf 8f4f 	dsb	sy
 801060c:	61fb      	str	r3, [r7, #28]
}
 801060e:	bf00      	nop
 8010610:	e7fe      	b.n	8010610 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010612:	2350      	movs	r3, #80	; 0x50
 8010614:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	2b50      	cmp	r3, #80	; 0x50
 801061a:	d00a      	beq.n	8010632 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010620:	f383 8811 	msr	BASEPRI, r3
 8010624:	f3bf 8f6f 	isb	sy
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	61bb      	str	r3, [r7, #24]
}
 801062e:	bf00      	nop
 8010630:	e7fe      	b.n	8010630 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010632:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00d      	beq.n	801065a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010640:	2201      	movs	r2, #1
 8010642:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010646:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064c:	9300      	str	r3, [sp, #0]
 801064e:	4613      	mov	r3, r2
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	68b9      	ldr	r1, [r7, #8]
 8010654:	68f8      	ldr	r0, [r7, #12]
 8010656:	f000 f83f 	bl	80106d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801065c:	4618      	mov	r0, r3
 801065e:	3730      	adds	r7, #48	; 0x30
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010664:	b580      	push	{r7, lr}
 8010666:	b08a      	sub	sp, #40	; 0x28
 8010668:	af02      	add	r7, sp, #8
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	60b9      	str	r1, [r7, #8]
 801066e:	4613      	mov	r3, r2
 8010670:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d10a      	bne.n	801068e <xQueueGenericCreate+0x2a>
	__asm volatile
 8010678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067c:	f383 8811 	msr	BASEPRI, r3
 8010680:	f3bf 8f6f 	isb	sy
 8010684:	f3bf 8f4f 	dsb	sy
 8010688:	613b      	str	r3, [r7, #16]
}
 801068a:	bf00      	nop
 801068c:	e7fe      	b.n	801068c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	68ba      	ldr	r2, [r7, #8]
 8010692:	fb02 f303 	mul.w	r3, r2, r3
 8010696:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	3350      	adds	r3, #80	; 0x50
 801069c:	4618      	mov	r0, r3
 801069e:	f002 fa1b 	bl	8012ad8 <pvPortMalloc>
 80106a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80106a4:	69bb      	ldr	r3, [r7, #24]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d011      	beq.n	80106ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80106aa:	69bb      	ldr	r3, [r7, #24]
 80106ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	3350      	adds	r3, #80	; 0x50
 80106b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80106b4:	69bb      	ldr	r3, [r7, #24]
 80106b6:	2200      	movs	r2, #0
 80106b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80106bc:	79fa      	ldrb	r2, [r7, #7]
 80106be:	69bb      	ldr	r3, [r7, #24]
 80106c0:	9300      	str	r3, [sp, #0]
 80106c2:	4613      	mov	r3, r2
 80106c4:	697a      	ldr	r2, [r7, #20]
 80106c6:	68b9      	ldr	r1, [r7, #8]
 80106c8:	68f8      	ldr	r0, [r7, #12]
 80106ca:	f000 f805 	bl	80106d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80106ce:	69bb      	ldr	r3, [r7, #24]
	}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3720      	adds	r7, #32
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}

080106d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b084      	sub	sp, #16
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	607a      	str	r2, [r7, #4]
 80106e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d103      	bne.n	80106f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80106ec:	69bb      	ldr	r3, [r7, #24]
 80106ee:	69ba      	ldr	r2, [r7, #24]
 80106f0:	601a      	str	r2, [r3, #0]
 80106f2:	e002      	b.n	80106fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80106f4:	69bb      	ldr	r3, [r7, #24]
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80106fa:	69bb      	ldr	r3, [r7, #24]
 80106fc:	68fa      	ldr	r2, [r7, #12]
 80106fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010700:	69bb      	ldr	r3, [r7, #24]
 8010702:	68ba      	ldr	r2, [r7, #8]
 8010704:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010706:	2101      	movs	r1, #1
 8010708:	69b8      	ldr	r0, [r7, #24]
 801070a:	f7ff fecb 	bl	80104a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801070e:	69bb      	ldr	r3, [r7, #24]
 8010710:	78fa      	ldrb	r2, [r7, #3]
 8010712:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010716:	bf00      	nop
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
	...

08010720 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b08e      	sub	sp, #56	; 0x38
 8010724:	af00      	add	r7, sp, #0
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]
 801072c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801072e:	2300      	movs	r3, #0
 8010730:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010738:	2b00      	cmp	r3, #0
 801073a:	d10a      	bne.n	8010752 <xQueueGenericSend+0x32>
	__asm volatile
 801073c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010740:	f383 8811 	msr	BASEPRI, r3
 8010744:	f3bf 8f6f 	isb	sy
 8010748:	f3bf 8f4f 	dsb	sy
 801074c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801074e:	bf00      	nop
 8010750:	e7fe      	b.n	8010750 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d103      	bne.n	8010760 <xQueueGenericSend+0x40>
 8010758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801075c:	2b00      	cmp	r3, #0
 801075e:	d101      	bne.n	8010764 <xQueueGenericSend+0x44>
 8010760:	2301      	movs	r3, #1
 8010762:	e000      	b.n	8010766 <xQueueGenericSend+0x46>
 8010764:	2300      	movs	r3, #0
 8010766:	2b00      	cmp	r3, #0
 8010768:	d10a      	bne.n	8010780 <xQueueGenericSend+0x60>
	__asm volatile
 801076a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076e:	f383 8811 	msr	BASEPRI, r3
 8010772:	f3bf 8f6f 	isb	sy
 8010776:	f3bf 8f4f 	dsb	sy
 801077a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801077c:	bf00      	nop
 801077e:	e7fe      	b.n	801077e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	2b02      	cmp	r3, #2
 8010784:	d103      	bne.n	801078e <xQueueGenericSend+0x6e>
 8010786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801078a:	2b01      	cmp	r3, #1
 801078c:	d101      	bne.n	8010792 <xQueueGenericSend+0x72>
 801078e:	2301      	movs	r3, #1
 8010790:	e000      	b.n	8010794 <xQueueGenericSend+0x74>
 8010792:	2300      	movs	r3, #0
 8010794:	2b00      	cmp	r3, #0
 8010796:	d10a      	bne.n	80107ae <xQueueGenericSend+0x8e>
	__asm volatile
 8010798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801079c:	f383 8811 	msr	BASEPRI, r3
 80107a0:	f3bf 8f6f 	isb	sy
 80107a4:	f3bf 8f4f 	dsb	sy
 80107a8:	623b      	str	r3, [r7, #32]
}
 80107aa:	bf00      	nop
 80107ac:	e7fe      	b.n	80107ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80107ae:	f001 fadb 	bl	8011d68 <xTaskGetSchedulerState>
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d102      	bne.n	80107be <xQueueGenericSend+0x9e>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d101      	bne.n	80107c2 <xQueueGenericSend+0xa2>
 80107be:	2301      	movs	r3, #1
 80107c0:	e000      	b.n	80107c4 <xQueueGenericSend+0xa4>
 80107c2:	2300      	movs	r3, #0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d10a      	bne.n	80107de <xQueueGenericSend+0xbe>
	__asm volatile
 80107c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107cc:	f383 8811 	msr	BASEPRI, r3
 80107d0:	f3bf 8f6f 	isb	sy
 80107d4:	f3bf 8f4f 	dsb	sy
 80107d8:	61fb      	str	r3, [r7, #28]
}
 80107da:	bf00      	nop
 80107dc:	e7fe      	b.n	80107dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107de:	f002 f859 	bl	8012894 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80107e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d302      	bcc.n	80107f4 <xQueueGenericSend+0xd4>
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	2b02      	cmp	r3, #2
 80107f2:	d129      	bne.n	8010848 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80107f4:	683a      	ldr	r2, [r7, #0]
 80107f6:	68b9      	ldr	r1, [r7, #8]
 80107f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107fa:	f000 fa8b 	bl	8010d14 <prvCopyDataToQueue>
 80107fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010804:	2b00      	cmp	r3, #0
 8010806:	d010      	beq.n	801082a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080a:	3324      	adds	r3, #36	; 0x24
 801080c:	4618      	mov	r0, r3
 801080e:	f001 f88b 	bl	8011928 <xTaskRemoveFromEventList>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d013      	beq.n	8010840 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010818:	4b3f      	ldr	r3, [pc, #252]	; (8010918 <xQueueGenericSend+0x1f8>)
 801081a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801081e:	601a      	str	r2, [r3, #0]
 8010820:	f3bf 8f4f 	dsb	sy
 8010824:	f3bf 8f6f 	isb	sy
 8010828:	e00a      	b.n	8010840 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801082a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082c:	2b00      	cmp	r3, #0
 801082e:	d007      	beq.n	8010840 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010830:	4b39      	ldr	r3, [pc, #228]	; (8010918 <xQueueGenericSend+0x1f8>)
 8010832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010836:	601a      	str	r2, [r3, #0]
 8010838:	f3bf 8f4f 	dsb	sy
 801083c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010840:	f002 f858 	bl	80128f4 <vPortExitCritical>
				return pdPASS;
 8010844:	2301      	movs	r3, #1
 8010846:	e063      	b.n	8010910 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d103      	bne.n	8010856 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801084e:	f002 f851 	bl	80128f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010852:	2300      	movs	r3, #0
 8010854:	e05c      	b.n	8010910 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010858:	2b00      	cmp	r3, #0
 801085a:	d106      	bne.n	801086a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801085c:	f107 0314 	add.w	r3, r7, #20
 8010860:	4618      	mov	r0, r3
 8010862:	f001 f927 	bl	8011ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010866:	2301      	movs	r3, #1
 8010868:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801086a:	f002 f843 	bl	80128f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801086e:	f000 fdfb 	bl	8011468 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010872:	f002 f80f 	bl	8012894 <vPortEnterCritical>
 8010876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801087c:	b25b      	sxtb	r3, r3
 801087e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010882:	d103      	bne.n	801088c <xQueueGenericSend+0x16c>
 8010884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010886:	2200      	movs	r2, #0
 8010888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801088c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010892:	b25b      	sxtb	r3, r3
 8010894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010898:	d103      	bne.n	80108a2 <xQueueGenericSend+0x182>
 801089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089c:	2200      	movs	r2, #0
 801089e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108a2:	f002 f827 	bl	80128f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80108a6:	1d3a      	adds	r2, r7, #4
 80108a8:	f107 0314 	add.w	r3, r7, #20
 80108ac:	4611      	mov	r1, r2
 80108ae:	4618      	mov	r0, r3
 80108b0:	f001 f916 	bl	8011ae0 <xTaskCheckForTimeOut>
 80108b4:	4603      	mov	r3, r0
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d124      	bne.n	8010904 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80108ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108bc:	f000 fb22 	bl	8010f04 <prvIsQueueFull>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d018      	beq.n	80108f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80108c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c8:	3310      	adds	r3, #16
 80108ca:	687a      	ldr	r2, [r7, #4]
 80108cc:	4611      	mov	r1, r2
 80108ce:	4618      	mov	r0, r3
 80108d0:	f000 ff9e 	bl	8011810 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80108d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108d6:	f000 faad 	bl	8010e34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80108da:	f000 fdd3 	bl	8011484 <xTaskResumeAll>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f47f af7c 	bne.w	80107de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80108e6:	4b0c      	ldr	r3, [pc, #48]	; (8010918 <xQueueGenericSend+0x1f8>)
 80108e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	f3bf 8f6f 	isb	sy
 80108f6:	e772      	b.n	80107de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80108f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108fa:	f000 fa9b 	bl	8010e34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108fe:	f000 fdc1 	bl	8011484 <xTaskResumeAll>
 8010902:	e76c      	b.n	80107de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010906:	f000 fa95 	bl	8010e34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801090a:	f000 fdbb 	bl	8011484 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801090e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010910:	4618      	mov	r0, r3
 8010912:	3738      	adds	r7, #56	; 0x38
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	e000ed04 	.word	0xe000ed04

0801091c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b090      	sub	sp, #64	; 0x40
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]
 8010928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801092e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010930:	2b00      	cmp	r3, #0
 8010932:	d10a      	bne.n	801094a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010938:	f383 8811 	msr	BASEPRI, r3
 801093c:	f3bf 8f6f 	isb	sy
 8010940:	f3bf 8f4f 	dsb	sy
 8010944:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010946:	bf00      	nop
 8010948:	e7fe      	b.n	8010948 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d103      	bne.n	8010958 <xQueueGenericSendFromISR+0x3c>
 8010950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010954:	2b00      	cmp	r3, #0
 8010956:	d101      	bne.n	801095c <xQueueGenericSendFromISR+0x40>
 8010958:	2301      	movs	r3, #1
 801095a:	e000      	b.n	801095e <xQueueGenericSendFromISR+0x42>
 801095c:	2300      	movs	r3, #0
 801095e:	2b00      	cmp	r3, #0
 8010960:	d10a      	bne.n	8010978 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010966:	f383 8811 	msr	BASEPRI, r3
 801096a:	f3bf 8f6f 	isb	sy
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010974:	bf00      	nop
 8010976:	e7fe      	b.n	8010976 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	2b02      	cmp	r3, #2
 801097c:	d103      	bne.n	8010986 <xQueueGenericSendFromISR+0x6a>
 801097e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010982:	2b01      	cmp	r3, #1
 8010984:	d101      	bne.n	801098a <xQueueGenericSendFromISR+0x6e>
 8010986:	2301      	movs	r3, #1
 8010988:	e000      	b.n	801098c <xQueueGenericSendFromISR+0x70>
 801098a:	2300      	movs	r3, #0
 801098c:	2b00      	cmp	r3, #0
 801098e:	d10a      	bne.n	80109a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	623b      	str	r3, [r7, #32]
}
 80109a2:	bf00      	nop
 80109a4:	e7fe      	b.n	80109a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109a6:	f002 f857 	bl	8012a58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80109aa:	f3ef 8211 	mrs	r2, BASEPRI
 80109ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b2:	f383 8811 	msr	BASEPRI, r3
 80109b6:	f3bf 8f6f 	isb	sy
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	61fa      	str	r2, [r7, #28]
 80109c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80109c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80109c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80109c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d302      	bcc.n	80109d8 <xQueueGenericSendFromISR+0xbc>
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	2b02      	cmp	r3, #2
 80109d6:	d12f      	bne.n	8010a38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80109d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80109e8:	683a      	ldr	r2, [r7, #0]
 80109ea:	68b9      	ldr	r1, [r7, #8]
 80109ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80109ee:	f000 f991 	bl	8010d14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80109f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80109f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109fa:	d112      	bne.n	8010a22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d016      	beq.n	8010a32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a06:	3324      	adds	r3, #36	; 0x24
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f000 ff8d 	bl	8011928 <xTaskRemoveFromEventList>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d00e      	beq.n	8010a32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d00b      	beq.n	8010a32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	601a      	str	r2, [r3, #0]
 8010a20:	e007      	b.n	8010a32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010a22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010a26:	3301      	adds	r3, #1
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	b25a      	sxtb	r2, r3
 8010a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010a32:	2301      	movs	r3, #1
 8010a34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010a36:	e001      	b.n	8010a3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010a46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3740      	adds	r7, #64	; 0x40
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
	...

08010a54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b08c      	sub	sp, #48	; 0x30
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	60f8      	str	r0, [r7, #12]
 8010a5c:	60b9      	str	r1, [r7, #8]
 8010a5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010a60:	2300      	movs	r3, #0
 8010a62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d10a      	bne.n	8010a84 <xQueueReceive+0x30>
	__asm volatile
 8010a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a72:	f383 8811 	msr	BASEPRI, r3
 8010a76:	f3bf 8f6f 	isb	sy
 8010a7a:	f3bf 8f4f 	dsb	sy
 8010a7e:	623b      	str	r3, [r7, #32]
}
 8010a80:	bf00      	nop
 8010a82:	e7fe      	b.n	8010a82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d103      	bne.n	8010a92 <xQueueReceive+0x3e>
 8010a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d101      	bne.n	8010a96 <xQueueReceive+0x42>
 8010a92:	2301      	movs	r3, #1
 8010a94:	e000      	b.n	8010a98 <xQueueReceive+0x44>
 8010a96:	2300      	movs	r3, #0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d10a      	bne.n	8010ab2 <xQueueReceive+0x5e>
	__asm volatile
 8010a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa0:	f383 8811 	msr	BASEPRI, r3
 8010aa4:	f3bf 8f6f 	isb	sy
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	61fb      	str	r3, [r7, #28]
}
 8010aae:	bf00      	nop
 8010ab0:	e7fe      	b.n	8010ab0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ab2:	f001 f959 	bl	8011d68 <xTaskGetSchedulerState>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d102      	bne.n	8010ac2 <xQueueReceive+0x6e>
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d101      	bne.n	8010ac6 <xQueueReceive+0x72>
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	e000      	b.n	8010ac8 <xQueueReceive+0x74>
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d10a      	bne.n	8010ae2 <xQueueReceive+0x8e>
	__asm volatile
 8010acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad0:	f383 8811 	msr	BASEPRI, r3
 8010ad4:	f3bf 8f6f 	isb	sy
 8010ad8:	f3bf 8f4f 	dsb	sy
 8010adc:	61bb      	str	r3, [r7, #24]
}
 8010ade:	bf00      	nop
 8010ae0:	e7fe      	b.n	8010ae0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ae2:	f001 fed7 	bl	8012894 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d01f      	beq.n	8010b32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010af2:	68b9      	ldr	r1, [r7, #8]
 8010af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010af6:	f000 f977 	bl	8010de8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afc:	1e5a      	subs	r2, r3, #1
 8010afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b04:	691b      	ldr	r3, [r3, #16]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d00f      	beq.n	8010b2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0c:	3310      	adds	r3, #16
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f000 ff0a 	bl	8011928 <xTaskRemoveFromEventList>
 8010b14:	4603      	mov	r3, r0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d007      	beq.n	8010b2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010b1a:	4b3d      	ldr	r3, [pc, #244]	; (8010c10 <xQueueReceive+0x1bc>)
 8010b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b20:	601a      	str	r2, [r3, #0]
 8010b22:	f3bf 8f4f 	dsb	sy
 8010b26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010b2a:	f001 fee3 	bl	80128f4 <vPortExitCritical>
				return pdPASS;
 8010b2e:	2301      	movs	r3, #1
 8010b30:	e069      	b.n	8010c06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d103      	bne.n	8010b40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b38:	f001 fedc 	bl	80128f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	e062      	b.n	8010c06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d106      	bne.n	8010b54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b46:	f107 0310 	add.w	r3, r7, #16
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f000 ffb2 	bl	8011ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b50:	2301      	movs	r3, #1
 8010b52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b54:	f001 fece 	bl	80128f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b58:	f000 fc86 	bl	8011468 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b5c:	f001 fe9a 	bl	8012894 <vPortEnterCritical>
 8010b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b66:	b25b      	sxtb	r3, r3
 8010b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b6c:	d103      	bne.n	8010b76 <xQueueReceive+0x122>
 8010b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b70:	2200      	movs	r2, #0
 8010b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b7c:	b25b      	sxtb	r3, r3
 8010b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b82:	d103      	bne.n	8010b8c <xQueueReceive+0x138>
 8010b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b86:	2200      	movs	r2, #0
 8010b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b8c:	f001 feb2 	bl	80128f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b90:	1d3a      	adds	r2, r7, #4
 8010b92:	f107 0310 	add.w	r3, r7, #16
 8010b96:	4611      	mov	r1, r2
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f000 ffa1 	bl	8011ae0 <xTaskCheckForTimeOut>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d123      	bne.n	8010bec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ba6:	f000 f997 	bl	8010ed8 <prvIsQueueEmpty>
 8010baa:	4603      	mov	r3, r0
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d017      	beq.n	8010be0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb2:	3324      	adds	r3, #36	; 0x24
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	4611      	mov	r1, r2
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f000 fe29 	bl	8011810 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bc0:	f000 f938 	bl	8010e34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010bc4:	f000 fc5e 	bl	8011484 <xTaskResumeAll>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d189      	bne.n	8010ae2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010bce:	4b10      	ldr	r3, [pc, #64]	; (8010c10 <xQueueReceive+0x1bc>)
 8010bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bd4:	601a      	str	r2, [r3, #0]
 8010bd6:	f3bf 8f4f 	dsb	sy
 8010bda:	f3bf 8f6f 	isb	sy
 8010bde:	e780      	b.n	8010ae2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010be2:	f000 f927 	bl	8010e34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010be6:	f000 fc4d 	bl	8011484 <xTaskResumeAll>
 8010bea:	e77a      	b.n	8010ae2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bee:	f000 f921 	bl	8010e34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010bf2:	f000 fc47 	bl	8011484 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bf8:	f000 f96e 	bl	8010ed8 <prvIsQueueEmpty>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	f43f af6f 	beq.w	8010ae2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3730      	adds	r7, #48	; 0x30
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	e000ed04 	.word	0xe000ed04

08010c14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b08e      	sub	sp, #56	; 0x38
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d10a      	bne.n	8010c40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2e:	f383 8811 	msr	BASEPRI, r3
 8010c32:	f3bf 8f6f 	isb	sy
 8010c36:	f3bf 8f4f 	dsb	sy
 8010c3a:	623b      	str	r3, [r7, #32]
}
 8010c3c:	bf00      	nop
 8010c3e:	e7fe      	b.n	8010c3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d103      	bne.n	8010c4e <xQueueReceiveFromISR+0x3a>
 8010c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d101      	bne.n	8010c52 <xQueueReceiveFromISR+0x3e>
 8010c4e:	2301      	movs	r3, #1
 8010c50:	e000      	b.n	8010c54 <xQueueReceiveFromISR+0x40>
 8010c52:	2300      	movs	r3, #0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d10a      	bne.n	8010c6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c5c:	f383 8811 	msr	BASEPRI, r3
 8010c60:	f3bf 8f6f 	isb	sy
 8010c64:	f3bf 8f4f 	dsb	sy
 8010c68:	61fb      	str	r3, [r7, #28]
}
 8010c6a:	bf00      	nop
 8010c6c:	e7fe      	b.n	8010c6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c6e:	f001 fef3 	bl	8012a58 <vPortValidateInterruptPriority>
	__asm volatile
 8010c72:	f3ef 8211 	mrs	r2, BASEPRI
 8010c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7a:	f383 8811 	msr	BASEPRI, r3
 8010c7e:	f3bf 8f6f 	isb	sy
 8010c82:	f3bf 8f4f 	dsb	sy
 8010c86:	61ba      	str	r2, [r7, #24]
 8010c88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010c8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d02f      	beq.n	8010cfa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010ca4:	68b9      	ldr	r1, [r7, #8]
 8010ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ca8:	f000 f89e 	bl	8010de8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cae:	1e5a      	subs	r2, r3, #1
 8010cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010cb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cbc:	d112      	bne.n	8010ce4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc0:	691b      	ldr	r3, [r3, #16]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d016      	beq.n	8010cf4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc8:	3310      	adds	r3, #16
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f000 fe2c 	bl	8011928 <xTaskRemoveFromEventList>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d00e      	beq.n	8010cf4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d00b      	beq.n	8010cf4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	601a      	str	r2, [r3, #0]
 8010ce2:	e007      	b.n	8010cf4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ce8:	3301      	adds	r3, #1
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	b25a      	sxtb	r2, r3
 8010cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8010cf8:	e001      	b.n	8010cfe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8010cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	f383 8811 	msr	BASEPRI, r3
}
 8010d08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3738      	adds	r7, #56	; 0x38
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}

08010d14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b086      	sub	sp, #24
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010d20:	2300      	movs	r3, #0
 8010d22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d10d      	bne.n	8010d4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d14d      	bne.n	8010dd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	689b      	ldr	r3, [r3, #8]
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f001 f830 	bl	8011da4 <xTaskPriorityDisinherit>
 8010d44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	609a      	str	r2, [r3, #8]
 8010d4c:	e043      	b.n	8010dd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d119      	bne.n	8010d88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	6858      	ldr	r0, [r3, #4]
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	68b9      	ldr	r1, [r7, #8]
 8010d60:	f002 f8de 	bl	8012f20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	685a      	ldr	r2, [r3, #4]
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d6c:	441a      	add	r2, r3
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	685a      	ldr	r2, [r3, #4]
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	689b      	ldr	r3, [r3, #8]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d32b      	bcc.n	8010dd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681a      	ldr	r2, [r3, #0]
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	605a      	str	r2, [r3, #4]
 8010d86:	e026      	b.n	8010dd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	68d8      	ldr	r0, [r3, #12]
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d90:	461a      	mov	r2, r3
 8010d92:	68b9      	ldr	r1, [r7, #8]
 8010d94:	f002 f8c4 	bl	8012f20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	68da      	ldr	r2, [r3, #12]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da0:	425b      	negs	r3, r3
 8010da2:	441a      	add	r2, r3
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	68da      	ldr	r2, [r3, #12]
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d207      	bcs.n	8010dc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	689a      	ldr	r2, [r3, #8]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dbc:	425b      	negs	r3, r3
 8010dbe:	441a      	add	r2, r3
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2b02      	cmp	r3, #2
 8010dc8:	d105      	bne.n	8010dd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d002      	beq.n	8010dd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	3b01      	subs	r3, #1
 8010dd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	1c5a      	adds	r2, r3, #1
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010dde:	697b      	ldr	r3, [r7, #20]
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3718      	adds	r7, #24
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d018      	beq.n	8010e2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	68da      	ldr	r2, [r3, #12]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e02:	441a      	add	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	68da      	ldr	r2, [r3, #12]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	689b      	ldr	r3, [r3, #8]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d303      	bcc.n	8010e1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	68d9      	ldr	r1, [r3, #12]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e24:	461a      	mov	r2, r3
 8010e26:	6838      	ldr	r0, [r7, #0]
 8010e28:	f002 f87a 	bl	8012f20 <memcpy>
	}
}
 8010e2c:	bf00      	nop
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b084      	sub	sp, #16
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010e3c:	f001 fd2a 	bl	8012894 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e48:	e011      	b.n	8010e6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d012      	beq.n	8010e78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	3324      	adds	r3, #36	; 0x24
 8010e56:	4618      	mov	r0, r3
 8010e58:	f000 fd66 	bl	8011928 <xTaskRemoveFromEventList>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d001      	beq.n	8010e66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010e62:	f000 fe9f 	bl	8011ba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010e66:	7bfb      	ldrb	r3, [r7, #15]
 8010e68:	3b01      	subs	r3, #1
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	dce9      	bgt.n	8010e4a <prvUnlockQueue+0x16>
 8010e76:	e000      	b.n	8010e7a <prvUnlockQueue+0x46>
					break;
 8010e78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	22ff      	movs	r2, #255	; 0xff
 8010e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010e82:	f001 fd37 	bl	80128f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010e86:	f001 fd05 	bl	8012894 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e92:	e011      	b.n	8010eb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	691b      	ldr	r3, [r3, #16]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d012      	beq.n	8010ec2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	3310      	adds	r3, #16
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f000 fd41 	bl	8011928 <xTaskRemoveFromEventList>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d001      	beq.n	8010eb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010eac:	f000 fe7a 	bl	8011ba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010eb0:	7bbb      	ldrb	r3, [r7, #14]
 8010eb2:	3b01      	subs	r3, #1
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	dce9      	bgt.n	8010e94 <prvUnlockQueue+0x60>
 8010ec0:	e000      	b.n	8010ec4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010ec2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	22ff      	movs	r2, #255	; 0xff
 8010ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010ecc:	f001 fd12 	bl	80128f4 <vPortExitCritical>
}
 8010ed0:	bf00      	nop
 8010ed2:	3710      	adds	r7, #16
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010ee0:	f001 fcd8 	bl	8012894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d102      	bne.n	8010ef2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010eec:	2301      	movs	r3, #1
 8010eee:	60fb      	str	r3, [r7, #12]
 8010ef0:	e001      	b.n	8010ef6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010ef6:	f001 fcfd 	bl	80128f4 <vPortExitCritical>

	return xReturn;
 8010efa:	68fb      	ldr	r3, [r7, #12]
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3710      	adds	r7, #16
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f0c:	f001 fcc2 	bl	8012894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d102      	bne.n	8010f22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	60fb      	str	r3, [r7, #12]
 8010f20:	e001      	b.n	8010f26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010f22:	2300      	movs	r3, #0
 8010f24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f26:	f001 fce5 	bl	80128f4 <vPortExitCritical>

	return xReturn;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3710      	adds	r7, #16
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010f34:	b480      	push	{r7}
 8010f36:	b085      	sub	sp, #20
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f3e:	2300      	movs	r3, #0
 8010f40:	60fb      	str	r3, [r7, #12]
 8010f42:	e014      	b.n	8010f6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010f44:	4a0f      	ldr	r2, [pc, #60]	; (8010f84 <vQueueAddToRegistry+0x50>)
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d10b      	bne.n	8010f68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010f50:	490c      	ldr	r1, [pc, #48]	; (8010f84 <vQueueAddToRegistry+0x50>)
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	683a      	ldr	r2, [r7, #0]
 8010f56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010f5a:	4a0a      	ldr	r2, [pc, #40]	; (8010f84 <vQueueAddToRegistry+0x50>)
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	00db      	lsls	r3, r3, #3
 8010f60:	4413      	add	r3, r2
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010f66:	e006      	b.n	8010f76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	60fb      	str	r3, [r7, #12]
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	2b07      	cmp	r3, #7
 8010f72:	d9e7      	bls.n	8010f44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010f74:	bf00      	nop
 8010f76:	bf00      	nop
 8010f78:	3714      	adds	r7, #20
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr
 8010f82:	bf00      	nop
 8010f84:	24000cf8 	.word	0x24000cf8

08010f88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b086      	sub	sp, #24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010f98:	f001 fc7c 	bl	8012894 <vPortEnterCritical>
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010fa2:	b25b      	sxtb	r3, r3
 8010fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fa8:	d103      	bne.n	8010fb2 <vQueueWaitForMessageRestricted+0x2a>
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	2200      	movs	r2, #0
 8010fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fb8:	b25b      	sxtb	r3, r3
 8010fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fbe:	d103      	bne.n	8010fc8 <vQueueWaitForMessageRestricted+0x40>
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010fc8:	f001 fc94 	bl	80128f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d106      	bne.n	8010fe2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	3324      	adds	r3, #36	; 0x24
 8010fd8:	687a      	ldr	r2, [r7, #4]
 8010fda:	68b9      	ldr	r1, [r7, #8]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f000 fc77 	bl	80118d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010fe2:	6978      	ldr	r0, [r7, #20]
 8010fe4:	f7ff ff26 	bl	8010e34 <prvUnlockQueue>
	}
 8010fe8:	bf00      	nop
 8010fea:	3718      	adds	r7, #24
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b08e      	sub	sp, #56	; 0x38
 8010ff4:	af04      	add	r7, sp, #16
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	60b9      	str	r1, [r7, #8]
 8010ffa:	607a      	str	r2, [r7, #4]
 8010ffc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011000:	2b00      	cmp	r3, #0
 8011002:	d10a      	bne.n	801101a <xTaskCreateStatic+0x2a>
	__asm volatile
 8011004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011008:	f383 8811 	msr	BASEPRI, r3
 801100c:	f3bf 8f6f 	isb	sy
 8011010:	f3bf 8f4f 	dsb	sy
 8011014:	623b      	str	r3, [r7, #32]
}
 8011016:	bf00      	nop
 8011018:	e7fe      	b.n	8011018 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101c:	2b00      	cmp	r3, #0
 801101e:	d10a      	bne.n	8011036 <xTaskCreateStatic+0x46>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	61fb      	str	r3, [r7, #28]
}
 8011032:	bf00      	nop
 8011034:	e7fe      	b.n	8011034 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011036:	235c      	movs	r3, #92	; 0x5c
 8011038:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	2b5c      	cmp	r3, #92	; 0x5c
 801103e:	d00a      	beq.n	8011056 <xTaskCreateStatic+0x66>
	__asm volatile
 8011040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011044:	f383 8811 	msr	BASEPRI, r3
 8011048:	f3bf 8f6f 	isb	sy
 801104c:	f3bf 8f4f 	dsb	sy
 8011050:	61bb      	str	r3, [r7, #24]
}
 8011052:	bf00      	nop
 8011054:	e7fe      	b.n	8011054 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011056:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105a:	2b00      	cmp	r3, #0
 801105c:	d01e      	beq.n	801109c <xTaskCreateStatic+0xac>
 801105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011060:	2b00      	cmp	r3, #0
 8011062:	d01b      	beq.n	801109c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011066:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801106c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011070:	2202      	movs	r2, #2
 8011072:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011076:	2300      	movs	r3, #0
 8011078:	9303      	str	r3, [sp, #12]
 801107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107c:	9302      	str	r3, [sp, #8]
 801107e:	f107 0314 	add.w	r3, r7, #20
 8011082:	9301      	str	r3, [sp, #4]
 8011084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011086:	9300      	str	r3, [sp, #0]
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	68b9      	ldr	r1, [r7, #8]
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f000 f850 	bl	8011134 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011096:	f000 f8dd 	bl	8011254 <prvAddNewTaskToReadyList>
 801109a:	e001      	b.n	80110a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801109c:	2300      	movs	r3, #0
 801109e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80110a0:	697b      	ldr	r3, [r7, #20]
	}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3728      	adds	r7, #40	; 0x28
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}

080110aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80110aa:	b580      	push	{r7, lr}
 80110ac:	b08c      	sub	sp, #48	; 0x30
 80110ae:	af04      	add	r7, sp, #16
 80110b0:	60f8      	str	r0, [r7, #12]
 80110b2:	60b9      	str	r1, [r7, #8]
 80110b4:	603b      	str	r3, [r7, #0]
 80110b6:	4613      	mov	r3, r2
 80110b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80110ba:	88fb      	ldrh	r3, [r7, #6]
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	4618      	mov	r0, r3
 80110c0:	f001 fd0a 	bl	8012ad8 <pvPortMalloc>
 80110c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d00e      	beq.n	80110ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80110cc:	205c      	movs	r0, #92	; 0x5c
 80110ce:	f001 fd03 	bl	8012ad8 <pvPortMalloc>
 80110d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80110d4:	69fb      	ldr	r3, [r7, #28]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d003      	beq.n	80110e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80110da:	69fb      	ldr	r3, [r7, #28]
 80110dc:	697a      	ldr	r2, [r7, #20]
 80110de:	631a      	str	r2, [r3, #48]	; 0x30
 80110e0:	e005      	b.n	80110ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80110e2:	6978      	ldr	r0, [r7, #20]
 80110e4:	f001 fdc4 	bl	8012c70 <vPortFree>
 80110e8:	e001      	b.n	80110ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80110ea:	2300      	movs	r3, #0
 80110ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80110ee:	69fb      	ldr	r3, [r7, #28]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d017      	beq.n	8011124 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80110f4:	69fb      	ldr	r3, [r7, #28]
 80110f6:	2200      	movs	r2, #0
 80110f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80110fc:	88fa      	ldrh	r2, [r7, #6]
 80110fe:	2300      	movs	r3, #0
 8011100:	9303      	str	r3, [sp, #12]
 8011102:	69fb      	ldr	r3, [r7, #28]
 8011104:	9302      	str	r3, [sp, #8]
 8011106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011108:	9301      	str	r3, [sp, #4]
 801110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801110c:	9300      	str	r3, [sp, #0]
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	68b9      	ldr	r1, [r7, #8]
 8011112:	68f8      	ldr	r0, [r7, #12]
 8011114:	f000 f80e 	bl	8011134 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011118:	69f8      	ldr	r0, [r7, #28]
 801111a:	f000 f89b 	bl	8011254 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801111e:	2301      	movs	r3, #1
 8011120:	61bb      	str	r3, [r7, #24]
 8011122:	e002      	b.n	801112a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011128:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801112a:	69bb      	ldr	r3, [r7, #24]
	}
 801112c:	4618      	mov	r0, r3
 801112e:	3720      	adds	r7, #32
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b088      	sub	sp, #32
 8011138:	af00      	add	r7, sp, #0
 801113a:	60f8      	str	r0, [r7, #12]
 801113c:	60b9      	str	r1, [r7, #8]
 801113e:	607a      	str	r2, [r7, #4]
 8011140:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011144:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	461a      	mov	r2, r3
 801114c:	21a5      	movs	r1, #165	; 0xa5
 801114e:	f001 fef5 	bl	8012f3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011156:	6879      	ldr	r1, [r7, #4]
 8011158:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801115c:	440b      	add	r3, r1
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	4413      	add	r3, r2
 8011162:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	f023 0307 	bic.w	r3, r3, #7
 801116a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801116c:	69bb      	ldr	r3, [r7, #24]
 801116e:	f003 0307 	and.w	r3, r3, #7
 8011172:	2b00      	cmp	r3, #0
 8011174:	d00a      	beq.n	801118c <prvInitialiseNewTask+0x58>
	__asm volatile
 8011176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801117a:	f383 8811 	msr	BASEPRI, r3
 801117e:	f3bf 8f6f 	isb	sy
 8011182:	f3bf 8f4f 	dsb	sy
 8011186:	617b      	str	r3, [r7, #20]
}
 8011188:	bf00      	nop
 801118a:	e7fe      	b.n	801118a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d01f      	beq.n	80111d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011192:	2300      	movs	r3, #0
 8011194:	61fb      	str	r3, [r7, #28]
 8011196:	e012      	b.n	80111be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011198:	68ba      	ldr	r2, [r7, #8]
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	4413      	add	r3, r2
 801119e:	7819      	ldrb	r1, [r3, #0]
 80111a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111a2:	69fb      	ldr	r3, [r7, #28]
 80111a4:	4413      	add	r3, r2
 80111a6:	3334      	adds	r3, #52	; 0x34
 80111a8:	460a      	mov	r2, r1
 80111aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80111ac:	68ba      	ldr	r2, [r7, #8]
 80111ae:	69fb      	ldr	r3, [r7, #28]
 80111b0:	4413      	add	r3, r2
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d006      	beq.n	80111c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80111b8:	69fb      	ldr	r3, [r7, #28]
 80111ba:	3301      	adds	r3, #1
 80111bc:	61fb      	str	r3, [r7, #28]
 80111be:	69fb      	ldr	r3, [r7, #28]
 80111c0:	2b0f      	cmp	r3, #15
 80111c2:	d9e9      	bls.n	8011198 <prvInitialiseNewTask+0x64>
 80111c4:	e000      	b.n	80111c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80111c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80111c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ca:	2200      	movs	r2, #0
 80111cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80111d0:	e003      	b.n	80111da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	2200      	movs	r2, #0
 80111d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80111da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111dc:	2b37      	cmp	r3, #55	; 0x37
 80111de:	d901      	bls.n	80111e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80111e0:	2337      	movs	r3, #55	; 0x37
 80111e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80111e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80111ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80111f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f2:	2200      	movs	r2, #0
 80111f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80111f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f8:	3304      	adds	r3, #4
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7ff f8be 	bl	801037c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011202:	3318      	adds	r3, #24
 8011204:	4618      	mov	r0, r3
 8011206:	f7ff f8b9 	bl	801037c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801120e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011212:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011218:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801121c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801121e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011222:	2200      	movs	r2, #0
 8011224:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011228:	2200      	movs	r2, #0
 801122a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801122e:	683a      	ldr	r2, [r7, #0]
 8011230:	68f9      	ldr	r1, [r7, #12]
 8011232:	69b8      	ldr	r0, [r7, #24]
 8011234:	f001 f9fe 	bl	8012634 <pxPortInitialiseStack>
 8011238:	4602      	mov	r2, r0
 801123a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801123c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011240:	2b00      	cmp	r3, #0
 8011242:	d002      	beq.n	801124a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801124a:	bf00      	nop
 801124c:	3720      	adds	r7, #32
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
	...

08011254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801125c:	f001 fb1a 	bl	8012894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011260:	4b2d      	ldr	r3, [pc, #180]	; (8011318 <prvAddNewTaskToReadyList+0xc4>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	3301      	adds	r3, #1
 8011266:	4a2c      	ldr	r2, [pc, #176]	; (8011318 <prvAddNewTaskToReadyList+0xc4>)
 8011268:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801126a:	4b2c      	ldr	r3, [pc, #176]	; (801131c <prvAddNewTaskToReadyList+0xc8>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d109      	bne.n	8011286 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011272:	4a2a      	ldr	r2, [pc, #168]	; (801131c <prvAddNewTaskToReadyList+0xc8>)
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011278:	4b27      	ldr	r3, [pc, #156]	; (8011318 <prvAddNewTaskToReadyList+0xc4>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	2b01      	cmp	r3, #1
 801127e:	d110      	bne.n	80112a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011280:	f000 fcb4 	bl	8011bec <prvInitialiseTaskLists>
 8011284:	e00d      	b.n	80112a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011286:	4b26      	ldr	r3, [pc, #152]	; (8011320 <prvAddNewTaskToReadyList+0xcc>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d109      	bne.n	80112a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801128e:	4b23      	ldr	r3, [pc, #140]	; (801131c <prvAddNewTaskToReadyList+0xc8>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011298:	429a      	cmp	r2, r3
 801129a:	d802      	bhi.n	80112a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801129c:	4a1f      	ldr	r2, [pc, #124]	; (801131c <prvAddNewTaskToReadyList+0xc8>)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80112a2:	4b20      	ldr	r3, [pc, #128]	; (8011324 <prvAddNewTaskToReadyList+0xd0>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	3301      	adds	r3, #1
 80112a8:	4a1e      	ldr	r2, [pc, #120]	; (8011324 <prvAddNewTaskToReadyList+0xd0>)
 80112aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80112ac:	4b1d      	ldr	r3, [pc, #116]	; (8011324 <prvAddNewTaskToReadyList+0xd0>)
 80112ae:	681a      	ldr	r2, [r3, #0]
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112b8:	4b1b      	ldr	r3, [pc, #108]	; (8011328 <prvAddNewTaskToReadyList+0xd4>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	429a      	cmp	r2, r3
 80112be:	d903      	bls.n	80112c8 <prvAddNewTaskToReadyList+0x74>
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c4:	4a18      	ldr	r2, [pc, #96]	; (8011328 <prvAddNewTaskToReadyList+0xd4>)
 80112c6:	6013      	str	r3, [r2, #0]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112cc:	4613      	mov	r3, r2
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	4413      	add	r3, r2
 80112d2:	009b      	lsls	r3, r3, #2
 80112d4:	4a15      	ldr	r2, [pc, #84]	; (801132c <prvAddNewTaskToReadyList+0xd8>)
 80112d6:	441a      	add	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	3304      	adds	r3, #4
 80112dc:	4619      	mov	r1, r3
 80112de:	4610      	mov	r0, r2
 80112e0:	f7ff f859 	bl	8010396 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80112e4:	f001 fb06 	bl	80128f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80112e8:	4b0d      	ldr	r3, [pc, #52]	; (8011320 <prvAddNewTaskToReadyList+0xcc>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d00e      	beq.n	801130e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80112f0:	4b0a      	ldr	r3, [pc, #40]	; (801131c <prvAddNewTaskToReadyList+0xc8>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d207      	bcs.n	801130e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80112fe:	4b0c      	ldr	r3, [pc, #48]	; (8011330 <prvAddNewTaskToReadyList+0xdc>)
 8011300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011304:	601a      	str	r2, [r3, #0]
 8011306:	f3bf 8f4f 	dsb	sy
 801130a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801130e:	bf00      	nop
 8011310:	3708      	adds	r7, #8
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	2400120c 	.word	0x2400120c
 801131c:	24000d38 	.word	0x24000d38
 8011320:	24001218 	.word	0x24001218
 8011324:	24001228 	.word	0x24001228
 8011328:	24001214 	.word	0x24001214
 801132c:	24000d3c 	.word	0x24000d3c
 8011330:	e000ed04 	.word	0xe000ed04

08011334 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801133c:	2300      	movs	r3, #0
 801133e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d017      	beq.n	8011376 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011346:	4b13      	ldr	r3, [pc, #76]	; (8011394 <vTaskDelay+0x60>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d00a      	beq.n	8011364 <vTaskDelay+0x30>
	__asm volatile
 801134e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011352:	f383 8811 	msr	BASEPRI, r3
 8011356:	f3bf 8f6f 	isb	sy
 801135a:	f3bf 8f4f 	dsb	sy
 801135e:	60bb      	str	r3, [r7, #8]
}
 8011360:	bf00      	nop
 8011362:	e7fe      	b.n	8011362 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011364:	f000 f880 	bl	8011468 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011368:	2100      	movs	r1, #0
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f000 fda0 	bl	8011eb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011370:	f000 f888 	bl	8011484 <xTaskResumeAll>
 8011374:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d107      	bne.n	801138c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801137c:	4b06      	ldr	r3, [pc, #24]	; (8011398 <vTaskDelay+0x64>)
 801137e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011382:	601a      	str	r2, [r3, #0]
 8011384:	f3bf 8f4f 	dsb	sy
 8011388:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801138c:	bf00      	nop
 801138e:	3710      	adds	r7, #16
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	24001234 	.word	0x24001234
 8011398:	e000ed04 	.word	0xe000ed04

0801139c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b08a      	sub	sp, #40	; 0x28
 80113a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80113a2:	2300      	movs	r3, #0
 80113a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80113a6:	2300      	movs	r3, #0
 80113a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80113aa:	463a      	mov	r2, r7
 80113ac:	1d39      	adds	r1, r7, #4
 80113ae:	f107 0308 	add.w	r3, r7, #8
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7fe fda0 	bl	800fef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80113b8:	6839      	ldr	r1, [r7, #0]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	68ba      	ldr	r2, [r7, #8]
 80113be:	9202      	str	r2, [sp, #8]
 80113c0:	9301      	str	r3, [sp, #4]
 80113c2:	2300      	movs	r3, #0
 80113c4:	9300      	str	r3, [sp, #0]
 80113c6:	2300      	movs	r3, #0
 80113c8:	460a      	mov	r2, r1
 80113ca:	4921      	ldr	r1, [pc, #132]	; (8011450 <vTaskStartScheduler+0xb4>)
 80113cc:	4821      	ldr	r0, [pc, #132]	; (8011454 <vTaskStartScheduler+0xb8>)
 80113ce:	f7ff fe0f 	bl	8010ff0 <xTaskCreateStatic>
 80113d2:	4603      	mov	r3, r0
 80113d4:	4a20      	ldr	r2, [pc, #128]	; (8011458 <vTaskStartScheduler+0xbc>)
 80113d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80113d8:	4b1f      	ldr	r3, [pc, #124]	; (8011458 <vTaskStartScheduler+0xbc>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d002      	beq.n	80113e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80113e0:	2301      	movs	r3, #1
 80113e2:	617b      	str	r3, [r7, #20]
 80113e4:	e001      	b.n	80113ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80113e6:	2300      	movs	r3, #0
 80113e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d102      	bne.n	80113f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80113f0:	f000 fdb2 	bl	8011f58 <xTimerCreateTimerTask>
 80113f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	2b01      	cmp	r3, #1
 80113fa:	d116      	bne.n	801142a <vTaskStartScheduler+0x8e>
	__asm volatile
 80113fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011400:	f383 8811 	msr	BASEPRI, r3
 8011404:	f3bf 8f6f 	isb	sy
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	613b      	str	r3, [r7, #16]
}
 801140e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011410:	4b12      	ldr	r3, [pc, #72]	; (801145c <vTaskStartScheduler+0xc0>)
 8011412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011416:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011418:	4b11      	ldr	r3, [pc, #68]	; (8011460 <vTaskStartScheduler+0xc4>)
 801141a:	2201      	movs	r2, #1
 801141c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801141e:	4b11      	ldr	r3, [pc, #68]	; (8011464 <vTaskStartScheduler+0xc8>)
 8011420:	2200      	movs	r2, #0
 8011422:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011424:	f001 f994 	bl	8012750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011428:	e00e      	b.n	8011448 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011430:	d10a      	bne.n	8011448 <vTaskStartScheduler+0xac>
	__asm volatile
 8011432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011436:	f383 8811 	msr	BASEPRI, r3
 801143a:	f3bf 8f6f 	isb	sy
 801143e:	f3bf 8f4f 	dsb	sy
 8011442:	60fb      	str	r3, [r7, #12]
}
 8011444:	bf00      	nop
 8011446:	e7fe      	b.n	8011446 <vTaskStartScheduler+0xaa>
}
 8011448:	bf00      	nop
 801144a:	3718      	adds	r7, #24
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	08014234 	.word	0x08014234
 8011454:	08011bbd 	.word	0x08011bbd
 8011458:	24001230 	.word	0x24001230
 801145c:	2400122c 	.word	0x2400122c
 8011460:	24001218 	.word	0x24001218
 8011464:	24001210 	.word	0x24001210

08011468 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011468:	b480      	push	{r7}
 801146a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801146c:	4b04      	ldr	r3, [pc, #16]	; (8011480 <vTaskSuspendAll+0x18>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	3301      	adds	r3, #1
 8011472:	4a03      	ldr	r2, [pc, #12]	; (8011480 <vTaskSuspendAll+0x18>)
 8011474:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011476:	bf00      	nop
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr
 8011480:	24001234 	.word	0x24001234

08011484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b084      	sub	sp, #16
 8011488:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801148a:	2300      	movs	r3, #0
 801148c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801148e:	2300      	movs	r3, #0
 8011490:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011492:	4b42      	ldr	r3, [pc, #264]	; (801159c <xTaskResumeAll+0x118>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d10a      	bne.n	80114b0 <xTaskResumeAll+0x2c>
	__asm volatile
 801149a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149e:	f383 8811 	msr	BASEPRI, r3
 80114a2:	f3bf 8f6f 	isb	sy
 80114a6:	f3bf 8f4f 	dsb	sy
 80114aa:	603b      	str	r3, [r7, #0]
}
 80114ac:	bf00      	nop
 80114ae:	e7fe      	b.n	80114ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80114b0:	f001 f9f0 	bl	8012894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80114b4:	4b39      	ldr	r3, [pc, #228]	; (801159c <xTaskResumeAll+0x118>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	3b01      	subs	r3, #1
 80114ba:	4a38      	ldr	r2, [pc, #224]	; (801159c <xTaskResumeAll+0x118>)
 80114bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114be:	4b37      	ldr	r3, [pc, #220]	; (801159c <xTaskResumeAll+0x118>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d162      	bne.n	801158c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80114c6:	4b36      	ldr	r3, [pc, #216]	; (80115a0 <xTaskResumeAll+0x11c>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d05e      	beq.n	801158c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80114ce:	e02f      	b.n	8011530 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114d0:	4b34      	ldr	r3, [pc, #208]	; (80115a4 <xTaskResumeAll+0x120>)
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	68db      	ldr	r3, [r3, #12]
 80114d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	3318      	adds	r3, #24
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fe ffb7 	bl	8010450 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	3304      	adds	r3, #4
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7fe ffb2 	bl	8010450 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114f0:	4b2d      	ldr	r3, [pc, #180]	; (80115a8 <xTaskResumeAll+0x124>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d903      	bls.n	8011500 <xTaskResumeAll+0x7c>
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114fc:	4a2a      	ldr	r2, [pc, #168]	; (80115a8 <xTaskResumeAll+0x124>)
 80114fe:	6013      	str	r3, [r2, #0]
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011504:	4613      	mov	r3, r2
 8011506:	009b      	lsls	r3, r3, #2
 8011508:	4413      	add	r3, r2
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	4a27      	ldr	r2, [pc, #156]	; (80115ac <xTaskResumeAll+0x128>)
 801150e:	441a      	add	r2, r3
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	3304      	adds	r3, #4
 8011514:	4619      	mov	r1, r3
 8011516:	4610      	mov	r0, r2
 8011518:	f7fe ff3d 	bl	8010396 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011520:	4b23      	ldr	r3, [pc, #140]	; (80115b0 <xTaskResumeAll+0x12c>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011526:	429a      	cmp	r2, r3
 8011528:	d302      	bcc.n	8011530 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801152a:	4b22      	ldr	r3, [pc, #136]	; (80115b4 <xTaskResumeAll+0x130>)
 801152c:	2201      	movs	r2, #1
 801152e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011530:	4b1c      	ldr	r3, [pc, #112]	; (80115a4 <xTaskResumeAll+0x120>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d1cb      	bne.n	80114d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d001      	beq.n	8011542 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801153e:	f000 fbf3 	bl	8011d28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011542:	4b1d      	ldr	r3, [pc, #116]	; (80115b8 <xTaskResumeAll+0x134>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d010      	beq.n	8011570 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801154e:	f000 f847 	bl	80115e0 <xTaskIncrementTick>
 8011552:	4603      	mov	r3, r0
 8011554:	2b00      	cmp	r3, #0
 8011556:	d002      	beq.n	801155e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011558:	4b16      	ldr	r3, [pc, #88]	; (80115b4 <xTaskResumeAll+0x130>)
 801155a:	2201      	movs	r2, #1
 801155c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	3b01      	subs	r3, #1
 8011562:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1f1      	bne.n	801154e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801156a:	4b13      	ldr	r3, [pc, #76]	; (80115b8 <xTaskResumeAll+0x134>)
 801156c:	2200      	movs	r2, #0
 801156e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011570:	4b10      	ldr	r3, [pc, #64]	; (80115b4 <xTaskResumeAll+0x130>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d009      	beq.n	801158c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011578:	2301      	movs	r3, #1
 801157a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801157c:	4b0f      	ldr	r3, [pc, #60]	; (80115bc <xTaskResumeAll+0x138>)
 801157e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011582:	601a      	str	r2, [r3, #0]
 8011584:	f3bf 8f4f 	dsb	sy
 8011588:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801158c:	f001 f9b2 	bl	80128f4 <vPortExitCritical>

	return xAlreadyYielded;
 8011590:	68bb      	ldr	r3, [r7, #8]
}
 8011592:	4618      	mov	r0, r3
 8011594:	3710      	adds	r7, #16
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	24001234 	.word	0x24001234
 80115a0:	2400120c 	.word	0x2400120c
 80115a4:	240011cc 	.word	0x240011cc
 80115a8:	24001214 	.word	0x24001214
 80115ac:	24000d3c 	.word	0x24000d3c
 80115b0:	24000d38 	.word	0x24000d38
 80115b4:	24001220 	.word	0x24001220
 80115b8:	2400121c 	.word	0x2400121c
 80115bc:	e000ed04 	.word	0xe000ed04

080115c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80115c6:	4b05      	ldr	r3, [pc, #20]	; (80115dc <xTaskGetTickCount+0x1c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80115cc:	687b      	ldr	r3, [r7, #4]
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	370c      	adds	r7, #12
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr
 80115da:	bf00      	nop
 80115dc:	24001210 	.word	0x24001210

080115e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b086      	sub	sp, #24
 80115e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80115e6:	2300      	movs	r3, #0
 80115e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115ea:	4b4f      	ldr	r3, [pc, #316]	; (8011728 <xTaskIncrementTick+0x148>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	f040 808f 	bne.w	8011712 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80115f4:	4b4d      	ldr	r3, [pc, #308]	; (801172c <xTaskIncrementTick+0x14c>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	3301      	adds	r3, #1
 80115fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80115fc:	4a4b      	ldr	r2, [pc, #300]	; (801172c <xTaskIncrementTick+0x14c>)
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d120      	bne.n	801164a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011608:	4b49      	ldr	r3, [pc, #292]	; (8011730 <xTaskIncrementTick+0x150>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d00a      	beq.n	8011628 <xTaskIncrementTick+0x48>
	__asm volatile
 8011612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011616:	f383 8811 	msr	BASEPRI, r3
 801161a:	f3bf 8f6f 	isb	sy
 801161e:	f3bf 8f4f 	dsb	sy
 8011622:	603b      	str	r3, [r7, #0]
}
 8011624:	bf00      	nop
 8011626:	e7fe      	b.n	8011626 <xTaskIncrementTick+0x46>
 8011628:	4b41      	ldr	r3, [pc, #260]	; (8011730 <xTaskIncrementTick+0x150>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	60fb      	str	r3, [r7, #12]
 801162e:	4b41      	ldr	r3, [pc, #260]	; (8011734 <xTaskIncrementTick+0x154>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	4a3f      	ldr	r2, [pc, #252]	; (8011730 <xTaskIncrementTick+0x150>)
 8011634:	6013      	str	r3, [r2, #0]
 8011636:	4a3f      	ldr	r2, [pc, #252]	; (8011734 <xTaskIncrementTick+0x154>)
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	6013      	str	r3, [r2, #0]
 801163c:	4b3e      	ldr	r3, [pc, #248]	; (8011738 <xTaskIncrementTick+0x158>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	3301      	adds	r3, #1
 8011642:	4a3d      	ldr	r2, [pc, #244]	; (8011738 <xTaskIncrementTick+0x158>)
 8011644:	6013      	str	r3, [r2, #0]
 8011646:	f000 fb6f 	bl	8011d28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801164a:	4b3c      	ldr	r3, [pc, #240]	; (801173c <xTaskIncrementTick+0x15c>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	693a      	ldr	r2, [r7, #16]
 8011650:	429a      	cmp	r2, r3
 8011652:	d349      	bcc.n	80116e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011654:	4b36      	ldr	r3, [pc, #216]	; (8011730 <xTaskIncrementTick+0x150>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d104      	bne.n	8011668 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801165e:	4b37      	ldr	r3, [pc, #220]	; (801173c <xTaskIncrementTick+0x15c>)
 8011660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011664:	601a      	str	r2, [r3, #0]
					break;
 8011666:	e03f      	b.n	80116e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011668:	4b31      	ldr	r3, [pc, #196]	; (8011730 <xTaskIncrementTick+0x150>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011678:	693a      	ldr	r2, [r7, #16]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	429a      	cmp	r2, r3
 801167e:	d203      	bcs.n	8011688 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011680:	4a2e      	ldr	r2, [pc, #184]	; (801173c <xTaskIncrementTick+0x15c>)
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011686:	e02f      	b.n	80116e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	3304      	adds	r3, #4
 801168c:	4618      	mov	r0, r3
 801168e:	f7fe fedf 	bl	8010450 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011696:	2b00      	cmp	r3, #0
 8011698:	d004      	beq.n	80116a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	3318      	adds	r3, #24
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fe fed6 	bl	8010450 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116a8:	4b25      	ldr	r3, [pc, #148]	; (8011740 <xTaskIncrementTick+0x160>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d903      	bls.n	80116b8 <xTaskIncrementTick+0xd8>
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116b4:	4a22      	ldr	r2, [pc, #136]	; (8011740 <xTaskIncrementTick+0x160>)
 80116b6:	6013      	str	r3, [r2, #0]
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116bc:	4613      	mov	r3, r2
 80116be:	009b      	lsls	r3, r3, #2
 80116c0:	4413      	add	r3, r2
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	4a1f      	ldr	r2, [pc, #124]	; (8011744 <xTaskIncrementTick+0x164>)
 80116c6:	441a      	add	r2, r3
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	3304      	adds	r3, #4
 80116cc:	4619      	mov	r1, r3
 80116ce:	4610      	mov	r0, r2
 80116d0:	f7fe fe61 	bl	8010396 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116d8:	4b1b      	ldr	r3, [pc, #108]	; (8011748 <xTaskIncrementTick+0x168>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116de:	429a      	cmp	r2, r3
 80116e0:	d3b8      	bcc.n	8011654 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80116e2:	2301      	movs	r3, #1
 80116e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116e6:	e7b5      	b.n	8011654 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80116e8:	4b17      	ldr	r3, [pc, #92]	; (8011748 <xTaskIncrementTick+0x168>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ee:	4915      	ldr	r1, [pc, #84]	; (8011744 <xTaskIncrementTick+0x164>)
 80116f0:	4613      	mov	r3, r2
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4413      	add	r3, r2
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	440b      	add	r3, r1
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	d901      	bls.n	8011704 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011700:	2301      	movs	r3, #1
 8011702:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011704:	4b11      	ldr	r3, [pc, #68]	; (801174c <xTaskIncrementTick+0x16c>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d007      	beq.n	801171c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801170c:	2301      	movs	r3, #1
 801170e:	617b      	str	r3, [r7, #20]
 8011710:	e004      	b.n	801171c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011712:	4b0f      	ldr	r3, [pc, #60]	; (8011750 <xTaskIncrementTick+0x170>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	3301      	adds	r3, #1
 8011718:	4a0d      	ldr	r2, [pc, #52]	; (8011750 <xTaskIncrementTick+0x170>)
 801171a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801171c:	697b      	ldr	r3, [r7, #20]
}
 801171e:	4618      	mov	r0, r3
 8011720:	3718      	adds	r7, #24
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	24001234 	.word	0x24001234
 801172c:	24001210 	.word	0x24001210
 8011730:	240011c4 	.word	0x240011c4
 8011734:	240011c8 	.word	0x240011c8
 8011738:	24001224 	.word	0x24001224
 801173c:	2400122c 	.word	0x2400122c
 8011740:	24001214 	.word	0x24001214
 8011744:	24000d3c 	.word	0x24000d3c
 8011748:	24000d38 	.word	0x24000d38
 801174c:	24001220 	.word	0x24001220
 8011750:	2400121c 	.word	0x2400121c

08011754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011754:	b480      	push	{r7}
 8011756:	b085      	sub	sp, #20
 8011758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801175a:	4b28      	ldr	r3, [pc, #160]	; (80117fc <vTaskSwitchContext+0xa8>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d003      	beq.n	801176a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011762:	4b27      	ldr	r3, [pc, #156]	; (8011800 <vTaskSwitchContext+0xac>)
 8011764:	2201      	movs	r2, #1
 8011766:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011768:	e041      	b.n	80117ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801176a:	4b25      	ldr	r3, [pc, #148]	; (8011800 <vTaskSwitchContext+0xac>)
 801176c:	2200      	movs	r2, #0
 801176e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011770:	4b24      	ldr	r3, [pc, #144]	; (8011804 <vTaskSwitchContext+0xb0>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	60fb      	str	r3, [r7, #12]
 8011776:	e010      	b.n	801179a <vTaskSwitchContext+0x46>
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d10a      	bne.n	8011794 <vTaskSwitchContext+0x40>
	__asm volatile
 801177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011782:	f383 8811 	msr	BASEPRI, r3
 8011786:	f3bf 8f6f 	isb	sy
 801178a:	f3bf 8f4f 	dsb	sy
 801178e:	607b      	str	r3, [r7, #4]
}
 8011790:	bf00      	nop
 8011792:	e7fe      	b.n	8011792 <vTaskSwitchContext+0x3e>
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	3b01      	subs	r3, #1
 8011798:	60fb      	str	r3, [r7, #12]
 801179a:	491b      	ldr	r1, [pc, #108]	; (8011808 <vTaskSwitchContext+0xb4>)
 801179c:	68fa      	ldr	r2, [r7, #12]
 801179e:	4613      	mov	r3, r2
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	4413      	add	r3, r2
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	440b      	add	r3, r1
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d0e4      	beq.n	8011778 <vTaskSwitchContext+0x24>
 80117ae:	68fa      	ldr	r2, [r7, #12]
 80117b0:	4613      	mov	r3, r2
 80117b2:	009b      	lsls	r3, r3, #2
 80117b4:	4413      	add	r3, r2
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	4a13      	ldr	r2, [pc, #76]	; (8011808 <vTaskSwitchContext+0xb4>)
 80117ba:	4413      	add	r3, r2
 80117bc:	60bb      	str	r3, [r7, #8]
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	685a      	ldr	r2, [r3, #4]
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	605a      	str	r2, [r3, #4]
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	685a      	ldr	r2, [r3, #4]
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	3308      	adds	r3, #8
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d104      	bne.n	80117de <vTaskSwitchContext+0x8a>
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	685a      	ldr	r2, [r3, #4]
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	605a      	str	r2, [r3, #4]
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	685b      	ldr	r3, [r3, #4]
 80117e2:	68db      	ldr	r3, [r3, #12]
 80117e4:	4a09      	ldr	r2, [pc, #36]	; (801180c <vTaskSwitchContext+0xb8>)
 80117e6:	6013      	str	r3, [r2, #0]
 80117e8:	4a06      	ldr	r2, [pc, #24]	; (8011804 <vTaskSwitchContext+0xb0>)
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	6013      	str	r3, [r2, #0]
}
 80117ee:	bf00      	nop
 80117f0:	3714      	adds	r7, #20
 80117f2:	46bd      	mov	sp, r7
 80117f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop
 80117fc:	24001234 	.word	0x24001234
 8011800:	24001220 	.word	0x24001220
 8011804:	24001214 	.word	0x24001214
 8011808:	24000d3c 	.word	0x24000d3c
 801180c:	24000d38 	.word	0x24000d38

08011810 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d10a      	bne.n	8011836 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011824:	f383 8811 	msr	BASEPRI, r3
 8011828:	f3bf 8f6f 	isb	sy
 801182c:	f3bf 8f4f 	dsb	sy
 8011830:	60fb      	str	r3, [r7, #12]
}
 8011832:	bf00      	nop
 8011834:	e7fe      	b.n	8011834 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011836:	4b07      	ldr	r3, [pc, #28]	; (8011854 <vTaskPlaceOnEventList+0x44>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	3318      	adds	r3, #24
 801183c:	4619      	mov	r1, r3
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f7fe fdcd 	bl	80103de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011844:	2101      	movs	r1, #1
 8011846:	6838      	ldr	r0, [r7, #0]
 8011848:	f000 fb32 	bl	8011eb0 <prvAddCurrentTaskToDelayedList>
}
 801184c:	bf00      	nop
 801184e:	3710      	adds	r7, #16
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	24000d38 	.word	0x24000d38

08011858 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b086      	sub	sp, #24
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d10a      	bne.n	8011880 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801186a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186e:	f383 8811 	msr	BASEPRI, r3
 8011872:	f3bf 8f6f 	isb	sy
 8011876:	f3bf 8f4f 	dsb	sy
 801187a:	617b      	str	r3, [r7, #20]
}
 801187c:	bf00      	nop
 801187e:	e7fe      	b.n	801187e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8011880:	4b11      	ldr	r3, [pc, #68]	; (80118c8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d10a      	bne.n	801189e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8011888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801188c:	f383 8811 	msr	BASEPRI, r3
 8011890:	f3bf 8f6f 	isb	sy
 8011894:	f3bf 8f4f 	dsb	sy
 8011898:	613b      	str	r3, [r7, #16]
}
 801189a:	bf00      	nop
 801189c:	e7fe      	b.n	801189c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801189e:	4b0b      	ldr	r3, [pc, #44]	; (80118cc <vTaskPlaceOnUnorderedEventList+0x74>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	68ba      	ldr	r2, [r7, #8]
 80118a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80118a8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80118aa:	4b08      	ldr	r3, [pc, #32]	; (80118cc <vTaskPlaceOnUnorderedEventList+0x74>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	3318      	adds	r3, #24
 80118b0:	4619      	mov	r1, r3
 80118b2:	68f8      	ldr	r0, [r7, #12]
 80118b4:	f7fe fd6f 	bl	8010396 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80118b8:	2101      	movs	r1, #1
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f000 faf8 	bl	8011eb0 <prvAddCurrentTaskToDelayedList>
}
 80118c0:	bf00      	nop
 80118c2:	3718      	adds	r7, #24
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	24001234 	.word	0x24001234
 80118cc:	24000d38 	.word	0x24000d38

080118d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b086      	sub	sp, #24
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	60b9      	str	r1, [r7, #8]
 80118da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10a      	bne.n	80118f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80118e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e6:	f383 8811 	msr	BASEPRI, r3
 80118ea:	f3bf 8f6f 	isb	sy
 80118ee:	f3bf 8f4f 	dsb	sy
 80118f2:	617b      	str	r3, [r7, #20]
}
 80118f4:	bf00      	nop
 80118f6:	e7fe      	b.n	80118f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80118f8:	4b0a      	ldr	r3, [pc, #40]	; (8011924 <vTaskPlaceOnEventListRestricted+0x54>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	3318      	adds	r3, #24
 80118fe:	4619      	mov	r1, r3
 8011900:	68f8      	ldr	r0, [r7, #12]
 8011902:	f7fe fd48 	bl	8010396 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d002      	beq.n	8011912 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801190c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011910:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011912:	6879      	ldr	r1, [r7, #4]
 8011914:	68b8      	ldr	r0, [r7, #8]
 8011916:	f000 facb 	bl	8011eb0 <prvAddCurrentTaskToDelayedList>
	}
 801191a:	bf00      	nop
 801191c:	3718      	adds	r7, #24
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	24000d38 	.word	0x24000d38

08011928 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b086      	sub	sp, #24
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	68db      	ldr	r3, [r3, #12]
 8011934:	68db      	ldr	r3, [r3, #12]
 8011936:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d10a      	bne.n	8011954 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011942:	f383 8811 	msr	BASEPRI, r3
 8011946:	f3bf 8f6f 	isb	sy
 801194a:	f3bf 8f4f 	dsb	sy
 801194e:	60fb      	str	r3, [r7, #12]
}
 8011950:	bf00      	nop
 8011952:	e7fe      	b.n	8011952 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	3318      	adds	r3, #24
 8011958:	4618      	mov	r0, r3
 801195a:	f7fe fd79 	bl	8010450 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801195e:	4b1e      	ldr	r3, [pc, #120]	; (80119d8 <xTaskRemoveFromEventList+0xb0>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d11d      	bne.n	80119a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	3304      	adds	r3, #4
 801196a:	4618      	mov	r0, r3
 801196c:	f7fe fd70 	bl	8010450 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011974:	4b19      	ldr	r3, [pc, #100]	; (80119dc <xTaskRemoveFromEventList+0xb4>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	429a      	cmp	r2, r3
 801197a:	d903      	bls.n	8011984 <xTaskRemoveFromEventList+0x5c>
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011980:	4a16      	ldr	r2, [pc, #88]	; (80119dc <xTaskRemoveFromEventList+0xb4>)
 8011982:	6013      	str	r3, [r2, #0]
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011988:	4613      	mov	r3, r2
 801198a:	009b      	lsls	r3, r3, #2
 801198c:	4413      	add	r3, r2
 801198e:	009b      	lsls	r3, r3, #2
 8011990:	4a13      	ldr	r2, [pc, #76]	; (80119e0 <xTaskRemoveFromEventList+0xb8>)
 8011992:	441a      	add	r2, r3
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	3304      	adds	r3, #4
 8011998:	4619      	mov	r1, r3
 801199a:	4610      	mov	r0, r2
 801199c:	f7fe fcfb 	bl	8010396 <vListInsertEnd>
 80119a0:	e005      	b.n	80119ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	3318      	adds	r3, #24
 80119a6:	4619      	mov	r1, r3
 80119a8:	480e      	ldr	r0, [pc, #56]	; (80119e4 <xTaskRemoveFromEventList+0xbc>)
 80119aa:	f7fe fcf4 	bl	8010396 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119b2:	4b0d      	ldr	r3, [pc, #52]	; (80119e8 <xTaskRemoveFromEventList+0xc0>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d905      	bls.n	80119c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80119bc:	2301      	movs	r3, #1
 80119be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80119c0:	4b0a      	ldr	r3, [pc, #40]	; (80119ec <xTaskRemoveFromEventList+0xc4>)
 80119c2:	2201      	movs	r2, #1
 80119c4:	601a      	str	r2, [r3, #0]
 80119c6:	e001      	b.n	80119cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80119c8:	2300      	movs	r3, #0
 80119ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80119cc:	697b      	ldr	r3, [r7, #20]
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3718      	adds	r7, #24
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	24001234 	.word	0x24001234
 80119dc:	24001214 	.word	0x24001214
 80119e0:	24000d3c 	.word	0x24000d3c
 80119e4:	240011cc 	.word	0x240011cc
 80119e8:	24000d38 	.word	0x24000d38
 80119ec:	24001220 	.word	0x24001220

080119f0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b086      	sub	sp, #24
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80119fa:	4b29      	ldr	r3, [pc, #164]	; (8011aa0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d10a      	bne.n	8011a18 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a06:	f383 8811 	msr	BASEPRI, r3
 8011a0a:	f3bf 8f6f 	isb	sy
 8011a0e:	f3bf 8f4f 	dsb	sy
 8011a12:	613b      	str	r3, [r7, #16]
}
 8011a14:	bf00      	nop
 8011a16:	e7fe      	b.n	8011a16 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	68db      	ldr	r3, [r3, #12]
 8011a26:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d10a      	bne.n	8011a44 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8011a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a32:	f383 8811 	msr	BASEPRI, r3
 8011a36:	f3bf 8f6f 	isb	sy
 8011a3a:	f3bf 8f4f 	dsb	sy
 8011a3e:	60fb      	str	r3, [r7, #12]
}
 8011a40:	bf00      	nop
 8011a42:	e7fe      	b.n	8011a42 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f7fe fd03 	bl	8010450 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	3304      	adds	r3, #4
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7fe fcfe 	bl	8010450 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a58:	4b12      	ldr	r3, [pc, #72]	; (8011aa4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d903      	bls.n	8011a68 <vTaskRemoveFromUnorderedEventList+0x78>
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a64:	4a0f      	ldr	r2, [pc, #60]	; (8011aa4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011a66:	6013      	str	r3, [r2, #0]
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a6c:	4613      	mov	r3, r2
 8011a6e:	009b      	lsls	r3, r3, #2
 8011a70:	4413      	add	r3, r2
 8011a72:	009b      	lsls	r3, r3, #2
 8011a74:	4a0c      	ldr	r2, [pc, #48]	; (8011aa8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011a76:	441a      	add	r2, r3
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	3304      	adds	r3, #4
 8011a7c:	4619      	mov	r1, r3
 8011a7e:	4610      	mov	r0, r2
 8011a80:	f7fe fc89 	bl	8010396 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a88:	4b08      	ldr	r3, [pc, #32]	; (8011aac <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d902      	bls.n	8011a98 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011a92:	4b07      	ldr	r3, [pc, #28]	; (8011ab0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011a94:	2201      	movs	r2, #1
 8011a96:	601a      	str	r2, [r3, #0]
	}
}
 8011a98:	bf00      	nop
 8011a9a:	3718      	adds	r7, #24
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}
 8011aa0:	24001234 	.word	0x24001234
 8011aa4:	24001214 	.word	0x24001214
 8011aa8:	24000d3c 	.word	0x24000d3c
 8011aac:	24000d38 	.word	0x24000d38
 8011ab0:	24001220 	.word	0x24001220

08011ab4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b083      	sub	sp, #12
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011abc:	4b06      	ldr	r3, [pc, #24]	; (8011ad8 <vTaskInternalSetTimeOutState+0x24>)
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011ac4:	4b05      	ldr	r3, [pc, #20]	; (8011adc <vTaskInternalSetTimeOutState+0x28>)
 8011ac6:	681a      	ldr	r2, [r3, #0]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	605a      	str	r2, [r3, #4]
}
 8011acc:	bf00      	nop
 8011ace:	370c      	adds	r7, #12
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad6:	4770      	bx	lr
 8011ad8:	24001224 	.word	0x24001224
 8011adc:	24001210 	.word	0x24001210

08011ae0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b088      	sub	sp, #32
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d10a      	bne.n	8011b06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af4:	f383 8811 	msr	BASEPRI, r3
 8011af8:	f3bf 8f6f 	isb	sy
 8011afc:	f3bf 8f4f 	dsb	sy
 8011b00:	613b      	str	r3, [r7, #16]
}
 8011b02:	bf00      	nop
 8011b04:	e7fe      	b.n	8011b04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d10a      	bne.n	8011b22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b10:	f383 8811 	msr	BASEPRI, r3
 8011b14:	f3bf 8f6f 	isb	sy
 8011b18:	f3bf 8f4f 	dsb	sy
 8011b1c:	60fb      	str	r3, [r7, #12]
}
 8011b1e:	bf00      	nop
 8011b20:	e7fe      	b.n	8011b20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011b22:	f000 feb7 	bl	8012894 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011b26:	4b1d      	ldr	r3, [pc, #116]	; (8011b9c <xTaskCheckForTimeOut+0xbc>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	69ba      	ldr	r2, [r7, #24]
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b3e:	d102      	bne.n	8011b46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011b40:	2300      	movs	r3, #0
 8011b42:	61fb      	str	r3, [r7, #28]
 8011b44:	e023      	b.n	8011b8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681a      	ldr	r2, [r3, #0]
 8011b4a:	4b15      	ldr	r3, [pc, #84]	; (8011ba0 <xTaskCheckForTimeOut+0xc0>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d007      	beq.n	8011b62 <xTaskCheckForTimeOut+0x82>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	69ba      	ldr	r2, [r7, #24]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d302      	bcc.n	8011b62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	61fb      	str	r3, [r7, #28]
 8011b60:	e015      	b.n	8011b8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	697a      	ldr	r2, [r7, #20]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d20b      	bcs.n	8011b84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	1ad2      	subs	r2, r2, r3
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7ff ff9b 	bl	8011ab4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	61fb      	str	r3, [r7, #28]
 8011b82:	e004      	b.n	8011b8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	2200      	movs	r2, #0
 8011b88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011b8e:	f000 feb1 	bl	80128f4 <vPortExitCritical>

	return xReturn;
 8011b92:	69fb      	ldr	r3, [r7, #28]
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3720      	adds	r7, #32
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	24001210 	.word	0x24001210
 8011ba0:	24001224 	.word	0x24001224

08011ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011ba8:	4b03      	ldr	r3, [pc, #12]	; (8011bb8 <vTaskMissedYield+0x14>)
 8011baa:	2201      	movs	r2, #1
 8011bac:	601a      	str	r2, [r3, #0]
}
 8011bae:	bf00      	nop
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr
 8011bb8:	24001220 	.word	0x24001220

08011bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011bc4:	f000 f852 	bl	8011c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011bc8:	4b06      	ldr	r3, [pc, #24]	; (8011be4 <prvIdleTask+0x28>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	2b01      	cmp	r3, #1
 8011bce:	d9f9      	bls.n	8011bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011bd0:	4b05      	ldr	r3, [pc, #20]	; (8011be8 <prvIdleTask+0x2c>)
 8011bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bd6:	601a      	str	r2, [r3, #0]
 8011bd8:	f3bf 8f4f 	dsb	sy
 8011bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011be0:	e7f0      	b.n	8011bc4 <prvIdleTask+0x8>
 8011be2:	bf00      	nop
 8011be4:	24000d3c 	.word	0x24000d3c
 8011be8:	e000ed04 	.word	0xe000ed04

08011bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	607b      	str	r3, [r7, #4]
 8011bf6:	e00c      	b.n	8011c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	4413      	add	r3, r2
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	4a12      	ldr	r2, [pc, #72]	; (8011c4c <prvInitialiseTaskLists+0x60>)
 8011c04:	4413      	add	r3, r2
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7fe fb98 	bl	801033c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	3301      	adds	r3, #1
 8011c10:	607b      	str	r3, [r7, #4]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2b37      	cmp	r3, #55	; 0x37
 8011c16:	d9ef      	bls.n	8011bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011c18:	480d      	ldr	r0, [pc, #52]	; (8011c50 <prvInitialiseTaskLists+0x64>)
 8011c1a:	f7fe fb8f 	bl	801033c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011c1e:	480d      	ldr	r0, [pc, #52]	; (8011c54 <prvInitialiseTaskLists+0x68>)
 8011c20:	f7fe fb8c 	bl	801033c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011c24:	480c      	ldr	r0, [pc, #48]	; (8011c58 <prvInitialiseTaskLists+0x6c>)
 8011c26:	f7fe fb89 	bl	801033c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011c2a:	480c      	ldr	r0, [pc, #48]	; (8011c5c <prvInitialiseTaskLists+0x70>)
 8011c2c:	f7fe fb86 	bl	801033c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011c30:	480b      	ldr	r0, [pc, #44]	; (8011c60 <prvInitialiseTaskLists+0x74>)
 8011c32:	f7fe fb83 	bl	801033c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011c36:	4b0b      	ldr	r3, [pc, #44]	; (8011c64 <prvInitialiseTaskLists+0x78>)
 8011c38:	4a05      	ldr	r2, [pc, #20]	; (8011c50 <prvInitialiseTaskLists+0x64>)
 8011c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011c3c:	4b0a      	ldr	r3, [pc, #40]	; (8011c68 <prvInitialiseTaskLists+0x7c>)
 8011c3e:	4a05      	ldr	r2, [pc, #20]	; (8011c54 <prvInitialiseTaskLists+0x68>)
 8011c40:	601a      	str	r2, [r3, #0]
}
 8011c42:	bf00      	nop
 8011c44:	3708      	adds	r7, #8
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	24000d3c 	.word	0x24000d3c
 8011c50:	2400119c 	.word	0x2400119c
 8011c54:	240011b0 	.word	0x240011b0
 8011c58:	240011cc 	.word	0x240011cc
 8011c5c:	240011e0 	.word	0x240011e0
 8011c60:	240011f8 	.word	0x240011f8
 8011c64:	240011c4 	.word	0x240011c4
 8011c68:	240011c8 	.word	0x240011c8

08011c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011c72:	e019      	b.n	8011ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011c74:	f000 fe0e 	bl	8012894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c78:	4b10      	ldr	r3, [pc, #64]	; (8011cbc <prvCheckTasksWaitingTermination+0x50>)
 8011c7a:	68db      	ldr	r3, [r3, #12]
 8011c7c:	68db      	ldr	r3, [r3, #12]
 8011c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	3304      	adds	r3, #4
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fe fbe3 	bl	8010450 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011c8a:	4b0d      	ldr	r3, [pc, #52]	; (8011cc0 <prvCheckTasksWaitingTermination+0x54>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	3b01      	subs	r3, #1
 8011c90:	4a0b      	ldr	r2, [pc, #44]	; (8011cc0 <prvCheckTasksWaitingTermination+0x54>)
 8011c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011c94:	4b0b      	ldr	r3, [pc, #44]	; (8011cc4 <prvCheckTasksWaitingTermination+0x58>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	3b01      	subs	r3, #1
 8011c9a:	4a0a      	ldr	r2, [pc, #40]	; (8011cc4 <prvCheckTasksWaitingTermination+0x58>)
 8011c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011c9e:	f000 fe29 	bl	80128f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 f810 	bl	8011cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011ca8:	4b06      	ldr	r3, [pc, #24]	; (8011cc4 <prvCheckTasksWaitingTermination+0x58>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d1e1      	bne.n	8011c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011cb0:	bf00      	nop
 8011cb2:	bf00      	nop
 8011cb4:	3708      	adds	r7, #8
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	240011e0 	.word	0x240011e0
 8011cc0:	2400120c 	.word	0x2400120c
 8011cc4:	240011f4 	.word	0x240011f4

08011cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d108      	bne.n	8011cec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f000 ffc6 	bl	8012c70 <vPortFree>
				vPortFree( pxTCB );
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f000 ffc3 	bl	8012c70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011cea:	e018      	b.n	8011d1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d103      	bne.n	8011cfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f000 ffba 	bl	8012c70 <vPortFree>
	}
 8011cfc:	e00f      	b.n	8011d1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011d04:	2b02      	cmp	r3, #2
 8011d06:	d00a      	beq.n	8011d1e <prvDeleteTCB+0x56>
	__asm volatile
 8011d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0c:	f383 8811 	msr	BASEPRI, r3
 8011d10:	f3bf 8f6f 	isb	sy
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	60fb      	str	r3, [r7, #12]
}
 8011d1a:	bf00      	nop
 8011d1c:	e7fe      	b.n	8011d1c <prvDeleteTCB+0x54>
	}
 8011d1e:	bf00      	nop
 8011d20:	3710      	adds	r7, #16
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
	...

08011d28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d2e:	4b0c      	ldr	r3, [pc, #48]	; (8011d60 <prvResetNextTaskUnblockTime+0x38>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d104      	bne.n	8011d42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011d38:	4b0a      	ldr	r3, [pc, #40]	; (8011d64 <prvResetNextTaskUnblockTime+0x3c>)
 8011d3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011d40:	e008      	b.n	8011d54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d42:	4b07      	ldr	r3, [pc, #28]	; (8011d60 <prvResetNextTaskUnblockTime+0x38>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	68db      	ldr	r3, [r3, #12]
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	685b      	ldr	r3, [r3, #4]
 8011d50:	4a04      	ldr	r2, [pc, #16]	; (8011d64 <prvResetNextTaskUnblockTime+0x3c>)
 8011d52:	6013      	str	r3, [r2, #0]
}
 8011d54:	bf00      	nop
 8011d56:	370c      	adds	r7, #12
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr
 8011d60:	240011c4 	.word	0x240011c4
 8011d64:	2400122c 	.word	0x2400122c

08011d68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011d68:	b480      	push	{r7}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011d6e:	4b0b      	ldr	r3, [pc, #44]	; (8011d9c <xTaskGetSchedulerState+0x34>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d102      	bne.n	8011d7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011d76:	2301      	movs	r3, #1
 8011d78:	607b      	str	r3, [r7, #4]
 8011d7a:	e008      	b.n	8011d8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d7c:	4b08      	ldr	r3, [pc, #32]	; (8011da0 <xTaskGetSchedulerState+0x38>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d102      	bne.n	8011d8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011d84:	2302      	movs	r3, #2
 8011d86:	607b      	str	r3, [r7, #4]
 8011d88:	e001      	b.n	8011d8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011d8e:	687b      	ldr	r3, [r7, #4]
	}
 8011d90:	4618      	mov	r0, r3
 8011d92:	370c      	adds	r7, #12
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr
 8011d9c:	24001218 	.word	0x24001218
 8011da0:	24001234 	.word	0x24001234

08011da4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b086      	sub	sp, #24
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011db0:	2300      	movs	r3, #0
 8011db2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d056      	beq.n	8011e68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011dba:	4b2e      	ldr	r3, [pc, #184]	; (8011e74 <xTaskPriorityDisinherit+0xd0>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	693a      	ldr	r2, [r7, #16]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d00a      	beq.n	8011dda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc8:	f383 8811 	msr	BASEPRI, r3
 8011dcc:	f3bf 8f6f 	isb	sy
 8011dd0:	f3bf 8f4f 	dsb	sy
 8011dd4:	60fb      	str	r3, [r7, #12]
}
 8011dd6:	bf00      	nop
 8011dd8:	e7fe      	b.n	8011dd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d10a      	bne.n	8011df8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de6:	f383 8811 	msr	BASEPRI, r3
 8011dea:	f3bf 8f6f 	isb	sy
 8011dee:	f3bf 8f4f 	dsb	sy
 8011df2:	60bb      	str	r3, [r7, #8]
}
 8011df4:	bf00      	nop
 8011df6:	e7fe      	b.n	8011df6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011dfc:	1e5a      	subs	r2, r3, #1
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d02c      	beq.n	8011e68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d128      	bne.n	8011e68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	3304      	adds	r3, #4
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f7fe fb18 	bl	8010450 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e38:	4b0f      	ldr	r3, [pc, #60]	; (8011e78 <xTaskPriorityDisinherit+0xd4>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d903      	bls.n	8011e48 <xTaskPriorityDisinherit+0xa4>
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e44:	4a0c      	ldr	r2, [pc, #48]	; (8011e78 <xTaskPriorityDisinherit+0xd4>)
 8011e46:	6013      	str	r3, [r2, #0]
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e4c:	4613      	mov	r3, r2
 8011e4e:	009b      	lsls	r3, r3, #2
 8011e50:	4413      	add	r3, r2
 8011e52:	009b      	lsls	r3, r3, #2
 8011e54:	4a09      	ldr	r2, [pc, #36]	; (8011e7c <xTaskPriorityDisinherit+0xd8>)
 8011e56:	441a      	add	r2, r3
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	3304      	adds	r3, #4
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	4610      	mov	r0, r2
 8011e60:	f7fe fa99 	bl	8010396 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011e64:	2301      	movs	r3, #1
 8011e66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011e68:	697b      	ldr	r3, [r7, #20]
	}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	3718      	adds	r7, #24
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}
 8011e72:	bf00      	nop
 8011e74:	24000d38 	.word	0x24000d38
 8011e78:	24001214 	.word	0x24001214
 8011e7c:	24000d3c 	.word	0x24000d3c

08011e80 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8011e80:	b480      	push	{r7}
 8011e82:	b083      	sub	sp, #12
 8011e84:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8011e86:	4b09      	ldr	r3, [pc, #36]	; (8011eac <uxTaskResetEventItemValue+0x2c>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	699b      	ldr	r3, [r3, #24]
 8011e8c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e8e:	4b07      	ldr	r3, [pc, #28]	; (8011eac <uxTaskResetEventItemValue+0x2c>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e94:	4b05      	ldr	r3, [pc, #20]	; (8011eac <uxTaskResetEventItemValue+0x2c>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011e9c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8011e9e:	687b      	ldr	r3, [r7, #4]
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	370c      	adds	r7, #12
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr
 8011eac:	24000d38 	.word	0x24000d38

08011eb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011eba:	4b21      	ldr	r3, [pc, #132]	; (8011f40 <prvAddCurrentTaskToDelayedList+0x90>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ec0:	4b20      	ldr	r3, [pc, #128]	; (8011f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	3304      	adds	r3, #4
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7fe fac2 	bl	8010450 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ed2:	d10a      	bne.n	8011eea <prvAddCurrentTaskToDelayedList+0x3a>
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d007      	beq.n	8011eea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011eda:	4b1a      	ldr	r3, [pc, #104]	; (8011f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	3304      	adds	r3, #4
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	4819      	ldr	r0, [pc, #100]	; (8011f48 <prvAddCurrentTaskToDelayedList+0x98>)
 8011ee4:	f7fe fa57 	bl	8010396 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011ee8:	e026      	b.n	8011f38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011eea:	68fa      	ldr	r2, [r7, #12]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	4413      	add	r3, r2
 8011ef0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011ef2:	4b14      	ldr	r3, [pc, #80]	; (8011f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	68ba      	ldr	r2, [r7, #8]
 8011ef8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011efa:	68ba      	ldr	r2, [r7, #8]
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d209      	bcs.n	8011f16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f02:	4b12      	ldr	r3, [pc, #72]	; (8011f4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	4b0f      	ldr	r3, [pc, #60]	; (8011f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	3304      	adds	r3, #4
 8011f0c:	4619      	mov	r1, r3
 8011f0e:	4610      	mov	r0, r2
 8011f10:	f7fe fa65 	bl	80103de <vListInsert>
}
 8011f14:	e010      	b.n	8011f38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f16:	4b0e      	ldr	r3, [pc, #56]	; (8011f50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	4b0a      	ldr	r3, [pc, #40]	; (8011f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	3304      	adds	r3, #4
 8011f20:	4619      	mov	r1, r3
 8011f22:	4610      	mov	r0, r2
 8011f24:	f7fe fa5b 	bl	80103de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011f28:	4b0a      	ldr	r3, [pc, #40]	; (8011f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	68ba      	ldr	r2, [r7, #8]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d202      	bcs.n	8011f38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011f32:	4a08      	ldr	r2, [pc, #32]	; (8011f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	6013      	str	r3, [r2, #0]
}
 8011f38:	bf00      	nop
 8011f3a:	3710      	adds	r7, #16
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}
 8011f40:	24001210 	.word	0x24001210
 8011f44:	24000d38 	.word	0x24000d38
 8011f48:	240011f8 	.word	0x240011f8
 8011f4c:	240011c8 	.word	0x240011c8
 8011f50:	240011c4 	.word	0x240011c4
 8011f54:	2400122c 	.word	0x2400122c

08011f58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b08a      	sub	sp, #40	; 0x28
 8011f5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011f62:	f000 fb07 	bl	8012574 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011f66:	4b1c      	ldr	r3, [pc, #112]	; (8011fd8 <xTimerCreateTimerTask+0x80>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d021      	beq.n	8011fb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011f72:	2300      	movs	r3, #0
 8011f74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011f76:	1d3a      	adds	r2, r7, #4
 8011f78:	f107 0108 	add.w	r1, r7, #8
 8011f7c:	f107 030c 	add.w	r3, r7, #12
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7fd ffd3 	bl	800ff2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011f86:	6879      	ldr	r1, [r7, #4]
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	68fa      	ldr	r2, [r7, #12]
 8011f8c:	9202      	str	r2, [sp, #8]
 8011f8e:	9301      	str	r3, [sp, #4]
 8011f90:	2302      	movs	r3, #2
 8011f92:	9300      	str	r3, [sp, #0]
 8011f94:	2300      	movs	r3, #0
 8011f96:	460a      	mov	r2, r1
 8011f98:	4910      	ldr	r1, [pc, #64]	; (8011fdc <xTimerCreateTimerTask+0x84>)
 8011f9a:	4811      	ldr	r0, [pc, #68]	; (8011fe0 <xTimerCreateTimerTask+0x88>)
 8011f9c:	f7ff f828 	bl	8010ff0 <xTaskCreateStatic>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	4a10      	ldr	r2, [pc, #64]	; (8011fe4 <xTimerCreateTimerTask+0x8c>)
 8011fa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011fa6:	4b0f      	ldr	r3, [pc, #60]	; (8011fe4 <xTimerCreateTimerTask+0x8c>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d001      	beq.n	8011fb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011fae:	2301      	movs	r3, #1
 8011fb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011fb2:	697b      	ldr	r3, [r7, #20]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d10a      	bne.n	8011fce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fbc:	f383 8811 	msr	BASEPRI, r3
 8011fc0:	f3bf 8f6f 	isb	sy
 8011fc4:	f3bf 8f4f 	dsb	sy
 8011fc8:	613b      	str	r3, [r7, #16]
}
 8011fca:	bf00      	nop
 8011fcc:	e7fe      	b.n	8011fcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011fce:	697b      	ldr	r3, [r7, #20]
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3718      	adds	r7, #24
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}
 8011fd8:	24001268 	.word	0x24001268
 8011fdc:	0801423c 	.word	0x0801423c
 8011fe0:	0801211d 	.word	0x0801211d
 8011fe4:	2400126c 	.word	0x2400126c

08011fe8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b08a      	sub	sp, #40	; 0x28
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	607a      	str	r2, [r7, #4]
 8011ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d10a      	bne.n	8012016 <xTimerGenericCommand+0x2e>
	__asm volatile
 8012000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012004:	f383 8811 	msr	BASEPRI, r3
 8012008:	f3bf 8f6f 	isb	sy
 801200c:	f3bf 8f4f 	dsb	sy
 8012010:	623b      	str	r3, [r7, #32]
}
 8012012:	bf00      	nop
 8012014:	e7fe      	b.n	8012014 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012016:	4b1a      	ldr	r3, [pc, #104]	; (8012080 <xTimerGenericCommand+0x98>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d02a      	beq.n	8012074 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	2b05      	cmp	r3, #5
 801202e:	dc18      	bgt.n	8012062 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012030:	f7ff fe9a 	bl	8011d68 <xTaskGetSchedulerState>
 8012034:	4603      	mov	r3, r0
 8012036:	2b02      	cmp	r3, #2
 8012038:	d109      	bne.n	801204e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801203a:	4b11      	ldr	r3, [pc, #68]	; (8012080 <xTimerGenericCommand+0x98>)
 801203c:	6818      	ldr	r0, [r3, #0]
 801203e:	f107 0110 	add.w	r1, r7, #16
 8012042:	2300      	movs	r3, #0
 8012044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012046:	f7fe fb6b 	bl	8010720 <xQueueGenericSend>
 801204a:	6278      	str	r0, [r7, #36]	; 0x24
 801204c:	e012      	b.n	8012074 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801204e:	4b0c      	ldr	r3, [pc, #48]	; (8012080 <xTimerGenericCommand+0x98>)
 8012050:	6818      	ldr	r0, [r3, #0]
 8012052:	f107 0110 	add.w	r1, r7, #16
 8012056:	2300      	movs	r3, #0
 8012058:	2200      	movs	r2, #0
 801205a:	f7fe fb61 	bl	8010720 <xQueueGenericSend>
 801205e:	6278      	str	r0, [r7, #36]	; 0x24
 8012060:	e008      	b.n	8012074 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012062:	4b07      	ldr	r3, [pc, #28]	; (8012080 <xTimerGenericCommand+0x98>)
 8012064:	6818      	ldr	r0, [r3, #0]
 8012066:	f107 0110 	add.w	r1, r7, #16
 801206a:	2300      	movs	r3, #0
 801206c:	683a      	ldr	r2, [r7, #0]
 801206e:	f7fe fc55 	bl	801091c <xQueueGenericSendFromISR>
 8012072:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012076:	4618      	mov	r0, r3
 8012078:	3728      	adds	r7, #40	; 0x28
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	24001268 	.word	0x24001268

08012084 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b088      	sub	sp, #32
 8012088:	af02      	add	r7, sp, #8
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801208e:	4b22      	ldr	r3, [pc, #136]	; (8012118 <prvProcessExpiredTimer+0x94>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	68db      	ldr	r3, [r3, #12]
 8012094:	68db      	ldr	r3, [r3, #12]
 8012096:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	3304      	adds	r3, #4
 801209c:	4618      	mov	r0, r3
 801209e:	f7fe f9d7 	bl	8010450 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120a8:	f003 0304 	and.w	r3, r3, #4
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d022      	beq.n	80120f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	699a      	ldr	r2, [r3, #24]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	18d1      	adds	r1, r2, r3
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	683a      	ldr	r2, [r7, #0]
 80120bc:	6978      	ldr	r0, [r7, #20]
 80120be:	f000 f8d1 	bl	8012264 <prvInsertTimerInActiveList>
 80120c2:	4603      	mov	r3, r0
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d01f      	beq.n	8012108 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80120c8:	2300      	movs	r3, #0
 80120ca:	9300      	str	r3, [sp, #0]
 80120cc:	2300      	movs	r3, #0
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	2100      	movs	r1, #0
 80120d2:	6978      	ldr	r0, [r7, #20]
 80120d4:	f7ff ff88 	bl	8011fe8 <xTimerGenericCommand>
 80120d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d113      	bne.n	8012108 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80120e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e4:	f383 8811 	msr	BASEPRI, r3
 80120e8:	f3bf 8f6f 	isb	sy
 80120ec:	f3bf 8f4f 	dsb	sy
 80120f0:	60fb      	str	r3, [r7, #12]
}
 80120f2:	bf00      	nop
 80120f4:	e7fe      	b.n	80120f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120fc:	f023 0301 	bic.w	r3, r3, #1
 8012100:	b2da      	uxtb	r2, r3
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	6a1b      	ldr	r3, [r3, #32]
 801210c:	6978      	ldr	r0, [r7, #20]
 801210e:	4798      	blx	r3
}
 8012110:	bf00      	nop
 8012112:	3718      	adds	r7, #24
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}
 8012118:	24001260 	.word	0x24001260

0801211c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b084      	sub	sp, #16
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012124:	f107 0308 	add.w	r3, r7, #8
 8012128:	4618      	mov	r0, r3
 801212a:	f000 f857 	bl	80121dc <prvGetNextExpireTime>
 801212e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	4619      	mov	r1, r3
 8012134:	68f8      	ldr	r0, [r7, #12]
 8012136:	f000 f803 	bl	8012140 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801213a:	f000 f8d5 	bl	80122e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801213e:	e7f1      	b.n	8012124 <prvTimerTask+0x8>

08012140 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b084      	sub	sp, #16
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801214a:	f7ff f98d 	bl	8011468 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801214e:	f107 0308 	add.w	r3, r7, #8
 8012152:	4618      	mov	r0, r3
 8012154:	f000 f866 	bl	8012224 <prvSampleTimeNow>
 8012158:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d130      	bne.n	80121c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d10a      	bne.n	801217c <prvProcessTimerOrBlockTask+0x3c>
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	429a      	cmp	r2, r3
 801216c:	d806      	bhi.n	801217c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801216e:	f7ff f989 	bl	8011484 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012172:	68f9      	ldr	r1, [r7, #12]
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f7ff ff85 	bl	8012084 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801217a:	e024      	b.n	80121c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d008      	beq.n	8012194 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012182:	4b13      	ldr	r3, [pc, #76]	; (80121d0 <prvProcessTimerOrBlockTask+0x90>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d101      	bne.n	8012190 <prvProcessTimerOrBlockTask+0x50>
 801218c:	2301      	movs	r3, #1
 801218e:	e000      	b.n	8012192 <prvProcessTimerOrBlockTask+0x52>
 8012190:	2300      	movs	r3, #0
 8012192:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012194:	4b0f      	ldr	r3, [pc, #60]	; (80121d4 <prvProcessTimerOrBlockTask+0x94>)
 8012196:	6818      	ldr	r0, [r3, #0]
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	1ad3      	subs	r3, r2, r3
 801219e:	683a      	ldr	r2, [r7, #0]
 80121a0:	4619      	mov	r1, r3
 80121a2:	f7fe fef1 	bl	8010f88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80121a6:	f7ff f96d 	bl	8011484 <xTaskResumeAll>
 80121aa:	4603      	mov	r3, r0
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d10a      	bne.n	80121c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80121b0:	4b09      	ldr	r3, [pc, #36]	; (80121d8 <prvProcessTimerOrBlockTask+0x98>)
 80121b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121b6:	601a      	str	r2, [r3, #0]
 80121b8:	f3bf 8f4f 	dsb	sy
 80121bc:	f3bf 8f6f 	isb	sy
}
 80121c0:	e001      	b.n	80121c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80121c2:	f7ff f95f 	bl	8011484 <xTaskResumeAll>
}
 80121c6:	bf00      	nop
 80121c8:	3710      	adds	r7, #16
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	24001264 	.word	0x24001264
 80121d4:	24001268 	.word	0x24001268
 80121d8:	e000ed04 	.word	0xe000ed04

080121dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80121dc:	b480      	push	{r7}
 80121de:	b085      	sub	sp, #20
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80121e4:	4b0e      	ldr	r3, [pc, #56]	; (8012220 <prvGetNextExpireTime+0x44>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d101      	bne.n	80121f2 <prvGetNextExpireTime+0x16>
 80121ee:	2201      	movs	r2, #1
 80121f0:	e000      	b.n	80121f4 <prvGetNextExpireTime+0x18>
 80121f2:	2200      	movs	r2, #0
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d105      	bne.n	801220c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012200:	4b07      	ldr	r3, [pc, #28]	; (8012220 <prvGetNextExpireTime+0x44>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	68db      	ldr	r3, [r3, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	60fb      	str	r3, [r7, #12]
 801220a:	e001      	b.n	8012210 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801220c:	2300      	movs	r3, #0
 801220e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012210:	68fb      	ldr	r3, [r7, #12]
}
 8012212:	4618      	mov	r0, r3
 8012214:	3714      	adds	r7, #20
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	24001260 	.word	0x24001260

08012224 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801222c:	f7ff f9c8 	bl	80115c0 <xTaskGetTickCount>
 8012230:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012232:	4b0b      	ldr	r3, [pc, #44]	; (8012260 <prvSampleTimeNow+0x3c>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	68fa      	ldr	r2, [r7, #12]
 8012238:	429a      	cmp	r2, r3
 801223a:	d205      	bcs.n	8012248 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801223c:	f000 f936 	bl	80124ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2201      	movs	r2, #1
 8012244:	601a      	str	r2, [r3, #0]
 8012246:	e002      	b.n	801224e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2200      	movs	r2, #0
 801224c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801224e:	4a04      	ldr	r2, [pc, #16]	; (8012260 <prvSampleTimeNow+0x3c>)
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012254:	68fb      	ldr	r3, [r7, #12]
}
 8012256:	4618      	mov	r0, r3
 8012258:	3710      	adds	r7, #16
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop
 8012260:	24001270 	.word	0x24001270

08012264 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b086      	sub	sp, #24
 8012268:	af00      	add	r7, sp, #0
 801226a:	60f8      	str	r0, [r7, #12]
 801226c:	60b9      	str	r1, [r7, #8]
 801226e:	607a      	str	r2, [r7, #4]
 8012270:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012272:	2300      	movs	r3, #0
 8012274:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	68ba      	ldr	r2, [r7, #8]
 801227a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	68fa      	ldr	r2, [r7, #12]
 8012280:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012282:	68ba      	ldr	r2, [r7, #8]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	429a      	cmp	r2, r3
 8012288:	d812      	bhi.n	80122b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801228a:	687a      	ldr	r2, [r7, #4]
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	1ad2      	subs	r2, r2, r3
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	699b      	ldr	r3, [r3, #24]
 8012294:	429a      	cmp	r2, r3
 8012296:	d302      	bcc.n	801229e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012298:	2301      	movs	r3, #1
 801229a:	617b      	str	r3, [r7, #20]
 801229c:	e01b      	b.n	80122d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801229e:	4b10      	ldr	r3, [pc, #64]	; (80122e0 <prvInsertTimerInActiveList+0x7c>)
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	3304      	adds	r3, #4
 80122a6:	4619      	mov	r1, r3
 80122a8:	4610      	mov	r0, r2
 80122aa:	f7fe f898 	bl	80103de <vListInsert>
 80122ae:	e012      	b.n	80122d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80122b0:	687a      	ldr	r2, [r7, #4]
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d206      	bcs.n	80122c6 <prvInsertTimerInActiveList+0x62>
 80122b8:	68ba      	ldr	r2, [r7, #8]
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d302      	bcc.n	80122c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80122c0:	2301      	movs	r3, #1
 80122c2:	617b      	str	r3, [r7, #20]
 80122c4:	e007      	b.n	80122d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80122c6:	4b07      	ldr	r3, [pc, #28]	; (80122e4 <prvInsertTimerInActiveList+0x80>)
 80122c8:	681a      	ldr	r2, [r3, #0]
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	3304      	adds	r3, #4
 80122ce:	4619      	mov	r1, r3
 80122d0:	4610      	mov	r0, r2
 80122d2:	f7fe f884 	bl	80103de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80122d6:	697b      	ldr	r3, [r7, #20]
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3718      	adds	r7, #24
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}
 80122e0:	24001264 	.word	0x24001264
 80122e4:	24001260 	.word	0x24001260

080122e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b08e      	sub	sp, #56	; 0x38
 80122ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80122ee:	e0ca      	b.n	8012486 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	da18      	bge.n	8012328 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80122f6:	1d3b      	adds	r3, r7, #4
 80122f8:	3304      	adds	r3, #4
 80122fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80122fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d10a      	bne.n	8012318 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012306:	f383 8811 	msr	BASEPRI, r3
 801230a:	f3bf 8f6f 	isb	sy
 801230e:	f3bf 8f4f 	dsb	sy
 8012312:	61fb      	str	r3, [r7, #28]
}
 8012314:	bf00      	nop
 8012316:	e7fe      	b.n	8012316 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801231e:	6850      	ldr	r0, [r2, #4]
 8012320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012322:	6892      	ldr	r2, [r2, #8]
 8012324:	4611      	mov	r1, r2
 8012326:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	f2c0 80aa 	blt.w	8012484 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012336:	695b      	ldr	r3, [r3, #20]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d004      	beq.n	8012346 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801233e:	3304      	adds	r3, #4
 8012340:	4618      	mov	r0, r3
 8012342:	f7fe f885 	bl	8010450 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012346:	463b      	mov	r3, r7
 8012348:	4618      	mov	r0, r3
 801234a:	f7ff ff6b 	bl	8012224 <prvSampleTimeNow>
 801234e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2b09      	cmp	r3, #9
 8012354:	f200 8097 	bhi.w	8012486 <prvProcessReceivedCommands+0x19e>
 8012358:	a201      	add	r2, pc, #4	; (adr r2, 8012360 <prvProcessReceivedCommands+0x78>)
 801235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801235e:	bf00      	nop
 8012360:	08012389 	.word	0x08012389
 8012364:	08012389 	.word	0x08012389
 8012368:	08012389 	.word	0x08012389
 801236c:	080123fd 	.word	0x080123fd
 8012370:	08012411 	.word	0x08012411
 8012374:	0801245b 	.word	0x0801245b
 8012378:	08012389 	.word	0x08012389
 801237c:	08012389 	.word	0x08012389
 8012380:	080123fd 	.word	0x080123fd
 8012384:	08012411 	.word	0x08012411
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801238a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801238e:	f043 0301 	orr.w	r3, r3, #1
 8012392:	b2da      	uxtb	r2, r3
 8012394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801239a:	68ba      	ldr	r2, [r7, #8]
 801239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239e:	699b      	ldr	r3, [r3, #24]
 80123a0:	18d1      	adds	r1, r2, r3
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123a8:	f7ff ff5c 	bl	8012264 <prvInsertTimerInActiveList>
 80123ac:	4603      	mov	r3, r0
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d069      	beq.n	8012486 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80123b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b4:	6a1b      	ldr	r3, [r3, #32]
 80123b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123c0:	f003 0304 	and.w	r3, r3, #4
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d05e      	beq.n	8012486 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80123c8:	68ba      	ldr	r2, [r7, #8]
 80123ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123cc:	699b      	ldr	r3, [r3, #24]
 80123ce:	441a      	add	r2, r3
 80123d0:	2300      	movs	r3, #0
 80123d2:	9300      	str	r3, [sp, #0]
 80123d4:	2300      	movs	r3, #0
 80123d6:	2100      	movs	r1, #0
 80123d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123da:	f7ff fe05 	bl	8011fe8 <xTimerGenericCommand>
 80123de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80123e0:	6a3b      	ldr	r3, [r7, #32]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d14f      	bne.n	8012486 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80123e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ea:	f383 8811 	msr	BASEPRI, r3
 80123ee:	f3bf 8f6f 	isb	sy
 80123f2:	f3bf 8f4f 	dsb	sy
 80123f6:	61bb      	str	r3, [r7, #24]
}
 80123f8:	bf00      	nop
 80123fa:	e7fe      	b.n	80123fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80123fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012402:	f023 0301 	bic.w	r3, r3, #1
 8012406:	b2da      	uxtb	r2, r3
 8012408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801240e:	e03a      	b.n	8012486 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012416:	f043 0301 	orr.w	r3, r3, #1
 801241a:	b2da      	uxtb	r2, r3
 801241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012422:	68ba      	ldr	r2, [r7, #8]
 8012424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012426:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242a:	699b      	ldr	r3, [r3, #24]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d10a      	bne.n	8012446 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012434:	f383 8811 	msr	BASEPRI, r3
 8012438:	f3bf 8f6f 	isb	sy
 801243c:	f3bf 8f4f 	dsb	sy
 8012440:	617b      	str	r3, [r7, #20]
}
 8012442:	bf00      	nop
 8012444:	e7fe      	b.n	8012444 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012448:	699a      	ldr	r2, [r3, #24]
 801244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244c:	18d1      	adds	r1, r2, r3
 801244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012454:	f7ff ff06 	bl	8012264 <prvInsertTimerInActiveList>
					break;
 8012458:	e015      	b.n	8012486 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801245c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012460:	f003 0302 	and.w	r3, r3, #2
 8012464:	2b00      	cmp	r3, #0
 8012466:	d103      	bne.n	8012470 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801246a:	f000 fc01 	bl	8012c70 <vPortFree>
 801246e:	e00a      	b.n	8012486 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012476:	f023 0301 	bic.w	r3, r3, #1
 801247a:	b2da      	uxtb	r2, r3
 801247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012482:	e000      	b.n	8012486 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012484:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012486:	4b08      	ldr	r3, [pc, #32]	; (80124a8 <prvProcessReceivedCommands+0x1c0>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	1d39      	adds	r1, r7, #4
 801248c:	2200      	movs	r2, #0
 801248e:	4618      	mov	r0, r3
 8012490:	f7fe fae0 	bl	8010a54 <xQueueReceive>
 8012494:	4603      	mov	r3, r0
 8012496:	2b00      	cmp	r3, #0
 8012498:	f47f af2a 	bne.w	80122f0 <prvProcessReceivedCommands+0x8>
	}
}
 801249c:	bf00      	nop
 801249e:	bf00      	nop
 80124a0:	3730      	adds	r7, #48	; 0x30
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	24001268 	.word	0x24001268

080124ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b088      	sub	sp, #32
 80124b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80124b2:	e048      	b.n	8012546 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80124b4:	4b2d      	ldr	r3, [pc, #180]	; (801256c <prvSwitchTimerLists+0xc0>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	68db      	ldr	r3, [r3, #12]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124be:	4b2b      	ldr	r3, [pc, #172]	; (801256c <prvSwitchTimerLists+0xc0>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	68db      	ldr	r3, [r3, #12]
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	3304      	adds	r3, #4
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fd ffbf 	bl	8010450 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	6a1b      	ldr	r3, [r3, #32]
 80124d6:	68f8      	ldr	r0, [r7, #12]
 80124d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124e0:	f003 0304 	and.w	r3, r3, #4
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d02e      	beq.n	8012546 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	699b      	ldr	r3, [r3, #24]
 80124ec:	693a      	ldr	r2, [r7, #16]
 80124ee:	4413      	add	r3, r2
 80124f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80124f2:	68ba      	ldr	r2, [r7, #8]
 80124f4:	693b      	ldr	r3, [r7, #16]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d90e      	bls.n	8012518 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	68ba      	ldr	r2, [r7, #8]
 80124fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	68fa      	ldr	r2, [r7, #12]
 8012504:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012506:	4b19      	ldr	r3, [pc, #100]	; (801256c <prvSwitchTimerLists+0xc0>)
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	3304      	adds	r3, #4
 801250e:	4619      	mov	r1, r3
 8012510:	4610      	mov	r0, r2
 8012512:	f7fd ff64 	bl	80103de <vListInsert>
 8012516:	e016      	b.n	8012546 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012518:	2300      	movs	r3, #0
 801251a:	9300      	str	r3, [sp, #0]
 801251c:	2300      	movs	r3, #0
 801251e:	693a      	ldr	r2, [r7, #16]
 8012520:	2100      	movs	r1, #0
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	f7ff fd60 	bl	8011fe8 <xTimerGenericCommand>
 8012528:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d10a      	bne.n	8012546 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012534:	f383 8811 	msr	BASEPRI, r3
 8012538:	f3bf 8f6f 	isb	sy
 801253c:	f3bf 8f4f 	dsb	sy
 8012540:	603b      	str	r3, [r7, #0]
}
 8012542:	bf00      	nop
 8012544:	e7fe      	b.n	8012544 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012546:	4b09      	ldr	r3, [pc, #36]	; (801256c <prvSwitchTimerLists+0xc0>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d1b1      	bne.n	80124b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012550:	4b06      	ldr	r3, [pc, #24]	; (801256c <prvSwitchTimerLists+0xc0>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012556:	4b06      	ldr	r3, [pc, #24]	; (8012570 <prvSwitchTimerLists+0xc4>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	4a04      	ldr	r2, [pc, #16]	; (801256c <prvSwitchTimerLists+0xc0>)
 801255c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801255e:	4a04      	ldr	r2, [pc, #16]	; (8012570 <prvSwitchTimerLists+0xc4>)
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	6013      	str	r3, [r2, #0]
}
 8012564:	bf00      	nop
 8012566:	3718      	adds	r7, #24
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	24001260 	.word	0x24001260
 8012570:	24001264 	.word	0x24001264

08012574 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801257a:	f000 f98b 	bl	8012894 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801257e:	4b15      	ldr	r3, [pc, #84]	; (80125d4 <prvCheckForValidListAndQueue+0x60>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d120      	bne.n	80125c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012586:	4814      	ldr	r0, [pc, #80]	; (80125d8 <prvCheckForValidListAndQueue+0x64>)
 8012588:	f7fd fed8 	bl	801033c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801258c:	4813      	ldr	r0, [pc, #76]	; (80125dc <prvCheckForValidListAndQueue+0x68>)
 801258e:	f7fd fed5 	bl	801033c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012592:	4b13      	ldr	r3, [pc, #76]	; (80125e0 <prvCheckForValidListAndQueue+0x6c>)
 8012594:	4a10      	ldr	r2, [pc, #64]	; (80125d8 <prvCheckForValidListAndQueue+0x64>)
 8012596:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012598:	4b12      	ldr	r3, [pc, #72]	; (80125e4 <prvCheckForValidListAndQueue+0x70>)
 801259a:	4a10      	ldr	r2, [pc, #64]	; (80125dc <prvCheckForValidListAndQueue+0x68>)
 801259c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801259e:	2300      	movs	r3, #0
 80125a0:	9300      	str	r3, [sp, #0]
 80125a2:	4b11      	ldr	r3, [pc, #68]	; (80125e8 <prvCheckForValidListAndQueue+0x74>)
 80125a4:	4a11      	ldr	r2, [pc, #68]	; (80125ec <prvCheckForValidListAndQueue+0x78>)
 80125a6:	2110      	movs	r1, #16
 80125a8:	200a      	movs	r0, #10
 80125aa:	f7fd ffe3 	bl	8010574 <xQueueGenericCreateStatic>
 80125ae:	4603      	mov	r3, r0
 80125b0:	4a08      	ldr	r2, [pc, #32]	; (80125d4 <prvCheckForValidListAndQueue+0x60>)
 80125b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80125b4:	4b07      	ldr	r3, [pc, #28]	; (80125d4 <prvCheckForValidListAndQueue+0x60>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d005      	beq.n	80125c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80125bc:	4b05      	ldr	r3, [pc, #20]	; (80125d4 <prvCheckForValidListAndQueue+0x60>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	490b      	ldr	r1, [pc, #44]	; (80125f0 <prvCheckForValidListAndQueue+0x7c>)
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7fe fcb6 	bl	8010f34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80125c8:	f000 f994 	bl	80128f4 <vPortExitCritical>
}
 80125cc:	bf00      	nop
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	24001268 	.word	0x24001268
 80125d8:	24001238 	.word	0x24001238
 80125dc:	2400124c 	.word	0x2400124c
 80125e0:	24001260 	.word	0x24001260
 80125e4:	24001264 	.word	0x24001264
 80125e8:	24001314 	.word	0x24001314
 80125ec:	24001274 	.word	0x24001274
 80125f0:	08014244 	.word	0x08014244

080125f4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b08a      	sub	sp, #40	; 0x28
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	607a      	str	r2, [r7, #4]
 8012600:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8012602:	f06f 0301 	mvn.w	r3, #1
 8012606:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012614:	4b06      	ldr	r3, [pc, #24]	; (8012630 <xTimerPendFunctionCallFromISR+0x3c>)
 8012616:	6818      	ldr	r0, [r3, #0]
 8012618:	f107 0114 	add.w	r1, r7, #20
 801261c:	2300      	movs	r3, #0
 801261e:	683a      	ldr	r2, [r7, #0]
 8012620:	f7fe f97c 	bl	801091c <xQueueGenericSendFromISR>
 8012624:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8012626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012628:	4618      	mov	r0, r3
 801262a:	3728      	adds	r7, #40	; 0x28
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}
 8012630:	24001268 	.word	0x24001268

08012634 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012634:	b480      	push	{r7}
 8012636:	b085      	sub	sp, #20
 8012638:	af00      	add	r7, sp, #0
 801263a:	60f8      	str	r0, [r7, #12]
 801263c:	60b9      	str	r1, [r7, #8]
 801263e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	3b04      	subs	r3, #4
 8012644:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801264c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	3b04      	subs	r3, #4
 8012652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	f023 0201 	bic.w	r2, r3, #1
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3b04      	subs	r3, #4
 8012662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012664:	4a0c      	ldr	r2, [pc, #48]	; (8012698 <pxPortInitialiseStack+0x64>)
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	3b14      	subs	r3, #20
 801266e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012670:	687a      	ldr	r2, [r7, #4]
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	3b04      	subs	r3, #4
 801267a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	f06f 0202 	mvn.w	r2, #2
 8012682:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	3b20      	subs	r3, #32
 8012688:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801268a:	68fb      	ldr	r3, [r7, #12]
}
 801268c:	4618      	mov	r0, r3
 801268e:	3714      	adds	r7, #20
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr
 8012698:	0801269d 	.word	0x0801269d

0801269c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801269c:	b480      	push	{r7}
 801269e:	b085      	sub	sp, #20
 80126a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80126a2:	2300      	movs	r3, #0
 80126a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80126a6:	4b12      	ldr	r3, [pc, #72]	; (80126f0 <prvTaskExitError+0x54>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126ae:	d00a      	beq.n	80126c6 <prvTaskExitError+0x2a>
	__asm volatile
 80126b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	60fb      	str	r3, [r7, #12]
}
 80126c2:	bf00      	nop
 80126c4:	e7fe      	b.n	80126c4 <prvTaskExitError+0x28>
	__asm volatile
 80126c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ca:	f383 8811 	msr	BASEPRI, r3
 80126ce:	f3bf 8f6f 	isb	sy
 80126d2:	f3bf 8f4f 	dsb	sy
 80126d6:	60bb      	str	r3, [r7, #8]
}
 80126d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80126da:	bf00      	nop
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d0fc      	beq.n	80126dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80126e2:	bf00      	nop
 80126e4:	bf00      	nop
 80126e6:	3714      	adds	r7, #20
 80126e8:	46bd      	mov	sp, r7
 80126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ee:	4770      	bx	lr
 80126f0:	24000010 	.word	0x24000010
	...

08012700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012700:	4b07      	ldr	r3, [pc, #28]	; (8012720 <pxCurrentTCBConst2>)
 8012702:	6819      	ldr	r1, [r3, #0]
 8012704:	6808      	ldr	r0, [r1, #0]
 8012706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270a:	f380 8809 	msr	PSP, r0
 801270e:	f3bf 8f6f 	isb	sy
 8012712:	f04f 0000 	mov.w	r0, #0
 8012716:	f380 8811 	msr	BASEPRI, r0
 801271a:	4770      	bx	lr
 801271c:	f3af 8000 	nop.w

08012720 <pxCurrentTCBConst2>:
 8012720:	24000d38 	.word	0x24000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012724:	bf00      	nop
 8012726:	bf00      	nop

08012728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012728:	4808      	ldr	r0, [pc, #32]	; (801274c <prvPortStartFirstTask+0x24>)
 801272a:	6800      	ldr	r0, [r0, #0]
 801272c:	6800      	ldr	r0, [r0, #0]
 801272e:	f380 8808 	msr	MSP, r0
 8012732:	f04f 0000 	mov.w	r0, #0
 8012736:	f380 8814 	msr	CONTROL, r0
 801273a:	b662      	cpsie	i
 801273c:	b661      	cpsie	f
 801273e:	f3bf 8f4f 	dsb	sy
 8012742:	f3bf 8f6f 	isb	sy
 8012746:	df00      	svc	0
 8012748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801274a:	bf00      	nop
 801274c:	e000ed08 	.word	0xe000ed08

08012750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b086      	sub	sp, #24
 8012754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012756:	4b46      	ldr	r3, [pc, #280]	; (8012870 <xPortStartScheduler+0x120>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	4a46      	ldr	r2, [pc, #280]	; (8012874 <xPortStartScheduler+0x124>)
 801275c:	4293      	cmp	r3, r2
 801275e:	d10a      	bne.n	8012776 <xPortStartScheduler+0x26>
	__asm volatile
 8012760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012764:	f383 8811 	msr	BASEPRI, r3
 8012768:	f3bf 8f6f 	isb	sy
 801276c:	f3bf 8f4f 	dsb	sy
 8012770:	613b      	str	r3, [r7, #16]
}
 8012772:	bf00      	nop
 8012774:	e7fe      	b.n	8012774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012776:	4b3e      	ldr	r3, [pc, #248]	; (8012870 <xPortStartScheduler+0x120>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	4a3f      	ldr	r2, [pc, #252]	; (8012878 <xPortStartScheduler+0x128>)
 801277c:	4293      	cmp	r3, r2
 801277e:	d10a      	bne.n	8012796 <xPortStartScheduler+0x46>
	__asm volatile
 8012780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012784:	f383 8811 	msr	BASEPRI, r3
 8012788:	f3bf 8f6f 	isb	sy
 801278c:	f3bf 8f4f 	dsb	sy
 8012790:	60fb      	str	r3, [r7, #12]
}
 8012792:	bf00      	nop
 8012794:	e7fe      	b.n	8012794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012796:	4b39      	ldr	r3, [pc, #228]	; (801287c <xPortStartScheduler+0x12c>)
 8012798:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	b2db      	uxtb	r3, r3
 80127a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	22ff      	movs	r2, #255	; 0xff
 80127a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	b2db      	uxtb	r3, r3
 80127ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80127b0:	78fb      	ldrb	r3, [r7, #3]
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80127b8:	b2da      	uxtb	r2, r3
 80127ba:	4b31      	ldr	r3, [pc, #196]	; (8012880 <xPortStartScheduler+0x130>)
 80127bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80127be:	4b31      	ldr	r3, [pc, #196]	; (8012884 <xPortStartScheduler+0x134>)
 80127c0:	2207      	movs	r2, #7
 80127c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127c4:	e009      	b.n	80127da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80127c6:	4b2f      	ldr	r3, [pc, #188]	; (8012884 <xPortStartScheduler+0x134>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	3b01      	subs	r3, #1
 80127cc:	4a2d      	ldr	r2, [pc, #180]	; (8012884 <xPortStartScheduler+0x134>)
 80127ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80127d0:	78fb      	ldrb	r3, [r7, #3]
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	005b      	lsls	r3, r3, #1
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127da:	78fb      	ldrb	r3, [r7, #3]
 80127dc:	b2db      	uxtb	r3, r3
 80127de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127e2:	2b80      	cmp	r3, #128	; 0x80
 80127e4:	d0ef      	beq.n	80127c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80127e6:	4b27      	ldr	r3, [pc, #156]	; (8012884 <xPortStartScheduler+0x134>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	f1c3 0307 	rsb	r3, r3, #7
 80127ee:	2b04      	cmp	r3, #4
 80127f0:	d00a      	beq.n	8012808 <xPortStartScheduler+0xb8>
	__asm volatile
 80127f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f6:	f383 8811 	msr	BASEPRI, r3
 80127fa:	f3bf 8f6f 	isb	sy
 80127fe:	f3bf 8f4f 	dsb	sy
 8012802:	60bb      	str	r3, [r7, #8]
}
 8012804:	bf00      	nop
 8012806:	e7fe      	b.n	8012806 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012808:	4b1e      	ldr	r3, [pc, #120]	; (8012884 <xPortStartScheduler+0x134>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	021b      	lsls	r3, r3, #8
 801280e:	4a1d      	ldr	r2, [pc, #116]	; (8012884 <xPortStartScheduler+0x134>)
 8012810:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012812:	4b1c      	ldr	r3, [pc, #112]	; (8012884 <xPortStartScheduler+0x134>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801281a:	4a1a      	ldr	r2, [pc, #104]	; (8012884 <xPortStartScheduler+0x134>)
 801281c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	b2da      	uxtb	r2, r3
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012826:	4b18      	ldr	r3, [pc, #96]	; (8012888 <xPortStartScheduler+0x138>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	4a17      	ldr	r2, [pc, #92]	; (8012888 <xPortStartScheduler+0x138>)
 801282c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012832:	4b15      	ldr	r3, [pc, #84]	; (8012888 <xPortStartScheduler+0x138>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4a14      	ldr	r2, [pc, #80]	; (8012888 <xPortStartScheduler+0x138>)
 8012838:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801283c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801283e:	f000 f8dd 	bl	80129fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012842:	4b12      	ldr	r3, [pc, #72]	; (801288c <xPortStartScheduler+0x13c>)
 8012844:	2200      	movs	r2, #0
 8012846:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012848:	f000 f8fc 	bl	8012a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801284c:	4b10      	ldr	r3, [pc, #64]	; (8012890 <xPortStartScheduler+0x140>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	4a0f      	ldr	r2, [pc, #60]	; (8012890 <xPortStartScheduler+0x140>)
 8012852:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012856:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012858:	f7ff ff66 	bl	8012728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801285c:	f7fe ff7a 	bl	8011754 <vTaskSwitchContext>
	prvTaskExitError();
 8012860:	f7ff ff1c 	bl	801269c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012864:	2300      	movs	r3, #0
}
 8012866:	4618      	mov	r0, r3
 8012868:	3718      	adds	r7, #24
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	e000ed00 	.word	0xe000ed00
 8012874:	410fc271 	.word	0x410fc271
 8012878:	410fc270 	.word	0x410fc270
 801287c:	e000e400 	.word	0xe000e400
 8012880:	24001364 	.word	0x24001364
 8012884:	24001368 	.word	0x24001368
 8012888:	e000ed20 	.word	0xe000ed20
 801288c:	24000010 	.word	0x24000010
 8012890:	e000ef34 	.word	0xe000ef34

08012894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012894:	b480      	push	{r7}
 8012896:	b083      	sub	sp, #12
 8012898:	af00      	add	r7, sp, #0
	__asm volatile
 801289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801289e:	f383 8811 	msr	BASEPRI, r3
 80128a2:	f3bf 8f6f 	isb	sy
 80128a6:	f3bf 8f4f 	dsb	sy
 80128aa:	607b      	str	r3, [r7, #4]
}
 80128ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80128ae:	4b0f      	ldr	r3, [pc, #60]	; (80128ec <vPortEnterCritical+0x58>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	3301      	adds	r3, #1
 80128b4:	4a0d      	ldr	r2, [pc, #52]	; (80128ec <vPortEnterCritical+0x58>)
 80128b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80128b8:	4b0c      	ldr	r3, [pc, #48]	; (80128ec <vPortEnterCritical+0x58>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	2b01      	cmp	r3, #1
 80128be:	d10f      	bne.n	80128e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80128c0:	4b0b      	ldr	r3, [pc, #44]	; (80128f0 <vPortEnterCritical+0x5c>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	b2db      	uxtb	r3, r3
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d00a      	beq.n	80128e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80128ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ce:	f383 8811 	msr	BASEPRI, r3
 80128d2:	f3bf 8f6f 	isb	sy
 80128d6:	f3bf 8f4f 	dsb	sy
 80128da:	603b      	str	r3, [r7, #0]
}
 80128dc:	bf00      	nop
 80128de:	e7fe      	b.n	80128de <vPortEnterCritical+0x4a>
	}
}
 80128e0:	bf00      	nop
 80128e2:	370c      	adds	r7, #12
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr
 80128ec:	24000010 	.word	0x24000010
 80128f0:	e000ed04 	.word	0xe000ed04

080128f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80128fa:	4b12      	ldr	r3, [pc, #72]	; (8012944 <vPortExitCritical+0x50>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d10a      	bne.n	8012918 <vPortExitCritical+0x24>
	__asm volatile
 8012902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012906:	f383 8811 	msr	BASEPRI, r3
 801290a:	f3bf 8f6f 	isb	sy
 801290e:	f3bf 8f4f 	dsb	sy
 8012912:	607b      	str	r3, [r7, #4]
}
 8012914:	bf00      	nop
 8012916:	e7fe      	b.n	8012916 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012918:	4b0a      	ldr	r3, [pc, #40]	; (8012944 <vPortExitCritical+0x50>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	3b01      	subs	r3, #1
 801291e:	4a09      	ldr	r2, [pc, #36]	; (8012944 <vPortExitCritical+0x50>)
 8012920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012922:	4b08      	ldr	r3, [pc, #32]	; (8012944 <vPortExitCritical+0x50>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d105      	bne.n	8012936 <vPortExitCritical+0x42>
 801292a:	2300      	movs	r3, #0
 801292c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	f383 8811 	msr	BASEPRI, r3
}
 8012934:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012936:	bf00      	nop
 8012938:	370c      	adds	r7, #12
 801293a:	46bd      	mov	sp, r7
 801293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012940:	4770      	bx	lr
 8012942:	bf00      	nop
 8012944:	24000010 	.word	0x24000010
	...

08012950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012950:	f3ef 8009 	mrs	r0, PSP
 8012954:	f3bf 8f6f 	isb	sy
 8012958:	4b15      	ldr	r3, [pc, #84]	; (80129b0 <pxCurrentTCBConst>)
 801295a:	681a      	ldr	r2, [r3, #0]
 801295c:	f01e 0f10 	tst.w	lr, #16
 8012960:	bf08      	it	eq
 8012962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801296a:	6010      	str	r0, [r2, #0]
 801296c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012974:	f380 8811 	msr	BASEPRI, r0
 8012978:	f3bf 8f4f 	dsb	sy
 801297c:	f3bf 8f6f 	isb	sy
 8012980:	f7fe fee8 	bl	8011754 <vTaskSwitchContext>
 8012984:	f04f 0000 	mov.w	r0, #0
 8012988:	f380 8811 	msr	BASEPRI, r0
 801298c:	bc09      	pop	{r0, r3}
 801298e:	6819      	ldr	r1, [r3, #0]
 8012990:	6808      	ldr	r0, [r1, #0]
 8012992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012996:	f01e 0f10 	tst.w	lr, #16
 801299a:	bf08      	it	eq
 801299c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80129a0:	f380 8809 	msr	PSP, r0
 80129a4:	f3bf 8f6f 	isb	sy
 80129a8:	4770      	bx	lr
 80129aa:	bf00      	nop
 80129ac:	f3af 8000 	nop.w

080129b0 <pxCurrentTCBConst>:
 80129b0:	24000d38 	.word	0x24000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80129b4:	bf00      	nop
 80129b6:	bf00      	nop

080129b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0
	__asm volatile
 80129be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c2:	f383 8811 	msr	BASEPRI, r3
 80129c6:	f3bf 8f6f 	isb	sy
 80129ca:	f3bf 8f4f 	dsb	sy
 80129ce:	607b      	str	r3, [r7, #4]
}
 80129d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80129d2:	f7fe fe05 	bl	80115e0 <xTaskIncrementTick>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d003      	beq.n	80129e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80129dc:	4b06      	ldr	r3, [pc, #24]	; (80129f8 <xPortSysTickHandler+0x40>)
 80129de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129e2:	601a      	str	r2, [r3, #0]
 80129e4:	2300      	movs	r3, #0
 80129e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	f383 8811 	msr	BASEPRI, r3
}
 80129ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80129f0:	bf00      	nop
 80129f2:	3708      	adds	r7, #8
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	e000ed04 	.word	0xe000ed04

080129fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80129fc:	b480      	push	{r7}
 80129fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a00:	4b0b      	ldr	r3, [pc, #44]	; (8012a30 <vPortSetupTimerInterrupt+0x34>)
 8012a02:	2200      	movs	r2, #0
 8012a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a06:	4b0b      	ldr	r3, [pc, #44]	; (8012a34 <vPortSetupTimerInterrupt+0x38>)
 8012a08:	2200      	movs	r2, #0
 8012a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a0c:	4b0a      	ldr	r3, [pc, #40]	; (8012a38 <vPortSetupTimerInterrupt+0x3c>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a0a      	ldr	r2, [pc, #40]	; (8012a3c <vPortSetupTimerInterrupt+0x40>)
 8012a12:	fba2 2303 	umull	r2, r3, r2, r3
 8012a16:	099b      	lsrs	r3, r3, #6
 8012a18:	4a09      	ldr	r2, [pc, #36]	; (8012a40 <vPortSetupTimerInterrupt+0x44>)
 8012a1a:	3b01      	subs	r3, #1
 8012a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a1e:	4b04      	ldr	r3, [pc, #16]	; (8012a30 <vPortSetupTimerInterrupt+0x34>)
 8012a20:	2207      	movs	r2, #7
 8012a22:	601a      	str	r2, [r3, #0]
}
 8012a24:	bf00      	nop
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr
 8012a2e:	bf00      	nop
 8012a30:	e000e010 	.word	0xe000e010
 8012a34:	e000e018 	.word	0xe000e018
 8012a38:	24000000 	.word	0x24000000
 8012a3c:	10624dd3 	.word	0x10624dd3
 8012a40:	e000e014 	.word	0xe000e014

08012a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012a54 <vPortEnableVFP+0x10>
 8012a48:	6801      	ldr	r1, [r0, #0]
 8012a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012a4e:	6001      	str	r1, [r0, #0]
 8012a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012a52:	bf00      	nop
 8012a54:	e000ed88 	.word	0xe000ed88

08012a58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012a58:	b480      	push	{r7}
 8012a5a:	b085      	sub	sp, #20
 8012a5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012a5e:	f3ef 8305 	mrs	r3, IPSR
 8012a62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	2b0f      	cmp	r3, #15
 8012a68:	d914      	bls.n	8012a94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012a6a:	4a17      	ldr	r2, [pc, #92]	; (8012ac8 <vPortValidateInterruptPriority+0x70>)
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	4413      	add	r3, r2
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012a74:	4b15      	ldr	r3, [pc, #84]	; (8012acc <vPortValidateInterruptPriority+0x74>)
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	7afa      	ldrb	r2, [r7, #11]
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d20a      	bcs.n	8012a94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a82:	f383 8811 	msr	BASEPRI, r3
 8012a86:	f3bf 8f6f 	isb	sy
 8012a8a:	f3bf 8f4f 	dsb	sy
 8012a8e:	607b      	str	r3, [r7, #4]
}
 8012a90:	bf00      	nop
 8012a92:	e7fe      	b.n	8012a92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012a94:	4b0e      	ldr	r3, [pc, #56]	; (8012ad0 <vPortValidateInterruptPriority+0x78>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012a9c:	4b0d      	ldr	r3, [pc, #52]	; (8012ad4 <vPortValidateInterruptPriority+0x7c>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d90a      	bls.n	8012aba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aa8:	f383 8811 	msr	BASEPRI, r3
 8012aac:	f3bf 8f6f 	isb	sy
 8012ab0:	f3bf 8f4f 	dsb	sy
 8012ab4:	603b      	str	r3, [r7, #0]
}
 8012ab6:	bf00      	nop
 8012ab8:	e7fe      	b.n	8012ab8 <vPortValidateInterruptPriority+0x60>
	}
 8012aba:	bf00      	nop
 8012abc:	3714      	adds	r7, #20
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac4:	4770      	bx	lr
 8012ac6:	bf00      	nop
 8012ac8:	e000e3f0 	.word	0xe000e3f0
 8012acc:	24001364 	.word	0x24001364
 8012ad0:	e000ed0c 	.word	0xe000ed0c
 8012ad4:	24001368 	.word	0x24001368

08012ad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b08a      	sub	sp, #40	; 0x28
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012ae4:	f7fe fcc0 	bl	8011468 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012ae8:	4b5b      	ldr	r3, [pc, #364]	; (8012c58 <pvPortMalloc+0x180>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d101      	bne.n	8012af4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012af0:	f000 f920 	bl	8012d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012af4:	4b59      	ldr	r3, [pc, #356]	; (8012c5c <pvPortMalloc+0x184>)
 8012af6:	681a      	ldr	r2, [r3, #0]
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	4013      	ands	r3, r2
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f040 8093 	bne.w	8012c28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d01d      	beq.n	8012b44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012b08:	2208      	movs	r2, #8
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f003 0307 	and.w	r3, r3, #7
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d014      	beq.n	8012b44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f023 0307 	bic.w	r3, r3, #7
 8012b20:	3308      	adds	r3, #8
 8012b22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f003 0307 	and.w	r3, r3, #7
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d00a      	beq.n	8012b44 <pvPortMalloc+0x6c>
	__asm volatile
 8012b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b32:	f383 8811 	msr	BASEPRI, r3
 8012b36:	f3bf 8f6f 	isb	sy
 8012b3a:	f3bf 8f4f 	dsb	sy
 8012b3e:	617b      	str	r3, [r7, #20]
}
 8012b40:	bf00      	nop
 8012b42:	e7fe      	b.n	8012b42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d06e      	beq.n	8012c28 <pvPortMalloc+0x150>
 8012b4a:	4b45      	ldr	r3, [pc, #276]	; (8012c60 <pvPortMalloc+0x188>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	687a      	ldr	r2, [r7, #4]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d869      	bhi.n	8012c28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012b54:	4b43      	ldr	r3, [pc, #268]	; (8012c64 <pvPortMalloc+0x18c>)
 8012b56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012b58:	4b42      	ldr	r3, [pc, #264]	; (8012c64 <pvPortMalloc+0x18c>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b5e:	e004      	b.n	8012b6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6c:	685b      	ldr	r3, [r3, #4]
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d903      	bls.n	8012b7c <pvPortMalloc+0xa4>
 8012b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d1f1      	bne.n	8012b60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012b7c:	4b36      	ldr	r3, [pc, #216]	; (8012c58 <pvPortMalloc+0x180>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d050      	beq.n	8012c28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012b86:	6a3b      	ldr	r3, [r7, #32]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2208      	movs	r2, #8
 8012b8c:	4413      	add	r3, r2
 8012b8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	6a3b      	ldr	r3, [r7, #32]
 8012b96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9a:	685a      	ldr	r2, [r3, #4]
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	1ad2      	subs	r2, r2, r3
 8012ba0:	2308      	movs	r3, #8
 8012ba2:	005b      	lsls	r3, r3, #1
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d91f      	bls.n	8012be8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4413      	add	r3, r2
 8012bae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	f003 0307 	and.w	r3, r3, #7
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00a      	beq.n	8012bd0 <pvPortMalloc+0xf8>
	__asm volatile
 8012bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bbe:	f383 8811 	msr	BASEPRI, r3
 8012bc2:	f3bf 8f6f 	isb	sy
 8012bc6:	f3bf 8f4f 	dsb	sy
 8012bca:	613b      	str	r3, [r7, #16]
}
 8012bcc:	bf00      	nop
 8012bce:	e7fe      	b.n	8012bce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd2:	685a      	ldr	r2, [r3, #4]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	1ad2      	subs	r2, r2, r3
 8012bd8:	69bb      	ldr	r3, [r7, #24]
 8012bda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012be2:	69b8      	ldr	r0, [r7, #24]
 8012be4:	f000 f908 	bl	8012df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012be8:	4b1d      	ldr	r3, [pc, #116]	; (8012c60 <pvPortMalloc+0x188>)
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	1ad3      	subs	r3, r2, r3
 8012bf2:	4a1b      	ldr	r2, [pc, #108]	; (8012c60 <pvPortMalloc+0x188>)
 8012bf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012bf6:	4b1a      	ldr	r3, [pc, #104]	; (8012c60 <pvPortMalloc+0x188>)
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	4b1b      	ldr	r3, [pc, #108]	; (8012c68 <pvPortMalloc+0x190>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d203      	bcs.n	8012c0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012c02:	4b17      	ldr	r3, [pc, #92]	; (8012c60 <pvPortMalloc+0x188>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	4a18      	ldr	r2, [pc, #96]	; (8012c68 <pvPortMalloc+0x190>)
 8012c08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0c:	685a      	ldr	r2, [r3, #4]
 8012c0e:	4b13      	ldr	r3, [pc, #76]	; (8012c5c <pvPortMalloc+0x184>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	431a      	orrs	r2, r3
 8012c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012c1e:	4b13      	ldr	r3, [pc, #76]	; (8012c6c <pvPortMalloc+0x194>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	3301      	adds	r3, #1
 8012c24:	4a11      	ldr	r2, [pc, #68]	; (8012c6c <pvPortMalloc+0x194>)
 8012c26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012c28:	f7fe fc2c 	bl	8011484 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	f003 0307 	and.w	r3, r3, #7
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d00a      	beq.n	8012c4c <pvPortMalloc+0x174>
	__asm volatile
 8012c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c3a:	f383 8811 	msr	BASEPRI, r3
 8012c3e:	f3bf 8f6f 	isb	sy
 8012c42:	f3bf 8f4f 	dsb	sy
 8012c46:	60fb      	str	r3, [r7, #12]
}
 8012c48:	bf00      	nop
 8012c4a:	e7fe      	b.n	8012c4a <pvPortMalloc+0x172>
	return pvReturn;
 8012c4c:	69fb      	ldr	r3, [r7, #28]
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3728      	adds	r7, #40	; 0x28
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	24004f74 	.word	0x24004f74
 8012c5c:	24004f88 	.word	0x24004f88
 8012c60:	24004f78 	.word	0x24004f78
 8012c64:	24004f6c 	.word	0x24004f6c
 8012c68:	24004f7c 	.word	0x24004f7c
 8012c6c:	24004f80 	.word	0x24004f80

08012c70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b086      	sub	sp, #24
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d04d      	beq.n	8012d1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012c82:	2308      	movs	r3, #8
 8012c84:	425b      	negs	r3, r3
 8012c86:	697a      	ldr	r2, [r7, #20]
 8012c88:	4413      	add	r3, r2
 8012c8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	685a      	ldr	r2, [r3, #4]
 8012c94:	4b24      	ldr	r3, [pc, #144]	; (8012d28 <vPortFree+0xb8>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	4013      	ands	r3, r2
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d10a      	bne.n	8012cb4 <vPortFree+0x44>
	__asm volatile
 8012c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca2:	f383 8811 	msr	BASEPRI, r3
 8012ca6:	f3bf 8f6f 	isb	sy
 8012caa:	f3bf 8f4f 	dsb	sy
 8012cae:	60fb      	str	r3, [r7, #12]
}
 8012cb0:	bf00      	nop
 8012cb2:	e7fe      	b.n	8012cb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d00a      	beq.n	8012cd2 <vPortFree+0x62>
	__asm volatile
 8012cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc0:	f383 8811 	msr	BASEPRI, r3
 8012cc4:	f3bf 8f6f 	isb	sy
 8012cc8:	f3bf 8f4f 	dsb	sy
 8012ccc:	60bb      	str	r3, [r7, #8]
}
 8012cce:	bf00      	nop
 8012cd0:	e7fe      	b.n	8012cd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	685a      	ldr	r2, [r3, #4]
 8012cd6:	4b14      	ldr	r3, [pc, #80]	; (8012d28 <vPortFree+0xb8>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	4013      	ands	r3, r2
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d01e      	beq.n	8012d1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d11a      	bne.n	8012d1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	685a      	ldr	r2, [r3, #4]
 8012cec:	4b0e      	ldr	r3, [pc, #56]	; (8012d28 <vPortFree+0xb8>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	43db      	mvns	r3, r3
 8012cf2:	401a      	ands	r2, r3
 8012cf4:	693b      	ldr	r3, [r7, #16]
 8012cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012cf8:	f7fe fbb6 	bl	8011468 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	685a      	ldr	r2, [r3, #4]
 8012d00:	4b0a      	ldr	r3, [pc, #40]	; (8012d2c <vPortFree+0xbc>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	4413      	add	r3, r2
 8012d06:	4a09      	ldr	r2, [pc, #36]	; (8012d2c <vPortFree+0xbc>)
 8012d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d0a:	6938      	ldr	r0, [r7, #16]
 8012d0c:	f000 f874 	bl	8012df8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012d10:	4b07      	ldr	r3, [pc, #28]	; (8012d30 <vPortFree+0xc0>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	3301      	adds	r3, #1
 8012d16:	4a06      	ldr	r2, [pc, #24]	; (8012d30 <vPortFree+0xc0>)
 8012d18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012d1a:	f7fe fbb3 	bl	8011484 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012d1e:	bf00      	nop
 8012d20:	3718      	adds	r7, #24
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	24004f88 	.word	0x24004f88
 8012d2c:	24004f78 	.word	0x24004f78
 8012d30:	24004f84 	.word	0x24004f84

08012d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012d34:	b480      	push	{r7}
 8012d36:	b085      	sub	sp, #20
 8012d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012d3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012d40:	4b27      	ldr	r3, [pc, #156]	; (8012de0 <prvHeapInit+0xac>)
 8012d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	f003 0307 	and.w	r3, r3, #7
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d00c      	beq.n	8012d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	3307      	adds	r3, #7
 8012d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	f023 0307 	bic.w	r3, r3, #7
 8012d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012d5c:	68ba      	ldr	r2, [r7, #8]
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	1ad3      	subs	r3, r2, r3
 8012d62:	4a1f      	ldr	r2, [pc, #124]	; (8012de0 <prvHeapInit+0xac>)
 8012d64:	4413      	add	r3, r2
 8012d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012d6c:	4a1d      	ldr	r2, [pc, #116]	; (8012de4 <prvHeapInit+0xb0>)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012d72:	4b1c      	ldr	r3, [pc, #112]	; (8012de4 <prvHeapInit+0xb0>)
 8012d74:	2200      	movs	r2, #0
 8012d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	68ba      	ldr	r2, [r7, #8]
 8012d7c:	4413      	add	r3, r2
 8012d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012d80:	2208      	movs	r2, #8
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	1a9b      	subs	r3, r3, r2
 8012d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	f023 0307 	bic.w	r3, r3, #7
 8012d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	4a15      	ldr	r2, [pc, #84]	; (8012de8 <prvHeapInit+0xb4>)
 8012d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012d96:	4b14      	ldr	r3, [pc, #80]	; (8012de8 <prvHeapInit+0xb4>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012d9e:	4b12      	ldr	r3, [pc, #72]	; (8012de8 <prvHeapInit+0xb4>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2200      	movs	r2, #0
 8012da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	68fa      	ldr	r2, [r7, #12]
 8012dae:	1ad2      	subs	r2, r2, r3
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012db4:	4b0c      	ldr	r3, [pc, #48]	; (8012de8 <prvHeapInit+0xb4>)
 8012db6:	681a      	ldr	r2, [r3, #0]
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	685b      	ldr	r3, [r3, #4]
 8012dc0:	4a0a      	ldr	r2, [pc, #40]	; (8012dec <prvHeapInit+0xb8>)
 8012dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	4a09      	ldr	r2, [pc, #36]	; (8012df0 <prvHeapInit+0xbc>)
 8012dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012dcc:	4b09      	ldr	r3, [pc, #36]	; (8012df4 <prvHeapInit+0xc0>)
 8012dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012dd2:	601a      	str	r2, [r3, #0]
}
 8012dd4:	bf00      	nop
 8012dd6:	3714      	adds	r7, #20
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr
 8012de0:	2400136c 	.word	0x2400136c
 8012de4:	24004f6c 	.word	0x24004f6c
 8012de8:	24004f74 	.word	0x24004f74
 8012dec:	24004f7c 	.word	0x24004f7c
 8012df0:	24004f78 	.word	0x24004f78
 8012df4:	24004f88 	.word	0x24004f88

08012df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b085      	sub	sp, #20
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012e00:	4b28      	ldr	r3, [pc, #160]	; (8012ea4 <prvInsertBlockIntoFreeList+0xac>)
 8012e02:	60fb      	str	r3, [r7, #12]
 8012e04:	e002      	b.n	8012e0c <prvInsertBlockIntoFreeList+0x14>
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	60fb      	str	r3, [r7, #12]
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	687a      	ldr	r2, [r7, #4]
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d8f7      	bhi.n	8012e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	685b      	ldr	r3, [r3, #4]
 8012e1e:	68ba      	ldr	r2, [r7, #8]
 8012e20:	4413      	add	r3, r2
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d108      	bne.n	8012e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	685a      	ldr	r2, [r3, #4]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	685b      	ldr	r3, [r3, #4]
 8012e30:	441a      	add	r2, r3
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	68ba      	ldr	r2, [r7, #8]
 8012e44:	441a      	add	r2, r3
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d118      	bne.n	8012e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	4b15      	ldr	r3, [pc, #84]	; (8012ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	429a      	cmp	r2, r3
 8012e58:	d00d      	beq.n	8012e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	685a      	ldr	r2, [r3, #4]
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	441a      	add	r2, r3
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	681a      	ldr	r2, [r3, #0]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	601a      	str	r2, [r3, #0]
 8012e74:	e008      	b.n	8012e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012e76:	4b0c      	ldr	r3, [pc, #48]	; (8012ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	601a      	str	r2, [r3, #0]
 8012e7e:	e003      	b.n	8012e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681a      	ldr	r2, [r3, #0]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012e88:	68fa      	ldr	r2, [r7, #12]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d002      	beq.n	8012e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	687a      	ldr	r2, [r7, #4]
 8012e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e96:	bf00      	nop
 8012e98:	3714      	adds	r7, #20
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	24004f6c 	.word	0x24004f6c
 8012ea8:	24004f74 	.word	0x24004f74

08012eac <__errno>:
 8012eac:	4b01      	ldr	r3, [pc, #4]	; (8012eb4 <__errno+0x8>)
 8012eae:	6818      	ldr	r0, [r3, #0]
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop
 8012eb4:	24000014 	.word	0x24000014

08012eb8 <__libc_init_array>:
 8012eb8:	b570      	push	{r4, r5, r6, lr}
 8012eba:	4d0d      	ldr	r5, [pc, #52]	; (8012ef0 <__libc_init_array+0x38>)
 8012ebc:	4c0d      	ldr	r4, [pc, #52]	; (8012ef4 <__libc_init_array+0x3c>)
 8012ebe:	1b64      	subs	r4, r4, r5
 8012ec0:	10a4      	asrs	r4, r4, #2
 8012ec2:	2600      	movs	r6, #0
 8012ec4:	42a6      	cmp	r6, r4
 8012ec6:	d109      	bne.n	8012edc <__libc_init_array+0x24>
 8012ec8:	4d0b      	ldr	r5, [pc, #44]	; (8012ef8 <__libc_init_array+0x40>)
 8012eca:	4c0c      	ldr	r4, [pc, #48]	; (8012efc <__libc_init_array+0x44>)
 8012ecc:	f001 f8a0 	bl	8014010 <_init>
 8012ed0:	1b64      	subs	r4, r4, r5
 8012ed2:	10a4      	asrs	r4, r4, #2
 8012ed4:	2600      	movs	r6, #0
 8012ed6:	42a6      	cmp	r6, r4
 8012ed8:	d105      	bne.n	8012ee6 <__libc_init_array+0x2e>
 8012eda:	bd70      	pop	{r4, r5, r6, pc}
 8012edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ee0:	4798      	blx	r3
 8012ee2:	3601      	adds	r6, #1
 8012ee4:	e7ee      	b.n	8012ec4 <__libc_init_array+0xc>
 8012ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012eea:	4798      	blx	r3
 8012eec:	3601      	adds	r6, #1
 8012eee:	e7f2      	b.n	8012ed6 <__libc_init_array+0x1e>
 8012ef0:	080143e0 	.word	0x080143e0
 8012ef4:	080143e0 	.word	0x080143e0
 8012ef8:	080143e0 	.word	0x080143e0
 8012efc:	080143e4 	.word	0x080143e4

08012f00 <malloc>:
 8012f00:	4b02      	ldr	r3, [pc, #8]	; (8012f0c <malloc+0xc>)
 8012f02:	4601      	mov	r1, r0
 8012f04:	6818      	ldr	r0, [r3, #0]
 8012f06:	f000 b88d 	b.w	8013024 <_malloc_r>
 8012f0a:	bf00      	nop
 8012f0c:	24000014 	.word	0x24000014

08012f10 <free>:
 8012f10:	4b02      	ldr	r3, [pc, #8]	; (8012f1c <free+0xc>)
 8012f12:	4601      	mov	r1, r0
 8012f14:	6818      	ldr	r0, [r3, #0]
 8012f16:	f000 b819 	b.w	8012f4c <_free_r>
 8012f1a:	bf00      	nop
 8012f1c:	24000014 	.word	0x24000014

08012f20 <memcpy>:
 8012f20:	440a      	add	r2, r1
 8012f22:	4291      	cmp	r1, r2
 8012f24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012f28:	d100      	bne.n	8012f2c <memcpy+0xc>
 8012f2a:	4770      	bx	lr
 8012f2c:	b510      	push	{r4, lr}
 8012f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f36:	4291      	cmp	r1, r2
 8012f38:	d1f9      	bne.n	8012f2e <memcpy+0xe>
 8012f3a:	bd10      	pop	{r4, pc}

08012f3c <memset>:
 8012f3c:	4402      	add	r2, r0
 8012f3e:	4603      	mov	r3, r0
 8012f40:	4293      	cmp	r3, r2
 8012f42:	d100      	bne.n	8012f46 <memset+0xa>
 8012f44:	4770      	bx	lr
 8012f46:	f803 1b01 	strb.w	r1, [r3], #1
 8012f4a:	e7f9      	b.n	8012f40 <memset+0x4>

08012f4c <_free_r>:
 8012f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f4e:	2900      	cmp	r1, #0
 8012f50:	d044      	beq.n	8012fdc <_free_r+0x90>
 8012f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f56:	9001      	str	r0, [sp, #4]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8012f5e:	bfb8      	it	lt
 8012f60:	18e4      	addlt	r4, r4, r3
 8012f62:	f000 fc67 	bl	8013834 <__malloc_lock>
 8012f66:	4a1e      	ldr	r2, [pc, #120]	; (8012fe0 <_free_r+0x94>)
 8012f68:	9801      	ldr	r0, [sp, #4]
 8012f6a:	6813      	ldr	r3, [r2, #0]
 8012f6c:	b933      	cbnz	r3, 8012f7c <_free_r+0x30>
 8012f6e:	6063      	str	r3, [r4, #4]
 8012f70:	6014      	str	r4, [r2, #0]
 8012f72:	b003      	add	sp, #12
 8012f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f78:	f000 bc62 	b.w	8013840 <__malloc_unlock>
 8012f7c:	42a3      	cmp	r3, r4
 8012f7e:	d908      	bls.n	8012f92 <_free_r+0x46>
 8012f80:	6825      	ldr	r5, [r4, #0]
 8012f82:	1961      	adds	r1, r4, r5
 8012f84:	428b      	cmp	r3, r1
 8012f86:	bf01      	itttt	eq
 8012f88:	6819      	ldreq	r1, [r3, #0]
 8012f8a:	685b      	ldreq	r3, [r3, #4]
 8012f8c:	1949      	addeq	r1, r1, r5
 8012f8e:	6021      	streq	r1, [r4, #0]
 8012f90:	e7ed      	b.n	8012f6e <_free_r+0x22>
 8012f92:	461a      	mov	r2, r3
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	b10b      	cbz	r3, 8012f9c <_free_r+0x50>
 8012f98:	42a3      	cmp	r3, r4
 8012f9a:	d9fa      	bls.n	8012f92 <_free_r+0x46>
 8012f9c:	6811      	ldr	r1, [r2, #0]
 8012f9e:	1855      	adds	r5, r2, r1
 8012fa0:	42a5      	cmp	r5, r4
 8012fa2:	d10b      	bne.n	8012fbc <_free_r+0x70>
 8012fa4:	6824      	ldr	r4, [r4, #0]
 8012fa6:	4421      	add	r1, r4
 8012fa8:	1854      	adds	r4, r2, r1
 8012faa:	42a3      	cmp	r3, r4
 8012fac:	6011      	str	r1, [r2, #0]
 8012fae:	d1e0      	bne.n	8012f72 <_free_r+0x26>
 8012fb0:	681c      	ldr	r4, [r3, #0]
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	6053      	str	r3, [r2, #4]
 8012fb6:	4421      	add	r1, r4
 8012fb8:	6011      	str	r1, [r2, #0]
 8012fba:	e7da      	b.n	8012f72 <_free_r+0x26>
 8012fbc:	d902      	bls.n	8012fc4 <_free_r+0x78>
 8012fbe:	230c      	movs	r3, #12
 8012fc0:	6003      	str	r3, [r0, #0]
 8012fc2:	e7d6      	b.n	8012f72 <_free_r+0x26>
 8012fc4:	6825      	ldr	r5, [r4, #0]
 8012fc6:	1961      	adds	r1, r4, r5
 8012fc8:	428b      	cmp	r3, r1
 8012fca:	bf04      	itt	eq
 8012fcc:	6819      	ldreq	r1, [r3, #0]
 8012fce:	685b      	ldreq	r3, [r3, #4]
 8012fd0:	6063      	str	r3, [r4, #4]
 8012fd2:	bf04      	itt	eq
 8012fd4:	1949      	addeq	r1, r1, r5
 8012fd6:	6021      	streq	r1, [r4, #0]
 8012fd8:	6054      	str	r4, [r2, #4]
 8012fda:	e7ca      	b.n	8012f72 <_free_r+0x26>
 8012fdc:	b003      	add	sp, #12
 8012fde:	bd30      	pop	{r4, r5, pc}
 8012fe0:	24004f8c 	.word	0x24004f8c

08012fe4 <sbrk_aligned>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	4e0e      	ldr	r6, [pc, #56]	; (8013020 <sbrk_aligned+0x3c>)
 8012fe8:	460c      	mov	r4, r1
 8012fea:	6831      	ldr	r1, [r6, #0]
 8012fec:	4605      	mov	r5, r0
 8012fee:	b911      	cbnz	r1, 8012ff6 <sbrk_aligned+0x12>
 8012ff0:	f000 f930 	bl	8013254 <_sbrk_r>
 8012ff4:	6030      	str	r0, [r6, #0]
 8012ff6:	4621      	mov	r1, r4
 8012ff8:	4628      	mov	r0, r5
 8012ffa:	f000 f92b 	bl	8013254 <_sbrk_r>
 8012ffe:	1c43      	adds	r3, r0, #1
 8013000:	d00a      	beq.n	8013018 <sbrk_aligned+0x34>
 8013002:	1cc4      	adds	r4, r0, #3
 8013004:	f024 0403 	bic.w	r4, r4, #3
 8013008:	42a0      	cmp	r0, r4
 801300a:	d007      	beq.n	801301c <sbrk_aligned+0x38>
 801300c:	1a21      	subs	r1, r4, r0
 801300e:	4628      	mov	r0, r5
 8013010:	f000 f920 	bl	8013254 <_sbrk_r>
 8013014:	3001      	adds	r0, #1
 8013016:	d101      	bne.n	801301c <sbrk_aligned+0x38>
 8013018:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801301c:	4620      	mov	r0, r4
 801301e:	bd70      	pop	{r4, r5, r6, pc}
 8013020:	24004f90 	.word	0x24004f90

08013024 <_malloc_r>:
 8013024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013028:	1ccd      	adds	r5, r1, #3
 801302a:	f025 0503 	bic.w	r5, r5, #3
 801302e:	3508      	adds	r5, #8
 8013030:	2d0c      	cmp	r5, #12
 8013032:	bf38      	it	cc
 8013034:	250c      	movcc	r5, #12
 8013036:	2d00      	cmp	r5, #0
 8013038:	4607      	mov	r7, r0
 801303a:	db01      	blt.n	8013040 <_malloc_r+0x1c>
 801303c:	42a9      	cmp	r1, r5
 801303e:	d905      	bls.n	801304c <_malloc_r+0x28>
 8013040:	230c      	movs	r3, #12
 8013042:	603b      	str	r3, [r7, #0]
 8013044:	2600      	movs	r6, #0
 8013046:	4630      	mov	r0, r6
 8013048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801304c:	4e2e      	ldr	r6, [pc, #184]	; (8013108 <_malloc_r+0xe4>)
 801304e:	f000 fbf1 	bl	8013834 <__malloc_lock>
 8013052:	6833      	ldr	r3, [r6, #0]
 8013054:	461c      	mov	r4, r3
 8013056:	bb34      	cbnz	r4, 80130a6 <_malloc_r+0x82>
 8013058:	4629      	mov	r1, r5
 801305a:	4638      	mov	r0, r7
 801305c:	f7ff ffc2 	bl	8012fe4 <sbrk_aligned>
 8013060:	1c43      	adds	r3, r0, #1
 8013062:	4604      	mov	r4, r0
 8013064:	d14d      	bne.n	8013102 <_malloc_r+0xde>
 8013066:	6834      	ldr	r4, [r6, #0]
 8013068:	4626      	mov	r6, r4
 801306a:	2e00      	cmp	r6, #0
 801306c:	d140      	bne.n	80130f0 <_malloc_r+0xcc>
 801306e:	6823      	ldr	r3, [r4, #0]
 8013070:	4631      	mov	r1, r6
 8013072:	4638      	mov	r0, r7
 8013074:	eb04 0803 	add.w	r8, r4, r3
 8013078:	f000 f8ec 	bl	8013254 <_sbrk_r>
 801307c:	4580      	cmp	r8, r0
 801307e:	d13a      	bne.n	80130f6 <_malloc_r+0xd2>
 8013080:	6821      	ldr	r1, [r4, #0]
 8013082:	3503      	adds	r5, #3
 8013084:	1a6d      	subs	r5, r5, r1
 8013086:	f025 0503 	bic.w	r5, r5, #3
 801308a:	3508      	adds	r5, #8
 801308c:	2d0c      	cmp	r5, #12
 801308e:	bf38      	it	cc
 8013090:	250c      	movcc	r5, #12
 8013092:	4629      	mov	r1, r5
 8013094:	4638      	mov	r0, r7
 8013096:	f7ff ffa5 	bl	8012fe4 <sbrk_aligned>
 801309a:	3001      	adds	r0, #1
 801309c:	d02b      	beq.n	80130f6 <_malloc_r+0xd2>
 801309e:	6823      	ldr	r3, [r4, #0]
 80130a0:	442b      	add	r3, r5
 80130a2:	6023      	str	r3, [r4, #0]
 80130a4:	e00e      	b.n	80130c4 <_malloc_r+0xa0>
 80130a6:	6822      	ldr	r2, [r4, #0]
 80130a8:	1b52      	subs	r2, r2, r5
 80130aa:	d41e      	bmi.n	80130ea <_malloc_r+0xc6>
 80130ac:	2a0b      	cmp	r2, #11
 80130ae:	d916      	bls.n	80130de <_malloc_r+0xba>
 80130b0:	1961      	adds	r1, r4, r5
 80130b2:	42a3      	cmp	r3, r4
 80130b4:	6025      	str	r5, [r4, #0]
 80130b6:	bf18      	it	ne
 80130b8:	6059      	strne	r1, [r3, #4]
 80130ba:	6863      	ldr	r3, [r4, #4]
 80130bc:	bf08      	it	eq
 80130be:	6031      	streq	r1, [r6, #0]
 80130c0:	5162      	str	r2, [r4, r5]
 80130c2:	604b      	str	r3, [r1, #4]
 80130c4:	4638      	mov	r0, r7
 80130c6:	f104 060b 	add.w	r6, r4, #11
 80130ca:	f000 fbb9 	bl	8013840 <__malloc_unlock>
 80130ce:	f026 0607 	bic.w	r6, r6, #7
 80130d2:	1d23      	adds	r3, r4, #4
 80130d4:	1af2      	subs	r2, r6, r3
 80130d6:	d0b6      	beq.n	8013046 <_malloc_r+0x22>
 80130d8:	1b9b      	subs	r3, r3, r6
 80130da:	50a3      	str	r3, [r4, r2]
 80130dc:	e7b3      	b.n	8013046 <_malloc_r+0x22>
 80130de:	6862      	ldr	r2, [r4, #4]
 80130e0:	42a3      	cmp	r3, r4
 80130e2:	bf0c      	ite	eq
 80130e4:	6032      	streq	r2, [r6, #0]
 80130e6:	605a      	strne	r2, [r3, #4]
 80130e8:	e7ec      	b.n	80130c4 <_malloc_r+0xa0>
 80130ea:	4623      	mov	r3, r4
 80130ec:	6864      	ldr	r4, [r4, #4]
 80130ee:	e7b2      	b.n	8013056 <_malloc_r+0x32>
 80130f0:	4634      	mov	r4, r6
 80130f2:	6876      	ldr	r6, [r6, #4]
 80130f4:	e7b9      	b.n	801306a <_malloc_r+0x46>
 80130f6:	230c      	movs	r3, #12
 80130f8:	603b      	str	r3, [r7, #0]
 80130fa:	4638      	mov	r0, r7
 80130fc:	f000 fba0 	bl	8013840 <__malloc_unlock>
 8013100:	e7a1      	b.n	8013046 <_malloc_r+0x22>
 8013102:	6025      	str	r5, [r4, #0]
 8013104:	e7de      	b.n	80130c4 <_malloc_r+0xa0>
 8013106:	bf00      	nop
 8013108:	24004f8c 	.word	0x24004f8c

0801310c <iprintf>:
 801310c:	b40f      	push	{r0, r1, r2, r3}
 801310e:	4b0a      	ldr	r3, [pc, #40]	; (8013138 <iprintf+0x2c>)
 8013110:	b513      	push	{r0, r1, r4, lr}
 8013112:	681c      	ldr	r4, [r3, #0]
 8013114:	b124      	cbz	r4, 8013120 <iprintf+0x14>
 8013116:	69a3      	ldr	r3, [r4, #24]
 8013118:	b913      	cbnz	r3, 8013120 <iprintf+0x14>
 801311a:	4620      	mov	r0, r4
 801311c:	f000 fa84 	bl	8013628 <__sinit>
 8013120:	ab05      	add	r3, sp, #20
 8013122:	9a04      	ldr	r2, [sp, #16]
 8013124:	68a1      	ldr	r1, [r4, #8]
 8013126:	9301      	str	r3, [sp, #4]
 8013128:	4620      	mov	r0, r4
 801312a:	f000 fbb9 	bl	80138a0 <_vfiprintf_r>
 801312e:	b002      	add	sp, #8
 8013130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013134:	b004      	add	sp, #16
 8013136:	4770      	bx	lr
 8013138:	24000014 	.word	0x24000014

0801313c <putchar>:
 801313c:	4b09      	ldr	r3, [pc, #36]	; (8013164 <putchar+0x28>)
 801313e:	b513      	push	{r0, r1, r4, lr}
 8013140:	681c      	ldr	r4, [r3, #0]
 8013142:	4601      	mov	r1, r0
 8013144:	b134      	cbz	r4, 8013154 <putchar+0x18>
 8013146:	69a3      	ldr	r3, [r4, #24]
 8013148:	b923      	cbnz	r3, 8013154 <putchar+0x18>
 801314a:	9001      	str	r0, [sp, #4]
 801314c:	4620      	mov	r0, r4
 801314e:	f000 fa6b 	bl	8013628 <__sinit>
 8013152:	9901      	ldr	r1, [sp, #4]
 8013154:	68a2      	ldr	r2, [r4, #8]
 8013156:	4620      	mov	r0, r4
 8013158:	b002      	add	sp, #8
 801315a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801315e:	f000 be63 	b.w	8013e28 <_putc_r>
 8013162:	bf00      	nop
 8013164:	24000014 	.word	0x24000014

08013168 <_puts_r>:
 8013168:	b570      	push	{r4, r5, r6, lr}
 801316a:	460e      	mov	r6, r1
 801316c:	4605      	mov	r5, r0
 801316e:	b118      	cbz	r0, 8013178 <_puts_r+0x10>
 8013170:	6983      	ldr	r3, [r0, #24]
 8013172:	b90b      	cbnz	r3, 8013178 <_puts_r+0x10>
 8013174:	f000 fa58 	bl	8013628 <__sinit>
 8013178:	69ab      	ldr	r3, [r5, #24]
 801317a:	68ac      	ldr	r4, [r5, #8]
 801317c:	b913      	cbnz	r3, 8013184 <_puts_r+0x1c>
 801317e:	4628      	mov	r0, r5
 8013180:	f000 fa52 	bl	8013628 <__sinit>
 8013184:	4b2c      	ldr	r3, [pc, #176]	; (8013238 <_puts_r+0xd0>)
 8013186:	429c      	cmp	r4, r3
 8013188:	d120      	bne.n	80131cc <_puts_r+0x64>
 801318a:	686c      	ldr	r4, [r5, #4]
 801318c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801318e:	07db      	lsls	r3, r3, #31
 8013190:	d405      	bmi.n	801319e <_puts_r+0x36>
 8013192:	89a3      	ldrh	r3, [r4, #12]
 8013194:	0598      	lsls	r0, r3, #22
 8013196:	d402      	bmi.n	801319e <_puts_r+0x36>
 8013198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801319a:	f000 fae3 	bl	8013764 <__retarget_lock_acquire_recursive>
 801319e:	89a3      	ldrh	r3, [r4, #12]
 80131a0:	0719      	lsls	r1, r3, #28
 80131a2:	d51d      	bpl.n	80131e0 <_puts_r+0x78>
 80131a4:	6923      	ldr	r3, [r4, #16]
 80131a6:	b1db      	cbz	r3, 80131e0 <_puts_r+0x78>
 80131a8:	3e01      	subs	r6, #1
 80131aa:	68a3      	ldr	r3, [r4, #8]
 80131ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80131b0:	3b01      	subs	r3, #1
 80131b2:	60a3      	str	r3, [r4, #8]
 80131b4:	bb39      	cbnz	r1, 8013206 <_puts_r+0x9e>
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	da38      	bge.n	801322c <_puts_r+0xc4>
 80131ba:	4622      	mov	r2, r4
 80131bc:	210a      	movs	r1, #10
 80131be:	4628      	mov	r0, r5
 80131c0:	f000 f858 	bl	8013274 <__swbuf_r>
 80131c4:	3001      	adds	r0, #1
 80131c6:	d011      	beq.n	80131ec <_puts_r+0x84>
 80131c8:	250a      	movs	r5, #10
 80131ca:	e011      	b.n	80131f0 <_puts_r+0x88>
 80131cc:	4b1b      	ldr	r3, [pc, #108]	; (801323c <_puts_r+0xd4>)
 80131ce:	429c      	cmp	r4, r3
 80131d0:	d101      	bne.n	80131d6 <_puts_r+0x6e>
 80131d2:	68ac      	ldr	r4, [r5, #8]
 80131d4:	e7da      	b.n	801318c <_puts_r+0x24>
 80131d6:	4b1a      	ldr	r3, [pc, #104]	; (8013240 <_puts_r+0xd8>)
 80131d8:	429c      	cmp	r4, r3
 80131da:	bf08      	it	eq
 80131dc:	68ec      	ldreq	r4, [r5, #12]
 80131de:	e7d5      	b.n	801318c <_puts_r+0x24>
 80131e0:	4621      	mov	r1, r4
 80131e2:	4628      	mov	r0, r5
 80131e4:	f000 f898 	bl	8013318 <__swsetup_r>
 80131e8:	2800      	cmp	r0, #0
 80131ea:	d0dd      	beq.n	80131a8 <_puts_r+0x40>
 80131ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80131f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131f2:	07da      	lsls	r2, r3, #31
 80131f4:	d405      	bmi.n	8013202 <_puts_r+0x9a>
 80131f6:	89a3      	ldrh	r3, [r4, #12]
 80131f8:	059b      	lsls	r3, r3, #22
 80131fa:	d402      	bmi.n	8013202 <_puts_r+0x9a>
 80131fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131fe:	f000 fab2 	bl	8013766 <__retarget_lock_release_recursive>
 8013202:	4628      	mov	r0, r5
 8013204:	bd70      	pop	{r4, r5, r6, pc}
 8013206:	2b00      	cmp	r3, #0
 8013208:	da04      	bge.n	8013214 <_puts_r+0xac>
 801320a:	69a2      	ldr	r2, [r4, #24]
 801320c:	429a      	cmp	r2, r3
 801320e:	dc06      	bgt.n	801321e <_puts_r+0xb6>
 8013210:	290a      	cmp	r1, #10
 8013212:	d004      	beq.n	801321e <_puts_r+0xb6>
 8013214:	6823      	ldr	r3, [r4, #0]
 8013216:	1c5a      	adds	r2, r3, #1
 8013218:	6022      	str	r2, [r4, #0]
 801321a:	7019      	strb	r1, [r3, #0]
 801321c:	e7c5      	b.n	80131aa <_puts_r+0x42>
 801321e:	4622      	mov	r2, r4
 8013220:	4628      	mov	r0, r5
 8013222:	f000 f827 	bl	8013274 <__swbuf_r>
 8013226:	3001      	adds	r0, #1
 8013228:	d1bf      	bne.n	80131aa <_puts_r+0x42>
 801322a:	e7df      	b.n	80131ec <_puts_r+0x84>
 801322c:	6823      	ldr	r3, [r4, #0]
 801322e:	250a      	movs	r5, #10
 8013230:	1c5a      	adds	r2, r3, #1
 8013232:	6022      	str	r2, [r4, #0]
 8013234:	701d      	strb	r5, [r3, #0]
 8013236:	e7db      	b.n	80131f0 <_puts_r+0x88>
 8013238:	08014364 	.word	0x08014364
 801323c:	08014384 	.word	0x08014384
 8013240:	08014344 	.word	0x08014344

08013244 <puts>:
 8013244:	4b02      	ldr	r3, [pc, #8]	; (8013250 <puts+0xc>)
 8013246:	4601      	mov	r1, r0
 8013248:	6818      	ldr	r0, [r3, #0]
 801324a:	f7ff bf8d 	b.w	8013168 <_puts_r>
 801324e:	bf00      	nop
 8013250:	24000014 	.word	0x24000014

08013254 <_sbrk_r>:
 8013254:	b538      	push	{r3, r4, r5, lr}
 8013256:	4d06      	ldr	r5, [pc, #24]	; (8013270 <_sbrk_r+0x1c>)
 8013258:	2300      	movs	r3, #0
 801325a:	4604      	mov	r4, r0
 801325c:	4608      	mov	r0, r1
 801325e:	602b      	str	r3, [r5, #0]
 8013260:	f7ef fa70 	bl	8002744 <_sbrk>
 8013264:	1c43      	adds	r3, r0, #1
 8013266:	d102      	bne.n	801326e <_sbrk_r+0x1a>
 8013268:	682b      	ldr	r3, [r5, #0]
 801326a:	b103      	cbz	r3, 801326e <_sbrk_r+0x1a>
 801326c:	6023      	str	r3, [r4, #0]
 801326e:	bd38      	pop	{r3, r4, r5, pc}
 8013270:	24004f98 	.word	0x24004f98

08013274 <__swbuf_r>:
 8013274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013276:	460e      	mov	r6, r1
 8013278:	4614      	mov	r4, r2
 801327a:	4605      	mov	r5, r0
 801327c:	b118      	cbz	r0, 8013286 <__swbuf_r+0x12>
 801327e:	6983      	ldr	r3, [r0, #24]
 8013280:	b90b      	cbnz	r3, 8013286 <__swbuf_r+0x12>
 8013282:	f000 f9d1 	bl	8013628 <__sinit>
 8013286:	4b21      	ldr	r3, [pc, #132]	; (801330c <__swbuf_r+0x98>)
 8013288:	429c      	cmp	r4, r3
 801328a:	d12b      	bne.n	80132e4 <__swbuf_r+0x70>
 801328c:	686c      	ldr	r4, [r5, #4]
 801328e:	69a3      	ldr	r3, [r4, #24]
 8013290:	60a3      	str	r3, [r4, #8]
 8013292:	89a3      	ldrh	r3, [r4, #12]
 8013294:	071a      	lsls	r2, r3, #28
 8013296:	d52f      	bpl.n	80132f8 <__swbuf_r+0x84>
 8013298:	6923      	ldr	r3, [r4, #16]
 801329a:	b36b      	cbz	r3, 80132f8 <__swbuf_r+0x84>
 801329c:	6923      	ldr	r3, [r4, #16]
 801329e:	6820      	ldr	r0, [r4, #0]
 80132a0:	1ac0      	subs	r0, r0, r3
 80132a2:	6963      	ldr	r3, [r4, #20]
 80132a4:	b2f6      	uxtb	r6, r6
 80132a6:	4283      	cmp	r3, r0
 80132a8:	4637      	mov	r7, r6
 80132aa:	dc04      	bgt.n	80132b6 <__swbuf_r+0x42>
 80132ac:	4621      	mov	r1, r4
 80132ae:	4628      	mov	r0, r5
 80132b0:	f000 f926 	bl	8013500 <_fflush_r>
 80132b4:	bb30      	cbnz	r0, 8013304 <__swbuf_r+0x90>
 80132b6:	68a3      	ldr	r3, [r4, #8]
 80132b8:	3b01      	subs	r3, #1
 80132ba:	60a3      	str	r3, [r4, #8]
 80132bc:	6823      	ldr	r3, [r4, #0]
 80132be:	1c5a      	adds	r2, r3, #1
 80132c0:	6022      	str	r2, [r4, #0]
 80132c2:	701e      	strb	r6, [r3, #0]
 80132c4:	6963      	ldr	r3, [r4, #20]
 80132c6:	3001      	adds	r0, #1
 80132c8:	4283      	cmp	r3, r0
 80132ca:	d004      	beq.n	80132d6 <__swbuf_r+0x62>
 80132cc:	89a3      	ldrh	r3, [r4, #12]
 80132ce:	07db      	lsls	r3, r3, #31
 80132d0:	d506      	bpl.n	80132e0 <__swbuf_r+0x6c>
 80132d2:	2e0a      	cmp	r6, #10
 80132d4:	d104      	bne.n	80132e0 <__swbuf_r+0x6c>
 80132d6:	4621      	mov	r1, r4
 80132d8:	4628      	mov	r0, r5
 80132da:	f000 f911 	bl	8013500 <_fflush_r>
 80132de:	b988      	cbnz	r0, 8013304 <__swbuf_r+0x90>
 80132e0:	4638      	mov	r0, r7
 80132e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132e4:	4b0a      	ldr	r3, [pc, #40]	; (8013310 <__swbuf_r+0x9c>)
 80132e6:	429c      	cmp	r4, r3
 80132e8:	d101      	bne.n	80132ee <__swbuf_r+0x7a>
 80132ea:	68ac      	ldr	r4, [r5, #8]
 80132ec:	e7cf      	b.n	801328e <__swbuf_r+0x1a>
 80132ee:	4b09      	ldr	r3, [pc, #36]	; (8013314 <__swbuf_r+0xa0>)
 80132f0:	429c      	cmp	r4, r3
 80132f2:	bf08      	it	eq
 80132f4:	68ec      	ldreq	r4, [r5, #12]
 80132f6:	e7ca      	b.n	801328e <__swbuf_r+0x1a>
 80132f8:	4621      	mov	r1, r4
 80132fa:	4628      	mov	r0, r5
 80132fc:	f000 f80c 	bl	8013318 <__swsetup_r>
 8013300:	2800      	cmp	r0, #0
 8013302:	d0cb      	beq.n	801329c <__swbuf_r+0x28>
 8013304:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013308:	e7ea      	b.n	80132e0 <__swbuf_r+0x6c>
 801330a:	bf00      	nop
 801330c:	08014364 	.word	0x08014364
 8013310:	08014384 	.word	0x08014384
 8013314:	08014344 	.word	0x08014344

08013318 <__swsetup_r>:
 8013318:	4b32      	ldr	r3, [pc, #200]	; (80133e4 <__swsetup_r+0xcc>)
 801331a:	b570      	push	{r4, r5, r6, lr}
 801331c:	681d      	ldr	r5, [r3, #0]
 801331e:	4606      	mov	r6, r0
 8013320:	460c      	mov	r4, r1
 8013322:	b125      	cbz	r5, 801332e <__swsetup_r+0x16>
 8013324:	69ab      	ldr	r3, [r5, #24]
 8013326:	b913      	cbnz	r3, 801332e <__swsetup_r+0x16>
 8013328:	4628      	mov	r0, r5
 801332a:	f000 f97d 	bl	8013628 <__sinit>
 801332e:	4b2e      	ldr	r3, [pc, #184]	; (80133e8 <__swsetup_r+0xd0>)
 8013330:	429c      	cmp	r4, r3
 8013332:	d10f      	bne.n	8013354 <__swsetup_r+0x3c>
 8013334:	686c      	ldr	r4, [r5, #4]
 8013336:	89a3      	ldrh	r3, [r4, #12]
 8013338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801333c:	0719      	lsls	r1, r3, #28
 801333e:	d42c      	bmi.n	801339a <__swsetup_r+0x82>
 8013340:	06dd      	lsls	r5, r3, #27
 8013342:	d411      	bmi.n	8013368 <__swsetup_r+0x50>
 8013344:	2309      	movs	r3, #9
 8013346:	6033      	str	r3, [r6, #0]
 8013348:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801334c:	81a3      	strh	r3, [r4, #12]
 801334e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013352:	e03e      	b.n	80133d2 <__swsetup_r+0xba>
 8013354:	4b25      	ldr	r3, [pc, #148]	; (80133ec <__swsetup_r+0xd4>)
 8013356:	429c      	cmp	r4, r3
 8013358:	d101      	bne.n	801335e <__swsetup_r+0x46>
 801335a:	68ac      	ldr	r4, [r5, #8]
 801335c:	e7eb      	b.n	8013336 <__swsetup_r+0x1e>
 801335e:	4b24      	ldr	r3, [pc, #144]	; (80133f0 <__swsetup_r+0xd8>)
 8013360:	429c      	cmp	r4, r3
 8013362:	bf08      	it	eq
 8013364:	68ec      	ldreq	r4, [r5, #12]
 8013366:	e7e6      	b.n	8013336 <__swsetup_r+0x1e>
 8013368:	0758      	lsls	r0, r3, #29
 801336a:	d512      	bpl.n	8013392 <__swsetup_r+0x7a>
 801336c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801336e:	b141      	cbz	r1, 8013382 <__swsetup_r+0x6a>
 8013370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013374:	4299      	cmp	r1, r3
 8013376:	d002      	beq.n	801337e <__swsetup_r+0x66>
 8013378:	4630      	mov	r0, r6
 801337a:	f7ff fde7 	bl	8012f4c <_free_r>
 801337e:	2300      	movs	r3, #0
 8013380:	6363      	str	r3, [r4, #52]	; 0x34
 8013382:	89a3      	ldrh	r3, [r4, #12]
 8013384:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013388:	81a3      	strh	r3, [r4, #12]
 801338a:	2300      	movs	r3, #0
 801338c:	6063      	str	r3, [r4, #4]
 801338e:	6923      	ldr	r3, [r4, #16]
 8013390:	6023      	str	r3, [r4, #0]
 8013392:	89a3      	ldrh	r3, [r4, #12]
 8013394:	f043 0308 	orr.w	r3, r3, #8
 8013398:	81a3      	strh	r3, [r4, #12]
 801339a:	6923      	ldr	r3, [r4, #16]
 801339c:	b94b      	cbnz	r3, 80133b2 <__swsetup_r+0x9a>
 801339e:	89a3      	ldrh	r3, [r4, #12]
 80133a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80133a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80133a8:	d003      	beq.n	80133b2 <__swsetup_r+0x9a>
 80133aa:	4621      	mov	r1, r4
 80133ac:	4630      	mov	r0, r6
 80133ae:	f000 fa01 	bl	80137b4 <__smakebuf_r>
 80133b2:	89a0      	ldrh	r0, [r4, #12]
 80133b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80133b8:	f010 0301 	ands.w	r3, r0, #1
 80133bc:	d00a      	beq.n	80133d4 <__swsetup_r+0xbc>
 80133be:	2300      	movs	r3, #0
 80133c0:	60a3      	str	r3, [r4, #8]
 80133c2:	6963      	ldr	r3, [r4, #20]
 80133c4:	425b      	negs	r3, r3
 80133c6:	61a3      	str	r3, [r4, #24]
 80133c8:	6923      	ldr	r3, [r4, #16]
 80133ca:	b943      	cbnz	r3, 80133de <__swsetup_r+0xc6>
 80133cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80133d0:	d1ba      	bne.n	8013348 <__swsetup_r+0x30>
 80133d2:	bd70      	pop	{r4, r5, r6, pc}
 80133d4:	0781      	lsls	r1, r0, #30
 80133d6:	bf58      	it	pl
 80133d8:	6963      	ldrpl	r3, [r4, #20]
 80133da:	60a3      	str	r3, [r4, #8]
 80133dc:	e7f4      	b.n	80133c8 <__swsetup_r+0xb0>
 80133de:	2000      	movs	r0, #0
 80133e0:	e7f7      	b.n	80133d2 <__swsetup_r+0xba>
 80133e2:	bf00      	nop
 80133e4:	24000014 	.word	0x24000014
 80133e8:	08014364 	.word	0x08014364
 80133ec:	08014384 	.word	0x08014384
 80133f0:	08014344 	.word	0x08014344

080133f4 <__sflush_r>:
 80133f4:	898a      	ldrh	r2, [r1, #12]
 80133f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133fa:	4605      	mov	r5, r0
 80133fc:	0710      	lsls	r0, r2, #28
 80133fe:	460c      	mov	r4, r1
 8013400:	d458      	bmi.n	80134b4 <__sflush_r+0xc0>
 8013402:	684b      	ldr	r3, [r1, #4]
 8013404:	2b00      	cmp	r3, #0
 8013406:	dc05      	bgt.n	8013414 <__sflush_r+0x20>
 8013408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801340a:	2b00      	cmp	r3, #0
 801340c:	dc02      	bgt.n	8013414 <__sflush_r+0x20>
 801340e:	2000      	movs	r0, #0
 8013410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013416:	2e00      	cmp	r6, #0
 8013418:	d0f9      	beq.n	801340e <__sflush_r+0x1a>
 801341a:	2300      	movs	r3, #0
 801341c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013420:	682f      	ldr	r7, [r5, #0]
 8013422:	602b      	str	r3, [r5, #0]
 8013424:	d032      	beq.n	801348c <__sflush_r+0x98>
 8013426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013428:	89a3      	ldrh	r3, [r4, #12]
 801342a:	075a      	lsls	r2, r3, #29
 801342c:	d505      	bpl.n	801343a <__sflush_r+0x46>
 801342e:	6863      	ldr	r3, [r4, #4]
 8013430:	1ac0      	subs	r0, r0, r3
 8013432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013434:	b10b      	cbz	r3, 801343a <__sflush_r+0x46>
 8013436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013438:	1ac0      	subs	r0, r0, r3
 801343a:	2300      	movs	r3, #0
 801343c:	4602      	mov	r2, r0
 801343e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013440:	6a21      	ldr	r1, [r4, #32]
 8013442:	4628      	mov	r0, r5
 8013444:	47b0      	blx	r6
 8013446:	1c43      	adds	r3, r0, #1
 8013448:	89a3      	ldrh	r3, [r4, #12]
 801344a:	d106      	bne.n	801345a <__sflush_r+0x66>
 801344c:	6829      	ldr	r1, [r5, #0]
 801344e:	291d      	cmp	r1, #29
 8013450:	d82c      	bhi.n	80134ac <__sflush_r+0xb8>
 8013452:	4a2a      	ldr	r2, [pc, #168]	; (80134fc <__sflush_r+0x108>)
 8013454:	40ca      	lsrs	r2, r1
 8013456:	07d6      	lsls	r6, r2, #31
 8013458:	d528      	bpl.n	80134ac <__sflush_r+0xb8>
 801345a:	2200      	movs	r2, #0
 801345c:	6062      	str	r2, [r4, #4]
 801345e:	04d9      	lsls	r1, r3, #19
 8013460:	6922      	ldr	r2, [r4, #16]
 8013462:	6022      	str	r2, [r4, #0]
 8013464:	d504      	bpl.n	8013470 <__sflush_r+0x7c>
 8013466:	1c42      	adds	r2, r0, #1
 8013468:	d101      	bne.n	801346e <__sflush_r+0x7a>
 801346a:	682b      	ldr	r3, [r5, #0]
 801346c:	b903      	cbnz	r3, 8013470 <__sflush_r+0x7c>
 801346e:	6560      	str	r0, [r4, #84]	; 0x54
 8013470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013472:	602f      	str	r7, [r5, #0]
 8013474:	2900      	cmp	r1, #0
 8013476:	d0ca      	beq.n	801340e <__sflush_r+0x1a>
 8013478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801347c:	4299      	cmp	r1, r3
 801347e:	d002      	beq.n	8013486 <__sflush_r+0x92>
 8013480:	4628      	mov	r0, r5
 8013482:	f7ff fd63 	bl	8012f4c <_free_r>
 8013486:	2000      	movs	r0, #0
 8013488:	6360      	str	r0, [r4, #52]	; 0x34
 801348a:	e7c1      	b.n	8013410 <__sflush_r+0x1c>
 801348c:	6a21      	ldr	r1, [r4, #32]
 801348e:	2301      	movs	r3, #1
 8013490:	4628      	mov	r0, r5
 8013492:	47b0      	blx	r6
 8013494:	1c41      	adds	r1, r0, #1
 8013496:	d1c7      	bne.n	8013428 <__sflush_r+0x34>
 8013498:	682b      	ldr	r3, [r5, #0]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d0c4      	beq.n	8013428 <__sflush_r+0x34>
 801349e:	2b1d      	cmp	r3, #29
 80134a0:	d001      	beq.n	80134a6 <__sflush_r+0xb2>
 80134a2:	2b16      	cmp	r3, #22
 80134a4:	d101      	bne.n	80134aa <__sflush_r+0xb6>
 80134a6:	602f      	str	r7, [r5, #0]
 80134a8:	e7b1      	b.n	801340e <__sflush_r+0x1a>
 80134aa:	89a3      	ldrh	r3, [r4, #12]
 80134ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134b0:	81a3      	strh	r3, [r4, #12]
 80134b2:	e7ad      	b.n	8013410 <__sflush_r+0x1c>
 80134b4:	690f      	ldr	r7, [r1, #16]
 80134b6:	2f00      	cmp	r7, #0
 80134b8:	d0a9      	beq.n	801340e <__sflush_r+0x1a>
 80134ba:	0793      	lsls	r3, r2, #30
 80134bc:	680e      	ldr	r6, [r1, #0]
 80134be:	bf08      	it	eq
 80134c0:	694b      	ldreq	r3, [r1, #20]
 80134c2:	600f      	str	r7, [r1, #0]
 80134c4:	bf18      	it	ne
 80134c6:	2300      	movne	r3, #0
 80134c8:	eba6 0807 	sub.w	r8, r6, r7
 80134cc:	608b      	str	r3, [r1, #8]
 80134ce:	f1b8 0f00 	cmp.w	r8, #0
 80134d2:	dd9c      	ble.n	801340e <__sflush_r+0x1a>
 80134d4:	6a21      	ldr	r1, [r4, #32]
 80134d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80134d8:	4643      	mov	r3, r8
 80134da:	463a      	mov	r2, r7
 80134dc:	4628      	mov	r0, r5
 80134de:	47b0      	blx	r6
 80134e0:	2800      	cmp	r0, #0
 80134e2:	dc06      	bgt.n	80134f2 <__sflush_r+0xfe>
 80134e4:	89a3      	ldrh	r3, [r4, #12]
 80134e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134ea:	81a3      	strh	r3, [r4, #12]
 80134ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80134f0:	e78e      	b.n	8013410 <__sflush_r+0x1c>
 80134f2:	4407      	add	r7, r0
 80134f4:	eba8 0800 	sub.w	r8, r8, r0
 80134f8:	e7e9      	b.n	80134ce <__sflush_r+0xda>
 80134fa:	bf00      	nop
 80134fc:	20400001 	.word	0x20400001

08013500 <_fflush_r>:
 8013500:	b538      	push	{r3, r4, r5, lr}
 8013502:	690b      	ldr	r3, [r1, #16]
 8013504:	4605      	mov	r5, r0
 8013506:	460c      	mov	r4, r1
 8013508:	b913      	cbnz	r3, 8013510 <_fflush_r+0x10>
 801350a:	2500      	movs	r5, #0
 801350c:	4628      	mov	r0, r5
 801350e:	bd38      	pop	{r3, r4, r5, pc}
 8013510:	b118      	cbz	r0, 801351a <_fflush_r+0x1a>
 8013512:	6983      	ldr	r3, [r0, #24]
 8013514:	b90b      	cbnz	r3, 801351a <_fflush_r+0x1a>
 8013516:	f000 f887 	bl	8013628 <__sinit>
 801351a:	4b14      	ldr	r3, [pc, #80]	; (801356c <_fflush_r+0x6c>)
 801351c:	429c      	cmp	r4, r3
 801351e:	d11b      	bne.n	8013558 <_fflush_r+0x58>
 8013520:	686c      	ldr	r4, [r5, #4]
 8013522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d0ef      	beq.n	801350a <_fflush_r+0xa>
 801352a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801352c:	07d0      	lsls	r0, r2, #31
 801352e:	d404      	bmi.n	801353a <_fflush_r+0x3a>
 8013530:	0599      	lsls	r1, r3, #22
 8013532:	d402      	bmi.n	801353a <_fflush_r+0x3a>
 8013534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013536:	f000 f915 	bl	8013764 <__retarget_lock_acquire_recursive>
 801353a:	4628      	mov	r0, r5
 801353c:	4621      	mov	r1, r4
 801353e:	f7ff ff59 	bl	80133f4 <__sflush_r>
 8013542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013544:	07da      	lsls	r2, r3, #31
 8013546:	4605      	mov	r5, r0
 8013548:	d4e0      	bmi.n	801350c <_fflush_r+0xc>
 801354a:	89a3      	ldrh	r3, [r4, #12]
 801354c:	059b      	lsls	r3, r3, #22
 801354e:	d4dd      	bmi.n	801350c <_fflush_r+0xc>
 8013550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013552:	f000 f908 	bl	8013766 <__retarget_lock_release_recursive>
 8013556:	e7d9      	b.n	801350c <_fflush_r+0xc>
 8013558:	4b05      	ldr	r3, [pc, #20]	; (8013570 <_fflush_r+0x70>)
 801355a:	429c      	cmp	r4, r3
 801355c:	d101      	bne.n	8013562 <_fflush_r+0x62>
 801355e:	68ac      	ldr	r4, [r5, #8]
 8013560:	e7df      	b.n	8013522 <_fflush_r+0x22>
 8013562:	4b04      	ldr	r3, [pc, #16]	; (8013574 <_fflush_r+0x74>)
 8013564:	429c      	cmp	r4, r3
 8013566:	bf08      	it	eq
 8013568:	68ec      	ldreq	r4, [r5, #12]
 801356a:	e7da      	b.n	8013522 <_fflush_r+0x22>
 801356c:	08014364 	.word	0x08014364
 8013570:	08014384 	.word	0x08014384
 8013574:	08014344 	.word	0x08014344

08013578 <std>:
 8013578:	2300      	movs	r3, #0
 801357a:	b510      	push	{r4, lr}
 801357c:	4604      	mov	r4, r0
 801357e:	e9c0 3300 	strd	r3, r3, [r0]
 8013582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013586:	6083      	str	r3, [r0, #8]
 8013588:	8181      	strh	r1, [r0, #12]
 801358a:	6643      	str	r3, [r0, #100]	; 0x64
 801358c:	81c2      	strh	r2, [r0, #14]
 801358e:	6183      	str	r3, [r0, #24]
 8013590:	4619      	mov	r1, r3
 8013592:	2208      	movs	r2, #8
 8013594:	305c      	adds	r0, #92	; 0x5c
 8013596:	f7ff fcd1 	bl	8012f3c <memset>
 801359a:	4b05      	ldr	r3, [pc, #20]	; (80135b0 <std+0x38>)
 801359c:	6263      	str	r3, [r4, #36]	; 0x24
 801359e:	4b05      	ldr	r3, [pc, #20]	; (80135b4 <std+0x3c>)
 80135a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80135a2:	4b05      	ldr	r3, [pc, #20]	; (80135b8 <std+0x40>)
 80135a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80135a6:	4b05      	ldr	r3, [pc, #20]	; (80135bc <std+0x44>)
 80135a8:	6224      	str	r4, [r4, #32]
 80135aa:	6323      	str	r3, [r4, #48]	; 0x30
 80135ac:	bd10      	pop	{r4, pc}
 80135ae:	bf00      	nop
 80135b0:	08013eb9 	.word	0x08013eb9
 80135b4:	08013edb 	.word	0x08013edb
 80135b8:	08013f13 	.word	0x08013f13
 80135bc:	08013f37 	.word	0x08013f37

080135c0 <_cleanup_r>:
 80135c0:	4901      	ldr	r1, [pc, #4]	; (80135c8 <_cleanup_r+0x8>)
 80135c2:	f000 b8af 	b.w	8013724 <_fwalk_reent>
 80135c6:	bf00      	nop
 80135c8:	08013501 	.word	0x08013501

080135cc <__sfmoreglue>:
 80135cc:	b570      	push	{r4, r5, r6, lr}
 80135ce:	2268      	movs	r2, #104	; 0x68
 80135d0:	1e4d      	subs	r5, r1, #1
 80135d2:	4355      	muls	r5, r2
 80135d4:	460e      	mov	r6, r1
 80135d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80135da:	f7ff fd23 	bl	8013024 <_malloc_r>
 80135de:	4604      	mov	r4, r0
 80135e0:	b140      	cbz	r0, 80135f4 <__sfmoreglue+0x28>
 80135e2:	2100      	movs	r1, #0
 80135e4:	e9c0 1600 	strd	r1, r6, [r0]
 80135e8:	300c      	adds	r0, #12
 80135ea:	60a0      	str	r0, [r4, #8]
 80135ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80135f0:	f7ff fca4 	bl	8012f3c <memset>
 80135f4:	4620      	mov	r0, r4
 80135f6:	bd70      	pop	{r4, r5, r6, pc}

080135f8 <__sfp_lock_acquire>:
 80135f8:	4801      	ldr	r0, [pc, #4]	; (8013600 <__sfp_lock_acquire+0x8>)
 80135fa:	f000 b8b3 	b.w	8013764 <__retarget_lock_acquire_recursive>
 80135fe:	bf00      	nop
 8013600:	24004f95 	.word	0x24004f95

08013604 <__sfp_lock_release>:
 8013604:	4801      	ldr	r0, [pc, #4]	; (801360c <__sfp_lock_release+0x8>)
 8013606:	f000 b8ae 	b.w	8013766 <__retarget_lock_release_recursive>
 801360a:	bf00      	nop
 801360c:	24004f95 	.word	0x24004f95

08013610 <__sinit_lock_acquire>:
 8013610:	4801      	ldr	r0, [pc, #4]	; (8013618 <__sinit_lock_acquire+0x8>)
 8013612:	f000 b8a7 	b.w	8013764 <__retarget_lock_acquire_recursive>
 8013616:	bf00      	nop
 8013618:	24004f96 	.word	0x24004f96

0801361c <__sinit_lock_release>:
 801361c:	4801      	ldr	r0, [pc, #4]	; (8013624 <__sinit_lock_release+0x8>)
 801361e:	f000 b8a2 	b.w	8013766 <__retarget_lock_release_recursive>
 8013622:	bf00      	nop
 8013624:	24004f96 	.word	0x24004f96

08013628 <__sinit>:
 8013628:	b510      	push	{r4, lr}
 801362a:	4604      	mov	r4, r0
 801362c:	f7ff fff0 	bl	8013610 <__sinit_lock_acquire>
 8013630:	69a3      	ldr	r3, [r4, #24]
 8013632:	b11b      	cbz	r3, 801363c <__sinit+0x14>
 8013634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013638:	f7ff bff0 	b.w	801361c <__sinit_lock_release>
 801363c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013640:	6523      	str	r3, [r4, #80]	; 0x50
 8013642:	4b13      	ldr	r3, [pc, #76]	; (8013690 <__sinit+0x68>)
 8013644:	4a13      	ldr	r2, [pc, #76]	; (8013694 <__sinit+0x6c>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	62a2      	str	r2, [r4, #40]	; 0x28
 801364a:	42a3      	cmp	r3, r4
 801364c:	bf04      	itt	eq
 801364e:	2301      	moveq	r3, #1
 8013650:	61a3      	streq	r3, [r4, #24]
 8013652:	4620      	mov	r0, r4
 8013654:	f000 f820 	bl	8013698 <__sfp>
 8013658:	6060      	str	r0, [r4, #4]
 801365a:	4620      	mov	r0, r4
 801365c:	f000 f81c 	bl	8013698 <__sfp>
 8013660:	60a0      	str	r0, [r4, #8]
 8013662:	4620      	mov	r0, r4
 8013664:	f000 f818 	bl	8013698 <__sfp>
 8013668:	2200      	movs	r2, #0
 801366a:	60e0      	str	r0, [r4, #12]
 801366c:	2104      	movs	r1, #4
 801366e:	6860      	ldr	r0, [r4, #4]
 8013670:	f7ff ff82 	bl	8013578 <std>
 8013674:	68a0      	ldr	r0, [r4, #8]
 8013676:	2201      	movs	r2, #1
 8013678:	2109      	movs	r1, #9
 801367a:	f7ff ff7d 	bl	8013578 <std>
 801367e:	68e0      	ldr	r0, [r4, #12]
 8013680:	2202      	movs	r2, #2
 8013682:	2112      	movs	r1, #18
 8013684:	f7ff ff78 	bl	8013578 <std>
 8013688:	2301      	movs	r3, #1
 801368a:	61a3      	str	r3, [r4, #24]
 801368c:	e7d2      	b.n	8013634 <__sinit+0xc>
 801368e:	bf00      	nop
 8013690:	08014340 	.word	0x08014340
 8013694:	080135c1 	.word	0x080135c1

08013698 <__sfp>:
 8013698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801369a:	4607      	mov	r7, r0
 801369c:	f7ff ffac 	bl	80135f8 <__sfp_lock_acquire>
 80136a0:	4b1e      	ldr	r3, [pc, #120]	; (801371c <__sfp+0x84>)
 80136a2:	681e      	ldr	r6, [r3, #0]
 80136a4:	69b3      	ldr	r3, [r6, #24]
 80136a6:	b913      	cbnz	r3, 80136ae <__sfp+0x16>
 80136a8:	4630      	mov	r0, r6
 80136aa:	f7ff ffbd 	bl	8013628 <__sinit>
 80136ae:	3648      	adds	r6, #72	; 0x48
 80136b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80136b4:	3b01      	subs	r3, #1
 80136b6:	d503      	bpl.n	80136c0 <__sfp+0x28>
 80136b8:	6833      	ldr	r3, [r6, #0]
 80136ba:	b30b      	cbz	r3, 8013700 <__sfp+0x68>
 80136bc:	6836      	ldr	r6, [r6, #0]
 80136be:	e7f7      	b.n	80136b0 <__sfp+0x18>
 80136c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80136c4:	b9d5      	cbnz	r5, 80136fc <__sfp+0x64>
 80136c6:	4b16      	ldr	r3, [pc, #88]	; (8013720 <__sfp+0x88>)
 80136c8:	60e3      	str	r3, [r4, #12]
 80136ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80136ce:	6665      	str	r5, [r4, #100]	; 0x64
 80136d0:	f000 f847 	bl	8013762 <__retarget_lock_init_recursive>
 80136d4:	f7ff ff96 	bl	8013604 <__sfp_lock_release>
 80136d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80136dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80136e0:	6025      	str	r5, [r4, #0]
 80136e2:	61a5      	str	r5, [r4, #24]
 80136e4:	2208      	movs	r2, #8
 80136e6:	4629      	mov	r1, r5
 80136e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80136ec:	f7ff fc26 	bl	8012f3c <memset>
 80136f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80136f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80136f8:	4620      	mov	r0, r4
 80136fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136fc:	3468      	adds	r4, #104	; 0x68
 80136fe:	e7d9      	b.n	80136b4 <__sfp+0x1c>
 8013700:	2104      	movs	r1, #4
 8013702:	4638      	mov	r0, r7
 8013704:	f7ff ff62 	bl	80135cc <__sfmoreglue>
 8013708:	4604      	mov	r4, r0
 801370a:	6030      	str	r0, [r6, #0]
 801370c:	2800      	cmp	r0, #0
 801370e:	d1d5      	bne.n	80136bc <__sfp+0x24>
 8013710:	f7ff ff78 	bl	8013604 <__sfp_lock_release>
 8013714:	230c      	movs	r3, #12
 8013716:	603b      	str	r3, [r7, #0]
 8013718:	e7ee      	b.n	80136f8 <__sfp+0x60>
 801371a:	bf00      	nop
 801371c:	08014340 	.word	0x08014340
 8013720:	ffff0001 	.word	0xffff0001

08013724 <_fwalk_reent>:
 8013724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013728:	4606      	mov	r6, r0
 801372a:	4688      	mov	r8, r1
 801372c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013730:	2700      	movs	r7, #0
 8013732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013736:	f1b9 0901 	subs.w	r9, r9, #1
 801373a:	d505      	bpl.n	8013748 <_fwalk_reent+0x24>
 801373c:	6824      	ldr	r4, [r4, #0]
 801373e:	2c00      	cmp	r4, #0
 8013740:	d1f7      	bne.n	8013732 <_fwalk_reent+0xe>
 8013742:	4638      	mov	r0, r7
 8013744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013748:	89ab      	ldrh	r3, [r5, #12]
 801374a:	2b01      	cmp	r3, #1
 801374c:	d907      	bls.n	801375e <_fwalk_reent+0x3a>
 801374e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013752:	3301      	adds	r3, #1
 8013754:	d003      	beq.n	801375e <_fwalk_reent+0x3a>
 8013756:	4629      	mov	r1, r5
 8013758:	4630      	mov	r0, r6
 801375a:	47c0      	blx	r8
 801375c:	4307      	orrs	r7, r0
 801375e:	3568      	adds	r5, #104	; 0x68
 8013760:	e7e9      	b.n	8013736 <_fwalk_reent+0x12>

08013762 <__retarget_lock_init_recursive>:
 8013762:	4770      	bx	lr

08013764 <__retarget_lock_acquire_recursive>:
 8013764:	4770      	bx	lr

08013766 <__retarget_lock_release_recursive>:
 8013766:	4770      	bx	lr

08013768 <__swhatbuf_r>:
 8013768:	b570      	push	{r4, r5, r6, lr}
 801376a:	460e      	mov	r6, r1
 801376c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013770:	2900      	cmp	r1, #0
 8013772:	b096      	sub	sp, #88	; 0x58
 8013774:	4614      	mov	r4, r2
 8013776:	461d      	mov	r5, r3
 8013778:	da08      	bge.n	801378c <__swhatbuf_r+0x24>
 801377a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801377e:	2200      	movs	r2, #0
 8013780:	602a      	str	r2, [r5, #0]
 8013782:	061a      	lsls	r2, r3, #24
 8013784:	d410      	bmi.n	80137a8 <__swhatbuf_r+0x40>
 8013786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801378a:	e00e      	b.n	80137aa <__swhatbuf_r+0x42>
 801378c:	466a      	mov	r2, sp
 801378e:	f000 fbf9 	bl	8013f84 <_fstat_r>
 8013792:	2800      	cmp	r0, #0
 8013794:	dbf1      	blt.n	801377a <__swhatbuf_r+0x12>
 8013796:	9a01      	ldr	r2, [sp, #4]
 8013798:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801379c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80137a0:	425a      	negs	r2, r3
 80137a2:	415a      	adcs	r2, r3
 80137a4:	602a      	str	r2, [r5, #0]
 80137a6:	e7ee      	b.n	8013786 <__swhatbuf_r+0x1e>
 80137a8:	2340      	movs	r3, #64	; 0x40
 80137aa:	2000      	movs	r0, #0
 80137ac:	6023      	str	r3, [r4, #0]
 80137ae:	b016      	add	sp, #88	; 0x58
 80137b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080137b4 <__smakebuf_r>:
 80137b4:	898b      	ldrh	r3, [r1, #12]
 80137b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80137b8:	079d      	lsls	r5, r3, #30
 80137ba:	4606      	mov	r6, r0
 80137bc:	460c      	mov	r4, r1
 80137be:	d507      	bpl.n	80137d0 <__smakebuf_r+0x1c>
 80137c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80137c4:	6023      	str	r3, [r4, #0]
 80137c6:	6123      	str	r3, [r4, #16]
 80137c8:	2301      	movs	r3, #1
 80137ca:	6163      	str	r3, [r4, #20]
 80137cc:	b002      	add	sp, #8
 80137ce:	bd70      	pop	{r4, r5, r6, pc}
 80137d0:	ab01      	add	r3, sp, #4
 80137d2:	466a      	mov	r2, sp
 80137d4:	f7ff ffc8 	bl	8013768 <__swhatbuf_r>
 80137d8:	9900      	ldr	r1, [sp, #0]
 80137da:	4605      	mov	r5, r0
 80137dc:	4630      	mov	r0, r6
 80137de:	f7ff fc21 	bl	8013024 <_malloc_r>
 80137e2:	b948      	cbnz	r0, 80137f8 <__smakebuf_r+0x44>
 80137e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137e8:	059a      	lsls	r2, r3, #22
 80137ea:	d4ef      	bmi.n	80137cc <__smakebuf_r+0x18>
 80137ec:	f023 0303 	bic.w	r3, r3, #3
 80137f0:	f043 0302 	orr.w	r3, r3, #2
 80137f4:	81a3      	strh	r3, [r4, #12]
 80137f6:	e7e3      	b.n	80137c0 <__smakebuf_r+0xc>
 80137f8:	4b0d      	ldr	r3, [pc, #52]	; (8013830 <__smakebuf_r+0x7c>)
 80137fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80137fc:	89a3      	ldrh	r3, [r4, #12]
 80137fe:	6020      	str	r0, [r4, #0]
 8013800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013804:	81a3      	strh	r3, [r4, #12]
 8013806:	9b00      	ldr	r3, [sp, #0]
 8013808:	6163      	str	r3, [r4, #20]
 801380a:	9b01      	ldr	r3, [sp, #4]
 801380c:	6120      	str	r0, [r4, #16]
 801380e:	b15b      	cbz	r3, 8013828 <__smakebuf_r+0x74>
 8013810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013814:	4630      	mov	r0, r6
 8013816:	f000 fbc7 	bl	8013fa8 <_isatty_r>
 801381a:	b128      	cbz	r0, 8013828 <__smakebuf_r+0x74>
 801381c:	89a3      	ldrh	r3, [r4, #12]
 801381e:	f023 0303 	bic.w	r3, r3, #3
 8013822:	f043 0301 	orr.w	r3, r3, #1
 8013826:	81a3      	strh	r3, [r4, #12]
 8013828:	89a0      	ldrh	r0, [r4, #12]
 801382a:	4305      	orrs	r5, r0
 801382c:	81a5      	strh	r5, [r4, #12]
 801382e:	e7cd      	b.n	80137cc <__smakebuf_r+0x18>
 8013830:	080135c1 	.word	0x080135c1

08013834 <__malloc_lock>:
 8013834:	4801      	ldr	r0, [pc, #4]	; (801383c <__malloc_lock+0x8>)
 8013836:	f7ff bf95 	b.w	8013764 <__retarget_lock_acquire_recursive>
 801383a:	bf00      	nop
 801383c:	24004f94 	.word	0x24004f94

08013840 <__malloc_unlock>:
 8013840:	4801      	ldr	r0, [pc, #4]	; (8013848 <__malloc_unlock+0x8>)
 8013842:	f7ff bf90 	b.w	8013766 <__retarget_lock_release_recursive>
 8013846:	bf00      	nop
 8013848:	24004f94 	.word	0x24004f94

0801384c <__sfputc_r>:
 801384c:	6893      	ldr	r3, [r2, #8]
 801384e:	3b01      	subs	r3, #1
 8013850:	2b00      	cmp	r3, #0
 8013852:	b410      	push	{r4}
 8013854:	6093      	str	r3, [r2, #8]
 8013856:	da08      	bge.n	801386a <__sfputc_r+0x1e>
 8013858:	6994      	ldr	r4, [r2, #24]
 801385a:	42a3      	cmp	r3, r4
 801385c:	db01      	blt.n	8013862 <__sfputc_r+0x16>
 801385e:	290a      	cmp	r1, #10
 8013860:	d103      	bne.n	801386a <__sfputc_r+0x1e>
 8013862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013866:	f7ff bd05 	b.w	8013274 <__swbuf_r>
 801386a:	6813      	ldr	r3, [r2, #0]
 801386c:	1c58      	adds	r0, r3, #1
 801386e:	6010      	str	r0, [r2, #0]
 8013870:	7019      	strb	r1, [r3, #0]
 8013872:	4608      	mov	r0, r1
 8013874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013878:	4770      	bx	lr

0801387a <__sfputs_r>:
 801387a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801387c:	4606      	mov	r6, r0
 801387e:	460f      	mov	r7, r1
 8013880:	4614      	mov	r4, r2
 8013882:	18d5      	adds	r5, r2, r3
 8013884:	42ac      	cmp	r4, r5
 8013886:	d101      	bne.n	801388c <__sfputs_r+0x12>
 8013888:	2000      	movs	r0, #0
 801388a:	e007      	b.n	801389c <__sfputs_r+0x22>
 801388c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013890:	463a      	mov	r2, r7
 8013892:	4630      	mov	r0, r6
 8013894:	f7ff ffda 	bl	801384c <__sfputc_r>
 8013898:	1c43      	adds	r3, r0, #1
 801389a:	d1f3      	bne.n	8013884 <__sfputs_r+0xa>
 801389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138a0 <_vfiprintf_r>:
 80138a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a4:	460d      	mov	r5, r1
 80138a6:	b09d      	sub	sp, #116	; 0x74
 80138a8:	4614      	mov	r4, r2
 80138aa:	4698      	mov	r8, r3
 80138ac:	4606      	mov	r6, r0
 80138ae:	b118      	cbz	r0, 80138b8 <_vfiprintf_r+0x18>
 80138b0:	6983      	ldr	r3, [r0, #24]
 80138b2:	b90b      	cbnz	r3, 80138b8 <_vfiprintf_r+0x18>
 80138b4:	f7ff feb8 	bl	8013628 <__sinit>
 80138b8:	4b89      	ldr	r3, [pc, #548]	; (8013ae0 <_vfiprintf_r+0x240>)
 80138ba:	429d      	cmp	r5, r3
 80138bc:	d11b      	bne.n	80138f6 <_vfiprintf_r+0x56>
 80138be:	6875      	ldr	r5, [r6, #4]
 80138c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138c2:	07d9      	lsls	r1, r3, #31
 80138c4:	d405      	bmi.n	80138d2 <_vfiprintf_r+0x32>
 80138c6:	89ab      	ldrh	r3, [r5, #12]
 80138c8:	059a      	lsls	r2, r3, #22
 80138ca:	d402      	bmi.n	80138d2 <_vfiprintf_r+0x32>
 80138cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138ce:	f7ff ff49 	bl	8013764 <__retarget_lock_acquire_recursive>
 80138d2:	89ab      	ldrh	r3, [r5, #12]
 80138d4:	071b      	lsls	r3, r3, #28
 80138d6:	d501      	bpl.n	80138dc <_vfiprintf_r+0x3c>
 80138d8:	692b      	ldr	r3, [r5, #16]
 80138da:	b9eb      	cbnz	r3, 8013918 <_vfiprintf_r+0x78>
 80138dc:	4629      	mov	r1, r5
 80138de:	4630      	mov	r0, r6
 80138e0:	f7ff fd1a 	bl	8013318 <__swsetup_r>
 80138e4:	b1c0      	cbz	r0, 8013918 <_vfiprintf_r+0x78>
 80138e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138e8:	07dc      	lsls	r4, r3, #31
 80138ea:	d50e      	bpl.n	801390a <_vfiprintf_r+0x6a>
 80138ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138f0:	b01d      	add	sp, #116	; 0x74
 80138f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138f6:	4b7b      	ldr	r3, [pc, #492]	; (8013ae4 <_vfiprintf_r+0x244>)
 80138f8:	429d      	cmp	r5, r3
 80138fa:	d101      	bne.n	8013900 <_vfiprintf_r+0x60>
 80138fc:	68b5      	ldr	r5, [r6, #8]
 80138fe:	e7df      	b.n	80138c0 <_vfiprintf_r+0x20>
 8013900:	4b79      	ldr	r3, [pc, #484]	; (8013ae8 <_vfiprintf_r+0x248>)
 8013902:	429d      	cmp	r5, r3
 8013904:	bf08      	it	eq
 8013906:	68f5      	ldreq	r5, [r6, #12]
 8013908:	e7da      	b.n	80138c0 <_vfiprintf_r+0x20>
 801390a:	89ab      	ldrh	r3, [r5, #12]
 801390c:	0598      	lsls	r0, r3, #22
 801390e:	d4ed      	bmi.n	80138ec <_vfiprintf_r+0x4c>
 8013910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013912:	f7ff ff28 	bl	8013766 <__retarget_lock_release_recursive>
 8013916:	e7e9      	b.n	80138ec <_vfiprintf_r+0x4c>
 8013918:	2300      	movs	r3, #0
 801391a:	9309      	str	r3, [sp, #36]	; 0x24
 801391c:	2320      	movs	r3, #32
 801391e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013922:	f8cd 800c 	str.w	r8, [sp, #12]
 8013926:	2330      	movs	r3, #48	; 0x30
 8013928:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013aec <_vfiprintf_r+0x24c>
 801392c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013930:	f04f 0901 	mov.w	r9, #1
 8013934:	4623      	mov	r3, r4
 8013936:	469a      	mov	sl, r3
 8013938:	f813 2b01 	ldrb.w	r2, [r3], #1
 801393c:	b10a      	cbz	r2, 8013942 <_vfiprintf_r+0xa2>
 801393e:	2a25      	cmp	r2, #37	; 0x25
 8013940:	d1f9      	bne.n	8013936 <_vfiprintf_r+0x96>
 8013942:	ebba 0b04 	subs.w	fp, sl, r4
 8013946:	d00b      	beq.n	8013960 <_vfiprintf_r+0xc0>
 8013948:	465b      	mov	r3, fp
 801394a:	4622      	mov	r2, r4
 801394c:	4629      	mov	r1, r5
 801394e:	4630      	mov	r0, r6
 8013950:	f7ff ff93 	bl	801387a <__sfputs_r>
 8013954:	3001      	adds	r0, #1
 8013956:	f000 80aa 	beq.w	8013aae <_vfiprintf_r+0x20e>
 801395a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801395c:	445a      	add	r2, fp
 801395e:	9209      	str	r2, [sp, #36]	; 0x24
 8013960:	f89a 3000 	ldrb.w	r3, [sl]
 8013964:	2b00      	cmp	r3, #0
 8013966:	f000 80a2 	beq.w	8013aae <_vfiprintf_r+0x20e>
 801396a:	2300      	movs	r3, #0
 801396c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013974:	f10a 0a01 	add.w	sl, sl, #1
 8013978:	9304      	str	r3, [sp, #16]
 801397a:	9307      	str	r3, [sp, #28]
 801397c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013980:	931a      	str	r3, [sp, #104]	; 0x68
 8013982:	4654      	mov	r4, sl
 8013984:	2205      	movs	r2, #5
 8013986:	f814 1b01 	ldrb.w	r1, [r4], #1
 801398a:	4858      	ldr	r0, [pc, #352]	; (8013aec <_vfiprintf_r+0x24c>)
 801398c:	f7ec fca8 	bl	80002e0 <memchr>
 8013990:	9a04      	ldr	r2, [sp, #16]
 8013992:	b9d8      	cbnz	r0, 80139cc <_vfiprintf_r+0x12c>
 8013994:	06d1      	lsls	r1, r2, #27
 8013996:	bf44      	itt	mi
 8013998:	2320      	movmi	r3, #32
 801399a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801399e:	0713      	lsls	r3, r2, #28
 80139a0:	bf44      	itt	mi
 80139a2:	232b      	movmi	r3, #43	; 0x2b
 80139a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139a8:	f89a 3000 	ldrb.w	r3, [sl]
 80139ac:	2b2a      	cmp	r3, #42	; 0x2a
 80139ae:	d015      	beq.n	80139dc <_vfiprintf_r+0x13c>
 80139b0:	9a07      	ldr	r2, [sp, #28]
 80139b2:	4654      	mov	r4, sl
 80139b4:	2000      	movs	r0, #0
 80139b6:	f04f 0c0a 	mov.w	ip, #10
 80139ba:	4621      	mov	r1, r4
 80139bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139c0:	3b30      	subs	r3, #48	; 0x30
 80139c2:	2b09      	cmp	r3, #9
 80139c4:	d94e      	bls.n	8013a64 <_vfiprintf_r+0x1c4>
 80139c6:	b1b0      	cbz	r0, 80139f6 <_vfiprintf_r+0x156>
 80139c8:	9207      	str	r2, [sp, #28]
 80139ca:	e014      	b.n	80139f6 <_vfiprintf_r+0x156>
 80139cc:	eba0 0308 	sub.w	r3, r0, r8
 80139d0:	fa09 f303 	lsl.w	r3, r9, r3
 80139d4:	4313      	orrs	r3, r2
 80139d6:	9304      	str	r3, [sp, #16]
 80139d8:	46a2      	mov	sl, r4
 80139da:	e7d2      	b.n	8013982 <_vfiprintf_r+0xe2>
 80139dc:	9b03      	ldr	r3, [sp, #12]
 80139de:	1d19      	adds	r1, r3, #4
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	9103      	str	r1, [sp, #12]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	bfbb      	ittet	lt
 80139e8:	425b      	neglt	r3, r3
 80139ea:	f042 0202 	orrlt.w	r2, r2, #2
 80139ee:	9307      	strge	r3, [sp, #28]
 80139f0:	9307      	strlt	r3, [sp, #28]
 80139f2:	bfb8      	it	lt
 80139f4:	9204      	strlt	r2, [sp, #16]
 80139f6:	7823      	ldrb	r3, [r4, #0]
 80139f8:	2b2e      	cmp	r3, #46	; 0x2e
 80139fa:	d10c      	bne.n	8013a16 <_vfiprintf_r+0x176>
 80139fc:	7863      	ldrb	r3, [r4, #1]
 80139fe:	2b2a      	cmp	r3, #42	; 0x2a
 8013a00:	d135      	bne.n	8013a6e <_vfiprintf_r+0x1ce>
 8013a02:	9b03      	ldr	r3, [sp, #12]
 8013a04:	1d1a      	adds	r2, r3, #4
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	9203      	str	r2, [sp, #12]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	bfb8      	it	lt
 8013a0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013a12:	3402      	adds	r4, #2
 8013a14:	9305      	str	r3, [sp, #20]
 8013a16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013afc <_vfiprintf_r+0x25c>
 8013a1a:	7821      	ldrb	r1, [r4, #0]
 8013a1c:	2203      	movs	r2, #3
 8013a1e:	4650      	mov	r0, sl
 8013a20:	f7ec fc5e 	bl	80002e0 <memchr>
 8013a24:	b140      	cbz	r0, 8013a38 <_vfiprintf_r+0x198>
 8013a26:	2340      	movs	r3, #64	; 0x40
 8013a28:	eba0 000a 	sub.w	r0, r0, sl
 8013a2c:	fa03 f000 	lsl.w	r0, r3, r0
 8013a30:	9b04      	ldr	r3, [sp, #16]
 8013a32:	4303      	orrs	r3, r0
 8013a34:	3401      	adds	r4, #1
 8013a36:	9304      	str	r3, [sp, #16]
 8013a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a3c:	482c      	ldr	r0, [pc, #176]	; (8013af0 <_vfiprintf_r+0x250>)
 8013a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a42:	2206      	movs	r2, #6
 8013a44:	f7ec fc4c 	bl	80002e0 <memchr>
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	d03f      	beq.n	8013acc <_vfiprintf_r+0x22c>
 8013a4c:	4b29      	ldr	r3, [pc, #164]	; (8013af4 <_vfiprintf_r+0x254>)
 8013a4e:	bb1b      	cbnz	r3, 8013a98 <_vfiprintf_r+0x1f8>
 8013a50:	9b03      	ldr	r3, [sp, #12]
 8013a52:	3307      	adds	r3, #7
 8013a54:	f023 0307 	bic.w	r3, r3, #7
 8013a58:	3308      	adds	r3, #8
 8013a5a:	9303      	str	r3, [sp, #12]
 8013a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a5e:	443b      	add	r3, r7
 8013a60:	9309      	str	r3, [sp, #36]	; 0x24
 8013a62:	e767      	b.n	8013934 <_vfiprintf_r+0x94>
 8013a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a68:	460c      	mov	r4, r1
 8013a6a:	2001      	movs	r0, #1
 8013a6c:	e7a5      	b.n	80139ba <_vfiprintf_r+0x11a>
 8013a6e:	2300      	movs	r3, #0
 8013a70:	3401      	adds	r4, #1
 8013a72:	9305      	str	r3, [sp, #20]
 8013a74:	4619      	mov	r1, r3
 8013a76:	f04f 0c0a 	mov.w	ip, #10
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a80:	3a30      	subs	r2, #48	; 0x30
 8013a82:	2a09      	cmp	r2, #9
 8013a84:	d903      	bls.n	8013a8e <_vfiprintf_r+0x1ee>
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d0c5      	beq.n	8013a16 <_vfiprintf_r+0x176>
 8013a8a:	9105      	str	r1, [sp, #20]
 8013a8c:	e7c3      	b.n	8013a16 <_vfiprintf_r+0x176>
 8013a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a92:	4604      	mov	r4, r0
 8013a94:	2301      	movs	r3, #1
 8013a96:	e7f0      	b.n	8013a7a <_vfiprintf_r+0x1da>
 8013a98:	ab03      	add	r3, sp, #12
 8013a9a:	9300      	str	r3, [sp, #0]
 8013a9c:	462a      	mov	r2, r5
 8013a9e:	4b16      	ldr	r3, [pc, #88]	; (8013af8 <_vfiprintf_r+0x258>)
 8013aa0:	a904      	add	r1, sp, #16
 8013aa2:	4630      	mov	r0, r6
 8013aa4:	f3af 8000 	nop.w
 8013aa8:	4607      	mov	r7, r0
 8013aaa:	1c78      	adds	r0, r7, #1
 8013aac:	d1d6      	bne.n	8013a5c <_vfiprintf_r+0x1bc>
 8013aae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ab0:	07d9      	lsls	r1, r3, #31
 8013ab2:	d405      	bmi.n	8013ac0 <_vfiprintf_r+0x220>
 8013ab4:	89ab      	ldrh	r3, [r5, #12]
 8013ab6:	059a      	lsls	r2, r3, #22
 8013ab8:	d402      	bmi.n	8013ac0 <_vfiprintf_r+0x220>
 8013aba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013abc:	f7ff fe53 	bl	8013766 <__retarget_lock_release_recursive>
 8013ac0:	89ab      	ldrh	r3, [r5, #12]
 8013ac2:	065b      	lsls	r3, r3, #25
 8013ac4:	f53f af12 	bmi.w	80138ec <_vfiprintf_r+0x4c>
 8013ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013aca:	e711      	b.n	80138f0 <_vfiprintf_r+0x50>
 8013acc:	ab03      	add	r3, sp, #12
 8013ace:	9300      	str	r3, [sp, #0]
 8013ad0:	462a      	mov	r2, r5
 8013ad2:	4b09      	ldr	r3, [pc, #36]	; (8013af8 <_vfiprintf_r+0x258>)
 8013ad4:	a904      	add	r1, sp, #16
 8013ad6:	4630      	mov	r0, r6
 8013ad8:	f000 f880 	bl	8013bdc <_printf_i>
 8013adc:	e7e4      	b.n	8013aa8 <_vfiprintf_r+0x208>
 8013ade:	bf00      	nop
 8013ae0:	08014364 	.word	0x08014364
 8013ae4:	08014384 	.word	0x08014384
 8013ae8:	08014344 	.word	0x08014344
 8013aec:	080143a4 	.word	0x080143a4
 8013af0:	080143ae 	.word	0x080143ae
 8013af4:	00000000 	.word	0x00000000
 8013af8:	0801387b 	.word	0x0801387b
 8013afc:	080143aa 	.word	0x080143aa

08013b00 <_printf_common>:
 8013b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b04:	4616      	mov	r6, r2
 8013b06:	4699      	mov	r9, r3
 8013b08:	688a      	ldr	r2, [r1, #8]
 8013b0a:	690b      	ldr	r3, [r1, #16]
 8013b0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b10:	4293      	cmp	r3, r2
 8013b12:	bfb8      	it	lt
 8013b14:	4613      	movlt	r3, r2
 8013b16:	6033      	str	r3, [r6, #0]
 8013b18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b1c:	4607      	mov	r7, r0
 8013b1e:	460c      	mov	r4, r1
 8013b20:	b10a      	cbz	r2, 8013b26 <_printf_common+0x26>
 8013b22:	3301      	adds	r3, #1
 8013b24:	6033      	str	r3, [r6, #0]
 8013b26:	6823      	ldr	r3, [r4, #0]
 8013b28:	0699      	lsls	r1, r3, #26
 8013b2a:	bf42      	ittt	mi
 8013b2c:	6833      	ldrmi	r3, [r6, #0]
 8013b2e:	3302      	addmi	r3, #2
 8013b30:	6033      	strmi	r3, [r6, #0]
 8013b32:	6825      	ldr	r5, [r4, #0]
 8013b34:	f015 0506 	ands.w	r5, r5, #6
 8013b38:	d106      	bne.n	8013b48 <_printf_common+0x48>
 8013b3a:	f104 0a19 	add.w	sl, r4, #25
 8013b3e:	68e3      	ldr	r3, [r4, #12]
 8013b40:	6832      	ldr	r2, [r6, #0]
 8013b42:	1a9b      	subs	r3, r3, r2
 8013b44:	42ab      	cmp	r3, r5
 8013b46:	dc26      	bgt.n	8013b96 <_printf_common+0x96>
 8013b48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013b4c:	1e13      	subs	r3, r2, #0
 8013b4e:	6822      	ldr	r2, [r4, #0]
 8013b50:	bf18      	it	ne
 8013b52:	2301      	movne	r3, #1
 8013b54:	0692      	lsls	r2, r2, #26
 8013b56:	d42b      	bmi.n	8013bb0 <_printf_common+0xb0>
 8013b58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b5c:	4649      	mov	r1, r9
 8013b5e:	4638      	mov	r0, r7
 8013b60:	47c0      	blx	r8
 8013b62:	3001      	adds	r0, #1
 8013b64:	d01e      	beq.n	8013ba4 <_printf_common+0xa4>
 8013b66:	6823      	ldr	r3, [r4, #0]
 8013b68:	68e5      	ldr	r5, [r4, #12]
 8013b6a:	6832      	ldr	r2, [r6, #0]
 8013b6c:	f003 0306 	and.w	r3, r3, #6
 8013b70:	2b04      	cmp	r3, #4
 8013b72:	bf08      	it	eq
 8013b74:	1aad      	subeq	r5, r5, r2
 8013b76:	68a3      	ldr	r3, [r4, #8]
 8013b78:	6922      	ldr	r2, [r4, #16]
 8013b7a:	bf0c      	ite	eq
 8013b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b80:	2500      	movne	r5, #0
 8013b82:	4293      	cmp	r3, r2
 8013b84:	bfc4      	itt	gt
 8013b86:	1a9b      	subgt	r3, r3, r2
 8013b88:	18ed      	addgt	r5, r5, r3
 8013b8a:	2600      	movs	r6, #0
 8013b8c:	341a      	adds	r4, #26
 8013b8e:	42b5      	cmp	r5, r6
 8013b90:	d11a      	bne.n	8013bc8 <_printf_common+0xc8>
 8013b92:	2000      	movs	r0, #0
 8013b94:	e008      	b.n	8013ba8 <_printf_common+0xa8>
 8013b96:	2301      	movs	r3, #1
 8013b98:	4652      	mov	r2, sl
 8013b9a:	4649      	mov	r1, r9
 8013b9c:	4638      	mov	r0, r7
 8013b9e:	47c0      	blx	r8
 8013ba0:	3001      	adds	r0, #1
 8013ba2:	d103      	bne.n	8013bac <_printf_common+0xac>
 8013ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bac:	3501      	adds	r5, #1
 8013bae:	e7c6      	b.n	8013b3e <_printf_common+0x3e>
 8013bb0:	18e1      	adds	r1, r4, r3
 8013bb2:	1c5a      	adds	r2, r3, #1
 8013bb4:	2030      	movs	r0, #48	; 0x30
 8013bb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013bba:	4422      	add	r2, r4
 8013bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013bc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013bc4:	3302      	adds	r3, #2
 8013bc6:	e7c7      	b.n	8013b58 <_printf_common+0x58>
 8013bc8:	2301      	movs	r3, #1
 8013bca:	4622      	mov	r2, r4
 8013bcc:	4649      	mov	r1, r9
 8013bce:	4638      	mov	r0, r7
 8013bd0:	47c0      	blx	r8
 8013bd2:	3001      	adds	r0, #1
 8013bd4:	d0e6      	beq.n	8013ba4 <_printf_common+0xa4>
 8013bd6:	3601      	adds	r6, #1
 8013bd8:	e7d9      	b.n	8013b8e <_printf_common+0x8e>
	...

08013bdc <_printf_i>:
 8013bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013be0:	7e0f      	ldrb	r7, [r1, #24]
 8013be2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013be4:	2f78      	cmp	r7, #120	; 0x78
 8013be6:	4691      	mov	r9, r2
 8013be8:	4680      	mov	r8, r0
 8013bea:	460c      	mov	r4, r1
 8013bec:	469a      	mov	sl, r3
 8013bee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013bf2:	d807      	bhi.n	8013c04 <_printf_i+0x28>
 8013bf4:	2f62      	cmp	r7, #98	; 0x62
 8013bf6:	d80a      	bhi.n	8013c0e <_printf_i+0x32>
 8013bf8:	2f00      	cmp	r7, #0
 8013bfa:	f000 80d8 	beq.w	8013dae <_printf_i+0x1d2>
 8013bfe:	2f58      	cmp	r7, #88	; 0x58
 8013c00:	f000 80a3 	beq.w	8013d4a <_printf_i+0x16e>
 8013c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013c0c:	e03a      	b.n	8013c84 <_printf_i+0xa8>
 8013c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013c12:	2b15      	cmp	r3, #21
 8013c14:	d8f6      	bhi.n	8013c04 <_printf_i+0x28>
 8013c16:	a101      	add	r1, pc, #4	; (adr r1, 8013c1c <_printf_i+0x40>)
 8013c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c1c:	08013c75 	.word	0x08013c75
 8013c20:	08013c89 	.word	0x08013c89
 8013c24:	08013c05 	.word	0x08013c05
 8013c28:	08013c05 	.word	0x08013c05
 8013c2c:	08013c05 	.word	0x08013c05
 8013c30:	08013c05 	.word	0x08013c05
 8013c34:	08013c89 	.word	0x08013c89
 8013c38:	08013c05 	.word	0x08013c05
 8013c3c:	08013c05 	.word	0x08013c05
 8013c40:	08013c05 	.word	0x08013c05
 8013c44:	08013c05 	.word	0x08013c05
 8013c48:	08013d95 	.word	0x08013d95
 8013c4c:	08013cb9 	.word	0x08013cb9
 8013c50:	08013d77 	.word	0x08013d77
 8013c54:	08013c05 	.word	0x08013c05
 8013c58:	08013c05 	.word	0x08013c05
 8013c5c:	08013db7 	.word	0x08013db7
 8013c60:	08013c05 	.word	0x08013c05
 8013c64:	08013cb9 	.word	0x08013cb9
 8013c68:	08013c05 	.word	0x08013c05
 8013c6c:	08013c05 	.word	0x08013c05
 8013c70:	08013d7f 	.word	0x08013d7f
 8013c74:	682b      	ldr	r3, [r5, #0]
 8013c76:	1d1a      	adds	r2, r3, #4
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	602a      	str	r2, [r5, #0]
 8013c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c84:	2301      	movs	r3, #1
 8013c86:	e0a3      	b.n	8013dd0 <_printf_i+0x1f4>
 8013c88:	6820      	ldr	r0, [r4, #0]
 8013c8a:	6829      	ldr	r1, [r5, #0]
 8013c8c:	0606      	lsls	r6, r0, #24
 8013c8e:	f101 0304 	add.w	r3, r1, #4
 8013c92:	d50a      	bpl.n	8013caa <_printf_i+0xce>
 8013c94:	680e      	ldr	r6, [r1, #0]
 8013c96:	602b      	str	r3, [r5, #0]
 8013c98:	2e00      	cmp	r6, #0
 8013c9a:	da03      	bge.n	8013ca4 <_printf_i+0xc8>
 8013c9c:	232d      	movs	r3, #45	; 0x2d
 8013c9e:	4276      	negs	r6, r6
 8013ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ca4:	485e      	ldr	r0, [pc, #376]	; (8013e20 <_printf_i+0x244>)
 8013ca6:	230a      	movs	r3, #10
 8013ca8:	e019      	b.n	8013cde <_printf_i+0x102>
 8013caa:	680e      	ldr	r6, [r1, #0]
 8013cac:	602b      	str	r3, [r5, #0]
 8013cae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013cb2:	bf18      	it	ne
 8013cb4:	b236      	sxthne	r6, r6
 8013cb6:	e7ef      	b.n	8013c98 <_printf_i+0xbc>
 8013cb8:	682b      	ldr	r3, [r5, #0]
 8013cba:	6820      	ldr	r0, [r4, #0]
 8013cbc:	1d19      	adds	r1, r3, #4
 8013cbe:	6029      	str	r1, [r5, #0]
 8013cc0:	0601      	lsls	r1, r0, #24
 8013cc2:	d501      	bpl.n	8013cc8 <_printf_i+0xec>
 8013cc4:	681e      	ldr	r6, [r3, #0]
 8013cc6:	e002      	b.n	8013cce <_printf_i+0xf2>
 8013cc8:	0646      	lsls	r6, r0, #25
 8013cca:	d5fb      	bpl.n	8013cc4 <_printf_i+0xe8>
 8013ccc:	881e      	ldrh	r6, [r3, #0]
 8013cce:	4854      	ldr	r0, [pc, #336]	; (8013e20 <_printf_i+0x244>)
 8013cd0:	2f6f      	cmp	r7, #111	; 0x6f
 8013cd2:	bf0c      	ite	eq
 8013cd4:	2308      	moveq	r3, #8
 8013cd6:	230a      	movne	r3, #10
 8013cd8:	2100      	movs	r1, #0
 8013cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013cde:	6865      	ldr	r5, [r4, #4]
 8013ce0:	60a5      	str	r5, [r4, #8]
 8013ce2:	2d00      	cmp	r5, #0
 8013ce4:	bfa2      	ittt	ge
 8013ce6:	6821      	ldrge	r1, [r4, #0]
 8013ce8:	f021 0104 	bicge.w	r1, r1, #4
 8013cec:	6021      	strge	r1, [r4, #0]
 8013cee:	b90e      	cbnz	r6, 8013cf4 <_printf_i+0x118>
 8013cf0:	2d00      	cmp	r5, #0
 8013cf2:	d04d      	beq.n	8013d90 <_printf_i+0x1b4>
 8013cf4:	4615      	mov	r5, r2
 8013cf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8013cfa:	fb03 6711 	mls	r7, r3, r1, r6
 8013cfe:	5dc7      	ldrb	r7, [r0, r7]
 8013d00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013d04:	4637      	mov	r7, r6
 8013d06:	42bb      	cmp	r3, r7
 8013d08:	460e      	mov	r6, r1
 8013d0a:	d9f4      	bls.n	8013cf6 <_printf_i+0x11a>
 8013d0c:	2b08      	cmp	r3, #8
 8013d0e:	d10b      	bne.n	8013d28 <_printf_i+0x14c>
 8013d10:	6823      	ldr	r3, [r4, #0]
 8013d12:	07de      	lsls	r6, r3, #31
 8013d14:	d508      	bpl.n	8013d28 <_printf_i+0x14c>
 8013d16:	6923      	ldr	r3, [r4, #16]
 8013d18:	6861      	ldr	r1, [r4, #4]
 8013d1a:	4299      	cmp	r1, r3
 8013d1c:	bfde      	ittt	le
 8013d1e:	2330      	movle	r3, #48	; 0x30
 8013d20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013d24:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013d28:	1b52      	subs	r2, r2, r5
 8013d2a:	6122      	str	r2, [r4, #16]
 8013d2c:	f8cd a000 	str.w	sl, [sp]
 8013d30:	464b      	mov	r3, r9
 8013d32:	aa03      	add	r2, sp, #12
 8013d34:	4621      	mov	r1, r4
 8013d36:	4640      	mov	r0, r8
 8013d38:	f7ff fee2 	bl	8013b00 <_printf_common>
 8013d3c:	3001      	adds	r0, #1
 8013d3e:	d14c      	bne.n	8013dda <_printf_i+0x1fe>
 8013d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d44:	b004      	add	sp, #16
 8013d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d4a:	4835      	ldr	r0, [pc, #212]	; (8013e20 <_printf_i+0x244>)
 8013d4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013d50:	6829      	ldr	r1, [r5, #0]
 8013d52:	6823      	ldr	r3, [r4, #0]
 8013d54:	f851 6b04 	ldr.w	r6, [r1], #4
 8013d58:	6029      	str	r1, [r5, #0]
 8013d5a:	061d      	lsls	r5, r3, #24
 8013d5c:	d514      	bpl.n	8013d88 <_printf_i+0x1ac>
 8013d5e:	07df      	lsls	r7, r3, #31
 8013d60:	bf44      	itt	mi
 8013d62:	f043 0320 	orrmi.w	r3, r3, #32
 8013d66:	6023      	strmi	r3, [r4, #0]
 8013d68:	b91e      	cbnz	r6, 8013d72 <_printf_i+0x196>
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	f023 0320 	bic.w	r3, r3, #32
 8013d70:	6023      	str	r3, [r4, #0]
 8013d72:	2310      	movs	r3, #16
 8013d74:	e7b0      	b.n	8013cd8 <_printf_i+0xfc>
 8013d76:	6823      	ldr	r3, [r4, #0]
 8013d78:	f043 0320 	orr.w	r3, r3, #32
 8013d7c:	6023      	str	r3, [r4, #0]
 8013d7e:	2378      	movs	r3, #120	; 0x78
 8013d80:	4828      	ldr	r0, [pc, #160]	; (8013e24 <_printf_i+0x248>)
 8013d82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013d86:	e7e3      	b.n	8013d50 <_printf_i+0x174>
 8013d88:	0659      	lsls	r1, r3, #25
 8013d8a:	bf48      	it	mi
 8013d8c:	b2b6      	uxthmi	r6, r6
 8013d8e:	e7e6      	b.n	8013d5e <_printf_i+0x182>
 8013d90:	4615      	mov	r5, r2
 8013d92:	e7bb      	b.n	8013d0c <_printf_i+0x130>
 8013d94:	682b      	ldr	r3, [r5, #0]
 8013d96:	6826      	ldr	r6, [r4, #0]
 8013d98:	6961      	ldr	r1, [r4, #20]
 8013d9a:	1d18      	adds	r0, r3, #4
 8013d9c:	6028      	str	r0, [r5, #0]
 8013d9e:	0635      	lsls	r5, r6, #24
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	d501      	bpl.n	8013da8 <_printf_i+0x1cc>
 8013da4:	6019      	str	r1, [r3, #0]
 8013da6:	e002      	b.n	8013dae <_printf_i+0x1d2>
 8013da8:	0670      	lsls	r0, r6, #25
 8013daa:	d5fb      	bpl.n	8013da4 <_printf_i+0x1c8>
 8013dac:	8019      	strh	r1, [r3, #0]
 8013dae:	2300      	movs	r3, #0
 8013db0:	6123      	str	r3, [r4, #16]
 8013db2:	4615      	mov	r5, r2
 8013db4:	e7ba      	b.n	8013d2c <_printf_i+0x150>
 8013db6:	682b      	ldr	r3, [r5, #0]
 8013db8:	1d1a      	adds	r2, r3, #4
 8013dba:	602a      	str	r2, [r5, #0]
 8013dbc:	681d      	ldr	r5, [r3, #0]
 8013dbe:	6862      	ldr	r2, [r4, #4]
 8013dc0:	2100      	movs	r1, #0
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	f7ec fa8c 	bl	80002e0 <memchr>
 8013dc8:	b108      	cbz	r0, 8013dce <_printf_i+0x1f2>
 8013dca:	1b40      	subs	r0, r0, r5
 8013dcc:	6060      	str	r0, [r4, #4]
 8013dce:	6863      	ldr	r3, [r4, #4]
 8013dd0:	6123      	str	r3, [r4, #16]
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013dd8:	e7a8      	b.n	8013d2c <_printf_i+0x150>
 8013dda:	6923      	ldr	r3, [r4, #16]
 8013ddc:	462a      	mov	r2, r5
 8013dde:	4649      	mov	r1, r9
 8013de0:	4640      	mov	r0, r8
 8013de2:	47d0      	blx	sl
 8013de4:	3001      	adds	r0, #1
 8013de6:	d0ab      	beq.n	8013d40 <_printf_i+0x164>
 8013de8:	6823      	ldr	r3, [r4, #0]
 8013dea:	079b      	lsls	r3, r3, #30
 8013dec:	d413      	bmi.n	8013e16 <_printf_i+0x23a>
 8013dee:	68e0      	ldr	r0, [r4, #12]
 8013df0:	9b03      	ldr	r3, [sp, #12]
 8013df2:	4298      	cmp	r0, r3
 8013df4:	bfb8      	it	lt
 8013df6:	4618      	movlt	r0, r3
 8013df8:	e7a4      	b.n	8013d44 <_printf_i+0x168>
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	4632      	mov	r2, r6
 8013dfe:	4649      	mov	r1, r9
 8013e00:	4640      	mov	r0, r8
 8013e02:	47d0      	blx	sl
 8013e04:	3001      	adds	r0, #1
 8013e06:	d09b      	beq.n	8013d40 <_printf_i+0x164>
 8013e08:	3501      	adds	r5, #1
 8013e0a:	68e3      	ldr	r3, [r4, #12]
 8013e0c:	9903      	ldr	r1, [sp, #12]
 8013e0e:	1a5b      	subs	r3, r3, r1
 8013e10:	42ab      	cmp	r3, r5
 8013e12:	dcf2      	bgt.n	8013dfa <_printf_i+0x21e>
 8013e14:	e7eb      	b.n	8013dee <_printf_i+0x212>
 8013e16:	2500      	movs	r5, #0
 8013e18:	f104 0619 	add.w	r6, r4, #25
 8013e1c:	e7f5      	b.n	8013e0a <_printf_i+0x22e>
 8013e1e:	bf00      	nop
 8013e20:	080143b5 	.word	0x080143b5
 8013e24:	080143c6 	.word	0x080143c6

08013e28 <_putc_r>:
 8013e28:	b570      	push	{r4, r5, r6, lr}
 8013e2a:	460d      	mov	r5, r1
 8013e2c:	4614      	mov	r4, r2
 8013e2e:	4606      	mov	r6, r0
 8013e30:	b118      	cbz	r0, 8013e3a <_putc_r+0x12>
 8013e32:	6983      	ldr	r3, [r0, #24]
 8013e34:	b90b      	cbnz	r3, 8013e3a <_putc_r+0x12>
 8013e36:	f7ff fbf7 	bl	8013628 <__sinit>
 8013e3a:	4b1c      	ldr	r3, [pc, #112]	; (8013eac <_putc_r+0x84>)
 8013e3c:	429c      	cmp	r4, r3
 8013e3e:	d124      	bne.n	8013e8a <_putc_r+0x62>
 8013e40:	6874      	ldr	r4, [r6, #4]
 8013e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e44:	07d8      	lsls	r0, r3, #31
 8013e46:	d405      	bmi.n	8013e54 <_putc_r+0x2c>
 8013e48:	89a3      	ldrh	r3, [r4, #12]
 8013e4a:	0599      	lsls	r1, r3, #22
 8013e4c:	d402      	bmi.n	8013e54 <_putc_r+0x2c>
 8013e4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e50:	f7ff fc88 	bl	8013764 <__retarget_lock_acquire_recursive>
 8013e54:	68a3      	ldr	r3, [r4, #8]
 8013e56:	3b01      	subs	r3, #1
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	60a3      	str	r3, [r4, #8]
 8013e5c:	da05      	bge.n	8013e6a <_putc_r+0x42>
 8013e5e:	69a2      	ldr	r2, [r4, #24]
 8013e60:	4293      	cmp	r3, r2
 8013e62:	db1c      	blt.n	8013e9e <_putc_r+0x76>
 8013e64:	b2eb      	uxtb	r3, r5
 8013e66:	2b0a      	cmp	r3, #10
 8013e68:	d019      	beq.n	8013e9e <_putc_r+0x76>
 8013e6a:	6823      	ldr	r3, [r4, #0]
 8013e6c:	1c5a      	adds	r2, r3, #1
 8013e6e:	6022      	str	r2, [r4, #0]
 8013e70:	701d      	strb	r5, [r3, #0]
 8013e72:	b2ed      	uxtb	r5, r5
 8013e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e76:	07da      	lsls	r2, r3, #31
 8013e78:	d405      	bmi.n	8013e86 <_putc_r+0x5e>
 8013e7a:	89a3      	ldrh	r3, [r4, #12]
 8013e7c:	059b      	lsls	r3, r3, #22
 8013e7e:	d402      	bmi.n	8013e86 <_putc_r+0x5e>
 8013e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e82:	f7ff fc70 	bl	8013766 <__retarget_lock_release_recursive>
 8013e86:	4628      	mov	r0, r5
 8013e88:	bd70      	pop	{r4, r5, r6, pc}
 8013e8a:	4b09      	ldr	r3, [pc, #36]	; (8013eb0 <_putc_r+0x88>)
 8013e8c:	429c      	cmp	r4, r3
 8013e8e:	d101      	bne.n	8013e94 <_putc_r+0x6c>
 8013e90:	68b4      	ldr	r4, [r6, #8]
 8013e92:	e7d6      	b.n	8013e42 <_putc_r+0x1a>
 8013e94:	4b07      	ldr	r3, [pc, #28]	; (8013eb4 <_putc_r+0x8c>)
 8013e96:	429c      	cmp	r4, r3
 8013e98:	bf08      	it	eq
 8013e9a:	68f4      	ldreq	r4, [r6, #12]
 8013e9c:	e7d1      	b.n	8013e42 <_putc_r+0x1a>
 8013e9e:	4629      	mov	r1, r5
 8013ea0:	4622      	mov	r2, r4
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	f7ff f9e6 	bl	8013274 <__swbuf_r>
 8013ea8:	4605      	mov	r5, r0
 8013eaa:	e7e3      	b.n	8013e74 <_putc_r+0x4c>
 8013eac:	08014364 	.word	0x08014364
 8013eb0:	08014384 	.word	0x08014384
 8013eb4:	08014344 	.word	0x08014344

08013eb8 <__sread>:
 8013eb8:	b510      	push	{r4, lr}
 8013eba:	460c      	mov	r4, r1
 8013ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ec0:	f000 f894 	bl	8013fec <_read_r>
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	bfab      	itete	ge
 8013ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013eca:	89a3      	ldrhlt	r3, [r4, #12]
 8013ecc:	181b      	addge	r3, r3, r0
 8013ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013ed2:	bfac      	ite	ge
 8013ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8013ed6:	81a3      	strhlt	r3, [r4, #12]
 8013ed8:	bd10      	pop	{r4, pc}

08013eda <__swrite>:
 8013eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ede:	461f      	mov	r7, r3
 8013ee0:	898b      	ldrh	r3, [r1, #12]
 8013ee2:	05db      	lsls	r3, r3, #23
 8013ee4:	4605      	mov	r5, r0
 8013ee6:	460c      	mov	r4, r1
 8013ee8:	4616      	mov	r6, r2
 8013eea:	d505      	bpl.n	8013ef8 <__swrite+0x1e>
 8013eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ef0:	2302      	movs	r3, #2
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	f000 f868 	bl	8013fc8 <_lseek_r>
 8013ef8:	89a3      	ldrh	r3, [r4, #12]
 8013efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013f02:	81a3      	strh	r3, [r4, #12]
 8013f04:	4632      	mov	r2, r6
 8013f06:	463b      	mov	r3, r7
 8013f08:	4628      	mov	r0, r5
 8013f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f0e:	f000 b817 	b.w	8013f40 <_write_r>

08013f12 <__sseek>:
 8013f12:	b510      	push	{r4, lr}
 8013f14:	460c      	mov	r4, r1
 8013f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f1a:	f000 f855 	bl	8013fc8 <_lseek_r>
 8013f1e:	1c43      	adds	r3, r0, #1
 8013f20:	89a3      	ldrh	r3, [r4, #12]
 8013f22:	bf15      	itete	ne
 8013f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8013f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013f2e:	81a3      	strheq	r3, [r4, #12]
 8013f30:	bf18      	it	ne
 8013f32:	81a3      	strhne	r3, [r4, #12]
 8013f34:	bd10      	pop	{r4, pc}

08013f36 <__sclose>:
 8013f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f3a:	f000 b813 	b.w	8013f64 <_close_r>
	...

08013f40 <_write_r>:
 8013f40:	b538      	push	{r3, r4, r5, lr}
 8013f42:	4d07      	ldr	r5, [pc, #28]	; (8013f60 <_write_r+0x20>)
 8013f44:	4604      	mov	r4, r0
 8013f46:	4608      	mov	r0, r1
 8013f48:	4611      	mov	r1, r2
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	602a      	str	r2, [r5, #0]
 8013f4e:	461a      	mov	r2, r3
 8013f50:	f7ee fba7 	bl	80026a2 <_write>
 8013f54:	1c43      	adds	r3, r0, #1
 8013f56:	d102      	bne.n	8013f5e <_write_r+0x1e>
 8013f58:	682b      	ldr	r3, [r5, #0]
 8013f5a:	b103      	cbz	r3, 8013f5e <_write_r+0x1e>
 8013f5c:	6023      	str	r3, [r4, #0]
 8013f5e:	bd38      	pop	{r3, r4, r5, pc}
 8013f60:	24004f98 	.word	0x24004f98

08013f64 <_close_r>:
 8013f64:	b538      	push	{r3, r4, r5, lr}
 8013f66:	4d06      	ldr	r5, [pc, #24]	; (8013f80 <_close_r+0x1c>)
 8013f68:	2300      	movs	r3, #0
 8013f6a:	4604      	mov	r4, r0
 8013f6c:	4608      	mov	r0, r1
 8013f6e:	602b      	str	r3, [r5, #0]
 8013f70:	f7ee fbb3 	bl	80026da <_close>
 8013f74:	1c43      	adds	r3, r0, #1
 8013f76:	d102      	bne.n	8013f7e <_close_r+0x1a>
 8013f78:	682b      	ldr	r3, [r5, #0]
 8013f7a:	b103      	cbz	r3, 8013f7e <_close_r+0x1a>
 8013f7c:	6023      	str	r3, [r4, #0]
 8013f7e:	bd38      	pop	{r3, r4, r5, pc}
 8013f80:	24004f98 	.word	0x24004f98

08013f84 <_fstat_r>:
 8013f84:	b538      	push	{r3, r4, r5, lr}
 8013f86:	4d07      	ldr	r5, [pc, #28]	; (8013fa4 <_fstat_r+0x20>)
 8013f88:	2300      	movs	r3, #0
 8013f8a:	4604      	mov	r4, r0
 8013f8c:	4608      	mov	r0, r1
 8013f8e:	4611      	mov	r1, r2
 8013f90:	602b      	str	r3, [r5, #0]
 8013f92:	f7ee fbae 	bl	80026f2 <_fstat>
 8013f96:	1c43      	adds	r3, r0, #1
 8013f98:	d102      	bne.n	8013fa0 <_fstat_r+0x1c>
 8013f9a:	682b      	ldr	r3, [r5, #0]
 8013f9c:	b103      	cbz	r3, 8013fa0 <_fstat_r+0x1c>
 8013f9e:	6023      	str	r3, [r4, #0]
 8013fa0:	bd38      	pop	{r3, r4, r5, pc}
 8013fa2:	bf00      	nop
 8013fa4:	24004f98 	.word	0x24004f98

08013fa8 <_isatty_r>:
 8013fa8:	b538      	push	{r3, r4, r5, lr}
 8013faa:	4d06      	ldr	r5, [pc, #24]	; (8013fc4 <_isatty_r+0x1c>)
 8013fac:	2300      	movs	r3, #0
 8013fae:	4604      	mov	r4, r0
 8013fb0:	4608      	mov	r0, r1
 8013fb2:	602b      	str	r3, [r5, #0]
 8013fb4:	f7ee fbad 	bl	8002712 <_isatty>
 8013fb8:	1c43      	adds	r3, r0, #1
 8013fba:	d102      	bne.n	8013fc2 <_isatty_r+0x1a>
 8013fbc:	682b      	ldr	r3, [r5, #0]
 8013fbe:	b103      	cbz	r3, 8013fc2 <_isatty_r+0x1a>
 8013fc0:	6023      	str	r3, [r4, #0]
 8013fc2:	bd38      	pop	{r3, r4, r5, pc}
 8013fc4:	24004f98 	.word	0x24004f98

08013fc8 <_lseek_r>:
 8013fc8:	b538      	push	{r3, r4, r5, lr}
 8013fca:	4d07      	ldr	r5, [pc, #28]	; (8013fe8 <_lseek_r+0x20>)
 8013fcc:	4604      	mov	r4, r0
 8013fce:	4608      	mov	r0, r1
 8013fd0:	4611      	mov	r1, r2
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	602a      	str	r2, [r5, #0]
 8013fd6:	461a      	mov	r2, r3
 8013fd8:	f7ee fba6 	bl	8002728 <_lseek>
 8013fdc:	1c43      	adds	r3, r0, #1
 8013fde:	d102      	bne.n	8013fe6 <_lseek_r+0x1e>
 8013fe0:	682b      	ldr	r3, [r5, #0]
 8013fe2:	b103      	cbz	r3, 8013fe6 <_lseek_r+0x1e>
 8013fe4:	6023      	str	r3, [r4, #0]
 8013fe6:	bd38      	pop	{r3, r4, r5, pc}
 8013fe8:	24004f98 	.word	0x24004f98

08013fec <_read_r>:
 8013fec:	b538      	push	{r3, r4, r5, lr}
 8013fee:	4d07      	ldr	r5, [pc, #28]	; (801400c <_read_r+0x20>)
 8013ff0:	4604      	mov	r4, r0
 8013ff2:	4608      	mov	r0, r1
 8013ff4:	4611      	mov	r1, r2
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	602a      	str	r2, [r5, #0]
 8013ffa:	461a      	mov	r2, r3
 8013ffc:	f7ee fb34 	bl	8002668 <_read>
 8014000:	1c43      	adds	r3, r0, #1
 8014002:	d102      	bne.n	801400a <_read_r+0x1e>
 8014004:	682b      	ldr	r3, [r5, #0]
 8014006:	b103      	cbz	r3, 801400a <_read_r+0x1e>
 8014008:	6023      	str	r3, [r4, #0]
 801400a:	bd38      	pop	{r3, r4, r5, pc}
 801400c:	24004f98 	.word	0x24004f98

08014010 <_init>:
 8014010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014012:	bf00      	nop
 8014014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014016:	bc08      	pop	{r3}
 8014018:	469e      	mov	lr, r3
 801401a:	4770      	bx	lr

0801401c <_fini>:
 801401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801401e:	bf00      	nop
 8014020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014022:	bc08      	pop	{r3}
 8014024:	469e      	mov	lr, r3
 8014026:	4770      	bx	lr
