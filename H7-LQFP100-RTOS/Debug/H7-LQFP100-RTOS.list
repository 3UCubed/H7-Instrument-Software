
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008468  08008468  00018468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008520  08008520  00018520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008524  08008524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  08008528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c30  24000064  0800858c  00020064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004c94  0800858c  00024c94  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020504  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003aa1  00000000  00000000  000405d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017c0  00000000  00000000  00044080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001282  00000000  00000000  00045840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00004151  00000000  00000000  00046ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001c50f  00000000  00000000  0004ac13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016e9de  00000000  00000000  00067122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000067f0  00000000  00000000  001d5b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  001dc2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008450 	.word	0x08008450

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08008450 	.word	0x08008450

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fb1e 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f826 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8dc 	bl	80007a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ec:	f000 f88e 	bl	800070c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f0:	f005 f8c8 	bl	8005784 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f4:	4a09      	ldr	r2, [pc, #36]	; (800061c <main+0x40>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <main+0x44>)
 80005fa:	f005 f90d 	bl	8005818 <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a08      	ldr	r2, [pc, #32]	; (8000624 <main+0x48>)
 8000602:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000604:	4a08      	ldr	r2, [pc, #32]	; (8000628 <main+0x4c>)
 8000606:	2100      	movs	r1, #0
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <main+0x50>)
 800060a:	f005 f905 	bl	8005818 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <main+0x54>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f005 f8da 	bl	80057cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x3c>
 800061a:	bf00      	nop
 800061c:	08008498 	.word	0x08008498
 8000620:	0800082d 	.word	0x0800082d
 8000624:	24000114 	.word	0x24000114
 8000628:	080084bc 	.word	0x080084bc
 800062c:	08000869 	.word	0x08000869
 8000630:	24000118 	.word	0x24000118

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	; 0x70
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063e:	224c      	movs	r2, #76	; 0x4c
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 fe1a 	bl	800827c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2220      	movs	r2, #32
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f007 fe14 	bl	800827c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000654:	2002      	movs	r0, #2
 8000656:	f000 fe19 	bl	800128c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <SystemClock_Config+0xd0>)
 8000660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000662:	4a28      	ldr	r2, [pc, #160]	; (8000704 <SystemClock_Config+0xd0>)
 8000664:	f023 0301 	bic.w	r3, r3, #1
 8000668:	62d3      	str	r3, [r2, #44]	; 0x2c
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <SystemClock_Config+0xd0>)
 800066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b24      	ldr	r3, [pc, #144]	; (8000708 <SystemClock_Config+0xd4>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067c:	4a22      	ldr	r2, [pc, #136]	; (8000708 <SystemClock_Config+0xd4>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <SystemClock_Config+0xd4>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000690:	bf00      	nop
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <SystemClock_Config+0xd4>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800069a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800069e:	d1f8      	bne.n	8000692 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fe23 	bl	8001300 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006c0:	f000 f8ec 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	233f      	movs	r3, #63	; 0x3f
 80006c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2101      	movs	r1, #1
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fa62 	bl	8001bb4 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f6:	f000 f8d1 	bl	800089c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3770      	adds	r7, #112	; 0x70
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	58000400 	.word	0x58000400
 8000708:	58024800 	.word	0x58024800

0800070c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000712:	4a23      	ldr	r2, [pc, #140]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_USART1_UART_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_USART1_UART_Init+0x90>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART1_UART_Init+0x90>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000754:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000756:	f003 fef5 	bl	8004544 <HAL_UART_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000760:	f000 f89c 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000768:	f004 fefd 	bl	8005566 <HAL_UARTEx_SetTxFifoThreshold>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000772:	f000 f893 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4808      	ldr	r0, [pc, #32]	; (800079c <MX_USART1_UART_Init+0x90>)
 800077a:	f004 ff32 	bl	80055e2 <HAL_UARTEx_SetRxFifoThreshold>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000784:	f000 f88a 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_USART1_UART_Init+0x90>)
 800078a:	f004 feb3 	bl	80054f4 <HAL_UARTEx_DisableFifoMode>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 f882 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	24000080 	.word	0x24000080
 80007a0:	40011000 	.word	0x40011000

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_GPIO_Init+0x80>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c0:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_GPIO_Init+0x80>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_GPIO_Init+0x80>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_GPIO_Init+0x80>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007de:	4a11      	ldr	r2, [pc, #68]	; (8000824 <MX_GPIO_Init+0x80>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_GPIO_Init+0x80>)
 80007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <MX_GPIO_Init+0x84>)
 80007fc:	f000 fd2c 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0x84>)
 8000818:	f000 fb6e 	bl	8000ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	58024400 	.word	0x58024400
 8000828:	58020000 	.word	0x58020000

0800082c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <StartDefaultTask+0x38>)
 800083a:	f000 fd0d 	bl	8001258 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1250);
 800083e:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8000842:	f000 fa49 	bl	8000cd8 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <StartDefaultTask+0x38>)
 800084c:	f000 fd04 	bl	8001258 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1250);
 8000850:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8000854:	f000 fa40 	bl	8000cd8 <HAL_Delay>
    osDelay(2000);
 8000858:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800085c:	f005 f86e 	bl	800593c <osDelay>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000860:	e7e8      	b.n	8000834 <StartDefaultTask+0x8>
 8000862:	bf00      	nop
 8000864:	58020000 	.word	0x58020000

08000868 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f005 f863 	bl	800593c <osDelay>
 8000876:	e7fb      	b.n	8000870 <StartTask02+0x8>

08000878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d101      	bne.n	800088e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800088a:	f000 fa05 	bl	8000c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40010000 	.word	0x40010000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_MspInit+0x38>)
 80008b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008b4:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <HAL_MspInit+0x38>)
 80008b6:	f043 0302 	orr.w	r3, r3, #2
 80008ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_MspInit+0x38>)
 80008c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008c4:	f003 0302 	and.w	r3, r3, #2
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	210f      	movs	r1, #15
 80008d0:	f06f 0001 	mvn.w	r0, #1
 80008d4:	f000 fae8 	bl	8000ea8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	58024400 	.word	0x58024400

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0ba      	sub	sp, #232	; 0xe8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	22c0      	movs	r2, #192	; 0xc0
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f007 fcb9 	bl	800827c <memset>
  if(huart->Instance==USART1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a27      	ldr	r2, [pc, #156]	; (80009ac <HAL_UART_MspInit+0xc8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d146      	bne.n	80009a2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000914:	f04f 0201 	mov.w	r2, #1
 8000918:	f04f 0300 	mov.w	r3, #0
 800091c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000920:	2300      	movs	r3, #0
 8000922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fd10 	bl	8002350 <HAL_RCCEx_PeriphCLKConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000936:	f7ff ffb1 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <HAL_UART_MspInit+0xcc>)
 800093c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000940:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <HAL_UART_MspInit+0xcc>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_UART_MspInit+0xcc>)
 800094c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_MspInit+0xcc>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_UART_MspInit+0xcc>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_UART_MspInit+0xcc>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000976:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800097a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000990:	2304      	movs	r3, #4
 8000992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_UART_MspInit+0xd0>)
 800099e:	f000 faab 	bl	8000ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	37e8      	adds	r7, #232	; 0xe8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40011000 	.word	0x40011000
 80009b0:	58024400 	.word	0x58024400
 80009b4:	58020400 	.word	0x58020400

080009b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	; 0x38
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d844      	bhi.n	8000a50 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80009c6:	2200      	movs	r2, #0
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	2019      	movs	r0, #25
 80009cc:	f000 fa6c 	bl	8000ea8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009d0:	2019      	movs	r0, #25
 80009d2:	f000 fa83 	bl	8000edc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80009d6:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <HAL_InitTick+0xb0>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <HAL_InitTick+0xb4>)
 80009de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009e2:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <HAL_InitTick+0xb4>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <HAL_InitTick+0xb4>)
 80009ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009fa:	f107 020c 	add.w	r2, r7, #12
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 fc61 	bl	80022cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a0a:	f001 fc49 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a16:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <HAL_InitTick+0xb8>)
 8000a18:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1c:	0c9b      	lsrs	r3, r3, #18
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_InitTick+0xbc>)
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <HAL_InitTick+0xc0>)
 8000a26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0xbc>)
 8000a2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a30:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <HAL_InitTick+0xbc>)
 8000a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a34:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_InitTick+0xbc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_InitTick+0xbc>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a42:	480c      	ldr	r0, [pc, #48]	; (8000a74 <HAL_InitTick+0xbc>)
 8000a44:	f003 fab0 	bl	8003fa8 <HAL_TIM_Base_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d107      	bne.n	8000a5e <HAL_InitTick+0xa6>
 8000a4e:	e001      	b.n	8000a54 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e005      	b.n	8000a60 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <HAL_InitTick+0xbc>)
 8000a56:	f003 fb09 	bl	800406c <HAL_TIM_Base_Start_IT>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	24000008 	.word	0x24000008
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	2400011c 	.word	0x2400011c
 8000a78:	40010000 	.word	0x40010000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <TIM1_UP_IRQHandler+0x10>)
 8000aae:	f003 fb55 	bl	800415c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2400011c 	.word	0x2400011c

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <SystemInit+0xe4>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a36      	ldr	r2, [pc, #216]	; (8000ba0 <SystemInit+0xe4>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad0:	4b34      	ldr	r3, [pc, #208]	; (8000ba4 <SystemInit+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	2b06      	cmp	r3, #6
 8000ada:	d807      	bhi.n	8000aec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000adc:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <SystemInit+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f023 030f 	bic.w	r3, r3, #15
 8000ae4:	4a2f      	ldr	r2, [pc, #188]	; (8000ba4 <SystemInit+0xe8>)
 8000ae6:	f043 0307 	orr.w	r3, r3, #7
 8000aea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aec:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <SystemInit+0xec>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <SystemInit+0xec>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <SystemInit+0xec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <SystemInit+0xec>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4929      	ldr	r1, [pc, #164]	; (8000ba8 <SystemInit+0xec>)
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <SystemInit+0xf0>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <SystemInit+0xe8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <SystemInit+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f023 030f 	bic.w	r3, r3, #15
 8000b1e:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <SystemInit+0xe8>)
 8000b20:	f043 0307 	orr.w	r3, r3, #7
 8000b24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <SystemInit+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <SystemInit+0xec>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <SystemInit+0xec>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <SystemInit+0xec>)
 8000b3a:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <SystemInit+0xf4>)
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <SystemInit+0xec>)
 8000b40:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <SystemInit+0xf8>)
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <SystemInit+0xec>)
 8000b46:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <SystemInit+0xfc>)
 8000b48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <SystemInit+0xec>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <SystemInit+0xec>)
 8000b52:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <SystemInit+0xfc>)
 8000b54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <SystemInit+0xec>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <SystemInit+0xec>)
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <SystemInit+0xfc>)
 8000b60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <SystemInit+0xec>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <SystemInit+0xec>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <SystemInit+0xec>)
 8000b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <SystemInit+0xec>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <SystemInit+0x100>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <SystemInit+0x104>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b86:	d202      	bcs.n	8000b8e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <SystemInit+0x108>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <SystemInit+0x10c>)
 8000b90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00
 8000ba4:	52002000 	.word	0x52002000
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bb0:	02020200 	.word	0x02020200
 8000bb4:	01ff0000 	.word	0x01ff0000
 8000bb8:	01010280 	.word	0x01010280
 8000bbc:	5c001000 	.word	0x5c001000
 8000bc0:	ffff0000 	.word	0xffff0000
 8000bc4:	51008108 	.word	0x51008108
 8000bc8:	52004000 	.word	0x52004000

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd0:	f7ff ff74 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	; (8000c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f007 fb9d 	bl	8008338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fced 	bl	80005dc <main>
  bx  lr
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c0c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000c10:	08008528 	.word	0x08008528
  ldr r2, =_sbss
 8000c14:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000c18:	24004c94 	.word	0x24004c94

08000c1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC3_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c26:	2003      	movs	r0, #3
 8000c28:	f000 f933 	bl	8000e92 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c2c:	f001 f978 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 8000c30:	4602      	mov	r2, r0
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_Init+0x68>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	f003 030f 	and.w	r3, r3, #15
 8000c3c:	4913      	ldr	r1, [pc, #76]	; (8000c8c <HAL_Init+0x6c>)
 8000c3e:	5ccb      	ldrb	r3, [r1, r3]
 8000c40:	f003 031f 	and.w	r3, r3, #31
 8000c44:	fa22 f303 	lsr.w	r3, r2, r3
 8000c48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_Init+0x68>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_Init+0x6c>)
 8000c54:	5cd3      	ldrb	r3, [r2, r3]
 8000c56:	f003 031f 	and.w	r3, r3, #31
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c60:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <HAL_Init+0x70>)
 8000c62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c64:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <HAL_Init+0x74>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff fea4 	bl	80009b8 <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e002      	b.n	8000c80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7a:	f7ff fe15 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	080084e0 	.word	0x080084e0
 8000c90:	24000004 	.word	0x24000004
 8000c94:	24000000 	.word	0x24000000

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	2400000c 	.word	0x2400000c
 8000cbc:	24000168 	.word	0x24000168

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	24000168 	.word	0x24000168

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2400000c 	.word	0x2400000c

08000d20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetREVID+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	0c1b      	lsrs	r3, r3, #16
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	5c001000 	.word	0x5c001000

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <__NVIC_SetPriorityGrouping+0x40>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x40>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	05fa0000 	.word	0x05fa0000

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff4c 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb6:	f7ff ff63 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000eba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	6978      	ldr	r0, [r7, #20]
 8000ec2:	f7ff ffb3 	bl	8000e2c <NVIC_EncodePriority>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff82 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff56 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f06:	4b89      	ldr	r3, [pc, #548]	; (800112c <HAL_GPIO_Init+0x234>)
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f0a:	e194      	b.n	8001236 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8186 	beq.w	8001230 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d005      	beq.n	8000f3c <HAL_GPIO_Init+0x44>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d130      	bne.n	8000f9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f72:	2201      	movs	r2, #1
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	f003 0201 	and.w	r2, r3, #1
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d017      	beq.n	8000fda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d123      	bne.n	800102e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	69b9      	ldr	r1, [r7, #24]
 800102a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0203 	and.w	r2, r3, #3
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80e0 	beq.w	8001230 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_GPIO_Init+0x238>)
 8001072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001076:	4a2e      	ldr	r2, [pc, #184]	; (8001130 <HAL_GPIO_Init+0x238>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_GPIO_Init+0x238>)
 8001082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108e:	4a29      	ldr	r2, [pc, #164]	; (8001134 <HAL_GPIO_Init+0x23c>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a20      	ldr	r2, [pc, #128]	; (8001138 <HAL_GPIO_Init+0x240>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d052      	beq.n	8001160 <HAL_GPIO_Init+0x268>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a1f      	ldr	r2, [pc, #124]	; (800113c <HAL_GPIO_Init+0x244>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d031      	beq.n	8001126 <HAL_GPIO_Init+0x22e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <HAL_GPIO_Init+0x248>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d02b      	beq.n	8001122 <HAL_GPIO_Init+0x22a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <HAL_GPIO_Init+0x24c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d025      	beq.n	800111e <HAL_GPIO_Init+0x226>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <HAL_GPIO_Init+0x250>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x222>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <HAL_GPIO_Init+0x254>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x21e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <HAL_GPIO_Init+0x258>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a19      	ldr	r2, [pc, #100]	; (8001154 <HAL_GPIO_Init+0x25c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a18      	ldr	r2, [pc, #96]	; (8001158 <HAL_GPIO_Init+0x260>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_GPIO_Init+0x264>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x20e>
 8001102:	2309      	movs	r3, #9
 8001104:	e02d      	b.n	8001162 <HAL_GPIO_Init+0x26a>
 8001106:	230a      	movs	r3, #10
 8001108:	e02b      	b.n	8001162 <HAL_GPIO_Init+0x26a>
 800110a:	2308      	movs	r3, #8
 800110c:	e029      	b.n	8001162 <HAL_GPIO_Init+0x26a>
 800110e:	2307      	movs	r3, #7
 8001110:	e027      	b.n	8001162 <HAL_GPIO_Init+0x26a>
 8001112:	2306      	movs	r3, #6
 8001114:	e025      	b.n	8001162 <HAL_GPIO_Init+0x26a>
 8001116:	2305      	movs	r3, #5
 8001118:	e023      	b.n	8001162 <HAL_GPIO_Init+0x26a>
 800111a:	2304      	movs	r3, #4
 800111c:	e021      	b.n	8001162 <HAL_GPIO_Init+0x26a>
 800111e:	2303      	movs	r3, #3
 8001120:	e01f      	b.n	8001162 <HAL_GPIO_Init+0x26a>
 8001122:	2302      	movs	r3, #2
 8001124:	e01d      	b.n	8001162 <HAL_GPIO_Init+0x26a>
 8001126:	2301      	movs	r3, #1
 8001128:	e01b      	b.n	8001162 <HAL_GPIO_Init+0x26a>
 800112a:	bf00      	nop
 800112c:	58000080 	.word	0x58000080
 8001130:	58024400 	.word	0x58024400
 8001134:	58000400 	.word	0x58000400
 8001138:	58020000 	.word	0x58020000
 800113c:	58020400 	.word	0x58020400
 8001140:	58020800 	.word	0x58020800
 8001144:	58020c00 	.word	0x58020c00
 8001148:	58021000 	.word	0x58021000
 800114c:	58021400 	.word	0x58021400
 8001150:	58021800 	.word	0x58021800
 8001154:	58021c00 	.word	0x58021c00
 8001158:	58022000 	.word	0x58022000
 800115c:	58022400 	.word	0x58022400
 8001160:	2300      	movs	r3, #0
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	f002 0203 	and.w	r2, r2, #3
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	4093      	lsls	r3, r2
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001172:	4938      	ldr	r1, [pc, #224]	; (8001254 <HAL_GPIO_Init+0x35c>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	3301      	adds	r3, #1
 8001234:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	f47f ae63 	bne.w	8000f0c <HAL_GPIO_Init+0x14>
  }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	3724      	adds	r7, #36	; 0x24
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	58000400 	.word	0x58000400

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_PWREx_ConfigSupply+0x70>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b04      	cmp	r3, #4
 800129e:	d00a      	beq.n	80012b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_PWREx_ConfigSupply+0x70>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d001      	beq.n	80012b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e01f      	b.n	80012f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e01d      	b.n	80012f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_PWREx_ConfigSupply+0x70>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f023 0207 	bic.w	r2, r3, #7
 80012be:	490f      	ldr	r1, [pc, #60]	; (80012fc <HAL_PWREx_ConfigSupply+0x70>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012c6:	f7ff fcfb 	bl	8000cc0 <HAL_GetTick>
 80012ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012cc:	e009      	b.n	80012e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012ce:	f7ff fcf7 	bl	8000cc0 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012dc:	d901      	bls.n	80012e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e007      	b.n	80012f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_PWREx_ConfigSupply+0x70>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012ee:	d1ee      	bne.n	80012ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	58024800 	.word	0x58024800

08001300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	f000 bc48 	b.w	8001ba4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 8088 	beq.w	8001432 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001322:	4b99      	ldr	r3, [pc, #612]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800132c:	4b96      	ldr	r3, [pc, #600]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001334:	2b10      	cmp	r3, #16
 8001336:	d007      	beq.n	8001348 <HAL_RCC_OscConfig+0x48>
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	2b18      	cmp	r3, #24
 800133c:	d111      	bne.n	8001362 <HAL_RCC_OscConfig+0x62>
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d10c      	bne.n	8001362 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	4b8f      	ldr	r3, [pc, #572]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d06d      	beq.n	8001430 <HAL_RCC_OscConfig+0x130>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d169      	bne.n	8001430 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	f000 bc21 	b.w	8001ba4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x7a>
 800136c:	4b86      	ldr	r3, [pc, #536]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a85      	ldr	r2, [pc, #532]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e02e      	b.n	80013d8 <HAL_RCC_OscConfig+0xd8>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x9c>
 8001382:	4b81      	ldr	r3, [pc, #516]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a80      	ldr	r2, [pc, #512]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b7e      	ldr	r3, [pc, #504]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a7d      	ldr	r2, [pc, #500]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e01d      	b.n	80013d8 <HAL_RCC_OscConfig+0xd8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0xc0>
 80013a6:	4b78      	ldr	r3, [pc, #480]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a77      	ldr	r2, [pc, #476]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80013ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b75      	ldr	r3, [pc, #468]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a74      	ldr	r2, [pc, #464]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xd8>
 80013c0:	4b71      	ldr	r3, [pc, #452]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a70      	ldr	r2, [pc, #448]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b6e      	ldr	r3, [pc, #440]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a6d      	ldr	r2, [pc, #436]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc6e 	bl	8000cc0 <HAL_GetTick>
 80013e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fc6a 	bl	8000cc0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	; 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e3d4      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0xe8>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fc5a 	bl	8000cc0 <HAL_GetTick>
 800140c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fc56 	bl	8000cc0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e3c0      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001422:	4b59      	ldr	r3, [pc, #356]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x110>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 80ca 	beq.w	80015d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001440:	4b51      	ldr	r3, [pc, #324]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001448:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800144a:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <HAL_RCC_OscConfig+0x166>
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	2b18      	cmp	r3, #24
 800145a:	d156      	bne.n	800150a <HAL_RCC_OscConfig+0x20a>
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d151      	bne.n	800150a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001466:	4b48      	ldr	r3, [pc, #288]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <HAL_RCC_OscConfig+0x17e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e392      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800147e:	4b42      	ldr	r3, [pc, #264]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 0219 	bic.w	r2, r3, #25
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	493f      	ldr	r1, [pc, #252]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fc16 	bl	8000cc0 <HAL_GetTick>
 8001494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff fc12 	bl	8000cc0 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e37c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014aa:	4b37      	ldr	r3, [pc, #220]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	f7ff fc33 	bl	8000d20 <HAL_GetREVID>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d817      	bhi.n	80014f4 <HAL_RCC_OscConfig+0x1f4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	2b40      	cmp	r3, #64	; 0x40
 80014ca:	d108      	bne.n	80014de <HAL_RCC_OscConfig+0x1de>
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80014d4:	4a2c      	ldr	r2, [pc, #176]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80014d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014dc:	e07a      	b.n	80015d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	031b      	lsls	r3, r3, #12
 80014ec:	4926      	ldr	r1, [pc, #152]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f2:	e06f      	b.n	80015d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	4921      	ldr	r1, [pc, #132]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001508:	e064      	b.n	80015d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d047      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 0219 	bic.w	r2, r3, #25
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	491a      	ldr	r1, [pc, #104]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fbcc 	bl	8000cc0 <HAL_GetTick>
 8001528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff fbc8 	bl	8000cc0 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e332      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	f7ff fbe9 	bl	8000d20 <HAL_GetREVID>
 800154e:	4603      	mov	r3, r0
 8001550:	f241 0203 	movw	r2, #4099	; 0x1003
 8001554:	4293      	cmp	r3, r2
 8001556:	d819      	bhi.n	800158c <HAL_RCC_OscConfig+0x28c>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	2b40      	cmp	r3, #64	; 0x40
 800155e:	d108      	bne.n	8001572 <HAL_RCC_OscConfig+0x272>
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 800156a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156e:	6053      	str	r3, [r2, #4]
 8001570:	e030      	b.n	80015d4 <HAL_RCC_OscConfig+0x2d4>
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	031b      	lsls	r3, r3, #12
 8001580:	4901      	ldr	r1, [pc, #4]	; (8001588 <HAL_RCC_OscConfig+0x288>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
 8001586:	e025      	b.n	80015d4 <HAL_RCC_OscConfig+0x2d4>
 8001588:	58024400 	.word	0x58024400
 800158c:	4b9a      	ldr	r3, [pc, #616]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	061b      	lsls	r3, r3, #24
 800159a:	4997      	ldr	r1, [pc, #604]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
 80015a0:	e018      	b.n	80015d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a2:	4b95      	ldr	r3, [pc, #596]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a94      	ldr	r2, [pc, #592]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff fb87 	bl	8000cc0 <HAL_GetTick>
 80015b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b6:	f7ff fb83 	bl	8000cc0 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e2ed      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015c8:	4b8b      	ldr	r3, [pc, #556]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f0      	bne.n	80015b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a9 	beq.w	8001734 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e2:	4b85      	ldr	r3, [pc, #532]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015ec:	4b82      	ldr	r3, [pc, #520]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d007      	beq.n	8001608 <HAL_RCC_OscConfig+0x308>
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b18      	cmp	r3, #24
 80015fc:	d13a      	bne.n	8001674 <HAL_RCC_OscConfig+0x374>
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d135      	bne.n	8001674 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001608:	4b7b      	ldr	r3, [pc, #492]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x320>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	2b80      	cmp	r3, #128	; 0x80
 800161a:	d001      	beq.n	8001620 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e2c1      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001620:	f7ff fb7e 	bl	8000d20 <HAL_GetREVID>
 8001624:	4603      	mov	r3, r0
 8001626:	f241 0203 	movw	r2, #4099	; 0x1003
 800162a:	4293      	cmp	r3, r2
 800162c:	d817      	bhi.n	800165e <HAL_RCC_OscConfig+0x35e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	2b20      	cmp	r3, #32
 8001634:	d108      	bne.n	8001648 <HAL_RCC_OscConfig+0x348>
 8001636:	4b70      	ldr	r3, [pc, #448]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800163e:	4a6e      	ldr	r2, [pc, #440]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 8001640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001644:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001646:	e075      	b.n	8001734 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001648:	4b6b      	ldr	r3, [pc, #428]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	069b      	lsls	r3, r3, #26
 8001656:	4968      	ldr	r1, [pc, #416]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800165c:	e06a      	b.n	8001734 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800165e:	4b66      	ldr	r3, [pc, #408]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	061b      	lsls	r3, r3, #24
 800166c:	4962      	ldr	r1, [pc, #392]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 800166e:	4313      	orrs	r3, r2
 8001670:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001672:	e05f      	b.n	8001734 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d042      	beq.n	8001702 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800167c:	4b5e      	ldr	r3, [pc, #376]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a5d      	ldr	r2, [pc, #372]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 8001682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fb1a 	bl	8000cc0 <HAL_GetTick>
 800168c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001690:	f7ff fb16 	bl	8000cc0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e280      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016a2:	4b55      	ldr	r3, [pc, #340]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016ae:	f7ff fb37 	bl	8000d20 <HAL_GetREVID>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d817      	bhi.n	80016ec <HAL_RCC_OscConfig+0x3ec>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d108      	bne.n	80016d6 <HAL_RCC_OscConfig+0x3d6>
 80016c4:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016cc:	4a4a      	ldr	r2, [pc, #296]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80016ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016d2:	6053      	str	r3, [r2, #4]
 80016d4:	e02e      	b.n	8001734 <HAL_RCC_OscConfig+0x434>
 80016d6:	4b48      	ldr	r3, [pc, #288]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	069b      	lsls	r3, r3, #26
 80016e4:	4944      	ldr	r1, [pc, #272]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
 80016ea:	e023      	b.n	8001734 <HAL_RCC_OscConfig+0x434>
 80016ec:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	061b      	lsls	r3, r3, #24
 80016fa:	493f      	ldr	r1, [pc, #252]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60cb      	str	r3, [r1, #12]
 8001700:	e018      	b.n	8001734 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001702:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a3c      	ldr	r2, [pc, #240]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 8001708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800170c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff fad7 	bl	8000cc0 <HAL_GetTick>
 8001712:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001716:	f7ff fad3 	bl	8000cc0 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e23d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001728:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d036      	beq.n	80017ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d019      	beq.n	800177c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 800174a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174c:	4a2a      	ldr	r2, [pc, #168]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fab4 	bl	8000cc0 <HAL_GetTick>
 8001758:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fab0 	bl	8000cc0 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e21a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 8001770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x45c>
 800177a:	e018      	b.n	80017ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 800177e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fa9a 	bl	8000cc0 <HAL_GetTick>
 800178c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fa96 	bl	8000cc0 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e200      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80017a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0320 	and.w	r3, r3, #32
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d039      	beq.n	800182e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d01c      	beq.n	80017fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80017c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fa77 	bl	8000cc0 <HAL_GetTick>
 80017d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d6:	f7ff fa73 	bl	8000cc0 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1dd      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_RCC_OscConfig+0x4f8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x4d6>
 80017f4:	e01b      	b.n	800182e <HAL_RCC_OscConfig+0x52e>
 80017f6:	bf00      	nop
 80017f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017fc:	4b9b      	ldr	r3, [pc, #620]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a9a      	ldr	r2, [pc, #616]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001806:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001808:	f7ff fa5a 	bl	8000cc0 <HAL_GetTick>
 800180c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001810:	f7ff fa56 	bl	8000cc0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e1c0      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001822:	4b92      	ldr	r3, [pc, #584]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8081 	beq.w	800193e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800183c:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <HAL_RCC_OscConfig+0x770>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a8b      	ldr	r2, [pc, #556]	; (8001a70 <HAL_RCC_OscConfig+0x770>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001846:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001848:	f7ff fa3a 	bl	8000cc0 <HAL_GetTick>
 800184c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001850:	f7ff fa36 	bl	8000cc0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1a0      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001862:	4b83      	ldr	r3, [pc, #524]	; (8001a70 <HAL_RCC_OscConfig+0x770>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x584>
 8001876:	4b7d      	ldr	r3, [pc, #500]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a7c      	ldr	r2, [pc, #496]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	e02d      	b.n	80018e0 <HAL_RCC_OscConfig+0x5e0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x5a6>
 800188c:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a76      	ldr	r2, [pc, #472]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	4b74      	ldr	r3, [pc, #464]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	4a73      	ldr	r2, [pc, #460]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 800189e:	f023 0304 	bic.w	r3, r3, #4
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
 80018a4:	e01c      	b.n	80018e0 <HAL_RCC_OscConfig+0x5e0>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x5c8>
 80018ae:	4b6f      	ldr	r3, [pc, #444]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a6e      	ldr	r2, [pc, #440]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	4b6c      	ldr	r3, [pc, #432]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a6b      	ldr	r2, [pc, #428]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0x5e0>
 80018c8:	4b68      	ldr	r3, [pc, #416]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a67      	ldr	r2, [pc, #412]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
 80018d4:	4b65      	ldr	r3, [pc, #404]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	4a64      	ldr	r2, [pc, #400]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80018da:	f023 0304 	bic.w	r3, r3, #4
 80018de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d015      	beq.n	8001914 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff f9ea 	bl	8000cc0 <HAL_GetTick>
 80018ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff f9e6 	bl	8000cc0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e14e      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001906:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0ee      	beq.n	80018f0 <HAL_RCC_OscConfig+0x5f0>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7ff f9d4 	bl	8000cc0 <HAL_GetTick>
 8001918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800191a:	e00a      	b.n	8001932 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191c:	f7ff f9d0 	bl	8000cc0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e138      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001932:	4b4e      	ldr	r3, [pc, #312]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ee      	bne.n	800191c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 812d 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001948:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001950:	2b18      	cmp	r3, #24
 8001952:	f000 80bd 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	2b02      	cmp	r3, #2
 800195c:	f040 809e 	bne.w	8001a9c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001960:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a41      	ldr	r2, [pc, #260]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800196a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff f9a8 	bl	8000cc0 <HAL_GetTick>
 8001970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f9a4 	bl	8000cc0 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e10e      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001986:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001992:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <HAL_RCC_OscConfig+0x774>)
 8001998:	4013      	ands	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	430a      	orrs	r2, r1
 80019a6:	4931      	ldr	r1, [pc, #196]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	628b      	str	r3, [r1, #40]	; 0x28
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	3b01      	subs	r3, #1
 80019b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	3b01      	subs	r3, #1
 80019bc:	025b      	lsls	r3, r3, #9
 80019be:	b29b      	uxth	r3, r3
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	3b01      	subs	r3, #1
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d4:	3b01      	subs	r3, #1
 80019d6:	061b      	lsls	r3, r3, #24
 80019d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80019dc:	4923      	ldr	r1, [pc, #140]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80019f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_RCC_OscConfig+0x778>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019fa:	00d2      	lsls	r2, r2, #3
 80019fc:	491b      	ldr	r1, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	f023 020c 	bic.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4917      	ldr	r1, [pc, #92]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	f023 0202 	bic.w	r2, r3, #2
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	4912      	ldr	r1, [pc, #72]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_RCC_OscConfig+0x76c>)
 8001a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff f92d 	bl	8000cc0 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a68:	e011      	b.n	8001a8e <HAL_RCC_OscConfig+0x78e>
 8001a6a:	bf00      	nop
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	58024800 	.word	0x58024800
 8001a74:	fffffc0c 	.word	0xfffffc0c
 8001a78:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff f920 	bl	8000cc0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e08a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x77c>
 8001a9a:	e082      	b.n	8001ba2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b43      	ldr	r3, [pc, #268]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a42      	ldr	r2, [pc, #264]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f90a 	bl	8000cc0 <HAL_GetTick>
 8001aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f906 	bl	8000cc0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e070      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x7b0>
 8001ace:	e068      	b.n	8001ba2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ad0:	4b36      	ldr	r3, [pc, #216]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ad6:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d031      	beq.n	8001b48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f003 0203 	and.w	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d12a      	bne.n	8001b48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d122      	bne.n	8001b48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d11a      	bne.n	8001b48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	0a5b      	lsrs	r3, r3, #9
 8001b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d111      	bne.n	8001b48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	0c1b      	lsrs	r3, r3, #16
 8001b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d108      	bne.n	8001b48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	0e1b      	lsrs	r3, r3, #24
 8001b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e02b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d01f      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	4a11      	ldr	r2, [pc, #68]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b6e:	f7ff f8a7 	bl	8000cc0 <HAL_GetTick>
 8001b72:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001b74:	bf00      	nop
 8001b76:	f7ff f8a3 	bl	8000cc0 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d0f9      	beq.n	8001b76 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_RCC_OscConfig+0x8b0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b8e:	00d2      	lsls	r2, r2, #3
 8001b90:	4906      	ldr	r1, [pc, #24]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_RCC_OscConfig+0x8ac>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3730      	adds	r7, #48	; 0x30
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	ffff0007 	.word	0xffff0007

08001bb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e19c      	b.n	8001f02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b8a      	ldr	r3, [pc, #552]	; (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d910      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b87      	ldr	r3, [pc, #540]	; (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 020f 	bic.w	r2, r3, #15
 8001bde:	4985      	ldr	r1, [pc, #532]	; (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b83      	ldr	r3, [pc, #524]	; (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e184      	b.n	8001f02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d010      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	4b7b      	ldr	r3, [pc, #492]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d908      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c14:	4b78      	ldr	r3, [pc, #480]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	4975      	ldr	r1, [pc, #468]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d010      	beq.n	8001c54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	4b70      	ldr	r3, [pc, #448]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d908      	bls.n	8001c54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c42:	4b6d      	ldr	r3, [pc, #436]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	496a      	ldr	r1, [pc, #424]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d010      	beq.n	8001c82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	4b64      	ldr	r3, [pc, #400]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d908      	bls.n	8001c82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c70:	4b61      	ldr	r3, [pc, #388]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	495e      	ldr	r1, [pc, #376]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d908      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c9e:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4953      	ldr	r1, [pc, #332]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d010      	beq.n	8001cde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d908      	bls.n	8001cde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f023 020f 	bic.w	r2, r3, #15
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4947      	ldr	r1, [pc, #284]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d055      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001cea:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4940      	ldr	r1, [pc, #256]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d04:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d121      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0f6      	b.n	8001f02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d1c:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d115      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0ea      	b.n	8001f02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d34:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0de      	b.n	8001f02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d44:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0d6      	b.n	8001f02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d54:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	f023 0207 	bic.w	r2, r3, #7
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4925      	ldr	r1, [pc, #148]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d66:	f7fe ffab 	bl	8000cc0 <HAL_GetTick>
 8001d6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6e:	f7fe ffa7 	bl	8000cc0 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0be      	b.n	8001f02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d1eb      	bne.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d010      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d208      	bcs.n	8001dc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f023 020f 	bic.w	r2, r3, #15
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	490e      	ldr	r1, [pc, #56]	; (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d214      	bcs.n	8001dfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 020f 	bic.w	r2, r3, #15
 8001dda:	4906      	ldr	r1, [pc, #24]	; (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e086      	b.n	8001f02 <HAL_RCC_ClockConfig+0x34e>
 8001df4:	52002000 	.word	0x52002000
 8001df8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d010      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d208      	bcs.n	8001e2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e18:	4b3c      	ldr	r3, [pc, #240]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	4939      	ldr	r1, [pc, #228]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d010      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d208      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e46:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	492e      	ldr	r1, [pc, #184]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d010      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d208      	bcs.n	8001e86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4922      	ldr	r1, [pc, #136]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d010      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d208      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4917      	ldr	r1, [pc, #92]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001eb4:	f000 f834 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	4912      	ldr	r1, [pc, #72]	; (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_RCC_ClockConfig+0x358>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_RCC_ClockConfig+0x360>)
 8001eea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x364>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_RCC_ClockConfig+0x368>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fd5e 	bl	80009b8 <HAL_InitTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	58024400 	.word	0x58024400
 8001f10:	080084e0 	.word	0x080084e0
 8001f14:	24000004 	.word	0x24000004
 8001f18:	24000000 	.word	0x24000000
 8001f1c:	24000008 	.word	0x24000008

08001f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f26:	4bb3      	ldr	r3, [pc, #716]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f2e:	2b18      	cmp	r3, #24
 8001f30:	f200 8155 	bhi.w	80021de <HAL_RCC_GetSysClockFreq+0x2be>
 8001f34:	a201      	add	r2, pc, #4	; (adr r2, 8001f3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3a:	bf00      	nop
 8001f3c:	08001fa1 	.word	0x08001fa1
 8001f40:	080021df 	.word	0x080021df
 8001f44:	080021df 	.word	0x080021df
 8001f48:	080021df 	.word	0x080021df
 8001f4c:	080021df 	.word	0x080021df
 8001f50:	080021df 	.word	0x080021df
 8001f54:	080021df 	.word	0x080021df
 8001f58:	080021df 	.word	0x080021df
 8001f5c:	08001fc7 	.word	0x08001fc7
 8001f60:	080021df 	.word	0x080021df
 8001f64:	080021df 	.word	0x080021df
 8001f68:	080021df 	.word	0x080021df
 8001f6c:	080021df 	.word	0x080021df
 8001f70:	080021df 	.word	0x080021df
 8001f74:	080021df 	.word	0x080021df
 8001f78:	080021df 	.word	0x080021df
 8001f7c:	08001fcd 	.word	0x08001fcd
 8001f80:	080021df 	.word	0x080021df
 8001f84:	080021df 	.word	0x080021df
 8001f88:	080021df 	.word	0x080021df
 8001f8c:	080021df 	.word	0x080021df
 8001f90:	080021df 	.word	0x080021df
 8001f94:	080021df 	.word	0x080021df
 8001f98:	080021df 	.word	0x080021df
 8001f9c:	08001fd3 	.word	0x08001fd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fa0:	4b94      	ldr	r3, [pc, #592]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d009      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fac:	4b91      	ldr	r3, [pc, #580]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	08db      	lsrs	r3, r3, #3
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	4a90      	ldr	r2, [pc, #576]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001fbe:	e111      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001fc0:	4b8d      	ldr	r3, [pc, #564]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fc2:	61bb      	str	r3, [r7, #24]
      break;
 8001fc4:	e10e      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001fc6:	4b8d      	ldr	r3, [pc, #564]	; (80021fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fc8:	61bb      	str	r3, [r7, #24]
      break;
 8001fca:	e10b      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001fcc:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001fce:	61bb      	str	r3, [r7, #24]
      break;
 8001fd0:	e108      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001fd2:	4b88      	ldr	r3, [pc, #544]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001fdc:	4b85      	ldr	r3, [pc, #532]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001fe8:	4b82      	ldr	r3, [pc, #520]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001ff2:	4b80      	ldr	r3, [pc, #512]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	08db      	lsrs	r3, r3, #3
 8001ff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80e1 	beq.w	80021d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b02      	cmp	r3, #2
 800201a:	f000 8083 	beq.w	8002124 <HAL_RCC_GetSysClockFreq+0x204>
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b02      	cmp	r3, #2
 8002022:	f200 80a1 	bhi.w	8002168 <HAL_RCC_GetSysClockFreq+0x248>
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x114>
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d056      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002032:	e099      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002034:	4b6f      	ldr	r3, [pc, #444]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b00      	cmp	r3, #0
 800203e:	d02d      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002040:	4b6c      	ldr	r3, [pc, #432]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	08db      	lsrs	r3, r3, #3
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	4a6b      	ldr	r2, [pc, #428]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800206a:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800207a:	ed97 6a02 	vldr	s12, [r7, #8]
 800207e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002204 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800208a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800208e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002096:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800209a:	e087      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002208 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ae:	4b51      	ldr	r3, [pc, #324]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020be:	ed97 6a02 	vldr	s12, [r7, #8]
 80020c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002204 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020de:	e065      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800220c <HAL_RCC_GetSysClockFreq+0x2ec>
 80020ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f2:	4b40      	ldr	r3, [pc, #256]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fa:	ee07 3a90 	vmov	s15, r3
 80020fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002102:	ed97 6a02 	vldr	s12, [r7, #8]
 8002106:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002204 <HAL_RCC_GetSysClockFreq+0x2e4>
 800210a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800210e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800211a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002122:	e043      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002210 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002146:	ed97 6a02 	vldr	s12, [r7, #8]
 800214a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002204 <HAL_RCC_GetSysClockFreq+0x2e4>
 800214e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800215a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800215e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002162:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002166:	e021      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002172:	eddf 6a26 	vldr	s13, [pc, #152]	; 800220c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800218a:	ed97 6a02 	vldr	s12, [r7, #8]
 800218e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002204 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800219a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800219e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	0a5b      	lsrs	r3, r3, #9
 80021b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b6:	3301      	adds	r3, #1
 80021b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	ee07 3a90 	vmov	s15, r3
 80021c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80021c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d0:	ee17 3a90 	vmov	r3, s15
 80021d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80021d6:	e005      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
      break;
 80021dc:	e002      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021e0:	61bb      	str	r3, [r7, #24]
      break;
 80021e2:	bf00      	nop
  }

  return sysclockfreq;
 80021e4:	69bb      	ldr	r3, [r7, #24]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	58024400 	.word	0x58024400
 80021f8:	03d09000 	.word	0x03d09000
 80021fc:	003d0900 	.word	0x003d0900
 8002200:	017d7840 	.word	0x017d7840
 8002204:	46000000 	.word	0x46000000
 8002208:	4c742400 	.word	0x4c742400
 800220c:	4a742400 	.word	0x4a742400
 8002210:	4bbebc20 	.word	0x4bbebc20

08002214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800221a:	f7ff fe81 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 800221e:	4602      	mov	r2, r0
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_RCC_GetHCLKFreq+0x50>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	490f      	ldr	r1, [pc, #60]	; (8002268 <HAL_RCC_GetHCLKFreq+0x54>)
 800222c:	5ccb      	ldrb	r3, [r1, r3]
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	fa22 f303 	lsr.w	r3, r2, r3
 8002236:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_GetHCLKFreq+0x50>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	4a09      	ldr	r2, [pc, #36]	; (8002268 <HAL_RCC_GetHCLKFreq+0x54>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	4a07      	ldr	r2, [pc, #28]	; (800226c <HAL_RCC_GetHCLKFreq+0x58>)
 8002250:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002252:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <HAL_RCC_GetHCLKFreq+0x58>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	58024400 	.word	0x58024400
 8002268:	080084e0 	.word	0x080084e0
 800226c:	24000004 	.word	0x24000004
 8002270:	24000000 	.word	0x24000000

08002274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002278:	f7ff ffcc 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4904      	ldr	r1, [pc, #16]	; (800229c <HAL_RCC_GetPCLK1Freq+0x28>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	58024400 	.word	0x58024400
 800229c:	080084e0 	.word	0x080084e0

080022a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80022a4:	f7ff ffb6 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	4904      	ldr	r1, [pc, #16]	; (80022c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	58024400 	.word	0x58024400
 80022c8:	080084e0 	.word	0x080084e0

080022cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	223f      	movs	r2, #63	; 0x3f
 80022da:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_RCC_GetClockConfig+0x7c>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f003 0207 	and.w	r2, r3, #7
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_RCC_GetClockConfig+0x7c>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_RCC_GetClockConfig+0x7c>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 020f 	and.w	r2, r3, #15
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_RCC_GetClockConfig+0x7c>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800230c:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <HAL_RCC_GetClockConfig+0x7c>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_GetClockConfig+0x7c>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCC_GetClockConfig+0x7c>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_GetClockConfig+0x80>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 020f 	and.w	r2, r3, #15
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	58024400 	.word	0x58024400
 800234c:	52002000 	.word	0x52002000

08002350 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002354:	b0ca      	sub	sp, #296	; 0x128
 8002356:	af00      	add	r7, sp, #0
 8002358:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800235c:	2300      	movs	r3, #0
 800235e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002362:	2300      	movs	r3, #0
 8002364:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002374:	2500      	movs	r5, #0
 8002376:	ea54 0305 	orrs.w	r3, r4, r5
 800237a:	d049      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800237c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002382:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002386:	d02f      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002388:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800238c:	d828      	bhi.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800238e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002392:	d01a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002394:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002398:	d822      	bhi.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800239e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a2:	d007      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023a4:	e01c      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023a6:	4bb8      	ldr	r3, [pc, #736]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	4ab7      	ldr	r2, [pc, #732]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023b2:	e01a      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80023b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023b8:	3308      	adds	r3, #8
 80023ba:	2102      	movs	r1, #2
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 fc8f 	bl	8003ce0 <RCCEx_PLL2_Config>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023c8:	e00f      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80023ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023ce:	3328      	adds	r3, #40	; 0x28
 80023d0:	2102      	movs	r1, #2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fd36 	bl	8003e44 <RCCEx_PLL3_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023de:	e004      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80023e6:	e000      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80023e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80023f2:	4ba5      	ldr	r3, [pc, #660]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80023fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002400:	4aa1      	ldr	r2, [pc, #644]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002402:	430b      	orrs	r3, r1
 8002404:	6513      	str	r3, [r2, #80]	; 0x50
 8002406:	e003      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800240c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800241c:	f04f 0900 	mov.w	r9, #0
 8002420:	ea58 0309 	orrs.w	r3, r8, r9
 8002424:	d047      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	2b04      	cmp	r3, #4
 800242e:	d82a      	bhi.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	0800244d 	.word	0x0800244d
 800243c:	0800245b 	.word	0x0800245b
 8002440:	08002471 	.word	0x08002471
 8002444:	0800248f 	.word	0x0800248f
 8002448:	0800248f 	.word	0x0800248f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800244c:	4b8e      	ldr	r3, [pc, #568]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	4a8d      	ldr	r2, [pc, #564]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002458:	e01a      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800245a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800245e:	3308      	adds	r3, #8
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f001 fc3c 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800246e:	e00f      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002474:	3328      	adds	r3, #40	; 0x28
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f001 fce3 	bl	8003e44 <RCCEx_PLL3_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002484:	e004      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800248c:	e000      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800248e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002498:	4b7b      	ldr	r3, [pc, #492]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800249a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249c:	f023 0107 	bic.w	r1, r3, #7
 80024a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	4a78      	ldr	r2, [pc, #480]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6513      	str	r3, [r2, #80]	; 0x50
 80024ac:	e003      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80024b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80024c2:	f04f 0b00 	mov.w	fp, #0
 80024c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80024ca:	d04c      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80024cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d6:	d030      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80024d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024dc:	d829      	bhi.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024de:	2bc0      	cmp	r3, #192	; 0xc0
 80024e0:	d02d      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024e2:	2bc0      	cmp	r3, #192	; 0xc0
 80024e4:	d825      	bhi.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024e6:	2b80      	cmp	r3, #128	; 0x80
 80024e8:	d018      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80024ea:	2b80      	cmp	r3, #128	; 0x80
 80024ec:	d821      	bhi.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	d007      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80024f6:	e01c      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024f8:	4b63      	ldr	r3, [pc, #396]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	4a62      	ldr	r2, [pc, #392]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002504:	e01c      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800250a:	3308      	adds	r3, #8
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f001 fbe6 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800251a:	e011      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800251c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002520:	3328      	adds	r3, #40	; 0x28
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f001 fc8d 	bl	8003e44 <RCCEx_PLL3_Config>
 800252a:	4603      	mov	r3, r0
 800252c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002530:	e006      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002538:	e002      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800253e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002540:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002548:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800254a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	4a4c      	ldr	r2, [pc, #304]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002558:	430b      	orrs	r3, r1
 800255a:	6513      	str	r3, [r2, #80]	; 0x50
 800255c:	e003      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800255e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002562:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002572:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002576:	2300      	movs	r3, #0
 8002578:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800257c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002580:	460b      	mov	r3, r1
 8002582:	4313      	orrs	r3, r2
 8002584:	d053      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800258a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800258e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002592:	d035      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002598:	d82e      	bhi.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800259a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800259e:	d031      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80025a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025a4:	d828      	bhi.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025aa:	d01a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80025ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b0:	d822      	bhi.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80025b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ba:	d007      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80025bc:	e01c      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025be:	4b32      	ldr	r3, [pc, #200]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	4a31      	ldr	r2, [pc, #196]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025ca:	e01c      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025d0:	3308      	adds	r3, #8
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 fb83 	bl	8003ce0 <RCCEx_PLL2_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80025e0:	e011      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025e6:	3328      	adds	r3, #40	; 0x28
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f001 fc2a 	bl	8003e44 <RCCEx_PLL3_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025f6:	e006      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80025fe:	e002      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002600:	bf00      	nop
 8002602:	e000      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10b      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800261a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800261e:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002620:	430b      	orrs	r3, r1
 8002622:	6593      	str	r3, [r2, #88]	; 0x58
 8002624:	e003      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800262a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800262e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800263a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002644:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002648:	460b      	mov	r3, r1
 800264a:	4313      	orrs	r3, r2
 800264c:	d056      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800264e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800265a:	d038      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800265c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002660:	d831      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002662:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002666:	d034      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002668:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800266c:	d82b      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800266e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002672:	d01d      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002678:	d825      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800267e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002684:	e01f      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002686:	bf00      	nop
 8002688:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800268c:	4ba2      	ldr	r3, [pc, #648]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	4aa1      	ldr	r2, [pc, #644]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002698:	e01c      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800269a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800269e:	3308      	adds	r3, #8
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fb1c 	bl	8003ce0 <RCCEx_PLL2_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80026ae:	e011      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026b4:	3328      	adds	r3, #40	; 0x28
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 fbc3 	bl	8003e44 <RCCEx_PLL3_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026c4:	e006      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80026cc:	e002      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80026ce:	bf00      	nop
 80026d0:	e000      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80026d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80026dc:	4b8e      	ldr	r3, [pc, #568]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80026e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026ec:	4a8a      	ldr	r2, [pc, #552]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026ee:	430b      	orrs	r3, r1
 80026f0:	6593      	str	r3, [r2, #88]	; 0x58
 80026f2:	e003      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002708:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800270c:	2300      	movs	r3, #0
 800270e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002712:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002716:	460b      	mov	r3, r1
 8002718:	4313      	orrs	r3, r2
 800271a:	d03a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800271c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	2b30      	cmp	r3, #48	; 0x30
 8002724:	d01f      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002726:	2b30      	cmp	r3, #48	; 0x30
 8002728:	d819      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800272a:	2b20      	cmp	r3, #32
 800272c:	d00c      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800272e:	2b20      	cmp	r3, #32
 8002730:	d815      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d019      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002736:	2b10      	cmp	r3, #16
 8002738:	d111      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800273a:	4b77      	ldr	r3, [pc, #476]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	4a76      	ldr	r2, [pc, #472]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002746:	e011      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800274c:	3308      	adds	r3, #8
 800274e:	2102      	movs	r1, #2
 8002750:	4618      	mov	r0, r3
 8002752:	f001 fac5 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800275c:	e006      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002764:	e002      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800276a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800276c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002774:	4b68      	ldr	r3, [pc, #416]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002778:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800277c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	4a65      	ldr	r2, [pc, #404]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002784:	430b      	orrs	r3, r1
 8002786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002788:	e003      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800278e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800279e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80027a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4313      	orrs	r3, r2
 80027b0:	d051      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80027b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027bc:	d035      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80027be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027c2:	d82e      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027c8:	d031      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80027ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027ce:	d828      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d4:	d01a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80027d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027da:	d822      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80027e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e4:	d007      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80027e6:	e01c      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e8:	4b4b      	ldr	r3, [pc, #300]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	4a4a      	ldr	r2, [pc, #296]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027f4:	e01c      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027fa:	3308      	adds	r3, #8
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f001 fa6e 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800280a:	e011      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800280c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002810:	3328      	adds	r3, #40	; 0x28
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f001 fb15 	bl	8003e44 <RCCEx_PLL3_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002820:	e006      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002828:	e002      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800282e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002830:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002838:	4b37      	ldr	r3, [pc, #220]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002846:	4a34      	ldr	r2, [pc, #208]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002848:	430b      	orrs	r3, r1
 800284a:	6513      	str	r3, [r2, #80]	; 0x50
 800284c:	e003      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002852:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800286c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002870:	460b      	mov	r3, r1
 8002872:	4313      	orrs	r3, r2
 8002874:	d056      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800287a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002880:	d033      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002882:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002886:	d82c      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800288c:	d02f      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800288e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002892:	d826      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002894:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002898:	d02b      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800289a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800289e:	d820      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80028a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028a4:	d012      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80028a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028aa:	d81a      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d022      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b4:	d115      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80028b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ba:	3308      	adds	r3, #8
 80028bc:	2101      	movs	r1, #1
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fa0e 	bl	8003ce0 <RCCEx_PLL2_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028ca:	e015      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d0:	3328      	adds	r3, #40	; 0x28
 80028d2:	2101      	movs	r1, #1
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 fab5 	bl	8003e44 <RCCEx_PLL3_Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028e0:	e00a      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80028e8:	e006      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028ea:	bf00      	nop
 80028ec:	e004      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028ee:	bf00      	nop
 80028f0:	e002      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002904:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800290c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800290e:	4a02      	ldr	r2, [pc, #8]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002910:	430b      	orrs	r3, r1
 8002912:	6513      	str	r3, [r2, #80]	; 0x50
 8002914:	e006      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002916:	bf00      	nop
 8002918:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800291c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800293a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800293e:	460b      	mov	r3, r1
 8002940:	4313      	orrs	r3, r2
 8002942:	d055      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800294c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002950:	d033      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002956:	d82c      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d02f      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002962:	d826      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002964:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002968:	d02b      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800296a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800296e:	d820      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002974:	d012      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800297a:	d81a      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d022      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002980:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002984:	d115      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800298a:	3308      	adds	r3, #8
 800298c:	2101      	movs	r1, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f001 f9a6 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800299a:	e015      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800299c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a0:	3328      	adds	r3, #40	; 0x28
 80029a2:	2101      	movs	r1, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f001 fa4d 	bl	8003e44 <RCCEx_PLL3_Config>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80029b0:	e00a      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029b8:	e006      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029ba:	bf00      	nop
 80029bc:	e004      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029be:	bf00      	nop
 80029c0:	e002      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029d0:	4ba3      	ldr	r3, [pc, #652]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80029d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029e0:	4a9f      	ldr	r2, [pc, #636]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029e2:	430b      	orrs	r3, r1
 80029e4:	6593      	str	r3, [r2, #88]	; 0x58
 80029e6:	e003      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80029fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	d037      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1a:	d00e      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a20:	d816      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d018      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a2a:	d111      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a2c:	4b8c      	ldr	r3, [pc, #560]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	4a8b      	ldr	r2, [pc, #556]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a38:	e00f      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a3e:	3308      	adds	r3, #8
 8002a40:	2101      	movs	r1, #1
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 f94c 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a4e:	e004      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a56:	e000      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10a      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a62:	4b7f      	ldr	r3, [pc, #508]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	4a7b      	ldr	r2, [pc, #492]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a72:	430b      	orrs	r3, r1
 8002a74:	6513      	str	r3, [r2, #80]	; 0x50
 8002a76:	e003      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	d039      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d81c      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002aaa:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002aed 	.word	0x08002aed
 8002ab4:	08002ac1 	.word	0x08002ac1
 8002ab8:	08002acf 	.word	0x08002acf
 8002abc:	08002aed 	.word	0x08002aed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ac0:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	4a66      	ldr	r2, [pc, #408]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002acc:	e00f      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f001 f902 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ae2:	e004      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002aea:	e000      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002af6:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	f023 0103 	bic.w	r1, r3, #3
 8002afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b04:	4a56      	ldr	r2, [pc, #344]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b06:	430b      	orrs	r3, r1
 8002b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b0a:	e003      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002b20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f000 809f 	beq.w	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b36:	4b4b      	ldr	r3, [pc, #300]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b42:	f7fe f8bd 	bl	8000cc0 <HAL_GetTick>
 8002b46:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4c:	f7fe f8b8 	bl	8000cc0 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b64      	cmp	r3, #100	; 0x64
 8002b5a:	d903      	bls.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b62:	e005      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b64:	4b3f      	ldr	r3, [pc, #252]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0ed      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002b70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d179      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b78:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b84:	4053      	eors	r3, r2
 8002b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b8e:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b9a:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a30      	ldr	r2, [pc, #192]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba6:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a2d      	ldr	r2, [pc, #180]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bb2:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc6:	d118      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe f87a 	bl	8000cc0 <HAL_GetTick>
 8002bcc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bd0:	e00d      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fe f875 	bl	8000cc0 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bdc:	1ad2      	subs	r2, r2, r3
 8002bde:	f241 3388 	movw	r3, #5000	; 0x1388
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d903      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002bec:	e005      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0eb      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d129      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c12:	d10e      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c24:	091a      	lsrs	r2, r3, #4
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6113      	str	r3, [r2, #16]
 8002c30:	e005      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c3c:	6113      	str	r3, [r2, #16]
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c40:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4e:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
 8002c54:	e00e      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002c5e:	e009      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002c60:	58024400 	.word	0x58024400
 8002c64:	58024800 	.word	0x58024800
 8002c68:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f002 0301 	and.w	r3, r2, #1
 8002c80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f000 8089 	beq.w	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c9c:	2b28      	cmp	r3, #40	; 0x28
 8002c9e:	d86b      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ca0:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca6:	bf00      	nop
 8002ca8:	08002d81 	.word	0x08002d81
 8002cac:	08002d79 	.word	0x08002d79
 8002cb0:	08002d79 	.word	0x08002d79
 8002cb4:	08002d79 	.word	0x08002d79
 8002cb8:	08002d79 	.word	0x08002d79
 8002cbc:	08002d79 	.word	0x08002d79
 8002cc0:	08002d79 	.word	0x08002d79
 8002cc4:	08002d79 	.word	0x08002d79
 8002cc8:	08002d4d 	.word	0x08002d4d
 8002ccc:	08002d79 	.word	0x08002d79
 8002cd0:	08002d79 	.word	0x08002d79
 8002cd4:	08002d79 	.word	0x08002d79
 8002cd8:	08002d79 	.word	0x08002d79
 8002cdc:	08002d79 	.word	0x08002d79
 8002ce0:	08002d79 	.word	0x08002d79
 8002ce4:	08002d79 	.word	0x08002d79
 8002ce8:	08002d63 	.word	0x08002d63
 8002cec:	08002d79 	.word	0x08002d79
 8002cf0:	08002d79 	.word	0x08002d79
 8002cf4:	08002d79 	.word	0x08002d79
 8002cf8:	08002d79 	.word	0x08002d79
 8002cfc:	08002d79 	.word	0x08002d79
 8002d00:	08002d79 	.word	0x08002d79
 8002d04:	08002d79 	.word	0x08002d79
 8002d08:	08002d81 	.word	0x08002d81
 8002d0c:	08002d79 	.word	0x08002d79
 8002d10:	08002d79 	.word	0x08002d79
 8002d14:	08002d79 	.word	0x08002d79
 8002d18:	08002d79 	.word	0x08002d79
 8002d1c:	08002d79 	.word	0x08002d79
 8002d20:	08002d79 	.word	0x08002d79
 8002d24:	08002d79 	.word	0x08002d79
 8002d28:	08002d81 	.word	0x08002d81
 8002d2c:	08002d79 	.word	0x08002d79
 8002d30:	08002d79 	.word	0x08002d79
 8002d34:	08002d79 	.word	0x08002d79
 8002d38:	08002d79 	.word	0x08002d79
 8002d3c:	08002d79 	.word	0x08002d79
 8002d40:	08002d79 	.word	0x08002d79
 8002d44:	08002d79 	.word	0x08002d79
 8002d48:	08002d81 	.word	0x08002d81
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d50:	3308      	adds	r3, #8
 8002d52:	2101      	movs	r1, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 ffc3 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d60:	e00f      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d66:	3328      	adds	r3, #40	; 0x28
 8002d68:	2101      	movs	r1, #1
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 f86a 	bl	8003e44 <RCCEx_PLL3_Config>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d76:	e004      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d7e:	e000      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d8a:	4bbf      	ldr	r3, [pc, #764]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d98:	4abb      	ldr	r2, [pc, #748]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	6553      	str	r3, [r2, #84]	; 0x54
 8002d9e:	e003      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002da4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	f002 0302 	and.w	r3, r2, #2
 8002db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002dbe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	d041      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d824      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002e25 	.word	0x08002e25
 8002ddc:	08002df1 	.word	0x08002df1
 8002de0:	08002e07 	.word	0x08002e07
 8002de4:	08002e25 	.word	0x08002e25
 8002de8:	08002e25 	.word	0x08002e25
 8002dec:	08002e25 	.word	0x08002e25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df4:	3308      	adds	r3, #8
 8002df6:	2101      	movs	r1, #1
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 ff71 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e04:	e00f      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e0a:	3328      	adds	r3, #40	; 0x28
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 f818 	bl	8003e44 <RCCEx_PLL3_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e1a:	e004      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e22:	e000      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e2e:	4b96      	ldr	r3, [pc, #600]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f023 0107 	bic.w	r1, r3, #7
 8002e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3c:	4a92      	ldr	r2, [pc, #584]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	6553      	str	r3, [r2, #84]	; 0x54
 8002e42:	e003      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f002 0304 	and.w	r3, r2, #4
 8002e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	d044      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d825      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002e78:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002ecd 	.word	0x08002ecd
 8002e84:	08002e99 	.word	0x08002e99
 8002e88:	08002eaf 	.word	0x08002eaf
 8002e8c:	08002ecd 	.word	0x08002ecd
 8002e90:	08002ecd 	.word	0x08002ecd
 8002e94:	08002ecd 	.word	0x08002ecd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 ff1d 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002eac:	e00f      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb2:	3328      	adds	r3, #40	; 0x28
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 ffc4 	bl	8003e44 <RCCEx_PLL3_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ec2:	e004      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002eca:	e000      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ed6:	4b6c      	ldr	r3, [pc, #432]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f023 0107 	bic.w	r1, r3, #7
 8002ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	4a68      	ldr	r2, [pc, #416]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6593      	str	r3, [r2, #88]	; 0x58
 8002eec:	e003      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efe:	f002 0320 	and.w	r3, r2, #32
 8002f02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f10:	460b      	mov	r3, r1
 8002f12:	4313      	orrs	r3, r2
 8002f14:	d055      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f22:	d033      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f28:	d82c      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2e:	d02f      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d826      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f3a:	d02b      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002f3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f40:	d820      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f46:	d012      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f4c:	d81a      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d022      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f56:	d115      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 febd 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f6c:	e015      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f72:	3328      	adds	r3, #40	; 0x28
 8002f74:	2102      	movs	r1, #2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 ff64 	bl	8003e44 <RCCEx_PLL3_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f82:	e00a      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f8a:	e006      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f8c:	bf00      	nop
 8002f8e:	e004      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f90:	bf00      	nop
 8002f92:	e002      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f94:	bf00      	nop
 8002f96:	e000      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fa2:	4b39      	ldr	r3, [pc, #228]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	4a35      	ldr	r2, [pc, #212]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6553      	str	r3, [r2, #84]	; 0x54
 8002fb8:	e003      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002fd8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	d058      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fee:	d033      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002ff0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ff4:	d82c      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	d02f      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003000:	d826      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003006:	d02b      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003008:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800300c:	d820      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800300e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003012:	d012      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003018:	d81a      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d022      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d115      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003028:	3308      	adds	r3, #8
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fe57 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003038:	e015      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800303a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800303e:	3328      	adds	r3, #40	; 0x28
 8003040:	2102      	movs	r1, #2
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fefe 	bl	8003e44 <RCCEx_PLL3_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800304e:	e00a      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003056:	e006      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003058:	bf00      	nop
 800305a:	e004      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800305c:	bf00      	nop
 800305e:	e002      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003060:	bf00      	nop
 8003062:	e000      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10e      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800307a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800307e:	4a02      	ldr	r2, [pc, #8]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003080:	430b      	orrs	r3, r1
 8003082:	6593      	str	r3, [r2, #88]	; 0x58
 8003084:	e006      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003086:	bf00      	nop
 8003088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003090:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80030a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80030ae:	460b      	mov	r3, r1
 80030b0:	4313      	orrs	r3, r2
 80030b2:	d055      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030c0:	d033      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80030c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030c6:	d82c      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030cc:	d02f      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80030ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d2:	d826      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030d8:	d02b      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80030da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030de:	d820      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e4:	d012      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80030e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ea:	d81a      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d022      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80030f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f4:	d115      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fa:	3308      	adds	r3, #8
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fdee 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800310a:	e015      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800310c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003110:	3328      	adds	r3, #40	; 0x28
 8003112:	2102      	movs	r1, #2
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fe95 	bl	8003e44 <RCCEx_PLL3_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003120:	e00a      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003128:	e006      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800312a:	bf00      	nop
 800312c:	e004      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800312e:	bf00      	nop
 8003130:	e002      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003140:	4ba1      	ldr	r3, [pc, #644]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800314c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003150:	4a9d      	ldr	r2, [pc, #628]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003152:	430b      	orrs	r3, r1
 8003154:	6593      	str	r3, [r2, #88]	; 0x58
 8003156:	e003      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800315c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f002 0308 	and.w	r3, r2, #8
 800316c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003176:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800317a:	460b      	mov	r3, r1
 800317c:	4313      	orrs	r3, r2
 800317e:	d01e      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318c:	d10c      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800318e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003192:	3328      	adds	r3, #40	; 0x28
 8003194:	2102      	movs	r1, #2
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fe54 	bl	8003e44 <RCCEx_PLL3_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031a8:	4b87      	ldr	r3, [pc, #540]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b8:	4a83      	ldr	r2, [pc, #524]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031ba:	430b      	orrs	r3, r1
 80031bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f002 0310 	and.w	r3, r2, #16
 80031ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80031d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80031d8:	460b      	mov	r3, r1
 80031da:	4313      	orrs	r3, r2
 80031dc:	d01e      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80031de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ea:	d10c      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f0:	3328      	adds	r3, #40	; 0x28
 80031f2:	2102      	movs	r1, #2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fe25 	bl	8003e44 <RCCEx_PLL3_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003206:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800320e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003216:	4a6c      	ldr	r2, [pc, #432]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003218:	430b      	orrs	r3, r1
 800321a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800321c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800322c:	2300      	movs	r3, #0
 800322e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003232:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003236:	460b      	mov	r3, r1
 8003238:	4313      	orrs	r3, r2
 800323a:	d03e      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800323c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003248:	d022      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800324a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800324e:	d81b      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d00b      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800325a:	e015      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800325c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003260:	3308      	adds	r3, #8
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fd3b 	bl	8003ce0 <RCCEx_PLL2_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003270:	e00f      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003276:	3328      	adds	r3, #40	; 0x28
 8003278:	2102      	movs	r1, #2
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fde2 	bl	8003e44 <RCCEx_PLL3_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003286:	e004      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800328e:	e000      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800329a:	4b4b      	ldr	r3, [pc, #300]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80032a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032aa:	4a47      	ldr	r2, [pc, #284]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6593      	str	r3, [r2, #88]	; 0x58
 80032b0:	e003      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80032c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80032c8:	2300      	movs	r3, #0
 80032ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80032d0:	460b      	mov	r3, r1
 80032d2:	4313      	orrs	r3, r2
 80032d4:	d03b      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80032d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032e2:	d01f      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80032e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032e8:	d818      	bhi.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80032ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ee:	d003      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80032f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032f4:	d007      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80032f6:	e011      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f8:	4b33      	ldr	r3, [pc, #204]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	4a32      	ldr	r2, [pc, #200]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003304:	e00f      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330a:	3328      	adds	r3, #40	; 0x28
 800330c:	2101      	movs	r1, #1
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fd98 	bl	8003e44 <RCCEx_PLL3_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800331a:	e004      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003322:	e000      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800332e:	4b26      	ldr	r3, [pc, #152]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003340:	430b      	orrs	r3, r1
 8003342:	6553      	str	r3, [r2, #84]	; 0x54
 8003344:	e003      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800334a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800335a:	673b      	str	r3, [r7, #112]	; 0x70
 800335c:	2300      	movs	r3, #0
 800335e:	677b      	str	r3, [r7, #116]	; 0x74
 8003360:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003364:	460b      	mov	r3, r1
 8003366:	4313      	orrs	r3, r2
 8003368:	d034      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003378:	d007      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800337a:	e011      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800337c:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003388:	e00e      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338e:	3308      	adds	r3, #8
 8003390:	2102      	movs	r1, #2
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fca4 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800339e:	e003      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10d      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033be:	4a02      	ldr	r2, [pc, #8]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033c0:	430b      	orrs	r3, r1
 80033c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033c4:	e006      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80033c6:	bf00      	nop
 80033c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80033e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80033e2:	2300      	movs	r3, #0
 80033e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80033ea:	460b      	mov	r3, r1
 80033ec:	4313      	orrs	r3, r2
 80033ee:	d00c      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f4:	3328      	adds	r3, #40	; 0x28
 80033f6:	2102      	movs	r1, #2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fd23 	bl	8003e44 <RCCEx_PLL3_Config>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800340a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003416:	663b      	str	r3, [r7, #96]	; 0x60
 8003418:	2300      	movs	r3, #0
 800341a:	667b      	str	r3, [r7, #100]	; 0x64
 800341c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003420:	460b      	mov	r3, r1
 8003422:	4313      	orrs	r3, r2
 8003424:	d038      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003432:	d018      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003438:	d811      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800343a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343e:	d014      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003444:	d80b      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d011      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800344a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344e:	d106      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003450:	4bc3      	ldr	r3, [pc, #780]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	4ac2      	ldr	r2, [pc, #776]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800345c:	e008      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003464:	e004      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003466:	bf00      	nop
 8003468:	e002      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800346a:	bf00      	nop
 800346c:	e000      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800346e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003478:	4bb9      	ldr	r3, [pc, #740]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003488:	4ab5      	ldr	r2, [pc, #724]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800348a:	430b      	orrs	r3, r1
 800348c:	6553      	str	r3, [r2, #84]	; 0x54
 800348e:	e003      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003494:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80034a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80034a6:	2300      	movs	r3, #0
 80034a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80034ae:	460b      	mov	r3, r1
 80034b0:	4313      	orrs	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034b4:	4baa      	ldr	r3, [pc, #680]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c2:	4aa7      	ldr	r2, [pc, #668]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80034c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80034d4:	653b      	str	r3, [r7, #80]	; 0x50
 80034d6:	2300      	movs	r3, #0
 80034d8:	657b      	str	r3, [r7, #84]	; 0x54
 80034da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80034de:	460b      	mov	r3, r1
 80034e0:	4313      	orrs	r3, r2
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80034e4:	4b9e      	ldr	r3, [pc, #632]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034f4:	4a9a      	ldr	r2, [pc, #616]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034f6:	430b      	orrs	r3, r1
 80034f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003506:	64bb      	str	r3, [r7, #72]	; 0x48
 8003508:	2300      	movs	r3, #0
 800350a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800350c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003510:	460b      	mov	r3, r1
 8003512:	4313      	orrs	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003516:	4b92      	ldr	r3, [pc, #584]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003524:	4a8e      	ldr	r2, [pc, #568]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003526:	430b      	orrs	r3, r1
 8003528:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003536:	643b      	str	r3, [r7, #64]	; 0x40
 8003538:	2300      	movs	r3, #0
 800353a:	647b      	str	r3, [r7, #68]	; 0x44
 800353c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003540:	460b      	mov	r3, r1
 8003542:	4313      	orrs	r3, r2
 8003544:	d00e      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003546:	4b86      	ldr	r3, [pc, #536]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	4a85      	ldr	r2, [pc, #532]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800354c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003550:	6113      	str	r3, [r2, #16]
 8003552:	4b83      	ldr	r3, [pc, #524]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003554:	6919      	ldr	r1, [r3, #16]
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800355e:	4a80      	ldr	r2, [pc, #512]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003560:	430b      	orrs	r3, r1
 8003562:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003570:	63bb      	str	r3, [r7, #56]	; 0x38
 8003572:	2300      	movs	r3, #0
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003576:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800357a:	460b      	mov	r3, r1
 800357c:	4313      	orrs	r3, r2
 800357e:	d009      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003580:	4b77      	ldr	r3, [pc, #476]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003584:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	4a74      	ldr	r2, [pc, #464]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003590:	430b      	orrs	r3, r1
 8003592:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30
 80035a2:	2300      	movs	r3, #0
 80035a4:	637b      	str	r3, [r7, #52]	; 0x34
 80035a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80035aa:	460b      	mov	r3, r1
 80035ac:	4313      	orrs	r3, r2
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035b0:	4b6b      	ldr	r3, [pc, #428]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c0:	4a67      	ldr	r2, [pc, #412]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035c2:	430b      	orrs	r3, r1
 80035c4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ce:	2100      	movs	r1, #0
 80035d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80035dc:	460b      	mov	r3, r1
 80035de:	4313      	orrs	r3, r2
 80035e0:	d011      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e6:	3308      	adds	r3, #8
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fb78 	bl	8003ce0 <RCCEx_PLL2_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80035f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	2100      	movs	r1, #0
 8003610:	6239      	str	r1, [r7, #32]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800361c:	460b      	mov	r3, r1
 800361e:	4313      	orrs	r3, r2
 8003620:	d011      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003626:	3308      	adds	r3, #8
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fb58 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	2100      	movs	r1, #0
 8003650:	61b9      	str	r1, [r7, #24]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800365c:	460b      	mov	r3, r1
 800365e:	4313      	orrs	r3, r2
 8003660:	d011      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003666:	3308      	adds	r3, #8
 8003668:	2102      	movs	r1, #2
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fb38 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	2100      	movs	r1, #0
 8003690:	6139      	str	r1, [r7, #16]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800369c:	460b      	mov	r3, r1
 800369e:	4313      	orrs	r3, r2
 80036a0:	d011      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a6:	3328      	adds	r3, #40	; 0x28
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fbca 	bl	8003e44 <RCCEx_PLL3_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80036b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	2100      	movs	r1, #0
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036dc:	460b      	mov	r3, r1
 80036de:	4313      	orrs	r3, r2
 80036e0:	d011      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e6:	3328      	adds	r3, #40	; 0x28
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fbaa 	bl	8003e44 <RCCEx_PLL3_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80036f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003702:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	2100      	movs	r1, #0
 8003710:	6039      	str	r1, [r7, #0]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	e9d7 1200 	ldrd	r1, r2, [r7]
 800371c:	460b      	mov	r3, r1
 800371e:	4313      	orrs	r3, r2
 8003720:	d011      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003726:	3328      	adds	r3, #40	; 0x28
 8003728:	2102      	movs	r1, #2
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fb8a 	bl	8003e44 <RCCEx_PLL3_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003746:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e000      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
}
 8003754:	4618      	mov	r0, r3
 8003756:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800375a:	46bd      	mov	sp, r7
 800375c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003760:	58024400 	.word	0x58024400

08003764 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003768:	f7fe fd54 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4904      	ldr	r1, [pc, #16]	; (800378c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	58024400 	.word	0x58024400
 800378c:	080084e0 	.word	0x080084e0

08003790 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	; 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003798:	4ba1      	ldr	r3, [pc, #644]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80037a2:	4b9f      	ldr	r3, [pc, #636]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	0b1b      	lsrs	r3, r3, #12
 80037a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037ae:	4b9c      	ldr	r3, [pc, #624]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80037ba:	4b99      	ldr	r3, [pc, #612]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	08db      	lsrs	r3, r3, #3
 80037c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8111 	beq.w	8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	f000 8083 	beq.w	80038ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	f200 80a1 	bhi.w	8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d056      	beq.n	80038a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80037fa:	e099      	b.n	8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037fc:	4b88      	ldr	r3, [pc, #544]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02d      	beq.n	8003864 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003808:	4b85      	ldr	r3, [pc, #532]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	08db      	lsrs	r3, r3, #3
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	4a84      	ldr	r2, [pc, #528]	; (8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
 8003818:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003832:	4b7b      	ldr	r3, [pc, #492]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003842:	ed97 6a03 	vldr	s12, [r7, #12]
 8003846:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800384a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800384e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003862:	e087      	b.n	8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003876:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003886:	ed97 6a03 	vldr	s12, [r7, #12]
 800388a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800388e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800389a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038a6:	e065      	b.n	8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ba:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038ea:	e043      	b.n	8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80038fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fe:	4b48      	ldr	r3, [pc, #288]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800390e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003912:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800392e:	e021      	b.n	8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800393e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003942:	4b37      	ldr	r3, [pc, #220]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003952:	ed97 6a03 	vldr	s12, [r7, #12]
 8003956:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800395a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003972:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003974:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	0a5b      	lsrs	r3, r3, #9
 800397a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800398a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399a:	ee17 2a90 	vmov	r2, s15
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80039a2:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ac:	ee07 3a90 	vmov	s15, r3
 80039b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80039c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c8:	ee17 2a90 	vmov	r2, s15
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	0e1b      	lsrs	r3, r3, #24
 80039d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f6:	ee17 2a90 	vmov	r2, s15
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039fe:	e008      	b.n	8003a12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
}
 8003a12:	bf00      	nop
 8003a14:	3724      	adds	r7, #36	; 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
 8003a24:	03d09000 	.word	0x03d09000
 8003a28:	46000000 	.word	0x46000000
 8003a2c:	4c742400 	.word	0x4c742400
 8003a30:	4a742400 	.word	0x4a742400
 8003a34:	4bbebc20 	.word	0x4bbebc20

08003a38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a40:	4ba1      	ldr	r3, [pc, #644]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003a4a:	4b9f      	ldr	r3, [pc, #636]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	0d1b      	lsrs	r3, r3, #20
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a56:	4b9c      	ldr	r3, [pc, #624]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a62:	4b99      	ldr	r3, [pc, #612]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	08db      	lsrs	r3, r3, #3
 8003a68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8111 	beq.w	8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	f000 8083 	beq.w	8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	f200 80a1 	bhi.w	8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d056      	beq.n	8003b50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003aa2:	e099      	b.n	8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aa4:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d02d      	beq.n	8003b0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ab0:	4b85      	ldr	r3, [pc, #532]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	08db      	lsrs	r3, r3, #3
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	4a84      	ldr	r2, [pc, #528]	; (8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	ee07 3a90 	vmov	s15, r3
 8003ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ada:	4b7b      	ldr	r3, [pc, #492]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b0a:	e087      	b.n	8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b1e:	4b6a      	ldr	r3, [pc, #424]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b4e:	e065      	b.n	8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b62:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b92:	e043      	b.n	8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba6:	4b48      	ldr	r3, [pc, #288]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bd6:	e021      	b.n	8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003c1c:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	0a5b      	lsrs	r3, r3, #9
 8003c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c42:	ee17 2a90 	vmov	r2, s15
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	0c1b      	lsrs	r3, r3, #16
 8003c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c70:	ee17 2a90 	vmov	r2, s15
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	0e1b      	lsrs	r3, r3, #24
 8003c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c9e:	ee17 2a90 	vmov	r2, s15
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ca6:	e008      	b.n	8003cba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
}
 8003cba:	bf00      	nop
 8003cbc:	3724      	adds	r7, #36	; 0x24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	58024400 	.word	0x58024400
 8003ccc:	03d09000 	.word	0x03d09000
 8003cd0:	46000000 	.word	0x46000000
 8003cd4:	4c742400 	.word	0x4c742400
 8003cd8:	4a742400 	.word	0x4a742400
 8003cdc:	4bbebc20 	.word	0x4bbebc20

08003ce0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cee:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d101      	bne.n	8003cfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e099      	b.n	8003e32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cfe:	4b4f      	ldr	r3, [pc, #316]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a4e      	ldr	r2, [pc, #312]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0a:	f7fc ffd9 	bl	8000cc0 <HAL_GetTick>
 8003d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d10:	e008      	b.n	8003d24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d12:	f7fc ffd5 	bl	8000cc0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e086      	b.n	8003e32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d24:	4b45      	ldr	r3, [pc, #276]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d30:	4b42      	ldr	r3, [pc, #264]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	031b      	lsls	r3, r3, #12
 8003d3e:	493f      	ldr	r1, [pc, #252]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	628b      	str	r3, [r1, #40]	; 0x28
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	025b      	lsls	r3, r3, #9
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	061b      	lsls	r3, r3, #24
 8003d70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d74:	4931      	ldr	r1, [pc, #196]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d7a:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	492d      	ldr	r1, [pc, #180]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d8c:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f023 0220 	bic.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4928      	ldr	r1, [pc, #160]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003da4:	f023 0310 	bic.w	r3, r3, #16
 8003da8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003daa:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <RCCEx_PLL2_Config+0x160>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	69d2      	ldr	r2, [r2, #28]
 8003db6:	00d2      	lsls	r2, r2, #3
 8003db8:	4920      	ldr	r1, [pc, #128]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dc4:	f043 0310 	orr.w	r3, r3, #16
 8003dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ddc:	e00f      	b.n	8003dfe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d106      	bne.n	8003df2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003de4:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003df0:	e005      	b.n	8003dfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	4a11      	ldr	r2, [pc, #68]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003e04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0a:	f7fc ff59 	bl	8000cc0 <HAL_GetTick>
 8003e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e10:	e008      	b.n	8003e24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e12:	f7fc ff55 	bl	8000cc0 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e006      	b.n	8003e32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	58024400 	.word	0x58024400
 8003e40:	ffff0007 	.word	0xffff0007

08003e44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e52:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d101      	bne.n	8003e62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e099      	b.n	8003f96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e62:	4b4f      	ldr	r3, [pc, #316]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a4e      	ldr	r2, [pc, #312]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6e:	f7fc ff27 	bl	8000cc0 <HAL_GetTick>
 8003e72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e74:	e008      	b.n	8003e88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e76:	f7fc ff23 	bl	8000cc0 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e086      	b.n	8003f96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e88:	4b45      	ldr	r3, [pc, #276]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f0      	bne.n	8003e76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e94:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	051b      	lsls	r3, r3, #20
 8003ea2:	493f      	ldr	r1, [pc, #252]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	025b      	lsls	r3, r3, #9
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	061b      	lsls	r3, r3, #24
 8003ed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ed8:	4931      	ldr	r1, [pc, #196]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ede:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	492d      	ldr	r1, [pc, #180]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	4928      	ldr	r1, [pc, #160]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f02:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <RCCEx_PLL3_Config+0x160>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	69d2      	ldr	r2, [r2, #28]
 8003f1a:	00d2      	lsls	r2, r2, #3
 8003f1c:	4920      	ldr	r1, [pc, #128]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f22:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f40:	e00f      	b.n	8003f62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d106      	bne.n	8003f56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f54:	e005      	b.n	8003f62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a0e      	ldr	r2, [pc, #56]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6e:	f7fc fea7 	bl	8000cc0 <HAL_GetTick>
 8003f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f74:	e008      	b.n	8003f88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f76:	f7fc fea3 	bl	8000cc0 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e006      	b.n	8003f96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
 8003fa4:	ffff0007 	.word	0xffff0007

08003fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e049      	b.n	800404e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f841 	bl	8004056 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f000 f9e8 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d001      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e054      	b.n	800412e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a26      	ldr	r2, [pc, #152]	; (800413c <HAL_TIM_Base_Start_IT+0xd0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d022      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ae:	d01d      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a22      	ldr	r2, [pc, #136]	; (8004140 <HAL_TIM_Base_Start_IT+0xd4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d018      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a21      	ldr	r2, [pc, #132]	; (8004144 <HAL_TIM_Base_Start_IT+0xd8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <HAL_TIM_Base_Start_IT+0xdc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00e      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1e      	ldr	r2, [pc, #120]	; (800414c <HAL_TIM_Base_Start_IT+0xe0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d009      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1c      	ldr	r2, [pc, #112]	; (8004150 <HAL_TIM_Base_Start_IT+0xe4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d004      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <HAL_TIM_Base_Start_IT+0xe8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d115      	bne.n	8004118 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	4b19      	ldr	r3, [pc, #100]	; (8004158 <HAL_TIM_Base_Start_IT+0xec>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d015      	beq.n	800412a <HAL_TIM_Base_Start_IT+0xbe>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d011      	beq.n	800412a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004116:	e008      	b.n	800412a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e000      	b.n	800412c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40000c00 	.word	0x40000c00
 800414c:	40010400 	.word	0x40010400
 8004150:	40001800 	.word	0x40001800
 8004154:	40014000 	.word	0x40014000
 8004158:	00010007 	.word	0x00010007

0800415c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d020      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01b      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0202 	mvn.w	r2, #2
 8004190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f8e9 	bl	800437e <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f8db 	bl	800436a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8ec 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d020      	beq.n	800420c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01b      	beq.n	800420c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0204 	mvn.w	r2, #4
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f8c3 	bl	800437e <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8b5 	bl	800436a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f8c6 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d020      	beq.n	8004258 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0208 	mvn.w	r2, #8
 8004228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2204      	movs	r2, #4
 800422e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f89d 	bl	800437e <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f88f 	bl	800436a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f8a0 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	d020      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01b      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0210 	mvn.w	r2, #16
 8004274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2208      	movs	r2, #8
 800427a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f877 	bl	800437e <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f869 	bl	800436a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f87a 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0201 	mvn.w	r2, #1
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fc fad8 	bl	8000878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00c      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80042ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f913 	bl	800451c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00c      	beq.n	800431a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f90b 	bl	8004530 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00c      	beq.n	800433e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f834 	bl	80043a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00c      	beq.n	8004362 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f06f 0220 	mvn.w	r2, #32
 800435a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8d3 	bl	8004508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a46      	ldr	r2, [pc, #280]	; (80044e8 <TIM_Base_SetConfig+0x12c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d013      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d00f      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a43      	ldr	r2, [pc, #268]	; (80044ec <TIM_Base_SetConfig+0x130>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00b      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a42      	ldr	r2, [pc, #264]	; (80044f0 <TIM_Base_SetConfig+0x134>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d007      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a41      	ldr	r2, [pc, #260]	; (80044f4 <TIM_Base_SetConfig+0x138>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a40      	ldr	r2, [pc, #256]	; (80044f8 <TIM_Base_SetConfig+0x13c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d108      	bne.n	800440e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a35      	ldr	r2, [pc, #212]	; (80044e8 <TIM_Base_SetConfig+0x12c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01f      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441c:	d01b      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a32      	ldr	r2, [pc, #200]	; (80044ec <TIM_Base_SetConfig+0x130>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d017      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a31      	ldr	r2, [pc, #196]	; (80044f0 <TIM_Base_SetConfig+0x134>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a30      	ldr	r2, [pc, #192]	; (80044f4 <TIM_Base_SetConfig+0x138>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00f      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2f      	ldr	r2, [pc, #188]	; (80044f8 <TIM_Base_SetConfig+0x13c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00b      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2e      	ldr	r2, [pc, #184]	; (80044fc <TIM_Base_SetConfig+0x140>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d007      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a2d      	ldr	r2, [pc, #180]	; (8004500 <TIM_Base_SetConfig+0x144>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <TIM_Base_SetConfig+0x148>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <TIM_Base_SetConfig+0x12c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00f      	beq.n	80044b4 <TIM_Base_SetConfig+0xf8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <TIM_Base_SetConfig+0x13c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00b      	beq.n	80044b4 <TIM_Base_SetConfig+0xf8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a17      	ldr	r2, [pc, #92]	; (80044fc <TIM_Base_SetConfig+0x140>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d007      	beq.n	80044b4 <TIM_Base_SetConfig+0xf8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a16      	ldr	r2, [pc, #88]	; (8004500 <TIM_Base_SetConfig+0x144>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_Base_SetConfig+0xf8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a15      	ldr	r2, [pc, #84]	; (8004504 <TIM_Base_SetConfig+0x148>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d103      	bne.n	80044bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f023 0201 	bic.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	611a      	str	r2, [r3, #16]
  }
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40010000 	.word	0x40010000
 80044ec:	40000400 	.word	0x40000400
 80044f0:	40000800 	.word	0x40000800
 80044f4:	40000c00 	.word	0x40000c00
 80044f8:	40010400 	.word	0x40010400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800

08004508 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e042      	b.n	80045dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fc f9bb 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2224      	movs	r2, #36	; 0x24
 8004572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fd90 	bl	80050b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f825 	bl	80045e4 <UART_SetConfig>
 800459a:	4603      	mov	r3, r0
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e01b      	b.n	80045dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fe0f 	bl	80051f8 <UART_CheckIdleState>
 80045da:	4603      	mov	r3, r0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e8:	b092      	sub	sp, #72	; 0x48
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	431a      	orrs	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	4313      	orrs	r3, r2
 800460a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4bbe      	ldr	r3, [pc, #760]	; (800490c <UART_SetConfig+0x328>)
 8004614:	4013      	ands	r3, r2
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800461c:	430b      	orrs	r3, r1
 800461e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4ab3      	ldr	r2, [pc, #716]	; (8004910 <UART_SetConfig+0x32c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800464c:	4313      	orrs	r3, r2
 800464e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	4baf      	ldr	r3, [pc, #700]	; (8004914 <UART_SetConfig+0x330>)
 8004658:	4013      	ands	r3, r2
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004660:	430b      	orrs	r3, r1
 8004662:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	f023 010f 	bic.w	r1, r3, #15
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4aa6      	ldr	r2, [pc, #664]	; (8004918 <UART_SetConfig+0x334>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d177      	bne.n	8004774 <UART_SetConfig+0x190>
 8004684:	4ba5      	ldr	r3, [pc, #660]	; (800491c <UART_SetConfig+0x338>)
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800468c:	2b28      	cmp	r3, #40	; 0x28
 800468e:	d86d      	bhi.n	800476c <UART_SetConfig+0x188>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0xb4>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	0800473d 	.word	0x0800473d
 800469c:	0800476d 	.word	0x0800476d
 80046a0:	0800476d 	.word	0x0800476d
 80046a4:	0800476d 	.word	0x0800476d
 80046a8:	0800476d 	.word	0x0800476d
 80046ac:	0800476d 	.word	0x0800476d
 80046b0:	0800476d 	.word	0x0800476d
 80046b4:	0800476d 	.word	0x0800476d
 80046b8:	08004745 	.word	0x08004745
 80046bc:	0800476d 	.word	0x0800476d
 80046c0:	0800476d 	.word	0x0800476d
 80046c4:	0800476d 	.word	0x0800476d
 80046c8:	0800476d 	.word	0x0800476d
 80046cc:	0800476d 	.word	0x0800476d
 80046d0:	0800476d 	.word	0x0800476d
 80046d4:	0800476d 	.word	0x0800476d
 80046d8:	0800474d 	.word	0x0800474d
 80046dc:	0800476d 	.word	0x0800476d
 80046e0:	0800476d 	.word	0x0800476d
 80046e4:	0800476d 	.word	0x0800476d
 80046e8:	0800476d 	.word	0x0800476d
 80046ec:	0800476d 	.word	0x0800476d
 80046f0:	0800476d 	.word	0x0800476d
 80046f4:	0800476d 	.word	0x0800476d
 80046f8:	08004755 	.word	0x08004755
 80046fc:	0800476d 	.word	0x0800476d
 8004700:	0800476d 	.word	0x0800476d
 8004704:	0800476d 	.word	0x0800476d
 8004708:	0800476d 	.word	0x0800476d
 800470c:	0800476d 	.word	0x0800476d
 8004710:	0800476d 	.word	0x0800476d
 8004714:	0800476d 	.word	0x0800476d
 8004718:	0800475d 	.word	0x0800475d
 800471c:	0800476d 	.word	0x0800476d
 8004720:	0800476d 	.word	0x0800476d
 8004724:	0800476d 	.word	0x0800476d
 8004728:	0800476d 	.word	0x0800476d
 800472c:	0800476d 	.word	0x0800476d
 8004730:	0800476d 	.word	0x0800476d
 8004734:	0800476d 	.word	0x0800476d
 8004738:	08004765 	.word	0x08004765
 800473c:	2301      	movs	r3, #1
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004742:	e222      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800474a:	e21e      	b.n	8004b8a <UART_SetConfig+0x5a6>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004752:	e21a      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800475a:	e216      	b.n	8004b8a <UART_SetConfig+0x5a6>
 800475c:	2320      	movs	r3, #32
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004762:	e212      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004764:	2340      	movs	r3, #64	; 0x40
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800476a:	e20e      	b.n	8004b8a <UART_SetConfig+0x5a6>
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004772:	e20a      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a69      	ldr	r2, [pc, #420]	; (8004920 <UART_SetConfig+0x33c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d130      	bne.n	80047e0 <UART_SetConfig+0x1fc>
 800477e:	4b67      	ldr	r3, [pc, #412]	; (800491c <UART_SetConfig+0x338>)
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	2b05      	cmp	r3, #5
 8004788:	d826      	bhi.n	80047d8 <UART_SetConfig+0x1f4>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x1ac>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047a9 	.word	0x080047a9
 8004794:	080047b1 	.word	0x080047b1
 8004798:	080047b9 	.word	0x080047b9
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ae:	e1ec      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80047b0:	2304      	movs	r3, #4
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b6:	e1e8      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80047b8:	2308      	movs	r3, #8
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047be:	e1e4      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80047c0:	2310      	movs	r3, #16
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047c6:	e1e0      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80047c8:	2320      	movs	r3, #32
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e1dc      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80047d0:	2340      	movs	r3, #64	; 0x40
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047d6:	e1d8      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047de:	e1d4      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a4f      	ldr	r2, [pc, #316]	; (8004924 <UART_SetConfig+0x340>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d130      	bne.n	800484c <UART_SetConfig+0x268>
 80047ea:	4b4c      	ldr	r3, [pc, #304]	; (800491c <UART_SetConfig+0x338>)
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d826      	bhi.n	8004844 <UART_SetConfig+0x260>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x218>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004815 	.word	0x08004815
 8004800:	0800481d 	.word	0x0800481d
 8004804:	08004825 	.word	0x08004825
 8004808:	0800482d 	.word	0x0800482d
 800480c:	08004835 	.word	0x08004835
 8004810:	0800483d 	.word	0x0800483d
 8004814:	2300      	movs	r3, #0
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800481a:	e1b6      	b.n	8004b8a <UART_SetConfig+0x5a6>
 800481c:	2304      	movs	r3, #4
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004822:	e1b2      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004824:	2308      	movs	r3, #8
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800482a:	e1ae      	b.n	8004b8a <UART_SetConfig+0x5a6>
 800482c:	2310      	movs	r3, #16
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004832:	e1aa      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004834:	2320      	movs	r3, #32
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483a:	e1a6      	b.n	8004b8a <UART_SetConfig+0x5a6>
 800483c:	2340      	movs	r3, #64	; 0x40
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004842:	e1a2      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484a:	e19e      	b.n	8004b8a <UART_SetConfig+0x5a6>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a35      	ldr	r2, [pc, #212]	; (8004928 <UART_SetConfig+0x344>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d130      	bne.n	80048b8 <UART_SetConfig+0x2d4>
 8004856:	4b31      	ldr	r3, [pc, #196]	; (800491c <UART_SetConfig+0x338>)
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	2b05      	cmp	r3, #5
 8004860:	d826      	bhi.n	80048b0 <UART_SetConfig+0x2cc>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x284>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004881 	.word	0x08004881
 800486c:	08004889 	.word	0x08004889
 8004870:	08004891 	.word	0x08004891
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a9 	.word	0x080048a9
 8004880:	2300      	movs	r3, #0
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004886:	e180      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004888:	2304      	movs	r3, #4
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488e:	e17c      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004890:	2308      	movs	r3, #8
 8004892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004896:	e178      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004898:	2310      	movs	r3, #16
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489e:	e174      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80048a0:	2320      	movs	r3, #32
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a6:	e170      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80048a8:	2340      	movs	r3, #64	; 0x40
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ae:	e16c      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048b6:	e168      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1b      	ldr	r2, [pc, #108]	; (800492c <UART_SetConfig+0x348>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d142      	bne.n	8004948 <UART_SetConfig+0x364>
 80048c2:	4b16      	ldr	r3, [pc, #88]	; (800491c <UART_SetConfig+0x338>)
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	2b05      	cmp	r3, #5
 80048cc:	d838      	bhi.n	8004940 <UART_SetConfig+0x35c>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x2f0>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	080048ed 	.word	0x080048ed
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	080048fd 	.word	0x080048fd
 80048e0:	08004905 	.word	0x08004905
 80048e4:	08004931 	.word	0x08004931
 80048e8:	08004939 	.word	0x08004939
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048f2:	e14a      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80048f4:	2304      	movs	r3, #4
 80048f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048fa:	e146      	b.n	8004b8a <UART_SetConfig+0x5a6>
 80048fc:	2308      	movs	r3, #8
 80048fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004902:	e142      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004904:	2310      	movs	r3, #16
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800490a:	e13e      	b.n	8004b8a <UART_SetConfig+0x5a6>
 800490c:	cfff69f3 	.word	0xcfff69f3
 8004910:	58000c00 	.word	0x58000c00
 8004914:	11fff4ff 	.word	0x11fff4ff
 8004918:	40011000 	.word	0x40011000
 800491c:	58024400 	.word	0x58024400
 8004920:	40004400 	.word	0x40004400
 8004924:	40004800 	.word	0x40004800
 8004928:	40004c00 	.word	0x40004c00
 800492c:	40005000 	.word	0x40005000
 8004930:	2320      	movs	r3, #32
 8004932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004936:	e128      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004938:	2340      	movs	r3, #64	; 0x40
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800493e:	e124      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004946:	e120      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4acb      	ldr	r2, [pc, #812]	; (8004c7c <UART_SetConfig+0x698>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d176      	bne.n	8004a40 <UART_SetConfig+0x45c>
 8004952:	4bcb      	ldr	r3, [pc, #812]	; (8004c80 <UART_SetConfig+0x69c>)
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800495a:	2b28      	cmp	r3, #40	; 0x28
 800495c:	d86c      	bhi.n	8004a38 <UART_SetConfig+0x454>
 800495e:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <UART_SetConfig+0x380>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	08004a09 	.word	0x08004a09
 8004968:	08004a39 	.word	0x08004a39
 800496c:	08004a39 	.word	0x08004a39
 8004970:	08004a39 	.word	0x08004a39
 8004974:	08004a39 	.word	0x08004a39
 8004978:	08004a39 	.word	0x08004a39
 800497c:	08004a39 	.word	0x08004a39
 8004980:	08004a39 	.word	0x08004a39
 8004984:	08004a11 	.word	0x08004a11
 8004988:	08004a39 	.word	0x08004a39
 800498c:	08004a39 	.word	0x08004a39
 8004990:	08004a39 	.word	0x08004a39
 8004994:	08004a39 	.word	0x08004a39
 8004998:	08004a39 	.word	0x08004a39
 800499c:	08004a39 	.word	0x08004a39
 80049a0:	08004a39 	.word	0x08004a39
 80049a4:	08004a19 	.word	0x08004a19
 80049a8:	08004a39 	.word	0x08004a39
 80049ac:	08004a39 	.word	0x08004a39
 80049b0:	08004a39 	.word	0x08004a39
 80049b4:	08004a39 	.word	0x08004a39
 80049b8:	08004a39 	.word	0x08004a39
 80049bc:	08004a39 	.word	0x08004a39
 80049c0:	08004a39 	.word	0x08004a39
 80049c4:	08004a21 	.word	0x08004a21
 80049c8:	08004a39 	.word	0x08004a39
 80049cc:	08004a39 	.word	0x08004a39
 80049d0:	08004a39 	.word	0x08004a39
 80049d4:	08004a39 	.word	0x08004a39
 80049d8:	08004a39 	.word	0x08004a39
 80049dc:	08004a39 	.word	0x08004a39
 80049e0:	08004a39 	.word	0x08004a39
 80049e4:	08004a29 	.word	0x08004a29
 80049e8:	08004a39 	.word	0x08004a39
 80049ec:	08004a39 	.word	0x08004a39
 80049f0:	08004a39 	.word	0x08004a39
 80049f4:	08004a39 	.word	0x08004a39
 80049f8:	08004a39 	.word	0x08004a39
 80049fc:	08004a39 	.word	0x08004a39
 8004a00:	08004a39 	.word	0x08004a39
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0e:	e0bc      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a10:	2304      	movs	r3, #4
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a16:	e0b8      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1e:	e0b4      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a26:	e0b0      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a28:	2320      	movs	r3, #32
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2e:	e0ac      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a30:	2340      	movs	r3, #64	; 0x40
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a36:	e0a8      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3e:	e0a4      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a8f      	ldr	r2, [pc, #572]	; (8004c84 <UART_SetConfig+0x6a0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d130      	bne.n	8004aac <UART_SetConfig+0x4c8>
 8004a4a:	4b8d      	ldr	r3, [pc, #564]	; (8004c80 <UART_SetConfig+0x69c>)
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d826      	bhi.n	8004aa4 <UART_SetConfig+0x4c0>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x478>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a75 	.word	0x08004a75
 8004a60:	08004a7d 	.word	0x08004a7d
 8004a64:	08004a85 	.word	0x08004a85
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7a:	e086      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a82:	e082      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a84:	2308      	movs	r3, #8
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8a:	e07e      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a92:	e07a      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a94:	2320      	movs	r3, #32
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9a:	e076      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004a9c:	2340      	movs	r3, #64	; 0x40
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa2:	e072      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004aa4:	2380      	movs	r3, #128	; 0x80
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aaa:	e06e      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a75      	ldr	r2, [pc, #468]	; (8004c88 <UART_SetConfig+0x6a4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d130      	bne.n	8004b18 <UART_SetConfig+0x534>
 8004ab6:	4b72      	ldr	r3, [pc, #456]	; (8004c80 <UART_SetConfig+0x69c>)
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	d826      	bhi.n	8004b10 <UART_SetConfig+0x52c>
 8004ac2:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x4e4>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004ae1 	.word	0x08004ae1
 8004acc:	08004ae9 	.word	0x08004ae9
 8004ad0:	08004af1 	.word	0x08004af1
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ae6:	e050      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aee:	e04c      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004af6:	e048      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afe:	e044      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004b00:	2320      	movs	r3, #32
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b06:	e040      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004b08:	2340      	movs	r3, #64	; 0x40
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0e:	e03c      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b16:	e038      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a5b      	ldr	r2, [pc, #364]	; (8004c8c <UART_SetConfig+0x6a8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d130      	bne.n	8004b84 <UART_SetConfig+0x5a0>
 8004b22:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <UART_SetConfig+0x69c>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	d826      	bhi.n	8004b7c <UART_SetConfig+0x598>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x550>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b4d 	.word	0x08004b4d
 8004b38:	08004b55 	.word	0x08004b55
 8004b3c:	08004b5d 	.word	0x08004b5d
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b52:	e01a      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004b54:	2304      	movs	r3, #4
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b5a:	e016      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b62:	e012      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6a:	e00e      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b72:	e00a      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004b74:	2340      	movs	r3, #64	; 0x40
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7a:	e006      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b82:	e002      	b.n	8004b8a <UART_SetConfig+0x5a6>
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3f      	ldr	r2, [pc, #252]	; (8004c8c <UART_SetConfig+0x6a8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	f040 80f8 	bne.w	8004d86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	dc46      	bgt.n	8004c2c <UART_SetConfig+0x648>
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	f2c0 8082 	blt.w	8004ca8 <UART_SetConfig+0x6c4>
 8004ba4:	3b02      	subs	r3, #2
 8004ba6:	2b1e      	cmp	r3, #30
 8004ba8:	d87e      	bhi.n	8004ca8 <UART_SetConfig+0x6c4>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x5cc>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004c33 	.word	0x08004c33
 8004bb4:	08004ca9 	.word	0x08004ca9
 8004bb8:	08004c3b 	.word	0x08004c3b
 8004bbc:	08004ca9 	.word	0x08004ca9
 8004bc0:	08004ca9 	.word	0x08004ca9
 8004bc4:	08004ca9 	.word	0x08004ca9
 8004bc8:	08004c4b 	.word	0x08004c4b
 8004bcc:	08004ca9 	.word	0x08004ca9
 8004bd0:	08004ca9 	.word	0x08004ca9
 8004bd4:	08004ca9 	.word	0x08004ca9
 8004bd8:	08004ca9 	.word	0x08004ca9
 8004bdc:	08004ca9 	.word	0x08004ca9
 8004be0:	08004ca9 	.word	0x08004ca9
 8004be4:	08004ca9 	.word	0x08004ca9
 8004be8:	08004c5b 	.word	0x08004c5b
 8004bec:	08004ca9 	.word	0x08004ca9
 8004bf0:	08004ca9 	.word	0x08004ca9
 8004bf4:	08004ca9 	.word	0x08004ca9
 8004bf8:	08004ca9 	.word	0x08004ca9
 8004bfc:	08004ca9 	.word	0x08004ca9
 8004c00:	08004ca9 	.word	0x08004ca9
 8004c04:	08004ca9 	.word	0x08004ca9
 8004c08:	08004ca9 	.word	0x08004ca9
 8004c0c:	08004ca9 	.word	0x08004ca9
 8004c10:	08004ca9 	.word	0x08004ca9
 8004c14:	08004ca9 	.word	0x08004ca9
 8004c18:	08004ca9 	.word	0x08004ca9
 8004c1c:	08004ca9 	.word	0x08004ca9
 8004c20:	08004ca9 	.word	0x08004ca9
 8004c24:	08004ca9 	.word	0x08004ca9
 8004c28:	08004c9b 	.word	0x08004c9b
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d037      	beq.n	8004ca0 <UART_SetConfig+0x6bc>
 8004c30:	e03a      	b.n	8004ca8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004c32:	f7fe fd97 	bl	8003764 <HAL_RCCEx_GetD3PCLK1Freq>
 8004c36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c38:	e03c      	b.n	8004cb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fda6 	bl	8003790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c48:	e034      	b.n	8004cb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c4a:	f107 0318 	add.w	r3, r7, #24
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fef2 	bl	8003a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c58:	e02c      	b.n	8004cb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <UART_SetConfig+0x69c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d016      	beq.n	8004c94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <UART_SetConfig+0x69c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	08db      	lsrs	r3, r3, #3
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	4a07      	ldr	r2, [pc, #28]	; (8004c90 <UART_SetConfig+0x6ac>)
 8004c72:	fa22 f303 	lsr.w	r3, r2, r3
 8004c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c78:	e01c      	b.n	8004cb4 <UART_SetConfig+0x6d0>
 8004c7a:	bf00      	nop
 8004c7c:	40011400 	.word	0x40011400
 8004c80:	58024400 	.word	0x58024400
 8004c84:	40007800 	.word	0x40007800
 8004c88:	40007c00 	.word	0x40007c00
 8004c8c:	58000c00 	.word	0x58000c00
 8004c90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004c94:	4b9d      	ldr	r3, [pc, #628]	; (8004f0c <UART_SetConfig+0x928>)
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c98:	e00c      	b.n	8004cb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c9a:	4b9d      	ldr	r3, [pc, #628]	; (8004f10 <UART_SetConfig+0x92c>)
 8004c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c9e:	e009      	b.n	8004cb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ca6:	e005      	b.n	8004cb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004cb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 81de 	beq.w	8005078 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	4a94      	ldr	r2, [pc, #592]	; (8004f14 <UART_SetConfig+0x930>)
 8004cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d305      	bcc.n	8004cec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d903      	bls.n	8004cf4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004cf2:	e1c1      	b.n	8005078 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	60fa      	str	r2, [r7, #12]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	4a84      	ldr	r2, [pc, #528]	; (8004f14 <UART_SetConfig+0x930>)
 8004d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2200      	movs	r2, #0
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d16:	f7fb fae3 	bl	80002e0 <__aeabi_uldivmod>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	020b      	lsls	r3, r1, #8
 8004d2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d30:	0202      	lsls	r2, r0, #8
 8004d32:	6979      	ldr	r1, [r7, #20]
 8004d34:	6849      	ldr	r1, [r1, #4]
 8004d36:	0849      	lsrs	r1, r1, #1
 8004d38:	2000      	movs	r0, #0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	eb12 0804 	adds.w	r8, r2, r4
 8004d42:	eb43 0905 	adc.w	r9, r3, r5
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	469a      	mov	sl, r3
 8004d4e:	4693      	mov	fp, r2
 8004d50:	4652      	mov	r2, sl
 8004d52:	465b      	mov	r3, fp
 8004d54:	4640      	mov	r0, r8
 8004d56:	4649      	mov	r1, r9
 8004d58:	f7fb fac2 	bl	80002e0 <__aeabi_uldivmod>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4613      	mov	r3, r2
 8004d62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d6a:	d308      	bcc.n	8004d7e <UART_SetConfig+0x79a>
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d72:	d204      	bcs.n	8004d7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d7a:	60da      	str	r2, [r3, #12]
 8004d7c:	e17c      	b.n	8005078 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004d84:	e178      	b.n	8005078 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d8e:	f040 80c5 	bne.w	8004f1c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004d92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	dc48      	bgt.n	8004e2c <UART_SetConfig+0x848>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	db7b      	blt.n	8004e96 <UART_SetConfig+0x8b2>
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d879      	bhi.n	8004e96 <UART_SetConfig+0x8b2>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <UART_SetConfig+0x7c4>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004e33 	.word	0x08004e33
 8004dac:	08004e3b 	.word	0x08004e3b
 8004db0:	08004e97 	.word	0x08004e97
 8004db4:	08004e97 	.word	0x08004e97
 8004db8:	08004e43 	.word	0x08004e43
 8004dbc:	08004e97 	.word	0x08004e97
 8004dc0:	08004e97 	.word	0x08004e97
 8004dc4:	08004e97 	.word	0x08004e97
 8004dc8:	08004e53 	.word	0x08004e53
 8004dcc:	08004e97 	.word	0x08004e97
 8004dd0:	08004e97 	.word	0x08004e97
 8004dd4:	08004e97 	.word	0x08004e97
 8004dd8:	08004e97 	.word	0x08004e97
 8004ddc:	08004e97 	.word	0x08004e97
 8004de0:	08004e97 	.word	0x08004e97
 8004de4:	08004e97 	.word	0x08004e97
 8004de8:	08004e63 	.word	0x08004e63
 8004dec:	08004e97 	.word	0x08004e97
 8004df0:	08004e97 	.word	0x08004e97
 8004df4:	08004e97 	.word	0x08004e97
 8004df8:	08004e97 	.word	0x08004e97
 8004dfc:	08004e97 	.word	0x08004e97
 8004e00:	08004e97 	.word	0x08004e97
 8004e04:	08004e97 	.word	0x08004e97
 8004e08:	08004e97 	.word	0x08004e97
 8004e0c:	08004e97 	.word	0x08004e97
 8004e10:	08004e97 	.word	0x08004e97
 8004e14:	08004e97 	.word	0x08004e97
 8004e18:	08004e97 	.word	0x08004e97
 8004e1c:	08004e97 	.word	0x08004e97
 8004e20:	08004e97 	.word	0x08004e97
 8004e24:	08004e97 	.word	0x08004e97
 8004e28:	08004e89 	.word	0x08004e89
 8004e2c:	2b40      	cmp	r3, #64	; 0x40
 8004e2e:	d02e      	beq.n	8004e8e <UART_SetConfig+0x8aa>
 8004e30:	e031      	b.n	8004e96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e32:	f7fd fa1f 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8004e36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e38:	e033      	b.n	8004ea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e3a:	f7fd fa31 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 8004e3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e40:	e02f      	b.n	8004ea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe fca2 	bl	8003790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e50:	e027      	b.n	8004ea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e52:	f107 0318 	add.w	r3, r7, #24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe fdee 	bl	8003a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e60:	e01f      	b.n	8004ea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e62:	4b2d      	ldr	r3, [pc, #180]	; (8004f18 <UART_SetConfig+0x934>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e6e:	4b2a      	ldr	r3, [pc, #168]	; (8004f18 <UART_SetConfig+0x934>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	08db      	lsrs	r3, r3, #3
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <UART_SetConfig+0x928>)
 8004e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e80:	e00f      	b.n	8004ea2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004e82:	4b22      	ldr	r3, [pc, #136]	; (8004f0c <UART_SetConfig+0x928>)
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e86:	e00c      	b.n	8004ea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e88:	4b21      	ldr	r3, [pc, #132]	; (8004f10 <UART_SetConfig+0x92c>)
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e8c:	e009      	b.n	8004ea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e94:	e005      	b.n	8004ea2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004ea0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80e7 	beq.w	8005078 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <UART_SetConfig+0x930>)
 8004eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ebc:	005a      	lsls	r2, r3, #1
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	441a      	add	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	2b0f      	cmp	r3, #15
 8004ed4:	d916      	bls.n	8004f04 <UART_SetConfig+0x920>
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004edc:	d212      	bcs.n	8004f04 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f023 030f 	bic.w	r3, r3, #15
 8004ee6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	e0b9      	b.n	8005078 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004f0a:	e0b5      	b.n	8005078 <UART_SetConfig+0xa94>
 8004f0c:	03d09000 	.word	0x03d09000
 8004f10:	003d0900 	.word	0x003d0900
 8004f14:	080084f0 	.word	0x080084f0
 8004f18:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	dc49      	bgt.n	8004fb8 <UART_SetConfig+0x9d4>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	db7c      	blt.n	8005022 <UART_SetConfig+0xa3e>
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d87a      	bhi.n	8005022 <UART_SetConfig+0xa3e>
 8004f2c:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <UART_SetConfig+0x950>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004fbf 	.word	0x08004fbf
 8004f38:	08004fc7 	.word	0x08004fc7
 8004f3c:	08005023 	.word	0x08005023
 8004f40:	08005023 	.word	0x08005023
 8004f44:	08004fcf 	.word	0x08004fcf
 8004f48:	08005023 	.word	0x08005023
 8004f4c:	08005023 	.word	0x08005023
 8004f50:	08005023 	.word	0x08005023
 8004f54:	08004fdf 	.word	0x08004fdf
 8004f58:	08005023 	.word	0x08005023
 8004f5c:	08005023 	.word	0x08005023
 8004f60:	08005023 	.word	0x08005023
 8004f64:	08005023 	.word	0x08005023
 8004f68:	08005023 	.word	0x08005023
 8004f6c:	08005023 	.word	0x08005023
 8004f70:	08005023 	.word	0x08005023
 8004f74:	08004fef 	.word	0x08004fef
 8004f78:	08005023 	.word	0x08005023
 8004f7c:	08005023 	.word	0x08005023
 8004f80:	08005023 	.word	0x08005023
 8004f84:	08005023 	.word	0x08005023
 8004f88:	08005023 	.word	0x08005023
 8004f8c:	08005023 	.word	0x08005023
 8004f90:	08005023 	.word	0x08005023
 8004f94:	08005023 	.word	0x08005023
 8004f98:	08005023 	.word	0x08005023
 8004f9c:	08005023 	.word	0x08005023
 8004fa0:	08005023 	.word	0x08005023
 8004fa4:	08005023 	.word	0x08005023
 8004fa8:	08005023 	.word	0x08005023
 8004fac:	08005023 	.word	0x08005023
 8004fb0:	08005023 	.word	0x08005023
 8004fb4:	08005015 	.word	0x08005015
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	d02e      	beq.n	800501a <UART_SetConfig+0xa36>
 8004fbc:	e031      	b.n	8005022 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fbe:	f7fd f959 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8004fc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004fc4:	e033      	b.n	800502e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc6:	f7fd f96b 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 8004fca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004fcc:	e02f      	b.n	800502e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fbdc 	bl	8003790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fdc:	e027      	b.n	800502e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fde:	f107 0318 	add.w	r3, r7, #24
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fd28 	bl	8003a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fec:	e01f      	b.n	800502e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fee:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <UART_SetConfig+0xac0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ffa:	4b2a      	ldr	r3, [pc, #168]	; (80050a4 <UART_SetConfig+0xac0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	08db      	lsrs	r3, r3, #3
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	4a28      	ldr	r2, [pc, #160]	; (80050a8 <UART_SetConfig+0xac4>)
 8005006:	fa22 f303 	lsr.w	r3, r2, r3
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800500c:	e00f      	b.n	800502e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800500e:	4b26      	ldr	r3, [pc, #152]	; (80050a8 <UART_SetConfig+0xac4>)
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005012:	e00c      	b.n	800502e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005014:	4b25      	ldr	r3, [pc, #148]	; (80050ac <UART_SetConfig+0xac8>)
 8005016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005018:	e009      	b.n	800502e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800501a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005020:	e005      	b.n	800502e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800502c:	bf00      	nop
    }

    if (pclk != 0U)
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d021      	beq.n	8005078 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <UART_SetConfig+0xacc>)
 800503a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800503e:	461a      	mov	r2, r3
 8005040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005042:	fbb3 f2f2 	udiv	r2, r3, r2
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	085b      	lsrs	r3, r3, #1
 800504c:	441a      	add	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	2b0f      	cmp	r3, #15
 800505c:	d909      	bls.n	8005072 <UART_SetConfig+0xa8e>
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d205      	bcs.n	8005072 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	b29a      	uxth	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60da      	str	r2, [r3, #12]
 8005070:	e002      	b.n	8005078 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2201      	movs	r2, #1
 800507c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2201      	movs	r2, #1
 8005084:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2200      	movs	r2, #0
 800508c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2200      	movs	r2, #0
 8005092:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005094:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005098:	4618      	mov	r0, r3
 800509a:	3748      	adds	r7, #72	; 0x48
 800509c:	46bd      	mov	sp, r7
 800509e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a2:	bf00      	nop
 80050a4:	58024400 	.word	0x58024400
 80050a8:	03d09000 	.word	0x03d09000
 80050ac:	003d0900 	.word	0x003d0900
 80050b0:	080084f0 	.word	0x080084f0

080050b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01a      	beq.n	80051ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b2:	d10a      	bne.n	80051ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
  }
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b098      	sub	sp, #96	; 0x60
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005208:	f7fb fd5a 	bl	8000cc0 <HAL_GetTick>
 800520c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b08      	cmp	r3, #8
 800521a:	d12f      	bne.n	800527c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800521c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005224:	2200      	movs	r2, #0
 8005226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f88e 	bl	800534c <UART_WaitOnFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d022      	beq.n	800527c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524a:	653b      	str	r3, [r7, #80]	; 0x50
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005254:	647b      	str	r3, [r7, #68]	; 0x44
 8005256:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800525a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e6      	bne.n	8005236 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2220      	movs	r2, #32
 800526c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e063      	b.n	8005344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b04      	cmp	r3, #4
 8005288:	d149      	bne.n	800531e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800528a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005292:	2200      	movs	r2, #0
 8005294:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f857 	bl	800534c <UART_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d03c      	beq.n	800531e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	623b      	str	r3, [r7, #32]
   return(result);
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c2:	633b      	str	r3, [r7, #48]	; 0x30
 80052c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e6      	bne.n	80052a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3308      	adds	r3, #8
 80052dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3308      	adds	r3, #8
 80052f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052f6:	61fa      	str	r2, [r7, #28]
 80052f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	69b9      	ldr	r1, [r7, #24]
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	617b      	str	r3, [r7, #20]
   return(result);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e5      	bne.n	80052d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e012      	b.n	8005344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3758      	adds	r7, #88	; 0x58
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535c:	e04f      	b.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005364:	d04b      	beq.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fb fcab 	bl	8000cc0 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <UART_WaitOnFlagUntilTimeout+0x30>
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e04e      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d037      	beq.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d034      	beq.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d031      	beq.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d110      	bne.n	80053ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2208      	movs	r2, #8
 80053ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f839 	bl	8005428 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2208      	movs	r2, #8
 80053ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e029      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d8:	d111      	bne.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f81f 	bl	8005428 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e00f      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	bf0c      	ite	eq
 800540e:	2301      	moveq	r3, #1
 8005410:	2300      	movne	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	429a      	cmp	r2, r3
 800541a:	d0a0      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b095      	sub	sp, #84	; 0x54
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544e:	643b      	str	r3, [r7, #64]	; 0x40
 8005450:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005454:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e6      	bne.n	8005430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3308      	adds	r3, #8
 8005468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	61fb      	str	r3, [r7, #28]
   return(result);
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <UART_EndRxTransfer+0xc8>)
 8005476:	4013      	ands	r3, r2
 8005478:	64bb      	str	r3, [r7, #72]	; 0x48
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3308      	adds	r3, #8
 8005480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e5      	bne.n	8005462 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d118      	bne.n	80054d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f023 0310 	bic.w	r3, r3, #16
 80054b2:	647b      	str	r3, [r7, #68]	; 0x44
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	6979      	ldr	r1, [r7, #20]
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	613b      	str	r3, [r7, #16]
   return(result);
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e6      	bne.n	800549e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80054e4:	bf00      	nop
 80054e6:	3754      	adds	r7, #84	; 0x54
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	effffffe 	.word	0xeffffffe

080054f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_UARTEx_DisableFifoMode+0x16>
 8005506:	2302      	movs	r3, #2
 8005508:	e027      	b.n	800555a <HAL_UARTEx_DisableFifoMode+0x66>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2224      	movs	r2, #36	; 0x24
 8005516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005538:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800557a:	2302      	movs	r3, #2
 800557c:	e02d      	b.n	80055da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2224      	movs	r2, #36	; 0x24
 800558a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0201 	bic.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f850 	bl	8005660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e02d      	b.n	8005656 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2224      	movs	r2, #36	; 0x24
 8005606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f812 	bl	8005660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800566c:	2b00      	cmp	r3, #0
 800566e:	d108      	bne.n	8005682 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005680:	e031      	b.n	80056e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005682:	2310      	movs	r3, #16
 8005684:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005686:	2310      	movs	r3, #16
 8005688:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	0e5b      	lsrs	r3, r3, #25
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	0f5b      	lsrs	r3, r3, #29
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056aa:	7bbb      	ldrb	r3, [r7, #14]
 80056ac:	7b3a      	ldrb	r2, [r7, #12]
 80056ae:	4911      	ldr	r1, [pc, #68]	; (80056f4 <UARTEx_SetNbDataToProcess+0x94>)
 80056b0:	5c8a      	ldrb	r2, [r1, r2]
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056b6:	7b3a      	ldrb	r2, [r7, #12]
 80056b8:	490f      	ldr	r1, [pc, #60]	; (80056f8 <UARTEx_SetNbDataToProcess+0x98>)
 80056ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	7b7a      	ldrb	r2, [r7, #13]
 80056cc:	4909      	ldr	r1, [pc, #36]	; (80056f4 <UARTEx_SetNbDataToProcess+0x94>)
 80056ce:	5c8a      	ldrb	r2, [r1, r2]
 80056d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056d4:	7b7a      	ldrb	r2, [r7, #13]
 80056d6:	4908      	ldr	r1, [pc, #32]	; (80056f8 <UARTEx_SetNbDataToProcess+0x98>)
 80056d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056da:	fb93 f3f2 	sdiv	r3, r3, r2
 80056de:	b29a      	uxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	08008508 	.word	0x08008508
 80056f8:	08008510 	.word	0x08008510

080056fc <__NVIC_SetPriority>:
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800570c:	2b00      	cmp	r3, #0
 800570e:	db0a      	blt.n	8005726 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	490c      	ldr	r1, [pc, #48]	; (8005748 <__NVIC_SetPriority+0x4c>)
 8005716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800571a:	0112      	lsls	r2, r2, #4
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	440b      	add	r3, r1
 8005720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005724:	e00a      	b.n	800573c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	4908      	ldr	r1, [pc, #32]	; (800574c <__NVIC_SetPriority+0x50>)
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	3b04      	subs	r3, #4
 8005734:	0112      	lsls	r2, r2, #4
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	440b      	add	r3, r1
 800573a:	761a      	strb	r2, [r3, #24]
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	e000e100 	.word	0xe000e100
 800574c:	e000ed00 	.word	0xe000ed00

08005750 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005754:	4b05      	ldr	r3, [pc, #20]	; (800576c <SysTick_Handler+0x1c>)
 8005756:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005758:	f001 fd28 	bl	80071ac <xTaskGetSchedulerState>
 800575c:	4603      	mov	r3, r0
 800575e:	2b01      	cmp	r3, #1
 8005760:	d001      	beq.n	8005766 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005762:	f002 fb11 	bl	8007d88 <xPortSysTickHandler>
  }
}
 8005766:	bf00      	nop
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	e000e010 	.word	0xe000e010

08005770 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005774:	2100      	movs	r1, #0
 8005776:	f06f 0004 	mvn.w	r0, #4
 800577a:	f7ff ffbf 	bl	80056fc <__NVIC_SetPriority>
#endif
}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800578a:	f3ef 8305 	mrs	r3, IPSR
 800578e:	603b      	str	r3, [r7, #0]
  return(result);
 8005790:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005796:	f06f 0305 	mvn.w	r3, #5
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	e00c      	b.n	80057b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800579e:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <osKernelInitialize+0x44>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d105      	bne.n	80057b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80057a6:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <osKernelInitialize+0x44>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	607b      	str	r3, [r7, #4]
 80057b0:	e002      	b.n	80057b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80057b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057b8:	687b      	ldr	r3, [r7, #4]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	2400016c 	.word	0x2400016c

080057cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057d2:	f3ef 8305 	mrs	r3, IPSR
 80057d6:	603b      	str	r3, [r7, #0]
  return(result);
 80057d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80057de:	f06f 0305 	mvn.w	r3, #5
 80057e2:	607b      	str	r3, [r7, #4]
 80057e4:	e010      	b.n	8005808 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80057e6:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <osKernelStart+0x48>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d109      	bne.n	8005802 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80057ee:	f7ff ffbf 	bl	8005770 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057f2:	4b08      	ldr	r3, [pc, #32]	; (8005814 <osKernelStart+0x48>)
 80057f4:	2202      	movs	r2, #2
 80057f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80057f8:	f001 f87c 	bl	80068f4 <vTaskStartScheduler>
      stat = osOK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	607b      	str	r3, [r7, #4]
 8005800:	e002      	b.n	8005808 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005808:	687b      	ldr	r3, [r7, #4]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	2400016c 	.word	0x2400016c

08005818 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b08e      	sub	sp, #56	; 0x38
 800581c:	af04      	add	r7, sp, #16
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005828:	f3ef 8305 	mrs	r3, IPSR
 800582c:	617b      	str	r3, [r7, #20]
  return(result);
 800582e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005830:	2b00      	cmp	r3, #0
 8005832:	d17e      	bne.n	8005932 <osThreadNew+0x11a>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d07b      	beq.n	8005932 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800583a:	2380      	movs	r3, #128	; 0x80
 800583c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800583e:	2318      	movs	r3, #24
 8005840:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800584a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d045      	beq.n	80058de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <osThreadNew+0x48>
        name = attr->name;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <osThreadNew+0x6e>
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b38      	cmp	r3, #56	; 0x38
 8005878:	d805      	bhi.n	8005886 <osThreadNew+0x6e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <osThreadNew+0x72>
        return (NULL);
 8005886:	2300      	movs	r3, #0
 8005888:	e054      	b.n	8005934 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	089b      	lsrs	r3, r3, #2
 8005898:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00e      	beq.n	80058c0 <osThreadNew+0xa8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	2ba7      	cmp	r3, #167	; 0xa7
 80058a8:	d90a      	bls.n	80058c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <osThreadNew+0xa8>
        mem = 1;
 80058ba:	2301      	movs	r3, #1
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	e010      	b.n	80058e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10c      	bne.n	80058e2 <osThreadNew+0xca>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d108      	bne.n	80058e2 <osThreadNew+0xca>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d104      	bne.n	80058e2 <osThreadNew+0xca>
          mem = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	e001      	b.n	80058e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d110      	bne.n	800590a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058f0:	9202      	str	r2, [sp, #8]
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	6a3a      	ldr	r2, [r7, #32]
 80058fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fe0c 	bl	800651c <xTaskCreateStatic>
 8005904:	4603      	mov	r3, r0
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	e013      	b.n	8005932 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d110      	bne.n	8005932 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	b29a      	uxth	r2, r3
 8005914:	f107 0310 	add.w	r3, r7, #16
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fe57 	bl	80065d6 <xTaskCreate>
 8005928:	4603      	mov	r3, r0
 800592a:	2b01      	cmp	r3, #1
 800592c:	d001      	beq.n	8005932 <osThreadNew+0x11a>
            hTask = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005932:	693b      	ldr	r3, [r7, #16]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3728      	adds	r7, #40	; 0x28
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005944:	f3ef 8305 	mrs	r3, IPSR
 8005948:	60bb      	str	r3, [r7, #8]
  return(result);
 800594a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <osDelay+0x1c>
    stat = osErrorISR;
 8005950:	f06f 0305 	mvn.w	r3, #5
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	e007      	b.n	8005968 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 ff92 	bl	800688c <vTaskDelay>
    }
  }

  return (stat);
 8005968:	68fb      	ldr	r3, [r7, #12]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a07      	ldr	r2, [pc, #28]	; (80059a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005984:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4a06      	ldr	r2, [pc, #24]	; (80059a4 <vApplicationGetIdleTaskMemory+0x30>)
 800598a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	601a      	str	r2, [r3, #0]
}
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	24000170 	.word	0x24000170
 80059a4:	24000218 	.word	0x24000218

080059a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4a07      	ldr	r2, [pc, #28]	; (80059d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80059b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4a06      	ldr	r2, [pc, #24]	; (80059d8 <vApplicationGetTimerTaskMemory+0x30>)
 80059be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c6:	601a      	str	r2, [r3, #0]
}
 80059c8:	bf00      	nop
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	24000418 	.word	0x24000418
 80059d8:	240004c0 	.word	0x240004c0

080059dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f103 0208 	add.w	r2, r3, #8
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f103 0208 	add.w	r2, r3, #8
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f103 0208 	add.w	r2, r3, #8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	601a      	str	r2, [r3, #0]
}
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a94:	d103      	bne.n	8005a9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	e00c      	b.n	8005ab8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	e002      	b.n	8005aac <vListInsert+0x2e>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d2f6      	bcs.n	8005aa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	601a      	str	r2, [r3, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6892      	ldr	r2, [r2, #8]
 8005b06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6852      	ldr	r2, [r2, #4]
 8005b10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d103      	bne.n	8005b24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	1e5a      	subs	r2, r3, #1
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b6e:	f002 f879 	bl	8007c64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7a:	68f9      	ldr	r1, [r7, #12]
 8005b7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b7e:	fb01 f303 	mul.w	r3, r1, r3
 8005b82:	441a      	add	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	68f9      	ldr	r1, [r7, #12]
 8005ba2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ba4:	fb01 f303 	mul.w	r3, r1, r3
 8005ba8:	441a      	add	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	22ff      	movs	r2, #255	; 0xff
 8005bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	22ff      	movs	r2, #255	; 0xff
 8005bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d114      	bne.n	8005bee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01a      	beq.n	8005c02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	3310      	adds	r3, #16
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 f929 	bl	8006e28 <xTaskRemoveFromEventList>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d012      	beq.n	8005c02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <xQueueGenericReset+0xcc>)
 8005bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	e009      	b.n	8005c02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3310      	adds	r3, #16
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff fef2 	bl	80059dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3324      	adds	r3, #36	; 0x24
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff feed 	bl	80059dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c02:	f002 f85f 	bl	8007cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c06:	2301      	movs	r3, #1
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	e000ed04 	.word	0xe000ed04

08005c14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08e      	sub	sp, #56	; 0x38
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <xQueueGenericCreateStatic+0x52>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <xQueueGenericCreateStatic+0x56>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <xQueueGenericCreateStatic+0x58>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	623b      	str	r3, [r7, #32]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <xQueueGenericCreateStatic+0x7e>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <xQueueGenericCreateStatic+0x82>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <xQueueGenericCreateStatic+0x84>
 8005c96:	2300      	movs	r3, #0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	61fb      	str	r3, [r7, #28]
}
 8005cae:	bf00      	nop
 8005cb0:	e7fe      	b.n	8005cb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cb2:	2350      	movs	r3, #80	; 0x50
 8005cb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b50      	cmp	r3, #80	; 0x50
 8005cba:	d00a      	beq.n	8005cd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	61bb      	str	r3, [r7, #24]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cd2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00d      	beq.n	8005cfa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ce6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f805 	bl	8005d04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3730      	adds	r7, #48	; 0x30
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d103      	bne.n	8005d20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e002      	b.n	8005d26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d32:	2101      	movs	r1, #1
 8005d34:	69b8      	ldr	r0, [r7, #24]
 8005d36:	f7ff ff05 	bl	8005b44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	78fa      	ldrb	r2, [r7, #3]
 8005d3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08e      	sub	sp, #56	; 0x38
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <xQueueGenericSend+0x32>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <xQueueGenericSend+0x40>
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <xQueueGenericSend+0x44>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <xQueueGenericSend+0x46>
 8005d90:	2300      	movs	r3, #0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <xQueueGenericSend+0x60>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d103      	bne.n	8005dba <xQueueGenericSend+0x6e>
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d101      	bne.n	8005dbe <xQueueGenericSend+0x72>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <xQueueGenericSend+0x74>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xQueueGenericSend+0x8e>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	623b      	str	r3, [r7, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dda:	f001 f9e7 	bl	80071ac <xTaskGetSchedulerState>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <xQueueGenericSend+0x9e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <xQueueGenericSend+0xa2>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <xQueueGenericSend+0xa4>
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xQueueGenericSend+0xbe>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	61fb      	str	r3, [r7, #28]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e0a:	f001 ff2b 	bl	8007c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d302      	bcc.n	8005e20 <xQueueGenericSend+0xd4>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d129      	bne.n	8005e74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e26:	f000 fa0b 	bl	8006240 <prvCopyDataToQueue>
 8005e2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d010      	beq.n	8005e56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	3324      	adds	r3, #36	; 0x24
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fff5 	bl	8006e28 <xTaskRemoveFromEventList>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d013      	beq.n	8005e6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e44:	4b3f      	ldr	r3, [pc, #252]	; (8005f44 <xQueueGenericSend+0x1f8>)
 8005e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	e00a      	b.n	8005e6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d007      	beq.n	8005e6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e5c:	4b39      	ldr	r3, [pc, #228]	; (8005f44 <xQueueGenericSend+0x1f8>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e6c:	f001 ff2a 	bl	8007cc4 <vPortExitCritical>
				return pdPASS;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e063      	b.n	8005f3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d103      	bne.n	8005e82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e7a:	f001 ff23 	bl	8007cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e05c      	b.n	8005f3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d106      	bne.n	8005e96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e88:	f107 0314 	add.w	r3, r7, #20
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 f82f 	bl	8006ef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e92:	2301      	movs	r3, #1
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e96:	f001 ff15 	bl	8007cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e9a:	f000 fd9b 	bl	80069d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e9e:	f001 fee1 	bl	8007c64 <vPortEnterCritical>
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ea8:	b25b      	sxtb	r3, r3
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eae:	d103      	bne.n	8005eb8 <xQueueGenericSend+0x16c>
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec4:	d103      	bne.n	8005ece <xQueueGenericSend+0x182>
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ece:	f001 fef9 	bl	8007cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ed2:	1d3a      	adds	r2, r7, #4
 8005ed4:	f107 0314 	add.w	r3, r7, #20
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 f81e 	bl	8006f1c <xTaskCheckForTimeOut>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d124      	bne.n	8005f30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ee8:	f000 faa2 	bl	8006430 <prvIsQueueFull>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d018      	beq.n	8005f24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	3310      	adds	r3, #16
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 ff44 	bl	8006d88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f02:	f000 fa2d 	bl	8006360 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f06:	f000 fd73 	bl	80069f0 <xTaskResumeAll>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f47f af7c 	bne.w	8005e0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <xQueueGenericSend+0x1f8>)
 8005f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	e772      	b.n	8005e0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f26:	f000 fa1b 	bl	8006360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f2a:	f000 fd61 	bl	80069f0 <xTaskResumeAll>
 8005f2e:	e76c      	b.n	8005e0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f32:	f000 fa15 	bl	8006360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f36:	f000 fd5b 	bl	80069f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3738      	adds	r7, #56	; 0x38
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	e000ed04 	.word	0xe000ed04

08005f48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b090      	sub	sp, #64	; 0x40
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d103      	bne.n	8005f84 <xQueueGenericSendFromISR+0x3c>
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <xQueueGenericSendFromISR+0x40>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <xQueueGenericSendFromISR+0x42>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d103      	bne.n	8005fb2 <xQueueGenericSendFromISR+0x6a>
 8005faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <xQueueGenericSendFromISR+0x6e>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <xQueueGenericSendFromISR+0x70>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	623b      	str	r3, [r7, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fd2:	f001 ff29 	bl	8007e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fd6:	f3ef 8211 	mrs	r2, BASEPRI
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	61fa      	str	r2, [r7, #28]
 8005fec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ff0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d302      	bcc.n	8006004 <xQueueGenericSendFromISR+0xbc>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d12f      	bne.n	8006064 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800600a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800601a:	f000 f911 	bl	8006240 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800601e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006026:	d112      	bne.n	800604e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	2b00      	cmp	r3, #0
 800602e:	d016      	beq.n	800605e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	3324      	adds	r3, #36	; 0x24
 8006034:	4618      	mov	r0, r3
 8006036:	f000 fef7 	bl	8006e28 <xTaskRemoveFromEventList>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00e      	beq.n	800605e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	e007      	b.n	800605e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800604e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006052:	3301      	adds	r3, #1
 8006054:	b2db      	uxtb	r3, r3
 8006056:	b25a      	sxtb	r2, r3
 8006058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800605e:	2301      	movs	r3, #1
 8006060:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006062:	e001      	b.n	8006068 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006064:	2300      	movs	r3, #0
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006072:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006076:	4618      	mov	r0, r3
 8006078:	3740      	adds	r7, #64	; 0x40
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08c      	sub	sp, #48	; 0x30
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800608c:	2300      	movs	r3, #0
 800608e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <xQueueReceive+0x30>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	623b      	str	r3, [r7, #32]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d103      	bne.n	80060be <xQueueReceive+0x3e>
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <xQueueReceive+0x42>
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <xQueueReceive+0x44>
 80060c2:	2300      	movs	r3, #0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <xQueueReceive+0x5e>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	61fb      	str	r3, [r7, #28]
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060de:	f001 f865 	bl	80071ac <xTaskGetSchedulerState>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d102      	bne.n	80060ee <xQueueReceive+0x6e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <xQueueReceive+0x72>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <xQueueReceive+0x74>
 80060f2:	2300      	movs	r3, #0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <xQueueReceive+0x8e>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	61bb      	str	r3, [r7, #24]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800610e:	f001 fda9 	bl	8007c64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01f      	beq.n	800615e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006122:	f000 f8f7 	bl	8006314 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	1e5a      	subs	r2, r3, #1
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00f      	beq.n	8006156 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	3310      	adds	r3, #16
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fe74 	bl	8006e28 <xTaskRemoveFromEventList>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006146:	4b3d      	ldr	r3, [pc, #244]	; (800623c <xQueueReceive+0x1bc>)
 8006148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006156:	f001 fdb5 	bl	8007cc4 <vPortExitCritical>
				return pdPASS;
 800615a:	2301      	movs	r3, #1
 800615c:	e069      	b.n	8006232 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d103      	bne.n	800616c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006164:	f001 fdae 	bl	8007cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006168:	2300      	movs	r3, #0
 800616a:	e062      	b.n	8006232 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006172:	f107 0310 	add.w	r3, r7, #16
 8006176:	4618      	mov	r0, r3
 8006178:	f000 feba 	bl	8006ef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800617c:	2301      	movs	r3, #1
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006180:	f001 fda0 	bl	8007cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006184:	f000 fc26 	bl	80069d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006188:	f001 fd6c 	bl	8007c64 <vPortEnterCritical>
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006192:	b25b      	sxtb	r3, r3
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006198:	d103      	bne.n	80061a2 <xQueueReceive+0x122>
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061a8:	b25b      	sxtb	r3, r3
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ae:	d103      	bne.n	80061b8 <xQueueReceive+0x138>
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b8:	f001 fd84 	bl	8007cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061bc:	1d3a      	adds	r2, r7, #4
 80061be:	f107 0310 	add.w	r3, r7, #16
 80061c2:	4611      	mov	r1, r2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fea9 	bl	8006f1c <xTaskCheckForTimeOut>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d123      	bne.n	8006218 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d2:	f000 f917 	bl	8006404 <prvIsQueueEmpty>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d017      	beq.n	800620c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	3324      	adds	r3, #36	; 0x24
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4611      	mov	r1, r2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fdcf 	bl	8006d88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ec:	f000 f8b8 	bl	8006360 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061f0:	f000 fbfe 	bl	80069f0 <xTaskResumeAll>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d189      	bne.n	800610e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061fa:	4b10      	ldr	r3, [pc, #64]	; (800623c <xQueueReceive+0x1bc>)
 80061fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	e780      	b.n	800610e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800620c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800620e:	f000 f8a7 	bl	8006360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006212:	f000 fbed 	bl	80069f0 <xTaskResumeAll>
 8006216:	e77a      	b.n	800610e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800621a:	f000 f8a1 	bl	8006360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800621e:	f000 fbe7 	bl	80069f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006224:	f000 f8ee 	bl	8006404 <prvIsQueueEmpty>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	f43f af6f 	beq.w	800610e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006230:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006232:	4618      	mov	r0, r3
 8006234:	3730      	adds	r7, #48	; 0x30
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006254:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10d      	bne.n	800627a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d14d      	bne.n	8006302 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 ffbc 	bl	80071e8 <xTaskPriorityDisinherit>
 8006270:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	e043      	b.n	8006302 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d119      	bne.n	80062b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6858      	ldr	r0, [r3, #4]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	461a      	mov	r2, r3
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	f002 f87a 	bl	8008384 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	441a      	add	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d32b      	bcc.n	8006302 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	e026      	b.n	8006302 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68d8      	ldr	r0, [r3, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	461a      	mov	r2, r3
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	f002 f860 	bl	8008384 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062cc:	425b      	negs	r3, r3
 80062ce:	441a      	add	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d207      	bcs.n	80062f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	425b      	negs	r3, r3
 80062ea:	441a      	add	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d105      	bne.n	8006302 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	3b01      	subs	r3, #1
 8006300:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800630a:	697b      	ldr	r3, [r7, #20]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d018      	beq.n	8006358 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	441a      	add	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	429a      	cmp	r2, r3
 800633e:	d303      	bcc.n	8006348 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68d9      	ldr	r1, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	461a      	mov	r2, r3
 8006352:	6838      	ldr	r0, [r7, #0]
 8006354:	f002 f816 	bl	8008384 <memcpy>
	}
}
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006368:	f001 fc7c 	bl	8007c64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006372:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006374:	e011      	b.n	800639a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	d012      	beq.n	80063a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3324      	adds	r3, #36	; 0x24
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fd50 	bl	8006e28 <xTaskRemoveFromEventList>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800638e:	f000 fe27 	bl	8006fe0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	3b01      	subs	r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800639a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	dce9      	bgt.n	8006376 <prvUnlockQueue+0x16>
 80063a2:	e000      	b.n	80063a6 <prvUnlockQueue+0x46>
					break;
 80063a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	22ff      	movs	r2, #255	; 0xff
 80063aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80063ae:	f001 fc89 	bl	8007cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063b2:	f001 fc57 	bl	8007c64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063be:	e011      	b.n	80063e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d012      	beq.n	80063ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3310      	adds	r3, #16
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fd2b 	bl	8006e28 <xTaskRemoveFromEventList>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063d8:	f000 fe02 	bl	8006fe0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	3b01      	subs	r3, #1
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	dce9      	bgt.n	80063c0 <prvUnlockQueue+0x60>
 80063ec:	e000      	b.n	80063f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	22ff      	movs	r2, #255	; 0xff
 80063f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80063f8:	f001 fc64 	bl	8007cc4 <vPortExitCritical>
}
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800640c:	f001 fc2a 	bl	8007c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006418:	2301      	movs	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	e001      	b.n	8006422 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006422:	f001 fc4f 	bl	8007cc4 <vPortExitCritical>

	return xReturn;
 8006426:	68fb      	ldr	r3, [r7, #12]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006438:	f001 fc14 	bl	8007c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006444:	429a      	cmp	r2, r3
 8006446:	d102      	bne.n	800644e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006448:	2301      	movs	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	e001      	b.n	8006452 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006452:	f001 fc37 	bl	8007cc4 <vPortExitCritical>

	return xReturn;
 8006456:	68fb      	ldr	r3, [r7, #12]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e014      	b.n	800649a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006470:	4a0f      	ldr	r2, [pc, #60]	; (80064b0 <vQueueAddToRegistry+0x50>)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800647c:	490c      	ldr	r1, [pc, #48]	; (80064b0 <vQueueAddToRegistry+0x50>)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006486:	4a0a      	ldr	r2, [pc, #40]	; (80064b0 <vQueueAddToRegistry+0x50>)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	4413      	add	r3, r2
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006492:	e006      	b.n	80064a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b07      	cmp	r3, #7
 800649e:	d9e7      	bls.n	8006470 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	240008c0 	.word	0x240008c0

080064b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064c4:	f001 fbce 	bl	8007c64 <vPortEnterCritical>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ce:	b25b      	sxtb	r3, r3
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064d4:	d103      	bne.n	80064de <vQueueWaitForMessageRestricted+0x2a>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ea:	d103      	bne.n	80064f4 <vQueueWaitForMessageRestricted+0x40>
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064f4:	f001 fbe6 	bl	8007cc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d106      	bne.n	800650e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	3324      	adds	r3, #36	; 0x24
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fc61 	bl	8006dd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800650e:	6978      	ldr	r0, [r7, #20]
 8006510:	f7ff ff26 	bl	8006360 <prvUnlockQueue>
	}
 8006514:	bf00      	nop
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08e      	sub	sp, #56	; 0x38
 8006520:	af04      	add	r7, sp, #16
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800652a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	623b      	str	r3, [r7, #32]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xTaskCreateStatic+0x46>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	61fb      	str	r3, [r7, #28]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006562:	23a8      	movs	r3, #168	; 0xa8
 8006564:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2ba8      	cmp	r3, #168	; 0xa8
 800656a:	d00a      	beq.n	8006582 <xTaskCreateStatic+0x66>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	61bb      	str	r3, [r7, #24]
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006582:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01e      	beq.n	80065c8 <xTaskCreateStatic+0xac>
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01b      	beq.n	80065c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006598:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	2202      	movs	r2, #2
 800659e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065a2:	2300      	movs	r3, #0
 80065a4:	9303      	str	r3, [sp, #12]
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	9302      	str	r3, [sp, #8]
 80065aa:	f107 0314 	add.w	r3, r7, #20
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f850 	bl	8006660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065c2:	f000 f8f3 	bl	80067ac <prvAddNewTaskToReadyList>
 80065c6:	e001      	b.n	80065cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065cc:	697b      	ldr	r3, [r7, #20]
	}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3728      	adds	r7, #40	; 0x28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b08c      	sub	sp, #48	; 0x30
 80065da:	af04      	add	r7, sp, #16
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	603b      	str	r3, [r7, #0]
 80065e2:	4613      	mov	r3, r2
 80065e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f001 fc5c 	bl	8007ea8 <pvPortMalloc>
 80065f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00e      	beq.n	8006616 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065f8:	20a8      	movs	r0, #168	; 0xa8
 80065fa:	f001 fc55 	bl	8007ea8 <pvPortMalloc>
 80065fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	631a      	str	r2, [r3, #48]	; 0x30
 800660c:	e005      	b.n	800661a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800660e:	6978      	ldr	r0, [r7, #20]
 8006610:	f001 fd16 	bl	8008040 <vPortFree>
 8006614:	e001      	b.n	800661a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d017      	beq.n	8006650 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006628:	88fa      	ldrh	r2, [r7, #6]
 800662a:	2300      	movs	r3, #0
 800662c:	9303      	str	r3, [sp, #12]
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	9302      	str	r3, [sp, #8]
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 f80e 	bl	8006660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006644:	69f8      	ldr	r0, [r7, #28]
 8006646:	f000 f8b1 	bl	80067ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800664a:	2301      	movs	r3, #1
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	e002      	b.n	8006656 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006654:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006656:	69bb      	ldr	r3, [r7, #24]
	}
 8006658:	4618      	mov	r0, r3
 800665a:	3720      	adds	r7, #32
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	461a      	mov	r2, r3
 8006678:	21a5      	movs	r1, #165	; 0xa5
 800667a:	f001 fdff 	bl	800827c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006688:	440b      	add	r3, r1
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f023 0307 	bic.w	r3, r3, #7
 8006696:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	617b      	str	r3, [r7, #20]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d01f      	beq.n	80066fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066be:	2300      	movs	r3, #0
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	e012      	b.n	80066ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	4413      	add	r3, r2
 80066ca:	7819      	ldrb	r1, [r3, #0]
 80066cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	3334      	adds	r3, #52	; 0x34
 80066d4:	460a      	mov	r2, r1
 80066d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d006      	beq.n	80066f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	3301      	adds	r3, #1
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	2b0f      	cmp	r3, #15
 80066ee:	d9e9      	bls.n	80066c4 <prvInitialiseNewTask+0x64>
 80066f0:	e000      	b.n	80066f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80066f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066fc:	e003      	b.n	8006706 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	2b37      	cmp	r3, #55	; 0x37
 800670a:	d901      	bls.n	8006710 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800670c:	2337      	movs	r3, #55	; 0x37
 800670e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006714:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	2200      	movs	r2, #0
 8006720:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	3304      	adds	r3, #4
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff f978 	bl	8005a1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	3318      	adds	r3, #24
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff f973 	bl	8005a1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	2200      	movs	r2, #0
 8006758:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	3354      	adds	r3, #84	; 0x54
 8006760:	224c      	movs	r2, #76	; 0x4c
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f001 fd89 	bl	800827c <memset>
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	4a0c      	ldr	r2, [pc, #48]	; (80067a0 <prvInitialiseNewTask+0x140>)
 800676e:	659a      	str	r2, [r3, #88]	; 0x58
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	4a0c      	ldr	r2, [pc, #48]	; (80067a4 <prvInitialiseNewTask+0x144>)
 8006774:	65da      	str	r2, [r3, #92]	; 0x5c
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	4a0b      	ldr	r2, [pc, #44]	; (80067a8 <prvInitialiseNewTask+0x148>)
 800677a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	69b8      	ldr	r0, [r7, #24]
 8006782:	f001 f941 	bl	8007a08 <pxPortInitialiseStack>
 8006786:	4602      	mov	r2, r0
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006796:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006798:	bf00      	nop
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	24004b54 	.word	0x24004b54
 80067a4:	24004bbc 	.word	0x24004bbc
 80067a8:	24004c24 	.word	0x24004c24

080067ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067b4:	f001 fa56 	bl	8007c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067b8:	4b2d      	ldr	r3, [pc, #180]	; (8006870 <prvAddNewTaskToReadyList+0xc4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3301      	adds	r3, #1
 80067be:	4a2c      	ldr	r2, [pc, #176]	; (8006870 <prvAddNewTaskToReadyList+0xc4>)
 80067c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067c2:	4b2c      	ldr	r3, [pc, #176]	; (8006874 <prvAddNewTaskToReadyList+0xc8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d109      	bne.n	80067de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067ca:	4a2a      	ldr	r2, [pc, #168]	; (8006874 <prvAddNewTaskToReadyList+0xc8>)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067d0:	4b27      	ldr	r3, [pc, #156]	; (8006870 <prvAddNewTaskToReadyList+0xc4>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d110      	bne.n	80067fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067d8:	f000 fc26 	bl	8007028 <prvInitialiseTaskLists>
 80067dc:	e00d      	b.n	80067fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067de:	4b26      	ldr	r3, [pc, #152]	; (8006878 <prvAddNewTaskToReadyList+0xcc>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067e6:	4b23      	ldr	r3, [pc, #140]	; (8006874 <prvAddNewTaskToReadyList+0xc8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d802      	bhi.n	80067fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067f4:	4a1f      	ldr	r2, [pc, #124]	; (8006874 <prvAddNewTaskToReadyList+0xc8>)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067fa:	4b20      	ldr	r3, [pc, #128]	; (800687c <prvAddNewTaskToReadyList+0xd0>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3301      	adds	r3, #1
 8006800:	4a1e      	ldr	r2, [pc, #120]	; (800687c <prvAddNewTaskToReadyList+0xd0>)
 8006802:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006804:	4b1d      	ldr	r3, [pc, #116]	; (800687c <prvAddNewTaskToReadyList+0xd0>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006810:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <prvAddNewTaskToReadyList+0xd4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d903      	bls.n	8006820 <prvAddNewTaskToReadyList+0x74>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	4a18      	ldr	r2, [pc, #96]	; (8006880 <prvAddNewTaskToReadyList+0xd4>)
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4a15      	ldr	r2, [pc, #84]	; (8006884 <prvAddNewTaskToReadyList+0xd8>)
 800682e:	441a      	add	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3304      	adds	r3, #4
 8006834:	4619      	mov	r1, r3
 8006836:	4610      	mov	r0, r2
 8006838:	f7ff f8fd 	bl	8005a36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800683c:	f001 fa42 	bl	8007cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006840:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <prvAddNewTaskToReadyList+0xcc>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00e      	beq.n	8006866 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006848:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <prvAddNewTaskToReadyList+0xc8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006852:	429a      	cmp	r2, r3
 8006854:	d207      	bcs.n	8006866 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006856:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <prvAddNewTaskToReadyList+0xdc>)
 8006858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	24000dd4 	.word	0x24000dd4
 8006874:	24000900 	.word	0x24000900
 8006878:	24000de0 	.word	0x24000de0
 800687c:	24000df0 	.word	0x24000df0
 8006880:	24000ddc 	.word	0x24000ddc
 8006884:	24000904 	.word	0x24000904
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d017      	beq.n	80068ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800689e:	4b13      	ldr	r3, [pc, #76]	; (80068ec <vTaskDelay+0x60>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <vTaskDelay+0x30>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	60bb      	str	r3, [r7, #8]
}
 80068b8:	bf00      	nop
 80068ba:	e7fe      	b.n	80068ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80068bc:	f000 f88a 	bl	80069d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068c0:	2100      	movs	r1, #0
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fcfe 	bl	80072c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068c8:	f000 f892 	bl	80069f0 <xTaskResumeAll>
 80068cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d107      	bne.n	80068e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <vTaskDelay+0x64>)
 80068d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	24000dfc 	.word	0x24000dfc
 80068f0:	e000ed04 	.word	0xe000ed04

080068f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08a      	sub	sp, #40	; 0x28
 80068f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068fe:	2300      	movs	r3, #0
 8006900:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006902:	463a      	mov	r2, r7
 8006904:	1d39      	adds	r1, r7, #4
 8006906:	f107 0308 	add.w	r3, r7, #8
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff f832 	bl	8005974 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	9202      	str	r2, [sp, #8]
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	2300      	movs	r3, #0
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	2300      	movs	r3, #0
 8006920:	460a      	mov	r2, r1
 8006922:	4924      	ldr	r1, [pc, #144]	; (80069b4 <vTaskStartScheduler+0xc0>)
 8006924:	4824      	ldr	r0, [pc, #144]	; (80069b8 <vTaskStartScheduler+0xc4>)
 8006926:	f7ff fdf9 	bl	800651c <xTaskCreateStatic>
 800692a:	4603      	mov	r3, r0
 800692c:	4a23      	ldr	r2, [pc, #140]	; (80069bc <vTaskStartScheduler+0xc8>)
 800692e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006930:	4b22      	ldr	r3, [pc, #136]	; (80069bc <vTaskStartScheduler+0xc8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006938:	2301      	movs	r3, #1
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	e001      	b.n	8006942 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d102      	bne.n	800694e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006948:	f000 fd10 	bl	800736c <xTimerCreateTimerTask>
 800694c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d11b      	bne.n	800698c <vTaskStartScheduler+0x98>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	613b      	str	r3, [r7, #16]
}
 8006966:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006968:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <vTaskStartScheduler+0xcc>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3354      	adds	r3, #84	; 0x54
 800696e:	4a15      	ldr	r2, [pc, #84]	; (80069c4 <vTaskStartScheduler+0xd0>)
 8006970:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <vTaskStartScheduler+0xd4>)
 8006974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006978:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800697a:	4b14      	ldr	r3, [pc, #80]	; (80069cc <vTaskStartScheduler+0xd8>)
 800697c:	2201      	movs	r2, #1
 800697e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006980:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <vTaskStartScheduler+0xdc>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006986:	f001 f8cb 	bl	8007b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800698a:	e00e      	b.n	80069aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006992:	d10a      	bne.n	80069aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60fb      	str	r3, [r7, #12]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <vTaskStartScheduler+0xb4>
}
 80069aa:	bf00      	nop
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	08008480 	.word	0x08008480
 80069b8:	08006ff9 	.word	0x08006ff9
 80069bc:	24000df8 	.word	0x24000df8
 80069c0:	24000900 	.word	0x24000900
 80069c4:	24000060 	.word	0x24000060
 80069c8:	24000df4 	.word	0x24000df4
 80069cc:	24000de0 	.word	0x24000de0
 80069d0:	24000dd8 	.word	0x24000dd8

080069d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80069d8:	4b04      	ldr	r3, [pc, #16]	; (80069ec <vTaskSuspendAll+0x18>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3301      	adds	r3, #1
 80069de:	4a03      	ldr	r2, [pc, #12]	; (80069ec <vTaskSuspendAll+0x18>)
 80069e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80069e2:	bf00      	nop
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	24000dfc 	.word	0x24000dfc

080069f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069fe:	4b42      	ldr	r3, [pc, #264]	; (8006b08 <xTaskResumeAll+0x118>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <xTaskResumeAll+0x2c>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	603b      	str	r3, [r7, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	e7fe      	b.n	8006a1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a1c:	f001 f922 	bl	8007c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a20:	4b39      	ldr	r3, [pc, #228]	; (8006b08 <xTaskResumeAll+0x118>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	4a38      	ldr	r2, [pc, #224]	; (8006b08 <xTaskResumeAll+0x118>)
 8006a28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a2a:	4b37      	ldr	r3, [pc, #220]	; (8006b08 <xTaskResumeAll+0x118>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d162      	bne.n	8006af8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a32:	4b36      	ldr	r3, [pc, #216]	; (8006b0c <xTaskResumeAll+0x11c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d05e      	beq.n	8006af8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a3a:	e02f      	b.n	8006a9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a3c:	4b34      	ldr	r3, [pc, #208]	; (8006b10 <xTaskResumeAll+0x120>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3318      	adds	r3, #24
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff f851 	bl	8005af0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3304      	adds	r3, #4
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff f84c 	bl	8005af0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5c:	4b2d      	ldr	r3, [pc, #180]	; (8006b14 <xTaskResumeAll+0x124>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d903      	bls.n	8006a6c <xTaskResumeAll+0x7c>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	4a2a      	ldr	r2, [pc, #168]	; (8006b14 <xTaskResumeAll+0x124>)
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4a27      	ldr	r2, [pc, #156]	; (8006b18 <xTaskResumeAll+0x128>)
 8006a7a:	441a      	add	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	4619      	mov	r1, r3
 8006a82:	4610      	mov	r0, r2
 8006a84:	f7fe ffd7 	bl	8005a36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	4b23      	ldr	r3, [pc, #140]	; (8006b1c <xTaskResumeAll+0x12c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d302      	bcc.n	8006a9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a96:	4b22      	ldr	r3, [pc, #136]	; (8006b20 <xTaskResumeAll+0x130>)
 8006a98:	2201      	movs	r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a9c:	4b1c      	ldr	r3, [pc, #112]	; (8006b10 <xTaskResumeAll+0x120>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1cb      	bne.n	8006a3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006aaa:	f000 fb5f 	bl	800716c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006aae:	4b1d      	ldr	r3, [pc, #116]	; (8006b24 <xTaskResumeAll+0x134>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d010      	beq.n	8006adc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006aba:	f000 f847 	bl	8006b4c <xTaskIncrementTick>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ac4:	4b16      	ldr	r3, [pc, #88]	; (8006b20 <xTaskResumeAll+0x130>)
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1f1      	bne.n	8006aba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006ad6:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <xTaskResumeAll+0x134>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006adc:	4b10      	ldr	r3, [pc, #64]	; (8006b20 <xTaskResumeAll+0x130>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ae8:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <xTaskResumeAll+0x138>)
 8006aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006af8:	f001 f8e4 	bl	8007cc4 <vPortExitCritical>

	return xAlreadyYielded;
 8006afc:	68bb      	ldr	r3, [r7, #8]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	24000dfc 	.word	0x24000dfc
 8006b0c:	24000dd4 	.word	0x24000dd4
 8006b10:	24000d94 	.word	0x24000d94
 8006b14:	24000ddc 	.word	0x24000ddc
 8006b18:	24000904 	.word	0x24000904
 8006b1c:	24000900 	.word	0x24000900
 8006b20:	24000de8 	.word	0x24000de8
 8006b24:	24000de4 	.word	0x24000de4
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <xTaskGetTickCount+0x1c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b38:	687b      	ldr	r3, [r7, #4]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	24000dd8 	.word	0x24000dd8

08006b4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b56:	4b4f      	ldr	r3, [pc, #316]	; (8006c94 <xTaskIncrementTick+0x148>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f040 808f 	bne.w	8006c7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b60:	4b4d      	ldr	r3, [pc, #308]	; (8006c98 <xTaskIncrementTick+0x14c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3301      	adds	r3, #1
 8006b66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b68:	4a4b      	ldr	r2, [pc, #300]	; (8006c98 <xTaskIncrementTick+0x14c>)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d120      	bne.n	8006bb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b74:	4b49      	ldr	r3, [pc, #292]	; (8006c9c <xTaskIncrementTick+0x150>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <xTaskIncrementTick+0x48>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	603b      	str	r3, [r7, #0]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <xTaskIncrementTick+0x46>
 8006b94:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <xTaskIncrementTick+0x150>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	4b41      	ldr	r3, [pc, #260]	; (8006ca0 <xTaskIncrementTick+0x154>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a3f      	ldr	r2, [pc, #252]	; (8006c9c <xTaskIncrementTick+0x150>)
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	4a3f      	ldr	r2, [pc, #252]	; (8006ca0 <xTaskIncrementTick+0x154>)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	4b3e      	ldr	r3, [pc, #248]	; (8006ca4 <xTaskIncrementTick+0x158>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	4a3d      	ldr	r2, [pc, #244]	; (8006ca4 <xTaskIncrementTick+0x158>)
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	f000 fadb 	bl	800716c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bb6:	4b3c      	ldr	r3, [pc, #240]	; (8006ca8 <xTaskIncrementTick+0x15c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d349      	bcc.n	8006c54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bc0:	4b36      	ldr	r3, [pc, #216]	; (8006c9c <xTaskIncrementTick+0x150>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d104      	bne.n	8006bd4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bca:	4b37      	ldr	r3, [pc, #220]	; (8006ca8 <xTaskIncrementTick+0x15c>)
 8006bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bd0:	601a      	str	r2, [r3, #0]
					break;
 8006bd2:	e03f      	b.n	8006c54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd4:	4b31      	ldr	r3, [pc, #196]	; (8006c9c <xTaskIncrementTick+0x150>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d203      	bcs.n	8006bf4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006bec:	4a2e      	ldr	r2, [pc, #184]	; (8006ca8 <xTaskIncrementTick+0x15c>)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bf2:	e02f      	b.n	8006c54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fe ff79 	bl	8005af0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d004      	beq.n	8006c10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	3318      	adds	r3, #24
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fe ff70 	bl	8005af0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c14:	4b25      	ldr	r3, [pc, #148]	; (8006cac <xTaskIncrementTick+0x160>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d903      	bls.n	8006c24 <xTaskIncrementTick+0xd8>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	4a22      	ldr	r2, [pc, #136]	; (8006cac <xTaskIncrementTick+0x160>)
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <xTaskIncrementTick+0x164>)
 8006c32:	441a      	add	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	f7fe fefb 	bl	8005a36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	4b1b      	ldr	r3, [pc, #108]	; (8006cb4 <xTaskIncrementTick+0x168>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d3b8      	bcc.n	8006bc0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c52:	e7b5      	b.n	8006bc0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c54:	4b17      	ldr	r3, [pc, #92]	; (8006cb4 <xTaskIncrementTick+0x168>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5a:	4915      	ldr	r1, [pc, #84]	; (8006cb0 <xTaskIncrementTick+0x164>)
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d901      	bls.n	8006c70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c70:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <xTaskIncrementTick+0x16c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d007      	beq.n	8006c88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e004      	b.n	8006c88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <xTaskIncrementTick+0x170>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3301      	adds	r3, #1
 8006c84:	4a0d      	ldr	r2, [pc, #52]	; (8006cbc <xTaskIncrementTick+0x170>)
 8006c86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c88:	697b      	ldr	r3, [r7, #20]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	24000dfc 	.word	0x24000dfc
 8006c98:	24000dd8 	.word	0x24000dd8
 8006c9c:	24000d8c 	.word	0x24000d8c
 8006ca0:	24000d90 	.word	0x24000d90
 8006ca4:	24000dec 	.word	0x24000dec
 8006ca8:	24000df4 	.word	0x24000df4
 8006cac:	24000ddc 	.word	0x24000ddc
 8006cb0:	24000904 	.word	0x24000904
 8006cb4:	24000900 	.word	0x24000900
 8006cb8:	24000de8 	.word	0x24000de8
 8006cbc:	24000de4 	.word	0x24000de4

08006cc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cc6:	4b2a      	ldr	r3, [pc, #168]	; (8006d70 <vTaskSwitchContext+0xb0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006cce:	4b29      	ldr	r3, [pc, #164]	; (8006d74 <vTaskSwitchContext+0xb4>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006cd4:	e046      	b.n	8006d64 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006cd6:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <vTaskSwitchContext+0xb4>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cdc:	4b26      	ldr	r3, [pc, #152]	; (8006d78 <vTaskSwitchContext+0xb8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	e010      	b.n	8006d06 <vTaskSwitchContext+0x46>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <vTaskSwitchContext+0x40>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	607b      	str	r3, [r7, #4]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <vTaskSwitchContext+0x3e>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	491d      	ldr	r1, [pc, #116]	; (8006d7c <vTaskSwitchContext+0xbc>)
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0e4      	beq.n	8006ce4 <vTaskSwitchContext+0x24>
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4a15      	ldr	r2, [pc, #84]	; (8006d7c <vTaskSwitchContext+0xbc>)
 8006d26:	4413      	add	r3, r2
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	605a      	str	r2, [r3, #4]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d104      	bne.n	8006d4a <vTaskSwitchContext+0x8a>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	4a0b      	ldr	r2, [pc, #44]	; (8006d80 <vTaskSwitchContext+0xc0>)
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	4a08      	ldr	r2, [pc, #32]	; (8006d78 <vTaskSwitchContext+0xb8>)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d5a:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <vTaskSwitchContext+0xc0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3354      	adds	r3, #84	; 0x54
 8006d60:	4a08      	ldr	r2, [pc, #32]	; (8006d84 <vTaskSwitchContext+0xc4>)
 8006d62:	6013      	str	r3, [r2, #0]
}
 8006d64:	bf00      	nop
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	24000dfc 	.word	0x24000dfc
 8006d74:	24000de8 	.word	0x24000de8
 8006d78:	24000ddc 	.word	0x24000ddc
 8006d7c:	24000904 	.word	0x24000904
 8006d80:	24000900 	.word	0x24000900
 8006d84:	24000060 	.word	0x24000060

08006d88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	60fb      	str	r3, [r7, #12]
}
 8006daa:	bf00      	nop
 8006dac:	e7fe      	b.n	8006dac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dae:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <vTaskPlaceOnEventList+0x44>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3318      	adds	r3, #24
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fe fe61 	bl	8005a7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	6838      	ldr	r0, [r7, #0]
 8006dc0:	f000 fa80 	bl	80072c4 <prvAddCurrentTaskToDelayedList>
}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	24000900 	.word	0x24000900

08006dd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	617b      	str	r3, [r7, #20]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006df8:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <vTaskPlaceOnEventListRestricted+0x54>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3318      	adds	r3, #24
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7fe fe18 	bl	8005a36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	68b8      	ldr	r0, [r7, #8]
 8006e16:	f000 fa55 	bl	80072c4 <prvAddCurrentTaskToDelayedList>
	}
 8006e1a:	bf00      	nop
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	24000900 	.word	0x24000900

08006e28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	60fb      	str	r3, [r7, #12]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	3318      	adds	r3, #24
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe fe49 	bl	8005af0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e5e:	4b1e      	ldr	r3, [pc, #120]	; (8006ed8 <xTaskRemoveFromEventList+0xb0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d11d      	bne.n	8006ea2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe fe40 	bl	8005af0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e74:	4b19      	ldr	r3, [pc, #100]	; (8006edc <xTaskRemoveFromEventList+0xb4>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d903      	bls.n	8006e84 <xTaskRemoveFromEventList+0x5c>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	4a16      	ldr	r2, [pc, #88]	; (8006edc <xTaskRemoveFromEventList+0xb4>)
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4a13      	ldr	r2, [pc, #76]	; (8006ee0 <xTaskRemoveFromEventList+0xb8>)
 8006e92:	441a      	add	r2, r3
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	f7fe fdcb 	bl	8005a36 <vListInsertEnd>
 8006ea0:	e005      	b.n	8006eae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3318      	adds	r3, #24
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	480e      	ldr	r0, [pc, #56]	; (8006ee4 <xTaskRemoveFromEventList+0xbc>)
 8006eaa:	f7fe fdc4 	bl	8005a36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <xTaskRemoveFromEventList+0xc0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d905      	bls.n	8006ec8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <xTaskRemoveFromEventList+0xc4>)
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e001      	b.n	8006ecc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ecc:	697b      	ldr	r3, [r7, #20]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	24000dfc 	.word	0x24000dfc
 8006edc:	24000ddc 	.word	0x24000ddc
 8006ee0:	24000904 	.word	0x24000904
 8006ee4:	24000d94 	.word	0x24000d94
 8006ee8:	24000900 	.word	0x24000900
 8006eec:	24000de8 	.word	0x24000de8

08006ef0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <vTaskInternalSetTimeOutState+0x24>)
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <vTaskInternalSetTimeOutState+0x28>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	605a      	str	r2, [r3, #4]
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	24000dec 	.word	0x24000dec
 8006f18:	24000dd8 	.word	0x24000dd8

08006f1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	613b      	str	r3, [r7, #16]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	60fb      	str	r3, [r7, #12]
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f5e:	f000 fe81 	bl	8007c64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f62:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <xTaskCheckForTimeOut+0xbc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f7a:	d102      	bne.n	8006f82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61fb      	str	r3, [r7, #28]
 8006f80:	e023      	b.n	8006fca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <xTaskCheckForTimeOut+0xc0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d007      	beq.n	8006f9e <xTaskCheckForTimeOut+0x82>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d302      	bcc.n	8006f9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	e015      	b.n	8006fca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d20b      	bcs.n	8006fc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff ff9b 	bl	8006ef0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61fb      	str	r3, [r7, #28]
 8006fbe:	e004      	b.n	8006fca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fca:	f000 fe7b 	bl	8007cc4 <vPortExitCritical>

	return xReturn;
 8006fce:	69fb      	ldr	r3, [r7, #28]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	24000dd8 	.word	0x24000dd8
 8006fdc:	24000dec 	.word	0x24000dec

08006fe0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fe4:	4b03      	ldr	r3, [pc, #12]	; (8006ff4 <vTaskMissedYield+0x14>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
}
 8006fea:	bf00      	nop
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	24000de8 	.word	0x24000de8

08006ff8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007000:	f000 f852 	bl	80070a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007004:	4b06      	ldr	r3, [pc, #24]	; (8007020 <prvIdleTask+0x28>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d9f9      	bls.n	8007000 <prvIdleTask+0x8>
			{
				taskYIELD();
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <prvIdleTask+0x2c>)
 800700e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800701c:	e7f0      	b.n	8007000 <prvIdleTask+0x8>
 800701e:	bf00      	nop
 8007020:	24000904 	.word	0x24000904
 8007024:	e000ed04 	.word	0xe000ed04

08007028 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800702e:	2300      	movs	r3, #0
 8007030:	607b      	str	r3, [r7, #4]
 8007032:	e00c      	b.n	800704e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4a12      	ldr	r2, [pc, #72]	; (8007088 <prvInitialiseTaskLists+0x60>)
 8007040:	4413      	add	r3, r2
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fcca 	bl	80059dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3301      	adds	r3, #1
 800704c:	607b      	str	r3, [r7, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b37      	cmp	r3, #55	; 0x37
 8007052:	d9ef      	bls.n	8007034 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007054:	480d      	ldr	r0, [pc, #52]	; (800708c <prvInitialiseTaskLists+0x64>)
 8007056:	f7fe fcc1 	bl	80059dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800705a:	480d      	ldr	r0, [pc, #52]	; (8007090 <prvInitialiseTaskLists+0x68>)
 800705c:	f7fe fcbe 	bl	80059dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007060:	480c      	ldr	r0, [pc, #48]	; (8007094 <prvInitialiseTaskLists+0x6c>)
 8007062:	f7fe fcbb 	bl	80059dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007066:	480c      	ldr	r0, [pc, #48]	; (8007098 <prvInitialiseTaskLists+0x70>)
 8007068:	f7fe fcb8 	bl	80059dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800706c:	480b      	ldr	r0, [pc, #44]	; (800709c <prvInitialiseTaskLists+0x74>)
 800706e:	f7fe fcb5 	bl	80059dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007072:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <prvInitialiseTaskLists+0x78>)
 8007074:	4a05      	ldr	r2, [pc, #20]	; (800708c <prvInitialiseTaskLists+0x64>)
 8007076:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <prvInitialiseTaskLists+0x7c>)
 800707a:	4a05      	ldr	r2, [pc, #20]	; (8007090 <prvInitialiseTaskLists+0x68>)
 800707c:	601a      	str	r2, [r3, #0]
}
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	24000904 	.word	0x24000904
 800708c:	24000d64 	.word	0x24000d64
 8007090:	24000d78 	.word	0x24000d78
 8007094:	24000d94 	.word	0x24000d94
 8007098:	24000da8 	.word	0x24000da8
 800709c:	24000dc0 	.word	0x24000dc0
 80070a0:	24000d8c 	.word	0x24000d8c
 80070a4:	24000d90 	.word	0x24000d90

080070a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070ae:	e019      	b.n	80070e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070b0:	f000 fdd8 	bl	8007c64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b4:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <prvCheckTasksWaitingTermination+0x50>)
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3304      	adds	r3, #4
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe fd15 	bl	8005af0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070c6:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <prvCheckTasksWaitingTermination+0x54>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	4a0b      	ldr	r2, [pc, #44]	; (80070fc <prvCheckTasksWaitingTermination+0x54>)
 80070ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070d0:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <prvCheckTasksWaitingTermination+0x58>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	4a0a      	ldr	r2, [pc, #40]	; (8007100 <prvCheckTasksWaitingTermination+0x58>)
 80070d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070da:	f000 fdf3 	bl	8007cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f810 	bl	8007104 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <prvCheckTasksWaitingTermination+0x58>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e1      	bne.n	80070b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	24000da8 	.word	0x24000da8
 80070fc:	24000dd4 	.word	0x24000dd4
 8007100:	24000dbc 	.word	0x24000dbc

08007104 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3354      	adds	r3, #84	; 0x54
 8007110:	4618      	mov	r0, r3
 8007112:	f001 f8bb 	bl	800828c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800711c:	2b00      	cmp	r3, #0
 800711e:	d108      	bne.n	8007132 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	4618      	mov	r0, r3
 8007126:	f000 ff8b 	bl	8008040 <vPortFree>
				vPortFree( pxTCB );
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 ff88 	bl	8008040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007130:	e018      	b.n	8007164 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007138:	2b01      	cmp	r3, #1
 800713a:	d103      	bne.n	8007144 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 ff7f 	bl	8008040 <vPortFree>
	}
 8007142:	e00f      	b.n	8007164 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800714a:	2b02      	cmp	r3, #2
 800714c:	d00a      	beq.n	8007164 <prvDeleteTCB+0x60>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	60fb      	str	r3, [r7, #12]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <prvDeleteTCB+0x5e>
	}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007172:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <prvResetNextTaskUnblockTime+0x38>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <prvResetNextTaskUnblockTime+0x3c>)
 800717e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007182:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007184:	e008      	b.n	8007198 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007186:	4b07      	ldr	r3, [pc, #28]	; (80071a4 <prvResetNextTaskUnblockTime+0x38>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	4a04      	ldr	r2, [pc, #16]	; (80071a8 <prvResetNextTaskUnblockTime+0x3c>)
 8007196:	6013      	str	r3, [r2, #0]
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	24000d8c 	.word	0x24000d8c
 80071a8:	24000df4 	.word	0x24000df4

080071ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071b2:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <xTaskGetSchedulerState+0x34>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d102      	bne.n	80071c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071ba:	2301      	movs	r3, #1
 80071bc:	607b      	str	r3, [r7, #4]
 80071be:	e008      	b.n	80071d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071c0:	4b08      	ldr	r3, [pc, #32]	; (80071e4 <xTaskGetSchedulerState+0x38>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071c8:	2302      	movs	r3, #2
 80071ca:	607b      	str	r3, [r7, #4]
 80071cc:	e001      	b.n	80071d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071ce:	2300      	movs	r3, #0
 80071d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071d2:	687b      	ldr	r3, [r7, #4]
	}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	24000de0 	.word	0x24000de0
 80071e4:	24000dfc 	.word	0x24000dfc

080071e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071f4:	2300      	movs	r3, #0
 80071f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d056      	beq.n	80072ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071fe:	4b2e      	ldr	r3, [pc, #184]	; (80072b8 <xTaskPriorityDisinherit+0xd0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	429a      	cmp	r2, r3
 8007206:	d00a      	beq.n	800721e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	60fb      	str	r3, [r7, #12]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60bb      	str	r3, [r7, #8]
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007240:	1e5a      	subs	r2, r3, #1
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724e:	429a      	cmp	r2, r3
 8007250:	d02c      	beq.n	80072ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007256:	2b00      	cmp	r3, #0
 8007258:	d128      	bne.n	80072ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	3304      	adds	r3, #4
 800725e:	4618      	mov	r0, r3
 8007260:	f7fe fc46 	bl	8005af0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727c:	4b0f      	ldr	r3, [pc, #60]	; (80072bc <xTaskPriorityDisinherit+0xd4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d903      	bls.n	800728c <xTaskPriorityDisinherit+0xa4>
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	4a0c      	ldr	r2, [pc, #48]	; (80072bc <xTaskPriorityDisinherit+0xd4>)
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4a09      	ldr	r2, [pc, #36]	; (80072c0 <xTaskPriorityDisinherit+0xd8>)
 800729a:	441a      	add	r2, r3
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	3304      	adds	r3, #4
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f7fe fbc7 	bl	8005a36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072a8:	2301      	movs	r3, #1
 80072aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072ac:	697b      	ldr	r3, [r7, #20]
	}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	24000900 	.word	0x24000900
 80072bc:	24000ddc 	.word	0x24000ddc
 80072c0:	24000904 	.word	0x24000904

080072c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072ce:	4b21      	ldr	r3, [pc, #132]	; (8007354 <prvAddCurrentTaskToDelayedList+0x90>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072d4:	4b20      	ldr	r3, [pc, #128]	; (8007358 <prvAddCurrentTaskToDelayedList+0x94>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3304      	adds	r3, #4
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fc08 	bl	8005af0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072e6:	d10a      	bne.n	80072fe <prvAddCurrentTaskToDelayedList+0x3a>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d007      	beq.n	80072fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ee:	4b1a      	ldr	r3, [pc, #104]	; (8007358 <prvAddCurrentTaskToDelayedList+0x94>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4619      	mov	r1, r3
 80072f6:	4819      	ldr	r0, [pc, #100]	; (800735c <prvAddCurrentTaskToDelayedList+0x98>)
 80072f8:	f7fe fb9d 	bl	8005a36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072fc:	e026      	b.n	800734c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4413      	add	r3, r2
 8007304:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <prvAddCurrentTaskToDelayedList+0x94>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	429a      	cmp	r2, r3
 8007314:	d209      	bcs.n	800732a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007316:	4b12      	ldr	r3, [pc, #72]	; (8007360 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <prvAddCurrentTaskToDelayedList+0x94>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3304      	adds	r3, #4
 8007320:	4619      	mov	r1, r3
 8007322:	4610      	mov	r0, r2
 8007324:	f7fe fbab 	bl	8005a7e <vListInsert>
}
 8007328:	e010      	b.n	800734c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800732a:	4b0e      	ldr	r3, [pc, #56]	; (8007364 <prvAddCurrentTaskToDelayedList+0xa0>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <prvAddCurrentTaskToDelayedList+0x94>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3304      	adds	r3, #4
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f7fe fba1 	bl	8005a7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800733c:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <prvAddCurrentTaskToDelayedList+0xa4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	d202      	bcs.n	800734c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007346:	4a08      	ldr	r2, [pc, #32]	; (8007368 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	6013      	str	r3, [r2, #0]
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	24000dd8 	.word	0x24000dd8
 8007358:	24000900 	.word	0x24000900
 800735c:	24000dc0 	.word	0x24000dc0
 8007360:	24000d90 	.word	0x24000d90
 8007364:	24000d8c 	.word	0x24000d8c
 8007368:	24000df4 	.word	0x24000df4

0800736c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	; 0x28
 8007370:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007376:	f000 fb07 	bl	8007988 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800737a:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <xTimerCreateTimerTask+0x80>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d021      	beq.n	80073c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800738a:	1d3a      	adds	r2, r7, #4
 800738c:	f107 0108 	add.w	r1, r7, #8
 8007390:	f107 030c 	add.w	r3, r7, #12
 8007394:	4618      	mov	r0, r3
 8007396:	f7fe fb07 	bl	80059a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	9202      	str	r2, [sp, #8]
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	2302      	movs	r3, #2
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	2300      	movs	r3, #0
 80073aa:	460a      	mov	r2, r1
 80073ac:	4910      	ldr	r1, [pc, #64]	; (80073f0 <xTimerCreateTimerTask+0x84>)
 80073ae:	4811      	ldr	r0, [pc, #68]	; (80073f4 <xTimerCreateTimerTask+0x88>)
 80073b0:	f7ff f8b4 	bl	800651c <xTaskCreateStatic>
 80073b4:	4603      	mov	r3, r0
 80073b6:	4a10      	ldr	r2, [pc, #64]	; (80073f8 <xTimerCreateTimerTask+0x8c>)
 80073b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073ba:	4b0f      	ldr	r3, [pc, #60]	; (80073f8 <xTimerCreateTimerTask+0x8c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073c2:	2301      	movs	r3, #1
 80073c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10a      	bne.n	80073e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	613b      	str	r3, [r7, #16]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80073e2:	697b      	ldr	r3, [r7, #20]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	24000e30 	.word	0x24000e30
 80073f0:	08008488 	.word	0x08008488
 80073f4:	08007531 	.word	0x08007531
 80073f8:	24000e34 	.word	0x24000e34

080073fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	; 0x28
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800740a:	2300      	movs	r3, #0
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	623b      	str	r3, [r7, #32]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800742a:	4b1a      	ldr	r3, [pc, #104]	; (8007494 <xTimerGenericCommand+0x98>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d02a      	beq.n	8007488 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b05      	cmp	r3, #5
 8007442:	dc18      	bgt.n	8007476 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007444:	f7ff feb2 	bl	80071ac <xTaskGetSchedulerState>
 8007448:	4603      	mov	r3, r0
 800744a:	2b02      	cmp	r3, #2
 800744c:	d109      	bne.n	8007462 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800744e:	4b11      	ldr	r3, [pc, #68]	; (8007494 <xTimerGenericCommand+0x98>)
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	f107 0110 	add.w	r1, r7, #16
 8007456:	2300      	movs	r3, #0
 8007458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800745a:	f7fe fc77 	bl	8005d4c <xQueueGenericSend>
 800745e:	6278      	str	r0, [r7, #36]	; 0x24
 8007460:	e012      	b.n	8007488 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007462:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <xTimerGenericCommand+0x98>)
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	f107 0110 	add.w	r1, r7, #16
 800746a:	2300      	movs	r3, #0
 800746c:	2200      	movs	r2, #0
 800746e:	f7fe fc6d 	bl	8005d4c <xQueueGenericSend>
 8007472:	6278      	str	r0, [r7, #36]	; 0x24
 8007474:	e008      	b.n	8007488 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <xTimerGenericCommand+0x98>)
 8007478:	6818      	ldr	r0, [r3, #0]
 800747a:	f107 0110 	add.w	r1, r7, #16
 800747e:	2300      	movs	r3, #0
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	f7fe fd61 	bl	8005f48 <xQueueGenericSendFromISR>
 8007486:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800748a:	4618      	mov	r0, r3
 800748c:	3728      	adds	r7, #40	; 0x28
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	24000e30 	.word	0x24000e30

08007498 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af02      	add	r7, sp, #8
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a2:	4b22      	ldr	r3, [pc, #136]	; (800752c <prvProcessExpiredTimer+0x94>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe fb1d 	bl	8005af0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d022      	beq.n	800750a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	699a      	ldr	r2, [r3, #24]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	18d1      	adds	r1, r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	6978      	ldr	r0, [r7, #20]
 80074d2:	f000 f8d1 	bl	8007678 <prvInsertTimerInActiveList>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01f      	beq.n	800751c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074dc:	2300      	movs	r3, #0
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2300      	movs	r3, #0
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	2100      	movs	r1, #0
 80074e6:	6978      	ldr	r0, [r7, #20]
 80074e8:	f7ff ff88 	bl	80073fc <xTimerGenericCommand>
 80074ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d113      	bne.n	800751c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	60fb      	str	r3, [r7, #12]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007510:	f023 0301 	bic.w	r3, r3, #1
 8007514:	b2da      	uxtb	r2, r3
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	6978      	ldr	r0, [r7, #20]
 8007522:	4798      	blx	r3
}
 8007524:	bf00      	nop
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	24000e28 	.word	0x24000e28

08007530 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007538:	f107 0308 	add.w	r3, r7, #8
 800753c:	4618      	mov	r0, r3
 800753e:	f000 f857 	bl	80075f0 <prvGetNextExpireTime>
 8007542:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4619      	mov	r1, r3
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f803 	bl	8007554 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800754e:	f000 f8d5 	bl	80076fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007552:	e7f1      	b.n	8007538 <prvTimerTask+0x8>

08007554 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800755e:	f7ff fa39 	bl	80069d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007562:	f107 0308 	add.w	r3, r7, #8
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f866 	bl	8007638 <prvSampleTimeNow>
 800756c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d130      	bne.n	80075d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10a      	bne.n	8007590 <prvProcessTimerOrBlockTask+0x3c>
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	429a      	cmp	r2, r3
 8007580:	d806      	bhi.n	8007590 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007582:	f7ff fa35 	bl	80069f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff ff85 	bl	8007498 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800758e:	e024      	b.n	80075da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d008      	beq.n	80075a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007596:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <prvProcessTimerOrBlockTask+0x90>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <prvProcessTimerOrBlockTask+0x50>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e000      	b.n	80075a6 <prvProcessTimerOrBlockTask+0x52>
 80075a4:	2300      	movs	r3, #0
 80075a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075a8:	4b0f      	ldr	r3, [pc, #60]	; (80075e8 <prvProcessTimerOrBlockTask+0x94>)
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	4619      	mov	r1, r3
 80075b6:	f7fe ff7d 	bl	80064b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80075ba:	f7ff fa19 	bl	80069f0 <xTaskResumeAll>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80075c4:	4b09      	ldr	r3, [pc, #36]	; (80075ec <prvProcessTimerOrBlockTask+0x98>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
}
 80075d4:	e001      	b.n	80075da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80075d6:	f7ff fa0b 	bl	80069f0 <xTaskResumeAll>
}
 80075da:	bf00      	nop
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	24000e2c 	.word	0x24000e2c
 80075e8:	24000e30 	.word	0x24000e30
 80075ec:	e000ed04 	.word	0xe000ed04

080075f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075f8:	4b0e      	ldr	r3, [pc, #56]	; (8007634 <prvGetNextExpireTime+0x44>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <prvGetNextExpireTime+0x16>
 8007602:	2201      	movs	r2, #1
 8007604:	e000      	b.n	8007608 <prvGetNextExpireTime+0x18>
 8007606:	2200      	movs	r2, #0
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d105      	bne.n	8007620 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007614:	4b07      	ldr	r3, [pc, #28]	; (8007634 <prvGetNextExpireTime+0x44>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	e001      	b.n	8007624 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007624:	68fb      	ldr	r3, [r7, #12]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	24000e28 	.word	0x24000e28

08007638 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007640:	f7ff fa74 	bl	8006b2c <xTaskGetTickCount>
 8007644:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007646:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <prvSampleTimeNow+0x3c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	429a      	cmp	r2, r3
 800764e:	d205      	bcs.n	800765c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007650:	f000 f936 	bl	80078c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	e002      	b.n	8007662 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007662:	4a04      	ldr	r2, [pc, #16]	; (8007674 <prvSampleTimeNow+0x3c>)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007668:	68fb      	ldr	r3, [r7, #12]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	24000e38 	.word	0x24000e38

08007678 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	429a      	cmp	r2, r3
 800769c:	d812      	bhi.n	80076c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	1ad2      	subs	r2, r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d302      	bcc.n	80076b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80076ac:	2301      	movs	r3, #1
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	e01b      	b.n	80076ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80076b2:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <prvInsertTimerInActiveList+0x7c>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3304      	adds	r3, #4
 80076ba:	4619      	mov	r1, r3
 80076bc:	4610      	mov	r0, r2
 80076be:	f7fe f9de 	bl	8005a7e <vListInsert>
 80076c2:	e012      	b.n	80076ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d206      	bcs.n	80076da <prvInsertTimerInActiveList+0x62>
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d302      	bcc.n	80076da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
 80076d8:	e007      	b.n	80076ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076da:	4b07      	ldr	r3, [pc, #28]	; (80076f8 <prvInsertTimerInActiveList+0x80>)
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3304      	adds	r3, #4
 80076e2:	4619      	mov	r1, r3
 80076e4:	4610      	mov	r0, r2
 80076e6:	f7fe f9ca 	bl	8005a7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80076ea:	697b      	ldr	r3, [r7, #20]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	24000e2c 	.word	0x24000e2c
 80076f8:	24000e28 	.word	0x24000e28

080076fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08e      	sub	sp, #56	; 0x38
 8007700:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007702:	e0ca      	b.n	800789a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	da18      	bge.n	800773c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800770a:	1d3b      	adds	r3, r7, #4
 800770c:	3304      	adds	r3, #4
 800770e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10a      	bne.n	800772c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	61fb      	str	r3, [r7, #28]
}
 8007728:	bf00      	nop
 800772a:	e7fe      	b.n	800772a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007732:	6850      	ldr	r0, [r2, #4]
 8007734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007736:	6892      	ldr	r2, [r2, #8]
 8007738:	4611      	mov	r1, r2
 800773a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	f2c0 80ab 	blt.w	800789a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d004      	beq.n	800775a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	3304      	adds	r3, #4
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe f9cb 	bl	8005af0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800775a:	463b      	mov	r3, r7
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff ff6b 	bl	8007638 <prvSampleTimeNow>
 8007762:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b09      	cmp	r3, #9
 8007768:	f200 8096 	bhi.w	8007898 <prvProcessReceivedCommands+0x19c>
 800776c:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <prvProcessReceivedCommands+0x78>)
 800776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007772:	bf00      	nop
 8007774:	0800779d 	.word	0x0800779d
 8007778:	0800779d 	.word	0x0800779d
 800777c:	0800779d 	.word	0x0800779d
 8007780:	08007811 	.word	0x08007811
 8007784:	08007825 	.word	0x08007825
 8007788:	0800786f 	.word	0x0800786f
 800778c:	0800779d 	.word	0x0800779d
 8007790:	0800779d 	.word	0x0800779d
 8007794:	08007811 	.word	0x08007811
 8007798:	08007825 	.word	0x08007825
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077a2:	f043 0301 	orr.w	r3, r3, #1
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	18d1      	adds	r1, r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077bc:	f7ff ff5c 	bl	8007678 <prvInsertTimerInActiveList>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d069      	beq.n	800789a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d05e      	beq.n	800789a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	441a      	add	r2, r3
 80077e4:	2300      	movs	r3, #0
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	2300      	movs	r3, #0
 80077ea:	2100      	movs	r1, #0
 80077ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ee:	f7ff fe05 	bl	80073fc <xTimerGenericCommand>
 80077f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d14f      	bne.n	800789a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	61bb      	str	r3, [r7, #24]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	b2da      	uxtb	r2, r3
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007822:	e03a      	b.n	800789a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800782a:	f043 0301 	orr.w	r3, r3, #1
 800782e:	b2da      	uxtb	r2, r3
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10a      	bne.n	800785a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	617b      	str	r3, [r7, #20]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	18d1      	adds	r1, r2, r3
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007868:	f7ff ff06 	bl	8007678 <prvInsertTimerInActiveList>
					break;
 800786c:	e015      	b.n	800789a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d103      	bne.n	8007884 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800787c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800787e:	f000 fbdf 	bl	8008040 <vPortFree>
 8007882:	e00a      	b.n	800789a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800788a:	f023 0301 	bic.w	r3, r3, #1
 800788e:	b2da      	uxtb	r2, r3
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007896:	e000      	b.n	800789a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007898:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800789a:	4b08      	ldr	r3, [pc, #32]	; (80078bc <prvProcessReceivedCommands+0x1c0>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	1d39      	adds	r1, r7, #4
 80078a0:	2200      	movs	r2, #0
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe fbec 	bl	8006080 <xQueueReceive>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f47f af2a 	bne.w	8007704 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80078b0:	bf00      	nop
 80078b2:	bf00      	nop
 80078b4:	3730      	adds	r7, #48	; 0x30
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	24000e30 	.word	0x24000e30

080078c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078c6:	e048      	b.n	800795a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078c8:	4b2d      	ldr	r3, [pc, #180]	; (8007980 <prvSwitchTimerLists+0xc0>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d2:	4b2b      	ldr	r3, [pc, #172]	; (8007980 <prvSwitchTimerLists+0xc0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3304      	adds	r3, #4
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fe f905 	bl	8005af0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d02e      	beq.n	800795a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4413      	add	r3, r2
 8007904:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	429a      	cmp	r2, r3
 800790c:	d90e      	bls.n	800792c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800791a:	4b19      	ldr	r3, [pc, #100]	; (8007980 <prvSwitchTimerLists+0xc0>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3304      	adds	r3, #4
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f7fe f8aa 	bl	8005a7e <vListInsert>
 800792a:	e016      	b.n	800795a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800792c:	2300      	movs	r3, #0
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	2300      	movs	r3, #0
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	2100      	movs	r1, #0
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f7ff fd60 	bl	80073fc <xTimerGenericCommand>
 800793c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	603b      	str	r3, [r7, #0]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800795a:	4b09      	ldr	r3, [pc, #36]	; (8007980 <prvSwitchTimerLists+0xc0>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1b1      	bne.n	80078c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007964:	4b06      	ldr	r3, [pc, #24]	; (8007980 <prvSwitchTimerLists+0xc0>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <prvSwitchTimerLists+0xc4>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a04      	ldr	r2, [pc, #16]	; (8007980 <prvSwitchTimerLists+0xc0>)
 8007970:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007972:	4a04      	ldr	r2, [pc, #16]	; (8007984 <prvSwitchTimerLists+0xc4>)
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	6013      	str	r3, [r2, #0]
}
 8007978:	bf00      	nop
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	24000e28 	.word	0x24000e28
 8007984:	24000e2c 	.word	0x24000e2c

08007988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800798e:	f000 f969 	bl	8007c64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007992:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d120      	bne.n	80079dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800799a:	4814      	ldr	r0, [pc, #80]	; (80079ec <prvCheckForValidListAndQueue+0x64>)
 800799c:	f7fe f81e 	bl	80059dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079a0:	4813      	ldr	r0, [pc, #76]	; (80079f0 <prvCheckForValidListAndQueue+0x68>)
 80079a2:	f7fe f81b 	bl	80059dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079a6:	4b13      	ldr	r3, [pc, #76]	; (80079f4 <prvCheckForValidListAndQueue+0x6c>)
 80079a8:	4a10      	ldr	r2, [pc, #64]	; (80079ec <prvCheckForValidListAndQueue+0x64>)
 80079aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079ac:	4b12      	ldr	r3, [pc, #72]	; (80079f8 <prvCheckForValidListAndQueue+0x70>)
 80079ae:	4a10      	ldr	r2, [pc, #64]	; (80079f0 <prvCheckForValidListAndQueue+0x68>)
 80079b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80079b2:	2300      	movs	r3, #0
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	4b11      	ldr	r3, [pc, #68]	; (80079fc <prvCheckForValidListAndQueue+0x74>)
 80079b8:	4a11      	ldr	r2, [pc, #68]	; (8007a00 <prvCheckForValidListAndQueue+0x78>)
 80079ba:	2110      	movs	r1, #16
 80079bc:	200a      	movs	r0, #10
 80079be:	f7fe f929 	bl	8005c14 <xQueueGenericCreateStatic>
 80079c2:	4603      	mov	r3, r0
 80079c4:	4a08      	ldr	r2, [pc, #32]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d005      	beq.n	80079dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	490b      	ldr	r1, [pc, #44]	; (8007a04 <prvCheckForValidListAndQueue+0x7c>)
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fd42 	bl	8006460 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079dc:	f000 f972 	bl	8007cc4 <vPortExitCritical>
}
 80079e0:	bf00      	nop
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	24000e30 	.word	0x24000e30
 80079ec:	24000e00 	.word	0x24000e00
 80079f0:	24000e14 	.word	0x24000e14
 80079f4:	24000e28 	.word	0x24000e28
 80079f8:	24000e2c 	.word	0x24000e2c
 80079fc:	24000edc 	.word	0x24000edc
 8007a00:	24000e3c 	.word	0x24000e3c
 8007a04:	08008490 	.word	0x08008490

08007a08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3b04      	subs	r3, #4
 8007a18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3b04      	subs	r3, #4
 8007a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f023 0201 	bic.w	r2, r3, #1
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3b04      	subs	r3, #4
 8007a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a38:	4a0c      	ldr	r2, [pc, #48]	; (8007a6c <pxPortInitialiseStack+0x64>)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3b14      	subs	r3, #20
 8007a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f06f 0202 	mvn.w	r2, #2
 8007a56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3b20      	subs	r3, #32
 8007a5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	08007a71 	.word	0x08007a71

08007a70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a7a:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <prvTaskExitError+0x54>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a82:	d00a      	beq.n	8007a9a <prvTaskExitError+0x2a>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	60fb      	str	r3, [r7, #12]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <prvTaskExitError+0x28>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	60bb      	str	r3, [r7, #8]
}
 8007aac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007aae:	bf00      	nop
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0fc      	beq.n	8007ab0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ab6:	bf00      	nop
 8007ab8:	bf00      	nop
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	24000010 	.word	0x24000010
	...

08007ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ad0:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <pxCurrentTCBConst2>)
 8007ad2:	6819      	ldr	r1, [r3, #0]
 8007ad4:	6808      	ldr	r0, [r1, #0]
 8007ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ada:	f380 8809 	msr	PSP, r0
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f380 8811 	msr	BASEPRI, r0
 8007aea:	4770      	bx	lr
 8007aec:	f3af 8000 	nop.w

08007af0 <pxCurrentTCBConst2>:
 8007af0:	24000900 	.word	0x24000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop

08007af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007af8:	4808      	ldr	r0, [pc, #32]	; (8007b1c <prvPortStartFirstTask+0x24>)
 8007afa:	6800      	ldr	r0, [r0, #0]
 8007afc:	6800      	ldr	r0, [r0, #0]
 8007afe:	f380 8808 	msr	MSP, r0
 8007b02:	f04f 0000 	mov.w	r0, #0
 8007b06:	f380 8814 	msr	CONTROL, r0
 8007b0a:	b662      	cpsie	i
 8007b0c:	b661      	cpsie	f
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	df00      	svc	0
 8007b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b1a:	bf00      	nop
 8007b1c:	e000ed08 	.word	0xe000ed08

08007b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b26:	4b46      	ldr	r3, [pc, #280]	; (8007c40 <xPortStartScheduler+0x120>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a46      	ldr	r2, [pc, #280]	; (8007c44 <xPortStartScheduler+0x124>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d10a      	bne.n	8007b46 <xPortStartScheduler+0x26>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	613b      	str	r3, [r7, #16]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b46:	4b3e      	ldr	r3, [pc, #248]	; (8007c40 <xPortStartScheduler+0x120>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a3f      	ldr	r2, [pc, #252]	; (8007c48 <xPortStartScheduler+0x128>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d10a      	bne.n	8007b66 <xPortStartScheduler+0x46>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	60fb      	str	r3, [r7, #12]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b66:	4b39      	ldr	r3, [pc, #228]	; (8007c4c <xPortStartScheduler+0x12c>)
 8007b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	22ff      	movs	r2, #255	; 0xff
 8007b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	4b31      	ldr	r3, [pc, #196]	; (8007c50 <xPortStartScheduler+0x130>)
 8007b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b8e:	4b31      	ldr	r3, [pc, #196]	; (8007c54 <xPortStartScheduler+0x134>)
 8007b90:	2207      	movs	r2, #7
 8007b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b94:	e009      	b.n	8007baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b96:	4b2f      	ldr	r3, [pc, #188]	; (8007c54 <xPortStartScheduler+0x134>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	4a2d      	ldr	r2, [pc, #180]	; (8007c54 <xPortStartScheduler+0x134>)
 8007b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb2:	2b80      	cmp	r3, #128	; 0x80
 8007bb4:	d0ef      	beq.n	8007b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bb6:	4b27      	ldr	r3, [pc, #156]	; (8007c54 <xPortStartScheduler+0x134>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1c3 0307 	rsb	r3, r3, #7
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d00a      	beq.n	8007bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	60bb      	str	r3, [r7, #8]
}
 8007bd4:	bf00      	nop
 8007bd6:	e7fe      	b.n	8007bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bd8:	4b1e      	ldr	r3, [pc, #120]	; (8007c54 <xPortStartScheduler+0x134>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	4a1d      	ldr	r2, [pc, #116]	; (8007c54 <xPortStartScheduler+0x134>)
 8007be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007be2:	4b1c      	ldr	r3, [pc, #112]	; (8007c54 <xPortStartScheduler+0x134>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bea:	4a1a      	ldr	r2, [pc, #104]	; (8007c54 <xPortStartScheduler+0x134>)
 8007bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bf6:	4b18      	ldr	r3, [pc, #96]	; (8007c58 <xPortStartScheduler+0x138>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a17      	ldr	r2, [pc, #92]	; (8007c58 <xPortStartScheduler+0x138>)
 8007bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c02:	4b15      	ldr	r3, [pc, #84]	; (8007c58 <xPortStartScheduler+0x138>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a14      	ldr	r2, [pc, #80]	; (8007c58 <xPortStartScheduler+0x138>)
 8007c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c0e:	f000 f8dd 	bl	8007dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c12:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <xPortStartScheduler+0x13c>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c18:	f000 f8fc 	bl	8007e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c1c:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <xPortStartScheduler+0x140>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a0f      	ldr	r2, [pc, #60]	; (8007c60 <xPortStartScheduler+0x140>)
 8007c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c28:	f7ff ff66 	bl	8007af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c2c:	f7ff f848 	bl	8006cc0 <vTaskSwitchContext>
	prvTaskExitError();
 8007c30:	f7ff ff1e 	bl	8007a70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	e000ed00 	.word	0xe000ed00
 8007c44:	410fc271 	.word	0x410fc271
 8007c48:	410fc270 	.word	0x410fc270
 8007c4c:	e000e400 	.word	0xe000e400
 8007c50:	24000f2c 	.word	0x24000f2c
 8007c54:	24000f30 	.word	0x24000f30
 8007c58:	e000ed20 	.word	0xe000ed20
 8007c5c:	24000010 	.word	0x24000010
 8007c60:	e000ef34 	.word	0xe000ef34

08007c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	607b      	str	r3, [r7, #4]
}
 8007c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c7e:	4b0f      	ldr	r3, [pc, #60]	; (8007cbc <vPortEnterCritical+0x58>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3301      	adds	r3, #1
 8007c84:	4a0d      	ldr	r2, [pc, #52]	; (8007cbc <vPortEnterCritical+0x58>)
 8007c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c88:	4b0c      	ldr	r3, [pc, #48]	; (8007cbc <vPortEnterCritical+0x58>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d10f      	bne.n	8007cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <vPortEnterCritical+0x5c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	603b      	str	r3, [r7, #0]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <vPortEnterCritical+0x4a>
	}
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	24000010 	.word	0x24000010
 8007cc0:	e000ed04 	.word	0xe000ed04

08007cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cca:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <vPortExitCritical+0x50>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <vPortExitCritical+0x24>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	607b      	str	r3, [r7, #4]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ce8:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <vPortExitCritical+0x50>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3b01      	subs	r3, #1
 8007cee:	4a09      	ldr	r2, [pc, #36]	; (8007d14 <vPortExitCritical+0x50>)
 8007cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cf2:	4b08      	ldr	r3, [pc, #32]	; (8007d14 <vPortExitCritical+0x50>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d105      	bne.n	8007d06 <vPortExitCritical+0x42>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	f383 8811 	msr	BASEPRI, r3
}
 8007d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	24000010 	.word	0x24000010
	...

08007d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d20:	f3ef 8009 	mrs	r0, PSP
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	4b15      	ldr	r3, [pc, #84]	; (8007d80 <pxCurrentTCBConst>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	f01e 0f10 	tst.w	lr, #16
 8007d30:	bf08      	it	eq
 8007d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3a:	6010      	str	r0, [r2, #0]
 8007d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d44:	f380 8811 	msr	BASEPRI, r0
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f7fe ffb6 	bl	8006cc0 <vTaskSwitchContext>
 8007d54:	f04f 0000 	mov.w	r0, #0
 8007d58:	f380 8811 	msr	BASEPRI, r0
 8007d5c:	bc09      	pop	{r0, r3}
 8007d5e:	6819      	ldr	r1, [r3, #0]
 8007d60:	6808      	ldr	r0, [r1, #0]
 8007d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d66:	f01e 0f10 	tst.w	lr, #16
 8007d6a:	bf08      	it	eq
 8007d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d70:	f380 8809 	msr	PSP, r0
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	f3af 8000 	nop.w

08007d80 <pxCurrentTCBConst>:
 8007d80:	24000900 	.word	0x24000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop

08007d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	607b      	str	r3, [r7, #4]
}
 8007da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007da2:	f7fe fed3 	bl	8006b4c <xTaskIncrementTick>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <xPortSysTickHandler+0x40>)
 8007dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	2300      	movs	r3, #0
 8007db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	f383 8811 	msr	BASEPRI, r3
}
 8007dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <vPortSetupTimerInterrupt+0x34>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007dd6:	4b0b      	ldr	r3, [pc, #44]	; (8007e04 <vPortSetupTimerInterrupt+0x38>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ddc:	4b0a      	ldr	r3, [pc, #40]	; (8007e08 <vPortSetupTimerInterrupt+0x3c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a0a      	ldr	r2, [pc, #40]	; (8007e0c <vPortSetupTimerInterrupt+0x40>)
 8007de2:	fba2 2303 	umull	r2, r3, r2, r3
 8007de6:	099b      	lsrs	r3, r3, #6
 8007de8:	4a09      	ldr	r2, [pc, #36]	; (8007e10 <vPortSetupTimerInterrupt+0x44>)
 8007dea:	3b01      	subs	r3, #1
 8007dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dee:	4b04      	ldr	r3, [pc, #16]	; (8007e00 <vPortSetupTimerInterrupt+0x34>)
 8007df0:	2207      	movs	r2, #7
 8007df2:	601a      	str	r2, [r3, #0]
}
 8007df4:	bf00      	nop
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	e000e010 	.word	0xe000e010
 8007e04:	e000e018 	.word	0xe000e018
 8007e08:	24000000 	.word	0x24000000
 8007e0c:	10624dd3 	.word	0x10624dd3
 8007e10:	e000e014 	.word	0xe000e014

08007e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e24 <vPortEnableVFP+0x10>
 8007e18:	6801      	ldr	r1, [r0, #0]
 8007e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e1e:	6001      	str	r1, [r0, #0]
 8007e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e22:	bf00      	nop
 8007e24:	e000ed88 	.word	0xe000ed88

08007e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e2e:	f3ef 8305 	mrs	r3, IPSR
 8007e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b0f      	cmp	r3, #15
 8007e38:	d914      	bls.n	8007e64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e3a:	4a17      	ldr	r2, [pc, #92]	; (8007e98 <vPortValidateInterruptPriority+0x70>)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e44:	4b15      	ldr	r3, [pc, #84]	; (8007e9c <vPortValidateInterruptPriority+0x74>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	7afa      	ldrb	r2, [r7, #11]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d20a      	bcs.n	8007e64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	607b      	str	r3, [r7, #4]
}
 8007e60:	bf00      	nop
 8007e62:	e7fe      	b.n	8007e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e64:	4b0e      	ldr	r3, [pc, #56]	; (8007ea0 <vPortValidateInterruptPriority+0x78>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <vPortValidateInterruptPriority+0x7c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d90a      	bls.n	8007e8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	603b      	str	r3, [r7, #0]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <vPortValidateInterruptPriority+0x60>
	}
 8007e8a:	bf00      	nop
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	e000e3f0 	.word	0xe000e3f0
 8007e9c:	24000f2c 	.word	0x24000f2c
 8007ea0:	e000ed0c 	.word	0xe000ed0c
 8007ea4:	24000f30 	.word	0x24000f30

08007ea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08a      	sub	sp, #40	; 0x28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007eb4:	f7fe fd8e 	bl	80069d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007eb8:	4b5b      	ldr	r3, [pc, #364]	; (8008028 <pvPortMalloc+0x180>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ec0:	f000 f920 	bl	8008104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ec4:	4b59      	ldr	r3, [pc, #356]	; (800802c <pvPortMalloc+0x184>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f040 8093 	bne.w	8007ff8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01d      	beq.n	8007f14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ed8:	2208      	movs	r2, #8
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4413      	add	r3, r2
 8007ede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d014      	beq.n	8007f14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f023 0307 	bic.w	r3, r3, #7
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00a      	beq.n	8007f14 <pvPortMalloc+0x6c>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	617b      	str	r3, [r7, #20]
}
 8007f10:	bf00      	nop
 8007f12:	e7fe      	b.n	8007f12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d06e      	beq.n	8007ff8 <pvPortMalloc+0x150>
 8007f1a:	4b45      	ldr	r3, [pc, #276]	; (8008030 <pvPortMalloc+0x188>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d869      	bhi.n	8007ff8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f24:	4b43      	ldr	r3, [pc, #268]	; (8008034 <pvPortMalloc+0x18c>)
 8007f26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f28:	4b42      	ldr	r3, [pc, #264]	; (8008034 <pvPortMalloc+0x18c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f2e:	e004      	b.n	8007f3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d903      	bls.n	8007f4c <pvPortMalloc+0xa4>
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1f1      	bne.n	8007f30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f4c:	4b36      	ldr	r3, [pc, #216]	; (8008028 <pvPortMalloc+0x180>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d050      	beq.n	8007ff8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2208      	movs	r2, #8
 8007f5c:	4413      	add	r3, r2
 8007f5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	1ad2      	subs	r2, r2, r3
 8007f70:	2308      	movs	r3, #8
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d91f      	bls.n	8007fb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <pvPortMalloc+0xf8>
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	613b      	str	r3, [r7, #16]
}
 8007f9c:	bf00      	nop
 8007f9e:	e7fe      	b.n	8007f9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	1ad2      	subs	r2, r2, r3
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fb2:	69b8      	ldr	r0, [r7, #24]
 8007fb4:	f000 f908 	bl	80081c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fb8:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <pvPortMalloc+0x188>)
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	4a1b      	ldr	r2, [pc, #108]	; (8008030 <pvPortMalloc+0x188>)
 8007fc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fc6:	4b1a      	ldr	r3, [pc, #104]	; (8008030 <pvPortMalloc+0x188>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	4b1b      	ldr	r3, [pc, #108]	; (8008038 <pvPortMalloc+0x190>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d203      	bcs.n	8007fda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fd2:	4b17      	ldr	r3, [pc, #92]	; (8008030 <pvPortMalloc+0x188>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a18      	ldr	r2, [pc, #96]	; (8008038 <pvPortMalloc+0x190>)
 8007fd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	4b13      	ldr	r3, [pc, #76]	; (800802c <pvPortMalloc+0x184>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007fee:	4b13      	ldr	r3, [pc, #76]	; (800803c <pvPortMalloc+0x194>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	4a11      	ldr	r2, [pc, #68]	; (800803c <pvPortMalloc+0x194>)
 8007ff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ff8:	f7fe fcfa 	bl	80069f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <pvPortMalloc+0x174>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	60fb      	str	r3, [r7, #12]
}
 8008018:	bf00      	nop
 800801a:	e7fe      	b.n	800801a <pvPortMalloc+0x172>
	return pvReturn;
 800801c:	69fb      	ldr	r3, [r7, #28]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3728      	adds	r7, #40	; 0x28
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	24004b3c 	.word	0x24004b3c
 800802c:	24004b50 	.word	0x24004b50
 8008030:	24004b40 	.word	0x24004b40
 8008034:	24004b34 	.word	0x24004b34
 8008038:	24004b44 	.word	0x24004b44
 800803c:	24004b48 	.word	0x24004b48

08008040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d04d      	beq.n	80080ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008052:	2308      	movs	r3, #8
 8008054:	425b      	negs	r3, r3
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	4413      	add	r3, r2
 800805a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <vPortFree+0xb8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4013      	ands	r3, r2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <vPortFree+0x44>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	60fb      	str	r3, [r7, #12]
}
 8008080:	bf00      	nop
 8008082:	e7fe      	b.n	8008082 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00a      	beq.n	80080a2 <vPortFree+0x62>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	60bb      	str	r3, [r7, #8]
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	4b14      	ldr	r3, [pc, #80]	; (80080f8 <vPortFree+0xb8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4013      	ands	r3, r2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01e      	beq.n	80080ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d11a      	bne.n	80080ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	4b0e      	ldr	r3, [pc, #56]	; (80080f8 <vPortFree+0xb8>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	43db      	mvns	r3, r3
 80080c2:	401a      	ands	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080c8:	f7fe fc84 	bl	80069d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <vPortFree+0xbc>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4413      	add	r3, r2
 80080d6:	4a09      	ldr	r2, [pc, #36]	; (80080fc <vPortFree+0xbc>)
 80080d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080da:	6938      	ldr	r0, [r7, #16]
 80080dc:	f000 f874 	bl	80081c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80080e0:	4b07      	ldr	r3, [pc, #28]	; (8008100 <vPortFree+0xc0>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3301      	adds	r3, #1
 80080e6:	4a06      	ldr	r2, [pc, #24]	; (8008100 <vPortFree+0xc0>)
 80080e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80080ea:	f7fe fc81 	bl	80069f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080ee:	bf00      	nop
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	24004b50 	.word	0x24004b50
 80080fc:	24004b40 	.word	0x24004b40
 8008100:	24004b4c 	.word	0x24004b4c

08008104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800810a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800810e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008110:	4b27      	ldr	r3, [pc, #156]	; (80081b0 <prvHeapInit+0xac>)
 8008112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00c      	beq.n	8008138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3307      	adds	r3, #7
 8008122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 0307 	bic.w	r3, r3, #7
 800812a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	4a1f      	ldr	r2, [pc, #124]	; (80081b0 <prvHeapInit+0xac>)
 8008134:	4413      	add	r3, r2
 8008136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800813c:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <prvHeapInit+0xb0>)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008142:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <prvHeapInit+0xb0>)
 8008144:	2200      	movs	r2, #0
 8008146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	4413      	add	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008150:	2208      	movs	r2, #8
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	1a9b      	subs	r3, r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0307 	bic.w	r3, r3, #7
 800815e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4a15      	ldr	r2, [pc, #84]	; (80081b8 <prvHeapInit+0xb4>)
 8008164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008166:	4b14      	ldr	r3, [pc, #80]	; (80081b8 <prvHeapInit+0xb4>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2200      	movs	r2, #0
 800816c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800816e:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <prvHeapInit+0xb4>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <prvHeapInit+0xb4>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	4a0a      	ldr	r2, [pc, #40]	; (80081bc <prvHeapInit+0xb8>)
 8008192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	4a09      	ldr	r2, [pc, #36]	; (80081c0 <prvHeapInit+0xbc>)
 800819a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800819c:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <prvHeapInit+0xc0>)
 800819e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	24000f34 	.word	0x24000f34
 80081b4:	24004b34 	.word	0x24004b34
 80081b8:	24004b3c 	.word	0x24004b3c
 80081bc:	24004b44 	.word	0x24004b44
 80081c0:	24004b40 	.word	0x24004b40
 80081c4:	24004b50 	.word	0x24004b50

080081c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081d0:	4b28      	ldr	r3, [pc, #160]	; (8008274 <prvInsertBlockIntoFreeList+0xac>)
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	e002      	b.n	80081dc <prvInsertBlockIntoFreeList+0x14>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d8f7      	bhi.n	80081d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d108      	bne.n	800820a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	441a      	add	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	441a      	add	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d118      	bne.n	8008250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b15      	ldr	r3, [pc, #84]	; (8008278 <prvInsertBlockIntoFreeList+0xb0>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d00d      	beq.n	8008246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	441a      	add	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e008      	b.n	8008258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008246:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <prvInsertBlockIntoFreeList+0xb0>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	e003      	b.n	8008258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	429a      	cmp	r2, r3
 800825e:	d002      	beq.n	8008266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	24004b34 	.word	0x24004b34
 8008278:	24004b3c 	.word	0x24004b3c

0800827c <memset>:
 800827c:	4402      	add	r2, r0
 800827e:	4603      	mov	r3, r0
 8008280:	4293      	cmp	r3, r2
 8008282:	d100      	bne.n	8008286 <memset+0xa>
 8008284:	4770      	bx	lr
 8008286:	f803 1b01 	strb.w	r1, [r3], #1
 800828a:	e7f9      	b.n	8008280 <memset+0x4>

0800828c <_reclaim_reent>:
 800828c:	4b29      	ldr	r3, [pc, #164]	; (8008334 <_reclaim_reent+0xa8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4283      	cmp	r3, r0
 8008292:	b570      	push	{r4, r5, r6, lr}
 8008294:	4604      	mov	r4, r0
 8008296:	d04b      	beq.n	8008330 <_reclaim_reent+0xa4>
 8008298:	69c3      	ldr	r3, [r0, #28]
 800829a:	b143      	cbz	r3, 80082ae <_reclaim_reent+0x22>
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d144      	bne.n	800832c <_reclaim_reent+0xa0>
 80082a2:	69e3      	ldr	r3, [r4, #28]
 80082a4:	6819      	ldr	r1, [r3, #0]
 80082a6:	b111      	cbz	r1, 80082ae <_reclaim_reent+0x22>
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 f879 	bl	80083a0 <_free_r>
 80082ae:	6961      	ldr	r1, [r4, #20]
 80082b0:	b111      	cbz	r1, 80082b8 <_reclaim_reent+0x2c>
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 f874 	bl	80083a0 <_free_r>
 80082b8:	69e1      	ldr	r1, [r4, #28]
 80082ba:	b111      	cbz	r1, 80082c2 <_reclaim_reent+0x36>
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 f86f 	bl	80083a0 <_free_r>
 80082c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80082c4:	b111      	cbz	r1, 80082cc <_reclaim_reent+0x40>
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 f86a 	bl	80083a0 <_free_r>
 80082cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082ce:	b111      	cbz	r1, 80082d6 <_reclaim_reent+0x4a>
 80082d0:	4620      	mov	r0, r4
 80082d2:	f000 f865 	bl	80083a0 <_free_r>
 80082d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80082d8:	b111      	cbz	r1, 80082e0 <_reclaim_reent+0x54>
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 f860 	bl	80083a0 <_free_r>
 80082e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80082e2:	b111      	cbz	r1, 80082ea <_reclaim_reent+0x5e>
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 f85b 	bl	80083a0 <_free_r>
 80082ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80082ec:	b111      	cbz	r1, 80082f4 <_reclaim_reent+0x68>
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 f856 	bl	80083a0 <_free_r>
 80082f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80082f6:	b111      	cbz	r1, 80082fe <_reclaim_reent+0x72>
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 f851 	bl	80083a0 <_free_r>
 80082fe:	6a23      	ldr	r3, [r4, #32]
 8008300:	b1b3      	cbz	r3, 8008330 <_reclaim_reent+0xa4>
 8008302:	4620      	mov	r0, r4
 8008304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008308:	4718      	bx	r3
 800830a:	5949      	ldr	r1, [r1, r5]
 800830c:	b941      	cbnz	r1, 8008320 <_reclaim_reent+0x94>
 800830e:	3504      	adds	r5, #4
 8008310:	69e3      	ldr	r3, [r4, #28]
 8008312:	2d80      	cmp	r5, #128	; 0x80
 8008314:	68d9      	ldr	r1, [r3, #12]
 8008316:	d1f8      	bne.n	800830a <_reclaim_reent+0x7e>
 8008318:	4620      	mov	r0, r4
 800831a:	f000 f841 	bl	80083a0 <_free_r>
 800831e:	e7c0      	b.n	80082a2 <_reclaim_reent+0x16>
 8008320:	680e      	ldr	r6, [r1, #0]
 8008322:	4620      	mov	r0, r4
 8008324:	f000 f83c 	bl	80083a0 <_free_r>
 8008328:	4631      	mov	r1, r6
 800832a:	e7ef      	b.n	800830c <_reclaim_reent+0x80>
 800832c:	2500      	movs	r5, #0
 800832e:	e7ef      	b.n	8008310 <_reclaim_reent+0x84>
 8008330:	bd70      	pop	{r4, r5, r6, pc}
 8008332:	bf00      	nop
 8008334:	24000060 	.word	0x24000060

08008338 <__libc_init_array>:
 8008338:	b570      	push	{r4, r5, r6, lr}
 800833a:	4d0d      	ldr	r5, [pc, #52]	; (8008370 <__libc_init_array+0x38>)
 800833c:	4c0d      	ldr	r4, [pc, #52]	; (8008374 <__libc_init_array+0x3c>)
 800833e:	1b64      	subs	r4, r4, r5
 8008340:	10a4      	asrs	r4, r4, #2
 8008342:	2600      	movs	r6, #0
 8008344:	42a6      	cmp	r6, r4
 8008346:	d109      	bne.n	800835c <__libc_init_array+0x24>
 8008348:	4d0b      	ldr	r5, [pc, #44]	; (8008378 <__libc_init_array+0x40>)
 800834a:	4c0c      	ldr	r4, [pc, #48]	; (800837c <__libc_init_array+0x44>)
 800834c:	f000 f880 	bl	8008450 <_init>
 8008350:	1b64      	subs	r4, r4, r5
 8008352:	10a4      	asrs	r4, r4, #2
 8008354:	2600      	movs	r6, #0
 8008356:	42a6      	cmp	r6, r4
 8008358:	d105      	bne.n	8008366 <__libc_init_array+0x2e>
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008360:	4798      	blx	r3
 8008362:	3601      	adds	r6, #1
 8008364:	e7ee      	b.n	8008344 <__libc_init_array+0xc>
 8008366:	f855 3b04 	ldr.w	r3, [r5], #4
 800836a:	4798      	blx	r3
 800836c:	3601      	adds	r6, #1
 800836e:	e7f2      	b.n	8008356 <__libc_init_array+0x1e>
 8008370:	08008520 	.word	0x08008520
 8008374:	08008520 	.word	0x08008520
 8008378:	08008520 	.word	0x08008520
 800837c:	08008524 	.word	0x08008524

08008380 <__retarget_lock_acquire_recursive>:
 8008380:	4770      	bx	lr

08008382 <__retarget_lock_release_recursive>:
 8008382:	4770      	bx	lr

08008384 <memcpy>:
 8008384:	440a      	add	r2, r1
 8008386:	4291      	cmp	r1, r2
 8008388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800838c:	d100      	bne.n	8008390 <memcpy+0xc>
 800838e:	4770      	bx	lr
 8008390:	b510      	push	{r4, lr}
 8008392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800839a:	4291      	cmp	r1, r2
 800839c:	d1f9      	bne.n	8008392 <memcpy+0xe>
 800839e:	bd10      	pop	{r4, pc}

080083a0 <_free_r>:
 80083a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083a2:	2900      	cmp	r1, #0
 80083a4:	d044      	beq.n	8008430 <_free_r+0x90>
 80083a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083aa:	9001      	str	r0, [sp, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f1a1 0404 	sub.w	r4, r1, #4
 80083b2:	bfb8      	it	lt
 80083b4:	18e4      	addlt	r4, r4, r3
 80083b6:	f000 f83f 	bl	8008438 <__malloc_lock>
 80083ba:	4a1e      	ldr	r2, [pc, #120]	; (8008434 <_free_r+0x94>)
 80083bc:	9801      	ldr	r0, [sp, #4]
 80083be:	6813      	ldr	r3, [r2, #0]
 80083c0:	b933      	cbnz	r3, 80083d0 <_free_r+0x30>
 80083c2:	6063      	str	r3, [r4, #4]
 80083c4:	6014      	str	r4, [r2, #0]
 80083c6:	b003      	add	sp, #12
 80083c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083cc:	f000 b83a 	b.w	8008444 <__malloc_unlock>
 80083d0:	42a3      	cmp	r3, r4
 80083d2:	d908      	bls.n	80083e6 <_free_r+0x46>
 80083d4:	6825      	ldr	r5, [r4, #0]
 80083d6:	1961      	adds	r1, r4, r5
 80083d8:	428b      	cmp	r3, r1
 80083da:	bf01      	itttt	eq
 80083dc:	6819      	ldreq	r1, [r3, #0]
 80083de:	685b      	ldreq	r3, [r3, #4]
 80083e0:	1949      	addeq	r1, r1, r5
 80083e2:	6021      	streq	r1, [r4, #0]
 80083e4:	e7ed      	b.n	80083c2 <_free_r+0x22>
 80083e6:	461a      	mov	r2, r3
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	b10b      	cbz	r3, 80083f0 <_free_r+0x50>
 80083ec:	42a3      	cmp	r3, r4
 80083ee:	d9fa      	bls.n	80083e6 <_free_r+0x46>
 80083f0:	6811      	ldr	r1, [r2, #0]
 80083f2:	1855      	adds	r5, r2, r1
 80083f4:	42a5      	cmp	r5, r4
 80083f6:	d10b      	bne.n	8008410 <_free_r+0x70>
 80083f8:	6824      	ldr	r4, [r4, #0]
 80083fa:	4421      	add	r1, r4
 80083fc:	1854      	adds	r4, r2, r1
 80083fe:	42a3      	cmp	r3, r4
 8008400:	6011      	str	r1, [r2, #0]
 8008402:	d1e0      	bne.n	80083c6 <_free_r+0x26>
 8008404:	681c      	ldr	r4, [r3, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	6053      	str	r3, [r2, #4]
 800840a:	440c      	add	r4, r1
 800840c:	6014      	str	r4, [r2, #0]
 800840e:	e7da      	b.n	80083c6 <_free_r+0x26>
 8008410:	d902      	bls.n	8008418 <_free_r+0x78>
 8008412:	230c      	movs	r3, #12
 8008414:	6003      	str	r3, [r0, #0]
 8008416:	e7d6      	b.n	80083c6 <_free_r+0x26>
 8008418:	6825      	ldr	r5, [r4, #0]
 800841a:	1961      	adds	r1, r4, r5
 800841c:	428b      	cmp	r3, r1
 800841e:	bf04      	itt	eq
 8008420:	6819      	ldreq	r1, [r3, #0]
 8008422:	685b      	ldreq	r3, [r3, #4]
 8008424:	6063      	str	r3, [r4, #4]
 8008426:	bf04      	itt	eq
 8008428:	1949      	addeq	r1, r1, r5
 800842a:	6021      	streq	r1, [r4, #0]
 800842c:	6054      	str	r4, [r2, #4]
 800842e:	e7ca      	b.n	80083c6 <_free_r+0x26>
 8008430:	b003      	add	sp, #12
 8008432:	bd30      	pop	{r4, r5, pc}
 8008434:	24004c90 	.word	0x24004c90

08008438 <__malloc_lock>:
 8008438:	4801      	ldr	r0, [pc, #4]	; (8008440 <__malloc_lock+0x8>)
 800843a:	f7ff bfa1 	b.w	8008380 <__retarget_lock_acquire_recursive>
 800843e:	bf00      	nop
 8008440:	24004c8c 	.word	0x24004c8c

08008444 <__malloc_unlock>:
 8008444:	4801      	ldr	r0, [pc, #4]	; (800844c <__malloc_unlock+0x8>)
 8008446:	f7ff bf9c 	b.w	8008382 <__retarget_lock_release_recursive>
 800844a:	bf00      	nop
 800844c:	24004c8c 	.word	0x24004c8c

08008450 <_init>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	bf00      	nop
 8008454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008456:	bc08      	pop	{r3}
 8008458:	469e      	mov	lr, r3
 800845a:	4770      	bx	lr

0800845c <_fini>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr
